
build/debug/f407_disc_LVGL_DMA_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029734  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047b4  080298bc  080298bc  0002a8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e070  0802e070  0002f070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802e078  0802e078  0002f078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802e07c  0802e07c  0002f07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  20000000  0802e080  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003009c  2**0
                  CONTENTS
  8 .bss          000089b0  2000009c  2000009c  0003009c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  20008a4c  20008a4c  0003009c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 11 .comment      00000038  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   001001b9  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00018386  00000000  00000000  001302bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00045157  00000000  00000000  00148643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004258  00000000  00000000  0018d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000041b4  00000000  00000000  001919f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00069d3c  00000000  00000000  00195bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001549e  00000000  00000000  001ff8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000c5f8  00000000  00000000  00214d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000004c  00000000  00000000  00221380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <strcmp>:
 8000188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800018c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000190:	2a01      	cmp	r2, #1
 8000192:	bf28      	it	cs
 8000194:	429a      	cmpcs	r2, r3
 8000196:	d0f7      	beq.n	8000188 <strcmp>
 8000198:	1ad0      	subs	r0, r2, r3
 800019a:	4770      	bx	lr

0800019c <strlen>:
 800019c:	4603      	mov	r3, r0
 800019e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001a2:	2a00      	cmp	r2, #0
 80001a4:	d1fb      	bne.n	800019e <strlen+0x2>
 80001a6:	1a18      	subs	r0, r3, r0
 80001a8:	3801      	subs	r0, #1
 80001aa:	4770      	bx	lr

080001ac <__aeabi_uldivmod>:
 80001ac:	b953      	cbnz	r3, 80001c4 <__aeabi_uldivmod+0x18>
 80001ae:	b94a      	cbnz	r2, 80001c4 <__aeabi_uldivmod+0x18>
 80001b0:	2900      	cmp	r1, #0
 80001b2:	bf08      	it	eq
 80001b4:	2800      	cmpeq	r0, #0
 80001b6:	bf1c      	itt	ne
 80001b8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001bc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001c0:	f000 b80c 	b.w	80001dc <__aeabi_idiv0>
 80001c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001cc:	f029 fa0c 	bl	80295e8 <__udivmoddi4>
 80001d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d8:	b004      	add	sp, #16
 80001da:	4770      	bx	lr

080001dc <__aeabi_idiv0>:
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000009c 	.word	0x2000009c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080298a4 	.word	0x080298a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a0 	.word	0x200000a0
 800021c:	080298a4 	.word	0x080298a4

08000220 <disp_flush>:

/*Flush the content of the internal buffer the specific area on the display
 *You can use DMA or any hardware acceleration to do this operation in the background but
 *'lv_disp_flush_ready()' has to be called when finished.*/
static void disp_flush(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p)
{
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	4615      	mov	r5, r2
    //ST7789V_Select();
    int height = area->y2 - area->y1 + 1;
 8000224:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8000228:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 800022c:	1bde      	subs	r6, r3, r7
 800022e:	3601      	adds	r6, #1
	int width = area->x2 - area->x1 + 1;
 8000230:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8000234:	f9b1 0000 	ldrsh.w	r0, [r1]
 8000238:	1a14      	subs	r4, r2, r0
 800023a:	3401      	adds	r4, #1

	
	ST7789V_SetAddressWindow(area->x1, area->y1, area->x2, area->y2);
 800023c:	b29b      	uxth	r3, r3
 800023e:	b292      	uxth	r2, r2
 8000240:	b2b9      	uxth	r1, r7
 8000242:	b280      	uxth	r0, r0
 8000244:	f027 fdc1 	bl	8027dca <ST7789V_SetAddressWindow>

    ST7789V_Select();
 8000248:	4f0f      	ldr	r7, [pc, #60]	@ (8000288 <disp_flush+0x68>)
 800024a:	2200      	movs	r2, #0
 800024c:	2104      	movs	r1, #4
 800024e:	4638      	mov	r0, r7
 8000250:	f028 fad4 	bl	80287fc <HAL_GPIO_WritePin>
    ST7789V_DC_Set();
 8000254:	2201      	movs	r2, #1
 8000256:	2102      	movs	r1, #2
 8000258:	4638      	mov	r0, r7
 800025a:	f028 facf 	bl	80287fc <HAL_GPIO_WritePin>
    
    //HAL_SPI_Transmit(&ST7789V_SPI_PORT, (uint8_t *)color_p , width*height*2, 10);
    HAL_SPI_Transmit_DMA(&ST7789V_SPI_PORT, (uint8_t *)color_p , width*height*2);
 800025e:	fb14 f406 	smulbb	r4, r4, r6
 8000262:	0064      	lsls	r4, r4, #1
 8000264:	b2a2      	uxth	r2, r4
 8000266:	4629      	mov	r1, r5
 8000268:	4808      	ldr	r0, [pc, #32]	@ (800028c <disp_flush+0x6c>)
 800026a:	f028 ffdb 	bl	8029224 <HAL_SPI_Transmit_DMA>
    while (ST7789V_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY){}
 800026e:	4b07      	ldr	r3, [pc, #28]	@ (800028c <disp_flush+0x6c>)
 8000270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000272:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000276:	b2db      	uxtb	r3, r3
 8000278:	2b01      	cmp	r3, #1
 800027a:	d1f8      	bne.n	800026e <disp_flush+0x4e>
    ST7789V_UnSelect();
 800027c:	2201      	movs	r2, #1
 800027e:	2104      	movs	r1, #4
 8000280:	4801      	ldr	r0, [pc, #4]	@ (8000288 <disp_flush+0x68>)
 8000282:	f028 fabb 	bl	80287fc <HAL_GPIO_WritePin>
                
    /*Inform the graphics library that you are ready with the flushing*/
    //lv_disp_flush_ready(disp_drv);
}
 8000286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000288:	40020000 	.word	0x40020000
 800028c:	200089f0 	.word	0x200089f0

08000290 <disp_init>:
{
 8000290:	b508      	push	{r3, lr}
    ST7789V_Init();
 8000292:	f027 fdc9 	bl	8027e28 <ST7789V_Init>
}
 8000296:	bd08      	pop	{r3, pc}

08000298 <lv_port_disp_init>:
{
 8000298:	b538      	push	{r3, r4, r5, lr}
    disp_init();
 800029a:	f7ff fff9 	bl	8000290 <disp_init>
    lv_disp_draw_buf_init(&draw_buf_dsc_2, buf_2_1, buf_2_2, MY_DISP_HOR_RES * 20);   /*Initialize the display buffer*/
 800029e:	4d0c      	ldr	r5, [pc, #48]	@ (80002d0 <lv_port_disp_init+0x38>)
 80002a0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80002a4:	4a0b      	ldr	r2, [pc, #44]	@ (80002d4 <lv_port_disp_init+0x3c>)
 80002a6:	490c      	ldr	r1, [pc, #48]	@ (80002d8 <lv_port_disp_init+0x40>)
 80002a8:	4628      	mov	r0, r5
 80002aa:	f012 ff37 	bl	801311c <lv_disp_draw_buf_init>
    lv_disp_drv_init(&disp_drv);                    /*Basic initialization*/
 80002ae:	4c0b      	ldr	r4, [pc, #44]	@ (80002dc <lv_port_disp_init+0x44>)
 80002b0:	4620      	mov	r0, r4
 80002b2:	f012 ff09 	bl	80130c8 <lv_disp_drv_init>
    disp_drv.hor_res = MY_DISP_HOR_RES;
 80002b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80002ba:	8023      	strh	r3, [r4, #0]
    disp_drv.ver_res = MY_DISP_VER_RES;
 80002bc:	23f0      	movs	r3, #240	@ 0xf0
 80002be:	8063      	strh	r3, [r4, #2]
    disp_drv.flush_cb = disp_flush;
 80002c0:	4b07      	ldr	r3, [pc, #28]	@ (80002e0 <lv_port_disp_init+0x48>)
 80002c2:	6163      	str	r3, [r4, #20]
    disp_drv.draw_buf = &draw_buf_dsc_2;
 80002c4:	60e5      	str	r5, [r4, #12]
    lv_disp_drv_register(&disp_drv);
 80002c6:	4620      	mov	r0, r4
 80002c8:	f012 ff36 	bl	8013138 <lv_disp_drv_register>
}
 80002cc:	bd38      	pop	{r3, r4, r5, pc}
 80002ce:	bf00      	nop
 80002d0:	200064b8 	.word	0x200064b8
 80002d4:	200000b8 	.word	0x200000b8
 80002d8:	200032b8 	.word	0x200032b8
 80002dc:	200064d4 	.word	0x200064d4
 80002e0:	08000221 	.word	0x08000221

080002e4 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80002e4:	b508      	push	{r3, lr}
    lv_disp_flush_ready(&disp_drv);
 80002e6:	4802      	ldr	r0, [pc, #8]	@ (80002f0 <HAL_SPI_TxCpltCallback+0xc>)
 80002e8:	f013 f80d 	bl	8013306 <lv_disp_flush_ready>
}
 80002ec:	bd08      	pop	{r3, pc}
 80002ee:	bf00      	nop
 80002f0:	200064d4 	.word	0x200064d4

080002f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002f4:	b500      	push	{lr}
 80002f6:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80002f8:	2100      	movs	r1, #0
 80002fa:	9101      	str	r1, [sp, #4]
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_DMA_Init+0x30>)
 80002fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000300:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000304:	631a      	str	r2, [r3, #48]	@ 0x30
 8000306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000310:	460a      	mov	r2, r1
 8000312:	203b      	movs	r0, #59	@ 0x3b
 8000314:	f027 ff32 	bl	802817c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000318:	203b      	movs	r0, #59	@ 0x3b
 800031a:	f027 ff3f 	bl	802819c <HAL_NVIC_EnableIRQ>

}
 800031e:	b003      	add	sp, #12
 8000320:	f85d fb04 	ldr.w	pc, [sp], #4
 8000324:	40023800 	.word	0x40023800

08000328 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800032c:	b08d      	sub	sp, #52	@ 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	2400      	movs	r4, #0
 8000330:	9407      	str	r4, [sp, #28]
 8000332:	9408      	str	r4, [sp, #32]
 8000334:	9409      	str	r4, [sp, #36]	@ 0x24
 8000336:	940a      	str	r4, [sp, #40]	@ 0x28
 8000338:	940b      	str	r4, [sp, #44]	@ 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800033a:	9401      	str	r4, [sp, #4]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <MX_GPIO_Init+0x1fc>)
 800033e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000340:	f042 0210 	orr.w	r2, r2, #16
 8000344:	631a      	str	r2, [r3, #48]	@ 0x30
 8000346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000348:	f002 0210 	and.w	r2, r2, #16
 800034c:	9201      	str	r2, [sp, #4]
 800034e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	9402      	str	r4, [sp, #8]
 8000352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000354:	f042 0204 	orr.w	r2, r2, #4
 8000358:	631a      	str	r2, [r3, #48]	@ 0x30
 800035a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800035c:	f002 0204 	and.w	r2, r2, #4
 8000360:	9202      	str	r2, [sp, #8]
 8000362:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000364:	9403      	str	r4, [sp, #12]
 8000366:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000368:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800036c:	631a      	str	r2, [r3, #48]	@ 0x30
 800036e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000370:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000374:	9203      	str	r2, [sp, #12]
 8000376:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	9404      	str	r4, [sp, #16]
 800037a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800037c:	f042 0201 	orr.w	r2, r2, #1
 8000380:	631a      	str	r2, [r3, #48]	@ 0x30
 8000382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000384:	f002 0201 	and.w	r2, r2, #1
 8000388:	9204      	str	r2, [sp, #16]
 800038a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038c:	9405      	str	r4, [sp, #20]
 800038e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000390:	f042 0202 	orr.w	r2, r2, #2
 8000394:	631a      	str	r2, [r3, #48]	@ 0x30
 8000396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000398:	f002 0202 	and.w	r2, r2, #2
 800039c:	9205      	str	r2, [sp, #20]
 800039e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a0:	9406      	str	r4, [sp, #24]
 80003a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80003a4:	f042 0208 	orr.w	r2, r2, #8
 80003a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	9306      	str	r3, [sp, #24]
 80003b2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80003b4:	4f5c      	ldr	r7, [pc, #368]	@ (8000528 <MX_GPIO_Init+0x200>)
 80003b6:	4622      	mov	r2, r4
 80003b8:	2108      	movs	r1, #8
 80003ba:	4638      	mov	r0, r7
 80003bc:	f028 fa1e 	bl	80287fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80003c0:	f8df 916c 	ldr.w	r9, [pc, #364]	@ 8000530 <MX_GPIO_Init+0x208>
 80003c4:	2201      	movs	r2, #1
 80003c6:	4611      	mov	r1, r2
 80003c8:	4648      	mov	r0, r9
 80003ca:	f028 fa17 	bl	80287fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80003ce:	f8df b164 	ldr.w	fp, [pc, #356]	@ 8000534 <MX_GPIO_Init+0x20c>
 80003d2:	4622      	mov	r2, r4
 80003d4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80003d8:	4658      	mov	r0, fp
 80003da:	f028 fa0f 	bl	80287fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, ST7789V_DC_PIN | ST7789V_RST_PIN, GPIO_PIN_RESET);
 80003de:	4622      	mov	r2, r4
 80003e0:	210a      	movs	r1, #10
 80003e2:	4638      	mov	r0, r7
 80003e4:	f028 fa0a 	bl	80287fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789V_CS_PORT, ST7789V_CS_PIN, GPIO_PIN_SET);
 80003e8:	4e50      	ldr	r6, [pc, #320]	@ (800052c <MX_GPIO_Init+0x204>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	2104      	movs	r1, #4
 80003ee:	4630      	mov	r0, r6
 80003f0:	f028 fa04 	bl	80287fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ST7789V_DC_PIN | ST7789V_RST_PIN;
 80003f4:	230a      	movs	r3, #10
 80003f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2501      	movs	r5, #1
 80003fa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	a907      	add	r1, sp, #28
 8000402:	4630      	mov	r0, r6
 8000404:	f028 f904 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ST7789V_CS_PIN;
 8000408:	f04f 0a04 	mov.w	sl, #4
 800040c:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(ST7789V_CS_PORT, &GPIO_InitStruct);
 8000416:	a907      	add	r1, sp, #28
 8000418:	4630      	mov	r0, r6
 800041a:	f028 f8f9 	bl	8028610 <HAL_GPIO_Init>


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800041e:	f04f 0808 	mov.w	r8, #8
 8000422:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800042c:	a907      	add	r1, sp, #28
 800042e:	4638      	mov	r0, r7
 8000430:	f028 f8ee 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000434:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800043c:	a907      	add	r1, sp, #28
 800043e:	4648      	mov	r0, r9
 8000440:	f028 f8e6 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000444:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000448:	f04f 0802 	mov.w	r8, #2
 800044c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000454:	2305      	movs	r3, #5
 8000456:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000458:	a907      	add	r1, sp, #28
 800045a:	4648      	mov	r0, r9
 800045c:	f028 f8d8 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000460:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000462:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000466:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046a:	a907      	add	r1, sp, #28
 800046c:	4630      	mov	r0, r6
 800046e:	f028 f8cf 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000472:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800047a:	f5a9 6980 	sub.w	r9, r9, #1024	@ 0x400
 800047e:	a907      	add	r1, sp, #28
 8000480:	4648      	mov	r0, r9
 8000482:	f028 f8c5 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000494:	2305      	movs	r3, #5
 8000496:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000498:	a907      	add	r1, sp, #28
 800049a:	4648      	mov	r0, r9
 800049c:	f028 f8b8 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80004a0:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80004a4:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004ac:	a907      	add	r1, sp, #28
 80004ae:	4658      	mov	r0, fp
 80004b0:	f028 f8ae 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80004b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004b8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ba:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80004be:	a907      	add	r1, sp, #28
 80004c0:	4630      	mov	r0, r6
 80004c2:	f028 f8a5 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80004c6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80004ca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004cc:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	9409      	str	r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80004d4:	230a      	movs	r3, #10
 80004d6:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	a907      	add	r1, sp, #28
 80004da:	4630      	mov	r0, r6
 80004dc:	f028 f898 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80004e0:	2320      	movs	r3, #32
 80004e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80004e8:	a907      	add	r1, sp, #28
 80004ea:	4658      	mov	r0, fp
 80004ec:	f028 f890 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80004f0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80004f4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f6:	2312      	movs	r3, #18
 80004f8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fc:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004fe:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	a907      	add	r1, sp, #28
 8000504:	4648      	mov	r0, r9
 8000506:	f028 f883 	bl	8028610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800050a:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800050e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000512:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000516:	a907      	add	r1, sp, #28
 8000518:	4638      	mov	r0, r7
 800051a:	f028 f879 	bl	8028610 <HAL_GPIO_Init>

}
 800051e:	b00d      	add	sp, #52	@ 0x34
 8000520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000524:	40023800 	.word	0x40023800
 8000528:	40021000 	.word	0x40021000
 800052c:	40020000 	.word	0x40020000
 8000530:	40020800 	.word	0x40020800
 8000534:	40020c00 	.word	0x40020c00

08000538 <anim_mark_list_change>:
        }
    }
}

static void anim_mark_list_change(void)
{
 8000538:	b508      	push	{r3, lr}
    anim_list_changed = true;
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <anim_mark_list_change+0x24>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
 8000540:	4807      	ldr	r0, [pc, #28]	@ (8000560 <anim_mark_list_change+0x28>)
 8000542:	f016 f80e 	bl	8016562 <_lv_ll_get_head>
 8000546:	b120      	cbz	r0, 8000552 <anim_mark_list_change+0x1a>
        lv_timer_pause(_lv_anim_tmr);
    else
        lv_timer_resume(_lv_anim_tmr);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <anim_mark_list_change+0x2c>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	f026 fa5f 	bl	8026a0e <lv_timer_resume>
}
 8000550:	bd08      	pop	{r3, pc}
        lv_timer_pause(_lv_anim_tmr);
 8000552:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <anim_mark_list_change+0x2c>)
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	f026 fa55 	bl	8026a04 <lv_timer_pause>
 800055a:	e7f9      	b.n	8000550 <anim_mark_list_change+0x18>
 800055c:	20006529 	.word	0x20006529
 8000560:	2000683c 	.word	0x2000683c
 8000564:	20006524 	.word	0x20006524

08000568 <anim_ready_handler>:
{
 8000568:	b510      	push	{r4, lr}
 800056a:	4604      	mov	r4, r0
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
 800056c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8000570:	f013 0302 	ands.w	r3, r3, #2
 8000574:	d109      	bne.n	800058a <anim_ready_handler+0x22>
 8000576:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 800057a:	b132      	cbz	r2, 800058a <anim_ready_handler+0x22>
 800057c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000580:	428a      	cmp	r2, r1
 8000582:	d002      	beq.n	800058a <anim_ready_handler+0x22>
        a->repeat_cnt--;
 8000584:	3a01      	subs	r2, #1
 8000586:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
    if(a->repeat_cnt == 0 && (a->playback_time == 0 || a->playback_now == 1)) {
 800058a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 800058e:	b9a2      	cbnz	r2, 80005ba <anim_ready_handler+0x52>
 8000590:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000592:	b102      	cbz	r2, 8000596 <anim_ready_handler+0x2e>
 8000594:	b18b      	cbz	r3, 80005ba <anim_ready_handler+0x52>
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 8000596:	4621      	mov	r1, r4
 8000598:	4815      	ldr	r0, [pc, #84]	@ (80005f0 <anim_ready_handler+0x88>)
 800059a:	f016 f824 	bl	80165e6 <_lv_ll_remove>
        anim_mark_list_change();
 800059e:	f7ff ffcb 	bl	8000538 <anim_mark_list_change>
        if(a->ready_cb != NULL) a->ready_cb(a);
 80005a2:	68e3      	ldr	r3, [r4, #12]
 80005a4:	b10b      	cbz	r3, 80005aa <anim_ready_handler+0x42>
 80005a6:	4620      	mov	r0, r4
 80005a8:	4798      	blx	r3
        if(a->deleted_cb != NULL) a->deleted_cb(a);
 80005aa:	6923      	ldr	r3, [r4, #16]
 80005ac:	b10b      	cbz	r3, 80005b2 <anim_ready_handler+0x4a>
 80005ae:	4620      	mov	r0, r4
 80005b0:	4798      	blx	r3
        lv_mem_free(a);
 80005b2:	4620      	mov	r0, r4
 80005b4:	f016 f9ce 	bl	8016954 <lv_mem_free>
 80005b8:	e018      	b.n	80005ec <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
 80005ba:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80005bc:	4252      	negs	r2, r2
 80005be:	6322      	str	r2, [r4, #48]	@ 0x30
        if(a->playback_time != 0) {
 80005c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80005c2:	b19a      	cbz	r2, 80005ec <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
 80005c4:	b913      	cbnz	r3, 80005cc <anim_ready_handler+0x64>
 80005c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80005c8:	4249      	negs	r1, r1
 80005ca:	6321      	str	r1, [r4, #48]	@ 0x30
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 80005cc:	fab3 f383 	clz	r3, r3
 80005d0:	095b      	lsrs	r3, r3, #5
 80005d2:	f894 1042 	ldrb.w	r1, [r4, #66]	@ 0x42
 80005d6:	f363 0141 	bfi	r1, r3, #1, #1
 80005da:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
            int32_t tmp    = a->start_value;
 80005de:	6a23      	ldr	r3, [r4, #32]
            a->start_value = a->end_value;
 80005e0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80005e2:	6221      	str	r1, [r4, #32]
            a->end_value   = tmp;
 80005e4:	62a3      	str	r3, [r4, #40]	@ 0x28
            tmp = a->time;
 80005e6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            a->time = a->playback_time;
 80005e8:	62e2      	str	r2, [r4, #44]	@ 0x2c
            a->playback_time = tmp;
 80005ea:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80005ec:	bd10      	pop	{r4, pc}
 80005ee:	bf00      	nop
 80005f0:	2000683c 	.word	0x2000683c

080005f4 <anim_timer>:
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
    uint32_t elaps = lv_tick_elaps(last_timer_run);
 80005f6:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <anim_timer+0xf0>)
 80005f8:	6818      	ldr	r0, [r3, #0]
 80005fa:	f012 fec5 	bl	8013388 <lv_tick_elaps>
 80005fe:	4605      	mov	r5, r0
    anim_run_round = anim_run_round ? false : true;
 8000600:	4a39      	ldr	r2, [pc, #228]	@ (80006e8 <anim_timer+0xf4>)
 8000602:	7813      	ldrb	r3, [r2, #0]
 8000604:	f083 0301 	eor.w	r3, r3, #1
 8000608:	7013      	strb	r3, [r2, #0]
    lv_anim_t * a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800060a:	4838      	ldr	r0, [pc, #224]	@ (80006ec <anim_timer+0xf8>)
 800060c:	f015 ffa9 	bl	8016562 <_lv_ll_get_head>
 8000610:	4604      	mov	r4, r0
    while(a != NULL) {
 8000612:	e025      	b.n	8000660 <anim_timer+0x6c>
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 8000614:	2900      	cmp	r1, #0
 8000616:	db3f      	blt.n	8000698 <anim_timer+0xa4>
                if(a->early_apply == 0 && a->get_value_cb) {
 8000618:	f012 0f01 	tst.w	r2, #1
 800061c:	d109      	bne.n	8000632 <anim_timer+0x3e>
 800061e:	6963      	ldr	r3, [r4, #20]
 8000620:	b13b      	cbz	r3, 8000632 <anim_timer+0x3e>
                    int32_t v_ofs = a->get_value_cb(a);
 8000622:	4620      	mov	r0, r4
 8000624:	4798      	blx	r3
                    a->start_value += v_ofs;
 8000626:	6a23      	ldr	r3, [r4, #32]
 8000628:	4403      	add	r3, r0
 800062a:	6223      	str	r3, [r4, #32]
                    a->end_value += v_ofs;
 800062c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800062e:	4403      	add	r3, r0
 8000630:	62a3      	str	r3, [r4, #40]	@ 0x28
                if(a->start_cb) a->start_cb(a);
 8000632:	68a3      	ldr	r3, [r4, #8]
 8000634:	b10b      	cbz	r3, 800063a <anim_timer+0x46>
 8000636:	4620      	mov	r0, r4
 8000638:	4798      	blx	r3
                a->start_cb_called = 1;
 800063a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000646:	e027      	b.n	8000698 <anim_timer+0xa4>
                if(a->act_time >= a->time) {
 8000648:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800064a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800064c:	429a      	cmp	r2, r3
 800064e:	da3a      	bge.n	80006c6 <anim_timer+0xd2>
        if(anim_list_changed)
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <anim_timer+0xfc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d03a      	beq.n	80006ce <anim_timer+0xda>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8000658:	4824      	ldr	r0, [pc, #144]	@ (80006ec <anim_timer+0xf8>)
 800065a:	f015 ff82 	bl	8016562 <_lv_ll_get_head>
 800065e:	4604      	mov	r4, r0
    while(a != NULL) {
 8000660:	2c00      	cmp	r4, #0
 8000662:	d03a      	beq.n	80006da <anim_timer+0xe6>
        anim_list_changed = false;
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <anim_timer+0xfc>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
        if(a->run_round != anim_run_round) {
 800066a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800066e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000672:	4a1d      	ldr	r2, [pc, #116]	@ (80006e8 <anim_timer+0xf4>)
 8000674:	7812      	ldrb	r2, [r2, #0]
 8000676:	4293      	cmp	r3, r2
 8000678:	d0ea      	beq.n	8000650 <anim_timer+0x5c>
            a->run_round = anim_run_round; /*The list readying might be reset so need to know which anim has run already*/
 800067a:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800067e:	f362 0382 	bfi	r3, r2, #2, #1
 8000682:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
            int32_t new_act_time = a->act_time + elaps;
 8000686:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000688:	1959      	adds	r1, r3, r5
            if(!a->start_cb_called && a->act_time <= 0 && new_act_time >= 0) {
 800068a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800068e:	f012 0f08 	tst.w	r2, #8
 8000692:	d101      	bne.n	8000698 <anim_timer+0xa4>
 8000694:	2b00      	cmp	r3, #0
 8000696:	ddbd      	ble.n	8000614 <anim_timer+0x20>
            a->act_time += elaps;
 8000698:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800069a:	442b      	add	r3, r5
 800069c:	6323      	str	r3, [r4, #48]	@ 0x30
            if(a->act_time >= 0) {
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dbd6      	blt.n	8000650 <anim_timer+0x5c>
                if(a->act_time > a->time) a->act_time = a->time;
 80006a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80006a4:	4293      	cmp	r3, r2
 80006a6:	dd00      	ble.n	80006aa <anim_timer+0xb6>
 80006a8:	6322      	str	r2, [r4, #48]	@ 0x30
                new_value = a->path_cb(a);
 80006aa:	69e3      	ldr	r3, [r4, #28]
 80006ac:	4620      	mov	r0, r4
 80006ae:	4798      	blx	r3
                if(new_value != a->current_value) {
 80006b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006b2:	4283      	cmp	r3, r0
 80006b4:	d0c8      	beq.n	8000648 <anim_timer+0x54>
                    a->current_value = new_value;
 80006b6:	6260      	str	r0, [r4, #36]	@ 0x24
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
 80006b8:	6863      	ldr	r3, [r4, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0c4      	beq.n	8000648 <anim_timer+0x54>
 80006be:	4601      	mov	r1, r0
 80006c0:	6820      	ldr	r0, [r4, #0]
 80006c2:	4798      	blx	r3
 80006c4:	e7c0      	b.n	8000648 <anim_timer+0x54>
                    anim_ready_handler(a);
 80006c6:	4620      	mov	r0, r4
 80006c8:	f7ff ff4e 	bl	8000568 <anim_ready_handler>
 80006cc:	e7c0      	b.n	8000650 <anim_timer+0x5c>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80006ce:	4621      	mov	r1, r4
 80006d0:	4806      	ldr	r0, [pc, #24]	@ (80006ec <anim_timer+0xf8>)
 80006d2:	f015 ff4e 	bl	8016572 <_lv_ll_get_next>
 80006d6:	4604      	mov	r4, r0
 80006d8:	e7c2      	b.n	8000660 <anim_timer+0x6c>
    last_timer_run = lv_tick_get();
 80006da:	f012 fe47 	bl	801336c <lv_tick_get>
 80006de:	4b01      	ldr	r3, [pc, #4]	@ (80006e4 <anim_timer+0xf0>)
 80006e0:	6018      	str	r0, [r3, #0]
}
 80006e2:	bd38      	pop	{r3, r4, r5, pc}
 80006e4:	2000652c 	.word	0x2000652c
 80006e8:	20006528 	.word	0x20006528
 80006ec:	2000683c 	.word	0x2000683c
 80006f0:	20006529 	.word	0x20006529

080006f4 <lv_anim_path_linear>:
{
 80006f4:	b510      	push	{r4, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	4604      	mov	r4, r0
    int32_t step = lv_map(a->act_time, 0, a->time, 0, LV_ANIM_RESOLUTION);
 80006fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8000704:	4619      	mov	r1, r3
 8000706:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8000708:	f016 f8c1 	bl	801688e <lv_map>
    new_value = step * (a->end_value - a->start_value);
 800070c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800070e:	6a22      	ldr	r2, [r4, #32]
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	fb03 f000 	mul.w	r0, r3, r0
}
 8000716:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 800071a:	b002      	add	sp, #8
 800071c:	bd10      	pop	{r4, pc}
	...

08000720 <_lv_anim_core_init>:
{
 8000720:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 8000722:	2144      	movs	r1, #68	@ 0x44
 8000724:	4807      	ldr	r0, [pc, #28]	@ (8000744 <_lv_anim_core_init+0x24>)
 8000726:	f015 fed6 	bl	80164d6 <_lv_ll_init>
    _lv_anim_tmr = lv_timer_create(anim_timer, LV_DISP_DEF_REFR_PERIOD, NULL);
 800072a:	2200      	movs	r2, #0
 800072c:	211e      	movs	r1, #30
 800072e:	4806      	ldr	r0, [pc, #24]	@ (8000748 <_lv_anim_core_init+0x28>)
 8000730:	f026 f86a 	bl	8026808 <lv_timer_create>
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <_lv_anim_core_init+0x2c>)
 8000736:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation timer*/
 8000738:	f7ff fefe 	bl	8000538 <anim_mark_list_change>
    anim_list_changed = false;
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <_lv_anim_core_init+0x30>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bd08      	pop	{r3, pc}
 8000744:	2000683c 	.word	0x2000683c
 8000748:	080005f5 	.word	0x080005f5
 800074c:	20006524 	.word	0x20006524
 8000750:	20006529 	.word	0x20006529

08000754 <lv_anim_init>:
{
 8000754:	b510      	push	{r4, lr}
 8000756:	4604      	mov	r4, r0
    lv_memset_00(a, sizeof(lv_anim_t));
 8000758:	2144      	movs	r1, #68	@ 0x44
 800075a:	f016 fab3 	bl	8016cc4 <lv_memset_00>
    a->time = 500;
 800075e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000762:	62e3      	str	r3, [r4, #44]	@ 0x2c
    a->start_value = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	6223      	str	r3, [r4, #32]
    a->end_value = 100;
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	62a3      	str	r3, [r4, #40]	@ 0x28
    a->repeat_cnt = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
    a->path_cb = lv_anim_path_linear;
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <lv_anim_init+0x30>)
 8000774:	61e3      	str	r3, [r4, #28]
    a->early_apply = 1;
 8000776:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8000782:	bd10      	pop	{r4, pc}
 8000784:	080006f5 	.word	0x080006f5

08000788 <lv_anim_del>:
{
 8000788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800078c:	4606      	mov	r6, r0
 800078e:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 8000790:	4815      	ldr	r0, [pc, #84]	@ (80007e8 <lv_anim_del+0x60>)
 8000792:	f015 fee6 	bl	8016562 <_lv_ll_get_head>
 8000796:	4604      	mov	r4, r0
    bool del = false;
 8000798:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
 800079c:	e004      	b.n	80007a8 <lv_anim_del+0x20>
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800079e:	6863      	ldr	r3, [r4, #4]
 80007a0:	42bb      	cmp	r3, r7
 80007a2:	d00d      	beq.n	80007c0 <lv_anim_del+0x38>
 80007a4:	b167      	cbz	r7, 80007c0 <lv_anim_del+0x38>
            del = true;
 80007a6:	462c      	mov	r4, r5
    while(a != NULL) {
 80007a8:	b1d4      	cbz	r4, 80007e0 <lv_anim_del+0x58>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 80007aa:	4621      	mov	r1, r4
 80007ac:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <lv_anim_del+0x60>)
 80007ae:	f015 fee0 	bl	8016572 <_lv_ll_get_next>
 80007b2:	4605      	mov	r5, r0
        if((a->var == var || var == NULL) && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	42b3      	cmp	r3, r6
 80007b8:	d0f1      	beq.n	800079e <lv_anim_del+0x16>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d1f3      	bne.n	80007a6 <lv_anim_del+0x1e>
 80007be:	e7ee      	b.n	800079e <lv_anim_del+0x16>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
 80007c0:	4621      	mov	r1, r4
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <lv_anim_del+0x60>)
 80007c4:	f015 ff0f 	bl	80165e6 <_lv_ll_remove>
            if(a->deleted_cb != NULL) a->deleted_cb(a);
 80007c8:	6923      	ldr	r3, [r4, #16]
 80007ca:	b10b      	cbz	r3, 80007d0 <lv_anim_del+0x48>
 80007cc:	4620      	mov	r0, r4
 80007ce:	4798      	blx	r3
            lv_mem_free(a);
 80007d0:	4620      	mov	r0, r4
 80007d2:	f016 f8bf 	bl	8016954 <lv_mem_free>
            anim_mark_list_change(); /*Read by `anim_timer`. It need to know if a delete occurred in
 80007d6:	f7ff feaf 	bl	8000538 <anim_mark_list_change>
            del = true;
 80007da:	f04f 0801 	mov.w	r8, #1
 80007de:	e7e2      	b.n	80007a6 <lv_anim_del+0x1e>
}
 80007e0:	4640      	mov	r0, r8
 80007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007e6:	bf00      	nop
 80007e8:	2000683c 	.word	0x2000683c

080007ec <lv_anim_start>:
{
 80007ec:	b538      	push	{r3, r4, r5, lr}
 80007ee:	4604      	mov	r4, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*exec_cb == NULL would delete all animations of var*/
 80007f0:	6841      	ldr	r1, [r0, #4]
 80007f2:	b111      	cbz	r1, 80007fa <lv_anim_start+0xe>
 80007f4:	6800      	ldr	r0, [r0, #0]
 80007f6:	f7ff ffc7 	bl	8000788 <lv_anim_del>
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
 80007fa:	481c      	ldr	r0, [pc, #112]	@ (800086c <lv_anim_start+0x80>)
 80007fc:	f015 ff5b 	bl	80166b6 <_lv_ll_is_empty>
 8000800:	bb58      	cbnz	r0, 800085a <lv_anim_start+0x6e>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 8000802:	481a      	ldr	r0, [pc, #104]	@ (800086c <lv_anim_start+0x80>)
 8000804:	f015 fe6f 	bl	80164e6 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_anim);
 8000808:	4605      	mov	r5, r0
 800080a:	b358      	cbz	r0, 8000864 <lv_anim_start+0x78>
    lv_memcpy(new_anim, a, sizeof(lv_anim_t));
 800080c:	2244      	movs	r2, #68	@ 0x44
 800080e:	4621      	mov	r1, r4
 8000810:	f016 f96a 	bl	8016ae8 <lv_memcpy>
    if(a->var == a) new_anim->var = new_anim;
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	42a3      	cmp	r3, r4
 8000818:	d025      	beq.n	8000866 <lv_anim_start+0x7a>
    new_anim->run_round = anim_run_round;
 800081a:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800081e:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <lv_anim_start+0x84>)
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	f362 0382 	bfi	r3, r2, #2, #1
 8000826:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    if(new_anim->early_apply) {
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f013 0f01 	tst.w	r3, #1
 8000830:	d00f      	beq.n	8000852 <lv_anim_start+0x66>
        if(new_anim->get_value_cb) {
 8000832:	696b      	ldr	r3, [r5, #20]
 8000834:	b13b      	cbz	r3, 8000846 <lv_anim_start+0x5a>
            int32_t v_ofs = new_anim->get_value_cb(new_anim);
 8000836:	4628      	mov	r0, r5
 8000838:	4798      	blx	r3
            new_anim->start_value += v_ofs;
 800083a:	6a2b      	ldr	r3, [r5, #32]
 800083c:	4403      	add	r3, r0
 800083e:	622b      	str	r3, [r5, #32]
            new_anim->end_value += v_ofs;
 8000840:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000842:	4403      	add	r3, r0
 8000844:	62ab      	str	r3, [r5, #40]	@ 0x28
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start_value);
 8000846:	686b      	ldr	r3, [r5, #4]
 8000848:	b11b      	cbz	r3, 8000852 <lv_anim_start+0x66>
 800084a:	6828      	ldr	r0, [r5, #0]
 800084c:	b108      	cbz	r0, 8000852 <lv_anim_start+0x66>
 800084e:	6a29      	ldr	r1, [r5, #32]
 8000850:	4798      	blx	r3
    anim_mark_list_change();
 8000852:	f7ff fe71 	bl	8000538 <anim_mark_list_change>
}
 8000856:	4628      	mov	r0, r5
 8000858:	bd38      	pop	{r3, r4, r5, pc}
        last_timer_run = lv_tick_get();
 800085a:	f012 fd87 	bl	801336c <lv_tick_get>
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <lv_anim_start+0x88>)
 8000860:	6018      	str	r0, [r3, #0]
 8000862:	e7ce      	b.n	8000802 <lv_anim_start+0x16>
    LV_ASSERT_MALLOC(new_anim);
 8000864:	e7fe      	b.n	8000864 <lv_anim_start+0x78>
    if(a->var == a) new_anim->var = new_anim;
 8000866:	602d      	str	r5, [r5, #0]
 8000868:	e7d7      	b.n	800081a <lv_anim_start+0x2e>
 800086a:	bf00      	nop
 800086c:	2000683c 	.word	0x2000683c
 8000870:	20006528 	.word	0x20006528
 8000874:	2000652c 	.word	0x2000652c

08000878 <lv_anim_get>:
{
 8000878:	b538      	push	{r3, r4, r5, lr}
 800087a:	4604      	mov	r4, r0
 800087c:	460d      	mov	r5, r1
    _LV_LL_READ(&LV_GC_ROOT(_lv_anim_ll), a) {
 800087e:	480a      	ldr	r0, [pc, #40]	@ (80008a8 <lv_anim_get+0x30>)
 8000880:	f015 fe6f 	bl	8016562 <_lv_ll_get_head>
 8000884:	4601      	mov	r1, r0
 8000886:	e003      	b.n	8000890 <lv_anim_get+0x18>
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <lv_anim_get+0x30>)
 800088a:	f015 fe72 	bl	8016572 <_lv_ll_get_next>
 800088e:	4601      	mov	r1, r0
 8000890:	b139      	cbz	r1, 80008a2 <lv_anim_get+0x2a>
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 8000892:	680b      	ldr	r3, [r1, #0]
 8000894:	42a3      	cmp	r3, r4
 8000896:	d1f7      	bne.n	8000888 <lv_anim_get+0x10>
 8000898:	684b      	ldr	r3, [r1, #4]
 800089a:	42ab      	cmp	r3, r5
 800089c:	d001      	beq.n	80008a2 <lv_anim_get+0x2a>
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d1f2      	bne.n	8000888 <lv_anim_get+0x10>
}
 80008a2:	4608      	mov	r0, r1
 80008a4:	bd38      	pop	{r3, r4, r5, pc}
 80008a6:	bf00      	nop
 80008a8:	2000683c 	.word	0x2000683c

080008ac <lv_anim_speed_to_time>:
{
 80008ac:	4603      	mov	r3, r0
    uint32_t d    = LV_ABS(start - end);
 80008ae:	1a89      	subs	r1, r1, r2
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bfb8      	it	lt
 80008b4:	4249      	neglt	r1, r1
    uint32_t time = (d * 1000) / speed;
 80008b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ba:	fb02 f101 	mul.w	r1, r2, r1
 80008be:	fbb1 f0f0 	udiv	r0, r1, r0
    if(time == 0) {
 80008c2:	4299      	cmp	r1, r3
 80008c4:	d200      	bcs.n	80008c8 <lv_anim_speed_to_time+0x1c>
        time++;
 80008c6:	3001      	adds	r0, #1
}
 80008c8:	4770      	bx	lr

080008ca <lv_anim_path_ease_out>:
{
 80008ca:	b530      	push	{r4, r5, lr}
 80008cc:	b083      	sub	sp, #12
 80008ce:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 80008d0:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80008d4:	9500      	str	r5, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80008da:	4619      	mov	r1, r3
 80008dc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80008de:	f015 ffd6 	bl	801688e <lv_map>
    int32_t step = lv_bezier3(t, 0, 900, 950, LV_BEZIER_VAL_MAX);
 80008e2:	9500      	str	r5, [sp, #0]
 80008e4:	f240 33b6 	movw	r3, #950	@ 0x3b6
 80008e8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80008ec:	2100      	movs	r1, #0
 80008ee:	f015 ff2d 	bl	801674c <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 80008f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80008f4:	6a22      	ldr	r2, [r4, #32]
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	fb03 f000 	mul.w	r0, r3, r0
}
 80008fc:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8000900:	b003      	add	sp, #12
 8000902:	bd30      	pop	{r4, r5, pc}

08000904 <lv_anim_path_ease_in_out>:
{
 8000904:	b530      	push	{r4, r5, lr}
 8000906:	b083      	sub	sp, #12
 8000908:	4604      	mov	r4, r0
    uint32_t t = lv_map(a->act_time, 0, a->time, 0, LV_BEZIER_VAL_MAX);
 800090a:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 800090e:	9500      	str	r5, [sp, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8000914:	4619      	mov	r1, r3
 8000916:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8000918:	f015 ffb9 	bl	801688e <lv_map>
    int32_t step = lv_bezier3(t, 0, 50, 952, LV_BEZIER_VAL_MAX);
 800091c:	9500      	str	r5, [sp, #0]
 800091e:	f44f 736e 	mov.w	r3, #952	@ 0x3b8
 8000922:	2232      	movs	r2, #50	@ 0x32
 8000924:	2100      	movs	r1, #0
 8000926:	f015 ff11 	bl	801674c <lv_bezier3>
    new_value = step * (a->end_value - a->start_value);
 800092a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800092c:	6a22      	ldr	r2, [r4, #32]
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	fb03 f000 	mul.w	r0, r3, r0
}
 8000934:	eb02 20a0 	add.w	r0, r2, r0, asr #10
 8000938:	b003      	add	sp, #12
 800093a:	bd30      	pop	{r4, r5, pc}

0800093c <lv_anim_path_step>:
    if(a->act_time >= a->time)
 800093c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800093e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000940:	429a      	cmp	r2, r3
 8000942:	db01      	blt.n	8000948 <lv_anim_path_step+0xc>
        return a->end_value;
 8000944:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8000946:	4770      	bx	lr
        return a->start_value;
 8000948:	6a00      	ldr	r0, [r0, #32]
}
 800094a:	4770      	bx	lr

0800094c <get_angle>:
}

static lv_coord_t get_angle(const lv_obj_t * obj)
{
    lv_arc_t * arc = (lv_arc_t *)obj;
    uint16_t angle = arc->rotation;
 800094c:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
    if(arc->type == LV_ARC_MODE_NORMAL) {
 800094e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000952:	f013 0306 	ands.w	r3, r3, #6
 8000956:	d104      	bne.n	8000962 <get_angle+0x16>
        angle += arc->indic_angle_end;
 8000958:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 800095a:	4413      	add	r3, r2
 800095c:	b29a      	uxth	r2, r3
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
        else angle += angle_midpoint;
    }

    return angle;
}
 800095e:	b210      	sxth	r0, r2
 8000960:	4770      	bx	lr
    else if(arc->type == LV_ARC_MODE_REVERSE) {
 8000962:	2b04      	cmp	r3, #4
 8000964:	d021      	beq.n	80009aa <get_angle+0x5e>
    else if(arc->type == LV_ARC_MODE_SYMMETRICAL) {
 8000966:	2b02      	cmp	r3, #2
 8000968:	d1f9      	bne.n	800095e <get_angle+0x12>
{
 800096a:	b510      	push	{r4, lr}
        int16_t bg_end = arc->bg_angle_end;
 800096c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800096e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	@ 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 8000972:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8000974:	4299      	cmp	r1, r3
 8000976:	d202      	bcs.n	800097e <get_angle+0x32>
 8000978:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 800097c:	b20c      	sxth	r4, r1
        int16_t indic_end = arc->indic_angle_end;
 800097e:	f8b0 c028 	ldrh.w	ip, [r0, #40]	@ 0x28
 8000982:	f9b0 e028 	ldrsh.w	lr, [r0, #40]	@ 0x28
        if(arc->indic_angle_end < arc->indic_angle_start) indic_end = arc->indic_angle_end + 360;
 8000986:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8000988:	458c      	cmp	ip, r1
 800098a:	d203      	bcs.n	8000994 <get_angle+0x48>
 800098c:	f50c 7eb4 	add.w	lr, ip, #360	@ 0x168
 8000990:	fa0f fe8e 	sxth.w	lr, lr
        int32_t angle_midpoint = (int32_t)(arc->bg_angle_start + bg_end) / 2;
 8000994:	4423      	add	r3, r4
 8000996:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800099a:	1058      	asrs	r0, r3, #1
        if(arc->indic_angle_start < angle_midpoint) angle += arc->indic_angle_start;
 800099c:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 80009a0:	da07      	bge.n	80009b2 <get_angle+0x66>
 80009a2:	4411      	add	r1, r2
 80009a4:	b28a      	uxth	r2, r1
}
 80009a6:	b210      	sxth	r0, r2
 80009a8:	bd10      	pop	{r4, pc}
        angle += arc->indic_angle_start;
 80009aa:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80009ac:	4413      	add	r3, r2
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	e7d5      	b.n	800095e <get_angle+0x12>
        else if(indic_end > angle_midpoint) angle += arc->indic_angle_end;
 80009b2:	4586      	cmp	lr, r0
 80009b4:	dd03      	ble.n	80009be <get_angle+0x72>
 80009b6:	4494      	add	ip, r2
 80009b8:	fa1f f28c 	uxth.w	r2, ip
 80009bc:	e7f3      	b.n	80009a6 <get_angle+0x5a>
        else angle += angle_midpoint;
 80009be:	4410      	add	r0, r2
 80009c0:	b282      	uxth	r2, r0
 80009c2:	e7f0      	b.n	80009a6 <get_angle+0x5a>

080009c4 <lv_arc_angle_within_bg_bounds>:
 * @param tolerance_deg Tolerance
 *
 * @return true if angle is within arc background bounds, false otherwise
 */
static bool lv_arc_angle_within_bg_bounds(lv_obj_t * obj, const uint32_t angle, const uint32_t tolerance_deg)
{
 80009c4:	b500      	push	{lr}

    uint32_t smaller_angle = 0;
    uint32_t bigger_angle = 0;

    /* Determine which background angle is smaller and bigger */
    if(arc->bg_angle_start < arc->bg_angle_end) {
 80009c6:	f8b0 e02a 	ldrh.w	lr, [r0, #42]	@ 0x2a
 80009ca:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 80009cc:	459e      	cmp	lr, r3
 80009ce:	d203      	bcs.n	80009d8 <lv_arc_angle_within_bg_bounds+0x14>
        bigger_angle = arc->bg_angle_end;
        smaller_angle = arc->bg_angle_start;
 80009d0:	46f4      	mov	ip, lr
        bigger_angle = (360 - arc->bg_angle_start) + arc->bg_angle_end;
        smaller_angle = 0;
    }

    /* Angle is between both background angles */
    if((smaller_angle <= angle) && (angle <= bigger_angle)) {
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d905      	bls.n	80009e2 <lv_arc_angle_within_bg_bounds+0x1e>
 80009d6:	e006      	b.n	80009e6 <lv_arc_angle_within_bg_bounds+0x22>
        bigger_angle = (360 - arc->bg_angle_start) + arc->bg_angle_end;
 80009d8:	f5ce 7eb4 	rsb	lr, lr, #360	@ 0x168
 80009dc:	4473      	add	r3, lr
        smaller_angle = 0;
 80009de:	f04f 0c00 	mov.w	ip, #0
    if((smaller_angle <= angle) && (angle <= bigger_angle)) {
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d229      	bcs.n	8000a3a <lv_arc_angle_within_bg_bounds+0x76>

        return true;
    }
    /* Distance between background start and end angles is less than tolerance,
     * consider the click inside the arc */
    else if(((smaller_angle - tolerance_deg) <= 0U) &&
 80009e6:	4594      	cmp	ip, r2
 80009e8:	d042      	beq.n	8000a70 <lv_arc_angle_within_bg_bounds+0xac>
     * A: Angle
     * S: Arc background start angle
     * E: Arc background end angle
     *
     * Start angle is bigger or equal to tolerance */
    if((smaller_angle >= tolerance_deg)
 80009ea:	4594      	cmp	ip, r2
 80009ec:	d306      	bcc.n	80009fc <lv_arc_angle_within_bg_bounds+0x38>
       /* (360° - T) --- A --- 360° */
       && ((angle >= (360U - tolerance_deg)) && (angle <= 360U))) {
 80009ee:	f5c2 7eb4 	rsb	lr, r2, #360	@ 0x168
 80009f2:	458e      	cmp	lr, r1
 80009f4:	d802      	bhi.n	80009fc <lv_arc_angle_within_bg_bounds+0x38>
 80009f6:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 80009fa:	d94d      	bls.n	8000a98 <lv_arc_angle_within_bg_bounds+0xd4>
        arc->min_close = 1;
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
        return true;
    }
    /* Tolerance is bigger than bg start angle */
    else if((smaller_angle < tolerance_deg)
 80009fc:	4594      	cmp	ip, r2
 80009fe:	d208      	bcs.n	8000a12 <lv_arc_angle_within_bg_bounds+0x4e>
            /* (360° - (T - S)) --- A --- 360° */
            && (((360U - (tolerance_deg - smaller_angle)) <= angle)) && (angle <= 360U)) {
 8000a00:	ebac 0e02 	sub.w	lr, ip, r2
 8000a04:	f50e 7eb4 	add.w	lr, lr, #360	@ 0x168
 8000a08:	458e      	cmp	lr, r1
 8000a0a:	d802      	bhi.n	8000a12 <lv_arc_angle_within_bg_bounds+0x4e>
 8000a0c:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 8000a10:	d94f      	bls.n	8000ab2 <lv_arc_angle_within_bg_bounds+0xee>
        arc->min_close = 1;
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
        return true;
    }
    /* 360° is bigger than background end angle + tolerance */
    else if((360U >= (bigger_angle + tolerance_deg))
 8000a12:	441a      	add	r2, r3
 8000a14:	f5b2 7fb4 	cmp.w	r2, #360	@ 0x168
 8000a18:	d804      	bhi.n	8000a24 <lv_arc_angle_within_bg_bounds+0x60>
            /* E --- A --- (E + T) */
            && ((bigger_angle <= (angle + smaller_angle)) &&
 8000a1a:	448c      	add	ip, r1
 8000a1c:	459c      	cmp	ip, r3
 8000a1e:	d301      	bcc.n	8000a24 <lv_arc_angle_within_bg_bounds+0x60>
 8000a20:	4562      	cmp	r2, ip
 8000a22:	d253      	bcs.n	8000acc <lv_arc_angle_within_bg_bounds+0x108>
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
        return true;
    }
    /* Background end angle + tolerance is bigger than 360° and bg_start_angle + tolerance is not near 0° + ((bg_end_angle + tolerance) - 360°)
     * Here we can assume background is not near 0° because of the first two initial checks */
    else if((360U < (bigger_angle + tolerance_deg))
 8000a24:	f5b2 7fb4 	cmp.w	r2, #360	@ 0x168
 8000a28:	d96a      	bls.n	8000b00 <lv_arc_angle_within_bg_bounds+0x13c>
            && (angle <= 0U + ((bigger_angle + tolerance_deg) - 360U)) && (angle > bigger_angle)) {
 8000a2a:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8000a2e:	428a      	cmp	r2, r1
 8000a30:	d368      	bcc.n	8000b04 <lv_arc_angle_within_bg_bounds+0x140>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d357      	bcc.n	8000ae6 <lv_arc_angle_within_bg_bounds+0x122>
    }
    else {
        /* Nothing to do */
    }

    return false;
 8000a36:	2000      	movs	r0, #0
 8000a38:	e011      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
        if(((bigger_angle - smaller_angle) / 2U) >= angle) {
 8000a3a:	eba3 030c 	sub.w	r3, r3, ip
 8000a3e:	ebb1 0f53 	cmp.w	r1, r3, lsr #1
 8000a42:	d80e      	bhi.n	8000a62 <lv_arc_angle_within_bg_bounds+0x9e>
            arc->min_close = 1;
 8000a44:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_INSIDE_BG_ANGLES;
 8000a50:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000a54:	f043 0310 	orr.w	r3, r3, #16
 8000a58:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000a5c:	2001      	movs	r0, #1
}
 8000a5e:	f85d fb04 	ldr.w	pc, [sp], #4
            arc->min_close = 0;
 8000a62:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000a66:	f023 0308 	bic.w	r3, r3, #8
 8000a6a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
 8000a6e:	e7ef      	b.n	8000a50 <lv_arc_angle_within_bg_bounds+0x8c>
            (360U - (bigger_angle + (smaller_angle - tolerance_deg)))) {
 8000a70:	eba2 0e0c 	sub.w	lr, r2, ip
 8000a74:	ebae 0e03 	sub.w	lr, lr, r3
    else if(((smaller_angle - tolerance_deg) <= 0U) &&
 8000a78:	f51e 7fb4 	cmn.w	lr, #360	@ 0x168
 8000a7c:	d0b5      	beq.n	80009ea <lv_arc_angle_within_bg_bounds+0x26>
        arc->min_close = 1;
 8000a7e:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_INSIDE_BG_ANGLES;
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000a94:	2001      	movs	r0, #1
 8000a96:	e7e2      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
        arc->min_close = 1;
 8000a98:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	f023 0310 	bic.w	r3, r3, #16
 8000aaa:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e7d5      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
        arc->min_close = 1;
 8000ab2:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	f023 0310 	bic.w	r3, r3, #16
 8000ac4:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e7c8      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
        arc->min_close = 0;
 8000acc:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000ad0:	f023 0308 	bic.w	r3, r3, #8
 8000ad4:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f023 0310 	bic.w	r3, r3, #16
 8000ade:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	e7bb      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
        arc->min_close = 0;
 8000ae6:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8000aea:	f023 0308 	bic.w	r3, r3, #8
 8000aee:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f023 0310 	bic.w	r3, r3, #16
 8000af8:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        return true;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e7ae      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
    return false;
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7ac      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>
 8000b04:	2000      	movs	r0, #0
 8000b06:	e7aa      	b.n	8000a5e <lv_arc_angle_within_bg_bounds+0x9a>

08000b08 <get_center>:
{
 8000b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	4604      	mov	r4, r0
 8000b10:	460e      	mov	r6, r1
 8000b12:	4617      	mov	r7, r2
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8000b14:	2212      	movs	r2, #18
 8000b16:	2100      	movs	r1, #0
 8000b18:	f01b fdec 	bl	801c6f4 <lv_obj_get_style_prop>
 8000b1c:	9001      	str	r0, [sp, #4]
    return (lv_coord_t)v.num;
 8000b1e:	fa0f fb80 	sxth.w	fp, r0
}

static inline lv_coord_t lv_obj_get_style_pad_right(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8000b22:	2213      	movs	r2, #19
 8000b24:	2100      	movs	r1, #0
 8000b26:	4620      	mov	r0, r4
 8000b28:	f01b fde4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000b2c:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8000b30:	2210      	movs	r2, #16
 8000b32:	2100      	movs	r1, #0
 8000b34:	4620      	mov	r0, r4
 8000b36:	f01b fddd 	bl	801c6f4 <lv_obj_get_style_prop>
 8000b3a:	9000      	str	r0, [sp, #0]
    return (lv_coord_t)v.num;
 8000b3c:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8000b40:	2211      	movs	r2, #17
 8000b42:	2100      	movs	r1, #0
 8000b44:	4620      	mov	r0, r4
 8000b46:	f01b fdd5 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000b4a:	fa0f f880 	sxth.w	r8, r0
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f018 fdbe 	bl	80196d0 <lv_obj_get_width>
 8000b54:	eba0 050b 	sub.w	r5, r0, fp
 8000b58:	eba5 0509 	sub.w	r5, r5, r9
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f018 fdbe 	bl	80196de <lv_obj_get_height>
 8000b62:	eba0 000a 	sub.w	r0, r0, sl
 8000b66:	eba0 0008 	sub.w	r0, r0, r8
 8000b6a:	4285      	cmp	r5, r0
 8000b6c:	da1c      	bge.n	8000ba8 <get_center+0xa0>
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f018 fdae 	bl	80196d0 <lv_obj_get_width>
 8000b74:	eba0 030b 	sub.w	r3, r0, fp
 8000b78:	eba3 0309 	sub.w	r3, r3, r9
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8000b7c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8000b80:	f343 034f 	sbfx	r3, r3, #1, #16
    center->x = obj->coords.x1 + r + left_bg;
 8000b84:	8aa1      	ldrh	r1, [r4, #20]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4411      	add	r1, r2
 8000b8a:	9801      	ldr	r0, [sp, #4]
 8000b8c:	fa10 f181 	uxtah	r1, r0, r1
 8000b90:	8031      	strh	r1, [r6, #0]
    center->y = obj->coords.y1 + r + top_bg;
 8000b92:	8ae1      	ldrh	r1, [r4, #22]
 8000b94:	440a      	add	r2, r1
 8000b96:	9900      	ldr	r1, [sp, #0]
 8000b98:	fa11 f282 	uxtah	r2, r1, r2
 8000b9c:	8072      	strh	r2, [r6, #2]
    if(arc_r) *arc_r = r;
 8000b9e:	b107      	cbz	r7, 8000ba2 <get_center+0x9a>
 8000ba0:	803b      	strh	r3, [r7, #0]
}
 8000ba2:	b003      	add	sp, #12
 8000ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f018 fd98 	bl	80196de <lv_obj_get_height>
 8000bae:	eba0 030a 	sub.w	r3, r0, sl
 8000bb2:	eba3 0308 	sub.w	r3, r3, r8
                           lv_obj_get_height(obj) - top_bg - bottom_bg)) / 2;
 8000bb6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t r = (LV_MIN(lv_obj_get_width(obj) - left_bg - right_bg,
 8000bba:	f343 034f 	sbfx	r3, r3, #1, #16
 8000bbe:	e7e1      	b.n	8000b84 <get_center+0x7c>

08000bc0 <knob_get_extra_size>:
{
 8000bc0:	b570      	push	{r4, r5, r6, lr}
 8000bc2:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8000bc4:	2240      	movs	r2, #64	@ 0x40
 8000bc6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000bca:	f01b fd93 	bl	801c6f4 <lv_obj_get_style_prop>
 8000bce:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_shadow_spread(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8000bd0:	2243      	movs	r2, #67	@ 0x43
 8000bd2:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f01b fd8c 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_shadow_size += lv_obj_get_style_shadow_spread(obj, LV_PART_KNOB);
 8000bdc:	fa14 f480 	uxtah	r4, r4, r0
 8000be0:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8000be2:	2241      	movs	r2, #65	@ 0x41
 8000be4:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000be8:	4628      	mov	r0, r5
 8000bea:	f01b fd83 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000bee:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	dd2e      	ble.n	8000c52 <knob_get_extra_size+0x92>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8000bf4:	2241      	movs	r2, #65	@ 0x41
 8000bf6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000bfa:	4628      	mov	r0, r5
 8000bfc:	f01b fd7a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000c00:	b200      	sxth	r0, r0
 8000c02:	4404      	add	r4, r0
 8000c04:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8000c06:	2242      	movs	r2, #66	@ 0x42
 8000c08:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f01b fd71 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000c12:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8000c14:	2800      	cmp	r0, #0
 8000c16:	dd25      	ble.n	8000c64 <knob_get_extra_size+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8000c18:	2242      	movs	r2, #66	@ 0x42
 8000c1a:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c1e:	4628      	mov	r0, r5
 8000c20:	f01b fd68 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000c24:	b200      	sxth	r0, r0
 8000c26:	4404      	add	r4, r0
 8000c28:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8000c2a:	2235      	movs	r2, #53	@ 0x35
 8000c2c:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c30:	4628      	mov	r0, r5
 8000c32:	f01b fd5f 	bl	801c6f4 <lv_obj_get_style_prop>
 8000c36:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8000c38:	2238      	movs	r2, #56	@ 0x38
 8000c3a:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c3e:	4628      	mov	r0, r5
 8000c40:	f01b fd58 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_outline_size += lv_obj_get_style_outline_pad(obj, LV_PART_KNOB);
 8000c44:	fa16 f080 	uxtah	r0, r6, r0
 8000c48:	b200      	sxth	r0, r0
}
 8000c4a:	42a0      	cmp	r0, r4
 8000c4c:	bfb8      	it	lt
 8000c4e:	4620      	movlt	r0, r4
 8000c50:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8000c52:	2241      	movs	r2, #65	@ 0x41
 8000c54:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f01b fd4b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000c5e:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_x(obj, LV_PART_KNOB));
 8000c60:	4240      	negs	r0, r0
 8000c62:	e7ce      	b.n	8000c02 <knob_get_extra_size+0x42>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8000c64:	2242      	movs	r2, #66	@ 0x42
 8000c66:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	f01b fd42 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000c70:	b200      	sxth	r0, r0
    knob_shadow_size += LV_ABS(lv_obj_get_style_shadow_ofs_y(obj, LV_PART_KNOB));
 8000c72:	4240      	negs	r0, r0
 8000c74:	e7d7      	b.n	8000c26 <knob_get_extra_size+0x66>

08000c76 <get_knob_area>:
{
 8000c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	4607      	mov	r7, r0
 8000c7e:	4689      	mov	r9, r1
 8000c80:	4614      	mov	r4, r2
 8000c82:	4698      	mov	r8, r3
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8000c84:	2250      	movs	r2, #80	@ 0x50
 8000c86:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000c8a:	f01b fd33 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t indic_width_half = indic_width / 2;
 8000c8e:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8000c92:	fa03 f080 	sxtah	r0, r3, r0
    r -= indic_width_half;
 8000c96:	f3c0 064f 	ubfx	r6, r0, #1, #16
 8000c9a:	1ba4      	subs	r4, r4, r6
 8000c9c:	b224      	sxth	r4, r4
    lv_coord_t angle = get_angle(obj);
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	f7ff fe54 	bl	800094c <get_angle>
 8000ca4:	4682      	mov	sl, r0
    lv_coord_t knob_x = (r * lv_trigo_sin(angle + 90)) >> LV_TRIGO_SHIFT;
 8000ca6:	305a      	adds	r0, #90	@ 0x5a
 8000ca8:	b200      	sxth	r0, r0
 8000caa:	f015 fd11 	bl	80166d0 <lv_trigo_sin>
 8000cae:	fb00 f504 	mul.w	r5, r0, r4
 8000cb2:	13ed      	asrs	r5, r5, #15
    lv_coord_t knob_y = (r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT;
 8000cb4:	4650      	mov	r0, sl
 8000cb6:	f015 fd0b 	bl	80166d0 <lv_trigo_sin>
 8000cba:	fb00 f404 	mul.w	r4, r0, r4
 8000cbe:	13e4      	asrs	r4, r4, #15
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8000cc0:	2212      	movs	r2, #18
 8000cc2:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	f01b fd14 	bl	801c6f4 <lv_obj_get_style_prop>
 8000ccc:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8000cce:	2213      	movs	r2, #19
 8000cd0:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000cd4:	4638      	mov	r0, r7
 8000cd6:	f01b fd0d 	bl	801c6f4 <lv_obj_get_style_prop>
 8000cda:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8000cdc:	2210      	movs	r2, #16
 8000cde:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f01b fd06 	bl	801c6f4 <lv_obj_get_style_prop>
 8000ce8:	9001      	str	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8000cea:	2211      	movs	r2, #17
 8000cec:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	f01b fcff 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_area->x1 = center->x + knob_x - left_knob - indic_width_half;
 8000cf6:	f8b9 3000 	ldrh.w	r3, [r9]
 8000cfa:	b2ad      	uxth	r5, r5
 8000cfc:	442b      	add	r3, r5
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	eba3 030b 	sub.w	r3, r3, fp
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	1b9b      	subs	r3, r3, r6
 8000d08:	f8a8 3000 	strh.w	r3, [r8]
    knob_area->x2 = center->x + knob_x + right_knob + indic_width_half;
 8000d0c:	f8b9 3000 	ldrh.w	r3, [r9]
 8000d10:	441d      	add	r5, r3
 8000d12:	fa1a f585 	uxtah	r5, sl, r5
 8000d16:	fa16 f585 	uxtah	r5, r6, r5
 8000d1a:	f8a8 5004 	strh.w	r5, [r8, #4]
    knob_area->y1 = center->y + knob_y - top_knob - indic_width_half;
 8000d1e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	4423      	add	r3, r4
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	9a01      	ldr	r2, [sp, #4]
 8000d2a:	1a9b      	subs	r3, r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	1b9b      	subs	r3, r3, r6
 8000d30:	f8a8 3002 	strh.w	r3, [r8, #2]
    knob_area->y2 = center->y + knob_y + bottom_knob + indic_width_half;
 8000d34:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8000d38:	441c      	add	r4, r3
 8000d3a:	fa10 f484 	uxtah	r4, r0, r4
 8000d3e:	fa16 f484 	uxtah	r4, r6, r4
 8000d42:	f8a8 4006 	strh.w	r4, [r8, #6]
}
 8000d46:	b003      	add	sp, #12
 8000d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d4c <lv_arc_draw>:
{
 8000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d50:	b0aa      	sub	sp, #168	@ 0xa8
 8000d52:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8000d54:	f00f ffe2 	bl	8010d1c <lv_event_get_target>
 8000d58:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f010 f856 	bl	8010e0c <lv_event_get_draw_ctx>
 8000d60:	4606      	mov	r6, r0
    get_center(obj, &center, &arc_r);
 8000d62:	f10d 02a2 	add.w	r2, sp, #162	@ 0xa2
 8000d66:	a929      	add	r1, sp, #164	@ 0xa4
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f7ff fecd 	bl	8000b08 <get_center>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8000d6e:	4631      	mov	r1, r6
 8000d70:	a816      	add	r0, sp, #88	@ 0x58
 8000d72:	f018 faac 	bl	80192ce <lv_obj_draw_dsc_init>
    if(arc_r > 0) {
 8000d76:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc59      	bgt.n	8000e32 <lv_arc_draw+0xe6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8000d7e:	2212      	movs	r2, #18
 8000d80:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000d84:	4620      	mov	r0, r4
 8000d86:	f01b fcb5 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000d8a:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8000d8c:	2213      	movs	r2, #19
 8000d8e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000d92:	4620      	mov	r0, r4
 8000d94:	f01b fcae 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000d98:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8000d9a:	2210      	movs	r2, #16
 8000d9c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000da0:	4620      	mov	r0, r4
 8000da2:	f01b fca7 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000da6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8000daa:	2211      	movs	r2, #17
 8000dac:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000db0:	4620      	mov	r0, r4
 8000db2:	f01b fc9f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000db6:	b203      	sxth	r3, r0
    lv_coord_t indic_r = arc_r - LV_MAX4(left_indic, right_indic, top_indic, bottom_indic);
 8000db8:	4543      	cmp	r3, r8
 8000dba:	bfb8      	it	lt
 8000dbc:	4643      	movlt	r3, r8
 8000dbe:	42bd      	cmp	r5, r7
 8000dc0:	bfb8      	it	lt
 8000dc2:	463d      	movlt	r5, r7
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	bfb8      	it	lt
 8000dc8:	462b      	movlt	r3, r5
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	f8bd 50a2 	ldrh.w	r5, [sp, #162]	@ 0xa2
 8000dd0:	1aed      	subs	r5, r5, r3
 8000dd2:	b22d      	sxth	r5, r5
    if(indic_r > 0) {
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	dc5d      	bgt.n	8000e94 <lv_arc_draw+0x148>
    get_knob_area(obj, &center, arc_r, &knob_area);
 8000dd8:	af10      	add	r7, sp, #64	@ 0x40
 8000dda:	463b      	mov	r3, r7
 8000ddc:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	@ 0xa2
 8000de0:	a929      	add	r1, sp, #164	@ 0xa4
 8000de2:	4620      	mov	r0, r4
 8000de4:	f7ff ff47 	bl	8000c76 <get_knob_area>
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8000de8:	ad02      	add	r5, sp, #8
 8000dea:	4628      	mov	r0, r5
 8000dec:	f008 ff30 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 8000df0:	462a      	mov	r2, r5
 8000df2:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8000df6:	4620      	mov	r0, r4
 8000df8:	f017 ff64 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    part_draw_dsc.part = LV_PART_KNOB;
 8000dfc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000e00:	9323      	str	r3, [sp, #140]	@ 0x8c
    part_draw_dsc.class_p = MY_CLASS;
 8000e02:	4b40      	ldr	r3, [pc, #256]	@ (8000f04 <lv_arc_draw+0x1b8>)
 8000e04:	9317      	str	r3, [sp, #92]	@ 0x5c
    part_draw_dsc.type = LV_ARC_DRAW_PART_KNOB;
 8000e06:	2302      	movs	r3, #2
 8000e08:	9318      	str	r3, [sp, #96]	@ 0x60
    part_draw_dsc.draw_area = &knob_area;
 8000e0a:	9719      	str	r7, [sp, #100]	@ 0x64
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8000e0c:	951a      	str	r5, [sp, #104]	@ 0x68
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8000e0e:	aa16      	add	r2, sp, #88	@ 0x58
 8000e10:	211a      	movs	r1, #26
 8000e12:	4620      	mov	r0, r4
 8000e14:	f00f ff58 	bl	8010cc8 <lv_event_send>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 8000e18:	463a      	mov	r2, r7
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	f008 ff59 	bl	8009cd4 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8000e22:	aa16      	add	r2, sp, #88	@ 0x58
 8000e24:	211b      	movs	r1, #27
 8000e26:	4620      	mov	r0, r4
 8000e28:	f00f ff4e 	bl	8010cc8 <lv_event_send>
}
 8000e2c:	b02a      	add	sp, #168	@ 0xa8
 8000e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_draw_arc_dsc_init(&arc_dsc);
 8000e32:	ad12      	add	r5, sp, #72	@ 0x48
 8000e34:	4628      	mov	r0, r5
 8000e36:	f006 fc3d 	bl	80076b4 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_MAIN, &arc_dsc);
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f018 f98f 	bl	8019162 <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_MAIN;
 8000e44:	2300      	movs	r3, #0
 8000e46:	9323      	str	r3, [sp, #140]	@ 0x8c
        part_draw_dsc.class_p = MY_CLASS;
 8000e48:	4a2e      	ldr	r2, [pc, #184]	@ (8000f04 <lv_arc_draw+0x1b8>)
 8000e4a:	9217      	str	r2, [sp, #92]	@ 0x5c
        part_draw_dsc.type = LV_ARC_DRAW_PART_BACKGROUND;
 8000e4c:	9318      	str	r3, [sp, #96]	@ 0x60
        part_draw_dsc.p1 = &center;
 8000e4e:	af29      	add	r7, sp, #164	@ 0xa4
 8000e50:	971f      	str	r7, [sp, #124]	@ 0x7c
        part_draw_dsc.radius = arc_r;
 8000e52:	f8bd 30a2 	ldrh.w	r3, [sp, #162]	@ 0xa2
 8000e56:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
        part_draw_dsc.arc_dsc = &arc_dsc;
 8000e5a:	951e      	str	r5, [sp, #120]	@ 0x78
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8000e5c:	aa16      	add	r2, sp, #88	@ 0x58
 8000e5e:	211a      	movs	r1, #26
 8000e60:	4620      	mov	r0, r4
 8000e62:	f00f ff31 	bl	8010cc8 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 8000e66:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	@ 0x94
 8000e6a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8000e6c:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
                    arc->bg_angle_end + arc->rotation);
 8000e6e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->bg_angle_start + arc->rotation,
 8000e70:	4401      	add	r1, r0
 8000e72:	b289      	uxth	r1, r1
 8000e74:	9101      	str	r1, [sp, #4]
 8000e76:	4402      	add	r2, r0
 8000e78:	b292      	uxth	r2, r2
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	463a      	mov	r2, r7
 8000e80:	4629      	mov	r1, r5
 8000e82:	4630      	mov	r0, r6
 8000e84:	f006 fc2b 	bl	80076de <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8000e88:	aa16      	add	r2, sp, #88	@ 0x58
 8000e8a:	211b      	movs	r1, #27
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f00f ff1b 	bl	8010cc8 <lv_event_send>
 8000e92:	e774      	b.n	8000d7e <lv_arc_draw+0x32>
        lv_draw_arc_dsc_init(&arc_dsc);
 8000e94:	af12      	add	r7, sp, #72	@ 0x48
 8000e96:	4638      	mov	r0, r7
 8000e98:	f006 fc0c 	bl	80076b4 <lv_draw_arc_dsc_init>
        lv_obj_init_draw_arc_dsc(obj, LV_PART_INDICATOR, &arc_dsc);
 8000e9c:	463a      	mov	r2, r7
 8000e9e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f018 f95d 	bl	8019162 <lv_obj_init_draw_arc_dsc>
        part_draw_dsc.part = LV_PART_INDICATOR;
 8000ea8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eac:	9323      	str	r3, [sp, #140]	@ 0x8c
        part_draw_dsc.class_p = MY_CLASS;
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <lv_arc_draw+0x1b8>)
 8000eb0:	9317      	str	r3, [sp, #92]	@ 0x5c
        part_draw_dsc.type = LV_ARC_DRAW_PART_FOREGROUND;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	9318      	str	r3, [sp, #96]	@ 0x60
        part_draw_dsc.p1 = &center;
 8000eb6:	ab29      	add	r3, sp, #164	@ 0xa4
 8000eb8:	931f      	str	r3, [sp, #124]	@ 0x7c
        part_draw_dsc.radius = indic_r;
 8000eba:	f8ad 5094 	strh.w	r5, [sp, #148]	@ 0x94
        part_draw_dsc.arc_dsc = &arc_dsc;
 8000ebe:	971e      	str	r7, [sp, #120]	@ 0x78
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8000ec0:	aa16      	add	r2, sp, #88	@ 0x58
 8000ec2:	211a      	movs	r1, #26
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f00f feff 	bl	8010cc8 <lv_event_send>
        if(arc_dsc.width > part_draw_dsc.radius) arc_dsc.width = part_draw_dsc.radius;
 8000eca:	f9bd 204a 	ldrsh.w	r2, [sp, #74]	@ 0x4a
 8000ece:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	@ 0x94
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dd01      	ble.n	8000eda <lv_arc_draw+0x18e>
 8000ed6:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8000eda:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8000edc:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
                    arc->indic_angle_end + arc->rotation);
 8000ede:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
        lv_draw_arc(draw_ctx, &arc_dsc, &center, part_draw_dsc.radius, arc->indic_angle_start + arc->rotation,
 8000ee0:	4401      	add	r1, r0
 8000ee2:	b289      	uxth	r1, r1
 8000ee4:	9101      	str	r1, [sp, #4]
 8000ee6:	4402      	add	r2, r0
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	9200      	str	r2, [sp, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	aa29      	add	r2, sp, #164	@ 0xa4
 8000ef0:	a912      	add	r1, sp, #72	@ 0x48
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f006 fbf3 	bl	80076de <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8000ef8:	aa16      	add	r2, sp, #88	@ 0x58
 8000efa:	211b      	movs	r1, #27
 8000efc:	4620      	mov	r0, r4
 8000efe:	f00f fee3 	bl	8010cc8 <lv_event_send>
 8000f02:	e769      	b.n	8000dd8 <lv_arc_draw+0x8c>
 8000f04:	080298d4 	.word	0x080298d4

08000f08 <lv_arc_constructor>:
{
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	460c      	mov	r4, r1
    arc->rotation = 0;
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	848d      	strh	r5, [r1, #36]	@ 0x24
    arc->bg_angle_start = 135;
 8000f10:	2387      	movs	r3, #135	@ 0x87
 8000f12:	854b      	strh	r3, [r1, #42]	@ 0x2a
    arc->bg_angle_end   = 45;
 8000f14:	222d      	movs	r2, #45	@ 0x2d
 8000f16:	858a      	strh	r2, [r1, #44]	@ 0x2c
    arc->indic_angle_start = 135;
 8000f18:	84cb      	strh	r3, [r1, #38]	@ 0x26
    arc->indic_angle_end   = 270;
 8000f1a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000f1e:	850b      	strh	r3, [r1, #40]	@ 0x28
    arc->type = LV_ARC_MODE_NORMAL;
 8000f20:	f891 3034 	ldrb.w	r3, [r1, #52]	@ 0x34
 8000f24:	f365 0342 	bfi	r3, r5, #1, #2
 8000f28:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
    arc->value = VALUE_UNSET;
 8000f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f30:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    arc->min_close = 1;
 8000f32:	f891 3034 	ldrb.w	r3, [r1, #52]	@ 0x34
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
    arc->min_value = 0;
 8000f3e:	860d      	strh	r5, [r1, #48]	@ 0x30
    arc->max_value = 100;
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	864b      	strh	r3, [r1, #50]	@ 0x32
    arc->dragging = false;
 8000f44:	f891 3034 	ldrb.w	r3, [r1, #52]	@ 0x34
 8000f48:	f365 0300 	bfi	r3, r5, #0, #1
 8000f4c:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
    arc->chg_rate = 720;
 8000f50:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8000f54:	638b      	str	r3, [r1, #56]	@ 0x38
    arc->last_tick = lv_tick_get();
 8000f56:	f012 fa09 	bl	801336c <lv_tick_get>
 8000f5a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    arc->last_angle = arc->indic_angle_end;
 8000f5c:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	@ 0x28
 8000f60:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
    arc->in_out = CLICK_OUTSIDE_BG_ANGLES;
 8000f64:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8000f68:	f365 1304 	bfi	r3, r5, #4, #1
 8000f6c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8000f70:	2102      	movs	r1, #2
 8000f72:	4620      	mov	r0, r4
 8000f74:	f017 fcc4 	bl	8018900 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN | LV_OBJ_FLAG_SCROLLABLE);
 8000f78:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f017 fa2f 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPI_DEF / 10);
 8000f82:	210d      	movs	r1, #13
 8000f84:	4620      	mov	r0, r4
 8000f86:	f019 f9df 	bl	801a348 <lv_obj_set_ext_click_area>
}
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}

08000f8c <inv_arc_area>:
{
 8000f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f90:	b088      	sub	sp, #32
 8000f92:	4606      	mov	r6, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4615      	mov	r5, r2
 8000f98:	461f      	mov	r7, r3
    if(lv_obj_is_visible(obj) == false) return;
 8000f9a:	f019 f9a9 	bl	801a2f0 <lv_obj_is_visible>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d047      	beq.n	8001032 <inv_arc_area+0xa6>
    if(start_angle == end_angle) return;
 8000fa2:	42ac      	cmp	r4, r5
 8000fa4:	d045      	beq.n	8001032 <inv_arc_area+0xa6>
    if(start_angle > 360) start_angle -= 360;
 8000fa6:	f5b4 7fb4 	cmp.w	r4, #360	@ 0x168
 8000faa:	d902      	bls.n	8000fb2 <inv_arc_area+0x26>
 8000fac:	f5a4 74b4 	sub.w	r4, r4, #360	@ 0x168
 8000fb0:	b2a4      	uxth	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8000fb2:	f5b5 7fb4 	cmp.w	r5, #360	@ 0x168
 8000fb6:	d902      	bls.n	8000fbe <inv_arc_area+0x32>
 8000fb8:	f5a5 75b4 	sub.w	r5, r5, #360	@ 0x168
 8000fbc:	b2ad      	uxth	r5, r5
    start_angle += arc->rotation;
 8000fbe:	8cb2      	ldrh	r2, [r6, #36]	@ 0x24
 8000fc0:	4414      	add	r4, r2
 8000fc2:	b2a4      	uxth	r4, r4
    end_angle += arc->rotation;
 8000fc4:	442a      	add	r2, r5
 8000fc6:	fa1f f882 	uxth.w	r8, r2
    if(start_angle > 360) start_angle -= 360;
 8000fca:	f5b4 7fb4 	cmp.w	r4, #360	@ 0x168
 8000fce:	d902      	bls.n	8000fd6 <inv_arc_area+0x4a>
 8000fd0:	f5a4 74b4 	sub.w	r4, r4, #360	@ 0x168
 8000fd4:	b2a4      	uxth	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8000fd6:	f5b8 7fb4 	cmp.w	r8, #360	@ 0x168
 8000fda:	d903      	bls.n	8000fe4 <inv_arc_area+0x58>
 8000fdc:	f5a8 72b4 	sub.w	r2, r8, #360	@ 0x168
 8000fe0:	fa1f f882 	uxth.w	r8, r2
    get_center(obj, &c, &r);
 8000fe4:	f10d 021e 	add.w	r2, sp, #30
 8000fe8:	a906      	add	r1, sp, #24
 8000fea:	4630      	mov	r0, r6
 8000fec:	f7ff fd8c 	bl	8000b08 <get_center>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8000ff0:	2250      	movs	r2, #80	@ 0x50
 8000ff2:	4639      	mov	r1, r7
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	f01b fb7d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8000ffa:	b205      	sxth	r5, r0
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 8000ffc:	2251      	movs	r2, #81	@ 0x51
 8000ffe:	4639      	mov	r1, r7
 8001000:	4630      	mov	r0, r6
 8001002:	f01b fb77 	bl	801c6f4 <lv_obj_get_style_prop>
    return (bool)v.num;
 8001006:	3800      	subs	r0, #0
 8001008:	bf18      	it	ne
 800100a:	2001      	movne	r0, #1
    lv_draw_arc_get_area(c.x, c.y, r, start_angle, end_angle, w, rounded, &inv_area);
 800100c:	af04      	add	r7, sp, #16
 800100e:	9703      	str	r7, [sp, #12]
 8001010:	9002      	str	r0, [sp, #8]
 8001012:	9501      	str	r5, [sp, #4]
 8001014:	f8cd 8000 	str.w	r8, [sp]
 8001018:	4623      	mov	r3, r4
 800101a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800101e:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 8001022:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8001026:	f006 fb71 	bl	800770c <lv_draw_arc_get_area>
    lv_obj_invalidate_area(obj, &inv_area);
 800102a:	4639      	mov	r1, r7
 800102c:	4630      	mov	r0, r6
 800102e:	f018 ff12 	bl	8019e56 <lv_obj_invalidate_area>
}
 8001032:	b008      	add	sp, #32
 8001034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001038 <inv_knob_area>:
{
 8001038:	b510      	push	{r4, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	4604      	mov	r4, r0
    get_center(obj, &c, &r);
 800103e:	f10d 020a 	add.w	r2, sp, #10
 8001042:	a903      	add	r1, sp, #12
 8001044:	f7ff fd60 	bl	8000b08 <get_center>
    get_knob_area(obj, &c, r, &a);
 8001048:	466b      	mov	r3, sp
 800104a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800104e:	a903      	add	r1, sp, #12
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fe10 	bl	8000c76 <get_knob_area>
    lv_coord_t knob_extra_size = knob_get_extra_size(obj);
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff fdb2 	bl	8000bc0 <knob_get_extra_size>
    if(knob_extra_size > 0) {
 800105c:	1e01      	subs	r1, r0, #0
 800105e:	dc05      	bgt.n	800106c <inv_knob_area+0x34>
    lv_obj_invalidate_area(obj, &a);
 8001060:	4669      	mov	r1, sp
 8001062:	4620      	mov	r0, r4
 8001064:	f018 fef7 	bl	8019e56 <lv_obj_invalidate_area>
}
 8001068:	b004      	add	sp, #16
 800106a:	bd10      	pop	{r4, pc}
        lv_area_increase(&a, knob_extra_size, knob_extra_size);
 800106c:	460a      	mov	r2, r1
 800106e:	4668      	mov	r0, sp
 8001070:	f000 fca2 	bl	80019b8 <lv_area_increase>
 8001074:	e7f4      	b.n	8001060 <inv_knob_area+0x28>

08001076 <lv_arc_set_start_angle>:
{
 8001076:	b538      	push	{r3, r4, r5, lr}
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
    if(start > 360) start -= 360;
 800107c:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 8001080:	d902      	bls.n	8001088 <lv_arc_set_start_angle+0x12>
 8001082:	f5a1 75b4 	sub.w	r5, r1, #360	@ 0x168
 8001086:	b2ad      	uxth	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 8001088:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800108a:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 800108c:	1a5a      	subs	r2, r3, r1
 800108e:	fa1f fc82 	uxth.w	ip, r2
 8001092:	b212      	sxth	r2, r2
    int16_t new_delta = arc->indic_angle_end - start;
 8001094:	1b5b      	subs	r3, r3, r5
 8001096:	b298      	uxth	r0, r3
 8001098:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 800109a:	2a00      	cmp	r2, #0
 800109c:	db13      	blt.n	80010c6 <lv_arc_set_start_angle+0x50>
    if(new_delta < 0) new_delta = 360 + new_delta;
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db16      	blt.n	80010d0 <lv_arc_set_start_angle+0x5a>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80010a2:	1a98      	subs	r0, r3, r2
 80010a4:	2800      	cmp	r0, #0
 80010a6:	bfb8      	it	lt
 80010a8:	4240      	neglt	r0, r0
 80010aa:	28b4      	cmp	r0, #180	@ 0xb4
 80010ac:	dc14      	bgt.n	80010d8 <lv_arc_set_start_angle+0x62>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dc1d      	bgt.n	80010ee <lv_arc_set_start_angle+0x78>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->indic_angle_start, LV_PART_INDICATOR);
 80010b2:	429a      	cmp	r2, r3
 80010b4:	da13      	bge.n	80010de <lv_arc_set_start_angle+0x68>
 80010b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010ba:	460a      	mov	r2, r1
 80010bc:	4629      	mov	r1, r5
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff ff64 	bl	8000f8c <inv_arc_area>
 80010c4:	e00b      	b.n	80010de <lv_arc_set_start_angle+0x68>
    if(old_delta < 0) old_delta = 360 + old_delta;
 80010c6:	f50c 7cb4 	add.w	ip, ip, #360	@ 0x168
 80010ca:	fa0f f28c 	sxth.w	r2, ip
 80010ce:	e7e6      	b.n	800109e <lv_arc_set_start_angle+0x28>
    if(new_delta < 0) new_delta = 360 + new_delta;
 80010d0:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 80010d4:	b203      	sxth	r3, r0
 80010d6:	e7e4      	b.n	80010a2 <lv_arc_set_start_angle+0x2c>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80010d8:	4620      	mov	r0, r4
 80010da:	f018 fee4 	bl	8019ea6 <lv_obj_invalidate>
    inv_knob_area(obj);
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff ffaa 	bl	8001038 <inv_knob_area>
    arc->indic_angle_start = start;
 80010e4:	84e5      	strh	r5, [r4, #38]	@ 0x26
    inv_knob_area(obj);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff ffa6 	bl	8001038 <inv_knob_area>
}
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->indic_angle_start, start, LV_PART_INDICATOR);
 80010ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010f2:	462a      	mov	r2, r5
 80010f4:	4620      	mov	r0, r4
 80010f6:	f7ff ff49 	bl	8000f8c <inv_arc_area>
 80010fa:	e7f0      	b.n	80010de <lv_arc_set_start_angle+0x68>

080010fc <lv_arc_set_end_angle>:
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
    if(end > 360) end -= 360;
 8001102:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 8001106:	d902      	bls.n	800110e <lv_arc_set_end_angle+0x12>
 8001108:	f5a1 75b4 	sub.w	r5, r1, #360	@ 0x168
 800110c:	b2ad      	uxth	r5, r5
    int16_t old_delta = arc->indic_angle_end - arc->indic_angle_start;
 800110e:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8001110:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8001112:	1aca      	subs	r2, r1, r3
 8001114:	fa1f fc82 	uxth.w	ip, r2
 8001118:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->indic_angle_start;
 800111a:	1aeb      	subs	r3, r5, r3
 800111c:	b298      	uxth	r0, r3
 800111e:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8001120:	2a00      	cmp	r2, #0
 8001122:	db12      	blt.n	800114a <lv_arc_set_end_angle+0x4e>
    if(new_delta < 0) new_delta = 360 + new_delta;
 8001124:	2b00      	cmp	r3, #0
 8001126:	db15      	blt.n	8001154 <lv_arc_set_end_angle+0x58>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8001128:	1a98      	subs	r0, r3, r2
 800112a:	2800      	cmp	r0, #0
 800112c:	bfb8      	it	lt
 800112e:	4240      	neglt	r0, r0
 8001130:	28b4      	cmp	r0, #180	@ 0xb4
 8001132:	dc13      	bgt.n	800115c <lv_arc_set_end_angle+0x60>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8001134:	429a      	cmp	r2, r3
 8001136:	dc1c      	bgt.n	8001172 <lv_arc_set_end_angle+0x76>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->indic_angle_end, end, LV_PART_INDICATOR);
 8001138:	429a      	cmp	r2, r3
 800113a:	da12      	bge.n	8001162 <lv_arc_set_end_angle+0x66>
 800113c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001140:	462a      	mov	r2, r5
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff ff22 	bl	8000f8c <inv_arc_area>
 8001148:	e00b      	b.n	8001162 <lv_arc_set_end_angle+0x66>
    if(old_delta < 0) old_delta = 360 + old_delta;
 800114a:	f50c 7cb4 	add.w	ip, ip, #360	@ 0x168
 800114e:	fa0f f28c 	sxth.w	r2, ip
 8001152:	e7e7      	b.n	8001124 <lv_arc_set_end_angle+0x28>
    if(new_delta < 0) new_delta = 360 + new_delta;
 8001154:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8001158:	b203      	sxth	r3, r0
 800115a:	e7e5      	b.n	8001128 <lv_arc_set_end_angle+0x2c>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 800115c:	4620      	mov	r0, r4
 800115e:	f018 fea2 	bl	8019ea6 <lv_obj_invalidate>
    inv_knob_area(obj);
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff ff68 	bl	8001038 <inv_knob_area>
    arc->indic_angle_end = end;
 8001168:	8525      	strh	r5, [r4, #40]	@ 0x28
    inv_knob_area(obj);
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ff64 	bl	8001038 <inv_knob_area>
}
 8001170:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->indic_angle_end, LV_PART_INDICATOR);
 8001172:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001176:	460a      	mov	r2, r1
 8001178:	4629      	mov	r1, r5
 800117a:	4620      	mov	r0, r4
 800117c:	f7ff ff06 	bl	8000f8c <inv_arc_area>
 8001180:	e7ef      	b.n	8001162 <lv_arc_set_end_angle+0x66>

08001182 <lv_arc_set_angles>:
{
 8001182:	b538      	push	{r3, r4, r5, lr}
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
    lv_arc_set_end_angle(obj, end);
 8001188:	4611      	mov	r1, r2
 800118a:	f7ff ffb7 	bl	80010fc <lv_arc_set_end_angle>
    lv_arc_set_start_angle(obj, start);
 800118e:	4629      	mov	r1, r5
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff ff70 	bl	8001076 <lv_arc_set_start_angle>
}
 8001196:	bd38      	pop	{r3, r4, r5, pc}

08001198 <value_update>:
{
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	b083      	sub	sp, #12
 800119c:	4604      	mov	r4, r0
    if(arc->value == VALUE_UNSET) return;
 800119e:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	@ 0x2e
 80011a2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80011a6:	d061      	beq.n	800126c <value_update+0xd4>
    int16_t bg_midpoint, range_midpoint, bg_end = arc->bg_angle_end;
 80011a8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80011aa:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
    if(arc->bg_angle_end < arc->bg_angle_start) bg_end = arc->bg_angle_end + 360;
 80011ae:	8d65      	ldrh	r5, [r4, #42]	@ 0x2a
 80011b0:	42aa      	cmp	r2, r5
 80011b2:	d202      	bcs.n	80011ba <value_update+0x22>
 80011b4:	f502 72b4 	add.w	r2, r2, #360	@ 0x168
 80011b8:	b213      	sxth	r3, r2
    switch(arc->type) {
 80011ba:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80011be:	f3c2 0241 	ubfx	r2, r2, #1, #2
 80011c2:	2a01      	cmp	r2, #1
 80011c4:	d012      	beq.n	80011ec <value_update+0x54>
 80011c6:	2a02      	cmp	r2, #2
 80011c8:	d041      	beq.n	800124e <value_update+0xb6>
 80011ca:	2a00      	cmp	r2, #0
 80011cc:	d14e      	bne.n	800126c <value_update+0xd4>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, arc->bg_angle_start, bg_end);
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	462b      	mov	r3, r5
 80011d2:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	@ 0x32
 80011d6:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 80011da:	f015 fb58 	bl	801688e <lv_map>
 80011de:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, arc->bg_angle_start, angle);
 80011e0:	b282      	uxth	r2, r0
 80011e2:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80011e4:	4620      	mov	r0, r4
 80011e6:	f7ff ffcc 	bl	8001182 <lv_arc_set_angles>
            break;
 80011ea:	e03d      	b.n	8001268 <value_update+0xd0>
            bg_midpoint = (arc->bg_angle_start + bg_end) / 2;
 80011ec:	18ea      	adds	r2, r5, r3
 80011ee:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80011f2:	1056      	asrs	r6, r2, #1
 80011f4:	f342 074f 	sbfx	r7, r2, #1, #16
            range_midpoint = (int32_t)(arc->min_value + arc->max_value) / 2;
 80011f8:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 80011fc:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	@ 0x32
 8001200:	eb01 0c02 	add.w	ip, r1, r2
 8001204:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8001208:	f34c 0c4f 	sbfx	ip, ip, #1, #16
            if(arc->value < range_midpoint) {
 800120c:	4560      	cmp	r0, ip
 800120e:	da0e      	bge.n	800122e <value_update+0x96>
                angle = lv_map(arc->value, arc->min_value, range_midpoint, arc->bg_angle_start, bg_midpoint);
 8001210:	9700      	str	r7, [sp, #0]
 8001212:	462b      	mov	r3, r5
 8001214:	4662      	mov	r2, ip
 8001216:	f015 fb3a 	bl	801688e <lv_map>
 800121a:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, angle);
 800121c:	b281      	uxth	r1, r0
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff29 	bl	8001076 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, bg_midpoint);
 8001224:	b2b1      	uxth	r1, r6
 8001226:	4620      	mov	r0, r4
 8001228:	f7ff ff68 	bl	80010fc <lv_arc_set_end_angle>
 800122c:	e01c      	b.n	8001268 <value_update+0xd0>
                angle = lv_map(arc->value, range_midpoint, arc->max_value, bg_midpoint, bg_end);
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	463b      	mov	r3, r7
 8001232:	4661      	mov	r1, ip
 8001234:	f015 fb2b 	bl	801688e <lv_map>
 8001238:	4607      	mov	r7, r0
 800123a:	b205      	sxth	r5, r0
                lv_arc_set_start_angle(obj, bg_midpoint);
 800123c:	b2b1      	uxth	r1, r6
 800123e:	4620      	mov	r0, r4
 8001240:	f7ff ff19 	bl	8001076 <lv_arc_set_start_angle>
                lv_arc_set_end_angle(obj, angle);
 8001244:	b2b9      	uxth	r1, r7
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ff58 	bl	80010fc <lv_arc_set_end_angle>
 800124c:	e00c      	b.n	8001268 <value_update+0xd0>
            angle = lv_map(arc->value, arc->min_value, arc->max_value, bg_end, arc->bg_angle_start);
 800124e:	9500      	str	r5, [sp, #0]
 8001250:	f9b4 2032 	ldrsh.w	r2, [r4, #50]	@ 0x32
 8001254:	f9b4 1030 	ldrsh.w	r1, [r4, #48]	@ 0x30
 8001258:	f015 fb19 	bl	801688e <lv_map>
 800125c:	b205      	sxth	r5, r0
            lv_arc_set_angles(obj, angle, arc->bg_angle_end);
 800125e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001260:	b281      	uxth	r1, r0
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff8d 	bl	8001182 <lv_arc_set_angles>
    arc->last_angle = angle; /*Cache angle for slew rate limiting*/
 8001268:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
}
 800126c:	b003      	add	sp, #12
 800126e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001270 <lv_arc_set_bg_start_angle>:
{
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	4605      	mov	r5, r0
 8001274:	460c      	mov	r4, r1
    if(start > 360) start -= 360;
 8001276:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 800127a:	d902      	bls.n	8001282 <lv_arc_set_bg_start_angle+0x12>
 800127c:	f5a1 74b4 	sub.w	r4, r1, #360	@ 0x168
 8001280:	b2a4      	uxth	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 8001282:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8001284:	8d69      	ldrh	r1, [r5, #42]	@ 0x2a
 8001286:	1a5a      	subs	r2, r3, r1
 8001288:	fa1f fc82 	uxth.w	ip, r2
 800128c:	b212      	sxth	r2, r2
    int16_t new_delta = arc->bg_angle_end - start;
 800128e:	1b1b      	subs	r3, r3, r4
 8001290:	b298      	uxth	r0, r3
 8001292:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8001294:	2a00      	cmp	r2, #0
 8001296:	db12      	blt.n	80012be <lv_arc_set_bg_start_angle+0x4e>
    if(new_delta < 0) new_delta = 360 + new_delta;
 8001298:	2b00      	cmp	r3, #0
 800129a:	db15      	blt.n	80012c8 <lv_arc_set_bg_start_angle+0x58>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 800129c:	1a98      	subs	r0, r3, r2
 800129e:	2800      	cmp	r0, #0
 80012a0:	bfb8      	it	lt
 80012a2:	4240      	neglt	r0, r0
 80012a4:	28b4      	cmp	r0, #180	@ 0xb4
 80012a6:	dc13      	bgt.n	80012d0 <lv_arc_set_bg_start_angle+0x60>
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dc19      	bgt.n	80012e0 <lv_arc_set_bg_start_angle+0x70>
    else if(old_delta < new_delta) inv_arc_area(obj, start, arc->bg_angle_start, LV_PART_MAIN);
 80012ac:	429a      	cmp	r2, r3
 80012ae:	da12      	bge.n	80012d6 <lv_arc_set_bg_start_angle+0x66>
 80012b0:	2300      	movs	r3, #0
 80012b2:	460a      	mov	r2, r1
 80012b4:	4621      	mov	r1, r4
 80012b6:	4628      	mov	r0, r5
 80012b8:	f7ff fe68 	bl	8000f8c <inv_arc_area>
 80012bc:	e00b      	b.n	80012d6 <lv_arc_set_bg_start_angle+0x66>
    if(old_delta < 0) old_delta = 360 + old_delta;
 80012be:	f50c 7cb4 	add.w	ip, ip, #360	@ 0x168
 80012c2:	fa0f f28c 	sxth.w	r2, ip
 80012c6:	e7e7      	b.n	8001298 <lv_arc_set_bg_start_angle+0x28>
    if(new_delta < 0) new_delta = 360 + new_delta;
 80012c8:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 80012cc:	b203      	sxth	r3, r0
 80012ce:	e7e5      	b.n	800129c <lv_arc_set_bg_start_angle+0x2c>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 80012d0:	4628      	mov	r0, r5
 80012d2:	f018 fde8 	bl	8019ea6 <lv_obj_invalidate>
    arc->bg_angle_start = start;
 80012d6:	856c      	strh	r4, [r5, #42]	@ 0x2a
    value_update(obj);
 80012d8:	4628      	mov	r0, r5
 80012da:	f7ff ff5d 	bl	8001198 <value_update>
}
 80012de:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, arc->bg_angle_start, start, LV_PART_MAIN);
 80012e0:	2300      	movs	r3, #0
 80012e2:	4622      	mov	r2, r4
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff fe51 	bl	8000f8c <inv_arc_area>
 80012ea:	e7f4      	b.n	80012d6 <lv_arc_set_bg_start_angle+0x66>

080012ec <lv_arc_set_bg_end_angle>:
{
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4605      	mov	r5, r0
 80012f0:	460c      	mov	r4, r1
    if(end > 360) end -= 360;
 80012f2:	f5b1 7fb4 	cmp.w	r1, #360	@ 0x168
 80012f6:	d902      	bls.n	80012fe <lv_arc_set_bg_end_angle+0x12>
 80012f8:	f5a1 74b4 	sub.w	r4, r1, #360	@ 0x168
 80012fc:	b2a4      	uxth	r4, r4
    int16_t old_delta = arc->bg_angle_end - arc->bg_angle_start;
 80012fe:	8da9      	ldrh	r1, [r5, #44]	@ 0x2c
 8001300:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8001302:	1aca      	subs	r2, r1, r3
 8001304:	fa1f fc82 	uxth.w	ip, r2
 8001308:	b212      	sxth	r2, r2
    int16_t new_delta = end - arc->bg_angle_start;
 800130a:	1ae3      	subs	r3, r4, r3
 800130c:	b298      	uxth	r0, r3
 800130e:	b21b      	sxth	r3, r3
    if(old_delta < 0) old_delta = 360 + old_delta;
 8001310:	2a00      	cmp	r2, #0
 8001312:	db11      	blt.n	8001338 <lv_arc_set_bg_end_angle+0x4c>
    if(new_delta < 0) new_delta = 360 + new_delta;
 8001314:	2b00      	cmp	r3, #0
 8001316:	db14      	blt.n	8001342 <lv_arc_set_bg_end_angle+0x56>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 8001318:	1a98      	subs	r0, r3, r2
 800131a:	2800      	cmp	r0, #0
 800131c:	bfb8      	it	lt
 800131e:	4240      	neglt	r0, r0
 8001320:	28b4      	cmp	r0, #180	@ 0xb4
 8001322:	dc12      	bgt.n	800134a <lv_arc_set_bg_end_angle+0x5e>
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 8001324:	429a      	cmp	r2, r3
 8001326:	dc18      	bgt.n	800135a <lv_arc_set_bg_end_angle+0x6e>
    else if(old_delta < new_delta) inv_arc_area(obj, arc->bg_angle_end, end, LV_PART_MAIN);
 8001328:	429a      	cmp	r2, r3
 800132a:	da11      	bge.n	8001350 <lv_arc_set_bg_end_angle+0x64>
 800132c:	2300      	movs	r3, #0
 800132e:	4622      	mov	r2, r4
 8001330:	4628      	mov	r0, r5
 8001332:	f7ff fe2b 	bl	8000f8c <inv_arc_area>
 8001336:	e00b      	b.n	8001350 <lv_arc_set_bg_end_angle+0x64>
    if(old_delta < 0) old_delta = 360 + old_delta;
 8001338:	f50c 7cb4 	add.w	ip, ip, #360	@ 0x168
 800133c:	fa0f f28c 	sxth.w	r2, ip
 8001340:	e7e8      	b.n	8001314 <lv_arc_set_bg_end_angle+0x28>
    if(new_delta < 0) new_delta = 360 + new_delta;
 8001342:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8001346:	b203      	sxth	r3, r0
 8001348:	e7e6      	b.n	8001318 <lv_arc_set_bg_end_angle+0x2c>
    if(LV_ABS(new_delta - old_delta) > 180)  lv_obj_invalidate(obj);
 800134a:	4628      	mov	r0, r5
 800134c:	f018 fdab 	bl	8019ea6 <lv_obj_invalidate>
    arc->bg_angle_end = end;
 8001350:	85ac      	strh	r4, [r5, #44]	@ 0x2c
    value_update(obj);
 8001352:	4628      	mov	r0, r5
 8001354:	f7ff ff20 	bl	8001198 <value_update>
}
 8001358:	bd38      	pop	{r3, r4, r5, pc}
    else if(new_delta < old_delta) inv_arc_area(obj, end, arc->bg_angle_end, LV_PART_MAIN);
 800135a:	2300      	movs	r3, #0
 800135c:	460a      	mov	r2, r1
 800135e:	4621      	mov	r1, r4
 8001360:	4628      	mov	r0, r5
 8001362:	f7ff fe13 	bl	8000f8c <inv_arc_area>
 8001366:	e7f3      	b.n	8001350 <lv_arc_set_bg_end_angle+0x64>

08001368 <lv_arc_set_bg_angles>:
{
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4604      	mov	r4, r0
 800136c:	460d      	mov	r5, r1
    lv_arc_set_bg_end_angle(obj, end);
 800136e:	4611      	mov	r1, r2
 8001370:	f7ff ffbc 	bl	80012ec <lv_arc_set_bg_end_angle>
    lv_arc_set_bg_start_angle(obj, start);
 8001374:	4629      	mov	r1, r5
 8001376:	4620      	mov	r0, r4
 8001378:	f7ff ff7a 	bl	8001270 <lv_arc_set_bg_start_angle>
}
 800137c:	bd38      	pop	{r3, r4, r5, pc}

0800137e <lv_arc_set_rotation>:
{
 800137e:	b508      	push	{r3, lr}
    arc->rotation = rotation;
 8001380:	8481      	strh	r1, [r0, #36]	@ 0x24
    lv_obj_invalidate(obj);
 8001382:	f018 fd90 	bl	8019ea6 <lv_obj_invalidate>
}
 8001386:	bd08      	pop	{r3, pc}

08001388 <lv_arc_set_value>:
    if(arc->value == value) return;
 8001388:	f9b0 c02e 	ldrsh.w	ip, [r0, #46]	@ 0x2e
 800138c:	458c      	cmp	ip, r1
 800138e:	d010      	beq.n	80013b2 <lv_arc_set_value+0x2a>
{
 8001390:	b508      	push	{r3, lr}
    new_value = value > arc->max_value ? arc->max_value : value;
 8001392:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	@ 0x32
 8001396:	428a      	cmp	r2, r1
 8001398:	bfa8      	it	ge
 800139a:	460a      	movge	r2, r1
    new_value = new_value < arc->min_value ? arc->min_value : new_value;
 800139c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 80013a0:	4293      	cmp	r3, r2
 80013a2:	bfb8      	it	lt
 80013a4:	4613      	movlt	r3, r2
    if(arc->value == new_value) return;
 80013a6:	459c      	cmp	ip, r3
 80013a8:	d002      	beq.n	80013b0 <lv_arc_set_value+0x28>
    arc->value = new_value;
 80013aa:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    value_update(obj);
 80013ac:	f7ff fef4 	bl	8001198 <value_update>
}
 80013b0:	bd08      	pop	{r3, pc}
 80013b2:	4770      	bx	lr

080013b4 <lv_arc_get_value>:
}
 80013b4:	f9b0 002e 	ldrsh.w	r0, [r0, #46]	@ 0x2e
 80013b8:	4770      	bx	lr
	...

080013bc <lv_arc_event>:
{
 80013bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80013c4:	48ce      	ldr	r0, [pc, #824]	@ (8001700 <lv_arc_event+0x344>)
 80013c6:	f00f fbd5 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80013ca:	2801      	cmp	r0, #1
 80013cc:	d002      	beq.n	80013d4 <lv_arc_event+0x18>
}
 80013ce:	b006      	add	sp, #24
 80013d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80013d4:	4620      	mov	r0, r4
 80013d6:	f00f fca5 	bl	8010d24 <lv_event_get_code>
 80013da:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80013dc:	4620      	mov	r0, r4
 80013de:	f00f fc9d 	bl	8010d1c <lv_event_get_target>
 80013e2:	4606      	mov	r6, r0
    lv_arc_t * arc = (lv_arc_t *)lv_event_get_target(e);
 80013e4:	4620      	mov	r0, r4
 80013e6:	f00f fc99 	bl	8010d1c <lv_event_get_target>
 80013ea:	4607      	mov	r7, r0
    if(code == LV_EVENT_PRESSING) {
 80013ec:	1eab      	subs	r3, r5, #2
 80013ee:	2b13      	cmp	r3, #19
 80013f0:	d8ed      	bhi.n	80013ce <lv_arc_event+0x12>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <lv_arc_event+0x3c>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001449 	.word	0x08001449
 80013fc:	08001743 	.word	0x08001743
 8001400:	080013cf 	.word	0x080013cf
 8001404:	080013cf 	.word	0x080013cf
 8001408:	080013cf 	.word	0x080013cf
 800140c:	080013cf 	.word	0x080013cf
 8001410:	08001743 	.word	0x08001743
 8001414:	080013cf 	.word	0x080013cf
 8001418:	080013cf 	.word	0x080013cf
 800141c:	080013cf 	.word	0x080013cf
 8001420:	080013cf 	.word	0x080013cf
 8001424:	0800177b 	.word	0x0800177b
 8001428:	080013cf 	.word	0x080013cf
 800142c:	080013cf 	.word	0x080013cf
 8001430:	080013cf 	.word	0x080013cf
 8001434:	080017d1 	.word	0x080017d1
 8001438:	080013cf 	.word	0x080013cf
 800143c:	08001865 	.word	0x08001865
 8001440:	080013cf 	.word	0x080013cf
 8001444:	08001925 	.word	0x08001925
        lv_indev_t * indev = lv_indev_get_act();
 8001448:	f013 f992 	bl	8014770 <lv_indev_get_act>
        if(indev == NULL) return;
 800144c:	4604      	mov	r4, r0
 800144e:	2800      	cmp	r0, #0
 8001450:	d0bd      	beq.n	80013ce <lv_arc_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8001452:	f013 f993 	bl	801477c <lv_indev_get_type>
        if(indev_type != LV_INDEV_TYPE_POINTER) return;
 8001456:	2801      	cmp	r0, #1
 8001458:	d1b9      	bne.n	80013ce <lv_arc_event+0x12>
        lv_indev_get_point(indev, &p);
 800145a:	a903      	add	r1, sp, #12
 800145c:	4620      	mov	r0, r4
 800145e:	f013 f9fe 	bl	801485e <lv_indev_get_point>
        get_center(obj, &center, &r);
 8001462:	f10d 020a 	add.w	r2, sp, #10
 8001466:	a904      	add	r1, sp, #16
 8001468:	4630      	mov	r0, r6
 800146a:	f7ff fb4d 	bl	8000b08 <get_center>
        p.x -= center.x;
 800146e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8001472:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	f8ad 300c 	strh.w	r3, [sp, #12]
        p.y -= center.y;
 800147c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001480:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	f8ad 300e 	strh.w	r3, [sp, #14]
        if(arc->dragging == false) {
 800148a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800148e:	f013 0f01 	tst.w	r3, #1
 8001492:	f000 80b5 	beq.w	8001600 <lv_arc_event+0x244>
        if(arc->dragging == false) return;
 8001496:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800149a:	f013 0f01 	tst.w	r3, #1
 800149e:	d096      	beq.n	80013ce <lv_arc_event+0x12>
        if(p.x == 0 && p.y == 0) return;
 80014a0:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80014a4:	b919      	cbnz	r1, 80014ae <lv_arc_event+0xf2>
 80014a6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d08f      	beq.n	80013ce <lv_arc_event+0x12>
        int16_t bg_end = arc->bg_angle_end;
 80014ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80014b0:	f9b7 502c 	ldrsh.w	r5, [r7, #44]	@ 0x2c
        if(arc->bg_angle_end < arc->bg_angle_start) {
 80014b4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d202      	bcs.n	80014c0 <lv_arc_event+0x104>
            bg_end = arc->bg_angle_end + 360;
 80014ba:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80014be:	b21d      	sxth	r5, r3
        angle = lv_atan2(p.y, p.x);
 80014c0:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 80014c4:	f015 f96b 	bl	801679e <lv_atan2>
        angle -= arc->rotation;
 80014c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014ca:	1ac4      	subs	r4, r0, r3
 80014cc:	b2a4      	uxth	r4, r4
        angle -= arc->bg_angle_start;  /*Make the angle relative to the start angle*/
 80014ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80014d0:	1ae4      	subs	r4, r4, r3
 80014d2:	b2a3      	uxth	r3, r4
 80014d4:	b224      	sxth	r4, r4
        if(angle < 0) angle += 360;
 80014d6:	2c00      	cmp	r4, #0
 80014d8:	f2c0 80db 	blt.w	8001692 <lv_arc_event+0x2d6>
        const uint32_t circumference = (uint32_t)((2U * r * 314U) / 100U);  /* Equivalent to: 2r * 3.14, avoiding floats */
 80014dc:	f9bd 800a 	ldrsh.w	r8, [sp, #10]
 80014e0:	f44f 731d 	mov.w	r3, #628	@ 0x274
 80014e4:	fb03 f808 	mul.w	r8, r3, r8
 80014e8:	4b86      	ldr	r3, [pc, #536]	@ (8001704 <lv_arc_event+0x348>)
 80014ea:	fba3 3808 	umull	r3, r8, r3, r8
 80014ee:	ea4f 1858 	mov.w	r8, r8, lsr #5
        const uint32_t tolerance_deg = (360U * LV_DPX(50U)) / circumference;
 80014f2:	2000      	movs	r0, #0
 80014f4:	f011 fef8 	bl	80132e8 <lv_disp_get_dpi>
 80014f8:	2332      	movs	r3, #50	@ 0x32
 80014fa:	fb00 f303 	mul.w	r3, r0, r3
 80014fe:	3350      	adds	r3, #80	@ 0x50
 8001500:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001504:	f080 80c9 	bcs.w	800169a <lv_arc_event+0x2de>
 8001508:	f44f 72b4 	mov.w	r2, #360	@ 0x168
        const uint32_t min_close_prev = (uint32_t) arc->min_close;
 800150c:	f897 9034 	ldrb.w	r9, [r7, #52]	@ 0x34
 8001510:	f3c9 09c0 	ubfx	r9, r9, #3, #1
        const bool is_angle_within_bg_bounds = lv_arc_angle_within_bg_bounds(obj, (uint32_t) angle, tolerance_deg);
 8001514:	fbb2 f2f8 	udiv	r2, r2, r8
 8001518:	4621      	mov	r1, r4
 800151a:	4630      	mov	r0, r6
 800151c:	f7ff fa52 	bl	80009c4 <lv_arc_angle_within_bg_bounds>
        if(!is_angle_within_bg_bounds) {
 8001520:	2800      	cmp	r0, #0
 8001522:	f43f af54 	beq.w	80013ce <lv_arc_event+0x12>
        int16_t deg_range = bg_end - arc->bg_angle_start;
 8001526:	fa1f fc85 	uxth.w	ip, r5
 800152a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800152c:	ebac 0001 	sub.w	r0, ip, r1
 8001530:	b200      	sxth	r0, r0
        int16_t last_angle_rel = arc->last_angle - arc->bg_angle_start;
 8001532:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001536:	eba3 0801 	sub.w	r8, r3, r1
 800153a:	fa1f f888 	uxth.w	r8, r8
        int16_t delta_angle = angle - last_angle_rel;
 800153e:	1acb      	subs	r3, r1, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	191a      	adds	r2, r3, r4
 8001544:	b212      	sxth	r2, r2
        if(LV_ABS(delta_angle) > 280) {
 8001546:	2a00      	cmp	r2, #0
 8001548:	bfb8      	it	lt
 800154a:	4252      	neglt	r2, r2
 800154c:	b292      	uxth	r2, r2
 800154e:	f5b2 7f8c 	cmp.w	r2, #280	@ 0x118
 8001552:	f240 80b2 	bls.w	80016ba <lv_arc_event+0x2fe>
            if(arc->min_close) angle = 0;
 8001556:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 800155a:	f011 0f08 	tst.w	r1, #8
 800155e:	f000 80b9 	beq.w	80016d4 <lv_arc_event+0x318>
 8001562:	2400      	movs	r4, #0
        if(((min_close_prev == CLICK_CLOSER_TO_MIN_END) && (arc->min_close == CLICK_CLOSER_TO_MAX_END))
 8001564:	f1b9 0f00 	cmp.w	r9, #0
 8001568:	f040 80b8 	bne.w	80016dc <lv_arc_event+0x320>
        else if(((min_close_prev == CLICK_CLOSER_TO_MAX_END) && (arc->min_close == CLICK_CLOSER_TO_MIN_END))
 800156c:	f1b9 0f00 	cmp.w	r9, #0
 8001570:	d106      	bne.n	8001580 <lv_arc_event+0x1c4>
                && (CLICK_OUTSIDE_BG_ANGLES == arc->in_out)) {
 8001572:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001576:	f002 0218 	and.w	r2, r2, #24
 800157a:	2a08      	cmp	r2, #8
 800157c:	f000 80be 	beq.w	80016fc <lv_arc_event+0x340>
        delta_angle = angle - last_angle_rel;
 8001580:	4423      	add	r3, r4
 8001582:	b21c      	sxth	r4, r3
        uint32_t delta_tick = lv_tick_elaps(arc->last_tick);
 8001584:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001586:	f011 feff 	bl	8013388 <lv_tick_elaps>
        const uint16_t delta_angle_max = (arc->chg_rate * delta_tick) / 1000;
 800158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800158c:	fb00 f303 	mul.w	r3, r0, r3
 8001590:	4a5d      	ldr	r2, [pc, #372]	@ (8001708 <lv_arc_event+0x34c>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	099a      	lsrs	r2, r3, #6
 8001598:	f3c3 138f 	ubfx	r3, r3, #6, #16
        if(delta_angle > delta_angle_max) {
 800159c:	429c      	cmp	r4, r3
 800159e:	f340 80b7 	ble.w	8001710 <lv_arc_event+0x354>
            delta_angle = delta_angle_max;
 80015a2:	b214      	sxth	r4, r2
        angle = last_angle_rel + delta_angle; /*Apply the limited angle change*/
 80015a4:	eb08 0004 	add.w	r0, r8, r4
        int32_t round = ((bg_end - arc->bg_angle_start) * 8) / (arc->max_value - arc->min_value);
 80015a8:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80015aa:	1a6a      	subs	r2, r5, r1
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	f9b7 4032 	ldrsh.w	r4, [r7, #50]	@ 0x32
 80015b2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80015b6:	eba4 0c03 	sub.w	ip, r4, r3
 80015ba:	fb92 f2fc 	sdiv	r2, r2, ip
        round = (round + 4) >> 4;
 80015be:	3204      	adds	r2, #4
 80015c0:	1112      	asrs	r2, r2, #4
        angle += round;
 80015c2:	fa12 f080 	uxtah	r0, r2, r0
        angle += arc->bg_angle_start;  /*Make the angle absolute again*/
 80015c6:	fa11 f080 	uxtah	r0, r1, r0
        int16_t old_value = arc->value;
 80015ca:	f9b7 802e 	ldrsh.w	r8, [r7, #46]	@ 0x2e
        int16_t new_value = lv_map(angle, arc->bg_angle_start, bg_end, arc->min_value, arc->max_value);
 80015ce:	9400      	str	r4, [sp, #0]
 80015d0:	462a      	mov	r2, r5
 80015d2:	b200      	sxth	r0, r0
 80015d4:	f015 f95b 	bl	801688e <lv_map>
 80015d8:	b204      	sxth	r4, r0
        if(new_value != lv_arc_get_value(obj)) {
 80015da:	4630      	mov	r0, r6
 80015dc:	f7ff feea 	bl	80013b4 <lv_arc_get_value>
 80015e0:	42a0      	cmp	r0, r4
 80015e2:	f040 809b 	bne.w	800171c <lv_arc_event+0x360>
        if(new_value == arc->min_value || new_value == arc->max_value) {
 80015e6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	d004      	beq.n	80015f8 <lv_arc_event+0x23c>
 80015ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80015f2:	42a3      	cmp	r3, r4
 80015f4:	f47f aeeb 	bne.w	80013ce <lv_arc_event+0x12>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 80015f8:	f011 feb8 	bl	801336c <lv_tick_get>
 80015fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80015fe:	e6e6      	b.n	80013ce <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8001600:	2250      	movs	r2, #80	@ 0x50
 8001602:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8001606:	4630      	mov	r0, r6
 8001608:	f01b f874 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800160c:	b205      	sxth	r5, r0
            r -= indic_width;
 800160e:	b284      	uxth	r4, r0
 8001610:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001614:	1b1b      	subs	r3, r3, r4
 8001616:	f8ad 300a 	strh.w	r3, [sp, #10]
            if(lv_obj_has_flag(obj, LV_OBJ_FLAG_ADV_HITTEST)) {
 800161a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800161e:	4630      	mov	r0, r6
 8001620:	f016 ff35 	bl	801848e <lv_obj_has_flag>
 8001624:	b308      	cbz	r0, 800166a <lv_arc_event+0x2ae>
                r -= indic_width;
 8001626:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800162a:	1b1b      	subs	r3, r3, r4
 800162c:	f8ad 300a 	strh.w	r3, [sp, #10]
            if(r < 1) r = 1;
 8001630:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd28      	ble.n	800168a <lv_arc_event+0x2ce>
            if(p.x * p.x + p.y * p.y > r * r) {
 8001638:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800163c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8001640:	fb02 f202 	mul.w	r2, r2, r2
 8001644:	fb03 2203 	mla	r2, r3, r3, r2
 8001648:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800164c:	fb03 f303 	mul.w	r3, r3, r3
 8001650:	429a      	cmp	r2, r3
 8001652:	f77f af20 	ble.w	8001496 <lv_arc_event+0xda>
                arc->dragging = true;
 8001656:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                arc->last_tick = lv_tick_get(); /*Capture timestamp at dragging start*/
 8001662:	f011 fe83 	bl	801336c <lv_tick_get>
 8001666:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001668:	e715      	b.n	8001496 <lv_arc_event+0xda>
                r -= LV_MAX(r / 4, indic_width);
 800166a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800166e:	4613      	mov	r3, r2
 8001670:	2a00      	cmp	r2, #0
 8001672:	db08      	blt.n	8001686 <lv_arc_event+0x2ca>
 8001674:	109b      	asrs	r3, r3, #2
 8001676:	42ab      	cmp	r3, r5
 8001678:	bfb8      	it	lt
 800167a:	462b      	movlt	r3, r5
 800167c:	b29b      	uxth	r3, r3
 800167e:	1ad2      	subs	r2, r2, r3
 8001680:	f8ad 200a 	strh.w	r2, [sp, #10]
 8001684:	e7d4      	b.n	8001630 <lv_arc_event+0x274>
 8001686:	1cd3      	adds	r3, r2, #3
 8001688:	e7f4      	b.n	8001674 <lv_arc_event+0x2b8>
            if(r < 1) r = 1;
 800168a:	2301      	movs	r3, #1
 800168c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001690:	e7d2      	b.n	8001638 <lv_arc_event+0x27c>
        if(angle < 0) angle += 360;
 8001692:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001696:	b21c      	sxth	r4, r3
 8001698:	e720      	b.n	80014dc <lv_arc_event+0x120>
        const uint32_t tolerance_deg = (360U * LV_DPX(50U)) / circumference;
 800169a:	2000      	movs	r0, #0
 800169c:	f011 fe24 	bl	80132e8 <lv_disp_get_dpi>
 80016a0:	2332      	movs	r3, #50	@ 0x32
 80016a2:	fb03 f200 	mul.w	r2, r3, r0
 80016a6:	3250      	adds	r2, #80	@ 0x50
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <lv_arc_event+0x350>)
 80016aa:	fba3 3202 	umull	r3, r2, r3, r2
 80016ae:	09d2      	lsrs	r2, r2, #7
 80016b0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80016b4:	fb03 f202 	mul.w	r2, r3, r2
 80016b8:	e728      	b.n	800150c <lv_arc_event+0x150>
        else if(CLICK_OUTSIDE_BG_ANGLES == arc->in_out) {
 80016ba:	f897 e034 	ldrb.w	lr, [r7, #52]	@ 0x34
 80016be:	f01e 0f10 	tst.w	lr, #16
 80016c2:	f47f af4f 	bne.w	8001564 <lv_arc_event+0x1a8>
            if(arc->min_close) angle = -deg_range;
 80016c6:	f01e 0f08 	tst.w	lr, #8
 80016ca:	d005      	beq.n	80016d8 <lv_arc_event+0x31c>
 80016cc:	eba1 010c 	sub.w	r1, r1, ip
 80016d0:	b20c      	sxth	r4, r1
 80016d2:	e747      	b.n	8001564 <lv_arc_event+0x1a8>
            else angle = deg_range;
 80016d4:	4604      	mov	r4, r0
 80016d6:	e745      	b.n	8001564 <lv_arc_event+0x1a8>
            else angle = deg_range;
 80016d8:	4604      	mov	r4, r0
 80016da:	e743      	b.n	8001564 <lv_arc_event+0x1a8>
        if(((min_close_prev == CLICK_CLOSER_TO_MIN_END) && (arc->min_close == CLICK_CLOSER_TO_MAX_END))
 80016dc:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 80016e0:	f011 0f08 	tst.w	r1, #8
 80016e4:	f47f af42 	bne.w	800156c <lv_arc_event+0x1b0>
           && ((CLICK_OUTSIDE_BG_ANGLES == arc->in_out) && (LV_ABS(delta_angle) > 280))) {
 80016e8:	f011 0f10 	tst.w	r1, #16
 80016ec:	f47f af3e 	bne.w	800156c <lv_arc_event+0x1b0>
 80016f0:	f5b2 7f8c 	cmp.w	r2, #280	@ 0x118
 80016f4:	f67f af3a 	bls.w	800156c <lv_arc_event+0x1b0>
            angle = 0;
 80016f8:	2400      	movs	r4, #0
 80016fa:	e741      	b.n	8001580 <lv_arc_event+0x1c4>
            angle = deg_range;
 80016fc:	4604      	mov	r4, r0
 80016fe:	e73f      	b.n	8001580 <lv_arc_event+0x1c4>
 8001700:	080298d4 	.word	0x080298d4
 8001704:	51eb851f 	.word	0x51eb851f
 8001708:	10624dd3 	.word	0x10624dd3
 800170c:	cccccccd 	.word	0xcccccccd
        else if(delta_angle < -delta_angle_max) {
 8001710:	425a      	negs	r2, r3
 8001712:	4294      	cmp	r4, r2
 8001714:	f6bf af46 	bge.w	80015a4 <lv_arc_event+0x1e8>
            delta_angle = -delta_angle_max;
 8001718:	b214      	sxth	r4, r2
 800171a:	e743      	b.n	80015a4 <lv_arc_event+0x1e8>
            arc->last_tick = lv_tick_get(); /*Cache timestamp for the next iteration*/
 800171c:	f011 fe26 	bl	801336c <lv_tick_get>
 8001720:	63f8      	str	r0, [r7, #60]	@ 0x3c
            lv_arc_set_value(obj, new_value); /*set_value caches the last_angle for the next iteration*/
 8001722:	4621      	mov	r1, r4
 8001724:	4630      	mov	r0, r6
 8001726:	f7ff fe2f 	bl	8001388 <lv_arc_set_value>
            if(new_value != old_value) {
 800172a:	45a0      	cmp	r8, r4
 800172c:	f43f af5b 	beq.w	80015e6 <lv_arc_event+0x22a>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8001730:	2200      	movs	r2, #0
 8001732:	211c      	movs	r1, #28
 8001734:	4630      	mov	r0, r6
 8001736:	f00f fac7 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 800173a:	2801      	cmp	r0, #1
 800173c:	f47f ae47 	bne.w	80013ce <lv_arc_event+0x12>
 8001740:	e751      	b.n	80015e6 <lv_arc_event+0x22a>
        arc->dragging = false;
 8001742:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
        lv_group_t * g             = lv_obj_get_group(obj);
 800174e:	4630      	mov	r0, r6
 8001750:	f016 feb1 	bl	80184b6 <lv_obj_get_group>
 8001754:	4605      	mov	r5, r0
        bool editing               = lv_group_get_editing(g);
 8001756:	f011 fcaf 	bl	80130b8 <lv_group_get_editing>
 800175a:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 800175c:	f013 f808 	bl	8014770 <lv_indev_get_act>
 8001760:	f013 f80c 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 8001764:	2804      	cmp	r0, #4
 8001766:	f47f ae32 	bne.w	80013ce <lv_arc_event+0x12>
            if(editing) lv_group_set_editing(g, false);
 800176a:	2c00      	cmp	r4, #0
 800176c:	f43f ae2f 	beq.w	80013ce <lv_arc_event+0x12>
 8001770:	2100      	movs	r1, #0
 8001772:	4628      	mov	r0, r5
 8001774:	f011 fc7e 	bl	8013074 <lv_group_set_editing>
 8001778:	e629      	b.n	80013ce <lv_arc_event+0x12>
        char c = *((char *)lv_event_get_param(e));
 800177a:	4620      	mov	r0, r4
 800177c:	f00f fad6 	bl	8010d2c <lv_event_get_param>
 8001780:	7803      	ldrb	r3, [r0, #0]
        int16_t old_value = arc->value;
 8001782:	f9b7 402e 	ldrsh.w	r4, [r7, #46]	@ 0x2e
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 8001786:	3b11      	subs	r3, #17
 8001788:	2b03      	cmp	r3, #3
 800178a:	d80c      	bhi.n	80017a6 <lv_arc_event+0x3ea>
 800178c:	e8df f003 	tbb	[pc, r3]
 8001790:	16021602 	.word	0x16021602
            lv_arc_set_value(obj, lv_arc_get_value(obj) + 1);
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff fe0d 	bl	80013b4 <lv_arc_get_value>
 800179a:	b281      	uxth	r1, r0
 800179c:	3101      	adds	r1, #1
 800179e:	b209      	sxth	r1, r1
 80017a0:	4630      	mov	r0, r6
 80017a2:	f7ff fdf1 	bl	8001388 <lv_arc_set_value>
        if(old_value != arc->value) {
 80017a6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80017aa:	42a3      	cmp	r3, r4
 80017ac:	f43f ae0f 	beq.w	80013ce <lv_arc_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80017b0:	2200      	movs	r2, #0
 80017b2:	211c      	movs	r1, #28
 80017b4:	4630      	mov	r0, r6
 80017b6:	f00f fa87 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 80017ba:	e608      	b.n	80013ce <lv_arc_event+0x12>
            lv_arc_set_value(obj, lv_arc_get_value(obj) - 1);
 80017bc:	4630      	mov	r0, r6
 80017be:	f7ff fdf9 	bl	80013b4 <lv_arc_get_value>
 80017c2:	b281      	uxth	r1, r0
 80017c4:	3901      	subs	r1, #1
 80017c6:	b209      	sxth	r1, r1
 80017c8:	4630      	mov	r0, r6
 80017ca:	f7ff fddd 	bl	8001388 <lv_arc_set_value>
 80017ce:	e7ea      	b.n	80017a6 <lv_arc_event+0x3ea>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 80017d0:	4620      	mov	r0, r4
 80017d2:	f00f faab 	bl	8010d2c <lv_event_get_param>
 80017d6:	4607      	mov	r7, r0
        get_center(obj, &p, &r);
 80017d8:	f10d 020a 	add.w	r2, sp, #10
 80017dc:	a903      	add	r1, sp, #12
 80017de:	4630      	mov	r0, r6
 80017e0:	f7ff f992 	bl	8000b08 <get_center>
        if(obj->spec_attr) ext_click_area = obj->spec_attr->ext_click_pad;
 80017e4:	68b3      	ldr	r3, [r6, #8]
 80017e6:	b35b      	cbz	r3, 8001840 <lv_arc_event+0x484>
 80017e8:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80017ec:	2250      	movs	r2, #80	@ 0x50
 80017ee:	2100      	movs	r1, #0
 80017f0:	4630      	mov	r0, r6
 80017f2:	f01a ff7f 	bl	801c6f4 <lv_obj_get_style_prop>
        r -= w + ext_click_area;
 80017f6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80017fa:	b285      	uxth	r5, r0
 80017fc:	b2a6      	uxth	r6, r4
 80017fe:	19aa      	adds	r2, r5, r6
 8001800:	b292      	uxth	r2, r2
 8001802:	1a8c      	subs	r4, r1, r2
 8001804:	b2a4      	uxth	r4, r4
 8001806:	f8ad 400a 	strh.w	r4, [sp, #10]
        lv_area_set(&a, p.x - r, p.y - r, p.x + r, p.y + r);
 800180a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800180e:	1a52      	subs	r2, r2, r1
 8001810:	1899      	adds	r1, r3, r2
 8001812:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001816:	4402      	add	r2, r0
 8001818:	4423      	add	r3, r4
 800181a:	4404      	add	r4, r0
 800181c:	b224      	sxth	r4, r4
 800181e:	9400      	str	r4, [sp, #0]
 8001820:	b21b      	sxth	r3, r3
 8001822:	b212      	sxth	r2, r2
 8001824:	b209      	sxth	r1, r1
 8001826:	a804      	add	r0, sp, #16
 8001828:	f000 f8a5 	bl	8001976 <lv_area_set>
        if(_lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE)) {
 800182c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	a804      	add	r0, sp, #16
 8001834:	f000 f92c 	bl	8001a90 <_lv_area_is_point_on>
 8001838:	b120      	cbz	r0, 8001844 <lv_arc_event+0x488>
            info->res = false;
 800183a:	2300      	movs	r3, #0
 800183c:	713b      	strb	r3, [r7, #4]
            return;
 800183e:	e5c6      	b.n	80013ce <lv_arc_event+0x12>
        lv_coord_t ext_click_area = 0;
 8001840:	2400      	movs	r4, #0
 8001842:	e7d3      	b.n	80017ec <lv_arc_event+0x430>
        lv_area_increase(&a, w + ext_click_area * 2, w + ext_click_area * 2);
 8001844:	0076      	lsls	r6, r6, #1
 8001846:	b2b6      	uxth	r6, r6
 8001848:	19a9      	adds	r1, r5, r6
 800184a:	b209      	sxth	r1, r1
 800184c:	460a      	mov	r2, r1
 800184e:	a804      	add	r0, sp, #16
 8001850:	f000 f8b2 	bl	80019b8 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, LV_RADIUS_CIRCLE);
 8001854:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	a804      	add	r0, sp, #16
 800185c:	f000 f918 	bl	8001a90 <_lv_area_is_point_on>
 8001860:	7138      	strb	r0, [r7, #4]
 8001862:	e5b4      	b.n	80013ce <lv_arc_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8001864:	2212      	movs	r2, #18
 8001866:	2100      	movs	r1, #0
 8001868:	4630      	mov	r0, r6
 800186a:	f01a ff43 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800186e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8001872:	2213      	movs	r2, #19
 8001874:	2100      	movs	r1, #0
 8001876:	4630      	mov	r0, r6
 8001878:	f01a ff3c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800187c:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800187e:	2210      	movs	r2, #16
 8001880:	2100      	movs	r1, #0
 8001882:	4630      	mov	r0, r6
 8001884:	f01a ff36 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8001888:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 800188c:	2211      	movs	r2, #17
 800188e:	2100      	movs	r1, #0
 8001890:	4630      	mov	r0, r6
 8001892:	f01a ff2f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8001896:	b207      	sxth	r7, r0
        lv_coord_t bg_pad = LV_MAX4(bg_left, bg_right, bg_top, bg_bottom);
 8001898:	454f      	cmp	r7, r9
 800189a:	bfb8      	it	lt
 800189c:	464f      	movlt	r7, r9
 800189e:	4545      	cmp	r5, r8
 80018a0:	bfb8      	it	lt
 80018a2:	4645      	movlt	r5, r8
 80018a4:	42af      	cmp	r7, r5
 80018a6:	bfb8      	it	lt
 80018a8:	462f      	movlt	r7, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80018aa:	2212      	movs	r2, #18
 80018ac:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80018b0:	4630      	mov	r0, r6
 80018b2:	f01a ff1f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80018b6:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80018ba:	2213      	movs	r2, #19
 80018bc:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80018c0:	4630      	mov	r0, r6
 80018c2:	f01a ff17 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80018c6:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80018ca:	2210      	movs	r2, #16
 80018cc:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80018d0:	4630      	mov	r0, r6
 80018d2:	f01a ff0f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80018d6:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80018da:	2211      	movs	r2, #17
 80018dc:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80018e0:	4630      	mov	r0, r6
 80018e2:	f01a ff07 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80018e6:	b205      	sxth	r5, r0
        lv_coord_t knob_pad = LV_MAX4(knob_left, knob_right, knob_top, knob_bottom) + 2;
 80018e8:	4555      	cmp	r5, sl
 80018ea:	bfb8      	it	lt
 80018ec:	4655      	movlt	r5, sl
 80018ee:	45c8      	cmp	r8, r9
 80018f0:	bfb8      	it	lt
 80018f2:	46c8      	movlt	r8, r9
 80018f4:	4545      	cmp	r5, r8
 80018f6:	bfb8      	it	lt
 80018f8:	4645      	movlt	r5, r8
 80018fa:	b2ad      	uxth	r5, r5
 80018fc:	3502      	adds	r5, #2
 80018fe:	b2ad      	uxth	r5, r5
        lv_coord_t knob_extra_size = knob_pad - bg_pad;
 8001900:	1bed      	subs	r5, r5, r7
 8001902:	b2ad      	uxth	r5, r5
        knob_extra_size += knob_get_extra_size(obj);
 8001904:	4630      	mov	r0, r6
 8001906:	f7ff f95b 	bl	8000bc0 <knob_get_extra_size>
 800190a:	fa15 f580 	uxtah	r5, r5, r0
 800190e:	b22d      	sxth	r5, r5
        lv_coord_t * s = lv_event_get_param(e);
 8001910:	4620      	mov	r0, r4
 8001912:	f00f fa0b 	bl	8010d2c <lv_event_get_param>
        *s = LV_MAX(*s, knob_extra_size);
 8001916:	f9b0 3000 	ldrsh.w	r3, [r0]
 800191a:	42ab      	cmp	r3, r5
 800191c:	bfb8      	it	lt
 800191e:	462b      	movlt	r3, r5
 8001920:	8003      	strh	r3, [r0, #0]
 8001922:	e554      	b.n	80013ce <lv_arc_event+0x12>
        lv_arc_draw(e);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff fa11 	bl	8000d4c <lv_arc_draw>
 800192a:	e550      	b.n	80013ce <lv_arc_event+0x12>

0800192c <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
 800192c:	b500      	push	{lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
 800192e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8001932:	f9b0 2000 	ldrsh.w	r2, [r0]
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800193c:	f343 0e4f 	sbfx	lr, r3, #1, #16

    /*Circle center*/
    lv_coord_t cx = area->x1 + r;
 8001940:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8001944:	fa13 f282 	uxtah	r2, r3, r2
 8001948:	fa1f fc82 	uxth.w	ip, r2
    lv_coord_t cy = area->y1 + r;
 800194c:	8842      	ldrh	r2, [r0, #2]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3

    /*Simplify the code by moving everything to (0, 0)*/
    lv_coord_t px = p->x - cx;
 8001952:	880a      	ldrh	r2, [r1, #0]
 8001954:	eba2 020c 	sub.w	r2, r2, ip
    lv_coord_t py = p->y - cy;
 8001958:	8849      	ldrh	r1, [r1, #2]
 800195a:	1acb      	subs	r3, r1, r3

    uint32_t r_sqrd = r * r;
 800195c:	fb0e fe0e 	mul.w	lr, lr, lr
    uint32_t dist = (px * px) + (py * py);
 8001960:	fb13 f303 	smulbb	r3, r3, r3
 8001964:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
 8001968:	4596      	cmp	lr, r2
 800196a:	d302      	bcc.n	8001972 <lv_point_within_circle+0x46>
        return true;
 800196c:	2001      	movs	r0, #1
    else
        return false;
}
 800196e:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 8001972:	2000      	movs	r0, #0
 8001974:	e7fb      	b.n	800196e <lv_point_within_circle+0x42>

08001976 <lv_area_set>:
    area_p->x1 = x1;
 8001976:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
 8001978:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
 800197a:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
 800197c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8001980:	80c3      	strh	r3, [r0, #6]
}
 8001982:	4770      	bx	lr

08001984 <lv_area_set_width>:
    area_p->x2 = area_p->x1 + w - 1;
 8001984:	8803      	ldrh	r3, [r0, #0]
 8001986:	440b      	add	r3, r1
 8001988:	b29b      	uxth	r3, r3
 800198a:	3b01      	subs	r3, #1
 800198c:	8083      	strh	r3, [r0, #4]
}
 800198e:	4770      	bx	lr

08001990 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
 8001990:	8843      	ldrh	r3, [r0, #2]
 8001992:	440b      	add	r3, r1
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	80c3      	strh	r3, [r0, #6]
}
 800199a:	4770      	bx	lr

0800199c <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800199c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80019a0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80019aa:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80019ae:	1a58      	subs	r0, r3, r1
 80019b0:	3001      	adds	r0, #1
}
 80019b2:	fb02 0000 	mla	r0, r2, r0, r0
 80019b6:	4770      	bx	lr

080019b8 <lv_area_increase>:
    area->x1 -= w_extra;
 80019b8:	8803      	ldrh	r3, [r0, #0]
 80019ba:	b289      	uxth	r1, r1
 80019bc:	1a5b      	subs	r3, r3, r1
 80019be:	8003      	strh	r3, [r0, #0]
    area->x2 += w_extra;
 80019c0:	8883      	ldrh	r3, [r0, #4]
 80019c2:	4419      	add	r1, r3
 80019c4:	8081      	strh	r1, [r0, #4]
    area->y1 -= h_extra;
 80019c6:	8843      	ldrh	r3, [r0, #2]
 80019c8:	b292      	uxth	r2, r2
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	8043      	strh	r3, [r0, #2]
    area->y2 += h_extra;
 80019ce:	88c3      	ldrh	r3, [r0, #6]
 80019d0:	441a      	add	r2, r3
 80019d2:	80c2      	strh	r2, [r0, #6]
}
 80019d4:	4770      	bx	lr

080019d6 <lv_area_move>:
    area->x1 += x_ofs;
 80019d6:	8803      	ldrh	r3, [r0, #0]
 80019d8:	b289      	uxth	r1, r1
 80019da:	440b      	add	r3, r1
 80019dc:	8003      	strh	r3, [r0, #0]
    area->x2 += x_ofs;
 80019de:	8883      	ldrh	r3, [r0, #4]
 80019e0:	4419      	add	r1, r3
 80019e2:	8081      	strh	r1, [r0, #4]
    area->y1 += y_ofs;
 80019e4:	8843      	ldrh	r3, [r0, #2]
 80019e6:	b292      	uxth	r2, r2
 80019e8:	4413      	add	r3, r2
 80019ea:	8043      	strh	r3, [r0, #2]
    area->y2 += y_ofs;
 80019ec:	88c3      	ldrh	r3, [r0, #6]
 80019ee:	441a      	add	r2, r3
 80019f0:	80c2      	strh	r2, [r0, #6]
}
 80019f2:	4770      	bx	lr

080019f4 <_lv_area_intersect>:
{
 80019f4:	b510      	push	{r4, lr}
    res_p->x1 = LV_MAX(a1_p->x1, a2_p->x1);
 80019f6:	f9b2 c000 	ldrsh.w	ip, [r2]
 80019fa:	f9b1 3000 	ldrsh.w	r3, [r1]
 80019fe:	459c      	cmp	ip, r3
 8001a00:	bfb8      	it	lt
 8001a02:	469c      	movlt	ip, r3
 8001a04:	f8a0 c000 	strh.w	ip, [r0]
    res_p->y1 = LV_MAX(a1_p->y1, a2_p->y1);
 8001a08:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8001a0c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8001a10:	459e      	cmp	lr, r3
 8001a12:	bfb8      	it	lt
 8001a14:	469e      	movlt	lr, r3
 8001a16:	f8a0 e002 	strh.w	lr, [r0, #2]
    res_p->x2 = LV_MIN(a1_p->x2, a2_p->x2);
 8001a1a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8001a1e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8001a22:	42a3      	cmp	r3, r4
 8001a24:	bfa8      	it	ge
 8001a26:	4623      	movge	r3, r4
 8001a28:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MIN(a1_p->y2, a2_p->y2);
 8001a2a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001a2e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 8001a32:	428a      	cmp	r2, r1
 8001a34:	bfa8      	it	ge
 8001a36:	460a      	movge	r2, r1
 8001a38:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 8001a3a:	459c      	cmp	ip, r3
 8001a3c:	dc03      	bgt.n	8001a46 <_lv_area_intersect+0x52>
 8001a3e:	4596      	cmp	lr, r2
 8001a40:	dc03      	bgt.n	8001a4a <_lv_area_intersect+0x56>
    bool union_ok = true;
 8001a42:	2001      	movs	r0, #1
 8001a44:	e000      	b.n	8001a48 <_lv_area_intersect+0x54>
        union_ok = false;
 8001a46:	2000      	movs	r0, #0
}
 8001a48:	bd10      	pop	{r4, pc}
        union_ok = false;
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e7fc      	b.n	8001a48 <_lv_area_intersect+0x54>

08001a4e <_lv_area_join>:
    a_res_p->x1 = LV_MIN(a1_p->x1, a2_p->x1);
 8001a4e:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001a52:	f9b1 c000 	ldrsh.w	ip, [r1]
 8001a56:	4563      	cmp	r3, ip
 8001a58:	bfa8      	it	ge
 8001a5a:	4663      	movge	r3, ip
 8001a5c:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MIN(a1_p->y1, a2_p->y1);
 8001a5e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8001a62:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 8001a66:	4563      	cmp	r3, ip
 8001a68:	bfa8      	it	ge
 8001a6a:	4663      	movge	r3, ip
 8001a6c:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MAX(a1_p->x2, a2_p->x2);
 8001a6e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8001a72:	f9b1 c004 	ldrsh.w	ip, [r1, #4]
 8001a76:	4563      	cmp	r3, ip
 8001a78:	bfb8      	it	lt
 8001a7a:	4663      	movlt	r3, ip
 8001a7c:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MAX(a1_p->y2, a2_p->y2);
 8001a7e:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8001a82:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8001a86:	4293      	cmp	r3, r2
 8001a88:	bfb8      	it	lt
 8001a8a:	4613      	movlt	r3, r2
 8001a8c:	80c3      	strh	r3, [r0, #6]
}
 8001a8e:	4770      	bx	lr

08001a90 <_lv_area_is_point_on>:
{
 8001a90:	b570      	push	{r4, r5, r6, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	4604      	mov	r4, r0
 8001a96:	460d      	mov	r5, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 8001a98:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a9c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001aa0:	4281      	cmp	r1, r0
 8001aa2:	f2c0 80ae 	blt.w	8001c02 <_lv_area_is_point_on+0x172>
 8001aa6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8001aaa:	4299      	cmp	r1, r3
 8001aac:	f300 80ac 	bgt.w	8001c08 <_lv_area_is_point_on+0x178>
 8001ab0:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8001ab4:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 8001ab8:	4576      	cmp	r6, lr
 8001aba:	f2c0 80a7 	blt.w	8001c0c <_lv_area_is_point_on+0x17c>
 8001abe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8001ac2:	428e      	cmp	r6, r1
 8001ac4:	f300 80a4 	bgt.w	8001c10 <_lv_area_is_point_on+0x180>
    if(radius <= 0) {
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	f340 80a3 	ble.w	8001c14 <_lv_area_is_point_on+0x184>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	fa1f fc80 	uxth.w	ip, r0
 8001ad4:	eba3 030c 	sub.w	r3, r3, ip
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3301      	adds	r3, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
 8001adc:	f3c3 36c0 	ubfx	r6, r3, #15, #1
 8001ae0:	fa06 f383 	sxtah	r3, r6, r3
 8001ae4:	105b      	asrs	r3, r3, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8001ae6:	b289      	uxth	r1, r1
 8001ae8:	fa1f fe8e 	uxth.w	lr, lr
 8001aec:	eba1 010e 	sub.w	r1, r1, lr
 8001af0:	b289      	uxth	r1, r1
 8001af2:	3101      	adds	r1, #1
    lv_coord_t h = lv_area_get_height(a_p) / 2;
 8001af4:	f3c1 36c0 	ubfx	r6, r1, #15, #1
 8001af8:	fa06 f181 	sxtah	r1, r6, r1
 8001afc:	1049      	asrs	r1, r1, #1
    lv_coord_t max_radius = LV_MIN(w, h);
 8001afe:	428b      	cmp	r3, r1
 8001b00:	bfa8      	it	ge
 8001b02:	460b      	movge	r3, r1
    if(radius > max_radius)
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dc00      	bgt.n	8001b0a <_lv_area_is_point_on+0x7a>
 8001b08:	4613      	mov	r3, r2
    corner_area.x1 = a_p->x1;
 8001b0a:	f8ad 0000 	strh.w	r0, [sp]
    corner_area.x2 = a_p->x1 + radius;
 8001b0e:	b29e      	uxth	r6, r3
 8001b10:	44b4      	add	ip, r6
 8001b12:	f8ad c004 	strh.w	ip, [sp, #4]
    corner_area.y1 = a_p->y1;
 8001b16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001b1a:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 8001b1e:	fa16 f383 	uxtah	r3, r6, r3
 8001b22:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8001b26:	2200      	movs	r2, #0
 8001b28:	4629      	mov	r1, r5
 8001b2a:	4668      	mov	r0, sp
 8001b2c:	f7ff ffb0 	bl	8001a90 <_lv_area_is_point_on>
 8001b30:	b170      	cbz	r0, 8001b50 <_lv_area_is_point_on+0xc0>
        corner_area.x2 += radius;
 8001b32:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b36:	4433      	add	r3, r6
 8001b38:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
 8001b3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b40:	4433      	add	r3, r6
 8001b42:	f8ad 3006 	strh.w	r3, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 8001b46:	4629      	mov	r1, r5
 8001b48:	4668      	mov	r0, sp
 8001b4a:	f7ff feef 	bl	800192c <lv_point_within_circle>
 8001b4e:	e059      	b.n	8001c04 <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y2 - radius;
 8001b50:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8001b54:	b293      	uxth	r3, r2
 8001b56:	1b9b      	subs	r3, r3, r6
 8001b58:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
 8001b5c:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8001b60:	2200      	movs	r2, #0
 8001b62:	4629      	mov	r1, r5
 8001b64:	4668      	mov	r0, sp
 8001b66:	f7ff ff93 	bl	8001a90 <_lv_area_is_point_on>
 8001b6a:	b170      	cbz	r0, 8001b8a <_lv_area_is_point_on+0xfa>
        corner_area.x2 += radius;
 8001b6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001b70:	4433      	add	r3, r6
 8001b72:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
 8001b76:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001b7a:	1b9b      	subs	r3, r3, r6
 8001b7c:	f8ad 3002 	strh.w	r3, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 8001b80:	4629      	mov	r1, r5
 8001b82:	4668      	mov	r0, sp
 8001b84:	f7ff fed2 	bl	800192c <lv_point_within_circle>
 8001b88:	e03c      	b.n	8001c04 <_lv_area_is_point_on+0x174>
    corner_area.x1 = a_p->x2 - radius;
 8001b8a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001b8e:	b293      	uxth	r3, r2
 8001b90:	1b9b      	subs	r3, r3, r6
 8001b92:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
 8001b96:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	4668      	mov	r0, sp
 8001ba0:	f7ff ff76 	bl	8001a90 <_lv_area_is_point_on>
 8001ba4:	b170      	cbz	r0, 8001bc4 <_lv_area_is_point_on+0x134>
        corner_area.x1 -= radius;
 8001ba6:	f8bd 3000 	ldrh.w	r3, [sp]
 8001baa:	1b9b      	subs	r3, r3, r6
 8001bac:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
 8001bb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001bb4:	1b9b      	subs	r3, r3, r6
 8001bb6:	f8ad 3002 	strh.w	r3, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
 8001bba:	4629      	mov	r1, r5
 8001bbc:	4668      	mov	r0, sp
 8001bbe:	f7ff feb5 	bl	800192c <lv_point_within_circle>
 8001bc2:	e01f      	b.n	8001c04 <_lv_area_is_point_on+0x174>
    corner_area.y1 = a_p->y1;
 8001bc4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8001bc8:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
 8001bcc:	fa16 f383 	uxtah	r3, r6, r3
 8001bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4668      	mov	r0, sp
 8001bda:	f7ff ff59 	bl	8001a90 <_lv_area_is_point_on>
 8001bde:	b908      	cbnz	r0, 8001be4 <_lv_area_is_point_on+0x154>
    return true;
 8001be0:	2001      	movs	r0, #1
 8001be2:	e00f      	b.n	8001c04 <_lv_area_is_point_on+0x174>
        corner_area.x1 -= radius;
 8001be4:	f8bd 3000 	ldrh.w	r3, [sp]
 8001be8:	1b9b      	subs	r3, r3, r6
 8001bea:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
 8001bee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001bf2:	441e      	add	r6, r3
 8001bf4:	f8ad 6006 	strh.w	r6, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	4668      	mov	r0, sp
 8001bfc:	f7ff fe96 	bl	800192c <lv_point_within_circle>
 8001c00:	e000      	b.n	8001c04 <_lv_area_is_point_on+0x174>
        return false;
 8001c02:	2000      	movs	r0, #0
}
 8001c04:	b002      	add	sp, #8
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 8001c08:	2000      	movs	r0, #0
 8001c0a:	e7fb      	b.n	8001c04 <_lv_area_is_point_on+0x174>
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	e7f9      	b.n	8001c04 <_lv_area_is_point_on+0x174>
 8001c10:	2000      	movs	r0, #0
 8001c12:	e7f7      	b.n	8001c04 <_lv_area_is_point_on+0x174>
        return true;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7f5      	b.n	8001c04 <_lv_area_is_point_on+0x174>

08001c18 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 8001c18:	f9b0 2000 	ldrsh.w	r2, [r0]
 8001c1c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dc13      	bgt.n	8001c4c <_lv_area_is_on+0x34>
 8001c24:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8001c28:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	db0f      	blt.n	8001c50 <_lv_area_is_on+0x38>
 8001c30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001c34:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dc0b      	bgt.n	8001c54 <_lv_area_is_on+0x3c>
 8001c3c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8001c40:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	da07      	bge.n	8001c58 <_lv_area_is_on+0x40>
        return false;
 8001c48:	2000      	movs	r0, #0
 8001c4a:	4770      	bx	lr
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	4770      	bx	lr
 8001c50:	2000      	movs	r0, #0
 8001c52:	4770      	bx	lr
 8001c54:	2000      	movs	r0, #0
 8001c56:	4770      	bx	lr
        return true;
 8001c58:	2001      	movs	r0, #1
}
 8001c5a:	4770      	bx	lr

08001c5c <_lv_area_is_in>:
{
 8001c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	460c      	mov	r4, r1
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8001c64:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001c68:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001c6c:	428b      	cmp	r3, r1
 8001c6e:	db40      	blt.n	8001cf2 <_lv_area_is_in+0x96>
 8001c70:	4606      	mov	r6, r0
 8001c72:	4615      	mov	r5, r2
 8001c74:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001c78:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	db3c      	blt.n	8001cfa <_lv_area_is_in+0x9e>
 8001c80:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8001c84:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8001c88:	428f      	cmp	r7, r1
 8001c8a:	dc38      	bgt.n	8001cfe <_lv_area_is_in+0xa2>
       ain_p->y2 <= aholder_p->y2) {
 8001c8c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8001c90:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 8001c94:	4588      	cmp	r8, r1
 8001c96:	dc34      	bgt.n	8001d02 <_lv_area_is_in+0xa6>
    if(radius == 0) return true;
 8001c98:	b90d      	cbnz	r5, 8001c9e <_lv_area_is_in+0x42>
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	e02a      	b.n	8001cf4 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 8001c9e:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y1;
 8001ca2:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	a901      	add	r1, sp, #4
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fef0 	bl	8001a90 <_lv_area_is_point_on>
 8001cb0:	b300      	cbz	r0, 8001cf4 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 8001cb2:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = ain_p->y1;
 8001cb6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8001cba:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8001cbe:	462a      	mov	r2, r5
 8001cc0:	a901      	add	r1, sp, #4
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff fee4 	bl	8001a90 <_lv_area_is_point_on>
 8001cc8:	b1a0      	cbz	r0, 8001cf4 <_lv_area_is_in+0x98>
    p.x = ain_p->x1;
 8001cca:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001cce:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
 8001cd2:	f8ad 8006 	strh.w	r8, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8001cd6:	462a      	mov	r2, r5
 8001cd8:	a901      	add	r1, sp, #4
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fed8 	bl	8001a90 <_lv_area_is_point_on>
 8001ce0:	b140      	cbz	r0, 8001cf4 <_lv_area_is_in+0x98>
    p.x = ain_p->x2;
 8001ce2:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
 8001ce6:	462a      	mov	r2, r5
 8001ce8:	a901      	add	r1, sp, #4
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fed0 	bl	8001a90 <_lv_area_is_point_on>
 8001cf0:	e000      	b.n	8001cf4 <_lv_area_is_in+0x98>
    if(!is_in) return false;
 8001cf2:	2000      	movs	r0, #0
}
 8001cf4:	b002      	add	sp, #8
 8001cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!is_in) return false;
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	e7fa      	b.n	8001cf4 <_lv_area_is_in+0x98>
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e7f8      	b.n	8001cf4 <_lv_area_is_in+0x98>
 8001d02:	2000      	movs	r0, #0
 8001d04:	e7f6      	b.n	8001cf4 <_lv_area_is_in+0x98>

08001d06 <_lv_area_diff>:
{
 8001d06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	4606      	mov	r6, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4615      	mov	r5, r2
    if(!_lv_area_is_on(a1_p, a2_p)) return -1;
 8001d12:	4611      	mov	r1, r2
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff ff7f 	bl	8001c18 <_lv_area_is_on>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	f000 80af 	beq.w	8001e7e <_lv_area_diff+0x178>
    if(_lv_area_is_in(a1_p, a2_p, 0)) return 0;
 8001d20:	2200      	movs	r2, #0
 8001d22:	4629      	mov	r1, r5
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff ff99 	bl	8001c5c <_lv_area_is_in>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	f040 80aa 	bne.w	8001e84 <_lv_area_diff+0x17e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8001d30:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001d34:	b283      	uxth	r3, r0
 8001d36:	f9b4 7000 	ldrsh.w	r7, [r4]
 8001d3a:	b2ba      	uxth	r2, r7
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	b29b      	uxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8001d40:	88e2      	ldrh	r2, [r4, #6]
 8001d42:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
 8001d46:	fa1f fc8e 	uxth.w	ip, lr
 8001d4a:	eba2 020c 	sub.w	r2, r2, ip
 8001d4e:	b292      	uxth	r2, r2
    lv_coord_t th = a2_p->y1 - a1_p->y1;
 8001d50:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8001d54:	fa1f f188 	uxth.w	r1, r8
 8001d58:	eba1 010c 	sub.w	r1, r1, ip
 8001d5c:	b209      	sxth	r1, r1
    if(th > 0) {
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	f340 808a 	ble.w	8001e78 <_lv_area_diff+0x172>
        n.x1 = a1_p->x1;
 8001d64:	f8ad 7000 	strh.w	r7, [sp]
        n.y1 = a1_p->y1;
 8001d68:	f8ad e002 	strh.w	lr, [sp, #2]
        n.x2 = a1_p->x2;
 8001d6c:	f8ad 0004 	strh.w	r0, [sp, #4]
        n.y2 = a1_p->y1 + th;
 8001d70:	f8ad 8006 	strh.w	r8, [sp, #6]
        res_p[res_c++] = n;
 8001d74:	466f      	mov	r7, sp
 8001d76:	cf03      	ldmia	r7!, {r0, r1}
 8001d78:	6030      	str	r0, [r6, #0]
 8001d7a:	6071      	str	r1, [r6, #4]
 8001d7c:	f04f 0c01 	mov.w	ip, #1
    lv_coord_t bh = a1_h - (a2_p->y2 - a1_p->y1);
 8001d80:	8861      	ldrh	r1, [r4, #2]
 8001d82:	f9b5 0006 	ldrsh.w	r0, [r5, #6]
 8001d86:	b287      	uxth	r7, r0
 8001d88:	1bc9      	subs	r1, r1, r7
 8001d8a:	440a      	add	r2, r1
 8001d8c:	b291      	uxth	r1, r2
 8001d8e:	b212      	sxth	r2, r2
    if(bh > 0 && a2_p->y2 < a1_p->y2) {
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	dd1c      	ble.n	8001dce <_lv_area_diff+0xc8>
 8001d94:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8001d98:	4290      	cmp	r0, r2
 8001d9a:	da18      	bge.n	8001dce <_lv_area_diff+0xc8>
        n.x1 = a1_p->x1;
 8001d9c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8001da0:	f8ad 2000 	strh.w	r2, [sp]
        n.y1 = a2_p->y2;
 8001da4:	f8ad 0002 	strh.w	r0, [sp, #2]
        n.x2 = a1_p->x2;
 8001da8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001dac:	f8ad 2004 	strh.w	r2, [sp, #4]
        n.y2 = a2_p->y2 + bh;
 8001db0:	440f      	add	r7, r1
 8001db2:	f8ad 7006 	strh.w	r7, [sp, #6]
        res_p[res_c++] = n;
 8001db6:	f10c 0701 	add.w	r7, ip, #1
 8001dba:	eb06 0ecc 	add.w	lr, r6, ip, lsl #3
 8001dbe:	466a      	mov	r2, sp
 8001dc0:	ca03      	ldmia	r2!, {r0, r1}
 8001dc2:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 8001dc6:	f8ce 1004 	str.w	r1, [lr, #4]
 8001dca:	fa4f fc87 	sxtb.w	ip, r7
    lv_coord_t y1 = a2_p->y1 > a1_p->y1 ? a2_p->y1 : a1_p->y1;
 8001dce:	f9b4 7002 	ldrsh.w	r7, [r4, #2]
 8001dd2:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8001dd6:	4297      	cmp	r7, r2
 8001dd8:	bfb8      	it	lt
 8001dda:	4617      	movlt	r7, r2
    lv_coord_t y2 = a2_p->y2 < a1_p->y2 ? a2_p->y2 : a1_p->y2;
 8001ddc:	f9b4 e006 	ldrsh.w	lr, [r4, #6]
 8001de0:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8001de4:	4596      	cmp	lr, r2
 8001de6:	bfa8      	it	ge
 8001de8:	4696      	movge	lr, r2
    lv_coord_t sh = y2 - y1;
 8001dea:	ebae 0207 	sub.w	r2, lr, r7
 8001dee:	b211      	sxth	r1, r2
    lv_coord_t lw = a2_p->x1 - a1_p->x1;
 8001df0:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001df4:	b282      	uxth	r2, r0
 8001df6:	f9b4 8000 	ldrsh.w	r8, [r4]
 8001dfa:	fa1f f988 	uxth.w	r9, r8
 8001dfe:	eba2 0209 	sub.w	r2, r2, r9
 8001e02:	b212      	sxth	r2, r2
    if(lw > 0 && sh > 0) {
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	dd15      	ble.n	8001e34 <_lv_area_diff+0x12e>
 8001e08:	2900      	cmp	r1, #0
 8001e0a:	dd13      	ble.n	8001e34 <_lv_area_diff+0x12e>
        n.x1 = a1_p->x1;
 8001e0c:	f8ad 8000 	strh.w	r8, [sp]
        n.y1 = y1;
 8001e10:	f8ad 7002 	strh.w	r7, [sp, #2]
        n.x2 = a1_p->x1 + lw;
 8001e14:	f8ad 0004 	strh.w	r0, [sp, #4]
        n.y2 = y1 + sh;
 8001e18:	f8ad e006 	strh.w	lr, [sp, #6]
        res_p[res_c++] = n;
 8001e1c:	f10c 0801 	add.w	r8, ip, #1
 8001e20:	eb06 09cc 	add.w	r9, r6, ip, lsl #3
 8001e24:	466a      	mov	r2, sp
 8001e26:	ca03      	ldmia	r2!, {r0, r1}
 8001e28:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 8001e2c:	f8c9 1004 	str.w	r1, [r9, #4]
 8001e30:	fa4f fc88 	sxtb.w	ip, r8
    lv_coord_t rw = a1_w - (a2_p->x2 - a1_p->x1);
 8001e34:	8822      	ldrh	r2, [r4, #0]
 8001e36:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8001e3a:	b281      	uxth	r1, r0
 8001e3c:	1a52      	subs	r2, r2, r1
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	b21b      	sxth	r3, r3
    if(rw > 0) {
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd13      	ble.n	8001e70 <_lv_area_diff+0x16a>
        n.x1 = a2_p->x2;
 8001e48:	f8ad 0000 	strh.w	r0, [sp]
        n.y1 = y1;
 8001e4c:	f8ad 7002 	strh.w	r7, [sp, #2]
        n.x2 = a2_p->x2 + rw;
 8001e50:	4411      	add	r1, r2
 8001e52:	f8ad 1004 	strh.w	r1, [sp, #4]
        n.y2 = y1 + sh;
 8001e56:	f8ad e006 	strh.w	lr, [sp, #6]
        res_p[res_c++] = n;
 8001e5a:	f10c 0201 	add.w	r2, ip, #1
 8001e5e:	eb06 04cc 	add.w	r4, r6, ip, lsl #3
 8001e62:	466b      	mov	r3, sp
 8001e64:	cb03      	ldmia	r3!, {r0, r1}
 8001e66:	f846 003c 	str.w	r0, [r6, ip, lsl #3]
 8001e6a:	6061      	str	r1, [r4, #4]
 8001e6c:	fa4f fc82 	sxtb.w	ip, r2
}
 8001e70:	4660      	mov	r0, ip
 8001e72:	b003      	add	sp, #12
 8001e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int8_t res_c = 0;
 8001e78:	f04f 0c00 	mov.w	ip, #0
 8001e7c:	e780      	b.n	8001d80 <_lv_area_diff+0x7a>
    if(!_lv_area_is_on(a1_p, a2_p)) return -1;
 8001e7e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001e82:	e7f5      	b.n	8001e70 <_lv_area_diff+0x16a>
    if(_lv_area_is_in(a1_p, a2_p, 0)) return 0;
 8001e84:	f04f 0c00 	mov.w	ip, #0
 8001e88:	e7f2      	b.n	8001e70 <_lv_area_diff+0x16a>

08001e8a <_lv_area_is_out>:
{
 8001e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e8e:	b082      	sub	sp, #8
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8001e90:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8001e94:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001e98:	429f      	cmp	r7, r3
 8001e9a:	db4a      	blt.n	8001f32 <_lv_area_is_out+0xa8>
 8001e9c:	4680      	mov	r8, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4616      	mov	r6, r2
 8001ea2:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8001ea6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8001eaa:	4599      	cmp	r9, r3
 8001eac:	db46      	blt.n	8001f3c <_lv_area_is_out+0xb2>
 8001eae:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001eb2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	dc42      	bgt.n	8001f40 <_lv_area_is_out+0xb6>
       aout_p->y1 > aholder_p->y2) {
 8001eba:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001ebe:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
    if(aout_p->x2 < aholder_p->x1 || aout_p->y2 < aholder_p->y1 || aout_p->x1 > aholder_p->x2 ||
 8001ec2:	428a      	cmp	r2, r1
 8001ec4:	dc3e      	bgt.n	8001f44 <_lv_area_is_out+0xba>
    if(radius == 0) return false;
 8001ec6:	b90e      	cbnz	r6, 8001ecc <_lv_area_is_out+0x42>
 8001ec8:	2500      	movs	r5, #0
 8001eca:	e033      	b.n	8001f34 <_lv_area_is_out+0xaa>
    p.x = aout_p->x1;
 8001ecc:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = aout_p->y1;
 8001ed0:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8001ed4:	4632      	mov	r2, r6
 8001ed6:	a901      	add	r1, sp, #4
 8001ed8:	4620      	mov	r0, r4
 8001eda:	f7ff fdd9 	bl	8001a90 <_lv_area_is_point_on>
 8001ede:	4605      	mov	r5, r0
 8001ee0:	b108      	cbz	r0, 8001ee6 <_lv_area_is_out+0x5c>
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	e026      	b.n	8001f34 <_lv_area_is_out+0xaa>
    p.x = aout_p->x2;
 8001ee6:	f8ad 7004 	strh.w	r7, [sp, #4]
    p.y = aout_p->y1;
 8001eea:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8001eee:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8001ef2:	4632      	mov	r2, r6
 8001ef4:	a901      	add	r1, sp, #4
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fdca 	bl	8001a90 <_lv_area_is_point_on>
 8001efc:	4682      	mov	sl, r0
 8001efe:	b9c8      	cbnz	r0, 8001f34 <_lv_area_is_out+0xaa>
    p.x = aout_p->x1;
 8001f00:	f9b8 3000 	ldrsh.w	r3, [r8]
 8001f04:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = aout_p->y2;
 8001f08:	f8ad 9006 	strh.w	r9, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8001f0c:	4632      	mov	r2, r6
 8001f0e:	a901      	add	r1, sp, #4
 8001f10:	4620      	mov	r0, r4
 8001f12:	f7ff fdbd 	bl	8001a90 <_lv_area_is_point_on>
 8001f16:	4605      	mov	r5, r0
 8001f18:	b108      	cbz	r0, 8001f1e <_lv_area_is_out+0x94>
 8001f1a:	4655      	mov	r5, sl
 8001f1c:	e00a      	b.n	8001f34 <_lv_area_is_out+0xaa>
    p.x = aout_p->x2;
 8001f1e:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius)) return false;
 8001f22:	4632      	mov	r2, r6
 8001f24:	a901      	add	r1, sp, #4
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fdb2 	bl	8001a90 <_lv_area_is_point_on>
 8001f2c:	b910      	cbnz	r0, 8001f34 <_lv_area_is_out+0xaa>
    return true;
 8001f2e:	2501      	movs	r5, #1
 8001f30:	e000      	b.n	8001f34 <_lv_area_is_out+0xaa>
        return true;
 8001f32:	2501      	movs	r5, #1
}
 8001f34:	4628      	mov	r0, r5
 8001f36:	b002      	add	sp, #8
 8001f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return true;
 8001f3c:	2501      	movs	r5, #1
 8001f3e:	e7f9      	b.n	8001f34 <_lv_area_is_out+0xaa>
 8001f40:	2501      	movs	r5, #1
 8001f42:	e7f7      	b.n	8001f34 <_lv_area_is_out+0xaa>
 8001f44:	2501      	movs	r5, #1
 8001f46:	e7f5      	b.n	8001f34 <_lv_area_is_out+0xaa>

08001f48 <lv_point_transform>:
{
 8001f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4617      	mov	r7, r2
 8001f52:	461e      	mov	r6, r3
    if(angle == 0 && zoom == 256) {
 8001f54:	4688      	mov	r8, r1
 8001f56:	b911      	cbnz	r1, 8001f5e <lv_point_transform+0x16>
 8001f58:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8001f5c:	d079      	beq.n	8002052 <lv_point_transform+0x10a>
    p->x -= pivot->x;
 8001f5e:	8822      	ldrh	r2, [r4, #0]
 8001f60:	8833      	ldrh	r3, [r6, #0]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	b212      	sxth	r2, r2
 8001f66:	8022      	strh	r2, [r4, #0]
    p->y -= pivot->y;
 8001f68:	8863      	ldrh	r3, [r4, #2]
 8001f6a:	8871      	ldrh	r1, [r6, #2]
 8001f6c:	1a5b      	subs	r3, r3, r1
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	8063      	strh	r3, [r4, #2]
    if(angle == 0) {
 8001f72:	f1b8 0f00 	cmp.w	r8, #0
 8001f76:	d06f      	beq.n	8002058 <lv_point_transform+0x110>
    if(angle_prev != angle) {
 8001f78:	4b4c      	ldr	r3, [pc, #304]	@ (80020ac <lv_point_transform+0x164>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4543      	cmp	r3, r8
 8001f7e:	d048      	beq.n	8002012 <lv_point_transform+0xca>
        if(angle_limited > 3600) angle_limited -= 3600;
 8001f80:	f5b8 6f61 	cmp.w	r8, #3600	@ 0xe10
 8001f84:	dd75      	ble.n	8002072 <lv_point_transform+0x12a>
 8001f86:	f5a8 6561 	sub.w	r5, r8, #3600	@ 0xe10
        int32_t angle_low = angle_limited / 10;
 8001f8a:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 80020b8 <lv_point_transform+0x170>
 8001f8e:	fb8a 2305 	smull	r2, r3, sl, r5
 8001f92:	ea4f 79e5 	mov.w	r9, r5, asr #31
 8001f96:	ebc9 09a3 	rsb	r9, r9, r3, asr #2
        int32_t angle_high = angle_low + 1;
 8001f9a:	f109 0b01 	add.w	fp, r9, #1
        int32_t angle_rem = angle_limited  - (angle_low * 10);
 8001f9e:	f06f 0309 	mvn.w	r3, #9
 8001fa2:	fb03 5509 	mla	r5, r3, r9, r5
        int32_t s1 = lv_trigo_sin(angle_low);
 8001fa6:	fa0f f089 	sxth.w	r0, r9
 8001faa:	f014 fb91 	bl	80166d0 <lv_trigo_sin>
 8001fae:	9000      	str	r0, [sp, #0]
        int32_t s2 = lv_trigo_sin(angle_high);
 8001fb0:	fa0f f08b 	sxth.w	r0, fp
 8001fb4:	f014 fb8c 	bl	80166d0 <lv_trigo_sin>
 8001fb8:	9001      	str	r0, [sp, #4]
        int32_t c1 = lv_trigo_sin(angle_low + 90);
 8001fba:	f109 005a 	add.w	r0, r9, #90	@ 0x5a
 8001fbe:	b200      	sxth	r0, r0
 8001fc0:	f014 fb86 	bl	80166d0 <lv_trigo_sin>
 8001fc4:	4681      	mov	r9, r0
        int32_t c2 = lv_trigo_sin(angle_high + 90);
 8001fc6:	f10b 005a 	add.w	r0, fp, #90	@ 0x5a
 8001fca:	b200      	sxth	r0, r0
 8001fcc:	f014 fb80 	bl	80166d0 <lv_trigo_sin>
        sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 8001fd0:	f1c5 010a 	rsb	r1, r5, #10
 8001fd4:	9b01      	ldr	r3, [sp, #4]
 8001fd6:	fb05 f303 	mul.w	r3, r5, r3
 8001fda:	9a00      	ldr	r2, [sp, #0]
 8001fdc:	fb02 3301 	mla	r3, r2, r1, r3
 8001fe0:	fb8a c203 	smull	ip, r2, sl, r3
 8001fe4:	17db      	asrs	r3, r3, #31
 8001fe6:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8001fea:	4a31      	ldr	r2, [pc, #196]	@ (80020b0 <lv_point_transform+0x168>)
 8001fec:	6013      	str	r3, [r2, #0]
        cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 8001fee:	fb00 f505 	mul.w	r5, r0, r5
 8001ff2:	fb09 5501 	mla	r5, r9, r1, r5
 8001ff6:	fb8a 1a05 	smull	r1, sl, sl, r5
 8001ffa:	17ed      	asrs	r5, r5, #31
 8001ffc:	ebc5 05aa 	rsb	r5, r5, sl, asr #2
 8002000:	492c      	ldr	r1, [pc, #176]	@ (80020b4 <lv_point_transform+0x16c>)
 8002002:	600d      	str	r5, [r1, #0]
        sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8002004:	115b      	asrs	r3, r3, #5
 8002006:	6013      	str	r3, [r2, #0]
        cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
 8002008:	116d      	asrs	r5, r5, #5
 800200a:	600d      	str	r5, [r1, #0]
        angle_prev = angle;
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <lv_point_transform+0x164>)
 800200e:	f8c3 8000 	str.w	r8, [r3]
    int32_t x = p->x;
 8002012:	f9b4 1000 	ldrsh.w	r1, [r4]
    int32_t y = p->y;
 8002016:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
    if(zoom == 256) {
 800201a:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 800201e:	d030      	beq.n	8002082 <lv_point_transform+0x13a>
        p->x = (((cosma * x - sinma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->x;
 8002020:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <lv_point_transform+0x16c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fb01 f203 	mul.w	r2, r1, r3
 8002028:	4d21      	ldr	r5, [pc, #132]	@ (80020b0 <lv_point_transform+0x168>)
 800202a:	f8d5 c000 	ldr.w	ip, [r5]
 800202e:	fb00 221c 	mls	r2, r0, ip, r2
 8002032:	fb07 f202 	mul.w	r2, r7, r2
 8002036:	8835      	ldrh	r5, [r6, #0]
 8002038:	eb05 42a2 	add.w	r2, r5, r2, asr #18
 800203c:	8022      	strh	r2, [r4, #0]
        p->y = (((sinma * x + cosma * y) * zoom) >> (_LV_TRANSFORM_TRIGO_SHIFT + 8)) + pivot->y;
 800203e:	fb00 f303 	mul.w	r3, r0, r3
 8002042:	fb01 330c 	mla	r3, r1, ip, r3
 8002046:	fb07 f303 	mul.w	r3, r7, r3
 800204a:	8872      	ldrh	r2, [r6, #2]
 800204c:	eb02 43a3 	add.w	r3, r2, r3, asr #18
 8002050:	8063      	strh	r3, [r4, #2]
}
 8002052:	b003      	add	sp, #12
 8002054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p->x = (((int32_t)(p->x) * zoom) >> 8) + pivot->x;
 8002058:	fb07 f202 	mul.w	r2, r7, r2
 800205c:	8831      	ldrh	r1, [r6, #0]
 800205e:	eb01 2222 	add.w	r2, r1, r2, asr #8
 8002062:	8022      	strh	r2, [r4, #0]
        p->y = (((int32_t)(p->y) * zoom) >> 8) + pivot->y;
 8002064:	fb07 f303 	mul.w	r3, r7, r3
 8002068:	8872      	ldrh	r2, [r6, #2]
 800206a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 800206e:	8063      	strh	r3, [r4, #2]
        return;
 8002070:	e7ef      	b.n	8002052 <lv_point_transform+0x10a>
        if(angle_limited < 0) angle_limited += 3600;
 8002072:	f1b8 0f00 	cmp.w	r8, #0
 8002076:	db01      	blt.n	800207c <lv_point_transform+0x134>
 8002078:	4645      	mov	r5, r8
 800207a:	e786      	b.n	8001f8a <lv_point_transform+0x42>
 800207c:	f508 6561 	add.w	r5, r8, #3600	@ 0xe10
 8002080:	e783      	b.n	8001f8a <lv_point_transform+0x42>
        p->x = ((cosma * x - sinma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
 8002082:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <lv_point_transform+0x16c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fb01 f503 	mul.w	r5, r1, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	@ (80020b0 <lv_point_transform+0x168>)
 800208c:	6817      	ldr	r7, [r2, #0]
 800208e:	fb00 5517 	mls	r5, r0, r7, r5
 8002092:	8832      	ldrh	r2, [r6, #0]
 8002094:	eb02 22a5 	add.w	r2, r2, r5, asr #10
 8002098:	8022      	strh	r2, [r4, #0]
        p->y = ((sinma * x + cosma * y) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
 800209a:	fb00 f303 	mul.w	r3, r0, r3
 800209e:	fb01 3307 	mla	r3, r1, r7, r3
 80020a2:	8872      	ldrh	r2, [r6, #2]
 80020a4:	eb02 23a3 	add.w	r3, r2, r3, asr #10
 80020a8:	8063      	strh	r3, [r4, #2]
 80020aa:	e7d2      	b.n	8002052 <lv_point_transform+0x10a>
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20006534 	.word	0x20006534
 80020b4:	20006530 	.word	0x20006530
 80020b8:	66666667 	.word	0x66666667

080020bc <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80020bc:	8883      	ldrh	r3, [r0, #4]
 80020be:	8802      	ldrh	r2, [r0, #0]
 80020c0:	1a98      	subs	r0, r3, r2
 80020c2:	b280      	uxth	r0, r0
 80020c4:	3001      	adds	r0, #1
}
 80020c6:	b200      	sxth	r0, r0
 80020c8:	4770      	bx	lr

080020ca <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80020ca:	88c3      	ldrh	r3, [r0, #6]
 80020cc:	8842      	ldrh	r2, [r0, #2]
 80020ce:	1a98      	subs	r0, r3, r2
 80020d0:	b280      	uxth	r0, r0
 80020d2:	3001      	adds	r0, #1
}
 80020d4:	b200      	sxth	r0, r0
 80020d6:	4770      	bx	lr

080020d8 <lv_bar_init_anim>:
    }
}

static void lv_bar_init_anim(lv_obj_t * obj, _lv_bar_anim_t * bar_anim)
{
    bar_anim->bar = obj;
 80020d8:	6008      	str	r0, [r1, #0]
    bar_anim->anim_start = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	604b      	str	r3, [r1, #4]
    bar_anim->anim_end = 0;
 80020de:	608b      	str	r3, [r1, #8]
    bar_anim->anim_state = LV_BAR_ANIM_STATE_INV;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e4:	60cb      	str	r3, [r1, #12]
}
 80020e6:	4770      	bx	lr

080020e8 <draw_indic>:
{
 80020e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ec:	b0d1      	sub	sp, #324	@ 0x144
 80020ee:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80020f0:	f00e fe14 	bl	8010d1c <lv_event_get_target>
 80020f4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80020f6:	4628      	mov	r0, r5
 80020f8:	f00e fe88 	bl	8010e0c <lv_event_get_draw_ctx>
 80020fc:	9001      	str	r0, [sp, #4]
    lv_obj_get_coords(obj, &bar_coords);
 80020fe:	a94e      	add	r1, sp, #312	@ 0x138
 8002100:	4620      	mov	r0, r4
 8002102:	f017 fa92 	bl	801962a <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8002106:	2269      	movs	r2, #105	@ 0x69
 8002108:	2100      	movs	r1, #0
 800210a:	4620      	mov	r0, r4
 800210c:	f01a faf2 	bl	801c6f4 <lv_obj_get_style_prop>
 8002110:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8002112:	226a      	movs	r2, #106	@ 0x6a
 8002114:	2100      	movs	r1, #0
 8002116:	4620      	mov	r0, r4
 8002118:	f01a faec 	bl	801c6f4 <lv_obj_get_style_prop>
    bar_coords.x1 -= transf_w;
 800211c:	f8bd 1138 	ldrh.w	r1, [sp, #312]	@ 0x138
 8002120:	b2ab      	uxth	r3, r5
 8002122:	1aca      	subs	r2, r1, r3
 8002124:	f8ad 2138 	strh.w	r2, [sp, #312]	@ 0x138
    bar_coords.x2 += transf_w;
 8002128:	f8bd 613c 	ldrh.w	r6, [sp, #316]	@ 0x13c
 800212c:	441e      	add	r6, r3
 800212e:	b2b6      	uxth	r6, r6
 8002130:	f8ad 613c 	strh.w	r6, [sp, #316]	@ 0x13c
    bar_coords.y1 -= transf_h;
 8002134:	f8bd 213a 	ldrh.w	r2, [sp, #314]	@ 0x13a
 8002138:	b280      	uxth	r0, r0
 800213a:	1a15      	subs	r5, r2, r0
 800213c:	f8ad 513a 	strh.w	r5, [sp, #314]	@ 0x13a
    bar_coords.y2 += transf_h;
 8002140:	f8bd 513e 	ldrh.w	r5, [sp, #318]	@ 0x13e
 8002144:	4405      	add	r5, r0
 8002146:	b2ad      	uxth	r5, r5
 8002148:	f8ad 513e 	strh.w	r5, [sp, #318]	@ 0x13e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800214c:	1a5b      	subs	r3, r3, r1
 800214e:	441e      	add	r6, r3
 8002150:	b2b6      	uxth	r6, r6
 8002152:	3601      	adds	r6, #1
 8002154:	b233      	sxth	r3, r6
 8002156:	9300      	str	r3, [sp, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002158:	1a80      	subs	r0, r0, r2
 800215a:	4405      	add	r5, r0
 800215c:	b2ad      	uxth	r5, r5
 800215e:	3501      	adds	r5, #1
 8002160:	b22d      	sxth	r5, r5
    int32_t range = bar->max_value - bar->min_value;
 8002162:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002164:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002166:	eba1 0902 	sub.w	r9, r1, r2
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 800216a:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	f000 81f0 	beq.w	8002558 <draw_indic+0x470>
    bool sym = false;
 8002178:	2300      	movs	r3, #0
 800217a:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800217c:	2212      	movs	r2, #18
 800217e:	2100      	movs	r1, #0
 8002180:	4620      	mov	r0, r4
 8002182:	f01a fab7 	bl	801c6f4 <lv_obj_get_style_prop>
 8002186:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002188:	2213      	movs	r2, #19
 800218a:	2100      	movs	r1, #0
 800218c:	4620      	mov	r0, r4
 800218e:	f01a fab1 	bl	801c6f4 <lv_obj_get_style_prop>
 8002192:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002194:	2210      	movs	r2, #16
 8002196:	2100      	movs	r1, #0
 8002198:	4620      	mov	r0, r4
 800219a:	f01a faab 	bl	801c6f4 <lv_obj_get_style_prop>
 800219e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80021a0:	2211      	movs	r2, #17
 80021a2:	2100      	movs	r1, #0
 80021a4:	4620      	mov	r0, r4
 80021a6:	f01a faa5 	bl	801c6f4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 80021aa:	f9bd c138 	ldrsh.w	ip, [sp, #312]	@ 0x138
 80021ae:	f8a4 c034 	strh.w	ip, [r4, #52]	@ 0x34
    dest->y1 = src->y1;
 80021b2:	f9bd 113a 	ldrsh.w	r1, [sp, #314]	@ 0x13a
 80021b6:	86e1      	strh	r1, [r4, #54]	@ 0x36
    dest->x2 = src->x2;
 80021b8:	f9bd 213c 	ldrsh.w	r2, [sp, #316]	@ 0x13c
 80021bc:	8722      	strh	r2, [r4, #56]	@ 0x38
    dest->y2 = src->y2;
 80021be:	f9bd 313e 	ldrsh.w	r3, [sp, #318]	@ 0x13e
 80021c2:	8763      	strh	r3, [r4, #58]	@ 0x3a
    bar->indic_area.x1 += bg_left;
 80021c4:	fa1f f68a 	uxth.w	r6, sl
 80021c8:	9607      	str	r6, [sp, #28]
 80021ca:	fa16 fc8c 	uxtah	ip, r6, ip
 80021ce:	fa1f fc8c 	uxth.w	ip, ip
 80021d2:	f8a4 c034 	strh.w	ip, [r4, #52]	@ 0x34
    bar->indic_area.x2 -= bg_right;
 80021d6:	b292      	uxth	r2, r2
 80021d8:	fa1f f688 	uxth.w	r6, r8
 80021dc:	9602      	str	r6, [sp, #8]
 80021de:	1b92      	subs	r2, r2, r6
 80021e0:	b292      	uxth	r2, r2
 80021e2:	8722      	strh	r2, [r4, #56]	@ 0x38
    bar->indic_area.y1 += bg_top;
 80021e4:	b2be      	uxth	r6, r7
 80021e6:	9603      	str	r6, [sp, #12]
 80021e8:	fa16 f181 	uxtah	r1, r6, r1
 80021ec:	b289      	uxth	r1, r1
 80021ee:	86e1      	strh	r1, [r4, #54]	@ 0x36
    bar->indic_area.y2 -= bg_bottom;
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b280      	uxth	r0, r0
 80021f4:	9004      	str	r0, [sp, #16]
 80021f6:	1a1b      	subs	r3, r3, r0
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	8763      	strh	r3, [r4, #58]	@ 0x3a
    if(hor && lv_area_get_height(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 80021fc:	9800      	ldr	r0, [sp, #0]
 80021fe:	4285      	cmp	r5, r0
 8002200:	f300 81c2 	bgt.w	8002588 <draw_indic+0x4a0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002204:	1a5b      	subs	r3, r3, r1
 8002206:	b29b      	uxth	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	b21b      	sxth	r3, r3
 800220c:	2b03      	cmp	r3, #3
 800220e:	f300 81bb 	bgt.w	8002588 <draw_indic+0x4a0>
        bar->indic_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 8002212:	8ae3      	ldrh	r3, [r4, #22]
 8002214:	eb05 72d5 	add.w	r2, r5, r5, lsr #31
 8002218:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800221c:	b29b      	uxth	r3, r3
 800221e:	1e9a      	subs	r2, r3, #2
 8002220:	86e2      	strh	r2, [r4, #54]	@ 0x36
        bar->indic_area.y2 = bar->indic_area.y1 + LV_BAR_SIZE_MIN;
 8002222:	3302      	adds	r3, #2
 8002224:	8763      	strh	r3, [r4, #58]	@ 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8002226:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8002228:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	3301      	adds	r3, #1
 8002230:	b219      	sxth	r1, r3
 8002232:	9108      	str	r1, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002234:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8002236:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	b21b      	sxth	r3, r3
 8002240:	461e      	mov	r6, r3
    lv_coord_t anim_length = hor ? indicw : indich;
 8002242:	9b00      	ldr	r3, [sp, #0]
 8002244:	429d      	cmp	r5, r3
 8002246:	f300 81b6 	bgt.w	80025b6 <draw_indic+0x4ce>
 800224a:	4688      	mov	r8, r1
    if(hor) {
 800224c:	9b00      	ldr	r3, [sp, #0]
 800224e:	429d      	cmp	r5, r3
 8002250:	f300 81b3 	bgt.w	80025ba <draw_indic+0x4d2>
        axis1 = &bar->indic_area.x1;
 8002254:	f104 0b34 	add.w	fp, r4, #52	@ 0x34
        axis2 = &bar->indic_area.x2;
 8002258:	f104 0a38 	add.w	sl, r4, #56	@ 0x38
        indic_length_calc = lv_area_get_width;
 800225c:	4bc1      	ldr	r3, [pc, #772]	@ (8002564 <draw_indic+0x47c>)
 800225e:	9309      	str	r3, [sp, #36]	@ 0x24
    if(LV_BAR_IS_ANIMATING(bar->start_value_anim)) {
 8002260:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8002262:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8002266:	f000 81b1 	beq.w	80025cc <draw_indic+0x4e4>
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_start - bar->min_value)) / range;
 800226a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800226c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 800226e:	1bd2      	subs	r2, r2, r7
 8002270:	fb02 f208 	mul.w	r2, r2, r8
 8002274:	fb92 f2f9 	sdiv	r2, r2, r9
        lv_coord_t anim_start_value_start_x =
 8002278:	b210      	sxth	r0, r2
            (int32_t)((int32_t)anim_length * (bar->start_value_anim.anim_end - bar->min_value)) / range;
 800227a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800227c:	1bdb      	subs	r3, r3, r7
 800227e:	fb03 f308 	mul.w	r3, r3, r8
 8002282:	fb93 f3f9 	sdiv	r3, r3, r9
        lv_coord_t anim_start_value_end_x =
 8002286:	b21b      	sxth	r3, r3
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 8002288:	1a1b      	subs	r3, r3, r0
 800228a:	fb03 f101 	mul.w	r1, r3, r1
 800228e:	2900      	cmp	r1, #0
 8002290:	f2c0 819a 	blt.w	80025c8 <draw_indic+0x4e0>
        anim_start_value_x += anim_start_value_start_x;
 8002294:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8002298:	b213      	sxth	r3, r2
 800229a:	9305      	str	r3, [sp, #20]
    if(LV_BAR_IS_ANIMATING(bar->cur_value_anim)) {
 800229c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800229e:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80022a2:	f000 819f 	beq.w	80025e4 <draw_indic+0x4fc>
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_start - bar->min_value)) / range;
 80022a6:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 80022a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80022aa:	1a3f      	subs	r7, r7, r0
 80022ac:	fb07 f708 	mul.w	r7, r7, r8
 80022b0:	fb97 f7f9 	sdiv	r7, r7, r9
        lv_coord_t anim_cur_value_start_x =
 80022b4:	b239      	sxth	r1, r7
            (int32_t)((int32_t)anim_length * (bar->cur_value_anim.anim_end - bar->min_value)) / range;
 80022b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80022b8:	1a1b      	subs	r3, r3, r0
 80022ba:	fb03 f308 	mul.w	r3, r3, r8
 80022be:	fb93 f3f9 	sdiv	r3, r3, r9
        lv_coord_t anim_cur_value_end_x =
 80022c2:	b21b      	sxth	r3, r3
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80022c4:	1a5b      	subs	r3, r3, r1
 80022c6:	fb03 f202 	mul.w	r2, r3, r2
                                                      bar->cur_value_anim.anim_state) /
 80022ca:	2a00      	cmp	r2, #0
 80022cc:	f2c0 8188 	blt.w	80025e0 <draw_indic+0x4f8>
        anim_cur_value_x = anim_cur_value_start_x + (((anim_cur_value_end_x - anim_cur_value_start_x) *
 80022d0:	eb07 2722 	add.w	r7, r7, r2, asr #8
 80022d4:	b23f      	sxth	r7, r7
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80022d6:	2216      	movs	r2, #22
 80022d8:	2100      	movs	r1, #0
 80022da:	4620      	mov	r0, r4
 80022dc:	f01a fa0a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80022e0:	b2c0      	uxtb	r0, r0
    if(hor && base_dir == LV_BASE_DIR_RTL) {
 80022e2:	9b00      	ldr	r3, [sp, #0]
 80022e4:	429d      	cmp	r5, r3
 80022e6:	dc02      	bgt.n	80022ee <draw_indic+0x206>
 80022e8:	2801      	cmp	r0, #1
 80022ea:	f000 8184 	beq.w	80025f6 <draw_indic+0x50e>
    if(hor) {
 80022ee:	9b00      	ldr	r3, [sp, #0]
 80022f0:	429d      	cmp	r5, r3
 80022f2:	f300 818a 	bgt.w	800260a <draw_indic+0x522>
        *axis2 = *axis1 + anim_cur_value_x;
 80022f6:	f8bb 3000 	ldrh.w	r3, [fp]
 80022fa:	443b      	add	r3, r7
 80022fc:	f8aa 3000 	strh.w	r3, [sl]
        *axis1 += anim_start_value_x;
 8002300:	f8bb 3000 	ldrh.w	r3, [fp]
 8002304:	9a05      	ldr	r2, [sp, #20]
 8002306:	4413      	add	r3, r2
 8002308:	f8ab 3000 	strh.w	r3, [fp]
    if(sym) {
 800230c:	9b06      	ldr	r3, [sp, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 8189 	bne.w	8002626 <draw_indic+0x53e>
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 8002314:	f104 0734 	add.w	r7, r4, #52	@ 0x34
 8002318:	4638      	mov	r0, r7
 800231a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800231c:	4798      	blx	r3
 800231e:	2801      	cmp	r0, #1
 8002320:	f340 81b8 	ble.w	8002694 <draw_indic+0x5ac>
    dest->x1 = src->x1;
 8002324:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8002328:	f8ad 3130 	strh.w	r3, [sp, #304]	@ 0x130
    dest->y1 = src->y1;
 800232c:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 8002330:	f8ad 3132 	strh.w	r3, [sp, #306]	@ 0x132
    dest->x2 = src->x2;
 8002334:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	@ 0x38
 8002338:	f8ad 3134 	strh.w	r3, [sp, #308]	@ 0x134
    dest->y2 = src->y2;
 800233c:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	@ 0x3a
 8002340:	f8ad 3136 	strh.w	r3, [sp, #310]	@ 0x136
    lv_draw_rect_dsc_init(&draw_rect_dsc);
 8002344:	af3e      	add	r7, sp, #248	@ 0xf8
 8002346:	4638      	mov	r0, r7
 8002348:	f007 fc82 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_rect_dsc);
 800234c:	463a      	mov	r2, r7
 800234e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002352:	4620      	mov	r0, r4
 8002354:	f016 fcb6 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8002358:	9901      	ldr	r1, [sp, #4]
 800235a:	a82c      	add	r0, sp, #176	@ 0xb0
 800235c:	f016 ffb7 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_INDICATOR;
 8002360:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002364:	9339      	str	r3, [sp, #228]	@ 0xe4
    part_draw_dsc.class_p = MY_CLASS;
 8002366:	4b80      	ldr	r3, [pc, #512]	@ (8002568 <draw_indic+0x480>)
 8002368:	932d      	str	r3, [sp, #180]	@ 0xb4
    part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 800236a:	f04f 0800 	mov.w	r8, #0
 800236e:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
    part_draw_dsc.rect_dsc = &draw_rect_dsc;
 8002372:	9730      	str	r7, [sp, #192]	@ 0xc0
    part_draw_dsc.draw_area = &bar->indic_area;
 8002374:	f104 0734 	add.w	r7, r4, #52	@ 0x34
 8002378:	972f      	str	r7, [sp, #188]	@ 0xbc
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800237a:	aa2c      	add	r2, sp, #176	@ 0xb0
 800237c:	211a      	movs	r1, #26
 800237e:	4620      	mov	r0, r4
 8002380:	f00e fca2 	bl	8010cc8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8002384:	220b      	movs	r2, #11
 8002386:	4641      	mov	r1, r8
 8002388:	4620      	mov	r0, r4
 800238a:	f01a f9b3 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800238e:	b200      	sxth	r0, r0
    lv_coord_t short_side = LV_MIN(barw, barh);
 8002390:	462b      	mov	r3, r5
 8002392:	9a00      	ldr	r2, [sp, #0]
 8002394:	4295      	cmp	r5, r2
 8002396:	bfa8      	it	ge
 8002398:	4613      	movge	r3, r2
    if(bg_radius > short_side >> 1) bg_radius = short_side >> 1;
 800239a:	ea4f 0863 	mov.w	r8, r3, asr #1
 800239e:	ebb0 0f63 	cmp.w	r0, r3, asr #1
 80023a2:	dc00      	bgt.n	80023a6 <draw_indic+0x2be>
    lv_coord_t bg_radius = lv_obj_get_style_radius(obj, LV_PART_MAIN);
 80023a4:	4680      	mov	r8, r0
    lv_coord_t indic_radius = draw_rect_dsc.radius;
 80023a6:	f9bd 10f8 	ldrsh.w	r1, [sp, #248]	@ 0xf8
    short_side = LV_MIN(indicw, indich);
 80023aa:	4633      	mov	r3, r6
 80023ac:	9a08      	ldr	r2, [sp, #32]
 80023ae:	4296      	cmp	r6, r2
 80023b0:	bfa8      	it	ge
 80023b2:	4613      	movge	r3, r2
    if(indic_radius > short_side >> 1) indic_radius = short_side >> 1;
 80023b4:	105a      	asrs	r2, r3, #1
 80023b6:	ebb1 0f63 	cmp.w	r1, r3, asr #1
 80023ba:	dc00      	bgt.n	80023be <draw_indic+0x2d6>
    lv_coord_t indic_radius = draw_rect_dsc.radius;
 80023bc:	460a      	mov	r2, r1
    if((hor && lv_area_get_width(&bar->indic_area) > indic_radius * 2) ||
 80023be:	9b00      	ldr	r3, [sp, #0]
 80023c0:	429d      	cmp	r5, r3
 80023c2:	dc08      	bgt.n	80023d6 <draw_indic+0x2ee>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80023c4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80023c6:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 80023c8:	1a5b      	subs	r3, r3, r1
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80023d4:	dc0b      	bgt.n	80023ee <draw_indic+0x306>
 80023d6:	9b00      	ldr	r3, [sp, #0]
 80023d8:	429d      	cmp	r5, r3
 80023da:	dd20      	ble.n	800241e <draw_indic+0x336>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80023dc:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 80023de:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80023e0:	1a5b      	subs	r3, r3, r1
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	b21b      	sxth	r3, r3
       (!hor && lv_area_get_height(&bar->indic_area) > indic_radius * 2)) {
 80023e8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80023ec:	dd17      	ble.n	800241e <draw_indic+0x336>
        lv_opa_t bg_opa = draw_rect_dsc.bg_opa;
 80023ee:	f89d b0fb 	ldrb.w	fp, [sp, #251]	@ 0xfb
        lv_opa_t bg_img_opa = draw_rect_dsc.bg_img_opa;
 80023f2:	f89d a112 	ldrb.w	sl, [sp, #274]	@ 0x112
        lv_opa_t border_opa = draw_rect_dsc.border_opa;
 80023f6:	f89d 911a 	ldrb.w	r9, [sp, #282]	@ 0x11a
        draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f88d 30fb 	strb.w	r3, [sp, #251]	@ 0xfb
        draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 8002400:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
        draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8002404:	f88d 311a 	strb.w	r3, [sp, #282]	@ 0x11a
        lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8002408:	463a      	mov	r2, r7
 800240a:	a93e      	add	r1, sp, #248	@ 0xf8
 800240c:	9801      	ldr	r0, [sp, #4]
 800240e:	f007 fc61 	bl	8009cd4 <lv_draw_rect>
        draw_rect_dsc.bg_opa = bg_opa;
 8002412:	f88d b0fb 	strb.w	fp, [sp, #251]	@ 0xfb
        draw_rect_dsc.bg_img_opa = bg_img_opa;
 8002416:	f88d a112 	strb.w	sl, [sp, #274]	@ 0x112
        draw_rect_dsc.border_opa = border_opa;
 800241a:	f88d 911a 	strb.w	r9, [sp, #282]	@ 0x11a
    bg_mask_area.x1 = obj->coords.x1 + bg_left;
 800241e:	8aa3      	ldrh	r3, [r4, #20]
 8002420:	9e07      	ldr	r6, [sp, #28]
 8002422:	4433      	add	r3, r6
 8002424:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
    bg_mask_area.x2 = obj->coords.x2 - bg_right;
 8002428:	8b23      	ldrh	r3, [r4, #24]
 800242a:	9a02      	ldr	r2, [sp, #8]
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
    bg_mask_area.y1 = obj->coords.y1 + bg_top;
 8002432:	8ae3      	ldrh	r3, [r4, #22]
 8002434:	9903      	ldr	r1, [sp, #12]
 8002436:	440b      	add	r3, r1
 8002438:	f8ad 3092 	strh.w	r3, [sp, #146]	@ 0x92
    bg_mask_area.y2 = obj->coords.y2 - bg_bottom;
 800243c:	8b63      	ldrh	r3, [r4, #26]
 800243e:	9804      	ldr	r0, [sp, #16]
 8002440:	1a1b      	subs	r3, r3, r0
 8002442:	f8ad 3096 	strh.w	r3, [sp, #150]	@ 0x96
    lv_draw_mask_radius_init(&mask_bg_param, &bg_mask_area, bg_radius, false);
 8002446:	2300      	movs	r3, #0
 8002448:	4642      	mov	r2, r8
 800244a:	a924      	add	r1, sp, #144	@ 0x90
 800244c:	a826      	add	r0, sp, #152	@ 0x98
 800244e:	f007 fb53 	bl	8009af8 <lv_draw_mask_radius_init>
    lv_coord_t mask_bg_id = lv_draw_mask_add(&mask_bg_param, NULL);
 8002452:	2100      	movs	r1, #0
 8002454:	ab26      	add	r3, sp, #152	@ 0x98
 8002456:	4618      	mov	r0, r3
 8002458:	f007 f928 	bl	80096ac <lv_draw_mask_add>
 800245c:	4680      	mov	r8, r0
    lv_opa_t shadow_opa = draw_rect_dsc.shadow_opa;
 800245e:	f89d 912e 	ldrb.w	r9, [sp, #302]	@ 0x12e
    lv_opa_t border_opa = draw_rect_dsc.border_opa;
 8002462:	f89d a11a 	ldrb.w	sl, [sp, #282]	@ 0x11a
    draw_rect_dsc.border_opa = LV_OPA_TRANSP;
 8002466:	2300      	movs	r3, #0
 8002468:	f88d 311a 	strb.w	r3, [sp, #282]	@ 0x11a
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 800246c:	f88d 312e 	strb.w	r3, [sp, #302]	@ 0x12e
    dest->x1 = src->x1;
 8002470:	f9bd 0138 	ldrsh.w	r0, [sp, #312]	@ 0x138
 8002474:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
    dest->y1 = src->y1;
 8002478:	f9bd 113a 	ldrsh.w	r1, [sp, #314]	@ 0x13a
 800247c:	f8ad 108a 	strh.w	r1, [sp, #138]	@ 0x8a
    dest->x2 = src->x2;
 8002480:	f9bd 213c 	ldrsh.w	r2, [sp, #316]	@ 0x13c
 8002484:	f8ad 208c 	strh.w	r2, [sp, #140]	@ 0x8c
    dest->y2 = src->y2;
 8002488:	f9bd 313e 	ldrsh.w	r3, [sp, #318]	@ 0x13e
 800248c:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
    mask_indic_max_area.x1 += bg_left;
 8002490:	fa16 f080 	uxtah	r0, r6, r0
 8002494:	b280      	uxth	r0, r0
 8002496:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
    mask_indic_max_area.y1 += bg_top;
 800249a:	9e03      	ldr	r6, [sp, #12]
 800249c:	fa16 f181 	uxtah	r1, r6, r1
 80024a0:	b289      	uxth	r1, r1
 80024a2:	f8ad 108a 	strh.w	r1, [sp, #138]	@ 0x8a
    mask_indic_max_area.x2 -= bg_right;
 80024a6:	b292      	uxth	r2, r2
 80024a8:	9e02      	ldr	r6, [sp, #8]
 80024aa:	1b92      	subs	r2, r2, r6
 80024ac:	b292      	uxth	r2, r2
 80024ae:	f8ad 208c 	strh.w	r2, [sp, #140]	@ 0x8c
    mask_indic_max_area.y2 -= bg_bottom;
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	9e04      	ldr	r6, [sp, #16]
 80024b6:	1b9b      	subs	r3, r3, r6
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
    if(hor && lv_area_get_height(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 80024be:	9e00      	ldr	r6, [sp, #0]
 80024c0:	42b5      	cmp	r5, r6
 80024c2:	f300 80fe 	bgt.w	80026c2 <draw_indic+0x5da>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80024c6:	1a5b      	subs	r3, r3, r1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	f300 80f7 	bgt.w	80026c2 <draw_indic+0x5da>
        mask_indic_max_area.y1 = obj->coords.y1 + (barh / 2) - (LV_BAR_SIZE_MIN / 2);
 80024d4:	8ae3      	ldrh	r3, [r4, #22]
 80024d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024da:	eb03 0365 	add.w	r3, r3, r5, asr #1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	1e9a      	subs	r2, r3, #2
 80024e2:	f8ad 208a 	strh.w	r2, [sp, #138]	@ 0x8a
        mask_indic_max_area.y2 = mask_indic_max_area.y1 + LV_BAR_SIZE_MIN;
 80024e6:	3302      	adds	r3, #2
 80024e8:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
    lv_draw_mask_radius_init(&mask_indic_param, &bar->indic_area, draw_rect_dsc.radius, false);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f9bd 20f8 	ldrsh.w	r2, [sp, #248]	@ 0xf8
 80024f2:	4639      	mov	r1, r7
 80024f4:	a81c      	add	r0, sp, #112	@ 0x70
 80024f6:	f007 faff 	bl	8009af8 <lv_draw_mask_radius_init>
    int16_t mask_indic_id = lv_draw_mask_add(&mask_indic_param, NULL);
 80024fa:	2100      	movs	r1, #0
 80024fc:	a81c      	add	r0, sp, #112	@ 0x70
 80024fe:	f007 f8d5 	bl	80096ac <lv_draw_mask_add>
 8002502:	4605      	mov	r5, r0
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &mask_indic_max_area);
 8002504:	aa22      	add	r2, sp, #136	@ 0x88
 8002506:	a93e      	add	r1, sp, #248	@ 0xf8
 8002508:	9e01      	ldr	r6, [sp, #4]
 800250a:	4630      	mov	r0, r6
 800250c:	f007 fbe2 	bl	8009cd4 <lv_draw_rect>
    draw_rect_dsc.border_opa = border_opa;
 8002510:	f88d a11a 	strb.w	sl, [sp, #282]	@ 0x11a
    draw_rect_dsc.shadow_opa = shadow_opa;
 8002514:	f88d 912e 	strb.w	r9, [sp, #302]	@ 0x12e
    draw_rect_dsc.bg_opa = LV_OPA_TRANSP;
 8002518:	2300      	movs	r3, #0
 800251a:	f88d 30fb 	strb.w	r3, [sp, #251]	@ 0xfb
    draw_rect_dsc.bg_img_opa = LV_OPA_TRANSP;
 800251e:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
    draw_rect_dsc.shadow_opa = LV_OPA_TRANSP;
 8002522:	f88d 312e 	strb.w	r3, [sp, #302]	@ 0x12e
    lv_draw_rect(draw_ctx, &draw_rect_dsc, &bar->indic_area);
 8002526:	463a      	mov	r2, r7
 8002528:	a93e      	add	r1, sp, #248	@ 0xf8
 800252a:	4630      	mov	r0, r6
 800252c:	f007 fbd2 	bl	8009cd4 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_indic_param);
 8002530:	a81c      	add	r0, sp, #112	@ 0x70
 8002532:	f007 f92b 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_bg_param);
 8002536:	a826      	add	r0, sp, #152	@ 0x98
 8002538:	f007 f928 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_indic_id);
 800253c:	4628      	mov	r0, r5
 800253e:	f007 f8f9 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bg_id);
 8002542:	4640      	mov	r0, r8
 8002544:	f007 f8f6 	bl	8009734 <lv_draw_mask_remove_id>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8002548:	aa2c      	add	r2, sp, #176	@ 0xb0
 800254a:	211b      	movs	r1, #27
 800254c:	4620      	mov	r0, r4
 800254e:	f00e fbbb 	bl	8010cc8 <lv_event_send>
}
 8002552:	b051      	add	sp, #324	@ 0x144
 8002554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8002558:	2a00      	cmp	r2, #0
 800255a:	db07      	blt.n	800256c <draw_indic+0x484>
    bool sym = false;
 800255c:	2300      	movs	r3, #0
 800255e:	9306      	str	r3, [sp, #24]
 8002560:	e60c      	b.n	800217c <draw_indic+0x94>
 8002562:	bf00      	nop
 8002564:	080020bd 	.word	0x080020bd
 8002568:	080298f0 	.word	0x080298f0
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 800256c:	2900      	cmp	r1, #0
 800256e:	dd05      	ble.n	800257c <draw_indic+0x494>
       bar->start_value == bar->min_value) sym = true;
 8002570:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    if(bar->mode == LV_BAR_MODE_SYMMETRICAL && bar->min_value < 0 && bar->max_value > 0 &&
 8002572:	429a      	cmp	r2, r3
 8002574:	d005      	beq.n	8002582 <draw_indic+0x49a>
    bool sym = false;
 8002576:	2300      	movs	r3, #0
 8002578:	9306      	str	r3, [sp, #24]
 800257a:	e5ff      	b.n	800217c <draw_indic+0x94>
 800257c:	2300      	movs	r3, #0
 800257e:	9306      	str	r3, [sp, #24]
 8002580:	e5fc      	b.n	800217c <draw_indic+0x94>
       bar->start_value == bar->min_value) sym = true;
 8002582:	2301      	movs	r3, #1
 8002584:	9306      	str	r3, [sp, #24]
 8002586:	e5f9      	b.n	800217c <draw_indic+0x94>
    else if(!hor && lv_area_get_width(&bar->indic_area) < LV_BAR_SIZE_MIN) {
 8002588:	9900      	ldr	r1, [sp, #0]
 800258a:	428d      	cmp	r5, r1
 800258c:	f77f ae4b 	ble.w	8002226 <draw_indic+0x13e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8002590:	eba2 020c 	sub.w	r2, r2, ip
 8002594:	b292      	uxth	r2, r2
 8002596:	3201      	adds	r2, #1
 8002598:	b212      	sxth	r2, r2
 800259a:	2a03      	cmp	r2, #3
 800259c:	f73f ae43 	bgt.w	8002226 <draw_indic+0x13e>
        bar->indic_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80025a0:	8aa3      	ldrh	r3, [r4, #20]
 80025a2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
 80025a6:	eb03 0362 	add.w	r3, r3, r2, asr #1
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	1e9a      	subs	r2, r3, #2
 80025ae:	86a2      	strh	r2, [r4, #52]	@ 0x34
        bar->indic_area.x2 = bar->indic_area.x1 + LV_BAR_SIZE_MIN;
 80025b0:	3302      	adds	r3, #2
 80025b2:	8723      	strh	r3, [r4, #56]	@ 0x38
 80025b4:	e637      	b.n	8002226 <draw_indic+0x13e>
    lv_coord_t anim_length = hor ? indicw : indich;
 80025b6:	46b0      	mov	r8, r6
 80025b8:	e648      	b.n	800224c <draw_indic+0x164>
        axis1 = &bar->indic_area.y1;
 80025ba:	f104 0b36 	add.w	fp, r4, #54	@ 0x36
        axis2 = &bar->indic_area.y2;
 80025be:	f104 0a3a 	add.w	sl, r4, #58	@ 0x3a
        indic_length_calc = lv_area_get_height;
 80025c2:	4b4c      	ldr	r3, [pc, #304]	@ (80026f4 <draw_indic+0x60c>)
 80025c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80025c6:	e64b      	b.n	8002260 <draw_indic+0x178>
        anim_start_value_x = (((anim_start_value_end_x - anim_start_value_start_x) * bar->start_value_anim.anim_state) /
 80025c8:	31ff      	adds	r1, #255	@ 0xff
 80025ca:	e663      	b.n	8002294 <draw_indic+0x1ac>
        anim_start_value_x = (int32_t)((int32_t)anim_length * (bar->start_value - bar->min_value)) / range;
 80025cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80025ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	fb03 f308 	mul.w	r3, r3, r8
 80025d6:	fb93 f3f9 	sdiv	r3, r3, r9
 80025da:	b21b      	sxth	r3, r3
 80025dc:	9305      	str	r3, [sp, #20]
 80025de:	e65d      	b.n	800229c <draw_indic+0x1b4>
                                                      bar->cur_value_anim.anim_state) /
 80025e0:	32ff      	adds	r2, #255	@ 0xff
 80025e2:	e675      	b.n	80022d0 <draw_indic+0x1e8>
        anim_cur_value_x = (int32_t)((int32_t)anim_length * (bar->cur_value - bar->min_value)) / range;
 80025e4:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 80025e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80025e8:	1aff      	subs	r7, r7, r3
 80025ea:	fb07 f708 	mul.w	r7, r7, r8
 80025ee:	fb97 f7f9 	sdiv	r7, r7, r9
 80025f2:	b23f      	sxth	r7, r7
 80025f4:	e66f      	b.n	80022d6 <draw_indic+0x1ee>
        anim_cur_value_x = -anim_cur_value_x;
 80025f6:	427f      	negs	r7, r7
 80025f8:	b23f      	sxth	r7, r7
        anim_start_value_x = -anim_start_value_x;
 80025fa:	9b05      	ldr	r3, [sp, #20]
 80025fc:	425b      	negs	r3, r3
 80025fe:	b21b      	sxth	r3, r3
 8002600:	9305      	str	r3, [sp, #20]
 8002602:	465b      	mov	r3, fp
        axis1 = axis2;
 8002604:	46d3      	mov	fp, sl
        axis2 = tmp;
 8002606:	469a      	mov	sl, r3
 8002608:	e671      	b.n	80022ee <draw_indic+0x206>
        *axis1 = *axis2 - anim_cur_value_x + 1;
 800260a:	f8ba 3000 	ldrh.w	r3, [sl]
 800260e:	1bdb      	subs	r3, r3, r7
 8002610:	b29b      	uxth	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f8ab 3000 	strh.w	r3, [fp]
        *axis2 -= anim_start_value_x;
 8002618:	f8ba 3000 	ldrh.w	r3, [sl]
 800261c:	9a05      	ldr	r2, [sp, #20]
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	f8aa 3000 	strh.w	r3, [sl]
 8002624:	e672      	b.n	800230c <draw_indic+0x224>
        shift = (-bar->min_value * anim_length) / range;
 8002626:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002628:	425b      	negs	r3, r3
 800262a:	fb03 f808 	mul.w	r8, r3, r8
 800262e:	fb98 f8f9 	sdiv	r8, r8, r9
        if(hor) {
 8002632:	9b00      	ldr	r3, [sp, #0]
 8002634:	429d      	cmp	r5, r3
 8002636:	dc0f      	bgt.n	8002658 <draw_indic+0x570>
            zero = *axis1 + shift;
 8002638:	f8bb 3000 	ldrh.w	r3, [fp]
 800263c:	4443      	add	r3, r8
 800263e:	b21b      	sxth	r3, r3
            if(*axis2 > zero)
 8002640:	f9ba 2000 	ldrsh.w	r2, [sl]
 8002644:	429a      	cmp	r2, r3
 8002646:	dd02      	ble.n	800264e <draw_indic+0x566>
                *axis1 = zero;
 8002648:	f8ab 3000 	strh.w	r3, [fp]
 800264c:	e66a      	b.n	8002324 <draw_indic+0x23c>
                *axis1 = *axis2;
 800264e:	f8ab 2000 	strh.w	r2, [fp]
                *axis2 = zero;
 8002652:	f8aa 3000 	strh.w	r3, [sl]
 8002656:	e665      	b.n	8002324 <draw_indic+0x23c>
            zero = *axis2 - shift + 1;
 8002658:	f8ba 3000 	ldrh.w	r3, [sl]
 800265c:	eba3 0308 	sub.w	r3, r3, r8
 8002660:	b29b      	uxth	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	b21b      	sxth	r3, r3
            if(*axis1 > zero)
 8002666:	f9bb 2000 	ldrsh.w	r2, [fp]
 800266a:	429a      	cmp	r2, r3
 800266c:	dd0d      	ble.n	800268a <draw_indic+0x5a2>
                *axis2 = zero;
 800266e:	f8aa 3000 	strh.w	r3, [sl]
            if(*axis2 < *axis1) {
 8002672:	f9ba 2000 	ldrsh.w	r2, [sl]
 8002676:	f9bb 3000 	ldrsh.w	r3, [fp]
 800267a:	429a      	cmp	r2, r3
 800267c:	f6bf ae52 	bge.w	8002324 <draw_indic+0x23c>
                *axis1 = *axis2;
 8002680:	f8ab 2000 	strh.w	r2, [fp]
                *axis2 = zero;
 8002684:	f8aa 3000 	strh.w	r3, [sl]
    if(!sym && indic_length_calc(&bar->indic_area) <= 1) {
 8002688:	e64c      	b.n	8002324 <draw_indic+0x23c>
                *axis2 = *axis1;
 800268a:	f8aa 2000 	strh.w	r2, [sl]
                *axis1 = zero;
 800268e:	f8ab 3000 	strh.w	r3, [fp]
 8002692:	e7ee      	b.n	8002672 <draw_indic+0x58a>
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8002694:	9901      	ldr	r1, [sp, #4]
 8002696:	a80a      	add	r0, sp, #40	@ 0x28
 8002698:	f016 fe19 	bl	80192ce <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_INDICATOR;
 800269c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026a0:	9317      	str	r3, [sp, #92]	@ 0x5c
        part_draw_dsc.class_p = MY_CLASS;
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <draw_indic+0x610>)
 80026a4:	930b      	str	r3, [sp, #44]	@ 0x2c
        part_draw_dsc.type = LV_BAR_DRAW_PART_INDICATOR;
 80026a6:	2300      	movs	r3, #0
 80026a8:	930c      	str	r3, [sp, #48]	@ 0x30
        part_draw_dsc.draw_area = &bar->indic_area;
 80026aa:	970d      	str	r7, [sp, #52]	@ 0x34
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80026ac:	aa0a      	add	r2, sp, #40	@ 0x28
 80026ae:	211a      	movs	r1, #26
 80026b0:	4620      	mov	r0, r4
 80026b2:	f00e fb09 	bl	8010cc8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80026b6:	aa0a      	add	r2, sp, #40	@ 0x28
 80026b8:	211b      	movs	r1, #27
 80026ba:	4620      	mov	r0, r4
 80026bc:	f00e fb04 	bl	8010cc8 <lv_event_send>
        return;
 80026c0:	e747      	b.n	8002552 <draw_indic+0x46a>
    else if(!hor && lv_area_get_width(&mask_indic_max_area) < LV_BAR_SIZE_MIN) {
 80026c2:	9900      	ldr	r1, [sp, #0]
 80026c4:	428d      	cmp	r5, r1
 80026c6:	f77f af11 	ble.w	80024ec <draw_indic+0x404>
 80026ca:	1a12      	subs	r2, r2, r0
 80026cc:	b292      	uxth	r2, r2
 80026ce:	3201      	adds	r2, #1
 80026d0:	b212      	sxth	r2, r2
 80026d2:	2a03      	cmp	r2, #3
 80026d4:	f73f af0a 	bgt.w	80024ec <draw_indic+0x404>
        mask_indic_max_area.x1 = obj->coords.x1 + (barw / 2) - (LV_BAR_SIZE_MIN / 2);
 80026d8:	8aa3      	ldrh	r3, [r4, #20]
 80026da:	eb01 76d1 	add.w	r6, r1, r1, lsr #31
 80026de:	eb03 0366 	add.w	r3, r3, r6, asr #1
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	1e9a      	subs	r2, r3, #2
 80026e6:	f8ad 2088 	strh.w	r2, [sp, #136]	@ 0x88
        mask_indic_max_area.x2 = mask_indic_max_area.x1 + LV_BAR_SIZE_MIN;
 80026ea:	3302      	adds	r3, #2
 80026ec:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
 80026f0:	e6fc      	b.n	80024ec <draw_indic+0x404>
 80026f2:	bf00      	nop
 80026f4:	080020cb 	.word	0x080020cb
 80026f8:	080298f0 	.word	0x080298f0

080026fc <lv_bar_event>:
{
 80026fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002700:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8002702:	4841      	ldr	r0, [pc, #260]	@ (8002808 <lv_bar_event+0x10c>)
 8002704:	f00e fa36 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8002708:	2801      	cmp	r0, #1
 800270a:	d001      	beq.n	8002710 <lv_bar_event+0x14>
}
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8002710:	4628      	mov	r0, r5
 8002712:	f00e fb07 	bl	8010d24 <lv_event_get_code>
 8002716:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8002718:	4628      	mov	r0, r5
 800271a:	f00e faff 	bl	8010d1c <lv_event_get_target>
 800271e:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8002720:	1e63      	subs	r3, r4, #1
 8002722:	2b14      	cmp	r3, #20
 8002724:	d8f2      	bhi.n	800270c <lv_bar_event+0x10>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <lv_bar_event+0x30>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	080027f7 	.word	0x080027f7
 8002730:	0800270d 	.word	0x0800270d
 8002734:	0800270d 	.word	0x0800270d
 8002738:	0800270d 	.word	0x0800270d
 800273c:	0800270d 	.word	0x0800270d
 8002740:	0800270d 	.word	0x0800270d
 8002744:	0800270d 	.word	0x0800270d
 8002748:	080027f7 	.word	0x080027f7
 800274c:	0800270d 	.word	0x0800270d
 8002750:	0800270d 	.word	0x0800270d
 8002754:	0800270d 	.word	0x0800270d
 8002758:	0800270d 	.word	0x0800270d
 800275c:	0800270d 	.word	0x0800270d
 8002760:	0800270d 	.word	0x0800270d
 8002764:	0800270d 	.word	0x0800270d
 8002768:	0800270d 	.word	0x0800270d
 800276c:	0800270d 	.word	0x0800270d
 8002770:	0800270d 	.word	0x0800270d
 8002774:	08002781 	.word	0x08002781
 8002778:	0800270d 	.word	0x0800270d
 800277c:	08002801 	.word	0x08002801
        indic_size = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 8002780:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002784:	f016 fd37 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 8002788:	4607      	mov	r7, r0
        lv_coord_t * s = lv_event_get_param(e);
 800278a:	4628      	mov	r0, r5
 800278c:	f00e face 	bl	8010d2c <lv_event_get_param>
 8002790:	4604      	mov	r4, r0
        *s = LV_MAX(*s, indic_size);
 8002792:	f9b0 0000 	ldrsh.w	r0, [r0]
 8002796:	42b8      	cmp	r0, r7
 8002798:	bfb8      	it	lt
 800279a:	4638      	movlt	r0, r7
 800279c:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800279e:	2212      	movs	r2, #18
 80027a0:	2100      	movs	r1, #0
 80027a2:	4630      	mov	r0, r6
 80027a4:	f019 ffa6 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80027a8:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80027aa:	2213      	movs	r2, #19
 80027ac:	2100      	movs	r1, #0
 80027ae:	4630      	mov	r0, r6
 80027b0:	f019 ffa0 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80027b4:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80027b6:	2210      	movs	r2, #16
 80027b8:	2100      	movs	r1, #0
 80027ba:	4630      	mov	r0, r6
 80027bc:	f019 ff9a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80027c0:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80027c4:	2211      	movs	r2, #17
 80027c6:	2100      	movs	r1, #0
 80027c8:	4630      	mov	r0, r6
 80027ca:	f019 ff93 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80027ce:	b203      	sxth	r3, r0
        lv_coord_t pad = LV_MIN4(bg_left, bg_right, bg_top, bg_bottom);
 80027d0:	4543      	cmp	r3, r8
 80027d2:	bfa8      	it	ge
 80027d4:	4643      	movge	r3, r8
 80027d6:	42bd      	cmp	r5, r7
 80027d8:	bfa8      	it	ge
 80027da:	463d      	movge	r5, r7
 80027dc:	42ab      	cmp	r3, r5
 80027de:	bfa8      	it	ge
 80027e0:	462b      	movge	r3, r5
        if(pad < 0) {
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da92      	bge.n	800270c <lv_bar_event+0x10>
            *s = LV_MAX(*s, -pad);
 80027e6:	425b      	negs	r3, r3
 80027e8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bfb8      	it	lt
 80027f0:	4613      	movlt	r3, r2
 80027f2:	8023      	strh	r3, [r4, #0]
 80027f4:	e78a      	b.n	800270c <lv_bar_event+0x10>
        lv_obj_invalidate_area(obj, &bar->indic_area);
 80027f6:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 80027fa:	f017 fb2c 	bl	8019e56 <lv_obj_invalidate_area>
    else if(code == LV_EVENT_PRESSED || code == LV_EVENT_RELEASED) {
 80027fe:	e785      	b.n	800270c <lv_bar_event+0x10>
        draw_indic(e);
 8002800:	4628      	mov	r0, r5
 8002802:	f7ff fc71 	bl	80020e8 <draw_indic>
 8002806:	e781      	b.n	800270c <lv_bar_event+0x10>
 8002808:	080298f0 	.word	0x080298f0

0800280c <lv_bar_destructor>:
{
 800280c:	b510      	push	{r4, lr}
 800280e:	460c      	mov	r4, r1
    lv_anim_del(&bar->cur_value_anim, NULL);
 8002810:	2100      	movs	r1, #0
 8002812:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8002816:	f7fd ffb7 	bl	8000788 <lv_anim_del>
    lv_anim_del(&bar->start_value_anim, NULL);
 800281a:	2100      	movs	r1, #0
 800281c:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8002820:	f7fd ffb2 	bl	8000788 <lv_anim_del>
}
 8002824:	bd10      	pop	{r4, pc}

08002826 <lv_bar_anim_ready>:
{
 8002826:	b508      	push	{r3, lr}
    _lv_bar_anim_t * var = a->var;
 8002828:	6803      	ldr	r3, [r0, #0]
    lv_obj_t * obj = (lv_obj_t *)var->bar;
 800282a:	681a      	ldr	r2, [r3, #0]
    var->anim_state = LV_BAR_ANIM_STATE_INV;
 800282c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002830:	60d9      	str	r1, [r3, #12]
    if(var == &bar->cur_value_anim)
 8002832:	f102 013c 	add.w	r1, r2, #60	@ 0x3c
 8002836:	4299      	cmp	r1, r3
 8002838:	d007      	beq.n	800284a <lv_bar_anim_ready+0x24>
    else if(var == &bar->start_value_anim)
 800283a:	f102 014c 	add.w	r1, r2, #76	@ 0x4c
 800283e:	4299      	cmp	r1, r3
 8002840:	d006      	beq.n	8002850 <lv_bar_anim_ready+0x2a>
    lv_obj_invalidate(var->bar);
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f017 fb2f 	bl	8019ea6 <lv_obj_invalidate>
}
 8002848:	bd08      	pop	{r3, pc}
        bar->cur_value = var->anim_end;
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	6251      	str	r1, [r2, #36]	@ 0x24
 800284e:	e7f8      	b.n	8002842 <lv_bar_anim_ready+0x1c>
        bar->start_value = var->anim_end;
 8002850:	6899      	ldr	r1, [r3, #8]
 8002852:	6311      	str	r1, [r2, #48]	@ 0x30
 8002854:	e7f5      	b.n	8002842 <lv_bar_anim_ready+0x1c>

08002856 <lv_bar_anim>:
{
 8002856:	b508      	push	{r3, lr}
    bar_anim->anim_state    = value;
 8002858:	60c1      	str	r1, [r0, #12]
    lv_obj_invalidate(bar_anim->bar);
 800285a:	6800      	ldr	r0, [r0, #0]
 800285c:	f017 fb23 	bl	8019ea6 <lv_obj_invalidate>
}
 8002860:	bd08      	pop	{r3, pc}
	...

08002864 <lv_bar_set_value_with_anim>:
{
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	b093      	sub	sp, #76	@ 0x4c
 8002868:	4607      	mov	r7, r0
 800286a:	460d      	mov	r5, r1
 800286c:	4616      	mov	r6, r2
 800286e:	461c      	mov	r4, r3
 8002870:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
    if(en == LV_ANIM_OFF) {
 8002874:	b31b      	cbz	r3, 80028be <lv_bar_set_value_with_anim+0x5a>
        if(anim_info->anim_state == LV_BAR_ANIM_STATE_INV) {
 8002876:	68e3      	ldr	r3, [r4, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800287c:	d02b      	beq.n	80028d6 <lv_bar_set_value_with_anim+0x72>
            anim_info->anim_start = anim_info->anim_end;
 800287e:	68a3      	ldr	r3, [r4, #8]
 8002880:	6063      	str	r3, [r4, #4]
            anim_info->anim_end   = new_value;
 8002882:	60a1      	str	r1, [r4, #8]
        *value_ptr = new_value;
 8002884:	6035      	str	r5, [r6, #0]
        lv_anim_del(anim_info, NULL);
 8002886:	2100      	movs	r1, #0
 8002888:	4620      	mov	r0, r4
 800288a:	f7fd ff7d 	bl	8000788 <lv_anim_del>
        lv_anim_init(&a);
 800288e:	a801      	add	r0, sp, #4
 8002890:	f7fd ff60 	bl	8000754 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8002894:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8002896:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <lv_bar_set_value_with_anim+0x7c>)
 8002898:	9302      	str	r3, [sp, #8]
 * @param start     the start value
 * @param end       the end value
 */
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
{
    a->start_value = start;
 800289a:	2100      	movs	r1, #0
 800289c:	9109      	str	r1, [sp, #36]	@ 0x24
    a->current_value = start;
 800289e:	910a      	str	r1, [sp, #40]	@ 0x28
    a->end_value = end;
 80028a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	@ (80028e4 <lv_bar_set_value_with_anim+0x80>)
 80028a8:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80028aa:	2265      	movs	r2, #101	@ 0x65
 80028ac:	4638      	mov	r0, r7
 80028ae:	f019 ff21 	bl	801c6f4 <lv_obj_get_style_prop>
    a->time = duration;
 80028b2:	900c      	str	r0, [sp, #48]	@ 0x30
        lv_anim_start(&a);
 80028b4:	a801      	add	r0, sp, #4
 80028b6:	f7fd ff99 	bl	80007ec <lv_anim_start>
}
 80028ba:	b013      	add	sp, #76	@ 0x4c
 80028bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_anim_del(anim_info, NULL);
 80028be:	2100      	movs	r1, #0
 80028c0:	4620      	mov	r0, r4
 80028c2:	f7fd ff61 	bl	8000788 <lv_anim_del>
        anim_info->anim_state = LV_BAR_ANIM_STATE_INV;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028ca:	60e3      	str	r3, [r4, #12]
        *value_ptr = new_value;
 80028cc:	6035      	str	r5, [r6, #0]
        lv_obj_invalidate((lv_obj_t *)obj);
 80028ce:	4638      	mov	r0, r7
 80028d0:	f017 fae9 	bl	8019ea6 <lv_obj_invalidate>
 80028d4:	e7f1      	b.n	80028ba <lv_bar_set_value_with_anim+0x56>
            anim_info->anim_start = *value_ptr;
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	6063      	str	r3, [r4, #4]
            anim_info->anim_end   = new_value;
 80028da:	60a1      	str	r1, [r4, #8]
 80028dc:	e7d2      	b.n	8002884 <lv_bar_set_value_with_anim+0x20>
 80028de:	bf00      	nop
 80028e0:	08002857 	.word	0x08002857
 80028e4:	08002827 	.word	0x08002827

080028e8 <lv_bar_set_value>:
    if(bar->cur_value == value) return;
 80028e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80028ea:	428b      	cmp	r3, r1
 80028ec:	d018      	beq.n	8002920 <lv_bar_set_value+0x38>
{
 80028ee:	b510      	push	{r4, lr}
 80028f0:	b082      	sub	sp, #8
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 80028f2:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80028f4:	42a1      	cmp	r1, r4
 80028f6:	bfa8      	it	ge
 80028f8:	4621      	movge	r1, r4
 80028fa:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80028fc:	42a1      	cmp	r1, r4
 80028fe:	bfb8      	it	lt
 8002900:	4621      	movlt	r1, r4
    value = value < bar->start_value ? bar->start_value : value; /*Can't be smaller than the left value*/
 8002902:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002904:	42a1      	cmp	r1, r4
 8002906:	bfb8      	it	lt
 8002908:	4621      	movlt	r1, r4
    if(bar->cur_value == value) return;
 800290a:	428b      	cmp	r3, r1
 800290c:	d006      	beq.n	800291c <lv_bar_set_value+0x34>
    lv_bar_set_value_with_anim(obj, value, &bar->cur_value, &bar->cur_value_anim, anim);
 800290e:	9200      	str	r2, [sp, #0]
 8002910:	f100 033c 	add.w	r3, r0, #60	@ 0x3c
 8002914:	f100 0224 	add.w	r2, r0, #36	@ 0x24
 8002918:	f7ff ffa4 	bl	8002864 <lv_bar_set_value_with_anim>
}
 800291c:	b002      	add	sp, #8
 800291e:	bd10      	pop	{r4, pc}
 8002920:	4770      	bx	lr

08002922 <lv_bar_constructor>:
{
 8002922:	b538      	push	{r3, r4, r5, lr}
 8002924:	460c      	mov	r4, r1
    bar->min_value = 0;
 8002926:	2500      	movs	r5, #0
 8002928:	628d      	str	r5, [r1, #40]	@ 0x28
    bar->max_value = 100;
 800292a:	2364      	movs	r3, #100	@ 0x64
 800292c:	62cb      	str	r3, [r1, #44]	@ 0x2c
    bar->start_value = 0;
 800292e:	630d      	str	r5, [r1, #48]	@ 0x30
    bar->cur_value = 0;
 8002930:	624d      	str	r5, [r1, #36]	@ 0x24
    bar->indic_area.x1 = 0;
 8002932:	868d      	strh	r5, [r1, #52]	@ 0x34
    bar->indic_area.x2 = 0;
 8002934:	870d      	strh	r5, [r1, #56]	@ 0x38
    bar->indic_area.y1 = 0;
 8002936:	86cd      	strh	r5, [r1, #54]	@ 0x36
    bar->indic_area.y2 = 0;
 8002938:	874d      	strh	r5, [r1, #58]	@ 0x3a
    bar->mode = LV_BAR_MODE_NORMAL;
 800293a:	f891 305c 	ldrb.w	r3, [r1, #92]	@ 0x5c
 800293e:	f365 0301 	bfi	r3, r5, #0, #2
 8002942:	f881 305c 	strb.w	r3, [r1, #92]	@ 0x5c
    lv_bar_init_anim(obj, &bar->cur_value_anim);
 8002946:	313c      	adds	r1, #60	@ 0x3c
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fbc5 	bl	80020d8 <lv_bar_init_anim>
    lv_bar_init_anim(obj, &bar->start_value_anim);
 800294e:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff fbc0 	bl	80020d8 <lv_bar_init_anim>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 8002958:	2108      	movs	r1, #8
 800295a:	4620      	mov	r0, r4
 800295c:	f015 fd40 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8002960:	2110      	movs	r1, #16
 8002962:	4620      	mov	r0, r4
 8002964:	f015 fd3c 	bl	80183e0 <lv_obj_clear_flag>
    lv_bar_set_value(obj, 0, LV_ANIM_OFF);
 8002968:	462a      	mov	r2, r5
 800296a:	4629      	mov	r1, r5
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff ffbb 	bl	80028e8 <lv_bar_set_value>
}
 8002972:	bd38      	pop	{r3, r4, r5, pc}

08002974 <lv_bar_set_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) {
 8002974:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11a      	bne.n	80029b6 <lv_bar_set_start_value+0x42>
    value = LV_CLAMP(bar->min_value, value, bar->max_value);
 8002980:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002982:	4299      	cmp	r1, r3
 8002984:	bfa8      	it	ge
 8002986:	4619      	movge	r1, r3
 8002988:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800298a:	4299      	cmp	r1, r3
 800298c:	bfb8      	it	lt
 800298e:	4619      	movlt	r1, r3
    value = value > bar->cur_value ? bar->cur_value : value; /*Can't be greater than the right value*/
 8002990:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002992:	4299      	cmp	r1, r3
 8002994:	bfa8      	it	ge
 8002996:	4619      	movge	r1, r3
    if(bar->start_value == value) return;
 8002998:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800299a:	428b      	cmp	r3, r1
 800299c:	d00b      	beq.n	80029b6 <lv_bar_set_start_value+0x42>
{
 800299e:	b500      	push	{lr}
 80029a0:	b083      	sub	sp, #12
    lv_bar_set_value_with_anim(obj, value, &bar->start_value, &bar->start_value_anim, anim);
 80029a2:	9200      	str	r2, [sp, #0]
 80029a4:	f100 034c 	add.w	r3, r0, #76	@ 0x4c
 80029a8:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80029ac:	f7ff ff5a 	bl	8002864 <lv_bar_set_value_with_anim>
}
 80029b0:	b003      	add	sp, #12
 80029b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <lv_bar_get_value>:
    return LV_BAR_GET_ANIM_VALUE(bar->cur_value, bar->cur_value_anim);
 80029b8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029be:	d001      	beq.n	80029c4 <lv_bar_get_value+0xc>
 80029c0:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80029c2:	4770      	bx	lr
 80029c4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 80029c6:	4770      	bx	lr

080029c8 <lv_bar_get_start_value>:
    if(bar->mode != LV_BAR_MODE_RANGE) return bar->min_value;
 80029c8:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d001      	beq.n	80029d8 <lv_bar_get_start_value+0x10>
 80029d4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80029d6:	4770      	bx	lr
    return LV_BAR_GET_ANIM_VALUE(bar->start_value, bar->start_value_anim);
 80029d8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80029da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029de:	d001      	beq.n	80029e4 <lv_bar_get_start_value+0x1c>
 80029e0:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 80029e2:	4770      	bx	lr
 80029e4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
}
 80029e6:	4770      	bx	lr

080029e8 <lv_bar_get_mode>:
    return bar->mode;
 80029e8:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
}
 80029ec:	f000 0003 	and.w	r0, r0, #3
 80029f0:	4770      	bx	lr

080029f2 <lv_btn_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_btn_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80029f2:	b510      	push	{r4, lr}
 80029f4:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    LV_TRACE_OBJ_CREATE("begin");

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 80029f6:	2110      	movs	r1, #16
 80029f8:	4620      	mov	r0, r4
 80029fa:	f015 fcf1 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80029fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a02:	4620      	mov	r0, r4
 8002a04:	f015 ff7c 	bl	8018900 <lv_obj_add_flag>

    LV_TRACE_OBJ_CREATE("finished");
}
 8002a08:	bd10      	pop	{r4, pc}
	...

08002a0c <lv_btn_create>:
{
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8002a10:	4803      	ldr	r0, [pc, #12]	@ (8002a20 <lv_btn_create+0x14>)
 8002a12:	f016 f807 	bl	8018a24 <lv_obj_class_create_obj>
 8002a16:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8002a18:	f016 f8a3 	bl	8018b62 <lv_obj_class_init_obj>
}
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	bd10      	pop	{r4, pc}
 8002a20:	0802990c 	.word	0x0802990c

08002a24 <get_button_width>:
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnmatrix_ctrl_t ctrl_bits)
{
    uint8_t w = ctrl_bits & LV_BTNMATRIX_WIDTH_MASK;
    return w != 0 ? w : 1;
 8002a24:	f010 000f 	ands.w	r0, r0, #15
 8002a28:	d100      	bne.n	8002a2c <get_button_width+0x8>
 8002a2a:	2001      	movs	r0, #1
}
 8002a2c:	4770      	bx	lr

08002a2e <button_is_hidden>:

static bool button_is_hidden(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_HIDDEN) ? true : false;
}
 8002a2e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8002a32:	4770      	bx	lr

08002a34 <button_is_checked>:

static bool button_is_checked(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}
 8002a34:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002a38:	4770      	bx	lr

08002a3a <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_NO_REPEAT) ? true : false;
}
 8002a3a:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8002a3e:	4770      	bx	lr

08002a40 <button_is_inactive>:

static bool button_is_inactive(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_DISABLED) ? true : false;
}
 8002a40:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8002a44:	4770      	bx	lr

08002a46 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CLICK_TRIG) ? true : false;
}
 8002a46:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8002a4a:	4770      	bx	lr

08002a4c <button_is_popover>:

static bool button_is_popover(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_POPOVER) ? true : false;
}
 8002a4c:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8002a50:	4770      	bx	lr

08002a52 <button_is_checkable>:

static bool button_is_checkable(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKABLE) ? true : false;
}
 8002a52:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8002a56:	4770      	bx	lr

08002a58 <button_get_checked>:

static bool button_get_checked(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_CHECKED) ? true : false;
}
 8002a58:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002a5c:	4770      	bx	lr

08002a5e <button_is_recolor>:

static bool button_is_recolor(lv_btnmatrix_ctrl_t ctrl_bits)
{
    return (ctrl_bits & LV_BTNMATRIX_CTRL_RECOLOR) ? true : false;
}
 8002a5e:	f3c0 20c0 	ubfx	r0, r0, #11, #1
 8002a62:	4770      	bx	lr

08002a64 <has_popovers_in_top_row>:
 */
static bool has_popovers_in_top_row(lv_obj_t * obj)
{
    lv_btnmatrix_t * btnm = (lv_btnmatrix_t *)obj;

    if(btnm->row_cnt <= 0) {
 8002a64:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 8002a66:	b1d3      	cbz	r3, 8002a9e <has_popovers_in_top_row+0x3a>
{
 8002a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6c:	4607      	mov	r7, r0
        return false;
    }

    const char ** map_row = btnm->map_p;
 8002a6e:	f8d0 8024 	ldr.w	r8, [r0, #36]	@ 0x24
    uint16_t btn_cnt = 0;
 8002a72:	2400      	movs	r4, #0

    while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8002a74:	4626      	mov	r6, r4
 8002a76:	f858 5024 	ldr.w	r5, [r8, r4, lsl #2]
 8002a7a:	b19d      	cbz	r5, 8002aa4 <has_popovers_in_top_row+0x40>
 8002a7c:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <has_popovers_in_top_row+0x4c>)
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f7fd fb82 	bl	8000188 <strcmp>
 8002a84:	b190      	cbz	r0, 8002aac <has_popovers_in_top_row+0x48>
 8002a86:	782b      	ldrb	r3, [r5, #0]
 8002a88:	b16b      	cbz	r3, 8002aa6 <has_popovers_in_top_row+0x42>
        if(button_is_popover(btnm->ctrl_bits[btn_cnt])) {
 8002a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8002a90:	f7ff ffdc 	bl	8002a4c <button_is_popover>
 8002a94:	4603      	mov	r3, r0
 8002a96:	b930      	cbnz	r0, 8002aa6 <has_popovers_in_top_row+0x42>
            return true;
        }
        btn_cnt++;
 8002a98:	3401      	adds	r4, #1
 8002a9a:	b2a4      	uxth	r4, r4
 8002a9c:	e7ea      	b.n	8002a74 <has_popovers_in_top_row+0x10>
        return false;
 8002a9e:	2300      	movs	r3, #0
    }

    return false;
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	4770      	bx	lr
    return false;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e7fa      	b.n	8002aa6 <has_popovers_in_top_row+0x42>
 8002ab0:	08029928 	.word	0x08029928

08002ab4 <get_button_from_point>:
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b089      	sub	sp, #36	@ 0x24
 8002aba:	4605      	mov	r5, r0
 8002abc:	9103      	str	r1, [sp, #12]
    lv_obj_get_coords(obj, &obj_cords);
 8002abe:	a906      	add	r1, sp, #24
 8002ac0:	f016 fdb3 	bl	801962a <lv_obj_get_coords>
    lv_coord_t w = lv_obj_get_width(obj);
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f016 fe03 	bl	80196d0 <lv_obj_get_width>
 8002aca:	9001      	str	r0, [sp, #4]
    lv_coord_t h = lv_obj_get_height(obj);
 8002acc:	4628      	mov	r0, r5
 8002ace:	f016 fe06 	bl	80196de <lv_obj_get_height>
 8002ad2:	9002      	str	r0, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002ad4:	2212      	movs	r2, #18
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f019 fe0b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002ade:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002ae2:	2213      	movs	r2, #19
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f019 fe04 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002aec:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002af0:	2210      	movs	r2, #16
 8002af2:	2100      	movs	r1, #0
 8002af4:	4628      	mov	r0, r5
 8002af6:	f019 fdfd 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002afa:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002afe:	2211      	movs	r2, #17
 8002b00:	2100      	movs	r1, #0
 8002b02:	4628      	mov	r0, r5
 8002b04:	f019 fdf6 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002b08:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8002b0a:	2214      	movs	r2, #20
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f019 fdf0 	bl	801c6f4 <lv_obj_get_style_prop>
 8002b14:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
 8002b16:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8002b18:	2215      	movs	r2, #21
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f019 fde9 	bl	801c6f4 <lv_obj_get_style_prop>
    prow = (prow / 2) + 1 + (prow & 1);
 8002b22:	f004 0401 	and.w	r4, r4, #1
 8002b26:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8002b2a:	eb04 0666 	add.w	r6, r4, r6, asr #1
 8002b2e:	3601      	adds	r6, #1
 8002b30:	b236      	sxth	r6, r6
    pcol = (pcol / 2) + 1 + (pcol & 1);
 8002b32:	f000 0a01 	and.w	sl, r0, #1
 8002b36:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8002b3a:	fa03 f080 	sxtah	r0, r3, r0
 8002b3e:	eb0a 0a60 	add.w	sl, sl, r0, asr #1
 8002b42:	f10a 0a01 	add.w	sl, sl, #1
 8002b46:	fa0f fa8a 	sxth.w	sl, sl
    prow = LV_MIN(prow, BTN_EXTRA_CLICK_AREA_MAX);
 8002b4a:	2e0d      	cmp	r6, #13
 8002b4c:	bfa8      	it	ge
 8002b4e:	260d      	movge	r6, #13
    pcol = LV_MIN(pcol, BTN_EXTRA_CLICK_AREA_MAX);
 8002b50:	f1ba 0f0d 	cmp.w	sl, #13
 8002b54:	bfa8      	it	ge
 8002b56:	f04f 0a0d 	movge.w	sl, #13
    pright = LV_MIN(pright, BTN_EXTRA_CLICK_AREA_MAX);
 8002b5a:	f1b9 0f0d 	cmp.w	r9, #13
 8002b5e:	bfa8      	it	ge
 8002b60:	f04f 090d 	movge.w	r9, #13
    ptop = LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8002b64:	f1b8 0f0d 	cmp.w	r8, #13
 8002b68:	bfa8      	it	ge
 8002b6a:	f04f 080d 	movge.w	r8, #13
    pbottom = LV_MIN(pbottom, BTN_EXTRA_CLICK_AREA_MAX);
 8002b6e:	2f0d      	cmp	r7, #13
 8002b70:	bfa8      	it	ge
 8002b72:	270d      	movge	r7, #13
    for(i = 0; i < btnm->btn_cnt; i++) {
 8002b74:	2400      	movs	r4, #0
 8002b76:	e02d      	b.n	8002bd4 <get_button_from_point+0x120>
        else btn_area.x1 += obj_cords.x1 - pcol;
 8002b78:	f8bd c018 	ldrh.w	ip, [sp, #24]
 8002b7c:	ebac 0c0a 	sub.w	ip, ip, sl
 8002b80:	fa1f fc8c 	uxth.w	ip, ip
 8002b84:	fa1c f080 	uxtah	r0, ip, r0
 8002b88:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002b8c:	e04c      	b.n	8002c28 <get_button_from_point+0x174>
        else btn_area.y1 += obj_cords.y1 - prow;
 8002b8e:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8002b92:	1b80      	subs	r0, r0, r6
 8002b94:	b280      	uxth	r0, r0
 8002b96:	fa10 f181 	uxtah	r1, r0, r1
 8002b9a:	f8ad 1012 	strh.w	r1, [sp, #18]
 8002b9e:	e056      	b.n	8002c4e <get_button_from_point+0x19a>
        else btn_area.x2 += obj_cords.x1 + pcol;
 8002ba0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8002ba4:	4451      	add	r1, sl
 8002ba6:	b289      	uxth	r1, r1
 8002ba8:	fa11 f282 	uxtah	r2, r1, r2
 8002bac:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002bb0:	e060      	b.n	8002c74 <get_button_from_point+0x1c0>
        else btn_area.y2 += obj_cords.y1 + prow;
 8002bb2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8002bb6:	4432      	add	r2, r6
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	fa12 f383 	uxtah	r3, r2, r3
 8002bbe:	f8ad 3016 	strh.w	r3, [sp, #22]
        if(_lv_area_is_point_on(&btn_area, p, 0) != false) {
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	9903      	ldr	r1, [sp, #12]
 8002bc6:	a804      	add	r0, sp, #16
 8002bc8:	f7fe ff62 	bl	8001a90 <_lv_area_is_point_on>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d164      	bne.n	8002c9a <get_button_from_point+0x1e6>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8002bd0:	3401      	adds	r4, #1
 8002bd2:	b2a4      	uxth	r4, r4
 8002bd4:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	d95f      	bls.n	8002c9a <get_button_from_point+0x1e6>
        lv_area_copy(&btn_area, &btnm->button_areas[i]);
 8002bda:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002bdc:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    dest->x1 = src->x1;
 8002be0:	f932 0034 	ldrsh.w	r0, [r2, r4, lsl #3]
 8002be4:	f8ad 0010 	strh.w	r0, [sp, #16]
    dest->y1 = src->y1;
 8002be8:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002bec:	f8ad 1012 	strh.w	r1, [sp, #18]
    dest->x2 = src->x2;
 8002bf0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002bf4:	f8ad 2014 	strh.w	r2, [sp, #20]
    dest->y2 = src->y2;
 8002bf8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
        if(btn_area.x1 <= pleft) btn_area.x1 += obj_cords.x1 - LV_MIN(pleft, BTN_EXTRA_CLICK_AREA_MAX);
 8002c00:	4583      	cmp	fp, r0
 8002c02:	dbb9      	blt.n	8002b78 <get_button_from_point+0xc4>
 8002c04:	f8bd c018 	ldrh.w	ip, [sp, #24]
 8002c08:	46de      	mov	lr, fp
 8002c0a:	f1bb 0f0d 	cmp.w	fp, #13
 8002c0e:	bfa8      	it	ge
 8002c10:	f04f 0e0d 	movge.w	lr, #13
 8002c14:	fa1f fe8e 	uxth.w	lr, lr
 8002c18:	ebac 0c0e 	sub.w	ip, ip, lr
 8002c1c:	fa1f fc8c 	uxth.w	ip, ip
 8002c20:	fa1c f080 	uxtah	r0, ip, r0
 8002c24:	f8ad 0010 	strh.w	r0, [sp, #16]
        if(btn_area.y1 <= ptop) btn_area.y1 += obj_cords.y1 - LV_MIN(ptop, BTN_EXTRA_CLICK_AREA_MAX);
 8002c28:	4588      	cmp	r8, r1
 8002c2a:	dbb0      	blt.n	8002b8e <get_button_from_point+0xda>
 8002c2c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8002c30:	46c4      	mov	ip, r8
 8002c32:	f1b8 0f0d 	cmp.w	r8, #13
 8002c36:	bfa8      	it	ge
 8002c38:	f04f 0c0d 	movge.w	ip, #13
 8002c3c:	fa1f fc8c 	uxth.w	ip, ip
 8002c40:	eba0 000c 	sub.w	r0, r0, ip
 8002c44:	b280      	uxth	r0, r0
 8002c46:	fa10 f181 	uxtah	r1, r0, r1
 8002c4a:	f8ad 1012 	strh.w	r1, [sp, #18]
        if(btn_area.x2 >= w - pright - 2) btn_area.x2 += obj_cords.x1 + LV_MIN(pright,
 8002c4e:	9901      	ldr	r1, [sp, #4]
 8002c50:	eba1 0109 	sub.w	r1, r1, r9
 8002c54:	3902      	subs	r1, #2
 8002c56:	428a      	cmp	r2, r1
 8002c58:	dba2      	blt.n	8002ba0 <get_button_from_point+0xec>
 8002c5a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8002c5e:	4649      	mov	r1, r9
 8002c60:	290d      	cmp	r1, #13
 8002c62:	bfa8      	it	ge
 8002c64:	210d      	movge	r1, #13
 8002c66:	fa10 f181 	uxtah	r1, r0, r1
 8002c6a:	b289      	uxth	r1, r1
 8002c6c:	fa11 f282 	uxtah	r2, r1, r2
 8002c70:	f8ad 2014 	strh.w	r2, [sp, #20]
        if(btn_area.y2 >= h - pbottom - 2) btn_area.y2 += obj_cords.y1 + LV_MIN(pbottom,
 8002c74:	9a02      	ldr	r2, [sp, #8]
 8002c76:	1bd2      	subs	r2, r2, r7
 8002c78:	3a02      	subs	r2, #2
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	db99      	blt.n	8002bb2 <get_button_from_point+0xfe>
 8002c7e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8002c82:	463a      	mov	r2, r7
 8002c84:	2f0d      	cmp	r7, #13
 8002c86:	bfa8      	it	ge
 8002c88:	220d      	movge	r2, #13
 8002c8a:	fa11 f282 	uxtah	r2, r1, r2
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	fa12 f383 	uxtah	r3, r2, r3
 8002c94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002c98:	e793      	b.n	8002bc2 <get_button_from_point+0x10e>
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8002c9a:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	d003      	beq.n	8002ca8 <get_button_from_point+0x1f4>
}
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	b009      	add	sp, #36	@ 0x24
 8002ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(i == btnm->btn_cnt) i = LV_BTNMATRIX_BTN_NONE;
 8002ca8:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8002cac:	e7f8      	b.n	8002ca0 <get_button_from_point+0x1ec>
	...

08002cb0 <invalidate_button_area>:
    if(btn_idx == LV_BTNMATRIX_BTN_NONE) return;
 8002cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cb4:	4299      	cmp	r1, r3
 8002cb6:	d076      	beq.n	8002da6 <invalidate_button_area+0xf6>
{
 8002cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	460d      	mov	r5, r1
    if(btn_idx >= btnm->btn_cnt) return;
 8002cc0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002cc2:	428b      	cmp	r3, r1
 8002cc4:	d801      	bhi.n	8002cca <invalidate_button_area+0x1a>
}
 8002cc6:	b005      	add	sp, #20
 8002cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    lv_area_copy(&btn_area, &btnm->button_areas[btn_idx]);
 8002cca:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002ccc:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    dest->x1 = src->x1;
 8002cd0:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8002cd4:	f8ad 2008 	strh.w	r2, [sp, #8]
    dest->y1 = src->y1;
 8002cd8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002cdc:	f8ad 200a 	strh.w	r2, [sp, #10]
    dest->x2 = src->x2;
 8002ce0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002ce4:	f8ad 200c 	strh.w	r2, [sp, #12]
    dest->y2 = src->y2;
 8002ce8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cec:	f8ad 300e 	strh.w	r3, [sp, #14]
    lv_obj_get_coords(obj, &obj_area);
 8002cf0:	4669      	mov	r1, sp
 8002cf2:	f016 fc9a 	bl	801962a <lv_obj_get_coords>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8002cf6:	2214      	movs	r2, #20
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f019 fcfa 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002d00:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8002d02:	2215      	movs	r2, #21
 8002d04:	2100      	movs	r1, #0
 8002d06:	4620      	mov	r0, r4
 8002d08:	f019 fcf4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002d0c:	b207      	sxth	r7, r0
    lv_coord_t dpi = lv_disp_get_dpi(lv_obj_get_disp(obj));
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f01a fa3c 	bl	801d18c <lv_obj_get_disp>
 8002d14:	f010 fae8 	bl	80132e8 <lv_disp_get_dpi>
    row_gap = LV_MAX(row_gap, dpi / 10);
 8002d18:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <invalidate_button_area+0xf8>)
 8002d1a:	fb82 3200 	smull	r3, r2, r2, r0
 8002d1e:	17c3      	asrs	r3, r0, #31
 8002d20:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	429e      	cmp	r6, r3
 8002d28:	bfb8      	it	lt
 8002d2a:	461e      	movlt	r6, r3
    col_gap = LV_MAX(col_gap, dpi / 10);
 8002d2c:	42bb      	cmp	r3, r7
 8002d2e:	bfb8      	it	lt
 8002d30:	463b      	movlt	r3, r7
    btn_area.x1 += obj_area.x1 - row_gap;
 8002d32:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8002d36:	f8bd 1000 	ldrh.w	r1, [sp]
 8002d3a:	b2b6      	uxth	r6, r6
 8002d3c:	1b8a      	subs	r2, r1, r6
 8002d3e:	fa10 f282 	uxtah	r2, r0, r2
 8002d42:	f8ad 2008 	strh.w	r2, [sp, #8]
    btn_area.y1 += obj_area.y1 - col_gap;
 8002d46:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8002d4a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	1ad0      	subs	r0, r2, r3
 8002d52:	fa17 f080 	uxtah	r0, r7, r0
 8002d56:	b280      	uxth	r0, r0
 8002d58:	f8ad 000a 	strh.w	r0, [sp, #10]
    btn_area.x2 += obj_area.x1 + row_gap;
 8002d5c:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 8002d60:	4431      	add	r1, r6
 8002d62:	fa17 f181 	uxtah	r1, r7, r1
 8002d66:	f8ad 100c 	strh.w	r1, [sp, #12]
    btn_area.y2 += obj_area.y1 + col_gap;
 8002d6a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002d6e:	441a      	add	r2, r3
 8002d70:	fa11 f282 	uxtah	r2, r1, r2
 8002d74:	b292      	uxth	r2, r2
 8002d76:	f8ad 200e 	strh.w	r2, [sp, #14]
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8002d7a:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8002d7c:	42ab      	cmp	r3, r5
 8002d7e:	d004      	beq.n	8002d8a <invalidate_button_area+0xda>
    lv_obj_invalidate_area(obj, &btn_area);
 8002d80:	a902      	add	r1, sp, #8
 8002d82:	4620      	mov	r0, r4
 8002d84:	f017 f867 	bl	8019e56 <lv_obj_invalidate_area>
 8002d88:	e79d      	b.n	8002cc6 <invalidate_button_area+0x16>
    if((btn_idx == btnm->btn_id_sel) && (btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8002d8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002d8c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8002d90:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002d94:	d0f4      	beq.n	8002d80 <invalidate_button_area+0xd0>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002d96:	1a13      	subs	r3, r2, r0
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b29b      	uxth	r3, r3
        btn_area.y1 -= lv_area_get_height(&btn_area);
 8002d9e:	1ac0      	subs	r0, r0, r3
 8002da0:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002da4:	e7ec      	b.n	8002d80 <invalidate_button_area+0xd0>
 8002da6:	4770      	bx	lr
 8002da8:	66666667 	.word	0x66666667

08002dac <draw_main>:
{
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	b0cf      	sub	sp, #316	@ 0x13c
 8002db2:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8002db4:	f00d ffb2 	bl	8010d1c <lv_event_get_target>
    if(btnm->btn_cnt == 0) return;
 8002db8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8002dba:	b913      	cbnz	r3, 8002dc2 <draw_main+0x16>
}
 8002dbc:	b04f      	add	sp, #316	@ 0x13c
 8002dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc2:	4605      	mov	r5, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f00e f821 	bl	8010e0c <lv_event_get_draw_ctx>
 8002dca:	4606      	mov	r6, r0
 8002dcc:	9004      	str	r0, [sp, #16]
    obj->skip_trans = 1;
 8002dce:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8002dd2:	f043 0308 	orr.w	r3, r3, #8
 8002dd6:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
    lv_obj_get_coords(obj, &area_obj);
 8002dda:	a94c      	add	r1, sp, #304	@ 0x130
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f016 fc24 	bl	801962a <lv_obj_get_coords>
    lv_state_t state_ori = obj->state;
 8002de2:	8c2c      	ldrh	r4, [r5, #32]
 8002de4:	9405      	str	r4, [sp, #20]
    obj->state = LV_STATE_DEFAULT;
 8002de6:	2700      	movs	r7, #0
 8002de8:	842f      	strh	r7, [r5, #32]
    obj->skip_trans = 1;
 8002dea:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
    lv_draw_rect_dsc_init(&draw_rect_dsc_def);
 8002df6:	a826      	add	r0, sp, #152	@ 0x98
 8002df8:	f006 ff2a 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_draw_label_dsc_init(&draw_label_dsc_def);
 8002dfc:	a81e      	add	r0, sp, #120	@ 0x78
 8002dfe:	f005 f8d3 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_def);
 8002e02:	aa26      	add	r2, sp, #152	@ 0x98
 8002e04:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8002e08:	4628      	mov	r0, r5
 8002e0a:	f015 ff5b 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_def);
 8002e0e:	aa1e      	add	r2, sp, #120	@ 0x78
 8002e10:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8002e14:	4628      	mov	r0, r5
 8002e16:	f016 f8a7 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    obj->skip_trans = 0;
 8002e1a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8002e1e:	f367 03c3 	bfi	r3, r7, #3, #1
 8002e22:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
    obj->state = state_ori;
 8002e26:	842c      	strh	r4, [r5, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4639      	mov	r1, r7
 8002e2c:	4628      	mov	r0, r5
 8002e2e:	f019 fc61 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e32:	b203      	sxth	r3, r0
 8002e34:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8002e36:	2211      	movs	r2, #17
 8002e38:	4639      	mov	r1, r7
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f019 fc5a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e40:	b203      	sxth	r3, r0
 8002e42:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8002e44:	2212      	movs	r2, #18
 8002e46:	4639      	mov	r1, r7
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f019 fc53 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e4e:	b203      	sxth	r3, r0
 8002e50:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8002e52:	2213      	movs	r2, #19
 8002e54:	4639      	mov	r1, r7
 8002e56:	4628      	mov	r0, r5
 8002e58:	f019 fc4c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8002e5c:	b203      	sxth	r3, r0
 8002e5e:	9309      	str	r3, [sp, #36]	@ 0x24
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8002e60:	4631      	mov	r1, r6
 8002e62:	a80c      	add	r0, sp, #48	@ 0x30
 8002e64:	f016 fa33 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 8002e68:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002e6c:	9319      	str	r3, [sp, #100]	@ 0x64
    part_draw_dsc.class_p = MY_CLASS;
 8002e6e:	4bcb      	ldr	r3, [pc, #812]	@ (800319c <draw_main+0x3f0>)
 8002e70:	930d      	str	r3, [sp, #52]	@ 0x34
    part_draw_dsc.type = LV_BTNMATRIX_DRAW_PART_BTN;
 8002e72:	970e      	str	r7, [sp, #56]	@ 0x38
    part_draw_dsc.rect_dsc = &draw_rect_dsc_act;
 8002e74:	ab3c      	add	r3, sp, #240	@ 0xf0
 8002e76:	9310      	str	r3, [sp, #64]	@ 0x40
    part_draw_dsc.label_dsc = &draw_label_dsc_act;
 8002e78:	ab34      	add	r3, sp, #208	@ 0xd0
 8002e7a:	9311      	str	r3, [sp, #68]	@ 0x44
    uint16_t txt_i = 0;
 8002e7c:	463c      	mov	r4, r7
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 8002e7e:	e12e      	b.n	80030de <draw_main+0x332>
            txt_i++;
 8002e80:	3401      	adds	r4, #1
 8002e82:	b2a4      	uxth	r4, r4
        while(strcmp(btnm->map_p[txt_i], "\n") == 0) {
 8002e84:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002e86:	00a6      	lsls	r6, r4, #2
 8002e88:	49c5      	ldr	r1, [pc, #788]	@ (80031a0 <draw_main+0x3f4>)
 8002e8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002e8e:	f7fd f97b 	bl	8000188 <strcmp>
 8002e92:	2800      	cmp	r0, #0
 8002e94:	d0f4      	beq.n	8002e80 <draw_main+0xd4>
        if(button_is_hidden(btnm->ctrl_bits[btn_i])) continue;
 8002e96:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002e98:	46ba      	mov	sl, r7
 8002e9a:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 8002e9e:	f833 9017 	ldrh.w	r9, [r3, r7, lsl #1]
 8002ea2:	4648      	mov	r0, r9
 8002ea4:	f7ff fdc3 	bl	8002a2e <button_is_hidden>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	f040 8114 	bne.w	80030d6 <draw_main+0x32a>
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
 8002eae:	4648      	mov	r0, r9
 8002eb0:	f7ff fdd2 	bl	8002a58 <button_get_checked>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	f040 811d 	bne.w	80030f4 <draw_main+0x348>
        lv_state_t btn_state = LV_STATE_DEFAULT;
 8002eba:	f04f 0800 	mov.w	r8, #0
        if(button_is_inactive(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_DISABLED;
 8002ebe:	4648      	mov	r0, r9
 8002ec0:	f7ff fdbe 	bl	8002a40 <button_is_inactive>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f000 8118 	beq.w	80030fa <draw_main+0x34e>
 8002eca:	f048 0880 	orr.w	r8, r8, #128	@ 0x80
        lv_area_copy(&btn_area, &btnm->button_areas[btn_i]);
 8002ece:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8002ed0:	eb02 03ca 	add.w	r3, r2, sl, lsl #3
    dest->x1 = src->x1;
 8002ed4:	f932 003a 	ldrsh.w	r0, [r2, sl, lsl #3]
 8002ed8:	f8ad 0128 	strh.w	r0, [sp, #296]	@ 0x128
    dest->y1 = src->y1;
 8002edc:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002ee0:	f8ad 112a 	strh.w	r1, [sp, #298]	@ 0x12a
    dest->x2 = src->x2;
 8002ee4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002ee8:	f8ad 212c 	strh.w	r2, [sp, #300]	@ 0x12c
    dest->y2 = src->y2;
 8002eec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ef0:	f8ad 312e 	strh.w	r3, [sp, #302]	@ 0x12e
        btn_area.x1 += area_obj.x1;
 8002ef4:	f8bd c130 	ldrh.w	ip, [sp, #304]	@ 0x130
 8002ef8:	fa1c f080 	uxtah	r0, ip, r0
 8002efc:	f8ad 0128 	strh.w	r0, [sp, #296]	@ 0x128
        btn_area.y1 += area_obj.y1;
 8002f00:	f8bd 0132 	ldrh.w	r0, [sp, #306]	@ 0x132
 8002f04:	fa10 f181 	uxtah	r1, r0, r1
 8002f08:	f8ad 112a 	strh.w	r1, [sp, #298]	@ 0x12a
        btn_area.x2 += area_obj.x1;
 8002f0c:	fa1c f282 	uxtah	r2, ip, r2
 8002f10:	f8ad 212c 	strh.w	r2, [sp, #300]	@ 0x12c
        btn_area.y2 += area_obj.y1;
 8002f14:	fa10 f383 	uxtah	r3, r0, r3
 8002f18:	f8ad 312e 	strh.w	r3, [sp, #302]	@ 0x12e
        if(btn_state == LV_STATE_DEFAULT) {
 8002f1c:	f1b8 0f00 	cmp.w	r8, #0
 8002f20:	f040 8109 	bne.w	8003136 <draw_main+0x38a>
            lv_memcpy(&draw_rect_dsc_act, &draw_rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 8002f24:	2238      	movs	r2, #56	@ 0x38
 8002f26:	a926      	add	r1, sp, #152	@ 0x98
 8002f28:	a83c      	add	r0, sp, #240	@ 0xf0
 8002f2a:	f013 fddd 	bl	8016ae8 <lv_memcpy>
            lv_memcpy(&draw_label_dsc_act, &draw_label_dsc_def, sizeof(lv_draw_label_dsc_t));
 8002f2e:	2220      	movs	r2, #32
 8002f30:	a91e      	add	r1, sp, #120	@ 0x78
 8002f32:	a834      	add	r0, sp, #208	@ 0xd0
 8002f34:	f013 fdd8 	bl	8016ae8 <lv_memcpy>
        bool recolor = button_is_recolor(btnm->ctrl_bits[btn_i]);
 8002f38:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f3a:	f833 000b 	ldrh.w	r0, [r3, fp]
 8002f3e:	f7ff fd8e 	bl	8002a5e <button_is_recolor>
        if(recolor) draw_label_dsc_act.flag |= LV_TEXT_FLAG_RECOLOR;
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f000 811a 	beq.w	800317c <draw_main+0x3d0>
 8002f48:	f89d 30ed 	ldrb.w	r3, [sp, #237]	@ 0xed
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f88d 30ed 	strb.w	r3, [sp, #237]	@ 0xed
        part_draw_dsc.draw_area = &btn_area;
 8002f54:	ab4a      	add	r3, sp, #296	@ 0x128
 8002f56:	930f      	str	r3, [sp, #60]	@ 0x3c
        part_draw_dsc.id = btn_i;
 8002f58:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8002f5c:	aa0c      	add	r2, sp, #48	@ 0x30
 8002f5e:	211a      	movs	r1, #26
 8002f60:	4628      	mov	r0, r5
 8002f62:	f00d feb1 	bl	8010cc8 <lv_event_send>
        if(draw_rect_dsc_act.border_side & LV_BORDER_SIDE_INTERNAL) {
 8002f66:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 8002f6a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d92a      	bls.n	8002fc8 <draw_main+0x21c>
            draw_rect_dsc_act.border_side = LV_BORDER_SIDE_FULL;
 8002f72:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 8002f76:	220f      	movs	r2, #15
 8002f78:	f362 0345 	bfi	r3, r2, #1, #5
 8002f7c:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 8002f80:	f9bd 2128 	ldrsh.w	r2, [sp, #296]	@ 0x128
 8002f84:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8002f88:	9908      	ldr	r1, [sp, #32]
 8002f8a:	440b      	add	r3, r1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	f000 80fc 	beq.w	800318a <draw_main+0x3de>
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 8002f92:	f9bd 212c 	ldrsh.w	r2, [sp, #300]	@ 0x12c
 8002f96:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 8002f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f9c:	1a5b      	subs	r3, r3, r1
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f000 8100 	beq.w	80031a4 <draw_main+0x3f8>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 8002fa4:	f9bd 212a 	ldrsh.w	r2, [sp, #298]	@ 0x12a
 8002fa8:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8002fac:	9906      	ldr	r1, [sp, #24]
 8002fae:	440b      	add	r3, r1
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f000 8102 	beq.w	80031ba <draw_main+0x40e>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 8002fb6:	f9bd 212e 	ldrsh.w	r2, [sp, #302]	@ 0x12e
 8002fba:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8002fbe:	9907      	ldr	r1, [sp, #28]
 8002fc0:	1a5b      	subs	r3, r3, r1
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f000 8104 	beq.w	80031d0 <draw_main+0x424>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8002fc8:	f8bd 912e 	ldrh.w	r9, [sp, #302]	@ 0x12e
 8002fcc:	f8bd 312a 	ldrh.w	r3, [sp, #298]	@ 0x12a
 8002fd0:	eba9 0903 	sub.w	r9, r9, r3
 8002fd4:	fa1f f989 	uxth.w	r9, r9
 8002fd8:	f109 0901 	add.w	r9, r9, #1
 8002fdc:	fa1f f289 	uxth.w	r2, r9
 8002fe0:	fa0f f989 	sxth.w	r9, r9
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8002fe4:	f018 0820 	ands.w	r8, r8, #32
 8002fe8:	d008      	beq.n	8002ffc <draw_main+0x250>
 8002fea:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8002fec:	f831 100b 	ldrh.w	r1, [r1, fp]
 8002ff0:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 8002ff4:	d002      	beq.n	8002ffc <draw_main+0x250>
            btn_area.y1 -= btn_height;
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	f8ad 312a 	strh.w	r3, [sp, #298]	@ 0x12a
        lv_draw_rect(draw_ctx, &draw_rect_dsc_act, &btn_area);
 8002ffc:	aa4a      	add	r2, sp, #296	@ 0x128
 8002ffe:	a93c      	add	r1, sp, #240	@ 0xf0
 8003000:	9804      	ldr	r0, [sp, #16]
 8003002:	f006 fe67 	bl	8009cd4 <lv_draw_rect>
        lv_coord_t line_space = draw_label_dsc_act.line_space;
 8003006:	f9bd 20e2 	ldrsh.w	r2, [sp, #226]	@ 0xe2
        const char * txt = btnm->map_p[txt_i];
 800300a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800300c:	599e      	ldr	r6, [r3, r6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800300e:	f8bd 3134 	ldrh.w	r3, [sp, #308]	@ 0x134
 8003012:	f8bd 1130 	ldrh.w	r1, [sp, #304]	@ 0x130
 8003016:	1a5b      	subs	r3, r3, r1
 8003018:	b29b      	uxth	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	b21b      	sxth	r3, r3
        lv_txt_get_size(&txt_size, txt, font, letter_space,
 800301e:	f89d 10ed 	ldrb.w	r1, [sp, #237]	@ 0xed
 8003022:	9102      	str	r1, [sp, #8]
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	9200      	str	r2, [sp, #0]
 8003028:	f9bd 30e4 	ldrsh.w	r3, [sp, #228]	@ 0xe4
 800302c:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 800302e:	4631      	mov	r1, r6
 8003030:	a80b      	add	r0, sp, #44	@ 0x2c
 8003032:	f024 fc6a 	bl	802790a <lv_txt_get_size>
 8003036:	f8bd 312c 	ldrh.w	r3, [sp, #300]	@ 0x12c
 800303a:	f8bd 1128 	ldrh.w	r1, [sp, #296]	@ 0x128
 800303e:	1a5b      	subs	r3, r3, r1
 8003040:	b29b      	uxth	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	b21b      	sxth	r3, r3
        btn_area.x1 += (lv_area_get_width(&btn_area) - txt_size.x) / 2;
 8003046:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 800304a:	eba3 030c 	sub.w	r3, r3, ip
 800304e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003052:	eb01 0163 	add.w	r1, r1, r3, asr #1
 8003056:	b289      	uxth	r1, r1
 8003058:	f8ad 1128 	strh.w	r1, [sp, #296]	@ 0x128
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800305c:	f8bd 312e 	ldrh.w	r3, [sp, #302]	@ 0x12e
 8003060:	f8bd 212a 	ldrh.w	r2, [sp, #298]	@ 0x12a
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b21b      	sxth	r3, r3
        btn_area.y1 += (lv_area_get_height(&btn_area) - txt_size.y) / 2;
 800306c:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	@ 0x2e
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8003076:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800307a:	b292      	uxth	r2, r2
 800307c:	f8ad 212a 	strh.w	r2, [sp, #298]	@ 0x12a
        btn_area.x2 = btn_area.x1 + txt_size.x;
 8003080:	fa11 fc8c 	uxtah	ip, r1, ip
 8003084:	f8ad c12c 	strh.w	ip, [sp, #300]	@ 0x12c
        btn_area.y2 = btn_area.y1 + txt_size.y;
 8003088:	fa12 f080 	uxtah	r0, r2, r0
 800308c:	b283      	uxth	r3, r0
 800308e:	f8ad 012e 	strh.w	r0, [sp, #302]	@ 0x12e
        if((btn_state & LV_STATE_PRESSED) && (btnm->ctrl_bits[btn_i] & LV_BTNMATRIX_CTRL_POPOVER)) {
 8003092:	f1b8 0f00 	cmp.w	r8, #0
 8003096:	d011      	beq.n	80030bc <draw_main+0x310>
 8003098:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800309a:	f831 100b 	ldrh.w	r1, [r1, fp]
 800309e:	f411 6f80 	tst.w	r1, #1024	@ 0x400
 80030a2:	d00b      	beq.n	80030bc <draw_main+0x310>
            btn_area.y1 -= btn_height / 2;
 80030a4:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 80030a8:	f3c9 094f 	ubfx	r9, r9, #1, #16
 80030ac:	eba2 0209 	sub.w	r2, r2, r9
 80030b0:	f8ad 212a 	strh.w	r2, [sp, #298]	@ 0x12a
            btn_area.y2 -= btn_height / 2;
 80030b4:	eba3 0309 	sub.w	r3, r3, r9
 80030b8:	f8ad 312e 	strh.w	r3, [sp, #302]	@ 0x12e
        lv_draw_label(draw_ctx, &draw_label_dsc_act, &btn_area, txt, NULL);
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4633      	mov	r3, r6
 80030c2:	aa4a      	add	r2, sp, #296	@ 0x128
 80030c4:	a934      	add	r1, sp, #208	@ 0xd0
 80030c6:	9804      	ldr	r0, [sp, #16]
 80030c8:	f004 ff9e 	bl	8008008 <lv_draw_label>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80030cc:	aa0c      	add	r2, sp, #48	@ 0x30
 80030ce:	211b      	movs	r1, #27
 80030d0:	4628      	mov	r0, r5
 80030d2:	f00d fdf9 	bl	8010cc8 <lv_event_send>
    for(btn_i = 0; btn_i < btnm->btn_cnt; btn_i++, txt_i++) {
 80030d6:	3701      	adds	r7, #1
 80030d8:	b2bf      	uxth	r7, r7
 80030da:	3401      	adds	r4, #1
 80030dc:	b2a4      	uxth	r4, r4
 80030de:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80030e0:	42bb      	cmp	r3, r7
 80030e2:	f63f aecf 	bhi.w	8002e84 <draw_main+0xd8>
    obj->skip_trans = 0;
 80030e6:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 80030ea:	f023 0308 	bic.w	r3, r3, #8
 80030ee:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 80030f2:	e663      	b.n	8002dbc <draw_main+0x10>
        if(button_get_checked(btnm->ctrl_bits[btn_i])) btn_state |= LV_STATE_CHECKED;
 80030f4:	f04f 0801 	mov.w	r8, #1
 80030f8:	e6e1      	b.n	8002ebe <draw_main+0x112>
        else if(btn_i == btnm->btn_id_sel) {
 80030fa:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 80030fc:	42bb      	cmp	r3, r7
 80030fe:	f47f aee6 	bne.w	8002ece <draw_main+0x122>
            if(state_ori & LV_STATE_PRESSED) btn_state |= LV_STATE_PRESSED;
 8003102:	9b05      	ldr	r3, [sp, #20]
 8003104:	f013 0f20 	tst.w	r3, #32
 8003108:	d001      	beq.n	800310e <draw_main+0x362>
 800310a:	f048 0820 	orr.w	r8, r8, #32
            if(state_ori & LV_STATE_FOCUSED) btn_state |= LV_STATE_FOCUSED;
 800310e:	9b05      	ldr	r3, [sp, #20]
 8003110:	f013 0f02 	tst.w	r3, #2
 8003114:	d001      	beq.n	800311a <draw_main+0x36e>
 8003116:	f048 0802 	orr.w	r8, r8, #2
            if(state_ori & LV_STATE_FOCUS_KEY) btn_state |= LV_STATE_FOCUS_KEY;
 800311a:	9b05      	ldr	r3, [sp, #20]
 800311c:	f013 0f04 	tst.w	r3, #4
 8003120:	d001      	beq.n	8003126 <draw_main+0x37a>
 8003122:	f048 0804 	orr.w	r8, r8, #4
            if(state_ori & LV_STATE_EDITED) btn_state |= LV_STATE_EDITED;
 8003126:	9b05      	ldr	r3, [sp, #20]
 8003128:	f013 0f08 	tst.w	r3, #8
 800312c:	f43f aecf 	beq.w	8002ece <draw_main+0x122>
 8003130:	f048 0808 	orr.w	r8, r8, #8
 8003134:	e6cb      	b.n	8002ece <draw_main+0x122>
            obj->state = btn_state;
 8003136:	f8a5 8020 	strh.w	r8, [r5, #32]
            obj->skip_trans = 1;
 800313a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
            lv_draw_rect_dsc_init(&draw_rect_dsc_act);
 8003146:	a83c      	add	r0, sp, #240	@ 0xf0
 8003148:	f006 fd82 	bl	8009c50 <lv_draw_rect_dsc_init>
            lv_draw_label_dsc_init(&draw_label_dsc_act);
 800314c:	a834      	add	r0, sp, #208	@ 0xd0
 800314e:	f004 ff2b 	bl	8007fa8 <lv_draw_label_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &draw_rect_dsc_act);
 8003152:	aa3c      	add	r2, sp, #240	@ 0xf0
 8003154:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8003158:	4628      	mov	r0, r5
 800315a:	f015 fdb3 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
            lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &draw_label_dsc_act);
 800315e:	aa34      	add	r2, sp, #208	@ 0xd0
 8003160:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8003164:	4628      	mov	r0, r5
 8003166:	f015 feff 	bl	8018f68 <lv_obj_init_draw_label_dsc>
            obj->state = state_ori;
 800316a:	9b05      	ldr	r3, [sp, #20]
 800316c:	842b      	strh	r3, [r5, #32]
            obj->skip_trans = 0;
 800316e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8003172:	f023 0308 	bic.w	r3, r3, #8
 8003176:	f885 3022 	strb.w	r3, [r5, #34]	@ 0x22
 800317a:	e6dd      	b.n	8002f38 <draw_main+0x18c>
        else draw_label_dsc_act.flag &= ~LV_TEXT_FLAG_RECOLOR;
 800317c:	f89d 30ed 	ldrb.w	r3, [sp, #237]	@ 0xed
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f88d 30ed 	strb.w	r3, [sp, #237]	@ 0xed
 8003188:	e6e4      	b.n	8002f54 <draw_main+0x1a8>
            if(btn_area.x1 == obj->coords.x1 + pleft) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_LEFT;
 800318a:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 800318e:	220b      	movs	r2, #11
 8003190:	f362 0345 	bfi	r3, r2, #1, #5
 8003194:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
 8003198:	e6fb      	b.n	8002f92 <draw_main+0x1e6>
 800319a:	bf00      	nop
 800319c:	08029eb4 	.word	0x08029eb4
 80031a0:	08029928 	.word	0x08029928
            if(btn_area.x2 == obj->coords.x2 - pright) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_RIGHT;
 80031a4:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 80031a8:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80031ac:	f002 0217 	and.w	r2, r2, #23
 80031b0:	f362 0345 	bfi	r3, r2, #1, #5
 80031b4:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
 80031b8:	e6f4      	b.n	8002fa4 <draw_main+0x1f8>
            if(btn_area.y1 == obj->coords.y1 + ptop) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_TOP;
 80031ba:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 80031be:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80031c2:	f002 021d 	and.w	r2, r2, #29
 80031c6:	f362 0345 	bfi	r3, r2, #1, #5
 80031ca:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
 80031ce:	e6f2      	b.n	8002fb6 <draw_main+0x20a>
            if(btn_area.y2 == obj->coords.y2 - pbottom) draw_rect_dsc_act.border_side &= ~LV_BORDER_SIDE_BOTTOM;
 80031d0:	f89d 3113 	ldrb.w	r3, [sp, #275]	@ 0x113
 80031d4:	f3c3 0244 	ubfx	r2, r3, #1, #5
 80031d8:	f002 021e 	and.w	r2, r2, #30
 80031dc:	f362 0345 	bfi	r3, r2, #1, #5
 80031e0:	f88d 3113 	strb.w	r3, [sp, #275]	@ 0x113
 80031e4:	e6f0      	b.n	8002fc8 <draw_main+0x21c>
 80031e6:	bf00      	nop

080031e8 <lv_btnmatrix_destructor>:
{
 80031e8:	b510      	push	{r4, lr}
 80031ea:	460c      	mov	r4, r1
    lv_mem_free(btnm->button_areas);
 80031ec:	6a88      	ldr	r0, [r1, #40]	@ 0x28
 80031ee:	f013 fbb1 	bl	8016954 <lv_mem_free>
    lv_mem_free(btnm->ctrl_bits);
 80031f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80031f4:	f013 fbae 	bl	8016954 <lv_mem_free>
    btnm->button_areas = NULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	62a3      	str	r3, [r4, #40]	@ 0x28
    btnm->ctrl_bits = NULL;
 80031fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 80031fe:	bd10      	pop	{r4, pc}

08003200 <allocate_btn_areas_and_controls>:
{
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	4606      	mov	r6, r0
 8003204:	460f      	mov	r7, r1
    btnm->row_cnt = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	8643      	strh	r3, [r0, #50]	@ 0x32
    uint16_t i       = 0;
 800320a:	2400      	movs	r4, #0
    uint16_t btn_cnt = 0;
 800320c:	4625      	mov	r5, r4
    while(map[i] && map[i][0] != '\0') {
 800320e:	e004      	b.n	800321a <allocate_btn_areas_and_controls+0x1a>
            btnm->row_cnt++;
 8003210:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8003212:	3301      	adds	r3, #1
 8003214:	8673      	strh	r3, [r6, #50]	@ 0x32
        i++;
 8003216:	3401      	adds	r4, #1
 8003218:	b2a4      	uxth	r4, r4
    while(map[i] && map[i][0] != '\0') {
 800321a:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800321e:	b148      	cbz	r0, 8003234 <allocate_btn_areas_and_controls+0x34>
 8003220:	7803      	ldrb	r3, [r0, #0]
 8003222:	b13b      	cbz	r3, 8003234 <allocate_btn_areas_and_controls+0x34>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 8003224:	4915      	ldr	r1, [pc, #84]	@ (800327c <allocate_btn_areas_and_controls+0x7c>)
 8003226:	f7fc ffaf 	bl	8000188 <strcmp>
 800322a:	2800      	cmp	r0, #0
 800322c:	d0f0      	beq.n	8003210 <allocate_btn_areas_and_controls+0x10>
            btn_cnt++;
 800322e:	3501      	adds	r5, #1
 8003230:	b2ad      	uxth	r5, r5
 8003232:	e7f0      	b.n	8003216 <allocate_btn_areas_and_controls+0x16>
    if(btn_cnt == btnm->btn_cnt) return;
 8003234:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003236:	42ab      	cmp	r3, r5
 8003238:	d01b      	beq.n	8003272 <allocate_btn_areas_and_controls+0x72>
    if(btnm->button_areas != NULL) {
 800323a:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 800323c:	b118      	cbz	r0, 8003246 <allocate_btn_areas_and_controls+0x46>
        lv_mem_free(btnm->button_areas);
 800323e:	f013 fb89 	bl	8016954 <lv_mem_free>
        btnm->button_areas = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	62b3      	str	r3, [r6, #40]	@ 0x28
    if(btnm->ctrl_bits != NULL) {
 8003246:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 8003248:	b118      	cbz	r0, 8003252 <allocate_btn_areas_and_controls+0x52>
        lv_mem_free(btnm->ctrl_bits);
 800324a:	f013 fb83 	bl	8016954 <lv_mem_free>
        btnm->ctrl_bits = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	62f3      	str	r3, [r6, #44]	@ 0x2c
    btnm->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8003252:	00e8      	lsls	r0, r5, #3
 8003254:	f013 fb60 	bl	8016918 <lv_mem_alloc>
 8003258:	62b0      	str	r0, [r6, #40]	@ 0x28
    LV_ASSERT_MALLOC(btnm->button_areas);
 800325a:	b158      	cbz	r0, 8003274 <allocate_btn_areas_and_controls+0x74>
    btnm->ctrl_bits = lv_mem_alloc(sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 800325c:	0068      	lsls	r0, r5, #1
 800325e:	f013 fb5b 	bl	8016918 <lv_mem_alloc>
 8003262:	62f0      	str	r0, [r6, #44]	@ 0x2c
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8003264:	b138      	cbz	r0, 8003276 <allocate_btn_areas_and_controls+0x76>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 8003266:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8003268:	b133      	cbz	r3, 8003278 <allocate_btn_areas_and_controls+0x78>
    lv_memset_00(btnm->ctrl_bits, sizeof(lv_btnmatrix_ctrl_t) * btn_cnt);
 800326a:	0069      	lsls	r1, r5, #1
 800326c:	f013 fd2a 	bl	8016cc4 <lv_memset_00>
    btnm->btn_cnt = btn_cnt;
 8003270:	8635      	strh	r5, [r6, #48]	@ 0x30
}
 8003272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(btnm->button_areas);
 8003274:	e7fe      	b.n	8003274 <allocate_btn_areas_and_controls+0x74>
    LV_ASSERT_MALLOC(btnm->ctrl_bits);
 8003276:	e7fe      	b.n	8003276 <allocate_btn_areas_and_controls+0x76>
    if(btnm->button_areas == NULL || btnm->ctrl_bits == NULL) btn_cnt = 0;
 8003278:	2500      	movs	r5, #0
 800327a:	e7f6      	b.n	800326a <allocate_btn_areas_and_controls+0x6a>
 800327c:	08029928 	.word	0x08029928

08003280 <lv_btnmatrix_create>:
{
 8003280:	b510      	push	{r4, lr}
 8003282:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8003284:	4803      	ldr	r0, [pc, #12]	@ (8003294 <lv_btnmatrix_create+0x14>)
 8003286:	f015 fbcd 	bl	8018a24 <lv_obj_class_create_obj>
 800328a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 800328c:	f015 fc69 	bl	8018b62 <lv_obj_class_init_obj>
}
 8003290:	4620      	mov	r0, r4
 8003292:	bd10      	pop	{r4, pc}
 8003294:	08029eb4 	.word	0x08029eb4

08003298 <lv_btnmatrix_set_map>:
    if(map == NULL) return;
 8003298:	2900      	cmp	r1, #0
 800329a:	f000 80ef 	beq.w	800347c <lv_btnmatrix_set_map+0x1e4>
{
 800329e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a2:	b08f      	sub	sp, #60	@ 0x3c
 80032a4:	4607      	mov	r7, r0
 80032a6:	468a      	mov	sl, r1
    allocate_btn_areas_and_controls(obj, map);
 80032a8:	f7ff ffaa 	bl	8003200 <allocate_btn_areas_and_controls>
    btnm->map_p = map;
 80032ac:	f8c7 a024 	str.w	sl, [r7, #36]	@ 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80032b0:	2216      	movs	r2, #22
 80032b2:	2100      	movs	r1, #0
 80032b4:	4638      	mov	r0, r7
 80032b6:	f019 fa1d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80032ba:	b2c3      	uxtb	r3, r0
 80032bc:	9306      	str	r3, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80032be:	2212      	movs	r2, #18
 80032c0:	2100      	movs	r1, #0
 80032c2:	4638      	mov	r0, r7
 80032c4:	f019 fa16 	bl	801c6f4 <lv_obj_get_style_prop>
 80032c8:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80032ca:	2210      	movs	r2, #16
 80032cc:	2100      	movs	r1, #0
 80032ce:	4638      	mov	r0, r7
 80032d0:	f019 fa10 	bl	801c6f4 <lv_obj_get_style_prop>
 80032d4:	900d      	str	r0, [sp, #52]	@ 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80032d6:	2214      	movs	r2, #20
 80032d8:	2100      	movs	r1, #0
 80032da:	4638      	mov	r0, r7
 80032dc:	f019 fa0a 	bl	801c6f4 <lv_obj_get_style_prop>
 80032e0:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
 80032e2:	b203      	sxth	r3, r0
 80032e4:	930c      	str	r3, [sp, #48]	@ 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80032e6:	2215      	movs	r2, #21
 80032e8:	2100      	movs	r1, #0
 80032ea:	4638      	mov	r0, r7
 80032ec:	f019 fa02 	bl	801c6f4 <lv_obj_get_style_prop>
 80032f0:	900b      	str	r0, [sp, #44]	@ 0x2c
    return (lv_coord_t)v.num;
 80032f2:	b203      	sxth	r3, r0
 80032f4:	9304      	str	r3, [sp, #16]
    lv_coord_t max_w            = lv_obj_get_content_width(obj);
 80032f6:	4638      	mov	r0, r7
 80032f8:	f016 fa04 	bl	8019704 <lv_obj_get_content_width>
 80032fc:	9009      	str	r0, [sp, #36]	@ 0x24
    lv_coord_t max_h            = lv_obj_get_content_height(obj);
 80032fe:	4638      	mov	r0, r7
 8003300:	f016 fa20 	bl	8019744 <lv_obj_get_content_height>
    lv_coord_t max_h_no_gap = max_h - (prow * (btnm->row_cnt - 1));
 8003304:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003306:	3b01      	subs	r3, #1
 8003308:	fb13 f304 	smulbb	r3, r3, r4
 800330c:	1ac3      	subs	r3, r0, r3
 800330e:	b21b      	sxth	r3, r3
 8003310:	930a      	str	r3, [sp, #40]	@ 0x28
    for(row = 0; row < btnm->row_cnt; row++) {
 8003312:	f04f 0e00 	mov.w	lr, #0
    uint32_t btn_tot_i = 0; /*Act. index of button areas*/
 8003316:	4676      	mov	r6, lr
    for(row = 0; row < btnm->row_cnt; row++) {
 8003318:	e023      	b.n	8003362 <lv_btnmatrix_set_map+0xca>
            unit_cnt += get_button_width(btnm->ctrl_bits[btn_tot_i + btn_cnt]);
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331c:	44b0      	add	r8, r6
 800331e:	f833 0018 	ldrh.w	r0, [r3, r8, lsl #1]
 8003322:	f7ff fb7f 	bl	8002a24 <get_button_width>
 8003326:	4420      	add	r0, r4
 8003328:	b284      	uxth	r4, r0
            btn_cnt++;
 800332a:	f109 0901 	add.w	r9, r9, #1
 800332e:	fa1f f989 	uxth.w	r9, r9
        while(map_row[btn_cnt] && strcmp(map_row[btn_cnt], "\n") != 0 && map_row[btn_cnt][0] != '\0') {
 8003332:	46c8      	mov	r8, r9
 8003334:	f85a 5029 	ldr.w	r5, [sl, r9, lsl #2]
 8003338:	b13d      	cbz	r5, 800334a <lv_btnmatrix_set_map+0xb2>
 800333a:	4951      	ldr	r1, [pc, #324]	@ (8003480 <lv_btnmatrix_set_map+0x1e8>)
 800333c:	4628      	mov	r0, r5
 800333e:	f7fc ff23 	bl	8000188 <strcmp>
 8003342:	b110      	cbz	r0, 800334a <lv_btnmatrix_set_map+0xb2>
 8003344:	782b      	ldrb	r3, [r5, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e7      	bne.n	800331a <lv_btnmatrix_set_map+0x82>
        if(btn_cnt == 0) {
 800334a:	4645      	mov	r5, r8
 800334c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003350:	46de      	mov	lr, fp
 8003352:	f1b9 0f00 	cmp.w	r9, #0
 8003356:	d10f      	bne.n	8003378 <lv_btnmatrix_set_map+0xe0>
            map_row = &map_row[btn_cnt + 1];       /*Set the map to the next row*/
 8003358:	3501      	adds	r5, #1
 800335a:	eb0a 0a85 	add.w	sl, sl, r5, lsl #2
    for(row = 0; row < btnm->row_cnt; row++) {
 800335e:	f10e 0e01 	add.w	lr, lr, #1
 8003362:	f8b7 8032 	ldrh.w	r8, [r7, #50]	@ 0x32
 8003366:	45f0      	cmp	r8, lr
 8003368:	d97f      	bls.n	800346a <lv_btnmatrix_set_map+0x1d2>
        uint16_t btn_cnt = 0;            /*Number of buttons in a row*/
 800336a:	f04f 0900 	mov.w	r9, #0
        uint16_t unit_cnt = 0;           /*Number of units in a row*/
 800336e:	464c      	mov	r4, r9
 8003370:	f8cd 8008 	str.w	r8, [sp, #8]
 8003374:	46f3      	mov	fp, lr
 8003376:	e7dc      	b.n	8003332 <lv_btnmatrix_set_map+0x9a>
        lv_coord_t row_y1 = ptop + (max_h_no_gap * row) / btnm->row_cnt + row * prow;
 8003378:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800337a:	fb0b f100 	mul.w	r1, fp, r0
 800337e:	fbb1 f1f8 	udiv	r1, r1, r8
 8003382:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8003386:	4419      	add	r1, r3
 8003388:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800338a:	fb12 f20b 	smulbb	r2, r2, fp
 800338e:	b292      	uxth	r2, r2
 8003390:	fa12 f181 	uxtah	r1, r2, r1
 8003394:	b209      	sxth	r1, r1
 8003396:	9102      	str	r1, [sp, #8]
        lv_coord_t row_y2 = ptop + (max_h_no_gap * (row + 1)) / btnm->row_cnt + row * prow - 1;
 8003398:	fb0b 0100 	mla	r1, fp, r0, r0
 800339c:	fbb1 f1f8 	udiv	r1, r1, r8
 80033a0:	eb03 0b01 	add.w	fp, r3, r1
 80033a4:	fa12 fb8b 	uxtah	fp, r2, fp
 80033a8:	fa1f fb8b 	uxth.w	fp, fp
 80033ac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80033b0:	fa0f f38b 	sxth.w	r3, fp
 80033b4:	9303      	str	r3, [sp, #12]
        lv_coord_t max_w_no_gap = max_w - (pcol * (btn_cnt - 1));
 80033b6:	f8bd c024 	ldrh.w	ip, [sp, #36]	@ 0x24
 80033ba:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80033be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033c0:	fb12 f203 	smulbb	r2, r2, r3
 80033c4:	ebac 0202 	sub.w	r2, ip, r2
 80033c8:	fa0f fb82 	sxth.w	fp, r2
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 80033cc:	f1bb 0f00 	cmp.w	fp, #0
 80033d0:	db08      	blt.n	80033e4 <lv_btnmatrix_set_map+0x14c>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 80033d2:	f04f 0800 	mov.w	r8, #0
        uint32_t row_unit_cnt = 0;  /*The current unit position in the row*/
 80033d6:	46c1      	mov	r9, r8
 80033d8:	f8cd e01c 	str.w	lr, [sp, #28]
 80033dc:	f8cd a020 	str.w	sl, [sp, #32]
 80033e0:	46e2      	mov	sl, ip
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 80033e2:	e013      	b.n	800340c <lv_btnmatrix_set_map+0x174>
        if(max_w_no_gap < 0) max_w_no_gap = 0;
 80033e4:	f04f 0b00 	mov.w	fp, #0
 80033e8:	e7f3      	b.n	80033d2 <lv_btnmatrix_set_map+0x13a>
            btn_x1 += pleft;
 80033ea:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80033ee:	4411      	add	r1, r2
            btn_x2 += pleft;
 80033f0:	4413      	add	r3, r2
            lv_area_set(&btnm->button_areas[btn_tot_i], btn_x1, row_y1, btn_x2, row_y2);
 80033f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f4:	9a03      	ldr	r2, [sp, #12]
 80033f6:	9200      	str	r2, [sp, #0]
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	9a02      	ldr	r2, [sp, #8]
 80033fc:	b209      	sxth	r1, r1
 80033fe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8003402:	f7fe fab8 	bl	8001976 <lv_area_set>
        for(btn = 0; btn < btn_cnt; btn++, btn_tot_i++, txt_tot_i++) {
 8003406:	f108 0801 	add.w	r8, r8, #1
 800340a:	3601      	adds	r6, #1
 800340c:	4545      	cmp	r5, r8
 800340e:	d924      	bls.n	800345a <lv_btnmatrix_set_map+0x1c2>
            uint32_t btn_u = get_button_width(btnm->ctrl_bits[btn_tot_i]);
 8003410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003412:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 8003416:	f7ff fb05 	bl	8002a24 <get_button_width>
            lv_coord_t btn_x1 = (max_w_no_gap * row_unit_cnt) / unit_cnt + btn * pcol;
 800341a:	fb09 f10b 	mul.w	r1, r9, fp
 800341e:	fbb1 f1f4 	udiv	r1, r1, r4
 8003422:	9b04      	ldr	r3, [sp, #16]
 8003424:	fb13 f308 	smulbb	r3, r3, r8
 8003428:	b29b      	uxth	r3, r3
 800342a:	4419      	add	r1, r3
 800342c:	fa1f fc81 	uxth.w	ip, r1
 8003430:	b209      	sxth	r1, r1
            lv_coord_t btn_x2 = (max_w_no_gap * (row_unit_cnt + btn_u)) / unit_cnt + btn * pcol - 1;
 8003432:	4481      	add	r9, r0
 8003434:	fb09 f00b 	mul.w	r0, r9, fp
 8003438:	fbb0 f0f4 	udiv	r0, r0, r4
 800343c:	4403      	add	r3, r0
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b298      	uxth	r0, r3
 8003444:	b21b      	sxth	r3, r3
            if(base_dir == LV_BASE_DIR_RTL) {
 8003446:	9a06      	ldr	r2, [sp, #24]
 8003448:	2a01      	cmp	r2, #1
 800344a:	d1ce      	bne.n	80033ea <lv_btnmatrix_set_map+0x152>
                btn_x1 = max_w - btn_x1;
 800344c:	ebaa 0000 	sub.w	r0, sl, r0
 8003450:	b201      	sxth	r1, r0
                btn_x2 = max_w - btn_x2;
 8003452:	ebaa 020c 	sub.w	r2, sl, ip
 8003456:	b213      	sxth	r3, r2
 8003458:	e7c7      	b.n	80033ea <lv_btnmatrix_set_map+0x152>
        map_row = &map_row[btn_cnt + 1];       /*Set the map to the next line*/
 800345a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800345e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003462:	3501      	adds	r5, #1
 8003464:	eb0a 0a85 	add.w	sl, sl, r5, lsl #2
 8003468:	e779      	b.n	800335e <lv_btnmatrix_set_map+0xc6>
    lv_obj_refresh_ext_draw_size(obj);
 800346a:	4638      	mov	r0, r7
 800346c:	f015 ff3e 	bl	80192ec <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8003470:	4638      	mov	r0, r7
 8003472:	f016 fd18 	bl	8019ea6 <lv_obj_invalidate>
}
 8003476:	b00f      	add	sp, #60	@ 0x3c
 8003478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	08029928 	.word	0x08029928

08003484 <lv_btnmatrix_constructor>:
{
 8003484:	b508      	push	{r3, lr}
 8003486:	4608      	mov	r0, r1
    btnm->btn_cnt        = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	860b      	strh	r3, [r1, #48]	@ 0x30
    btnm->row_cnt        = 0;
 800348c:	864b      	strh	r3, [r1, #50]	@ 0x32
    btnm->btn_id_sel     = LV_BTNMATRIX_BTN_NONE;
 800348e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003492:	868a      	strh	r2, [r1, #52]	@ 0x34
    btnm->button_areas   = NULL;
 8003494:	628b      	str	r3, [r1, #40]	@ 0x28
    btnm->ctrl_bits      = NULL;
 8003496:	62cb      	str	r3, [r1, #44]	@ 0x2c
    btnm->map_p          = NULL;
 8003498:	624b      	str	r3, [r1, #36]	@ 0x24
    btnm->one_check      = 0;
 800349a:	f891 2036 	ldrb.w	r2, [r1, #54]	@ 0x36
 800349e:	f363 0200 	bfi	r2, r3, #0, #1
 80034a2:	f881 2036 	strb.w	r2, [r1, #54]	@ 0x36
    lv_btnmatrix_set_map(obj, lv_btnmatrix_def_map);
 80034a6:	4902      	ldr	r1, [pc, #8]	@ (80034b0 <lv_btnmatrix_constructor+0x2c>)
 80034a8:	f7ff fef6 	bl	8003298 <lv_btnmatrix_set_map>
}
 80034ac:	bd08      	pop	{r3, pc}
 80034ae:	bf00      	nop
 80034b0:	20000004 	.word	0x20000004

080034b4 <lv_btnmatrix_set_ctrl_map>:
{
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4604      	mov	r4, r0
    lv_memcpy(btnm->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 80034b8:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80034ba:	0052      	lsls	r2, r2, #1
 80034bc:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80034be:	f013 fb13 	bl	8016ae8 <lv_memcpy>
    lv_btnmatrix_set_map(obj, btnm->map_p);
 80034c2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7ff fee7 	bl	8003298 <lv_btnmatrix_set_map>
}
 80034ca:	bd10      	pop	{r4, pc}

080034cc <lv_btnmatrix_set_selected_btn>:
{
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4604      	mov	r4, r0
 80034d0:	460d      	mov	r5, r1
    if(btn_id >= btnm->btn_cnt && btn_id != LV_BTNMATRIX_BTN_NONE) return;
 80034d2:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80034d4:	428b      	cmp	r3, r1
 80034d6:	d803      	bhi.n	80034e0 <lv_btnmatrix_set_selected_btn+0x14>
 80034d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034dc:	4299      	cmp	r1, r3
 80034de:	d108      	bne.n	80034f2 <lv_btnmatrix_set_selected_btn+0x26>
    invalidate_button_area(obj, btnm->btn_id_sel);
 80034e0:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fbe4 	bl	8002cb0 <invalidate_button_area>
    btnm->btn_id_sel = btn_id;
 80034e8:	86a5      	strh	r5, [r4, #52]	@ 0x34
    invalidate_button_area(obj, btn_id);
 80034ea:	4629      	mov	r1, r5
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff fbdf 	bl	8002cb0 <invalidate_button_area>
}
 80034f2:	bd38      	pop	{r3, r4, r5, pc}

080034f4 <lv_btnmatrix_clear_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 80034f4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80034f6:	428b      	cmp	r3, r1
 80034f8:	d924      	bls.n	8003544 <lv_btnmatrix_clear_btn_ctrl+0x50>
{
 80034fa:	b570      	push	{r4, r5, r6, lr}
 80034fc:	4605      	mov	r5, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	4616      	mov	r6, r2
    if(ctrl & LV_BTNMATRIX_CTRL_HIDDEN) {
 8003502:	f012 0f10 	tst.w	r2, #16
 8003506:	d10f      	bne.n	8003528 <lv_btnmatrix_clear_btn_ctrl+0x34>
    btnm->ctrl_bits[btn_id] &= (~ctrl);
 8003508:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 800350a:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
 800350e:	43f2      	mvns	r2, r6
 8003510:	b212      	sxth	r2, r2
 8003512:	4013      	ands	r3, r2
 8003514:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
    invalidate_button_area(obj, btn_id);
 8003518:	4621      	mov	r1, r4
 800351a:	4628      	mov	r0, r5
 800351c:	f7ff fbc8 	bl	8002cb0 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 8003520:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 8003524:	d10a      	bne.n	800353c <lv_btnmatrix_clear_btn_ctrl+0x48>
}
 8003526:	bd70      	pop	{r4, r5, r6, pc}
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) lv_obj_clear_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8003528:	2101      	movs	r1, #1
 800352a:	f014 ffb0 	bl	801848e <lv_obj_has_flag>
 800352e:	2800      	cmp	r0, #0
 8003530:	d0ea      	beq.n	8003508 <lv_btnmatrix_clear_btn_ctrl+0x14>
 8003532:	2101      	movs	r1, #1
 8003534:	4628      	mov	r0, r5
 8003536:	f014 ff53 	bl	80183e0 <lv_obj_clear_flag>
 800353a:	e7e5      	b.n	8003508 <lv_btnmatrix_clear_btn_ctrl+0x14>
        lv_obj_refresh_ext_draw_size(obj);
 800353c:	4628      	mov	r0, r5
 800353e:	f015 fed5 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 8003542:	e7f0      	b.n	8003526 <lv_btnmatrix_clear_btn_ctrl+0x32>
 8003544:	4770      	bx	lr

08003546 <lv_btnmatrix_clear_btn_ctrl_all>:
{
 8003546:	b570      	push	{r4, r5, r6, lr}
 8003548:	4605      	mov	r5, r0
 800354a:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 800354c:	2400      	movs	r4, #0
 800354e:	e006      	b.n	800355e <lv_btnmatrix_clear_btn_ctrl_all+0x18>
        lv_btnmatrix_clear_btn_ctrl(obj, i, ctrl);
 8003550:	4632      	mov	r2, r6
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f7ff ffcd 	bl	80034f4 <lv_btnmatrix_clear_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 800355a:	3401      	adds	r4, #1
 800355c:	b2a4      	uxth	r4, r4
 800355e:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8003560:	42a3      	cmp	r3, r4
 8003562:	d8f5      	bhi.n	8003550 <lv_btnmatrix_clear_btn_ctrl_all+0xa>
}
 8003564:	bd70      	pop	{r4, r5, r6, pc}

08003566 <lv_btnmatrix_set_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return;
 8003566:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003568:	428b      	cmp	r3, r1
 800356a:	d93e      	bls.n	80035ea <lv_btnmatrix_set_btn_ctrl+0x84>
{
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	460d      	mov	r5, r1
 8003572:	4616      	mov	r6, r2
    if(btnm->one_check && (ctrl & LV_BTNMATRIX_CTRL_CHECKED)) {
 8003574:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8003578:	f013 0f01 	tst.w	r3, #1
 800357c:	d002      	beq.n	8003584 <lv_btnmatrix_set_btn_ctrl+0x1e>
 800357e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003582:	d108      	bne.n	8003596 <lv_btnmatrix_set_btn_ctrl+0x30>
    if(ctrl & LV_BTNMATRIX_CTRL_HIDDEN) {
 8003584:	f016 0f10 	tst.w	r6, #16
 8003588:	d01d      	beq.n	80035c6 <lv_btnmatrix_set_btn_ctrl+0x60>
        if(btnm->btn_cnt > 1) {
 800358a:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 800358c:	2901      	cmp	r1, #1
 800358e:	d916      	bls.n	80035be <lv_btnmatrix_set_btn_ctrl+0x58>
            for(uint16_t btn_idx = 0; btn_idx < btnm->btn_cnt; btn_idx++) {
 8003590:	2300      	movs	r3, #0
        bool all_buttons_hidden = true;
 8003592:	2001      	movs	r0, #1
 8003594:	e006      	b.n	80035a4 <lv_btnmatrix_set_btn_ctrl+0x3e>
        lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 8003596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800359a:	f7ff ffd4 	bl	8003546 <lv_btnmatrix_clear_btn_ctrl_all>
 800359e:	e7f1      	b.n	8003584 <lv_btnmatrix_set_btn_ctrl+0x1e>
            for(uint16_t btn_idx = 0; btn_idx < btnm->btn_cnt; btn_idx++) {
 80035a0:	3301      	adds	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4299      	cmp	r1, r3
 80035a6:	d909      	bls.n	80035bc <lv_btnmatrix_set_btn_ctrl+0x56>
                if(btn_idx == btn_id) continue;
 80035a8:	42ab      	cmp	r3, r5
 80035aa:	d0f9      	beq.n	80035a0 <lv_btnmatrix_set_btn_ctrl+0x3a>
                if(!(btnm->ctrl_bits[btn_idx] & LV_BTNMATRIX_CTRL_HIDDEN)) all_buttons_hidden = false;
 80035ac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80035ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80035b2:	f012 0f10 	tst.w	r2, #16
 80035b6:	d1f3      	bne.n	80035a0 <lv_btnmatrix_set_btn_ctrl+0x3a>
 80035b8:	2000      	movs	r0, #0
 80035ba:	e7f1      	b.n	80035a0 <lv_btnmatrix_set_btn_ctrl+0x3a>
        if(all_buttons_hidden) lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 80035bc:	b118      	cbz	r0, 80035c6 <lv_btnmatrix_set_btn_ctrl+0x60>
 80035be:	2101      	movs	r1, #1
 80035c0:	4620      	mov	r0, r4
 80035c2:	f015 f99d 	bl	8018900 <lv_obj_add_flag>
    btnm->ctrl_bits[btn_id] |= ctrl;
 80035c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80035c8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80035cc:	4333      	orrs	r3, r6
 80035ce:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
    invalidate_button_area(obj, btn_id);
 80035d2:	4629      	mov	r1, r5
 80035d4:	4620      	mov	r0, r4
 80035d6:	f7ff fb6b 	bl	8002cb0 <invalidate_button_area>
    if(ctrl & LV_BTNMATRIX_CTRL_POPOVER) {
 80035da:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 80035de:	d100      	bne.n	80035e2 <lv_btnmatrix_set_btn_ctrl+0x7c>
}
 80035e0:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_refresh_ext_draw_size(obj);
 80035e2:	4620      	mov	r0, r4
 80035e4:	f015 fe82 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 80035e8:	e7fa      	b.n	80035e0 <lv_btnmatrix_set_btn_ctrl+0x7a>
 80035ea:	4770      	bx	lr

080035ec <lv_btnmatrix_set_btn_ctrl_all>:
{
 80035ec:	b570      	push	{r4, r5, r6, lr}
 80035ee:	4605      	mov	r5, r0
 80035f0:	460e      	mov	r6, r1
    for(i = 0; i < btnm->btn_cnt; i++) {
 80035f2:	2400      	movs	r4, #0
 80035f4:	e006      	b.n	8003604 <lv_btnmatrix_set_btn_ctrl_all+0x18>
        lv_btnmatrix_set_btn_ctrl(obj, i, ctrl);
 80035f6:	4632      	mov	r2, r6
 80035f8:	4621      	mov	r1, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7ff ffb3 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < btnm->btn_cnt; i++) {
 8003600:	3401      	adds	r4, #1
 8003602:	b2a4      	uxth	r4, r4
 8003604:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8003606:	42a3      	cmp	r3, r4
 8003608:	d8f5      	bhi.n	80035f6 <lv_btnmatrix_set_btn_ctrl_all+0xa>
}
 800360a:	bd70      	pop	{r4, r5, r6, pc}

0800360c <lv_btnmatrix_get_selected_btn>:
}
 800360c:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 800360e:	4770      	bx	lr

08003610 <lv_btnmatrix_get_btn_text>:
{
 8003610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 8003614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003618:	4299      	cmp	r1, r3
 800361a:	d023      	beq.n	8003664 <lv_btnmatrix_get_btn_text+0x54>
 800361c:	4680      	mov	r8, r0
 800361e:	460f      	mov	r7, r1
    if(btn_id > btnm->btn_cnt) return NULL;
 8003620:	f8b0 9030 	ldrh.w	r9, [r0, #48]	@ 0x30
 8003624:	4589      	cmp	r9, r1
 8003626:	d31f      	bcc.n	8003668 <lv_btnmatrix_get_btn_text+0x58>
    uint16_t btn_i = 0;
 8003628:	2500      	movs	r5, #0
    uint16_t txt_i = 0;
 800362a:	462e      	mov	r6, r5
 800362c:	e000      	b.n	8003630 <lv_btnmatrix_get_btn_text+0x20>
{
 800362e:	4626      	mov	r6, r4
    while(btn_i != btn_id) {
 8003630:	42bd      	cmp	r5, r7
 8003632:	d00f      	beq.n	8003654 <lv_btnmatrix_get_btn_text+0x44>
        btn_i++;
 8003634:	3501      	adds	r5, #1
 8003636:	b2ad      	uxth	r5, r5
        txt_i++;
 8003638:	1c74      	adds	r4, r6, #1
 800363a:	b2a4      	uxth	r4, r4
        if(strcmp(btnm->map_p[txt_i], "\n") == 0) txt_i++;
 800363c:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8003640:	490b      	ldr	r1, [pc, #44]	@ (8003670 <lv_btnmatrix_get_btn_text+0x60>)
 8003642:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003646:	f7fc fd9f 	bl	8000188 <strcmp>
 800364a:	2800      	cmp	r0, #0
 800364c:	d1ef      	bne.n	800362e <lv_btnmatrix_get_btn_text+0x1e>
 800364e:	1cb4      	adds	r4, r6, #2
 8003650:	b2a4      	uxth	r4, r4
 8003652:	e7ec      	b.n	800362e <lv_btnmatrix_get_btn_text+0x1e>
    if(btn_i == btnm->btn_cnt) return NULL;
 8003654:	45a9      	cmp	r9, r5
 8003656:	d009      	beq.n	800366c <lv_btnmatrix_get_btn_text+0x5c>
    return btnm->map_p[txt_i];
 8003658:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800365c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
}
 8003660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return NULL;
 8003664:	2000      	movs	r0, #0
 8003666:	e7fb      	b.n	8003660 <lv_btnmatrix_get_btn_text+0x50>
    if(btn_id > btnm->btn_cnt) return NULL;
 8003668:	2000      	movs	r0, #0
 800366a:	e7f9      	b.n	8003660 <lv_btnmatrix_get_btn_text+0x50>
    if(btn_i == btnm->btn_cnt) return NULL;
 800366c:	2000      	movs	r0, #0
 800366e:	e7f7      	b.n	8003660 <lv_btnmatrix_get_btn_text+0x50>
 8003670:	08029928 	.word	0x08029928

08003674 <lv_btnmatrix_has_btn_ctrl>:
    if(btn_id >= btnm->btn_cnt) return false;
 8003674:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8003676:	428b      	cmp	r3, r1
 8003678:	d907      	bls.n	800368a <lv_btnmatrix_has_btn_ctrl+0x16>
    return ((btnm->ctrl_bits[btn_id] & ctrl) == ctrl) ? true : false;
 800367a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800367c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003680:	439a      	bics	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2001      	moveq	r0, #1
 8003686:	2000      	movne	r0, #0
 8003688:	4770      	bx	lr
    if(btn_id >= btnm->btn_cnt) return false;
 800368a:	2000      	movs	r0, #0
}
 800368c:	4770      	bx	lr

0800368e <make_one_button_checked>:
{
 800368e:	b570      	push	{r4, r5, r6, lr}
 8003690:	4604      	mov	r4, r0
 8003692:	460e      	mov	r6, r1
    bool was_toggled = lv_btnmatrix_has_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 8003694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003698:	f7ff ffec 	bl	8003674 <lv_btnmatrix_has_btn_ctrl>
 800369c:	4605      	mov	r5, r0
    lv_btnmatrix_clear_btn_ctrl_all(obj, LV_BTNMATRIX_CTRL_CHECKED);
 800369e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff ff4f 	bl	8003546 <lv_btnmatrix_clear_btn_ctrl_all>
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80036a8:	b905      	cbnz	r5, 80036ac <make_one_button_checked+0x1e>
}
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
    if(was_toggled) lv_btnmatrix_set_btn_ctrl(obj, btn_idx, LV_BTNMATRIX_CTRL_CHECKED);
 80036ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b0:	4631      	mov	r1, r6
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff ff57 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
}
 80036b8:	e7f7      	b.n	80036aa <make_one_button_checked+0x1c>
	...

080036bc <lv_btnmatrix_event>:
{
 80036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c0:	b083      	sub	sp, #12
 80036c2:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80036c4:	48c3      	ldr	r0, [pc, #780]	@ (80039d4 <lv_btnmatrix_event+0x318>)
 80036c6:	f00d fa55 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80036ca:	2801      	cmp	r0, #1
 80036cc:	d002      	beq.n	80036d4 <lv_btnmatrix_event+0x18>
}
 80036ce:	b003      	add	sp, #12
 80036d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80036d4:	4628      	mov	r0, r5
 80036d6:	f00d fb25 	bl	8010d24 <lv_event_get_code>
 80036da:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80036dc:	4628      	mov	r0, r5
 80036de:	f00d fb1d 	bl	8010d1c <lv_event_get_target>
 80036e2:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 80036e4:	2c13      	cmp	r4, #19
 80036e6:	d059      	beq.n	800379c <lv_btnmatrix_event+0xe0>
    if(code == LV_EVENT_STYLE_CHANGED) {
 80036e8:	3c01      	subs	r4, #1
 80036ea:	2c29      	cmp	r4, #41	@ 0x29
 80036ec:	d8ef      	bhi.n	80036ce <lv_btnmatrix_event+0x12>
 80036ee:	a301      	add	r3, pc, #4	@ (adr r3, 80036f4 <lv_btnmatrix_event+0x38>)
 80036f0:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 80036f4:	080037d7 	.word	0x080037d7
 80036f8:	08003889 	.word	0x08003889
 80036fc:	08003a1d 	.word	0x08003a1d
 8003700:	080036cf 	.word	0x080036cf
 8003704:	080036cf 	.word	0x080036cf
 8003708:	080039d9 	.word	0x080039d9
 800370c:	080036cf 	.word	0x080036cf
 8003710:	08003937 	.word	0x08003937
 8003714:	080036cf 	.word	0x080036cf
 8003718:	080036cf 	.word	0x080036cf
 800371c:	080036cf 	.word	0x080036cf
 8003720:	080036cf 	.word	0x080036cf
 8003724:	08003af1 	.word	0x08003af1
 8003728:	08003a2d 	.word	0x08003a2d
 800372c:	08003ad7 	.word	0x08003ad7
 8003730:	08003ad7 	.word	0x08003ad7
 8003734:	080036cf 	.word	0x080036cf
 8003738:	080036cf 	.word	0x080036cf
 800373c:	080036cf 	.word	0x080036cf
 8003740:	080036cf 	.word	0x080036cf
 8003744:	08003d55 	.word	0x08003d55
 8003748:	080036cf 	.word	0x080036cf
 800374c:	080036cf 	.word	0x080036cf
 8003750:	080036cf 	.word	0x080036cf
 8003754:	080036cf 	.word	0x080036cf
 8003758:	080036cf 	.word	0x080036cf
 800375c:	080036cf 	.word	0x080036cf
 8003760:	080036cf 	.word	0x080036cf
 8003764:	080036cf 	.word	0x080036cf
 8003768:	080036cf 	.word	0x080036cf
 800376c:	080036cf 	.word	0x080036cf
 8003770:	080036cf 	.word	0x080036cf
 8003774:	080036cf 	.word	0x080036cf
 8003778:	080036cf 	.word	0x080036cf
 800377c:	080036cf 	.word	0x080036cf
 8003780:	080036cf 	.word	0x080036cf
 8003784:	080036cf 	.word	0x080036cf
 8003788:	080036cf 	.word	0x080036cf
 800378c:	080036cf 	.word	0x080036cf
 8003790:	080036cf 	.word	0x080036cf
 8003794:	080037cd 	.word	0x080037cd
 8003798:	080037c3 	.word	0x080037c3
        if(has_popovers_in_top_row(obj)) {
 800379c:	f7ff f962 	bl	8002a64 <has_popovers_in_top_row>
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d0a1      	beq.n	80036e8 <lv_btnmatrix_event+0x2c>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 80037a4:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80037a6:	b923      	cbnz	r3, 80037b2 <lv_btnmatrix_event+0xf6>
 80037a8:	2100      	movs	r1, #0
            lv_event_set_ext_draw_size(e, s);
 80037aa:	4628      	mov	r0, r5
 80037ac:	f00d fb40 	bl	8010e30 <lv_event_set_ext_draw_size>
 80037b0:	e79a      	b.n	80036e8 <lv_btnmatrix_event+0x2c>
            lv_coord_t s = btnm->row_cnt > 0 ? lv_obj_get_content_height(obj) / btnm->row_cnt : 0;
 80037b2:	4630      	mov	r0, r6
 80037b4:	f015 ffc6 	bl	8019744 <lv_obj_get_content_height>
 80037b8:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80037ba:	fb90 f1f3 	sdiv	r1, r0, r3
 80037be:	b209      	sxth	r1, r1
 80037c0:	e7f3      	b.n	80037aa <lv_btnmatrix_event+0xee>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80037c2:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80037c4:	4630      	mov	r0, r6
 80037c6:	f7ff fd67 	bl	8003298 <lv_btnmatrix_set_map>
 80037ca:	e780      	b.n	80036ce <lv_btnmatrix_event+0x12>
        lv_btnmatrix_set_map(obj, btnm->map_p);
 80037cc:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80037ce:	4630      	mov	r0, r6
 80037d0:	f7ff fd62 	bl	8003298 <lv_btnmatrix_set_map>
 80037d4:	e77b      	b.n	80036ce <lv_btnmatrix_event+0x12>
        void * param = lv_event_get_param(e);
 80037d6:	4628      	mov	r0, r5
 80037d8:	f00d faa8 	bl	8010d2c <lv_event_get_param>
 80037dc:	4604      	mov	r4, r0
        invalidate_button_area(obj, btnm->btn_id_sel);
 80037de:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 80037e0:	4630      	mov	r0, r6
 80037e2:	f7ff fa65 	bl	8002cb0 <invalidate_button_area>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80037e6:	f010 ffc3 	bl	8014770 <lv_indev_get_act>
 80037ea:	f010 ffc7 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 80037ee:	2801      	cmp	r0, #1
 80037f0:	d029      	beq.n	8003846 <lv_btnmatrix_event+0x18a>
 80037f2:	2803      	cmp	r0, #3
 80037f4:	d027      	beq.n	8003846 <lv_btnmatrix_event+0x18a>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80037f6:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 80037f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fc:	429c      	cmp	r4, r3
 80037fe:	f43f af66 	beq.w	80036ce <lv_btnmatrix_event+0x12>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003802:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003804:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003808:	4628      	mov	r0, r5
 800380a:	f7ff f91c 	bl	8002a46 <button_is_click_trig>
 800380e:	2800      	cmp	r0, #0
 8003810:	f47f af5d 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003814:	4628      	mov	r0, r5
 8003816:	f7ff f919 	bl	8002a4c <button_is_popover>
            if(button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 800381a:	2800      	cmp	r0, #0
 800381c:	f47f af57 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003820:	4628      	mov	r0, r5
 8003822:	f7ff f90d 	bl	8002a40 <button_is_inactive>
               button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003826:	2800      	cmp	r0, #0
 8003828:	f47f af51 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff f8fe 	bl	8002a2e <button_is_hidden>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003832:	2800      	cmp	r0, #0
 8003834:	f47f af4b 	bne.w	80036ce <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 8003838:	9400      	str	r4, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 800383a:	466a      	mov	r2, sp
 800383c:	211c      	movs	r1, #28
 800383e:	4630      	mov	r0, r6
 8003840:	f00d fa42 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8003844:	e743      	b.n	80036ce <lv_btnmatrix_event+0x12>
            lv_indev_get_point(param, &p);
 8003846:	a901      	add	r1, sp, #4
 8003848:	4620      	mov	r0, r4
 800384a:	f011 f808 	bl	801485e <lv_indev_get_point>
            btn_pr = get_button_from_point(obj, &p);
 800384e:	a901      	add	r1, sp, #4
 8003850:	4630      	mov	r0, r6
 8003852:	f7ff f92f 	bl	8002ab4 <get_button_from_point>
 8003856:	4604      	mov	r4, r0
            btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003858:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800385c:	86b3      	strh	r3, [r6, #52]	@ 0x34
            if(btn_pr != LV_BTNMATRIX_BTN_NONE) {
 800385e:	4298      	cmp	r0, r3
 8003860:	d0c9      	beq.n	80037f6 <lv_btnmatrix_event+0x13a>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8003862:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003864:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
 8003868:	4628      	mov	r0, r5
 800386a:	f7ff f8e9 	bl	8002a40 <button_is_inactive>
 800386e:	2800      	cmp	r0, #0
 8003870:	d1c1      	bne.n	80037f6 <lv_btnmatrix_event+0x13a>
                   button_is_hidden(btnm->ctrl_bits[btn_pr]) == false) {
 8003872:	4628      	mov	r0, r5
 8003874:	f7ff f8db 	bl	8002a2e <button_is_hidden>
                if(button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 8003878:	2800      	cmp	r0, #0
 800387a:	d1bc      	bne.n	80037f6 <lv_btnmatrix_event+0x13a>
                    btnm->btn_id_sel = btn_pr;
 800387c:	86b4      	strh	r4, [r6, #52]	@ 0x34
                    invalidate_button_area(obj, btnm->btn_id_sel); /*Invalidate the new area*/
 800387e:	4621      	mov	r1, r4
 8003880:	4630      	mov	r0, r6
 8003882:	f7ff fa15 	bl	8002cb0 <invalidate_button_area>
 8003886:	e7b6      	b.n	80037f6 <lv_btnmatrix_event+0x13a>
        void * param = lv_event_get_param(e);
 8003888:	4628      	mov	r0, r5
 800388a:	f00d fa4f 	bl	8010d2c <lv_event_get_param>
 800388e:	4605      	mov	r5, r0
        lv_indev_t * indev = lv_indev_get_act();
 8003890:	f010 ff6e 	bl	8014770 <lv_indev_get_act>
 8003894:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003896:	f010 ff71 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) return;
 800389a:	2804      	cmp	r0, #4
 800389c:	f43f af17 	beq.w	80036ce <lv_btnmatrix_event+0x12>
 80038a0:	2802      	cmp	r0, #2
 80038a2:	f43f af14 	beq.w	80036ce <lv_btnmatrix_event+0x12>
        lv_indev_get_point(indev, &p);
 80038a6:	a901      	add	r1, sp, #4
 80038a8:	4620      	mov	r0, r4
 80038aa:	f010 ffd8 	bl	801485e <lv_indev_get_point>
        btn_pr = get_button_from_point(obj, &p);
 80038ae:	a901      	add	r1, sp, #4
 80038b0:	4630      	mov	r0, r6
 80038b2:	f7ff f8ff 	bl	8002ab4 <get_button_from_point>
 80038b6:	4604      	mov	r4, r0
        if(btn_pr != btnm->btn_id_sel) {
 80038b8:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 80038ba:	4281      	cmp	r1, r0
 80038bc:	f43f af07 	beq.w	80036ce <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80038c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038c4:	4299      	cmp	r1, r3
 80038c6:	d132      	bne.n	800392e <lv_btnmatrix_event+0x272>
            btnm->btn_id_sel = btn_pr;
 80038c8:	86b4      	strh	r4, [r6, #52]	@ 0x34
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 80038ca:	4628      	mov	r0, r5
 80038cc:	f010 ffba 	bl	8014844 <lv_indev_reset_long_press>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 80038d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d4:	429c      	cmp	r4, r3
 80038d6:	f43f aefa 	beq.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80038da:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80038dc:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 80038e0:	4628      	mov	r0, r5
 80038e2:	f7ff f8ad 	bl	8002a40 <button_is_inactive>
            if(btn_pr != LV_BTNMATRIX_BTN_NONE &&
 80038e6:	2800      	cmp	r0, #0
 80038e8:	f47f aef1 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_hidden(btnm->ctrl_bits[btn_pr]) == false) {
 80038ec:	4628      	mov	r0, r5
 80038ee:	f7ff f89e 	bl	8002a2e <button_is_hidden>
               button_is_inactive(btnm->ctrl_bits[btn_pr]) == false &&
 80038f2:	2800      	cmp	r0, #0
 80038f4:	f47f aeeb 	bne.w	80036ce <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btn_pr);
 80038f8:	4621      	mov	r1, r4
 80038fa:	4630      	mov	r0, r6
 80038fc:	f7ff f9d8 	bl	8002cb0 <invalidate_button_area>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 8003900:	6af5      	ldr	r5, [r6, #44]	@ 0x2c
 8003902:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 8003906:	f7ff f89e 	bl	8002a46 <button_is_click_trig>
 800390a:	2800      	cmp	r0, #0
 800390c:	f47f aedf 	bne.w	80036ce <lv_btnmatrix_event+0x12>
                   button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 8003910:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003912:	f835 0013 	ldrh.w	r0, [r5, r3, lsl #1]
 8003916:	f7ff f899 	bl	8002a4c <button_is_popover>
                if(button_is_click_trig(btnm->ctrl_bits[btn_pr]) == false &&
 800391a:	2800      	cmp	r0, #0
 800391c:	f47f aed7 	bne.w	80036ce <lv_btnmatrix_event+0x12>
                    uint32_t b = btn_pr;
 8003920:	9400      	str	r4, [sp, #0]
                    res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8003922:	466a      	mov	r2, sp
 8003924:	211c      	movs	r1, #28
 8003926:	4630      	mov	r0, r6
 8003928:	f00d f9ce 	bl	8010cc8 <lv_event_send>
                    if(res != LV_RES_OK) return;
 800392c:	e6cf      	b.n	80036ce <lv_btnmatrix_event+0x12>
                invalidate_button_area(obj, btnm->btn_id_sel);
 800392e:	4630      	mov	r0, r6
 8003930:	f7ff f9be 	bl	8002cb0 <invalidate_button_area>
 8003934:	e7c8      	b.n	80038c8 <lv_btnmatrix_event+0x20c>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 8003936:	8eb7      	ldrh	r7, [r6, #52]	@ 0x34
 8003938:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800393c:	429f      	cmp	r7, r3
 800393e:	d035      	beq.n	80039ac <lv_btnmatrix_event+0x2f0>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 8003940:	6af5      	ldr	r5, [r6, #44]	@ 0x2c
 8003942:	f835 4017 	ldrh.w	r4, [r5, r7, lsl #1]
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff f883 	bl	8002a52 <button_is_checkable>
 800394c:	b1d0      	cbz	r0, 8003984 <lv_btnmatrix_event+0x2c8>
               !button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff f876 	bl	8002a40 <button_is_inactive>
            if(button_is_checkable(btnm->ctrl_bits[btnm->btn_id_sel]) &&
 8003954:	b9b0      	cbnz	r0, 8003984 <lv_btnmatrix_event+0x2c8>
                if(button_get_checked(btnm->ctrl_bits[btnm->btn_id_sel]) && !btnm->one_check) {
 8003956:	4620      	mov	r0, r4
 8003958:	f7ff f87e 	bl	8002a58 <button_get_checked>
 800395c:	b148      	cbz	r0, 8003972 <lv_btnmatrix_event+0x2b6>
 800395e:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 8003962:	f013 0f01 	tst.w	r3, #1
 8003966:	d104      	bne.n	8003972 <lv_btnmatrix_event+0x2b6>
                    btnm->ctrl_bits[btnm->btn_id_sel] &= (~LV_BTNMATRIX_CTRL_CHECKED);
 8003968:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 800396c:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
 8003970:	e003      	b.n	800397a <lv_btnmatrix_event+0x2be>
                    btnm->ctrl_bits[btnm->btn_id_sel] |= LV_BTNMATRIX_CTRL_CHECKED;
 8003972:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 8003976:	f825 4017 	strh.w	r4, [r5, r7, lsl #1]
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 800397a:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 800397e:	f013 0f01 	tst.w	r3, #1
 8003982:	d118      	bne.n	80039b6 <lv_btnmatrix_event+0x2fa>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 8003984:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003986:	8eb5      	ldrh	r5, [r6, #52]	@ 0x34
 8003988:	f833 4015 	ldrh.w	r4, [r3, r5, lsl #1]
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff f85a 	bl	8002a46 <button_is_click_trig>
 8003992:	b918      	cbnz	r0, 800399c <lv_btnmatrix_event+0x2e0>
                button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == true) &&
 8003994:	4620      	mov	r0, r4
 8003996:	f7ff f859 	bl	8002a4c <button_is_popover>
            if((button_is_click_trig(btnm->ctrl_bits[btnm->btn_id_sel]) == true ||
 800399a:	b138      	cbz	r0, 80039ac <lv_btnmatrix_event+0x2f0>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff f84f 	bl	8002a40 <button_is_inactive>
                button_is_popover(btnm->ctrl_bits[btnm->btn_id_sel]) == true) &&
 80039a2:	b918      	cbnz	r0, 80039ac <lv_btnmatrix_event+0x2f0>
               button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff f842 	bl	8002a2e <button_is_hidden>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80039aa:	b148      	cbz	r0, 80039c0 <lv_btnmatrix_event+0x304>
        invalidate_button_area(obj, btnm->btn_id_sel);
 80039ac:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 80039ae:	4630      	mov	r0, r6
 80039b0:	f7ff f97e 	bl	8002cb0 <invalidate_button_area>
 80039b4:	e68b      	b.n	80036ce <lv_btnmatrix_event+0x12>
                if(btnm->one_check) make_one_button_checked(obj, btnm->btn_id_sel);
 80039b6:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 80039b8:	4630      	mov	r0, r6
 80039ba:	f7ff fe68 	bl	800368e <make_one_button_checked>
 80039be:	e7e1      	b.n	8003984 <lv_btnmatrix_event+0x2c8>
                uint32_t b = btnm->btn_id_sel;
 80039c0:	9500      	str	r5, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 80039c2:	466a      	mov	r2, sp
 80039c4:	211c      	movs	r1, #28
 80039c6:	4630      	mov	r0, r6
 80039c8:	f00d f97e 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 80039cc:	2801      	cmp	r0, #1
 80039ce:	f47f ae7e 	bne.w	80036ce <lv_btnmatrix_event+0x12>
 80039d2:	e7eb      	b.n	80039ac <lv_btnmatrix_event+0x2f0>
 80039d4:	08029eb4 	.word	0x08029eb4
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) {
 80039d8:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 80039da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039de:	429c      	cmp	r4, r3
 80039e0:	f43f ae75 	beq.w	80036ce <lv_btnmatrix_event+0x12>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80039e4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80039e6:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7ff f825 	bl	8002a3a <button_is_repeat_disabled>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	f47f ae6c 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80039f6:	4628      	mov	r0, r5
 80039f8:	f7ff f822 	bl	8002a40 <button_is_inactive>
            if(button_is_repeat_disabled(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f47f ae66 	bne.w	80036ce <lv_btnmatrix_event+0x12>
               button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) == false) {
 8003a02:	4628      	mov	r0, r5
 8003a04:	f7ff f813 	bl	8002a2e <button_is_hidden>
               button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel]) == false &&
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f47f ae60 	bne.w	80036ce <lv_btnmatrix_event+0x12>
                uint32_t b = btnm->btn_id_sel;
 8003a0e:	9400      	str	r4, [sp, #0]
                res        = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &b);
 8003a10:	466a      	mov	r2, sp
 8003a12:	211c      	movs	r1, #28
 8003a14:	4630      	mov	r0, r6
 8003a16:	f00d f957 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8003a1a:	e658      	b.n	80036ce <lv_btnmatrix_event+0x12>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8003a1c:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f7ff f946 	bl	8002cb0 <invalidate_button_area>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a28:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003a2a:	e650      	b.n	80036ce <lv_btnmatrix_event+0x12>
        if(btnm->btn_cnt == 0) return;
 8003a2c:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f43f ae4d 	beq.w	80036ce <lv_btnmatrix_event+0x12>
        lv_indev_t * indev = lv_event_get_param(e);
 8003a34:	4628      	mov	r0, r5
 8003a36:	f00d f979 	bl	8010d2c <lv_event_get_param>
 8003a3a:	4605      	mov	r5, r0
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8003a3c:	f010 fe9e 	bl	801477c <lv_indev_get_type>
 8003a40:	4604      	mov	r4, r0
        if(indev == NULL) {
 8003a42:	b195      	cbz	r5, 8003a6a <lv_btnmatrix_event+0x3ae>
        bool editing = lv_group_get_editing(lv_obj_get_group(obj));
 8003a44:	4630      	mov	r0, r6
 8003a46:	f014 fd36 	bl	80184b6 <lv_obj_get_group>
 8003a4a:	f00f fb35 	bl	80130b8 <lv_group_get_editing>
        if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8003a4e:	8eb2      	ldrh	r2, [r6, #52]	@ 0x34
 8003a50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f47f ae3a 	bne.w	80036ce <lv_btnmatrix_event+0x12>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8003a5a:	2c02      	cmp	r4, #2
 8003a5c:	d00e      	beq.n	8003a7c <lv_btnmatrix_event+0x3c0>
 8003a5e:	2c04      	cmp	r4, #4
 8003a60:	d00a      	beq.n	8003a78 <lv_btnmatrix_event+0x3bc>
                btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003a62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a66:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003a68:	e631      	b.n	80036ce <lv_btnmatrix_event+0x12>
            indev = lv_indev_get_next(NULL);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f00f fc64 	bl	8013338 <lv_indev_get_next>
            indev_type = lv_indev_get_type(indev);
 8003a70:	f010 fe84 	bl	801477c <lv_indev_get_type>
 8003a74:	4604      	mov	r4, r0
 8003a76:	e7e5      	b.n	8003a44 <lv_btnmatrix_event+0x388>
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	d0f2      	beq.n	8003a62 <lv_btnmatrix_event+0x3a6>
                if(btnm->one_check) {
 8003a7c:	f896 3036 	ldrb.w	r3, [r6, #54]	@ 0x36
 8003a80:	f013 0f01 	tst.w	r3, #1
 8003a84:	d116      	bne.n	8003ab4 <lv_btnmatrix_event+0x3f8>
                uint32_t b = 0;
 8003a86:	2400      	movs	r4, #0
 8003a88:	e017      	b.n	8003aba <lv_btnmatrix_event+0x3fe>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 8003a8a:	3401      	adds	r4, #1
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 8003a8c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003a8e:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003a92:	4628      	mov	r0, r5
 8003a94:	f7fe ffcb 	bl	8002a2e <button_is_hidden>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	d1f6      	bne.n	8003a8a <lv_btnmatrix_event+0x3ce>
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7fe ffcf 	bl	8002a40 <button_is_inactive>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d1f1      	bne.n	8003a8a <lv_btnmatrix_event+0x3ce>
                          button_is_checked(btnm->ctrl_bits[b]) == false) b++;
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f7fe ffc4 	bl	8002a34 <button_is_checked>
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b]) ||
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0ec      	beq.n	8003a8a <lv_btnmatrix_event+0x3ce>
                btnm->btn_id_sel = b;
 8003ab0:	86b4      	strh	r4, [r6, #52]	@ 0x34
            if(indev_type == LV_INDEV_TYPE_KEYPAD || (indev_type == LV_INDEV_TYPE_ENCODER && editing)) {
 8003ab2:	e60c      	b.n	80036ce <lv_btnmatrix_event+0x12>
                uint32_t b = 0;
 8003ab4:	2400      	movs	r4, #0
 8003ab6:	e7e9      	b.n	8003a8c <lv_btnmatrix_event+0x3d0>
                    while(button_is_hidden(btnm->ctrl_bits[b]) || button_is_inactive(btnm->ctrl_bits[b])) b++;
 8003ab8:	3401      	adds	r4, #1
 8003aba:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003abc:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	f7fe ffb4 	bl	8002a2e <button_is_hidden>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d1f6      	bne.n	8003ab8 <lv_btnmatrix_event+0x3fc>
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7fe ffb8 	bl	8002a40 <button_is_inactive>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d1f1      	bne.n	8003ab8 <lv_btnmatrix_event+0x3fc>
 8003ad4:	e7ec      	b.n	8003ab0 <lv_btnmatrix_event+0x3f4>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 8003ad6:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 8003ad8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003adc:	4299      	cmp	r1, r3
 8003ade:	d103      	bne.n	8003ae8 <lv_btnmatrix_event+0x42c>
        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ae4:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003ae6:	e5f2      	b.n	80036ce <lv_btnmatrix_event+0x12>
        if(btnm->btn_id_sel != LV_BTNMATRIX_BTN_NONE) invalidate_button_area(obj, btnm->btn_id_sel);
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7ff f8e1 	bl	8002cb0 <invalidate_button_area>
 8003aee:	e7f7      	b.n	8003ae0 <lv_btnmatrix_event+0x424>
        invalidate_button_area(obj, btnm->btn_id_sel);
 8003af0:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 8003af2:	4630      	mov	r0, r6
 8003af4:	f7ff f8dc 	bl	8002cb0 <invalidate_button_area>
        char c = *((char *)lv_event_get_param(e));
 8003af8:	4628      	mov	r0, r5
 8003afa:	f00d f917 	bl	8010d2c <lv_event_get_param>
 8003afe:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8003b00:	3b11      	subs	r3, #17
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d832      	bhi.n	8003b6c <lv_btnmatrix_event+0x4b0>
 8003b06:	e8df f003 	tbb	[pc, r3]
 8003b0a:	65c5      	.short	0x65c5
 8003b0c:	3602      	.short	0x3602
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8003b0e:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00a      	beq.n	8003b2e <lv_btnmatrix_event+0x472>
            else btnm->btn_id_sel++;
 8003b18:	3301      	adds	r3, #1
 8003b1a:	86b3      	strh	r3, [r6, #52]	@ 0x34
            if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8003b1c:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003b1e:	8e37      	ldrh	r7, [r6, #48]	@ 0x30
 8003b20:	42bb      	cmp	r3, r7
 8003b22:	d301      	bcc.n	8003b28 <lv_btnmatrix_event+0x46c>
 8003b24:	2300      	movs	r3, #0
 8003b26:	86b3      	strh	r3, [r6, #52]	@ 0x34
            uint16_t btn_id_start = btnm->btn_id_sel;
 8003b28:	f8b6 8034 	ldrh.w	r8, [r6, #52]	@ 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003b2c:	e00c      	b.n	8003b48 <lv_btnmatrix_event+0x48c>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE)  btnm->btn_id_sel = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003b32:	e7f3      	b.n	8003b1c <lv_btnmatrix_event+0x460>
                btnm->btn_id_sel++;
 8003b34:	3401      	adds	r4, #1
 8003b36:	b2a4      	uxth	r4, r4
 8003b38:	86b4      	strh	r4, [r6, #52]	@ 0x34
                if(btnm->btn_id_sel >= btnm->btn_cnt) btnm->btn_id_sel = 0;
 8003b3a:	42a7      	cmp	r7, r4
 8003b3c:	d801      	bhi.n	8003b42 <lv_btnmatrix_event+0x486>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	86b3      	strh	r3, [r6, #52]	@ 0x34
                if(btnm->btn_id_sel == btn_id_start) {
 8003b42:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003b44:	4543      	cmp	r3, r8
 8003b46:	d00e      	beq.n	8003b66 <lv_btnmatrix_event+0x4aa>
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003b48:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003b4a:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003b4c:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003b50:	4628      	mov	r0, r5
 8003b52:	f7fe ff6c 	bl	8002a2e <button_is_hidden>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d1ec      	bne.n	8003b34 <lv_btnmatrix_event+0x478>
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f7fe ff70 	bl	8002a40 <button_is_inactive>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d1e7      	bne.n	8003b34 <lv_btnmatrix_event+0x478>
 8003b64:	e002      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                    btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003b66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b6a:	86b3      	strh	r3, [r6, #52]	@ 0x34
        invalidate_button_area(obj, btnm->btn_id_sel);
 8003b6c:	8eb1      	ldrh	r1, [r6, #52]	@ 0x34
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff f89e 	bl	8002cb0 <invalidate_button_area>
 8003b74:	e5ab      	b.n	80036ce <lv_btnmatrix_event+0x12>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 8003b76:	8eb2      	ldrh	r2, [r6, #52]	@ 0x34
 8003b78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d006      	beq.n	8003b8e <lv_btnmatrix_event+0x4d2>
            if(btnm->btn_id_sel == 0) btnm->btn_id_sel = btnm->btn_cnt - 1;
 8003b80:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003b82:	b93b      	cbnz	r3, 8003b94 <lv_btnmatrix_event+0x4d8>
 8003b84:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003b86:	3b01      	subs	r3, #1
 8003b88:	86b3      	strh	r3, [r6, #52]	@ 0x34
            uint16_t btn_id_start = btnm->btn_id_sel;
 8003b8a:	8eb7      	ldrh	r7, [r6, #52]	@ 0x34
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003b8c:	e00b      	b.n	8003ba6 <lv_btnmatrix_event+0x4ea>
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) btnm->btn_id_sel = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003b92:	e7f5      	b.n	8003b80 <lv_btnmatrix_event+0x4c4>
            else if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8003b94:	3b01      	subs	r3, #1
 8003b96:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003b98:	e7f7      	b.n	8003b8a <lv_btnmatrix_event+0x4ce>
                if(btnm->btn_id_sel > 0) btnm->btn_id_sel--;
 8003b9a:	b19c      	cbz	r4, 8003bc4 <lv_btnmatrix_event+0x508>
 8003b9c:	3c01      	subs	r4, #1
 8003b9e:	86b4      	strh	r4, [r6, #52]	@ 0x34
                if(btnm->btn_id_sel == btn_id_start) {
 8003ba0:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8003ba2:	42bb      	cmp	r3, r7
 8003ba4:	d012      	beq.n	8003bcc <lv_btnmatrix_event+0x510>
            while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003ba6:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003ba8:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003baa:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003bae:	4628      	mov	r0, r5
 8003bb0:	f7fe ff3d 	bl	8002a2e <button_is_hidden>
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1f0      	bne.n	8003b9a <lv_btnmatrix_event+0x4de>
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f7fe ff41 	bl	8002a40 <button_is_inactive>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d1eb      	bne.n	8003b9a <lv_btnmatrix_event+0x4de>
 8003bc2:	e7d3      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                else btnm->btn_id_sel = btnm->btn_cnt - 1;
 8003bc4:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	86b3      	strh	r3, [r6, #52]	@ 0x34
 8003bca:	e7e9      	b.n	8003ba0 <lv_btnmatrix_event+0x4e4>
                    btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003bcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bd0:	86b3      	strh	r3, [r6, #52]	@ 0x34
                    break;
 8003bd2:	e7cb      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8003bd4:	2215      	movs	r2, #21
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f018 fd8b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003bde:	fa0f f980 	sxth.w	r9, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8003be2:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003be4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003be8:	429c      	cmp	r4, r3
 8003bea:	d00e      	beq.n	8003c0a <lv_btnmatrix_event+0x54e>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8003bec:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
 8003bee:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 8003bf2:	f835 2034 	ldrh.w	r2, [r5, r4, lsl #3]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8003bf6:	88bb      	ldrh	r3, [r7, #4]
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f343 034e 	sbfx	r3, r3, #1, #15
 8003c02:	441a      	add	r2, r3
                lv_coord_t pr_center =
 8003c04:	fa0f f882 	sxth.w	r8, r2
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8003c08:	e01d      	b.n	8003c46 <lv_btnmatrix_event+0x58a>
                btnm->btn_id_sel = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	86b3      	strh	r3, [r6, #52]	@ 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003c0e:	e005      	b.n	8003c1c <lv_btnmatrix_event+0x560>
                    btnm->btn_id_sel++;
 8003c10:	3401      	adds	r4, #1
 8003c12:	b2a4      	uxth	r4, r4
 8003c14:	86b4      	strh	r4, [r6, #52]	@ 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) {
 8003c16:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003c18:	429c      	cmp	r4, r3
 8003c1a:	d20e      	bcs.n	8003c3a <lv_btnmatrix_event+0x57e>
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003c1c:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003c1e:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003c20:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003c24:	4628      	mov	r0, r5
 8003c26:	f7fe ff02 	bl	8002a2e <button_is_hidden>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d1f0      	bne.n	8003c10 <lv_btnmatrix_event+0x554>
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f7fe ff06 	bl	8002a40 <button_is_inactive>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1eb      	bne.n	8003c10 <lv_btnmatrix_event+0x554>
 8003c38:	e798      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003c3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c3e:	86b3      	strh	r3, [r6, #52]	@ 0x34
                        break;
 8003c40:	e794      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                for(area_below = btnm->btn_id_sel; area_below < btnm->btn_cnt; area_below++) {
 8003c42:	3401      	adds	r4, #1
 8003c44:	b2a4      	uxth	r4, r4
 8003c46:	f8b6 a030 	ldrh.w	sl, [r6, #48]	@ 0x30
 8003c4a:	45a2      	cmp	sl, r4
 8003c4c:	d91d      	bls.n	8003c8a <lv_btnmatrix_event+0x5ce>
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 8003c4e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8003c52:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003c56:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	ddf1      	ble.n	8003c42 <lv_btnmatrix_event+0x586>
                       pr_center >= btnm->button_areas[area_below].x1 &&
 8003c5e:	f935 2034 	ldrsh.w	r2, [r5, r4, lsl #3]
                    if(btnm->button_areas[area_below].y1 > btnm->button_areas[btnm->btn_id_sel].y1 &&
 8003c62:	4542      	cmp	r2, r8
 8003c64:	dced      	bgt.n	8003c42 <lv_btnmatrix_event+0x586>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8003c66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c6a:	444b      	add	r3, r9
                       pr_center >= btnm->button_areas[area_below].x1 &&
 8003c6c:	4598      	cmp	r8, r3
 8003c6e:	dce8      	bgt.n	8003c42 <lv_btnmatrix_event+0x586>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8003c70:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003c72:	f833 b014 	ldrh.w	fp, [r3, r4, lsl #1]
 8003c76:	4658      	mov	r0, fp
 8003c78:	f7fe fee2 	bl	8002a40 <button_is_inactive>
                       pr_center <= btnm->button_areas[area_below].x2 + col_gap &&
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d1e0      	bne.n	8003c42 <lv_btnmatrix_event+0x586>
                       button_is_hidden(btnm->ctrl_bits[area_below]) == false) {
 8003c80:	4658      	mov	r0, fp
 8003c82:	f7fe fed4 	bl	8002a2e <button_is_hidden>
                       button_is_inactive(btnm->ctrl_bits[area_below]) == false &&
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d1db      	bne.n	8003c42 <lv_btnmatrix_event+0x586>
                if(area_below < btnm->btn_cnt) btnm->btn_id_sel = area_below;
 8003c8a:	45a2      	cmp	sl, r4
 8003c8c:	f67f af6e 	bls.w	8003b6c <lv_btnmatrix_event+0x4b0>
 8003c90:	86b4      	strh	r4, [r6, #52]	@ 0x34
 8003c92:	e76b      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8003c94:	2215      	movs	r2, #21
 8003c96:	2100      	movs	r1, #0
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f018 fd2b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8003c9e:	fa0f f980 	sxth.w	r9, r0
            if(btnm->btn_id_sel == LV_BTNMATRIX_BTN_NONE) {
 8003ca2:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ca8:	429c      	cmp	r4, r3
 8003caa:	d00f      	beq.n	8003ccc <lv_btnmatrix_event+0x610>
                    btnm->button_areas[btnm->btn_id_sel].x1 + (lv_area_get_width(&btnm->button_areas[btnm->btn_id_sel]) >> 1);
 8003cac:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
 8003cae:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
 8003cb2:	f835 2034 	ldrh.w	r2, [r5, r4, lsl #3]
 8003cb6:	88bb      	ldrh	r3, [r7, #4]
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f343 034e 	sbfx	r3, r3, #1, #15
 8003cc2:	441a      	add	r2, r3
                lv_coord_t pr_center =
 8003cc4:	fa0f f882 	sxth.w	r8, r2
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8003cc8:	b224      	sxth	r4, r4
 8003cca:	e01d      	b.n	8003d08 <lv_btnmatrix_event+0x64c>
                btnm->btn_id_sel = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	86b3      	strh	r3, [r6, #52]	@ 0x34
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003cd0:	e005      	b.n	8003cde <lv_btnmatrix_event+0x622>
                    btnm->btn_id_sel++;
 8003cd2:	3401      	adds	r4, #1
 8003cd4:	b2a4      	uxth	r4, r4
 8003cd6:	86b4      	strh	r4, [r6, #52]	@ 0x34
                    if(btnm->btn_id_sel >= btnm->btn_cnt) {
 8003cd8:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8003cda:	429c      	cmp	r4, r3
 8003cdc:	d20e      	bcs.n	8003cfc <lv_btnmatrix_event+0x640>
                while(button_is_hidden(btnm->ctrl_bits[btnm->btn_id_sel]) || button_is_inactive(btnm->ctrl_bits[btnm->btn_id_sel])) {
 8003cde:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003ce0:	8eb4      	ldrh	r4, [r6, #52]	@ 0x34
 8003ce2:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f7fe fea1 	bl	8002a2e <button_is_hidden>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d1f0      	bne.n	8003cd2 <lv_btnmatrix_event+0x616>
 8003cf0:	4628      	mov	r0, r5
 8003cf2:	f7fe fea5 	bl	8002a40 <button_is_inactive>
 8003cf6:	2800      	cmp	r0, #0
 8003cf8:	d1eb      	bne.n	8003cd2 <lv_btnmatrix_event+0x616>
 8003cfa:	e737      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                        btnm->btn_id_sel = LV_BTNMATRIX_BTN_NONE;
 8003cfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d00:	86b3      	strh	r3, [r6, #52]	@ 0x34
                        break;
 8003d02:	e733      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
                for(area_above = btnm->btn_id_sel; area_above >= 0; area_above--) {
 8003d04:	3c01      	subs	r4, #1
 8003d06:	b224      	sxth	r4, r4
 8003d08:	2c00      	cmp	r4, #0
 8003d0a:	db1e      	blt.n	8003d4a <lv_btnmatrix_event+0x68e>
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8003d0c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8003d10:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003d14:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003d18:	4291      	cmp	r1, r2
 8003d1a:	daf3      	bge.n	8003d04 <lv_btnmatrix_event+0x648>
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8003d1c:	f935 2034 	ldrsh.w	r2, [r5, r4, lsl #3]
 8003d20:	eba2 0209 	sub.w	r2, r2, r9
                    if(btnm->button_areas[area_above].y1 < btnm->button_areas[btnm->btn_id_sel].y1 &&
 8003d24:	4590      	cmp	r8, r2
 8003d26:	dbed      	blt.n	8003d04 <lv_btnmatrix_event+0x648>
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8003d28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= btnm->button_areas[area_above].x1 - col_gap &&
 8003d2c:	4543      	cmp	r3, r8
 8003d2e:	dbe9      	blt.n	8003d04 <lv_btnmatrix_event+0x648>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8003d30:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8003d32:	f833 a014 	ldrh.w	sl, [r3, r4, lsl #1]
 8003d36:	4650      	mov	r0, sl
 8003d38:	f7fe fe82 	bl	8002a40 <button_is_inactive>
                       pr_center <= btnm->button_areas[area_above].x2 &&
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	d1e1      	bne.n	8003d04 <lv_btnmatrix_event+0x648>
                       button_is_hidden(btnm->ctrl_bits[area_above]) == false) {
 8003d40:	4650      	mov	r0, sl
 8003d42:	f7fe fe74 	bl	8002a2e <button_is_hidden>
                       button_is_inactive(btnm->ctrl_bits[area_above]) == false &&
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d1dc      	bne.n	8003d04 <lv_btnmatrix_event+0x648>
                if(area_above >= 0) btnm->btn_id_sel = area_above;
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	f6ff af0e 	blt.w	8003b6c <lv_btnmatrix_event+0x4b0>
 8003d50:	86b4      	strh	r4, [r6, #52]	@ 0x34
 8003d52:	e70b      	b.n	8003b6c <lv_btnmatrix_event+0x4b0>
        draw_main(e);
 8003d54:	4628      	mov	r0, r5
 8003d56:	f7ff f829 	bl	8002dac <draw_main>
 8003d5a:	e4b8      	b.n	80036ce <lv_btnmatrix_event+0x12>

08003d5c <lv_btnmatrix_set_one_checked>:
{
 8003d5c:	b508      	push	{r3, lr}
    btnm->one_check     = en;
 8003d5e:	f890 2036 	ldrb.w	r2, [r0, #54]	@ 0x36
 8003d62:	f361 0200 	bfi	r2, r1, #0, #1
 8003d66:	f880 2036 	strb.w	r2, [r0, #54]	@ 0x36
    make_one_button_checked(obj, 0);
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f7ff fc8f 	bl	800368e <make_one_button_checked>
}
 8003d70:	bd08      	pop	{r3, pc}
	...

08003d74 <is_leap_year>:
 * @param year a year
 * @return 0: not leap year; 1: leap year
 */
static uint8_t is_leap_year(uint32_t year)
{
    return (year % 4) || ((year % 100 == 0) && (year % 400)) ? 0 : 1;
 8003d74:	f010 0f03 	tst.w	r0, #3
 8003d78:	d112      	bne.n	8003da0 <is_leap_year+0x2c>
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <is_leap_year+0x38>)
 8003d7c:	fba3 2300 	umull	r2, r3, r3, r0
 8003d80:	095b      	lsrs	r3, r3, #5
 8003d82:	2264      	movs	r2, #100	@ 0x64
 8003d84:	fb02 0313 	mls	r3, r2, r3, r0
 8003d88:	b963      	cbnz	r3, 8003da4 <is_leap_year+0x30>
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <is_leap_year+0x38>)
 8003d8c:	fba3 2300 	umull	r2, r3, r3, r0
 8003d90:	09db      	lsrs	r3, r3, #7
 8003d92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003d96:	fb02 0313 	mls	r3, r2, r3, r0
 8003d9a:	b12b      	cbz	r3, 8003da8 <is_leap_year+0x34>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4770      	bx	lr
 8003da0:	2000      	movs	r0, #0
 8003da2:	4770      	bx	lr
 8003da4:	2001      	movs	r0, #1
 8003da6:	4770      	bx	lr
 8003da8:	2001      	movs	r0, #1
}
 8003daa:	4770      	bx	lr
 8003dac:	51eb851f 	.word	0x51eb851f

08003db0 <get_month_length>:
{
 8003db0:	b508      	push	{r3, lr}
    if(month < 0) {
 8003db2:	1e4a      	subs	r2, r1, #1
 8003db4:	d418      	bmi.n	8003de8 <get_month_length+0x38>
    if(month >= 12) {
 8003db6:	2a0b      	cmp	r2, #11
 8003db8:	dd01      	ble.n	8003dbe <get_month_length+0xe>
        year++;
 8003dba:	3001      	adds	r0, #1
        month -= 12;
 8003dbc:	3a0c      	subs	r2, #12
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8003dbe:	2a01      	cmp	r2, #1
 8003dc0:	d016      	beq.n	8003df0 <get_month_length+0x40>
 8003dc2:	490e      	ldr	r1, [pc, #56]	@ (8003dfc <get_month_length+0x4c>)
 8003dc4:	fb81 3102 	smull	r3, r1, r1, r2
 8003dc8:	4411      	add	r1, r2
 8003dca:	17d3      	asrs	r3, r2, #31
 8003dcc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8003dd0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	bf48      	it	mi
 8003ddc:	425b      	negmi	r3, r3
 8003dde:	b2d8      	uxtb	r0, r3
 8003de0:	f1c0 001f 	rsb	r0, r0, #31
 8003de4:	b2c0      	uxtb	r0, r0
}
 8003de6:	bd08      	pop	{r3, pc}
        year--;             /*Already in the previous year (won't be less then -12 to skip a whole year)*/
 8003de8:	3801      	subs	r0, #1
        month = 12 + month; /*`month` is negative, the result will be < 12*/
 8003dea:	f101 020b 	add.w	r2, r1, #11
 8003dee:	e7e2      	b.n	8003db6 <get_month_length+0x6>
    return (month == 1) ? (28 + is_leap_year(year)) : 31 - month % 7 % 2;
 8003df0:	f7ff ffc0 	bl	8003d74 <is_leap_year>
 8003df4:	301c      	adds	r0, #28
 8003df6:	b2c0      	uxtb	r0, r0
 8003df8:	e7f5      	b.n	8003de6 <get_month_length+0x36>
 8003dfa:	bf00      	nop
 8003dfc:	92492493 	.word	0x92492493

08003e00 <get_day_of_week>:
 * @param day a day [1..32]
 * @return [0..6] which means [Sun..Sat] or [Mon..Sun] depending on LV_CALENDAR_WEEK_STARTS_MONDAY
 */
static uint8_t get_day_of_week(uint32_t year, uint32_t month, uint32_t day)
{
    uint32_t a = month < 3 ? 1 : 0;
 8003e00:	2902      	cmp	r1, #2
 8003e02:	bf8c      	ite	hi
 8003e04:	2300      	movhi	r3, #0
 8003e06:	2301      	movls	r3, #1
    uint32_t b = year - a;
 8003e08:	1ac0      	subs	r0, r0, r3

#if LV_CALENDAR_WEEK_STARTS_MONDAY
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400) - 1) % 7;
#else
    uint32_t day_of_week = (day + (31 * (month - 2 + 12 * a) / 12) + b + (b / 4) - (b / 100) + (b / 400)) % 7;
 8003e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8003e12:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8003e16:	393e      	subs	r1, #62	@ 0x3e
 8003e18:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <get_day_of_week+0x50>)
 8003e1a:	fba3 3101 	umull	r3, r1, r3, r1
 8003e1e:	eb02 03d1 	add.w	r3, r2, r1, lsr #3
 8003e22:	4403      	add	r3, r0
 8003e24:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8003e28:	4a0a      	ldr	r2, [pc, #40]	@ (8003e54 <get_day_of_week+0x54>)
 8003e2a:	fba2 2000 	umull	r2, r0, r2, r0
 8003e2e:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8003e32:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8003e36:	4808      	ldr	r0, [pc, #32]	@ (8003e58 <get_day_of_week+0x58>)
 8003e38:	fba0 2003 	umull	r2, r0, r0, r3
 8003e3c:	1a1a      	subs	r2, r3, r0
 8003e3e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8003e42:	0880      	lsrs	r0, r0, #2
 8003e44:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003e48:	1a18      	subs	r0, r3, r0
#endif

    return day_of_week  ;
}
 8003e4a:	b2c0      	uxtb	r0, r0
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	aaaaaaab 	.word	0xaaaaaaab
 8003e54:	51eb851f 	.word	0x51eb851f
 8003e58:	24924925 	.word	0x24924925

08003e5c <draw_part_begin_event_cb>:
{
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8003e60:	f00c ff5c 	bl	8010d1c <lv_event_get_target>
 8003e64:	4605      	mov	r5, r0
    lv_obj_draw_part_dsc_t * dsc = lv_event_get_param(e);
 8003e66:	4620      	mov	r0, r4
 8003e68:	f00c ff60 	bl	8010d2c <lv_event_get_param>
    if(dsc->part == LV_PART_ITEMS) {
 8003e6c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003e6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e72:	d000      	beq.n	8003e76 <draw_part_begin_event_cb+0x1a>
}
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	4604      	mov	r4, r0
        if(dsc->id < 7) {
 8003e78:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003e7a:	2906      	cmp	r1, #6
 8003e7c:	d822      	bhi.n	8003ec4 <draw_part_begin_event_cb+0x68>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8003e7e:	6902      	ldr	r2, [r0, #16]
 8003e80:	2300      	movs	r3, #0
 8003e82:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8003e84:	6902      	ldr	r2, [r0, #16]
 8003e86:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_HIGHLIGHT)) {
 8003e8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003e8e:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7ff fbef 	bl	8003674 <lv_btnmatrix_has_btn_ctrl>
 8003e96:	bb40      	cbnz	r0, 8003eea <draw_part_begin_event_cb+0x8e>
        if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_CALENDAR_CTRL_TODAY)) {
 8003e98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e9c:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f7ff fbe8 	bl	8003674 <lv_btnmatrix_has_btn_ctrl>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0e5      	beq.n	8003e74 <draw_part_begin_event_cb+0x18>
            dsc->rect_dsc->border_opa = LV_OPA_COVER;
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	22ff      	movs	r2, #255	@ 0xff
 8003eac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            dsc->rect_dsc->border_color = lv_theme_get_color_primary(obj);
 8003eb0:	6926      	ldr	r6, [r4, #16]
 8003eb2:	4628      	mov	r0, r5
 8003eb4:	f01f fd74 	bl	80239a0 <lv_theme_get_color_primary>
 8003eb8:	83f0      	strh	r0, [r6, #30]
            dsc->rect_dsc->border_width += 1;
 8003eba:	6922      	ldr	r2, [r4, #16]
 8003ebc:	8c13      	ldrh	r3, [r2, #32]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	8413      	strh	r3, [r2, #32]
}
 8003ec2:	e7d7      	b.n	8003e74 <draw_part_begin_event_cb+0x18>
        else if(lv_btnmatrix_has_btn_ctrl(obj, dsc->id, LV_BTNMATRIX_CTRL_DISABLED)) {
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	b289      	uxth	r1, r1
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f7ff fbd3 	bl	8003674 <lv_btnmatrix_has_btn_ctrl>
 8003ece:	2800      	cmp	r0, #0
 8003ed0:	d0db      	beq.n	8003e8a <draw_part_begin_event_cb+0x2e>
            dsc->rect_dsc->bg_opa = LV_OPA_TRANSP;
 8003ed2:	6922      	ldr	r2, [r4, #16]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	70d3      	strb	r3, [r2, #3]
            dsc->rect_dsc->border_opa = LV_OPA_TRANSP;
 8003ed8:	6922      	ldr	r2, [r4, #16]
 8003eda:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22
            dsc->label_dsc->color = lv_palette_main(LV_PALETTE_GREY);
 8003ede:	6966      	ldr	r6, [r4, #20]
 8003ee0:	2012      	movs	r0, #18
 8003ee2:	f002 fd49 	bl	8006978 <lv_palette_main>
 8003ee6:	81b0      	strh	r0, [r6, #12]
 8003ee8:	e7cf      	b.n	8003e8a <draw_part_begin_event_cb+0x2e>
            dsc->rect_dsc->bg_opa = LV_OPA_40;
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	2266      	movs	r2, #102	@ 0x66
 8003eee:	70da      	strb	r2, [r3, #3]
            dsc->rect_dsc->bg_color = lv_theme_get_color_primary(obj);
 8003ef0:	6926      	ldr	r6, [r4, #16]
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f01f fd54 	bl	80239a0 <lv_theme_get_color_primary>
 8003ef8:	80b0      	strh	r0, [r6, #4]
            if(lv_btnmatrix_get_selected_btn(obj) == dsc->id) {
 8003efa:	4628      	mov	r0, r5
 8003efc:	f7ff fb86 	bl	800360c <lv_btnmatrix_get_selected_btn>
 8003f00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f02:	4298      	cmp	r0, r3
 8003f04:	d1c8      	bne.n	8003e98 <draw_part_begin_event_cb+0x3c>
                dsc->rect_dsc->bg_opa = LV_OPA_70;
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	22b2      	movs	r2, #178	@ 0xb2
 8003f0a:	70da      	strb	r2, [r3, #3]
 8003f0c:	e7c4      	b.n	8003e98 <draw_part_begin_event_cb+0x3c>

08003f0e <highlight_update>:

static void highlight_update(lv_obj_t * obj)
{
 8003f0e:	b570      	push	{r4, r5, r6, lr}
 8003f10:	4605      	mov	r5, r0
    lv_calendar_t * calendar = (lv_calendar_t *)obj;
    uint16_t i;

    /*Clear all kind of selection*/
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_CALENDAR_CTRL_TODAY | LV_CALENDAR_CTRL_HIGHLIGHT);
 8003f12:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003f16:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003f18:	f7ff fb15 	bl	8003546 <lv_btnmatrix_clear_btn_ctrl_all>

    uint8_t day_first = get_day_of_week(calendar->showed_date.year, calendar->showed_date.month, 1);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f995 102e 	ldrsb.w	r1, [r5, #46]	@ 0x2e
 8003f22:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
 8003f24:	f7ff ff6c 	bl	8003e00 <get_day_of_week>
 8003f28:	4606      	mov	r6, r0
    if(calendar->highlighted_dates) {
 8003f2a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003f2c:	b30b      	cbz	r3, 8003f72 <highlight_update+0x64>
        for(i = 0; i < calendar->highlighted_dates_num; i++) {
 8003f2e:	2400      	movs	r4, #0
 8003f30:	e001      	b.n	8003f36 <highlight_update+0x28>
 8003f32:	3401      	adds	r4, #1
 8003f34:	b2a4      	uxth	r4, r4
 8003f36:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 8003f38:	42a3      	cmp	r3, r4
 8003f3a:	d91a      	bls.n	8003f72 <highlight_update+0x64>
            if(calendar->highlighted_dates[i].year == calendar->showed_date.year &&
 8003f3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003f3e:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8003f42:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003f46:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1f2      	bne.n	8003f32 <highlight_update+0x24>
               calendar->highlighted_dates[i].month == calendar->showed_date.month) {
 8003f4c:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8003f50:	f995 302e 	ldrsb.w	r3, [r5, #46]	@ 0x2e
            if(calendar->highlighted_dates[i].year == calendar->showed_date.year &&
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d1ec      	bne.n	8003f32 <highlight_update+0x24>
                lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->highlighted_dates[i].day - 1 + day_first + 7,
 8003f58:	f991 1003 	ldrsb.w	r1, [r1, #3]
 8003f5c:	fa16 f181 	uxtah	r1, r6, r1
 8003f60:	b289      	uxth	r1, r1
 8003f62:	3106      	adds	r1, #6
 8003f64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003f68:	b289      	uxth	r1, r1
 8003f6a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003f6c:	f7ff fafb 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
 8003f70:	e7df      	b.n	8003f32 <highlight_update+0x24>
                                          LV_CALENDAR_CTRL_HIGHLIGHT);
            }
        }
    }

    if(calendar->showed_date.year == calendar->today.year && calendar->showed_date.month == calendar->today.month) {
 8003f72:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003f74:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003f76:	4053      	eors	r3, r2
 8003f78:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 8003f7c:	d000      	beq.n	8003f80 <highlight_update+0x72>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
    }
}
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, calendar->today.day - 1 + day_first + 7, LV_CALENDAR_CTRL_TODAY);
 8003f80:	f995 102b 	ldrsb.w	r1, [r5, #43]	@ 0x2b
 8003f84:	fa16 f181 	uxtah	r1, r6, r1
 8003f88:	b289      	uxth	r1, r1
 8003f8a:	3106      	adds	r1, #6
 8003f8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f90:	b289      	uxth	r1, r1
 8003f92:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003f94:	f7ff fae7 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
}
 8003f98:	e7f1      	b.n	8003f7e <highlight_update+0x70>

08003f9a <lv_calendar_set_today_date>:
{
 8003f9a:	b508      	push	{r3, lr}
    calendar->today.year         = year;
 8003f9c:	8501      	strh	r1, [r0, #40]	@ 0x28
    calendar->today.month        = month;
 8003f9e:	f880 202a 	strb.w	r2, [r0, #42]	@ 0x2a
    calendar->today.day          = day;
 8003fa2:	f880 302b 	strb.w	r3, [r0, #43]	@ 0x2b
    highlight_update(obj);
 8003fa6:	f7ff ffb2 	bl	8003f0e <highlight_update>
}
 8003faa:	bd08      	pop	{r3, pc}

08003fac <lv_calendar_set_showed_date>:
{
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	468b      	mov	fp, r1
    calendar->showed_date.year   = year;
 8003fb6:	b289      	uxth	r1, r1
 8003fb8:	8581      	strh	r1, [r0, #44]	@ 0x2c
    calendar->showed_date.month  = month;
 8003fba:	fa4f fa82 	sxtb.w	sl, r2
 8003fbe:	f880 a02e 	strb.w	sl, [r0, #46]	@ 0x2e
    calendar->showed_date.day    = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f880 302f 	strb.w	r3, [r0, #47]	@ 0x2f
    d.year = calendar->showed_date.year;
 8003fc8:	f8ad 1004 	strh.w	r1, [sp, #4]
    d.month = calendar->showed_date.month;
 8003fcc:	f88d a006 	strb.w	sl, [sp, #6]
    d.day = calendar->showed_date.day;
 8003fd0:	f88d 3007 	strb.w	r3, [sp, #7]
    lv_btnmatrix_clear_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_DISABLED);
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003fd8:	f7ff fab5 	bl	8003546 <lv_btnmatrix_clear_btn_ctrl_all>
    for(i = 0; i < 7; i++) {
 8003fdc:	2500      	movs	r5, #0
 8003fde:	e005      	b.n	8003fec <lv_calendar_set_showed_date+0x40>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i, LV_BTNMATRIX_CTRL_DISABLED);
 8003fe0:	2240      	movs	r2, #64	@ 0x40
 8003fe2:	b2a9      	uxth	r1, r5
 8003fe4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003fe6:	f7ff fabe 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0; i < 7; i++) {
 8003fea:	3501      	adds	r5, #1
 8003fec:	2d06      	cmp	r5, #6
 8003fee:	d9f7      	bls.n	8003fe0 <lv_calendar_set_showed_date+0x34>
    uint8_t act_mo_len = get_month_length(d.year, d.month);
 8003ff0:	fa1f fb8b 	uxth.w	fp, fp
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	4658      	mov	r0, fp
 8003ff8:	f7ff feda 	bl	8003db0 <get_month_length>
 8003ffc:	4681      	mov	r9, r0
    uint8_t day_first = get_day_of_week(d.year, d.month, 1);
 8003ffe:	2201      	movs	r2, #1
 8004000:	4651      	mov	r1, sl
 8004002:	4658      	mov	r0, fp
 8004004:	f7ff fefc 	bl	8003e00 <get_day_of_week>
 8004008:	4607      	mov	r7, r0
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 800400a:	4680      	mov	r8, r0
 800400c:	2601      	movs	r6, #1
 800400e:	e00c      	b.n	800402a <lv_calendar_set_showed_date+0x7e>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 8004010:	f108 0046 	add.w	r0, r8, #70	@ 0x46
 8004014:	4633      	mov	r3, r6
 8004016:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <lv_calendar_set_showed_date+0x14c>)
 8004018:	2104      	movs	r1, #4
 800401a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800401e:	f019 fef1 	bl	801de04 <lv_snprintf>
    for(i = day_first, c = 1; i < act_mo_len + day_first; i++, c++) {
 8004022:	f108 0801 	add.w	r8, r8, #1
 8004026:	3601      	adds	r6, #1
 8004028:	b2f6      	uxtb	r6, r6
 800402a:	eb09 0507 	add.w	r5, r9, r7
 800402e:	4545      	cmp	r5, r8
 8004030:	d8ee      	bhi.n	8004010 <lv_calendar_set_showed_date+0x64>
    uint8_t prev_mo_len = get_month_length(d.year, d.month - 1);
 8004032:	f10a 31ff 	add.w	r1, sl, #4294967295	@ 0xffffffff
 8004036:	4658      	mov	r0, fp
 8004038:	f7ff feba 	bl	8003db0 <get_month_length>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800403c:	1bc6      	subs	r6, r0, r7
 800403e:	b2f6      	uxtb	r6, r6
 8004040:	3601      	adds	r6, #1
 8004042:	b2f6      	uxtb	r6, r6
 8004044:	f04f 0800 	mov.w	r8, #0
 8004048:	e013      	b.n	8004072 <lv_calendar_set_showed_date+0xc6>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800404a:	f108 0046 	add.w	r0, r8, #70	@ 0x46
 800404e:	4633      	mov	r3, r6
 8004050:	4a29      	ldr	r2, [pc, #164]	@ (80040f8 <lv_calendar_set_showed_date+0x14c>)
 8004052:	2104      	movs	r1, #4
 8004054:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004058:	f019 fed4 	bl	801de04 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800405c:	f108 0107 	add.w	r1, r8, #7
 8004060:	2240      	movs	r2, #64	@ 0x40
 8004062:	b289      	uxth	r1, r1
 8004064:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004066:	f7ff fa7e 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
    for(i = 0, c = prev_mo_len - day_first + 1; i < day_first; i++, c++) {
 800406a:	f108 0801 	add.w	r8, r8, #1
 800406e:	3601      	adds	r6, #1
 8004070:	b2f6      	uxtb	r6, r6
 8004072:	45b8      	cmp	r8, r7
 8004074:	d3e9      	bcc.n	800404a <lv_calendar_set_showed_date+0x9e>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8004076:	2601      	movs	r6, #1
 8004078:	e011      	b.n	800409e <lv_calendar_set_showed_date+0xf2>
        lv_snprintf(calendar->nums[i], sizeof(calendar->nums[0]), "%d", c);
 800407a:	f105 0046 	add.w	r0, r5, #70	@ 0x46
 800407e:	4633      	mov	r3, r6
 8004080:	4a1d      	ldr	r2, [pc, #116]	@ (80040f8 <lv_calendar_set_showed_date+0x14c>)
 8004082:	2104      	movs	r1, #4
 8004084:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004088:	f019 febc 	bl	801de04 <lv_snprintf>
        lv_btnmatrix_set_btn_ctrl(calendar->btnm, i + 7, LV_BTNMATRIX_CTRL_DISABLED);
 800408c:	1de9      	adds	r1, r5, #7
 800408e:	2240      	movs	r2, #64	@ 0x40
 8004090:	b289      	uxth	r1, r1
 8004092:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004094:	f7ff fa67 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
    for(i = day_first + act_mo_len, c = 1; i < 6 * 7; i++, c++) {
 8004098:	3501      	adds	r5, #1
 800409a:	3601      	adds	r6, #1
 800409c:	b2f6      	uxtb	r6, r6
 800409e:	2d29      	cmp	r5, #41	@ 0x29
 80040a0:	d9eb      	bls.n	800407a <lv_calendar_set_showed_date+0xce>
    highlight_update(obj);
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff ff33 	bl	8003f0e <highlight_update>
    if(lv_btnmatrix_get_selected_btn(calendar->btnm) != LV_BTNMATRIX_BTN_NONE) {
 80040a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80040aa:	f7ff faaf 	bl	800360c <lv_btnmatrix_get_selected_btn>
 80040ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040b2:	4298      	cmp	r0, r3
 80040b4:	d108      	bne.n	80040c8 <lv_calendar_set_showed_date+0x11c>
    lv_obj_invalidate(obj);
 80040b6:	4620      	mov	r0, r4
 80040b8:	f015 fef5 	bl	8019ea6 <lv_obj_invalidate>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 80040bc:	4620      	mov	r0, r4
 80040be:	f019 f898 	bl	801d1f2 <lv_obj_get_child_cnt>
 80040c2:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 80040c4:	2500      	movs	r5, #0
 80040c6:	e00a      	b.n	80040de <lv_calendar_set_showed_date+0x132>
        lv_btnmatrix_set_selected_btn(calendar->btnm, day_first + 7);
 80040c8:	1df9      	adds	r1, r7, #7
 80040ca:	b289      	uxth	r1, r1
 80040cc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80040ce:	f7ff f9fd 	bl	80034cc <lv_btnmatrix_set_selected_btn>
 80040d2:	e7f0      	b.n	80040b6 <lv_calendar_set_showed_date+0x10a>
        lv_event_send(child, LV_EVENT_VALUE_CHANGED, obj);
 80040d4:	4622      	mov	r2, r4
 80040d6:	211c      	movs	r1, #28
 80040d8:	f00c fdf6 	bl	8010cc8 <lv_event_send>
    for(i = 0; i < child_cnt; i++) {
 80040dc:	3501      	adds	r5, #1
 80040de:	42b5      	cmp	r5, r6
 80040e0:	d207      	bcs.n	80040f2 <lv_calendar_set_showed_date+0x146>
        lv_obj_t * child = lv_obj_get_child(obj, i);
 80040e2:	4629      	mov	r1, r5
 80040e4:	4620      	mov	r0, r4
 80040e6:	f019 f86f 	bl	801d1c8 <lv_obj_get_child>
        if(child == calendar->btnm) continue;
 80040ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80040ec:	4283      	cmp	r3, r0
 80040ee:	d1f1      	bne.n	80040d4 <lv_calendar_set_showed_date+0x128>
 80040f0:	e7f4      	b.n	80040dc <lv_calendar_set_showed_date+0x130>
}
 80040f2:	b003      	add	sp, #12
 80040f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f8:	08029954 	.word	0x08029954

080040fc <lv_calendar_constructor>:
{
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	460c      	mov	r4, r1
    calendar->today.year  = 2020;
 8004100:	f240 72e4 	movw	r2, #2020	@ 0x7e4
 8004104:	850a      	strh	r2, [r1, #40]	@ 0x28
    calendar->today.month = 1;
 8004106:	2301      	movs	r3, #1
 8004108:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
    calendar->today.day   = 1;
 800410c:	f881 302b 	strb.w	r3, [r1, #43]	@ 0x2b
    calendar->showed_date.year  = 2020;
 8004110:	858a      	strh	r2, [r1, #44]	@ 0x2c
    calendar->showed_date.month = 1;
 8004112:	f881 302e 	strb.w	r3, [r1, #46]	@ 0x2e
    calendar->showed_date.day   = 1;
 8004116:	f881 302f 	strb.w	r3, [r1, #47]	@ 0x2f
    calendar->highlighted_dates      = NULL;
 800411a:	2500      	movs	r5, #0
 800411c:	630d      	str	r5, [r1, #48]	@ 0x30
    calendar->highlighted_dates_num  = 0;
 800411e:	868d      	strh	r5, [r1, #52]	@ 0x34
    lv_memset_00(calendar->nums, sizeof(calendar->nums));
 8004120:	21a8      	movs	r1, #168	@ 0xa8
 8004122:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8004126:	f012 fdcd 	bl	8016cc4 <lv_memset_00>
    uint8_t j = 0;
 800412a:	4629      	mov	r1, r5
    for(i = 0; i < 8 * 7; i++) {
 800412c:	462b      	mov	r3, r5
 800412e:	e018      	b.n	8004162 <lv_calendar_constructor+0x66>
        else if(i < 7) {
 8004130:	2b06      	cmp	r3, #6
 8004132:	d90d      	bls.n	8004150 <lv_calendar_constructor+0x54>
            calendar->nums[j][0] = 'x';
 8004134:	f101 0046 	add.w	r0, r1, #70	@ 0x46
 8004138:	f04f 0c78 	mov.w	ip, #120	@ 0x78
 800413c:	f804 c020 	strb.w	ip, [r4, r0, lsl #2]
            calendar->map[i] = calendar->nums[j];
 8004140:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004144:	320e      	adds	r2, #14
 8004146:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
            j++;
 800414a:	3101      	adds	r1, #1
 800414c:	b2c9      	uxtb	r1, r1
 800414e:	e006      	b.n	800415e <lv_calendar_constructor+0x62>
            calendar->map[i] = day_names_def[i];
 8004150:	4a27      	ldr	r2, [pc, #156]	@ (80041f0 <lv_calendar_constructor+0xf4>)
 8004152:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004156:	f103 020e 	add.w	r2, r3, #14
 800415a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
    for(i = 0; i < 8 * 7; i++) {
 800415e:	3301      	adds	r3, #1
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b37      	cmp	r3, #55	@ 0x37
 8004164:	d80c      	bhi.n	8004180 <lv_calendar_constructor+0x84>
        if(i != 0 && (i + 1) % 8 == 0) {
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f2      	beq.n	8004150 <lv_calendar_constructor+0x54>
 800416a:	461a      	mov	r2, r3
 800416c:	1c58      	adds	r0, r3, #1
 800416e:	f010 0f07 	tst.w	r0, #7
 8004172:	d1dd      	bne.n	8004130 <lv_calendar_constructor+0x34>
            calendar->map[i] = "\n";
 8004174:	f103 020e 	add.w	r2, r3, #14
 8004178:	481e      	ldr	r0, [pc, #120]	@ (80041f4 <lv_calendar_constructor+0xf8>)
 800417a:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 800417e:	e7ee      	b.n	800415e <lv_calendar_constructor+0x62>
    calendar->map[8 * 7 - 1] = "";
 8004180:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <lv_calendar_constructor+0xfc>)
 8004182:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
    calendar->btnm = lv_btnmatrix_create(obj);
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff f87a 	bl	8003280 <lv_btnmatrix_create>
 800418c:	6260      	str	r0, [r4, #36]	@ 0x24
    lv_btnmatrix_set_map(calendar->btnm, calendar->map);
 800418e:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8004192:	f7ff f881 	bl	8003298 <lv_btnmatrix_set_map>
    lv_btnmatrix_set_btn_ctrl_all(calendar->btnm, LV_BTNMATRIX_CTRL_CLICK_TRIG | LV_BTNMATRIX_CTRL_NO_REPEAT);
 8004196:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800419a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800419c:	f7ff fa26 	bl	80035ec <lv_btnmatrix_set_btn_ctrl_all>
    lv_obj_add_event_cb(calendar->btnm, draw_part_begin_event_cb, LV_EVENT_DRAW_PART_BEGIN, NULL);
 80041a0:	2300      	movs	r3, #0
 80041a2:	221a      	movs	r2, #26
 80041a4:	4915      	ldr	r1, [pc, #84]	@ (80041fc <lv_calendar_constructor+0x100>)
 80041a6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80041a8:	f00c fdd8 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_set_width(calendar->btnm, lv_pct(100));
 80041ac:	f242 0164 	movw	r1, #8292	@ 0x2064
 80041b0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80041b2:	f015 f999 	bl	80194e8 <lv_obj_set_width>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 80041b6:	2101      	movs	r1, #1
 80041b8:	4620      	mov	r0, r4
 80041ba:	f00d fc51 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_grow(calendar->btnm, 1);
 80041be:	2101      	movs	r1, #1
 80041c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80041c2:	f00d fc9d 	bl	8011b00 <lv_obj_set_flex_grow>
    lv_calendar_set_showed_date(obj, calendar->showed_date.year, calendar->showed_date.month);
 80041c6:	f994 202e 	ldrsb.w	r2, [r4, #46]	@ 0x2e
 80041ca:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff feed 	bl	8003fac <lv_calendar_set_showed_date>
    lv_calendar_set_today_date(obj, calendar->today.year, calendar->today.month, calendar->today.day);
 80041d2:	f994 302b 	ldrsb.w	r3, [r4, #43]	@ 0x2b
 80041d6:	f994 202a 	ldrsb.w	r2, [r4, #42]	@ 0x2a
 80041da:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff fedc 	bl	8003f9a <lv_calendar_set_today_date>
    lv_obj_add_flag(calendar->btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 80041e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80041e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80041e8:	f014 fb8a 	bl	8018900 <lv_obj_add_flag>
}
 80041ec:	bd38      	pop	{r3, r4, r5, pc}
 80041ee:	bf00      	nop
 80041f0:	08029ed0 	.word	0x08029ed0
 80041f4:	08029928 	.word	0x08029928
 80041f8:	08029930 	.word	0x08029930
 80041fc:	08003e5d 	.word	0x08003e5d

08004200 <lv_calendar_get_showed_date>:
}
 8004200:	302c      	adds	r0, #44	@ 0x2c
 8004202:	4770      	bx	lr

08004204 <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8004204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004206:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_move_to_index(obj, 0);
 8004208:	2100      	movs	r1, #0
 800420a:	4620      	mov	r0, r4
 800420c:	f019 f930 	bl	801d470 <lv_obj_move_to_index>

    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8004210:	2100      	movs	r1, #0
 8004212:	4620      	mov	r0, r4
 8004214:	f00d fc24 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_START);
 8004218:	2300      	movs	r3, #0
 800421a:	2202      	movs	r2, #2
 800421c:	4619      	mov	r1, r3
 800421e:	4620      	mov	r0, r4
 8004220:	f00d fc4a 	bl	8011ab8 <lv_obj_set_flex_align>

    lv_obj_t * mo_prev = lv_btn_create(obj);
 8004224:	4620      	mov	r0, r4
 8004226:	f7fe fbf1 	bl	8002a0c <lv_btn_create>
 800422a:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_prev, LV_SYMBOL_LEFT, 0);
 800422c:	2200      	movs	r2, #0
 800422e:	4928      	ldr	r1, [pc, #160]	@ (80042d0 <my_constructor+0xcc>)
 8004230:	f018 ff7d 	bl	801d12e <lv_obj_set_style_bg_img_src>
    lv_obj_set_height(mo_prev, lv_pct(100));
 8004234:	f242 0164 	movw	r1, #8292	@ 0x2064
 8004238:	4628      	mov	r0, r5
 800423a:	f015 f96c 	bl	8019516 <lv_obj_set_height>
    lv_obj_update_layout(mo_prev);
 800423e:	4628      	mov	r0, r5
 8004240:	f016 fb2c 	bl	801a89c <lv_obj_update_layout>
    lv_coord_t btn_size = lv_obj_get_height(mo_prev);
 8004244:	4628      	mov	r0, r5
 8004246:	f015 fa4a 	bl	80196de <lv_obj_get_height>
 800424a:	4606      	mov	r6, r0
    lv_obj_set_width(mo_prev, btn_size);
 800424c:	4601      	mov	r1, r0
 800424e:	4628      	mov	r0, r5
 8004250:	f015 f94a 	bl	80194e8 <lv_obj_set_width>

    lv_obj_add_event_cb(mo_prev, month_event_cb, LV_EVENT_CLICKED, NULL);
 8004254:	4f1f      	ldr	r7, [pc, #124]	@ (80042d4 <my_constructor+0xd0>)
 8004256:	2300      	movs	r3, #0
 8004258:	2207      	movs	r2, #7
 800425a:	4639      	mov	r1, r7
 800425c:	4628      	mov	r0, r5
 800425e:	f00c fd7d 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_prev, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8004262:	2104      	movs	r1, #4
 8004264:	4628      	mov	r0, r5
 8004266:	f014 f8bb 	bl	80183e0 <lv_obj_clear_flag>

    lv_obj_t * label = lv_label_create(obj);
 800426a:	4620      	mov	r0, r4
 800426c:	f010 fd86 	bl	8014d7c <lv_label_create>
 8004270:	4605      	mov	r5, r0
    lv_label_set_long_mode(label, LV_LABEL_LONG_SCROLL_CIRCULAR);
 8004272:	2103      	movs	r1, #3
 8004274:	f011 fab8 	bl	80157e8 <lv_label_set_long_mode>
    lv_obj_set_style_text_align(label, LV_TEXT_ALIGN_CENTER, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	2102      	movs	r1, #2
 800427c:	4628      	mov	r0, r5
 800427e:	f018 ff64 	bl	801d14a <lv_obj_set_style_text_align>
    lv_obj_set_flex_grow(label, 1);
 8004282:	2101      	movs	r1, #1
 8004284:	4628      	mov	r0, r5
 8004286:	f00d fc3b 	bl	8011b00 <lv_obj_set_flex_grow>

    lv_obj_t * mo_next = lv_btn_create(obj);
 800428a:	4620      	mov	r0, r4
 800428c:	f7fe fbbe 	bl	8002a0c <lv_btn_create>
 8004290:	4605      	mov	r5, r0
    lv_obj_set_style_bg_img_src(mo_next, LV_SYMBOL_RIGHT, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	4910      	ldr	r1, [pc, #64]	@ (80042d8 <my_constructor+0xd4>)
 8004296:	f018 ff4a 	bl	801d12e <lv_obj_set_style_bg_img_src>
    lv_obj_set_size(mo_next, btn_size, btn_size);
 800429a:	4632      	mov	r2, r6
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	f015 f950 	bl	8019544 <lv_obj_set_size>

    lv_obj_add_event_cb(mo_next, month_event_cb, LV_EVENT_CLICKED, NULL);
 80042a4:	2300      	movs	r3, #0
 80042a6:	2207      	movs	r2, #7
 80042a8:	4639      	mov	r1, r7
 80042aa:	4628      	mov	r0, r5
 80042ac:	f00c fd56 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_clear_flag(mo_next, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 80042b0:	2104      	movs	r1, #4
 80042b2:	4628      	mov	r0, r5
 80042b4:	f014 f894 	bl	80183e0 <lv_obj_clear_flag>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 80042b8:	2300      	movs	r3, #0
 80042ba:	221c      	movs	r2, #28
 80042bc:	4907      	ldr	r1, [pc, #28]	@ (80042dc <my_constructor+0xd8>)
 80042be:	4620      	mov	r0, r4
 80042c0:	f00c fd4c 	bl	8010d5c <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80042c4:	2200      	movs	r2, #0
 80042c6:	211c      	movs	r1, #28
 80042c8:	4620      	mov	r0, r4
 80042ca:	f00c fcfd 	bl	8010cc8 <lv_event_send>
}
 80042ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d0:	08029974 	.word	0x08029974
 80042d4:	08004319 	.word	0x08004319
 80042d8:	08029978 	.word	0x08029978
 80042dc:	080042e1 	.word	0x080042e1

080042e0 <value_changed_event_cb>:
    lv_obj_t * label = lv_obj_get_child(header, 1);
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
}

static void value_changed_event_cb(lv_event_t * e)
{
 80042e0:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * header = lv_event_get_target(e);
 80042e2:	f00c fd1b 	bl	8010d1c <lv_event_get_target>
 80042e6:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 80042e8:	f018 ff44 	bl	801d174 <lv_obj_get_parent>

    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 80042ec:	f7ff ff88 	bl	8004200 <lv_calendar_get_showed_date>
 80042f0:	4604      	mov	r4, r0
    lv_obj_t * label = lv_obj_get_child(header, 1);
 80042f2:	2101      	movs	r1, #1
 80042f4:	4628      	mov	r0, r5
 80042f6:	f018 ff67 	bl	801d1c8 <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", cur_date->year, month_names_def[cur_date->month - 1]);
 80042fa:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a03      	ldr	r2, [pc, #12]	@ (8004310 <value_changed_event_cb+0x30>)
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	8822      	ldrh	r2, [r4, #0]
 8004308:	4902      	ldr	r1, [pc, #8]	@ (8004314 <value_changed_event_cb+0x34>)
 800430a:	f011 fa2a 	bl	8015762 <lv_label_set_text_fmt>
}
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	08029f08 	.word	0x08029f08
 8004314:	0802997c 	.word	0x0802997c

08004318 <month_event_cb>:
{
 8004318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431a:	b083      	sub	sp, #12
    lv_obj_t * btn = lv_event_get_target(e);
 800431c:	f00c fcfe 	bl	8010d1c <lv_event_get_target>
 8004320:	4604      	mov	r4, r0
    lv_obj_t * header = lv_obj_get_parent(btn);
 8004322:	f018 ff27 	bl	801d174 <lv_obj_get_parent>
 8004326:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 8004328:	f018 ff24 	bl	801d174 <lv_obj_get_parent>
 800432c:	4606      	mov	r6, r0
    d = lv_calendar_get_showed_date(calendar);
 800432e:	f7ff ff67 	bl	8004200 <lv_calendar_get_showed_date>
    lv_calendar_date_t newd = *d;
 8004332:	6800      	ldr	r0, [r0, #0]
 8004334:	9001      	str	r0, [sp, #4]
    if(lv_obj_get_child(header, 0) == btn) {
 8004336:	2100      	movs	r1, #0
 8004338:	4628      	mov	r0, r5
 800433a:	f018 ff45 	bl	801d1c8 <lv_obj_get_child>
 800433e:	4284      	cmp	r4, r0
 8004340:	d01d      	beq.n	800437e <month_event_cb+0x66>
        if(newd.month == 12) {
 8004342:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d02a      	beq.n	80043a0 <month_event_cb+0x88>
            newd.month ++;
 800434a:	3301      	adds	r3, #1
 800434c:	f88d 3006 	strb.w	r3, [sp, #6]
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 8004350:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 8004354:	f99d 4006 	ldrsb.w	r4, [sp, #6]
 8004358:	4622      	mov	r2, r4
 800435a:	4639      	mov	r1, r7
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff fe25 	bl	8003fac <lv_calendar_set_showed_date>
    lv_obj_t * label = lv_obj_get_child(header, 1);
 8004362:	2101      	movs	r1, #1
 8004364:	4628      	mov	r0, r5
 8004366:	f018 ff2f 	bl	801d1c8 <lv_obj_get_child>
    lv_label_set_text_fmt(label, "%d %s", newd.year, month_names_def[newd.month - 1]);
 800436a:	3c01      	subs	r4, #1
 800436c:	4b11      	ldr	r3, [pc, #68]	@ (80043b4 <month_event_cb+0x9c>)
 800436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004372:	463a      	mov	r2, r7
 8004374:	4910      	ldr	r1, [pc, #64]	@ (80043b8 <month_event_cb+0xa0>)
 8004376:	f011 f9f4 	bl	8015762 <lv_label_set_text_fmt>
}
 800437a:	b003      	add	sp, #12
 800437c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(newd.month == 1) {
 800437e:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d003      	beq.n	800438e <month_event_cb+0x76>
            newd.month --;
 8004386:	3b01      	subs	r3, #1
 8004388:	f88d 3006 	strb.w	r3, [sp, #6]
 800438c:	e7e0      	b.n	8004350 <month_event_cb+0x38>
            newd.month = 12;
 800438e:	230c      	movs	r3, #12
 8004390:	f88d 3006 	strb.w	r3, [sp, #6]
            newd.year --;
 8004394:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004398:	3b01      	subs	r3, #1
 800439a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800439e:	e7d7      	b.n	8004350 <month_event_cb+0x38>
            newd.month = 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f88d 3006 	strb.w	r3, [sp, #6]
            newd.year ++;
 80043a6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80043aa:	3301      	adds	r3, #1
 80043ac:	f8ad 3004 	strh.w	r3, [sp, #4]
 80043b0:	e7ce      	b.n	8004350 <month_event_cb+0x38>
 80043b2:	bf00      	nop
 80043b4:	08029f08 	.word	0x08029f08
 80043b8:	0802997c 	.word	0x0802997c

080043bc <my_constructor>:
/**********************
 *  STATIC FUNCTIONS
 **********************/

static void my_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_t * calendar = lv_obj_get_parent(obj);
 80043c0:	4608      	mov	r0, r1
 80043c2:	f018 fed7 	bl	801d174 <lv_obj_get_parent>
 80043c6:	4606      	mov	r6, r0
    lv_obj_move_to_index(obj, 0);
 80043c8:	2100      	movs	r1, #0
 80043ca:	4620      	mov	r0, r4
 80043cc:	f019 f850 	bl	801d470 <lv_obj_move_to_index>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 80043d0:	2100      	movs	r1, #0
 80043d2:	4620      	mov	r0, r4
 80043d4:	f00d fb44 	bl	8011a60 <lv_obj_set_flex_flow>

    lv_obj_t * year_dd = lv_dropdown_create(obj);
 80043d8:	4620      	mov	r0, r4
 80043da:	f00b fe3d 	bl	8010058 <lv_dropdown_create>
 80043de:	4605      	mov	r5, r0
    lv_dropdown_set_options(year_dd, year_list);
 80043e0:	4914      	ldr	r1, [pc, #80]	@ (8004434 <my_constructor+0x78>)
 80043e2:	f00b fe45 	bl	8010070 <lv_dropdown_set_options>
    lv_obj_add_event_cb(year_dd, year_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 80043e6:	4633      	mov	r3, r6
 80043e8:	221c      	movs	r2, #28
 80043ea:	4913      	ldr	r1, [pc, #76]	@ (8004438 <my_constructor+0x7c>)
 80043ec:	4628      	mov	r0, r5
 80043ee:	f00c fcb5 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(year_dd, 1);
 80043f2:	2101      	movs	r1, #1
 80043f4:	4628      	mov	r0, r5
 80043f6:	f00d fb83 	bl	8011b00 <lv_obj_set_flex_grow>

    lv_obj_t * month_dd = lv_dropdown_create(obj);
 80043fa:	4620      	mov	r0, r4
 80043fc:	f00b fe2c 	bl	8010058 <lv_dropdown_create>
 8004400:	4605      	mov	r5, r0
    lv_dropdown_set_options(month_dd, month_list);
 8004402:	490e      	ldr	r1, [pc, #56]	@ (800443c <my_constructor+0x80>)
 8004404:	f00b fe34 	bl	8010070 <lv_dropdown_set_options>
    lv_obj_add_event_cb(month_dd, month_event_cb, LV_EVENT_VALUE_CHANGED, calendar);
 8004408:	4633      	mov	r3, r6
 800440a:	221c      	movs	r2, #28
 800440c:	490c      	ldr	r1, [pc, #48]	@ (8004440 <my_constructor+0x84>)
 800440e:	4628      	mov	r0, r5
 8004410:	f00c fca4 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_set_flex_grow(month_dd, 1);
 8004414:	2101      	movs	r1, #1
 8004416:	4628      	mov	r0, r5
 8004418:	f00d fb72 	bl	8011b00 <lv_obj_set_flex_grow>

    lv_obj_add_event_cb(obj, value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 800441c:	2300      	movs	r3, #0
 800441e:	221c      	movs	r2, #28
 8004420:	4908      	ldr	r1, [pc, #32]	@ (8004444 <my_constructor+0x88>)
 8004422:	4620      	mov	r0, r4
 8004424:	f00c fc9a 	bl	8010d5c <lv_obj_add_event_cb>
    /*Refresh the drop downs*/
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8004428:	2200      	movs	r2, #0
 800442a:	211c      	movs	r1, #28
 800442c:	4620      	mov	r0, r4
 800442e:	f00c fc4b 	bl	8010cc8 <lv_event_send>
}
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	080299f0 	.word	0x080299f0
 8004438:	080044c5 	.word	0x080044c5
 800443c:	08029c58 	.word	0x08029c58
 8004440:	08004489 	.word	0x08004489
 8004444:	08004449 	.word	0x08004449

08004448 <value_changed_event_cb>:

    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
}

static void value_changed_event_cb(lv_event_t * e)
{
 8004448:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * header = lv_event_get_target(e);
 800444a:	f00c fc67 	bl	8010d1c <lv_event_get_target>
 800444e:	4605      	mov	r5, r0
    lv_obj_t * calendar = lv_obj_get_parent(header);
 8004450:	f018 fe90 	bl	801d174 <lv_obj_get_parent>
    const lv_calendar_date_t * cur_date = lv_calendar_get_showed_date(calendar);
 8004454:	f7ff fed4 	bl	8004200 <lv_calendar_get_showed_date>
 8004458:	4604      	mov	r4, r0

    lv_obj_t * year_dd = lv_obj_get_child(header, 0);
 800445a:	2100      	movs	r1, #0
 800445c:	4628      	mov	r0, r5
 800445e:	f018 feb3 	bl	801d1c8 <lv_obj_get_child>
    lv_dropdown_set_selected(year_dd, 2023 - cur_date->year);
 8004462:	8821      	ldrh	r1, [r4, #0]
 8004464:	f5c1 61fc 	rsb	r1, r1, #2016	@ 0x7e0
 8004468:	3107      	adds	r1, #7
 800446a:	b289      	uxth	r1, r1
 800446c:	f00b fea6 	bl	80101bc <lv_dropdown_set_selected>

    lv_obj_t * month_dd = lv_obj_get_child(header, 1);
 8004470:	2101      	movs	r1, #1
 8004472:	4628      	mov	r0, r5
 8004474:	f018 fea8 	bl	801d1c8 <lv_obj_get_child>
    lv_dropdown_set_selected(month_dd, cur_date->month - 1);
 8004478:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800447c:	b289      	uxth	r1, r1
 800447e:	3901      	subs	r1, #1
 8004480:	b289      	uxth	r1, r1
 8004482:	f00b fe9b 	bl	80101bc <lv_dropdown_set_selected>
}
 8004486:	bd38      	pop	{r3, r4, r5, pc}

08004488 <month_event_cb>:
{
 8004488:	b530      	push	{r4, r5, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 800448e:	f00c fc45 	bl	8010d1c <lv_event_get_target>
 8004492:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 8004494:	4628      	mov	r0, r5
 8004496:	f00c fc4b 	bl	8010d30 <lv_event_get_user_data>
 800449a:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 800449c:	4620      	mov	r0, r4
 800449e:	f00b fea3 	bl	80101e8 <lv_dropdown_get_selected>
 80044a2:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 80044a4:	4628      	mov	r0, r5
 80044a6:	f7ff feab 	bl	8004200 <lv_calendar_get_showed_date>
    lv_calendar_date_t newd = *d;
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	9001      	str	r0, [sp, #4]
    newd.month = sel + 1;
 80044ae:	1c62      	adds	r2, r4, #1
 80044b0:	b252      	sxtb	r2, r2
 80044b2:	f88d 2006 	strb.w	r2, [sp, #6]
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 80044b6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80044ba:	4628      	mov	r0, r5
 80044bc:	f7ff fd76 	bl	8003fac <lv_calendar_set_showed_date>
}
 80044c0:	b003      	add	sp, #12
 80044c2:	bd30      	pop	{r4, r5, pc}

080044c4 <year_event_cb>:
{
 80044c4:	b530      	push	{r4, r5, lr}
 80044c6:	b083      	sub	sp, #12
 80044c8:	4605      	mov	r5, r0
    lv_obj_t * dropdown = lv_event_get_target(e);
 80044ca:	f00c fc27 	bl	8010d1c <lv_event_get_target>
 80044ce:	4604      	mov	r4, r0
    lv_obj_t * calendar = lv_event_get_user_data(e);
 80044d0:	4628      	mov	r0, r5
 80044d2:	f00c fc2d 	bl	8010d30 <lv_event_get_user_data>
 80044d6:	4605      	mov	r5, r0
    uint16_t sel = lv_dropdown_get_selected(dropdown);
 80044d8:	4620      	mov	r0, r4
 80044da:	f00b fe85 	bl	80101e8 <lv_dropdown_get_selected>
 80044de:	4604      	mov	r4, r0
    d = lv_calendar_get_showed_date(calendar);
 80044e0:	4628      	mov	r0, r5
 80044e2:	f7ff fe8d 	bl	8004200 <lv_calendar_get_showed_date>
    lv_calendar_date_t newd = *d;
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	9001      	str	r0, [sp, #4]
    newd.year = 2023 - sel;
 80044ea:	f5c4 61fc 	rsb	r1, r4, #2016	@ 0x7e0
 80044ee:	3107      	adds	r1, #7
 80044f0:	b289      	uxth	r1, r1
 80044f2:	f8ad 1004 	strh.w	r1, [sp, #4]
    lv_calendar_set_showed_date(calendar, newd.year, newd.month);
 80044f6:	f99d 2006 	ldrsb.w	r2, [sp, #6]
 80044fa:	4628      	mov	r0, r5
 80044fc:	f7ff fd56 	bl	8003fac <lv_calendar_set_showed_date>
}
 8004500:	b003      	add	sp, #12
 8004502:	bd30      	pop	{r4, r5, pc}

08004504 <get_index_from_x>:
 * @param chart pointer to a chart object
 * @param coord the coordination of the point relative to the series area.
 * @return the found index
 */
static uint32_t get_index_from_x(lv_obj_t * obj, lv_coord_t x)
{
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4606      	mov	r6, r0
 8004508:	460c      	mov	r4, r1
    lv_chart_t * chart  = (lv_chart_t *)obj;
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800450a:	f015 f8fb 	bl	8019704 <lv_obj_get_content_width>
 800450e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8004512:	fb03 f500 	mul.w	r5, r3, r0
 8004516:	f345 250f 	sbfx	r5, r5, #8, #16
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_left(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800451a:	2212      	movs	r2, #18
 800451c:	2100      	movs	r1, #0
 800451e:	4630      	mov	r0, r6
 8004520:	f018 f8e8 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
    x -= pad_left;
 8004524:	1a21      	subs	r1, r4, r0
 8004526:	b209      	sxth	r1, r1

    if(x < 0) return 0;
 8004528:	2900      	cmp	r1, #0
 800452a:	db22      	blt.n	8004572 <get_index_from_x+0x6e>
    if(x > w) return chart->point_cnt - 1;
 800452c:	428d      	cmp	r5, r1
 800452e:	db09      	blt.n	8004544 <get_index_from_x+0x40>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 8004530:	f896 3088 	ldrb.w	r3, [r6, #136]	@ 0x88
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	2b01      	cmp	r3, #1
 800453a:	d007      	beq.n	800454c <get_index_from_x+0x48>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 800453c:	2b02      	cmp	r3, #2
 800453e:	d011      	beq.n	8004564 <get_index_from_x+0x60>

    return 0;
 8004540:	2000      	movs	r0, #0
}
 8004542:	bd70      	pop	{r4, r5, r6, pc}
    if(x > w) return chart->point_cnt - 1;
 8004544:	f8b6 0082 	ldrh.w	r0, [r6, #130]	@ 0x82
 8004548:	3801      	subs	r0, #1
 800454a:	e7fa      	b.n	8004542 <get_index_from_x+0x3e>
    if(chart->type == LV_CHART_TYPE_LINE) return (x * (chart->point_cnt - 1) + w / 2) / w;
 800454c:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 8004550:	3a01      	subs	r2, #1
 8004552:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 8004556:	f343 034f 	sbfx	r3, r3, #1, #16
 800455a:	fb02 3301 	mla	r3, r2, r1, r3
 800455e:	fb93 f0f5 	sdiv	r0, r3, r5
 8004562:	e7ee      	b.n	8004542 <get_index_from_x+0x3e>
    if(chart->type == LV_CHART_TYPE_BAR) return (x * chart->point_cnt) / w;
 8004564:	f8b6 3082 	ldrh.w	r3, [r6, #130]	@ 0x82
 8004568:	fb03 f101 	mul.w	r1, r3, r1
 800456c:	fb91 f0f5 	sdiv	r0, r1, r5
 8004570:	e7e7      	b.n	8004542 <get_index_from_x+0x3e>
    if(x < 0) return 0;
 8004572:	2000      	movs	r0, #0
 8004574:	e7e5      	b.n	8004542 <get_index_from_x+0x3e>

08004576 <invalidate_point>:

static void invalidate_point(lv_obj_t * obj, uint16_t i)
{
    lv_chart_t * chart  = (lv_chart_t *)obj;
    if(i >= chart->point_cnt) return;
 8004576:	f8b0 3082 	ldrh.w	r3, [r0, #130]	@ 0x82
 800457a:	428b      	cmp	r3, r1
 800457c:	d800      	bhi.n	8004580 <invalidate_point+0xa>
 800457e:	4770      	bx	lr
{
 8004580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004584:	b083      	sub	sp, #12
 8004586:	4604      	mov	r4, r0
 8004588:	460e      	mov	r6, r1

    lv_coord_t w  = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800458a:	f015 f8bb 	bl	8019704 <lv_obj_get_content_width>
 800458e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 8004592:	fb03 f000 	mul.w	r0, r3, r0
 8004596:	f340 250f 	sbfx	r5, r0, #8, #16
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 800459a:	4620      	mov	r0, r4
 800459c:	f016 fc94 	bl	801aec8 <lv_obj_get_scroll_left>
 80045a0:	4607      	mov	r7, r0

    /*In shift mode the whole chart changes so the whole object*/
    if(chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT) {
 80045a2:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 80045a6:	f013 0f08 	tst.w	r3, #8
 80045aa:	d00c      	beq.n	80045c6 <invalidate_point+0x50>
        lv_obj_invalidate(obj);
        return;
    }

    if(chart->type == LV_CHART_TYPE_LINE) {
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d00c      	beq.n	80045ce <invalidate_point+0x58>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
            lv_obj_invalidate_area(obj, &coords);
        }
    }
    else if(chart->type == LV_CHART_TYPE_BAR) {
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	f000 808d 	beq.w	80046d4 <invalidate_point+0x15e>
        col_a.x1 -= block_gap;

        lv_obj_invalidate_area(obj, &col_a);
    }
    else {
        lv_obj_invalidate(obj);
 80045ba:	4620      	mov	r0, r4
 80045bc:	f015 fc73 	bl	8019ea6 <lv_obj_invalidate>
    }
}
 80045c0:	b003      	add	sp, #12
 80045c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_obj_invalidate(obj);
 80045c6:	4620      	mov	r0, r4
 80045c8:	f015 fc6d 	bl	8019ea6 <lv_obj_invalidate>
        return;
 80045cc:	e7f8      	b.n	80045c0 <invalidate_point+0x4a>
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_border_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80045ce:	2232      	movs	r2, #50	@ 0x32
 80045d0:	2100      	movs	r1, #0
 80045d2:	4620      	mov	r0, r4
 80045d4:	f018 f88e 	bl	801c6f4 <lv_obj_get_style_prop>
 80045d8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80045da:	2212      	movs	r2, #18
 80045dc:	2100      	movs	r1, #0
 80045de:	4620      	mov	r0, r4
 80045e0:	f018 f888 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t x_ofs = obj->coords.x1 + pleft + bwidth - scroll_left;
 80045e4:	8aa3      	ldrh	r3, [r4, #20]
 80045e6:	4403      	add	r3, r0
 80045e8:	fa18 f383 	uxtah	r3, r8, r3
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1bdf      	subs	r7, r3, r7
 80045f0:	b2bf      	uxth	r7, r7
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_line_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80045f2:	2249      	movs	r2, #73	@ 0x49
 80045f4:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80045f8:	4620      	mov	r0, r4
 80045fa:	f018 f87b 	bl	801c6f4 <lv_obj_get_style_prop>
 80045fe:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004600:	2201      	movs	r2, #1
 8004602:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8004606:	4620      	mov	r0, r4
 8004608:	f018 f874 	bl	801c6f4 <lv_obj_get_style_prop>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 800460c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004610:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8004614:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8004618:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 800461c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8004620:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 8004624:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8004628:	f8ad 2006 	strh.w	r2, [sp, #6]
        coords.y1 -= line_width + point_w;
 800462c:	b29b      	uxth	r3, r3
 800462e:	fa1f f888 	uxth.w	r8, r8
 8004632:	fa1f f980 	uxth.w	r9, r0
 8004636:	eb08 0109 	add.w	r1, r8, r9
 800463a:	b289      	uxth	r1, r1
 800463c:	1a5b      	subs	r3, r3, r1
 800463e:	f8ad 3002 	strh.w	r3, [sp, #2]
        coords.y2 += line_width + point_w;
 8004642:	fa11 f282 	uxtah	r2, r1, r2
 8004646:	f8ad 2006 	strh.w	r2, [sp, #6]
        if(i < chart->point_cnt - 1) {
 800464a:	f8b4 3082 	ldrh.w	r3, [r4, #130]	@ 0x82
 800464e:	3b01      	subs	r3, #1
 8004650:	429e      	cmp	r6, r3
 8004652:	db22      	blt.n	800469a <invalidate_point+0x124>
        if(i > 0) {
 8004654:	2e00      	cmp	r6, #0
 8004656:	d0b3      	beq.n	80045c0 <invalidate_point+0x4a>
            coords.x1 = ((w * (i - 1)) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 8004658:	1e73      	subs	r3, r6, #1
 800465a:	fb05 f303 	mul.w	r3, r5, r3
 800465e:	f8b4 2082 	ldrh.w	r2, [r4, #130]	@ 0x82
 8004662:	3a01      	subs	r2, #1
 8004664:	fb93 f3f2 	sdiv	r3, r3, r2
 8004668:	443b      	add	r3, r7
 800466a:	b29b      	uxth	r3, r3
 800466c:	eba3 0308 	sub.w	r3, r3, r8
 8004670:	b29b      	uxth	r3, r3
 8004672:	eba3 0309 	sub.w	r3, r3, r9
 8004676:	f8ad 3000 	strh.w	r3, [sp]
            coords.x2 = ((w * i) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 800467a:	fb05 f006 	mul.w	r0, r5, r6
 800467e:	fb90 f0f2 	sdiv	r0, r0, r2
 8004682:	183b      	adds	r3, r7, r0
 8004684:	fa18 f383 	uxtah	r3, r8, r3
 8004688:	fa19 f383 	uxtah	r3, r9, r3
 800468c:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 8004690:	4669      	mov	r1, sp
 8004692:	4620      	mov	r0, r4
 8004694:	f015 fbdf 	bl	8019e56 <lv_obj_invalidate_area>
 8004698:	e792      	b.n	80045c0 <invalidate_point+0x4a>
            coords.x1 = ((w * i) / (chart->point_cnt - 1)) + x_ofs - line_width - point_w;
 800469a:	fb05 f206 	mul.w	r2, r5, r6
 800469e:	fb92 f2f3 	sdiv	r2, r2, r3
 80046a2:	443a      	add	r2, r7
 80046a4:	b292      	uxth	r2, r2
 80046a6:	eba2 0208 	sub.w	r2, r2, r8
 80046aa:	b292      	uxth	r2, r2
 80046ac:	eba2 0209 	sub.w	r2, r2, r9
 80046b0:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 = ((w * (i + 1)) / (chart->point_cnt - 1)) + x_ofs + line_width + point_w;
 80046b4:	fb06 5205 	mla	r2, r6, r5, r5
 80046b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80046bc:	443b      	add	r3, r7
 80046be:	fa18 f383 	uxtah	r3, r8, r3
 80046c2:	fa19 f383 	uxtah	r3, r9, r3
 80046c6:	f8ad 3004 	strh.w	r3, [sp, #4]
            lv_obj_invalidate_area(obj, &coords);
 80046ca:	4669      	mov	r1, sp
 80046cc:	4620      	mov	r0, r4
 80046ce:	f015 fbc2 	bl	8019e56 <lv_obj_invalidate_area>
 80046d2:	e7bf      	b.n	8004654 <invalidate_point+0xde>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80046d4:	2215      	movs	r2, #21
 80046d6:	2100      	movs	r1, #0
 80046d8:	4620      	mov	r0, r4
 80046da:	f018 f80b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80046de:	b200      	sxth	r0, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 80046e0:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 80046e4:	fb03 f000 	mul.w	r0, r3, r0
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 80046e8:	ea4f 2820 	mov.w	r8, r0, asr #8
        lv_coord_t block_w = (w + block_gap) / chart->point_cnt;
 80046ec:	eb05 2520 	add.w	r5, r5, r0, asr #8
 80046f0:	f8b4 3082 	ldrh.w	r3, [r4, #130]	@ 0x82
 80046f4:	fb95 f5f3 	sdiv	r5, r5, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80046f8:	2232      	movs	r2, #50	@ 0x32
 80046fa:	2100      	movs	r1, #0
 80046fc:	4620      	mov	r0, r4
 80046fe:	f017 fff9 	bl	801c6f4 <lv_obj_get_style_prop>
        x_act = (int32_t)((int32_t)(block_w) * i) ;
 8004702:	fa1f f985 	uxth.w	r9, r5
 8004706:	fb15 f506 	smulbb	r5, r5, r6
 800470a:	b2ad      	uxth	r5, r5
        x_act += obj->coords.x1 + bwidth + lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 800470c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004710:	fa03 f680 	sxtah	r6, r3, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004714:	2212      	movs	r2, #18
 8004716:	2100      	movs	r1, #0
 8004718:	4620      	mov	r0, r4
 800471a:	f017 ffeb 	bl	801c6f4 <lv_obj_get_style_prop>
 800471e:	fa06 f080 	sxtah	r0, r6, r0
 8004722:	4405      	add	r5, r0
 8004724:	b2ad      	uxth	r5, r5
        lv_obj_get_coords(obj, &col_a);
 8004726:	4669      	mov	r1, sp
 8004728:	4620      	mov	r0, r4
 800472a:	f014 ff7e 	bl	801962a <lv_obj_get_coords>
        col_a.x1 = x_act - scroll_left;
 800472e:	1beb      	subs	r3, r5, r7
 8004730:	b29a      	uxth	r2, r3
 8004732:	f8ad 3000 	strh.w	r3, [sp]
        col_a.x2 = col_a.x1 + block_w;
 8004736:	4491      	add	r9, r2
 8004738:	f8ad 9004 	strh.w	r9, [sp, #4]
        col_a.x1 -= block_gap;
 800473c:	eba2 0208 	sub.w	r2, r2, r8
 8004740:	f8ad 2000 	strh.w	r2, [sp]
        lv_obj_invalidate_area(obj, &col_a);
 8004744:	4669      	mov	r1, sp
 8004746:	4620      	mov	r0, r4
 8004748:	f015 fb85 	bl	8019e56 <lv_obj_invalidate_area>
 800474c:	e738      	b.n	80045c0 <invalidate_point+0x4a>
	...

08004750 <draw_div_lines>:
{
 8004750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004754:	b0a3      	sub	sp, #140	@ 0x8c
 8004756:	4604      	mov	r4, r0
 8004758:	460e      	mov	r6, r1
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 800475a:	688a      	ldr	r2, [r1, #8]
 800475c:	f100 0114 	add.w	r1, r0, #20
 8004760:	a820      	add	r0, sp, #128	@ 0x80
 8004762:	f7fd f947 	bl	80019f4 <_lv_area_intersect>
    if(mask_ret == false) return;
 8004766:	b910      	cbnz	r0, 800476e <draw_div_lines+0x1e>
}
 8004768:	b023      	add	sp, #140	@ 0x8c
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800476e:	68b3      	ldr	r3, [r6, #8]
 8004770:	9301      	str	r3, [sp, #4]
    draw_ctx->clip_area = &series_clip_area;
 8004772:	ab20      	add	r3, sp, #128	@ 0x80
 8004774:	60b3      	str	r3, [r6, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004776:	2232      	movs	r2, #50	@ 0x32
 8004778:	2100      	movs	r1, #0
 800477a:	4620      	mov	r0, r4
 800477c:	f017 ffba 	bl	801c6f4 <lv_obj_get_style_prop>
 8004780:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004782:	2212      	movs	r2, #18
 8004784:	2100      	movs	r1, #0
 8004786:	4620      	mov	r0, r4
 8004788:	f017 ffb4 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800478c:	b2bf      	uxth	r7, r7
 800478e:	fa17 f080 	uxtah	r0, r7, r0
 8004792:	b283      	uxth	r3, r0
 8004794:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004796:	2210      	movs	r2, #16
 8004798:	2100      	movs	r1, #0
 800479a:	4620      	mov	r0, r4
 800479c:	f017 ffaa 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80047a0:	fa17 f580 	uxtah	r5, r7, r0
 80047a4:	b2ad      	uxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80047a6:	4620      	mov	r0, r4
 80047a8:	f014 ffac 	bl	8019704 <lv_obj_get_content_width>
 80047ac:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 80047b0:	fb03 f800 	mul.w	r8, r3, r0
 80047b4:	f348 280f 	sbfx	r8, r8, #8, #16
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80047b8:	4620      	mov	r0, r4
 80047ba:	f014 ffc3 	bl	8019744 <lv_obj_get_content_height>
 80047be:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 80047c2:	fb03 f900 	mul.w	r9, r3, r0
 80047c6:	f349 290f 	sbfx	r9, r9, #8, #16
    lv_draw_line_dsc_init(&line_dsc);
 80047ca:	f10d 0a6c 	add.w	sl, sp, #108	@ 0x6c
 80047ce:	4650      	mov	r0, sl
 80047d0:	f003 ff67 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 80047d4:	4652      	mov	r2, sl
 80047d6:	2100      	movs	r1, #0
 80047d8:	4620      	mov	r0, r4
 80047da:	f014 fc6a 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80047de:	4631      	mov	r1, r6
 80047e0:	a809      	add	r0, sp, #36	@ 0x24
 80047e2:	f014 fd74 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_MAIN;
 80047e6:	2700      	movs	r7, #0
 80047e8:	9716      	str	r7, [sp, #88]	@ 0x58
    part_draw_dsc.class_p = MY_CLASS;
 80047ea:	4b94      	ldr	r3, [pc, #592]	@ (8004a3c <draw_div_lines+0x2ec>)
 80047ec:	930a      	str	r3, [sp, #40]	@ 0x28
    part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_INIT;
 80047ee:	970b      	str	r7, [sp, #44]	@ 0x2c
    part_draw_dsc.line_dsc = &line_dsc;
 80047f0:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
    part_draw_dsc.id = 0xFFFFFFFF;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047f8:	9317      	str	r3, [sp, #92]	@ 0x5c
    part_draw_dsc.p1 = NULL;
 80047fa:	9712      	str	r7, [sp, #72]	@ 0x48
    part_draw_dsc.p2 = NULL;
 80047fc:	9713      	str	r7, [sp, #76]	@ 0x4c
    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80047fe:	aa09      	add	r2, sp, #36	@ 0x24
 8004800:	211a      	movs	r1, #26
 8004802:	4620      	mov	r0, r4
 8004804:	f00c fa60 	bl	8010cc8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8004808:	2231      	movs	r2, #49	@ 0x31
 800480a:	4639      	mov	r1, r7
 800480c:	4620      	mov	r0, r4
 800480e:	f017 ff71 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8004812:	b2c3      	uxtb	r3, r0
 8004814:	9302      	str	r3, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004816:	2232      	movs	r2, #50	@ 0x32
 8004818:	4639      	mov	r1, r7
 800481a:	4620      	mov	r0, r4
 800481c:	f017 ff6a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004820:	b202      	sxth	r2, r0
 8004822:	9206      	str	r2, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8004824:	2233      	movs	r2, #51	@ 0x33
 8004826:	4639      	mov	r1, r7
 8004828:	4620      	mov	r0, r4
 800482a:	f017 ff63 	bl	801c6f4 <lv_obj_get_style_prop>
 800482e:	9003      	str	r0, [sp, #12]
    lv_coord_t scroll_left = lv_obj_get_scroll_left(obj);
 8004830:	4620      	mov	r0, r4
 8004832:	f016 fb49 	bl	801aec8 <lv_obj_get_scroll_left>
 8004836:	9005      	str	r0, [sp, #20]
    lv_coord_t scroll_top = lv_obj_get_scroll_top(obj);
 8004838:	4620      	mov	r0, r4
 800483a:	f016 fae5 	bl	801ae08 <lv_obj_get_scroll_top>
    if(chart->hdiv_cnt != 0) {
 800483e:	f8b4 707e 	ldrh.w	r7, [r4, #126]	@ 0x7e
 8004842:	2f00      	cmp	r7, #0
 8004844:	d076      	beq.n	8004934 <draw_div_lines+0x1e4>
        lv_coord_t y_ofs = obj->coords.y1 + pad_top - scroll_top;
 8004846:	8ae3      	ldrh	r3, [r4, #22]
 8004848:	441d      	add	r5, r3
 800484a:	b2ad      	uxth	r5, r5
 800484c:	1a28      	subs	r0, r5, r0
 800484e:	fa1f fb80 	uxth.w	fp, r0
        p1.x = obj->coords.x1;
 8004852:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8004856:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
        p2.x = obj->coords.x2;
 800485a:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800485e:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
        i_end = chart->hdiv_cnt;
 8004862:	fa0f fa87 	sxth.w	sl, r7
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d929      	bls.n	80048c0 <draw_div_lines+0x170>
 800486c:	9a06      	ldr	r2, [sp, #24]
 800486e:	2a00      	cmp	r2, #0
 8004870:	dd2b      	ble.n	80048ca <draw_div_lines+0x17a>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	f013 0f02 	tst.w	r3, #2
 8004878:	d108      	bne.n	800488c <draw_div_lines+0x13c>
        i_start = 0;
 800487a:	2500      	movs	r5, #0
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	f013 0f01 	tst.w	r3, #1
 8004882:	d10e      	bne.n	80048a2 <draw_div_lines+0x152>
 8004884:	f8cd 801c 	str.w	r8, [sp, #28]
 8004888:	46b0      	mov	r8, r6
 800488a:	e04e      	b.n	800492a <draw_div_lines+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800488c:	2210      	movs	r2, #16
 800488e:	2100      	movs	r1, #0
 8004890:	4620      	mov	r0, r4
 8004892:	f017 ff2f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8004896:	b200      	sxth	r0, r0
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 8004898:	b108      	cbz	r0, 800489e <draw_div_lines+0x14e>
        i_start = 0;
 800489a:	2500      	movs	r5, #0
 800489c:	e7ee      	b.n	800487c <draw_div_lines+0x12c>
            if((border_side & LV_BORDER_SIDE_TOP) && (lv_obj_get_style_pad_top(obj, LV_PART_MAIN) == 0)) i_start++;
 800489e:	2501      	movs	r5, #1
 80048a0:	e7ec      	b.n	800487c <draw_div_lines+0x12c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80048a2:	2211      	movs	r2, #17
 80048a4:	2100      	movs	r1, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	f017 ff24 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80048ac:	b200      	sxth	r0, r0
            if((border_side & LV_BORDER_SIDE_BOTTOM) && (lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) == 0)) i_end--;
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d173      	bne.n	800499a <draw_div_lines+0x24a>
 80048b2:	3f01      	subs	r7, #1
 80048b4:	fa0f fa87 	sxth.w	sl, r7
 80048b8:	f8cd 801c 	str.w	r8, [sp, #28]
 80048bc:	46b0      	mov	r8, r6
 80048be:	e034      	b.n	800492a <draw_div_lines+0x1da>
        i_start = 0;
 80048c0:	2500      	movs	r5, #0
 80048c2:	f8cd 801c 	str.w	r8, [sp, #28]
 80048c6:	46b0      	mov	r8, r6
 80048c8:	e02f      	b.n	800492a <draw_div_lines+0x1da>
 80048ca:	2500      	movs	r5, #0
        for(i = i_start; i < i_end; i++) {
 80048cc:	f8cd 801c 	str.w	r8, [sp, #28]
 80048d0:	46b0      	mov	r8, r6
 80048d2:	e02a      	b.n	800492a <draw_div_lines+0x1da>
            p1.y = (int32_t)((int32_t)h * i) / (chart->hdiv_cnt - 1);
 80048d4:	fb09 f305 	mul.w	r3, r9, r5
 80048d8:	f8b4 207e 	ldrh.w	r2, [r4, #126]	@ 0x7e
 80048dc:	3a01      	subs	r2, #1
 80048de:	fb93 f3f2 	sdiv	r3, r3, r2
 80048e2:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
            p1.y += y_ofs;
 80048e6:	fa1b f383 	uxtah	r3, fp, r3
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
            p2.y = p1.y;
 80048f0:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
            part_draw_dsc.class_p = MY_CLASS;
 80048f4:	4b51      	ldr	r3, [pc, #324]	@ (8004a3c <draw_div_lines+0x2ec>)
 80048f6:	930a      	str	r3, [sp, #40]	@ 0x28
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_HOR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	930b      	str	r3, [sp, #44]	@ 0x2c
            part_draw_dsc.p1 = &p1;
 80048fc:	af1f      	add	r7, sp, #124	@ 0x7c
 80048fe:	9712      	str	r7, [sp, #72]	@ 0x48
            part_draw_dsc.p2 = &p2;
 8004900:	ae1e      	add	r6, sp, #120	@ 0x78
 8004902:	9613      	str	r6, [sp, #76]	@ 0x4c
            part_draw_dsc.id = i;
 8004904:	9517      	str	r5, [sp, #92]	@ 0x5c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8004906:	aa09      	add	r2, sp, #36	@ 0x24
 8004908:	211a      	movs	r1, #26
 800490a:	4620      	mov	r0, r4
 800490c:	f00c f9dc 	bl	8010cc8 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8004910:	4633      	mov	r3, r6
 8004912:	463a      	mov	r2, r7
 8004914:	a91b      	add	r1, sp, #108	@ 0x6c
 8004916:	4640      	mov	r0, r8
 8004918:	f003 fed8 	bl	80086cc <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 800491c:	aa09      	add	r2, sp, #36	@ 0x24
 800491e:	211b      	movs	r1, #27
 8004920:	4620      	mov	r0, r4
 8004922:	f00c f9d1 	bl	8010cc8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8004926:	3501      	adds	r5, #1
 8004928:	b22d      	sxth	r5, r5
 800492a:	4555      	cmp	r5, sl
 800492c:	dbd2      	blt.n	80048d4 <draw_div_lines+0x184>
 800492e:	4646      	mov	r6, r8
 8004930:	f8dd 801c 	ldr.w	r8, [sp, #28]
    if(chart->vdiv_cnt != 0) {
 8004934:	f8b4 7080 	ldrh.w	r7, [r4, #128]	@ 0x80
 8004938:	2f00      	cmp	r7, #0
 800493a:	d070      	beq.n	8004a1e <draw_div_lines+0x2ce>
        lv_coord_t x_ofs = obj->coords.x1 + pad_left - scroll_left;
 800493c:	8aa3      	ldrh	r3, [r4, #20]
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	441a      	add	r2, r3
 8004942:	fa1f f982 	uxth.w	r9, r2
 8004946:	9b05      	ldr	r3, [sp, #20]
 8004948:	eba9 0903 	sub.w	r9, r9, r3
 800494c:	fa1f f989 	uxth.w	r9, r9
        p1.y = obj->coords.y1;
 8004950:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8004954:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
        p2.y = obj->coords.y2;
 8004958:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 800495c:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
        i_end = chart->vdiv_cnt;
 8004960:	fa0f fa87 	sxth.w	sl, r7
        if(border_opa > LV_OPA_MIN && border_w > 0) {
 8004964:	9b02      	ldr	r3, [sp, #8]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d926      	bls.n	80049b8 <draw_div_lines+0x268>
 800496a:	9b06      	ldr	r3, [sp, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dd25      	ble.n	80049bc <draw_div_lines+0x26c>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	f013 0f04 	tst.w	r3, #4
 8004976:	d114      	bne.n	80049a2 <draw_div_lines+0x252>
        i_start = 0;
 8004978:	2500      	movs	r5, #0
            if((border_side & LV_BORDER_SIDE_RIGHT) && (lv_obj_get_style_pad_right(obj, LV_PART_MAIN) == 0)) i_end--;
 800497a:	9b03      	ldr	r3, [sp, #12]
 800497c:	f013 0f08 	tst.w	r3, #8
 8004980:	d04b      	beq.n	8004a1a <draw_div_lines+0x2ca>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8004982:	2213      	movs	r2, #19
 8004984:	2100      	movs	r1, #0
 8004986:	4620      	mov	r0, r4
 8004988:	f017 feb4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800498c:	b200      	sxth	r0, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d143      	bne.n	8004a1a <draw_div_lines+0x2ca>
 8004992:	3f01      	subs	r7, #1
 8004994:	fa0f fa87 	sxth.w	sl, r7
 8004998:	e03f      	b.n	8004a1a <draw_div_lines+0x2ca>
 800499a:	f8cd 801c 	str.w	r8, [sp, #28]
 800499e:	46b0      	mov	r8, r6
 80049a0:	e7c3      	b.n	800492a <draw_div_lines+0x1da>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80049a2:	2212      	movs	r2, #18
 80049a4:	2100      	movs	r1, #0
 80049a6:	4620      	mov	r0, r4
 80049a8:	f017 fea4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80049ac:	b200      	sxth	r0, r0
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 80049ae:	b108      	cbz	r0, 80049b4 <draw_div_lines+0x264>
        i_start = 0;
 80049b0:	2500      	movs	r5, #0
 80049b2:	e7e2      	b.n	800497a <draw_div_lines+0x22a>
            if((border_side & LV_BORDER_SIDE_LEFT) && (lv_obj_get_style_pad_left(obj, LV_PART_MAIN) == 0)) i_start++;
 80049b4:	2501      	movs	r5, #1
 80049b6:	e7e0      	b.n	800497a <draw_div_lines+0x22a>
        i_start = 0;
 80049b8:	2500      	movs	r5, #0
 80049ba:	e02e      	b.n	8004a1a <draw_div_lines+0x2ca>
 80049bc:	2500      	movs	r5, #0
        for(i = i_start; i < i_end; i++) {
 80049be:	e02c      	b.n	8004a1a <draw_div_lines+0x2ca>
            p1.x = (int32_t)((int32_t)w * i) / (chart->vdiv_cnt - 1);
 80049c0:	fb08 f305 	mul.w	r3, r8, r5
 80049c4:	f8b4 2080 	ldrh.w	r2, [r4, #128]	@ 0x80
 80049c8:	3a01      	subs	r2, #1
 80049ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ce:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
            p1.x += x_ofs;
 80049d2:	fa19 f383 	uxtah	r3, r9, r3
 80049d6:	b21b      	sxth	r3, r3
 80049d8:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
            p2.x = p1.x;
 80049dc:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
            part_draw_dsc.class_p = MY_CLASS;
 80049e0:	4b16      	ldr	r3, [pc, #88]	@ (8004a3c <draw_div_lines+0x2ec>)
 80049e2:	930a      	str	r3, [sp, #40]	@ 0x28
            part_draw_dsc.type = LV_CHART_DRAW_PART_DIV_LINE_VER;
 80049e4:	2302      	movs	r3, #2
 80049e6:	930b      	str	r3, [sp, #44]	@ 0x2c
            part_draw_dsc.p1 = &p1;
 80049e8:	af1f      	add	r7, sp, #124	@ 0x7c
 80049ea:	9712      	str	r7, [sp, #72]	@ 0x48
            part_draw_dsc.p2 = &p2;
 80049ec:	f10d 0b78 	add.w	fp, sp, #120	@ 0x78
 80049f0:	f8cd b04c 	str.w	fp, [sp, #76]	@ 0x4c
            part_draw_dsc.id = i;
 80049f4:	9517      	str	r5, [sp, #92]	@ 0x5c
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80049f6:	aa09      	add	r2, sp, #36	@ 0x24
 80049f8:	211a      	movs	r1, #26
 80049fa:	4620      	mov	r0, r4
 80049fc:	f00c f964 	bl	8010cc8 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8004a00:	465b      	mov	r3, fp
 8004a02:	463a      	mov	r2, r7
 8004a04:	a91b      	add	r1, sp, #108	@ 0x6c
 8004a06:	4630      	mov	r0, r6
 8004a08:	f003 fe60 	bl	80086cc <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8004a0c:	aa09      	add	r2, sp, #36	@ 0x24
 8004a0e:	211b      	movs	r1, #27
 8004a10:	4620      	mov	r0, r4
 8004a12:	f00c f959 	bl	8010cc8 <lv_event_send>
        for(i = i_start; i < i_end; i++) {
 8004a16:	3501      	adds	r5, #1
 8004a18:	b22d      	sxth	r5, r5
 8004a1a:	4555      	cmp	r5, sl
 8004a1c:	dbd0      	blt.n	80049c0 <draw_div_lines+0x270>
    part_draw_dsc.id = 0xFFFFFFFF;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a22:	9317      	str	r3, [sp, #92]	@ 0x5c
    part_draw_dsc.p1 = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	9312      	str	r3, [sp, #72]	@ 0x48
    part_draw_dsc.p2 = NULL;
 8004a28:	9313      	str	r3, [sp, #76]	@ 0x4c
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8004a2a:	aa09      	add	r2, sp, #36	@ 0x24
 8004a2c:	211b      	movs	r1, #27
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f00c f94a 	bl	8010cc8 <lv_event_send>
    draw_ctx->clip_area = clip_area_ori;
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	60b3      	str	r3, [r6, #8]
 8004a38:	e696      	b.n	8004768 <draw_div_lines+0x18>
 8004a3a:	bf00      	nop
 8004a3c:	08029f70 	.word	0x08029f70

08004a40 <lv_chart_destructor>:
{
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	460d      	mov	r5, r1
    while(chart->series_ll.head) {
 8004a44:	e006      	b.n	8004a54 <lv_chart_destructor+0x14>
        _lv_ll_remove(&chart->series_ll, ser);
 8004a46:	4621      	mov	r1, r4
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f011 fdcc 	bl	80165e6 <_lv_ll_remove>
        lv_mem_free(ser);
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f011 ff80 	bl	8016954 <lv_mem_free>
    while(chart->series_ll.head) {
 8004a54:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8004a56:	b16b      	cbz	r3, 8004a74 <lv_chart_destructor+0x34>
        ser = _lv_ll_get_head(&chart->series_ll);
 8004a58:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f011 fd80 	bl	8016562 <_lv_ll_get_head>
 8004a62:	4604      	mov	r4, r0
        if(!ser->y_ext_buf_assigned) lv_mem_free(ser->y_points);
 8004a64:	7b03      	ldrb	r3, [r0, #12]
 8004a66:	f013 0f04 	tst.w	r3, #4
 8004a6a:	d1ec      	bne.n	8004a46 <lv_chart_destructor+0x6>
 8004a6c:	6840      	ldr	r0, [r0, #4]
 8004a6e:	f011 ff71 	bl	8016954 <lv_mem_free>
 8004a72:	e7e8      	b.n	8004a46 <lv_chart_destructor+0x6>
    _lv_ll_clear(&chart->series_ll);
 8004a74:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8004a78:	f011 fdf7 	bl	801666a <_lv_ll_clear>
    while(chart->cursor_ll.head) {
 8004a7c:	e00c      	b.n	8004a98 <lv_chart_destructor+0x58>
        cur = _lv_ll_get_head(&chart->cursor_ll);
 8004a7e:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 8004a82:	4630      	mov	r0, r6
 8004a84:	f011 fd6d 	bl	8016562 <_lv_ll_get_head>
 8004a88:	4604      	mov	r4, r0
        _lv_ll_remove(&chart->cursor_ll, cur);
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	f011 fdaa 	bl	80165e6 <_lv_ll_remove>
        lv_mem_free(cur);
 8004a92:	4620      	mov	r0, r4
 8004a94:	f011 ff5e 	bl	8016954 <lv_mem_free>
    while(chart->cursor_ll.head) {
 8004a98:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ef      	bne.n	8004a7e <lv_chart_destructor+0x3e>
    _lv_ll_clear(&chart->cursor_ll);
 8004a9e:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8004aa2:	f011 fde2 	bl	801666a <_lv_ll_clear>
}
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}

08004aa8 <lv_chart_constructor>:
{
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	460c      	mov	r4, r1
    _lv_ll_init(&chart->series_ll, sizeof(lv_chart_series_t));
 8004aac:	2110      	movs	r1, #16
 8004aae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004ab2:	f011 fd10 	bl	80164d6 <_lv_ll_init>
    _lv_ll_init(&chart->cursor_ll, sizeof(lv_chart_cursor_t));
 8004ab6:	2110      	movs	r1, #16
 8004ab8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8004abc:	f011 fd0b 	bl	80164d6 <_lv_ll_init>
    chart->ymin[0] = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
    chart->xmin[0] = 0;
 8004ac6:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
    chart->ymin[1] = 0;
 8004aca:	f8a4 306e 	strh.w	r3, [r4, #110]	@ 0x6e
    chart->xmin[1] = 0;
 8004ace:	f8a4 3076 	strh.w	r3, [r4, #118]	@ 0x76
    chart->ymax[0] = 100;
 8004ad2:	2264      	movs	r2, #100	@ 0x64
 8004ad4:	f8a4 2070 	strh.w	r2, [r4, #112]	@ 0x70
    chart->xmax[0] = 100;
 8004ad8:	f8a4 2078 	strh.w	r2, [r4, #120]	@ 0x78
    chart->ymax[1] = 100;
 8004adc:	f8a4 2072 	strh.w	r2, [r4, #114]	@ 0x72
    chart->xmax[1] = 100;
 8004ae0:	f8a4 207a 	strh.w	r2, [r4, #122]	@ 0x7a
    chart->hdiv_cnt    = LV_CHART_HDIV_DEF;
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	f8a4 207e 	strh.w	r2, [r4, #126]	@ 0x7e
    chart->vdiv_cnt    = LV_CHART_VDIV_DEF;
 8004aea:	2205      	movs	r2, #5
 8004aec:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
    chart->point_cnt   = LV_CHART_POINT_CNT_DEF;
 8004af0:	220a      	movs	r2, #10
 8004af2:	f8a4 2082 	strh.w	r2, [r4, #130]	@ 0x82
    chart->pressed_point_id  = LV_CHART_POINT_NONE;
 8004af6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004afa:	f8a4 207c 	strh.w	r2, [r4, #124]	@ 0x7c
    chart->type        = LV_CHART_TYPE_LINE;
 8004afe:	f894 2088 	ldrb.w	r2, [r4, #136]	@ 0x88
 8004b02:	2101      	movs	r1, #1
 8004b04:	f361 0202 	bfi	r2, r1, #0, #3
 8004b08:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
    chart->update_mode = LV_CHART_UPDATE_MODE_SHIFT;
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	f363 02c3 	bfi	r2, r3, #3, #1
 8004b12:	f884 2088 	strb.w	r2, [r4, #136]	@ 0x88
    chart->zoom_x      = LV_IMG_ZOOM_NONE;
 8004b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b1a:	f8a4 3084 	strh.w	r3, [r4, #132]	@ 0x84
    chart->zoom_y      = LV_IMG_ZOOM_NONE;
 8004b1e:	f8a4 3086 	strh.w	r3, [r4, #134]	@ 0x86
}
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <lv_chart_get_x_start_point>:
    LV_ASSERT_NULL(ser);
 8004b24:	b131      	cbz	r1, 8004b34 <lv_chart_get_x_start_point+0x10>
    return chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8004b26:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 8004b2a:	f013 0f08 	tst.w	r3, #8
 8004b2e:	d102      	bne.n	8004b36 <lv_chart_get_x_start_point+0x12>
 8004b30:	8948      	ldrh	r0, [r1, #10]
 8004b32:	4770      	bx	lr
    LV_ASSERT_NULL(ser);
 8004b34:	e7fe      	b.n	8004b34 <lv_chart_get_x_start_point+0x10>
    return chart->update_mode == LV_CHART_UPDATE_MODE_SHIFT ? ser->start_point : 0;
 8004b36:	2000      	movs	r0, #0
}
 8004b38:	4770      	bx	lr
	...

08004b3c <draw_series_line>:
{
 8004b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	b0bf      	sub	sp, #252	@ 0xfc
 8004b42:	4681      	mov	r9, r0
 8004b44:	460d      	mov	r5, r1
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 8004b46:	f100 0414 	add.w	r4, r0, #20
 8004b4a:	688a      	ldr	r2, [r1, #8]
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	a83c      	add	r0, sp, #240	@ 0xf0
 8004b50:	f7fc ff50 	bl	80019f4 <_lv_area_intersect>
 8004b54:	2800      	cmp	r0, #0
 8004b56:	d054      	beq.n	8004c02 <draw_series_line+0xc6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8004b58:	f8d5 a008 	ldr.w	sl, [r5, #8]
    draw_ctx->clip_area = &clip_area;
 8004b5c:	ab3c      	add	r3, sp, #240	@ 0xf0
 8004b5e:	950a      	str	r5, [sp, #40]	@ 0x28
 8004b60:	60ab      	str	r3, [r5, #8]
    if(chart->point_cnt < 2) return;
 8004b62:	f8b9 3082 	ldrh.w	r3, [r9, #130]	@ 0x82
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d94b      	bls.n	8004c02 <draw_series_line+0xc6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8004b6a:	2232      	movs	r2, #50	@ 0x32
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4648      	mov	r0, r9
 8004b70:	f017 fdc0 	bl	801c6f4 <lv_obj_get_style_prop>
 8004b74:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004b76:	2212      	movs	r2, #18
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4648      	mov	r0, r9
 8004b7c:	f017 fdba 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8004b80:	b2bf      	uxth	r7, r7
 8004b82:	fa17 f680 	uxtah	r6, r7, r0
 8004b86:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8004b88:	2210      	movs	r2, #16
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4648      	mov	r0, r9
 8004b8e:	f017 fdb1 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8004b92:	fa17 f580 	uxtah	r5, r7, r0
 8004b96:	b2ad      	uxth	r5, r5
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8004b98:	4648      	mov	r0, r9
 8004b9a:	f014 fdb3 	bl	8019704 <lv_obj_get_content_width>
 8004b9e:	f8b9 3084 	ldrh.w	r3, [r9, #132]	@ 0x84
 8004ba2:	fb03 f000 	mul.w	r0, r3, r0
 8004ba6:	f340 230f 	sbfx	r3, r0, #8, #16
 8004baa:	9301      	str	r3, [sp, #4]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8004bac:	4648      	mov	r0, r9
 8004bae:	f014 fdc9 	bl	8019744 <lv_obj_get_content_height>
 8004bb2:	f8b9 3086 	ldrh.w	r3, [r9, #134]	@ 0x86
 8004bb6:	fb03 f000 	mul.w	r0, r3, r0
 8004bba:	1203      	asrs	r3, r0, #8
 8004bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8004bbe:	f340 230f 	sbfx	r3, r0, #8, #16
 8004bc2:	9304      	str	r3, [sp, #16]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8004bc4:	f8b9 3014 	ldrh.w	r3, [r9, #20]
 8004bc8:	441e      	add	r6, r3
 8004bca:	b2b6      	uxth	r6, r6
 8004bcc:	4648      	mov	r0, r9
 8004bce:	f016 f97b 	bl	801aec8 <lv_obj_get_scroll_left>
 8004bd2:	b280      	uxth	r0, r0
 8004bd4:	1a36      	subs	r6, r6, r0
 8004bd6:	b2b3      	uxth	r3, r6
 8004bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bda:	fa0f fb86 	sxth.w	fp, r6
    lv_coord_t y_ofs = obj->coords.y1 + pad_top - lv_obj_get_scroll_top(obj);
 8004bde:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8004be2:	441d      	add	r5, r3
 8004be4:	b2ad      	uxth	r5, r5
 8004be6:	4648      	mov	r0, r9
 8004be8:	f016 f90e 	bl	801ae08 <lv_obj_get_scroll_top>
 8004bec:	b280      	uxth	r0, r0
 8004bee:	1a2d      	subs	r5, r5, r0
 8004bf0:	b2ab      	uxth	r3, r5
 8004bf2:	9303      	str	r3, [sp, #12]
    bool mask_ret = _lv_area_intersect(&series_clip_area, &obj->coords, draw_ctx->clip_area);
 8004bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bf6:	6892      	ldr	r2, [r2, #8]
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	a838      	add	r0, sp, #224	@ 0xe0
 8004bfc:	f7fc fefa 	bl	80019f4 <_lv_area_intersect>
    if(mask_ret == false) return;
 8004c00:	b910      	cbnz	r0, 8004c08 <draw_series_line+0xcc>
}
 8004c02:	b03f      	add	sp, #252	@ 0xfc
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_draw_line_dsc_init(&line_dsc_default);
 8004c08:	a835      	add	r0, sp, #212	@ 0xd4
 8004c0a:	f003 fd4a 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 8004c0e:	aa35      	add	r2, sp, #212	@ 0xd4
 8004c10:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8004c14:	4648      	mov	r0, r9
 8004c16:	f014 fa4c 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 8004c1a:	a827      	add	r0, sp, #156	@ 0x9c
 8004c1c:	f005 f818 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 8004c20:	aa27      	add	r2, sp, #156	@ 0x9c
 8004c22:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8004c26:	4648      	mov	r0, r9
 8004c28:	f014 f84c 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8004c32:	4648      	mov	r0, r9
 8004c34:	f017 fd5e 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8004c38:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8004c3c:	fa03 f080 	sxtah	r0, r3, r0
 8004c40:	ea4f 0860 	mov.w	r8, r0, asr #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8004c44:	2204      	movs	r2, #4
 8004c46:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8004c4a:	4648      	mov	r0, r9
 8004c4c:	f017 fd52 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8004c50:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8004c54:	fa03 f080 	sxtah	r0, r3, r0
 8004c58:	1043      	asrs	r3, r0, #1
 8004c5a:	930e      	str	r3, [sp, #56]	@ 0x38
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4543      	cmp	r3, r8
 8004c60:	bfa8      	it	ge
 8004c62:	4642      	movge	r2, r8
 8004c64:	f9bd 30d6 	ldrsh.w	r3, [sp, #214]	@ 0xd6
 8004c68:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 8004c6c:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 8004c70:	dd05      	ble.n	8004c7e <draw_series_line+0x142>
 8004c72:	f89d 20dd 	ldrb.w	r2, [sp, #221]	@ 0xdd
 8004c76:	f042 0210 	orr.w	r2, r2, #16
 8004c7a:	f88d 20dd 	strb.w	r2, [sp, #221]	@ 0xdd
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d009      	beq.n	8004c96 <draw_series_line+0x15a>
    bool crowded_mode = chart->point_cnt >= w ? true : false;
 8004c82:	f8b9 3082 	ldrh.w	r3, [r9, #130]	@ 0x82
 8004c86:	930b      	str	r3, [sp, #44]	@ 0x2c
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8004c88:	f109 0524 	add.w	r5, r9, #36	@ 0x24
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f011 fc6c 	bl	801656a <_lv_ll_get_tail>
 8004c92:	4607      	mov	r7, r0
 8004c94:	e10e      	b.n	8004eb4 <draw_series_line+0x378>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 8004c96:	f89d 30dd 	ldrb.w	r3, [sp, #221]	@ 0xdd
 8004c9a:	f043 0310 	orr.w	r3, r3, #16
 8004c9e:	f88d 30dd 	strb.w	r3, [sp, #221]	@ 0xdd
 8004ca2:	e7ee      	b.n	8004c82 <draw_series_line+0x146>
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f8ad 30ea 	strh.w	r3, [sp, #234]	@ 0xea
 8004cac:	e0d5      	b.n	8004e5a <draw_series_line+0x31e>
                    point_area.x1 = p1.x - point_w;
 8004cae:	b289      	uxth	r1, r1
 8004cb0:	fa1f f388 	uxth.w	r3, r8
 8004cb4:	1aca      	subs	r2, r1, r3
 8004cb6:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
                    point_area.x2 = p1.x + point_w;
 8004cba:	4419      	add	r1, r3
 8004cbc:	f8ad 1050 	strh.w	r1, [sp, #80]	@ 0x50
                    point_area.y1 = p1.y - point_h;
 8004cc0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8004cc4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8004cc8:	1ac2      	subs	r2, r0, r3
 8004cca:	f8ad 204e 	strh.w	r2, [sp, #78]	@ 0x4e
                    point_area.y2 = p1.y + point_h;
 8004cce:	4418      	add	r0, r3
 8004cd0:	f8ad 0052 	strh.w	r0, [sp, #82]	@ 0x52
                    part_draw_dsc.id = i - 1;
 8004cd4:	9b06      	ldr	r3, [sp, #24]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	9323      	str	r3, [sp, #140]	@ 0x8c
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	9a02      	ldr	r2, [sp, #8]
 8004cde:	0054      	lsls	r4, r2, #1
 8004ce0:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8004ce4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	f000 80c4 	beq.w	8004e76 <draw_series_line+0x33a>
 8004cee:	ab3b      	add	r3, sp, #236	@ 0xec
 8004cf0:	931e      	str	r3, [sp, #120]	@ 0x78
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
 8004cf8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	f000 80bc 	beq.w	8004e7a <draw_series_line+0x33e>
 8004d02:	ab3a      	add	r3, sp, #232	@ 0xe8
 8004d04:	931f      	str	r3, [sp, #124]	@ 0x7c
                    part_draw_dsc.draw_area = &point_area;
 8004d06:	ab13      	add	r3, sp, #76	@ 0x4c
 8004d08:	9318      	str	r3, [sp, #96]	@ 0x60
                    part_draw_dsc.value = ser->y_points[p_prev];
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	5f1b      	ldrsh	r3, [r3, r4]
 8004d0e:	9325      	str	r3, [sp, #148]	@ 0x94
                    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8004d10:	aa15      	add	r2, sp, #84	@ 0x54
 8004d12:	211a      	movs	r1, #26
 8004d14:	4648      	mov	r0, r9
 8004d16:	f00b ffd7 	bl	8010cc8 <lv_event_send>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	5f19      	ldrsh	r1, [r3, r4]
 8004d1e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004d22:	4291      	cmp	r1, r2
 8004d24:	d006      	beq.n	8004d34 <draw_series_line+0x1f8>
 8004d26:	f933 2015 	ldrsh.w	r2, [r3, r5, lsl #1]
 8004d2a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	f040 80a5 	bne.w	8004e7e <draw_series_line+0x342>
                    if(point_w && point_h && ser->y_points[p_prev] != LV_CHART_POINT_NONE) {
 8004d34:	f1b8 0f00 	cmp.w	r8, #0
 8004d38:	d008      	beq.n	8004d4c <draw_series_line+0x210>
 8004d3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d3c:	b133      	cbz	r3, 8004d4c <draw_series_line+0x210>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	5f1a      	ldrsh	r2, [r3, r4]
 8004d42:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004d46:	429a      	cmp	r2, r3
 8004d48:	f040 80a0 	bne.w	8004e8c <draw_series_line+0x350>
                    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8004d4c:	aa15      	add	r2, sp, #84	@ 0x54
 8004d4e:	211b      	movs	r1, #27
 8004d50:	4648      	mov	r0, r9
 8004d52:	f00b ffb9 	bl	8010cc8 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 8004d56:	3601      	adds	r6, #1
 8004d58:	b2b6      	uxth	r6, r6
            p_act = (start_point + i) % chart->point_cnt;
 8004d5a:	9502      	str	r5, [sp, #8]
        for(i = 0; i < chart->point_cnt; i++) {
 8004d5c:	f8b9 2082 	ldrh.w	r2, [r9, #130]	@ 0x82
 8004d60:	42b2      	cmp	r2, r6
 8004d62:	f240 8099 	bls.w	8004e98 <draw_series_line+0x35c>
            p1.x = p2.x;
 8004d66:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	@ 0xe8
 8004d6a:	f8ad 10ec 	strh.w	r1, [sp, #236]	@ 0xec
            p1.y = p2.y;
 8004d6e:	f9bd 30ea 	ldrsh.w	r3, [sp, #234]	@ 0xea
 8004d72:	9305      	str	r3, [sp, #20]
 8004d74:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
            if(p1.x > clip_area_ori->x2 + point_w + 1) break;
 8004d78:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 8004d7c:	4443      	add	r3, r8
 8004d7e:	3301      	adds	r3, #1
 8004d80:	4299      	cmp	r1, r3
 8004d82:	f300 8089 	bgt.w	8004e98 <draw_series_line+0x35c>
            p2.x = ((w * i) / (chart->point_cnt - 1)) + x_ofs;
 8004d86:	9606      	str	r6, [sp, #24]
 8004d88:	9b01      	ldr	r3, [sp, #4]
 8004d8a:	fb06 f303 	mul.w	r3, r6, r3
 8004d8e:	1e54      	subs	r4, r2, #1
 8004d90:	fb93 f3f4 	sdiv	r3, r3, r4
 8004d94:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8004d96:	4423      	add	r3, r4
 8004d98:	fa1f fe83 	uxth.w	lr, r3
 8004d9c:	b21b      	sxth	r3, r3
 8004d9e:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
            p_act = (start_point + i) % chart->point_cnt;
 8004da2:	9c08      	ldr	r4, [sp, #32]
 8004da4:	19a5      	adds	r5, r4, r6
 8004da6:	fb95 f4f2 	sdiv	r4, r5, r2
 8004daa:	fb02 5514 	mls	r5, r2, r4, r5
 8004dae:	b22d      	sxth	r5, r5
            y_tmp = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 8004db0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8004db4:	f93c 4015 	ldrsh.w	r4, [ip, r5, lsl #1]
 8004db8:	7b3a      	ldrb	r2, [r7, #12]
 8004dba:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004dbe:	f102 0b34 	add.w	fp, r2, #52	@ 0x34
 8004dc2:	eb09 0b4b 	add.w	fp, r9, fp, lsl #1
 8004dc6:	f9bb b004 	ldrsh.w	fp, [fp, #4]
 8004dca:	eba4 040b 	sub.w	r4, r4, fp
 8004dce:	9804      	ldr	r0, [sp, #16]
 8004dd0:	fb00 f404 	mul.w	r4, r0, r4
            y_tmp = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8004dd4:	3238      	adds	r2, #56	@ 0x38
 8004dd6:	f939 2012 	ldrsh.w	r2, [r9, r2, lsl #1]
 8004dda:	eba2 020b 	sub.w	r2, r2, fp
 8004dde:	fb94 f4f2 	sdiv	r4, r4, r2
            p2.y  = h - y_tmp + y_ofs;
 8004de2:	9807      	ldr	r0, [sp, #28]
 8004de4:	1b04      	subs	r4, r0, r4
 8004de6:	9803      	ldr	r0, [sp, #12]
 8004de8:	fa10 f484 	uxtah	r4, r0, r4
 8004dec:	b224      	sxth	r4, r4
 8004dee:	f8ad 40ea 	strh.w	r4, [sp, #234]	@ 0xea
            if(p2.x < clip_area_ori->x1 - point_w - 1) {
 8004df2:	f9ba 2000 	ldrsh.w	r2, [sl]
 8004df6:	eba2 0208 	sub.w	r2, r2, r8
 8004dfa:	3a01      	subs	r2, #1
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	dbaa      	blt.n	8004d56 <draw_series_line+0x21a>
            if(i != 0) {
 8004e00:	2e00      	cmp	r6, #0
 8004e02:	d0a8      	beq.n	8004d56 <draw_series_line+0x21a>
                if(crowded_mode) {
 8004e04:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004e06:	9a01      	ldr	r2, [sp, #4]
 8004e08:	4290      	cmp	r0, r2
 8004e0a:	f6ff af50 	blt.w	8004cae <draw_series_line+0x172>
                    if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8004e0e:	9a02      	ldr	r2, [sp, #8]
 8004e10:	f93c 0012 	ldrsh.w	r0, [ip, r2, lsl #1]
 8004e14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004e18:	4290      	cmp	r0, r2
 8004e1a:	d09c      	beq.n	8004d56 <draw_series_line+0x21a>
 8004e1c:	f93c 0015 	ldrsh.w	r0, [ip, r5, lsl #1]
 8004e20:	4290      	cmp	r0, r2
 8004e22:	d098      	beq.n	8004d56 <draw_series_line+0x21a>
                        y_max = LV_MAX(y_max, p2.y);
 8004e24:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e26:	42a2      	cmp	r2, r4
 8004e28:	bfb8      	it	lt
 8004e2a:	4622      	movlt	r2, r4
 8004e2c:	920c      	str	r2, [sp, #48]	@ 0x30
                        y_min = LV_MIN(y_min, p2.y);
 8004e2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	bfa8      	it	ge
 8004e34:	4620      	movge	r0, r4
 8004e36:	900d      	str	r0, [sp, #52]	@ 0x34
                        if(p1.x != p2.x) {
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d08c      	beq.n	8004d56 <draw_series_line+0x21a>
                            p2.x--;         /*It's already on the next x value*/
 8004e3c:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 8004e40:	fa0f fe8e 	sxth.w	lr, lr
 8004e44:	f8ad e0e8 	strh.w	lr, [sp, #232]	@ 0xe8
                            p1.x = p2.x;
 8004e48:	f8ad e0ec 	strh.w	lr, [sp, #236]	@ 0xec
                            p1.y = y_min;
 8004e4c:	f8ad 00ee 	strh.w	r0, [sp, #238]	@ 0xee
                            p2.y = y_max;
 8004e50:	f8ad 20ea 	strh.w	r2, [sp, #234]	@ 0xea
                            if(p1.y == p2.y) p2.y++;    /*If they are the same no line will be drawn*/
 8004e54:	4282      	cmp	r2, r0
 8004e56:	f43f af25 	beq.w	8004ca4 <draw_series_line+0x168>
                            lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 8004e5a:	ab3a      	add	r3, sp, #232	@ 0xe8
 8004e5c:	aa3b      	add	r2, sp, #236	@ 0xec
 8004e5e:	a935      	add	r1, sp, #212	@ 0xd4
 8004e60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e62:	f003 fc33 	bl	80086cc <lv_draw_line>
                            p2.x++;         /*Compensate the previous x--*/
 8004e66:	f9bd 30e8 	ldrsh.w	r3, [sp, #232]	@ 0xe8
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
                            y_max = y_cur;
 8004e70:	940c      	str	r4, [sp, #48]	@ 0x30
                            y_min = y_cur;  /*Start the line of the next x from the current last y*/
 8004e72:	940d      	str	r4, [sp, #52]	@ 0x34
 8004e74:	e76f      	b.n	8004d56 <draw_series_line+0x21a>
                    part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e73a      	b.n	8004cf0 <draw_series_line+0x1b4>
                    part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e742      	b.n	8004d04 <draw_series_line+0x1c8>
                        lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 8004e7e:	ab3a      	add	r3, sp, #232	@ 0xe8
 8004e80:	aa3b      	add	r2, sp, #236	@ 0xec
 8004e82:	a935      	add	r1, sp, #212	@ 0xd4
 8004e84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e86:	f003 fc21 	bl	80086cc <lv_draw_line>
 8004e8a:	e753      	b.n	8004d34 <draw_series_line+0x1f8>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 8004e8c:	aa13      	add	r2, sp, #76	@ 0x4c
 8004e8e:	a927      	add	r1, sp, #156	@ 0x9c
 8004e90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e92:	f004 ff1f 	bl	8009cd4 <lv_draw_rect>
 8004e96:	e759      	b.n	8004d4c <draw_series_line+0x210>
        if(!crowded_mode && i == chart->point_cnt) {
 8004e98:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8004e9a:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 8004e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ea0:	9901      	ldr	r1, [sp, #4]
 8004ea2:	428b      	cmp	r3, r1
 8004ea4:	da01      	bge.n	8004eaa <draw_series_line+0x36e>
 8004ea6:	42b2      	cmp	r2, r6
 8004ea8:	d053      	beq.n	8004f52 <draw_series_line+0x416>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8004eaa:	4639      	mov	r1, r7
 8004eac:	4628      	mov	r0, r5
 8004eae:	f011 fb64 	bl	801657a <_lv_ll_get_prev>
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	2f00      	cmp	r7, #0
 8004eb6:	f000 8083 	beq.w	8004fc0 <draw_series_line+0x484>
        if(ser->hidden) continue;
 8004eba:	7b3b      	ldrb	r3, [r7, #12]
 8004ebc:	f013 0f01 	tst.w	r3, #1
 8004ec0:	d1f3      	bne.n	8004eaa <draw_series_line+0x36e>
        line_dsc_default.color = ser->color;
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
        point_dsc_default.bg_color = ser->color;
 8004ec8:	f8ad 30a0 	strh.w	r3, [sp, #160]	@ 0xa0
        lv_coord_t start_point = lv_chart_get_x_start_point(obj, ser);
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4648      	mov	r0, r9
 8004ed0:	f7ff fe28 	bl	8004b24 <lv_chart_get_x_start_point>
 8004ed4:	b204      	sxth	r4, r0
 8004ed6:	9408      	str	r4, [sp, #32]
        p1.x = x_ofs;
 8004ed8:	f8ad b0ec 	strh.w	fp, [sp, #236]	@ 0xec
        p2.x = x_ofs;
 8004edc:	f8ad b0e8 	strh.w	fp, [sp, #232]	@ 0xe8
        int32_t y_tmp = (int32_t)((int32_t)ser->y_points[p_prev] - chart->ymin[ser->y_axis_sec]) * h;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 8004ee6:	7b3a      	ldrb	r2, [r7, #12]
 8004ee8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8004eec:	f102 0134 	add.w	r1, r2, #52	@ 0x34
 8004ef0:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8004ef4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8004ef8:	1a5b      	subs	r3, r3, r1
 8004efa:	9804      	ldr	r0, [sp, #16]
 8004efc:	fb00 f303 	mul.w	r3, r0, r3
        y_tmp  = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 8004f00:	3238      	adds	r2, #56	@ 0x38
 8004f02:	f939 2012 	ldrsh.w	r2, [r9, r2, lsl #1]
 8004f06:	1a52      	subs	r2, r2, r1
 8004f08:	fb93 f3f2 	sdiv	r3, r3, r2
        p2.y   = h - y_tmp + y_ofs;
 8004f0c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 8004f10:	9207      	str	r2, [sp, #28]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	9a03      	ldr	r2, [sp, #12]
 8004f16:	fa12 f383 	uxtah	r3, r2, r3
 8004f1a:	f8ad 30ea 	strh.w	r3, [sp, #234]	@ 0xea
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8004f1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f20:	a815      	add	r0, sp, #84	@ 0x54
 8004f22:	f014 f9d4 	bl	80192ce <lv_obj_draw_dsc_init>
        part_draw_dsc.class_p = MY_CLASS;
 8004f26:	4b28      	ldr	r3, [pc, #160]	@ (8004fc8 <draw_series_line+0x48c>)
 8004f28:	9316      	str	r3, [sp, #88]	@ 0x58
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	9317      	str	r3, [sp, #92]	@ 0x5c
        part_draw_dsc.part = LV_PART_ITEMS;
 8004f2e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004f32:	9322      	str	r3, [sp, #136]	@ 0x88
        part_draw_dsc.line_dsc = &line_dsc_default;
 8004f34:	ab35      	add	r3, sp, #212	@ 0xd4
 8004f36:	931b      	str	r3, [sp, #108]	@ 0x6c
        part_draw_dsc.rect_dsc = &point_dsc_default;
 8004f38:	ab27      	add	r3, sp, #156	@ 0x9c
 8004f3a:	9319      	str	r3, [sp, #100]	@ 0x64
        part_draw_dsc.sub_part_ptr = ser;
 8004f3c:	9726      	str	r7, [sp, #152]	@ 0x98
        lv_coord_t y_min = p2.y;
 8004f3e:	f9bd 30ea 	ldrsh.w	r3, [sp, #234]	@ 0xea
 8004f42:	930d      	str	r3, [sp, #52]	@ 0x34
        lv_coord_t y_max = p2.y;
 8004f44:	930c      	str	r3, [sp, #48]	@ 0x30
        lv_coord_t p_act = start_point;
 8004f46:	9402      	str	r4, [sp, #8]
        for(i = 0; i < chart->point_cnt; i++) {
 8004f48:	2600      	movs	r6, #0
 8004f4a:	950f      	str	r5, [sp, #60]	@ 0x3c
 8004f4c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 8004f50:	e704      	b.n	8004d5c <draw_series_line+0x220>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	9802      	ldr	r0, [sp, #8]
 8004f56:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8004f5a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d0a3      	beq.n	8004eaa <draw_series_line+0x36e>
                point_area.x1 = p2.x - point_w;
 8004f62:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 8004f66:	fa1f f288 	uxth.w	r2, r8
 8004f6a:	1a99      	subs	r1, r3, r2
 8004f6c:	f8ad 104c 	strh.w	r1, [sp, #76]	@ 0x4c
                point_area.x2 = p2.x + point_w;
 8004f70:	4413      	add	r3, r2
 8004f72:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
                point_area.y1 = p2.y - point_h;
 8004f76:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	@ 0xea
 8004f7a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8004f7e:	1a99      	subs	r1, r3, r2
 8004f80:	f8ad 104e 	strh.w	r1, [sp, #78]	@ 0x4e
                point_area.y2 = p2.y + point_h;
 8004f84:	4413      	add	r3, r2
 8004f86:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
                part_draw_dsc.id = i - 1;
 8004f8a:	3e01      	subs	r6, #1
 8004f8c:	9623      	str	r6, [sp, #140]	@ 0x8c
                part_draw_dsc.p1 = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	931e      	str	r3, [sp, #120]	@ 0x78
                part_draw_dsc.p2 = NULL;
 8004f92:	931f      	str	r3, [sp, #124]	@ 0x7c
                part_draw_dsc.draw_area = &point_area;
 8004f94:	ac13      	add	r4, sp, #76	@ 0x4c
 8004f96:	9418      	str	r4, [sp, #96]	@ 0x60
                part_draw_dsc.value = ser->y_points[p_act];
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8004f9e:	9325      	str	r3, [sp, #148]	@ 0x94
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8004fa0:	aa15      	add	r2, sp, #84	@ 0x54
 8004fa2:	211a      	movs	r1, #26
 8004fa4:	4648      	mov	r0, r9
 8004fa6:	f00b fe8f 	bl	8010cc8 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 8004faa:	4622      	mov	r2, r4
 8004fac:	a927      	add	r1, sp, #156	@ 0x9c
 8004fae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004fb0:	f004 fe90 	bl	8009cd4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8004fb4:	aa15      	add	r2, sp, #84	@ 0x54
 8004fb6:	211b      	movs	r1, #27
 8004fb8:	4648      	mov	r0, r9
 8004fba:	f00b fe85 	bl	8010cc8 <lv_event_send>
 8004fbe:	e774      	b.n	8004eaa <draw_series_line+0x36e>
    draw_ctx->clip_area = clip_area_ori;
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc2:	f8c3 a008 	str.w	sl, [r3, #8]
 8004fc6:	e61c      	b.n	8004c02 <draw_series_line+0xc6>
 8004fc8:	08029f70 	.word	0x08029f70

08004fcc <draw_series_bar>:
{
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	b0af      	sub	sp, #188	@ 0xbc
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	9104      	str	r1, [sp, #16]
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 8004fd8:	688a      	ldr	r2, [r1, #8]
 8004fda:	f100 0114 	add.w	r1, r0, #20
 8004fde:	a82c      	add	r0, sp, #176	@ 0xb0
 8004fe0:	f7fc fd08 	bl	80019f4 <_lv_area_intersect>
 8004fe4:	b910      	cbnz	r0, 8004fec <draw_series_bar+0x20>
}
 8004fe6:	b02f      	add	sp, #188	@ 0xbc
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8004fec:	f8d4 b008 	ldr.w	fp, [r4, #8]
    draw_ctx->clip_area = &clip_area;
 8004ff0:	ab2c      	add	r3, sp, #176	@ 0xb0
 8004ff2:	60a3      	str	r3, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8004ff4:	2212      	movs	r2, #18
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f017 fb7b 	bl	801c6f4 <lv_obj_get_style_prop>
 8004ffe:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005000:	2210      	movs	r2, #16
 8005002:	2100      	movs	r1, #0
 8005004:	4630      	mov	r0, r6
 8005006:	f017 fb75 	bl	801c6f4 <lv_obj_get_style_prop>
 800500a:	4604      	mov	r4, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800500c:	4630      	mov	r0, r6
 800500e:	f014 fb79 	bl	8019704 <lv_obj_get_content_width>
 8005012:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8005016:	fb00 f303 	mul.w	r3, r0, r3
 800501a:	f343 230f 	sbfx	r3, r3, #8, #16
 800501e:	9306      	str	r3, [sp, #24]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8005020:	4630      	mov	r0, r6
 8005022:	f014 fb8f 	bl	8019744 <lv_obj_get_content_height>
 8005026:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	121a      	asrs	r2, r3, #8
 8005030:	9201      	str	r2, [sp, #4]
 8005032:	f343 220f 	sbfx	r2, r3, #8, #16
 8005036:	9203      	str	r2, [sp, #12]
    uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 8005038:	f106 0724 	add.w	r7, r6, #36	@ 0x24
 800503c:	4638      	mov	r0, r7
 800503e:	f011 fb2a 	bl	8016696 <_lv_ll_get_len>
 8005042:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8005044:	2215      	movs	r2, #21
 8005046:	2100      	movs	r1, #0
 8005048:	4630      	mov	r0, r6
 800504a:	f017 fb53 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800504e:	b203      	sxth	r3, r0
                                                              LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the column on ~adjacent X*/
 8005050:	f8b6 2084 	ldrh.w	r2, [r6, #132]	@ 0x84
 8005054:	fb02 f303 	mul.w	r3, r2, r3
    int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8005058:	121b      	asrs	r3, r3, #8
    lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 800505a:	f8b6 1082 	ldrh.w	r1, [r6, #130]	@ 0x82
 800505e:	1e4a      	subs	r2, r1, #1
 8005060:	9806      	ldr	r0, [sp, #24]
 8005062:	fb03 0312 	mls	r3, r3, r2, r0
 8005066:	fb93 f3f1 	sdiv	r3, r3, r1
 800506a:	b21b      	sxth	r3, r3
 800506c:	9307      	str	r3, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800506e:	2215      	movs	r2, #21
 8005070:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8005074:	4630      	mov	r0, r6
 8005076:	f017 fb3d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800507a:	fa0f f880 	sxth.w	r8, r0
                                                            LV_PART_ITEMS) * chart->zoom_x) >> 8; /*Gap between the columns on the ~same X*/
 800507e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8005082:	fb03 f808 	mul.w	r8, r3, r8
    int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj,
 8005086:	ea4f 2828 	mov.w	r8, r8, asr #8
    lv_coord_t col_w = (block_w - (ser_cnt - 1) * ser_gap) / ser_cnt;
 800508a:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
 800508e:	9a07      	ldr	r2, [sp, #28]
 8005090:	fb03 2318 	mls	r3, r3, r8, r2
 8005094:	fbb3 f3f9 	udiv	r3, r3, r9
 8005098:	b21b      	sxth	r3, r3
 800509a:	9300      	str	r3, [sp, #0]
    if(col_w < 1) col_w  = 1;
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd41      	ble.n	8005124 <draw_series_bar+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80050a0:	2232      	movs	r2, #50	@ 0x32
 80050a2:	2100      	movs	r1, #0
 80050a4:	4630      	mov	r0, r6
 80050a6:	f017 fb25 	bl	801c6f4 <lv_obj_get_style_prop>
 80050aa:	4681      	mov	r9, r0
    lv_coord_t x_ofs = pad_left - lv_obj_get_scroll_left(obj) + border_w;
 80050ac:	4630      	mov	r0, r6
 80050ae:	f015 ff0b 	bl	801aec8 <lv_obj_get_scroll_left>
 80050b2:	b283      	uxth	r3, r0
 80050b4:	1aeb      	subs	r3, r5, r3
 80050b6:	fa1f f989 	uxth.w	r9, r9
 80050ba:	fa19 f383 	uxtah	r3, r9, r3
 80050be:	b29d      	uxth	r5, r3
    lv_coord_t y_ofs = pad_top - lv_obj_get_scroll_top(obj) + border_w;
 80050c0:	4630      	mov	r0, r6
 80050c2:	f015 fea1 	bl	801ae08 <lv_obj_get_scroll_top>
 80050c6:	b283      	uxth	r3, r0
 80050c8:	1ae3      	subs	r3, r4, r3
 80050ca:	fa19 f383 	uxtah	r3, r9, r3
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	9302      	str	r3, [sp, #8]
    lv_draw_rect_dsc_init(&col_dsc);
 80050d2:	a81c      	add	r0, sp, #112	@ 0x70
 80050d4:	f004 fdbc 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &col_dsc);
 80050d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80050da:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80050de:	4630      	mov	r0, r6
 80050e0:	f013 fdf0 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    col_dsc.bg_grad.dir = LV_GRAD_DIR_NONE;
 80050e4:	f89d 307f 	ldrb.w	r3, [sp, #127]	@ 0x7f
 80050e8:	f023 0307 	bic.w	r3, r3, #7
 80050ec:	f88d 307f 	strb.w	r3, [sp, #127]	@ 0x7f
    col_dsc.bg_opa = LV_OPA_COVER;
 80050f0:	23ff      	movs	r3, #255	@ 0xff
 80050f2:	f88d 3073 	strb.w	r3, [sp, #115]	@ 0x73
    col_a.y2 = obj->coords.y2 + col_dsc.radius;
 80050f6:	8b73      	ldrh	r3, [r6, #26]
 80050f8:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 80050fc:	4413      	add	r3, r2
 80050fe:	f8ad 30ae 	strh.w	r3, [sp, #174]	@ 0xae
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8005102:	9904      	ldr	r1, [sp, #16]
 8005104:	a80a      	add	r0, sp, #40	@ 0x28
 8005106:	f014 f8e2 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 800510a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800510e:	9317      	str	r3, [sp, #92]	@ 0x5c
    part_draw_dsc.class_p = MY_CLASS;
 8005110:	4b58      	ldr	r3, [pc, #352]	@ (8005274 <draw_series_bar+0x2a8>)
 8005112:	930b      	str	r3, [sp, #44]	@ 0x2c
    part_draw_dsc.type = LV_CHART_DRAW_PART_BAR;
 8005114:	2304      	movs	r3, #4
 8005116:	930c      	str	r3, [sp, #48]	@ 0x30
    for(i = 0; i < chart->point_cnt; i++) {
 8005118:	f04f 0a00 	mov.w	sl, #0
 800511c:	9508      	str	r5, [sp, #32]
 800511e:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005122:	e083      	b.n	800522c <draw_series_bar+0x260>
    if(col_w < 1) col_w  = 1;
 8005124:	2301      	movs	r3, #1
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	e7ba      	b.n	80050a0 <draw_series_bar+0xd4>
                part_draw_dsc.draw_area = &col_a;
 800512a:	f10d 09a8 	add.w	r9, sp, #168	@ 0xa8
 800512e:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
                part_draw_dsc.rect_dsc = &col_dsc;
 8005132:	ad1c      	add	r5, sp, #112	@ 0x70
 8005134:	950e      	str	r5, [sp, #56]	@ 0x38
                part_draw_dsc.sub_part_ptr = ser;
 8005136:	941b      	str	r4, [sp, #108]	@ 0x6c
                part_draw_dsc.value = ser->y_points[p_act];
 8005138:	6863      	ldr	r3, [r4, #4]
 800513a:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 800513e:	931a      	str	r3, [sp, #104]	@ 0x68
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8005140:	aa0a      	add	r2, sp, #40	@ 0x28
 8005142:	211a      	movs	r1, #26
 8005144:	4630      	mov	r0, r6
 8005146:	f00b fdbf 	bl	8010cc8 <lv_event_send>
                lv_draw_rect(draw_ctx, &col_dsc, &col_a);
 800514a:	464a      	mov	r2, r9
 800514c:	4629      	mov	r1, r5
 800514e:	9804      	ldr	r0, [sp, #16]
 8005150:	f004 fdc0 	bl	8009cd4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8005154:	aa0a      	add	r2, sp, #40	@ 0x28
 8005156:	211b      	movs	r1, #27
 8005158:	4630      	mov	r0, r6
 800515a:	f00b fdb5 	bl	8010cc8 <lv_event_send>
            x_act += col_w + ser_gap;
 800515e:	46d1      	mov	r9, sl
 8005160:	e000      	b.n	8005164 <draw_series_bar+0x198>
 8005162:	46d1      	mov	r9, sl
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 8005164:	4621      	mov	r1, r4
 8005166:	4638      	mov	r0, r7
 8005168:	f011 fa07 	bl	801657a <_lv_ll_get_prev>
 800516c:	4604      	mov	r4, r0
 800516e:	2c00      	cmp	r4, #0
 8005170:	d056      	beq.n	8005220 <draw_series_bar+0x254>
            if(ser->hidden) continue;
 8005172:	7b23      	ldrb	r3, [r4, #12]
 8005174:	f013 0f01 	tst.w	r3, #1
 8005178:	d1f4      	bne.n	8005164 <draw_series_bar+0x198>
            lv_coord_t start_point = lv_chart_get_x_start_point(obj, ser);
 800517a:	4621      	mov	r1, r4
 800517c:	4630      	mov	r0, r6
 800517e:	f7ff fcd1 	bl	8004b24 <lv_chart_get_x_start_point>
 8005182:	b200      	sxth	r0, r0
            col_a.x1 = x_act;
 8005184:	f8ad 90a8 	strh.w	r9, [sp, #168]	@ 0xa8
            col_a.x2 = col_a.x1 + col_w - 1;
 8005188:	fa1f f289 	uxth.w	r2, r9
 800518c:	f8bd a000 	ldrh.w	sl, [sp]
 8005190:	eb02 030a 	add.w	r3, r2, sl
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b21b      	sxth	r3, r3
 800519a:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
            x_act += col_w + ser_gap;
 800519e:	44c2      	add	sl, r8
 80051a0:	fa12 fa8a 	uxtah	sl, r2, sl
 80051a4:	fa0f fa8a 	sxth.w	sl, sl
            if(col_a.x2 < clip_area.x1) continue;
 80051a8:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	@ 0xb0
 80051ac:	4293      	cmp	r3, r2
 80051ae:	dbd8      	blt.n	8005162 <draw_series_bar+0x196>
            if(col_a.x1 > clip_area.x2) break;
 80051b0:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	@ 0xb4
 80051b4:	454b      	cmp	r3, r9
 80051b6:	db33      	blt.n	8005220 <draw_series_bar+0x254>
            col_dsc.bg_color = ser->color;
 80051b8:	8923      	ldrh	r3, [r4, #8]
 80051ba:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
            lv_coord_t p_act = (start_point + i) % chart->point_cnt;
 80051be:	4458      	add	r0, fp
 80051c0:	f8b6 3082 	ldrh.w	r3, [r6, #130]	@ 0x82
 80051c4:	fb90 f2f3 	sdiv	r2, r0, r3
 80051c8:	fb03 0012 	mls	r0, r3, r2, r0
 80051cc:	b200      	sxth	r0, r0
            y_tmp            = (int32_t)((int32_t)ser->y_points[p_act] - chart->ymin[ser->y_axis_sec]) * h;
 80051ce:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80051d2:	f93c 3010 	ldrsh.w	r3, [ip, r0, lsl #1]
 80051d6:	7b21      	ldrb	r1, [r4, #12]
 80051d8:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80051dc:	f101 0534 	add.w	r5, r1, #52	@ 0x34
 80051e0:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80051e4:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
 80051e8:	1b5b      	subs	r3, r3, r5
 80051ea:	9a03      	ldr	r2, [sp, #12]
 80051ec:	fb02 f303 	mul.w	r3, r2, r3
            y_tmp            = y_tmp / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 80051f0:	3138      	adds	r1, #56	@ 0x38
 80051f2:	f936 1011 	ldrsh.w	r1, [r6, r1, lsl #1]
 80051f6:	1b49      	subs	r1, r1, r5
 80051f8:	fb93 f3f1 	sdiv	r3, r3, r1
            col_a.y1         = h - y_tmp + obj->coords.y1 + y_ofs;
 80051fc:	9a01      	ldr	r2, [sp, #4]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	8af1      	ldrh	r1, [r6, #22]
 8005202:	fa11 f383 	uxtah	r3, r1, r3
 8005206:	9a02      	ldr	r2, [sp, #8]
 8005208:	fa12 f383 	uxtah	r3, r2, r3
 800520c:	f8ad 30aa 	strh.w	r3, [sp, #170]	@ 0xaa
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8005210:	f93c 2010 	ldrsh.w	r2, [ip, r0, lsl #1]
 8005214:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005218:	429a      	cmp	r2, r3
 800521a:	d186      	bne.n	800512a <draw_series_bar+0x15e>
            x_act += col_w + ser_gap;
 800521c:	46d1      	mov	r9, sl
 800521e:	e7a1      	b.n	8005164 <draw_series_bar+0x198>
    for(i = 0; i < chart->point_cnt; i++) {
 8005220:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005224:	f10a 0a01 	add.w	sl, sl, #1
 8005228:	fa1f fa8a 	uxth.w	sl, sl
 800522c:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 8005230:	4552      	cmp	r2, sl
 8005232:	d919      	bls.n	8005268 <draw_series_bar+0x29c>
        lv_coord_t x_act = (int32_t)((int32_t)(w - block_w) * i) / (chart->point_cnt - 1) + obj->coords.x1 + x_ofs;
 8005234:	9b06      	ldr	r3, [sp, #24]
 8005236:	9907      	ldr	r1, [sp, #28]
 8005238:	1a5b      	subs	r3, r3, r1
 800523a:	46d3      	mov	fp, sl
 800523c:	fb0a f303 	mul.w	r3, sl, r3
 8005240:	3a01      	subs	r2, #1
 8005242:	fb93 f3f2 	sdiv	r3, r3, r2
 8005246:	f8b6 9014 	ldrh.w	r9, [r6, #20]
 800524a:	4499      	add	r9, r3
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	fa13 f989 	uxtah	r9, r3, r9
 8005252:	fa0f f989 	sxth.w	r9, r9
        part_draw_dsc.id = i;
 8005256:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
        _LV_LL_READ_BACK(&chart->series_ll, ser) {
 800525a:	4638      	mov	r0, r7
 800525c:	f011 f985 	bl	801656a <_lv_ll_get_tail>
 8005260:	4604      	mov	r4, r0
 8005262:	f8cd a014 	str.w	sl, [sp, #20]
 8005266:	e782      	b.n	800516e <draw_series_bar+0x1a2>
    draw_ctx->clip_area = clip_area_ori;
 8005268:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800526c:	9b04      	ldr	r3, [sp, #16]
 800526e:	f8c3 b008 	str.w	fp, [r3, #8]
 8005272:	e6b8      	b.n	8004fe6 <draw_series_bar+0x1a>
 8005274:	08029f70 	.word	0x08029f70

08005278 <draw_series_scatter>:
{
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	b0b7      	sub	sp, #220	@ 0xdc
 800527e:	4607      	mov	r7, r0
 8005280:	460c      	mov	r4, r1
 8005282:	9108      	str	r1, [sp, #32]
    if(_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area) == false) return;
 8005284:	688a      	ldr	r2, [r1, #8]
 8005286:	f100 0114 	add.w	r1, r0, #20
 800528a:	a834      	add	r0, sp, #208	@ 0xd0
 800528c:	f7fc fbb2 	bl	80019f4 <_lv_area_intersect>
 8005290:	b910      	cbnz	r0, 8005298 <draw_series_scatter+0x20>
}
 8005292:	b037      	add	sp, #220	@ 0xdc
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8005298:	f8d4 a008 	ldr.w	sl, [r4, #8]
    draw_ctx->clip_area = &clip_area;
 800529c:	ab34      	add	r3, sp, #208	@ 0xd0
 800529e:	60a3      	str	r3, [r4, #8]
 80052a0:	2232      	movs	r2, #50	@ 0x32
 80052a2:	2100      	movs	r1, #0
 80052a4:	4638      	mov	r0, r7
 80052a6:	f017 fa25 	bl	801c6f4 <lv_obj_get_style_prop>
 80052aa:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80052ac:	2212      	movs	r2, #18
 80052ae:	2100      	movs	r1, #0
 80052b0:	4638      	mov	r0, r7
 80052b2:	f017 fa1f 	bl	801c6f4 <lv_obj_get_style_prop>
 80052b6:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80052b8:	2210      	movs	r2, #16
 80052ba:	2100      	movs	r1, #0
 80052bc:	4638      	mov	r0, r7
 80052be:	f017 fa19 	bl	801c6f4 <lv_obj_get_style_prop>
 80052c2:	4605      	mov	r5, r0
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80052c4:	4638      	mov	r0, r7
 80052c6:	f014 fa1d 	bl	8019704 <lv_obj_get_content_width>
 80052ca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80052ce:	fb03 f000 	mul.w	r0, r3, r0
 80052d2:	f340 230f 	sbfx	r3, r0, #8, #16
 80052d6:	9304      	str	r3, [sp, #16]
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80052d8:	4638      	mov	r0, r7
 80052da:	f014 fa33 	bl	8019744 <lv_obj_get_content_height>
 80052de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052e2:	fb03 fb00 	mul.w	fp, r3, r0
 80052e6:	ea4f 232b 	mov.w	r3, fp, asr #8
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	f34b 230f 	sbfx	r3, fp, #8, #16
 80052f0:	9305      	str	r3, [sp, #20]
    lv_coord_t x_ofs = obj->coords.x1 + pad_left + border_width - lv_obj_get_scroll_left(obj);
 80052f2:	8abb      	ldrh	r3, [r7, #20]
 80052f4:	441e      	add	r6, r3
 80052f6:	b2a4      	uxth	r4, r4
 80052f8:	fa14 f686 	uxtah	r6, r4, r6
 80052fc:	b2b6      	uxth	r6, r6
 80052fe:	4638      	mov	r0, r7
 8005300:	f015 fde2 	bl	801aec8 <lv_obj_get_scroll_left>
 8005304:	b280      	uxth	r0, r0
 8005306:	1a36      	subs	r6, r6, r0
 8005308:	fa1f fb86 	uxth.w	fp, r6
 800530c:	b233      	sxth	r3, r6
 800530e:	930a      	str	r3, [sp, #40]	@ 0x28
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8005310:	8afb      	ldrh	r3, [r7, #22]
 8005312:	442b      	add	r3, r5
 8005314:	fa14 f483 	uxtah	r4, r4, r3
 8005318:	b2a4      	uxth	r4, r4
 800531a:	4638      	mov	r0, r7
 800531c:	f015 fd74 	bl	801ae08 <lv_obj_get_scroll_top>
 8005320:	b280      	uxth	r0, r0
 8005322:	1a24      	subs	r4, r4, r0
 8005324:	b2a3      	uxth	r3, r4
 8005326:	9303      	str	r3, [sp, #12]
    lv_draw_line_dsc_init(&line_dsc_default);
 8005328:	a82f      	add	r0, sp, #188	@ 0xbc
 800532a:	f003 f9ba 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc_default);
 800532e:	aa2f      	add	r2, sp, #188	@ 0xbc
 8005330:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8005334:	4638      	mov	r0, r7
 8005336:	f013 febc 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_default);
 800533a:	a821      	add	r0, sp, #132	@ 0x84
 800533c:	f004 fc88 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &point_dsc_default);
 8005340:	aa21      	add	r2, sp, #132	@ 0x84
 8005342:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8005346:	4638      	mov	r0, r7
 8005348:	f013 fcbc 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800534c:	2201      	movs	r2, #1
 800534e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8005352:	4638      	mov	r0, r7
 8005354:	f017 f9ce 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8005358:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800535c:	fa03 f080 	sxtah	r0, r3, r0
 8005360:	1044      	asrs	r4, r0, #1
 8005362:	9406      	str	r4, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8005364:	2204      	movs	r2, #4
 8005366:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800536a:	4638      	mov	r0, r7
 800536c:	f017 f9c2 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8005370:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8005374:	fa03 f080 	sxtah	r0, r3, r0
 8005378:	1043      	asrs	r3, r0, #1
 800537a:	9307      	str	r3, [sp, #28]
    if(LV_MIN(point_w, point_h) > line_dsc_default.width / 2) line_dsc_default.raw_end = 1;
 800537c:	4622      	mov	r2, r4
 800537e:	429c      	cmp	r4, r3
 8005380:	bfa8      	it	ge
 8005382:	461a      	movge	r2, r3
 8005384:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	@ 0xbe
 8005388:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 800538c:	ebb2 0f61 	cmp.w	r2, r1, asr #1
 8005390:	dd05      	ble.n	800539e <draw_series_scatter+0x126>
 8005392:	f89d 20c5 	ldrb.w	r2, [sp, #197]	@ 0xc5
 8005396:	f042 0210 	orr.w	r2, r2, #16
 800539a:	f88d 20c5 	strb.w	r2, [sp, #197]	@ 0xc5
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d008      	beq.n	80053b4 <draw_series_scatter+0x13c>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80053a2:	f107 0824 	add.w	r8, r7, #36	@ 0x24
 80053a6:	4640      	mov	r0, r8
 80053a8:	f011 f8df 	bl	801656a <_lv_ll_get_tail>
 80053ac:	4606      	mov	r6, r0
 80053ae:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 80053b2:	e107      	b.n	80055c4 <draw_series_scatter+0x34c>
    if(line_dsc_default.width == 1) line_dsc_default.raw_end = 1;
 80053b4:	f89d 30c5 	ldrb.w	r3, [sp, #197]	@ 0xc5
 80053b8:	f043 0310 	orr.w	r3, r3, #16
 80053bc:	f88d 30c5 	strb.w	r3, [sp, #197]	@ 0xc5
 80053c0:	e7ef      	b.n	80053a2 <draw_series_scatter+0x12a>
            p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80053c2:	6833      	ldr	r3, [r6, #0]
 80053c4:	f933 001a 	ldrsh.w	r0, [r3, sl, lsl #1]
 80053c8:	7b33      	ldrb	r3, [r6, #12]
 80053ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053d2:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80053d6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	2300      	movs	r3, #0
 80053e0:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
 80053e4:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80053e8:	f011 fa51 	bl	801688e <lv_map>
 80053ec:	f8ad 00c8 	strh.w	r0, [sp, #200]	@ 0xc8
            p2.x += x_ofs;
 80053f0:	fa1b f080 	uxtah	r0, fp, r0
 80053f4:	f8ad 00c8 	strh.w	r0, [sp, #200]	@ 0xc8
            p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 80053f8:	6873      	ldr	r3, [r6, #4]
 80053fa:	f933 001a 	ldrsh.w	r0, [r3, sl, lsl #1]
 80053fe:	7b33      	ldrb	r3, [r6, #12]
 8005400:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005404:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005408:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800540c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
 800541a:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800541e:	f011 fa36 	bl	801688e <lv_map>
 8005422:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
            p2.y = h - p2.y;
 8005426:	b283      	uxth	r3, r0
 8005428:	9a02      	ldr	r2, [sp, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f8ad 30ca 	strh.w	r3, [sp, #202]	@ 0xca
            p2.y += y_ofs;
 8005430:	9a03      	ldr	r2, [sp, #12]
 8005432:	fa12 f383 	uxtah	r3, r2, r3
 8005436:	f8ad 30ca 	strh.w	r3, [sp, #202]	@ 0xca
 800543a:	e0e5      	b.n	8005608 <draw_series_scatter+0x390>
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	e080      	b.n	8005542 <draw_series_scatter+0x2ca>
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	e088      	b.n	8005556 <draw_series_scatter+0x2de>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8005444:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005446:	211b      	movs	r1, #27
 8005448:	4638      	mov	r0, r7
 800544a:	f00b fc3d 	bl	8010cc8 <lv_event_send>
        for(i = 0; i < chart->point_cnt; i++) {
 800544e:	3501      	adds	r5, #1
 8005450:	b2ad      	uxth	r5, r5
            p_act = (start_point + i) % chart->point_cnt;
 8005452:	46a1      	mov	r9, r4
        for(i = 0; i < chart->point_cnt; i++) {
 8005454:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005458:	42ab      	cmp	r3, r5
 800545a:	f240 80ab 	bls.w	80055b4 <draw_series_scatter+0x33c>
            p1.x = p2.x;
 800545e:	f9bd 20c8 	ldrsh.w	r2, [sp, #200]	@ 0xc8
 8005462:	f8ad 20cc 	strh.w	r2, [sp, #204]	@ 0xcc
            p1.y = p2.y;
 8005466:	f9bd 20ca 	ldrsh.w	r2, [sp, #202]	@ 0xca
 800546a:	f8ad 20ce 	strh.w	r2, [sp, #206]	@ 0xce
            p_act = (start_point + i) % chart->point_cnt;
 800546e:	eb0a 0405 	add.w	r4, sl, r5
 8005472:	fb94 f2f3 	sdiv	r2, r4, r3
 8005476:	fb03 4412 	mls	r4, r3, r2, r4
 800547a:	b224      	sxth	r4, r4
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800547c:	6873      	ldr	r3, [r6, #4]
 800547e:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 8005482:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005486:	4298      	cmp	r0, r3
 8005488:	d0e1      	beq.n	800544e <draw_series_scatter+0x1d6>
                p2.y = lv_map(ser->y_points[p_act], chart->ymin[ser->y_axis_sec], chart->ymax[ser->y_axis_sec], 0, h);
 800548a:	7b33      	ldrb	r3, [r6, #12]
 800548c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005490:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005494:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 8005498:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800549c:	9b05      	ldr	r3, [sp, #20]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
 80054a6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80054aa:	f011 f9f0 	bl	801688e <lv_map>
 80054ae:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
                p2.y = h - p2.y;
 80054b2:	b280      	uxth	r0, r0
 80054b4:	9b02      	ldr	r3, [sp, #8]
 80054b6:	1a18      	subs	r0, r3, r0
 80054b8:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
                p2.y += y_ofs;
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	fa13 f080 	uxtah	r0, r3, r0
 80054c2:	f8ad 00ca 	strh.w	r0, [sp, #202]	@ 0xca
                p2.x = lv_map(ser->x_points[p_act], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80054c6:	6833      	ldr	r3, [r6, #0]
 80054c8:	f933 0014 	ldrsh.w	r0, [r3, r4, lsl #1]
 80054cc:	7b33      	ldrb	r3, [r6, #12]
 80054ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054d6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80054da:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	2300      	movs	r3, #0
 80054e4:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
 80054e8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80054ec:	f011 f9cf 	bl	801688e <lv_map>
 80054f0:	f8ad 00c8 	strh.w	r0, [sp, #200]	@ 0xc8
                p2.x += x_ofs;
 80054f4:	fa1b f080 	uxtah	r0, fp, r0
 80054f8:	f8ad 00c8 	strh.w	r0, [sp, #200]	@ 0xc8
            if(i != 0) {
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	d0a6      	beq.n	800544e <draw_series_scatter+0x1d6>
                point_area.x1 = p1.x - point_w;
 8005500:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	@ 0xcc
 8005504:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8005508:	1a99      	subs	r1, r3, r2
 800550a:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
                point_area.x2 = p1.x + point_w;
 800550e:	4413      	add	r3, r2
 8005510:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
                point_area.y1 = p1.y - point_h;
 8005514:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	@ 0xce
 8005518:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800551c:	1a99      	subs	r1, r3, r2
 800551e:	f8ad 1036 	strh.w	r1, [sp, #54]	@ 0x36
                point_area.y2 = p1.y + point_h;
 8005522:	4413      	add	r3, r2
 8005524:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
                part_draw_dsc.id = i - 1;
 8005528:	1e6b      	subs	r3, r5, #1
 800552a:	931d      	str	r3, [sp, #116]	@ 0x74
                part_draw_dsc.p1 = ser->y_points[p_prev] != LV_CHART_POINT_NONE ? &p1 : NULL;
 800552c:	6873      	ldr	r3, [r6, #4]
 800552e:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8005532:	f933 2019 	ldrsh.w	r2, [r3, r9, lsl #1]
 8005536:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800553a:	429a      	cmp	r2, r3
 800553c:	f43f af7e 	beq.w	800543c <draw_series_scatter+0x1c4>
 8005540:	ab33      	add	r3, sp, #204	@ 0xcc
 8005542:	9318      	str	r3, [sp, #96]	@ 0x60
                part_draw_dsc.p2 = ser->y_points[p_act] != LV_CHART_POINT_NONE ? &p2 : NULL;
 8005544:	6873      	ldr	r3, [r6, #4]
 8005546:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
 800554a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800554e:	429a      	cmp	r2, r3
 8005550:	f43f af76 	beq.w	8005440 <draw_series_scatter+0x1c8>
 8005554:	ab32      	add	r3, sp, #200	@ 0xc8
 8005556:	9319      	str	r3, [sp, #100]	@ 0x64
                part_draw_dsc.draw_area = &point_area;
 8005558:	ab0d      	add	r3, sp, #52	@ 0x34
 800555a:	9312      	str	r3, [sp, #72]	@ 0x48
                part_draw_dsc.value = ser->y_points[p_prev];
 800555c:	6873      	ldr	r3, [r6, #4]
 800555e:	f933 3008 	ldrsh.w	r3, [r3, r8]
 8005562:	931f      	str	r3, [sp, #124]	@ 0x7c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8005564:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005566:	211a      	movs	r1, #26
 8005568:	4638      	mov	r0, r7
 800556a:	f00b fbad 	bl	8010cc8 <lv_event_send>
                if(ser->y_points[p_prev] != LV_CHART_POINT_NONE && ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 800556e:	6873      	ldr	r3, [r6, #4]
 8005570:	f933 1008 	ldrsh.w	r1, [r3, r8]
 8005574:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005578:	4291      	cmp	r1, r2
 800557a:	f43f af63 	beq.w	8005444 <draw_series_scatter+0x1cc>
 800557e:	f933 2014 	ldrsh.w	r2, [r3, r4, lsl #1]
 8005582:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005586:	429a      	cmp	r2, r3
 8005588:	f43f af5c 	beq.w	8005444 <draw_series_scatter+0x1cc>
                    lv_draw_line(draw_ctx, &line_dsc_default, &p1, &p2);
 800558c:	ab32      	add	r3, sp, #200	@ 0xc8
 800558e:	aa33      	add	r2, sp, #204	@ 0xcc
 8005590:	a92f      	add	r1, sp, #188	@ 0xbc
 8005592:	9808      	ldr	r0, [sp, #32]
 8005594:	f003 f89a 	bl	80086cc <lv_draw_line>
                    if(point_w && point_h) {
 8005598:	9b06      	ldr	r3, [sp, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	f43f af52 	beq.w	8005444 <draw_series_scatter+0x1cc>
 80055a0:	9b07      	ldr	r3, [sp, #28]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f43f af4e 	beq.w	8005444 <draw_series_scatter+0x1cc>
                        lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 80055a8:	aa0d      	add	r2, sp, #52	@ 0x34
 80055aa:	a921      	add	r1, sp, #132	@ 0x84
 80055ac:	9808      	ldr	r0, [sp, #32]
 80055ae:	f004 fb91 	bl	8009cd4 <lv_draw_rect>
 80055b2:	e747      	b.n	8005444 <draw_series_scatter+0x1cc>
        if(i == chart->point_cnt) {
 80055b4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80055b8:	d03b      	beq.n	8005632 <draw_series_scatter+0x3ba>
    _LV_LL_READ_BACK(&chart->series_ll, ser) {
 80055ba:	4631      	mov	r1, r6
 80055bc:	4640      	mov	r0, r8
 80055be:	f010 ffdc 	bl	801657a <_lv_ll_get_prev>
 80055c2:	4606      	mov	r6, r0
 80055c4:	2e00      	cmp	r6, #0
 80055c6:	d06a      	beq.n	800569e <draw_series_scatter+0x426>
        if(ser->hidden) continue;
 80055c8:	7b33      	ldrb	r3, [r6, #12]
 80055ca:	f013 0f01 	tst.w	r3, #1
 80055ce:	d1f4      	bne.n	80055ba <draw_series_scatter+0x342>
        line_dsc_default.color = ser->color;
 80055d0:	8933      	ldrh	r3, [r6, #8]
 80055d2:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
        point_dsc_default.bg_color = ser->color;
 80055d6:	f8ad 3088 	strh.w	r3, [sp, #136]	@ 0x88
        lv_coord_t start_point = lv_chart_get_x_start_point(obj, ser);
 80055da:	4631      	mov	r1, r6
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff faa1 	bl	8004b24 <lv_chart_get_x_start_point>
 80055e2:	fa0f fa80 	sxth.w	sl, r0
        p1.x = x_ofs;
 80055e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055e8:	f8ad 30cc 	strh.w	r3, [sp, #204]	@ 0xcc
        p2.x = x_ofs;
 80055ec:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
        if(ser->y_points[p_act] != LV_CHART_POINT_CNT_DEF) {
 80055f0:	6873      	ldr	r3, [r6, #4]
 80055f2:	f933 301a 	ldrsh.w	r3, [r3, sl, lsl #1]
 80055f6:	2b0a      	cmp	r3, #10
 80055f8:	f47f aee3 	bne.w	80053c2 <draw_series_scatter+0x14a>
            p2.x = LV_COORD_MIN;
 80055fc:	f24e 0301 	movw	r3, #57345	@ 0xe001
 8005600:	f8ad 30c8 	strh.w	r3, [sp, #200]	@ 0xc8
            p2.y = LV_COORD_MIN;
 8005604:	f8ad 30ca 	strh.w	r3, [sp, #202]	@ 0xca
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8005608:	9908      	ldr	r1, [sp, #32]
 800560a:	a80f      	add	r0, sp, #60	@ 0x3c
 800560c:	f013 fe5f 	bl	80192ce <lv_obj_draw_dsc_init>
        part_draw_dsc.part = LV_PART_ITEMS;
 8005610:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8005614:	931c      	str	r3, [sp, #112]	@ 0x70
        part_draw_dsc.class_p = MY_CLASS;
 8005616:	4b25      	ldr	r3, [pc, #148]	@ (80056ac <draw_series_scatter+0x434>)
 8005618:	9310      	str	r3, [sp, #64]	@ 0x40
        part_draw_dsc.type = LV_CHART_DRAW_PART_LINE_AND_POINT;
 800561a:	2303      	movs	r3, #3
 800561c:	9311      	str	r3, [sp, #68]	@ 0x44
        part_draw_dsc.line_dsc = &line_dsc_default;
 800561e:	ab2f      	add	r3, sp, #188	@ 0xbc
 8005620:	9315      	str	r3, [sp, #84]	@ 0x54
        part_draw_dsc.rect_dsc = &point_dsc_default;
 8005622:	ab21      	add	r3, sp, #132	@ 0x84
 8005624:	9313      	str	r3, [sp, #76]	@ 0x4c
        part_draw_dsc.sub_part_ptr = ser;
 8005626:	9620      	str	r6, [sp, #128]	@ 0x80
        lv_coord_t p_act = start_point;
 8005628:	46d1      	mov	r9, sl
        for(i = 0; i < chart->point_cnt; i++) {
 800562a:	2500      	movs	r5, #0
 800562c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8005630:	e710      	b.n	8005454 <draw_series_scatter+0x1dc>
            if(ser->y_points[p_act] != LV_CHART_POINT_NONE) {
 8005632:	6873      	ldr	r3, [r6, #4]
 8005634:	f933 2019 	ldrsh.w	r2, [r3, r9, lsl #1]
 8005638:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800563c:	429a      	cmp	r2, r3
 800563e:	d0bc      	beq.n	80055ba <draw_series_scatter+0x342>
                point_area.x1 = p2.x - point_w;
 8005640:	f8bd 30c8 	ldrh.w	r3, [sp, #200]	@ 0xc8
 8005644:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8005648:	1a99      	subs	r1, r3, r2
 800564a:	f8ad 1034 	strh.w	r1, [sp, #52]	@ 0x34
                point_area.x2 = p2.x + point_w;
 800564e:	4413      	add	r3, r2
 8005650:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
                point_area.y1 = p2.y - point_h;
 8005654:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	@ 0xca
 8005658:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800565c:	1a99      	subs	r1, r3, r2
 800565e:	f8ad 1036 	strh.w	r1, [sp, #54]	@ 0x36
                point_area.y2 = p2.y + point_h;
 8005662:	4413      	add	r3, r2
 8005664:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
                part_draw_dsc.id = i - 1;
 8005668:	3d01      	subs	r5, #1
 800566a:	951d      	str	r5, [sp, #116]	@ 0x74
                part_draw_dsc.p1 = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	9318      	str	r3, [sp, #96]	@ 0x60
                part_draw_dsc.p2 = NULL;
 8005670:	9319      	str	r3, [sp, #100]	@ 0x64
                part_draw_dsc.draw_area = &point_area;
 8005672:	ac0d      	add	r4, sp, #52	@ 0x34
 8005674:	9412      	str	r4, [sp, #72]	@ 0x48
                part_draw_dsc.value = ser->y_points[p_act];
 8005676:	6873      	ldr	r3, [r6, #4]
 8005678:	f933 3019 	ldrsh.w	r3, [r3, r9, lsl #1]
 800567c:	931f      	str	r3, [sp, #124]	@ 0x7c
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800567e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005680:	211a      	movs	r1, #26
 8005682:	4638      	mov	r0, r7
 8005684:	f00b fb20 	bl	8010cc8 <lv_event_send>
                lv_draw_rect(draw_ctx, &point_dsc_default, &point_area);
 8005688:	4622      	mov	r2, r4
 800568a:	a921      	add	r1, sp, #132	@ 0x84
 800568c:	9808      	ldr	r0, [sp, #32]
 800568e:	f004 fb21 	bl	8009cd4 <lv_draw_rect>
                lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8005692:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005694:	211b      	movs	r1, #27
 8005696:	4638      	mov	r0, r7
 8005698:	f00b fb16 	bl	8010cc8 <lv_event_send>
 800569c:	e78d      	b.n	80055ba <draw_series_scatter+0x342>
    draw_ctx->clip_area = clip_area_ori;
 800569e:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 80056a2:	9b08      	ldr	r3, [sp, #32]
 80056a4:	f8c3 a008 	str.w	sl, [r3, #8]
 80056a8:	e5f3      	b.n	8005292 <draw_series_scatter+0x1a>
 80056aa:	bf00      	nop
 80056ac:	08029f70 	.word	0x08029f70

080056b0 <lv_chart_get_point_pos_by_id>:
    LV_ASSERT_NULL(obj);
 80056b0:	b188      	cbz	r0, 80056d6 <lv_chart_get_point_pos_by_id+0x26>
{
 80056b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b6:	b089      	sub	sp, #36	@ 0x24
 80056b8:	460f      	mov	r7, r1
 80056ba:	4615      	mov	r5, r2
 80056bc:	461c      	mov	r4, r3
 80056be:	4606      	mov	r6, r0
    LV_ASSERT_NULL(ser);
 80056c0:	b151      	cbz	r1, 80056d8 <lv_chart_get_point_pos_by_id+0x28>
    if(id >= chart->point_cnt) {
 80056c2:	f8b0 3082 	ldrh.w	r3, [r0, #130]	@ 0x82
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d807      	bhi.n	80056da <lv_chart_get_point_pos_by_id+0x2a>
        p_out->x = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	8023      	strh	r3, [r4, #0]
        p_out->y = 0;
 80056ce:	8063      	strh	r3, [r4, #2]
}
 80056d0:	b009      	add	sp, #36	@ 0x24
 80056d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LV_ASSERT_NULL(obj);
 80056d6:	e7fe      	b.n	80056d6 <lv_chart_get_point_pos_by_id+0x26>
    LV_ASSERT_NULL(ser);
 80056d8:	e7fe      	b.n	80056d8 <lv_chart_get_point_pos_by_id+0x28>
    lv_coord_t w = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 80056da:	f014 f813 	bl	8019704 <lv_obj_get_content_width>
 80056de:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 80056e2:	fb03 f800 	mul.w	r8, r3, r0
 80056e6:	f348 280f 	sbfx	r8, r8, #8, #16
    lv_coord_t h = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 80056ea:	4630      	mov	r0, r6
 80056ec:	f014 f82a 	bl	8019744 <lv_obj_get_content_height>
 80056f0:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 80056f4:	fb03 f900 	mul.w	r9, r3, r0
 80056f8:	ea4f 2a29 	mov.w	sl, r9, asr #8
 80056fc:	f349 290f 	sbfx	r9, r9, #8, #16
    if(chart->type == LV_CHART_TYPE_LINE) {
 8005700:	f896 3088 	ldrb.w	r3, [r6, #136]	@ 0x88
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	2b01      	cmp	r3, #1
 800570a:	d052      	beq.n	80057b2 <lv_chart_get_point_pos_by_id+0x102>
    else if(chart->type == LV_CHART_TYPE_SCATTER) {
 800570c:	2b03      	cmp	r3, #3
 800570e:	d059      	beq.n	80057c4 <lv_chart_get_point_pos_by_id+0x114>
    else if(chart->type == LV_CHART_TYPE_BAR) {
 8005710:	2b02      	cmp	r3, #2
 8005712:	d06e      	beq.n	80057f2 <lv_chart_get_point_pos_by_id+0x142>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005714:	2232      	movs	r2, #50	@ 0x32
 8005716:	2100      	movs	r1, #0
 8005718:	4630      	mov	r0, r6
 800571a:	f016 ffeb 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800571e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005722:	2212      	movs	r2, #18
 8005724:	2100      	movs	r1, #0
 8005726:	4630      	mov	r0, r6
 8005728:	f016 ffe4 	bl	801c6f4 <lv_obj_get_style_prop>
    p_out->x += lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 800572c:	fa08 f280 	sxtah	r2, r8, r0
 8005730:	8823      	ldrh	r3, [r4, #0]
 8005732:	4413      	add	r3, r2
 8005734:	8023      	strh	r3, [r4, #0]
    p_out->x -= lv_obj_get_scroll_left(obj);
 8005736:	4630      	mov	r0, r6
 8005738:	f015 fbc6 	bl	801aec8 <lv_obj_get_scroll_left>
 800573c:	8823      	ldrh	r3, [r4, #0]
 800573e:	b282      	uxth	r2, r0
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	8023      	strh	r3, [r4, #0]
    uint32_t start_point = lv_chart_get_x_start_point(obj, ser);
 8005744:	4639      	mov	r1, r7
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff f9ec 	bl	8004b24 <lv_chart_get_x_start_point>
    id = ((int32_t)start_point + id) % chart->point_cnt;
 800574c:	4405      	add	r5, r0
 800574e:	f8b6 3082 	ldrh.w	r3, [r6, #130]	@ 0x82
 8005752:	fb95 f2f3 	sdiv	r2, r5, r3
 8005756:	fb03 5512 	mls	r5, r3, r2, r5
    temp_y = (int32_t)((int32_t)ser->y_points[id] - chart->ymin[ser->y_axis_sec]) * h;
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	b2ab      	uxth	r3, r5
 800575e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005762:	7b3a      	ldrb	r2, [r7, #12]
 8005764:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005768:	f102 0134 	add.w	r1, r2, #52	@ 0x34
 800576c:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8005770:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8005774:	1a5b      	subs	r3, r3, r1
 8005776:	fb09 f303 	mul.w	r3, r9, r3
    temp_y = temp_y / (chart->ymax[ser->y_axis_sec] - chart->ymin[ser->y_axis_sec]);
 800577a:	3238      	adds	r2, #56	@ 0x38
 800577c:	f936 2012 	ldrsh.w	r2, [r6, r2, lsl #1]
 8005780:	1a52      	subs	r2, r2, r1
 8005782:	fb93 f3f2 	sdiv	r3, r3, r2
    p_out->y = h - temp_y;
 8005786:	ebaa 0a03 	sub.w	sl, sl, r3
 800578a:	f8a4 a002 	strh.w	sl, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800578e:	2210      	movs	r2, #16
 8005790:	2100      	movs	r1, #0
 8005792:	4630      	mov	r0, r6
 8005794:	f016 ffae 	bl	801c6f4 <lv_obj_get_style_prop>
    p_out->y += lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8005798:	fa08 f280 	sxtah	r2, r8, r0
 800579c:	8863      	ldrh	r3, [r4, #2]
 800579e:	4413      	add	r3, r2
 80057a0:	8063      	strh	r3, [r4, #2]
    p_out->y -= lv_obj_get_scroll_top(obj);
 80057a2:	4630      	mov	r0, r6
 80057a4:	f015 fb30 	bl	801ae08 <lv_obj_get_scroll_top>
 80057a8:	8863      	ldrh	r3, [r4, #2]
 80057aa:	b282      	uxth	r2, r0
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	8063      	strh	r3, [r4, #2]
 80057b0:	e78e      	b.n	80056d0 <lv_chart_get_point_pos_by_id+0x20>
        p_out->x = (w * id) / (chart->point_cnt - 1);
 80057b2:	fb05 f308 	mul.w	r3, r5, r8
 80057b6:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 80057ba:	3a01      	subs	r2, #1
 80057bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c0:	8023      	strh	r3, [r4, #0]
 80057c2:	e7a7      	b.n	8005714 <lv_chart_get_point_pos_by_id+0x64>
        p_out->x = lv_map(ser->x_points[id], chart->xmin[ser->x_axis_sec], chart->xmax[ser->x_axis_sec], 0, w);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f933 0015 	ldrsh.w	r0, [r3, r5, lsl #1]
 80057ca:	7b3b      	ldrb	r3, [r7, #12]
 80057cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057d4:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 80057d8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80057dc:	f8cd 8000 	str.w	r8, [sp]
 80057e0:	2300      	movs	r3, #0
 80057e2:	f936 2012 	ldrsh.w	r2, [r6, r2, lsl #1]
 80057e6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80057ea:	f011 f850 	bl	801688e <lv_map>
 80057ee:	8020      	strh	r0, [r4, #0]
 80057f0:	e790      	b.n	8005714 <lv_chart_get_point_pos_by_id+0x64>
        uint32_t ser_cnt = _lv_ll_get_len(&chart->series_ll);
 80057f2:	f106 0324 	add.w	r3, r6, #36	@ 0x24
 80057f6:	469b      	mov	fp, r3
 80057f8:	4618      	mov	r0, r3
 80057fa:	f010 ff4c 	bl	8016696 <_lv_ll_get_len>
 80057fe:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8005800:	2215      	movs	r2, #21
 8005802:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8005806:	4630      	mov	r0, r6
 8005808:	f016 ff74 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 800580c:	b203      	sxth	r3, r0
        int32_t ser_gap = ((int32_t)lv_obj_get_style_pad_column(obj, LV_PART_ITEMS) * chart->zoom_x) >> 8;
 800580e:	f8b6 2084 	ldrh.w	r2, [r6, #132]	@ 0x84
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	121a      	asrs	r2, r3, #8
 8005818:	9204      	str	r2, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 800581a:	2215      	movs	r2, #21
 800581c:	2100      	movs	r1, #0
 800581e:	4630      	mov	r0, r6
 8005820:	f016 ff68 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005824:	b203      	sxth	r3, r0
        int32_t block_gap = ((int32_t)lv_obj_get_style_pad_column(obj, LV_PART_MAIN) * chart->zoom_x) >> 8;
 8005826:	f8b6 2084 	ldrh.w	r2, [r6, #132]	@ 0x84
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	121b      	asrs	r3, r3, #8
 8005830:	4619      	mov	r1, r3
 8005832:	9305      	str	r3, [sp, #20]
        lv_coord_t block_w = (w - ((chart->point_cnt - 1) * block_gap)) / chart->point_cnt;
 8005834:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 8005838:	1e53      	subs	r3, r2, #1
 800583a:	fb01 8313 	mls	r3, r1, r3, r8
 800583e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005842:	b21a      	sxth	r2, r3
 8005844:	9206      	str	r2, [sp, #24]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8005846:	f8cd b008 	str.w	fp, [sp, #8]
 800584a:	4658      	mov	r0, fp
 800584c:	f010 fe8d 	bl	801656a <_lv_ll_get_tail>
 8005850:	4601      	mov	r1, r0
        uint32_t ser_idx = 0;
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	9407      	str	r4, [sp, #28]
 8005858:	9c02      	ldr	r4, [sp, #8]
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 800585a:	b141      	cbz	r1, 800586e <lv_chart_get_point_pos_by_id+0x1be>
            if(ser_i == ser) break;
 800585c:	42b9      	cmp	r1, r7
 800585e:	d006      	beq.n	800586e <lv_chart_get_point_pos_by_id+0x1be>
            ser_idx++;
 8005860:	f10b 0b01 	add.w	fp, fp, #1
        _LV_LL_READ_BACK(&chart->series_ll, ser_i) {
 8005864:	4620      	mov	r0, r4
 8005866:	f010 fe88 	bl	801657a <_lv_ll_get_prev>
 800586a:	4601      	mov	r1, r0
 800586c:	e7f5      	b.n	800585a <lv_chart_get_point_pos_by_id+0x1aa>
        p_out->x = (int32_t)((int32_t)(w + block_gap) * id) / chart->point_cnt;
 800586e:	9c07      	ldr	r4, [sp, #28]
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	4443      	add	r3, r8
 8005874:	fb05 f303 	mul.w	r3, r5, r3
 8005878:	f8b6 2082 	ldrh.w	r2, [r6, #130]	@ 0x82
 800587c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005880:	8023      	strh	r3, [r4, #0]
        p_out->x += block_w * ser_idx / ser_cnt;
 8005882:	9806      	ldr	r0, [sp, #24]
 8005884:	fb0b f200 	mul.w	r2, fp, r0
 8005888:	9903      	ldr	r1, [sp, #12]
 800588a:	fbb2 f2f1 	udiv	r2, r2, r1
 800588e:	fa12 f383 	uxtah	r3, r2, r3
 8005892:	fa1f fc83 	uxth.w	ip, r3
 8005896:	f8a4 c000 	strh.w	ip, [r4]
        lv_coord_t col_w = (block_w - (ser_gap * (ser_cnt - 1))) / ser_cnt;
 800589a:	1e4a      	subs	r2, r1, #1
 800589c:	9b04      	ldr	r3, [sp, #16]
 800589e:	fb02 0213 	mls	r2, r2, r3, r0
 80058a2:	fbb2 f2f1 	udiv	r2, r2, r1
        p_out->x += col_w / 2;
 80058a6:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 80058aa:	fa01 f282 	sxtah	r2, r1, r2
 80058ae:	eb0c 0362 	add.w	r3, ip, r2, asr #1
 80058b2:	8023      	strh	r3, [r4, #0]
 80058b4:	e72e      	b.n	8005714 <lv_chart_get_point_pos_by_id+0x64>
	...

080058b8 <draw_cursors>:
{
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	b0bf      	sub	sp, #252	@ 0xfc
 80058be:	4605      	mov	r5, r0
 80058c0:	4688      	mov	r8, r1
    if(_lv_ll_is_empty(&chart->cursor_ll)) return;
 80058c2:	f100 0930 	add.w	r9, r0, #48	@ 0x30
 80058c6:	4648      	mov	r0, r9
 80058c8:	f010 fef5 	bl	80166b6 <_lv_ll_is_empty>
 80058cc:	9000      	str	r0, [sp, #0]
 80058ce:	b110      	cbz	r0, 80058d6 <draw_cursors+0x1e>
}
 80058d0:	b03f      	add	sp, #252	@ 0xfc
 80058d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!_lv_area_intersect(&clip_area, draw_ctx->clip_area, &obj->coords)) return;
 80058d6:	f105 0214 	add.w	r2, r5, #20
 80058da:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80058de:	a83c      	add	r0, sp, #240	@ 0xf0
 80058e0:	f7fc f888 	bl	80019f4 <_lv_area_intersect>
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0f2      	beq.n	80058d0 <draw_cursors+0x18>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80058ea:	f8d8 7008 	ldr.w	r7, [r8, #8]
    draw_ctx->clip_area = &clip_area;
 80058ee:	ab3c      	add	r3, sp, #240	@ 0xf0
 80058f0:	f8c8 3008 	str.w	r3, [r8, #8]
    lv_draw_line_dsc_init(&line_dsc_ori);
 80058f4:	a837      	add	r0, sp, #220	@ 0xdc
 80058f6:	f002 fed4 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_CURSOR, &line_dsc_ori);
 80058fa:	aa37      	add	r2, sp, #220	@ 0xdc
 80058fc:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8005900:	4628      	mov	r0, r5
 8005902:	f013 fbd6 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    lv_draw_rect_dsc_init(&point_dsc_ori);
 8005906:	a829      	add	r0, sp, #164	@ 0xa4
 8005908:	f004 f9a2 	bl	8009c50 <lv_draw_rect_dsc_init>
    point_dsc_ori.bg_opa = line_dsc_ori.opa;
 800590c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	@ 0xe4
 8005910:	f88d 30a7 	strb.w	r3, [sp, #167]	@ 0xa7
    point_dsc_ori.radius = LV_RADIUS_CIRCLE;
 8005914:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8005918:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 800591c:	2201      	movs	r2, #1
 800591e:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8005922:	4628      	mov	r0, r5
 8005924:	f016 fee6 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_w = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8005928:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800592c:	fa03 f080 	sxtah	r0, r3, r0
 8005930:	ea4f 0a60 	mov.w	sl, r0, asr #1
 8005934:	2201      	movs	r2, #1
 8005936:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 800593a:	4628      	mov	r0, r5
 800593c:	f016 feda 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t point_h = lv_obj_get_style_width(obj, LV_PART_CURSOR) / 2;
 8005940:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8005944:	fa03 f080 	sxtah	r0, r3, r0
 8005948:	1043      	asrs	r3, r0, #1
 800594a:	9301      	str	r3, [sp, #4]
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800594c:	4641      	mov	r1, r8
 800594e:	a806      	add	r0, sp, #24
 8005950:	f013 fcbd 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.line_dsc = &line_dsc_tmp;
 8005954:	ab26      	add	r3, sp, #152	@ 0x98
 8005956:	930c      	str	r3, [sp, #48]	@ 0x30
    part_draw_dsc.rect_dsc = &point_dsc_tmp;
 8005958:	ab18      	add	r3, sp, #96	@ 0x60
 800595a:	930a      	str	r3, [sp, #40]	@ 0x28
    part_draw_dsc.part = LV_PART_CURSOR;
 800595c:	f44f 23e0 	mov.w	r3, #458752	@ 0x70000
 8005960:	9313      	str	r3, [sp, #76]	@ 0x4c
    part_draw_dsc.class_p = MY_CLASS;
 8005962:	4b67      	ldr	r3, [pc, #412]	@ (8005b00 <draw_cursors+0x248>)
 8005964:	9307      	str	r3, [sp, #28]
    part_draw_dsc.type = LV_CHART_DRAW_PART_CURSOR;
 8005966:	2305      	movs	r3, #5
 8005968:	9308      	str	r3, [sp, #32]
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 800596a:	4648      	mov	r0, r9
 800596c:	f010 fdfd 	bl	801656a <_lv_ll_get_tail>
 8005970:	4604      	mov	r4, r0
 8005972:	9703      	str	r7, [sp, #12]
 8005974:	e074      	b.n	8005a60 <draw_cursors+0x1a8>
            if(cursor->point_id == LV_CHART_POINT_NONE) continue;
 8005976:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800597a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800597e:	429a      	cmp	r2, r3
 8005980:	d069      	beq.n	8005a56 <draw_cursors+0x19e>
            lv_chart_get_point_pos_by_id(obj, cursor->ser, cursor->point_id, &p);
 8005982:	ab04      	add	r3, sp, #16
 8005984:	b292      	uxth	r2, r2
 8005986:	68a1      	ldr	r1, [r4, #8]
 8005988:	4628      	mov	r0, r5
 800598a:	f7ff fe91 	bl	80056b0 <lv_chart_get_point_pos_by_id>
            cx = p.x;
 800598e:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
            cy = p.y;
 8005992:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8005996:	e081      	b.n	8005a9c <draw_cursors+0x1e4>
            part_draw_dsc.draw_area = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	9309      	str	r3, [sp, #36]	@ 0x24
        bool draw_point = point_w && point_h;
 800599c:	f8dd b000 	ldr.w	fp, [sp]
        if(cursor->dir & LV_DIR_HOR) {
 80059a0:	7b23      	ldrb	r3, [r4, #12]
 80059a2:	f013 0f03 	tst.w	r3, #3
 80059a6:	d025      	beq.n	80059f4 <draw_cursors+0x13c>
            p1.x = cursor->dir & LV_DIR_LEFT ? obj->coords.x1 : cx;
 80059a8:	f013 0f01 	tst.w	r3, #1
 80059ac:	d100      	bne.n	80059b0 <draw_cursors+0xf8>
 80059ae:	463a      	mov	r2, r7
 80059b0:	f8ad 20ec 	strh.w	r2, [sp, #236]	@ 0xec
            p1.y = cy;
 80059b4:	f8ad 60ee 	strh.w	r6, [sp, #238]	@ 0xee
            p2.x = cursor->dir & LV_DIR_RIGHT ? obj->coords.x2 : cx;
 80059b8:	f013 0f02 	tst.w	r3, #2
 80059bc:	d002      	beq.n	80059c4 <draw_cursors+0x10c>
 80059be:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 80059c2:	e000      	b.n	80059c6 <draw_cursors+0x10e>
 80059c4:	463b      	mov	r3, r7
 80059c6:	f8ad 30e8 	strh.w	r3, [sp, #232]	@ 0xe8
            p2.y = p1.y;
 80059ca:	f8ad 60ea 	strh.w	r6, [sp, #234]	@ 0xea
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80059ce:	aa06      	add	r2, sp, #24
 80059d0:	211a      	movs	r1, #26
 80059d2:	4628      	mov	r0, r5
 80059d4:	f00b f978 	bl	8010cc8 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 80059d8:	ab3a      	add	r3, sp, #232	@ 0xe8
 80059da:	aa3b      	add	r2, sp, #236	@ 0xec
 80059dc:	a926      	add	r1, sp, #152	@ 0x98
 80059de:	4640      	mov	r0, r8
 80059e0:	f002 fe74 	bl	80086cc <lv_draw_line>
            if(draw_point) {
 80059e4:	f1bb 0f00 	cmp.w	fp, #0
 80059e8:	d110      	bne.n	8005a0c <draw_cursors+0x154>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80059ea:	aa06      	add	r2, sp, #24
 80059ec:	211b      	movs	r1, #27
 80059ee:	4628      	mov	r0, r5
 80059f0:	f00b f96a 	bl	8010cc8 <lv_event_send>
        if(cursor->dir & LV_DIR_VER) {
 80059f4:	7b23      	ldrb	r3, [r4, #12]
 80059f6:	f013 0f0c 	tst.w	r3, #12
 80059fa:	d02c      	beq.n	8005a56 <draw_cursors+0x19e>
            p1.x = cx;
 80059fc:	f8ad 70ec 	strh.w	r7, [sp, #236]	@ 0xec
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8005a00:	f013 0f04 	tst.w	r3, #4
 8005a04:	d008      	beq.n	8005a18 <draw_cursors+0x160>
 8005a06:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8005a0a:	e006      	b.n	8005a1a <draw_cursors+0x162>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 8005a0c:	aa04      	add	r2, sp, #16
 8005a0e:	a918      	add	r1, sp, #96	@ 0x60
 8005a10:	4640      	mov	r0, r8
 8005a12:	f004 f95f 	bl	8009cd4 <lv_draw_rect>
 8005a16:	e7e8      	b.n	80059ea <draw_cursors+0x132>
            p1.y = cursor->dir & LV_DIR_TOP ? obj->coords.y1 : cy;
 8005a18:	4632      	mov	r2, r6
 8005a1a:	f8ad 20ee 	strh.w	r2, [sp, #238]	@ 0xee
            p2.x = p1.x;
 8005a1e:	f8ad 70e8 	strh.w	r7, [sp, #232]	@ 0xe8
            p2.y = cursor->dir & LV_DIR_BOTTOM ? obj->coords.y2 : cy;
 8005a22:	f013 0f08 	tst.w	r3, #8
 8005a26:	d001      	beq.n	8005a2c <draw_cursors+0x174>
 8005a28:	f9b5 601a 	ldrsh.w	r6, [r5, #26]
 8005a2c:	f8ad 60ea 	strh.w	r6, [sp, #234]	@ 0xea
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8005a30:	aa06      	add	r2, sp, #24
 8005a32:	211a      	movs	r1, #26
 8005a34:	4628      	mov	r0, r5
 8005a36:	f00b f947 	bl	8010cc8 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc_tmp, &p1, &p2);
 8005a3a:	ab3a      	add	r3, sp, #232	@ 0xe8
 8005a3c:	aa3b      	add	r2, sp, #236	@ 0xec
 8005a3e:	a926      	add	r1, sp, #152	@ 0x98
 8005a40:	4640      	mov	r0, r8
 8005a42:	f002 fe43 	bl	80086cc <lv_draw_line>
            if(draw_point) {
 8005a46:	f1bb 0f00 	cmp.w	fp, #0
 8005a4a:	d14f      	bne.n	8005aec <draw_cursors+0x234>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8005a4c:	aa06      	add	r2, sp, #24
 8005a4e:	211b      	movs	r1, #27
 8005a50:	4628      	mov	r0, r5
 8005a52:	f00b f939 	bl	8010cc8 <lv_event_send>
    _LV_LL_READ_BACK(&chart->cursor_ll, cursor) {
 8005a56:	4621      	mov	r1, r4
 8005a58:	4648      	mov	r0, r9
 8005a5a:	f010 fd8e 	bl	801657a <_lv_ll_get_prev>
 8005a5e:	4604      	mov	r4, r0
 8005a60:	2c00      	cmp	r4, #0
 8005a62:	d049      	beq.n	8005af8 <draw_cursors+0x240>
        lv_memcpy(&line_dsc_tmp, &line_dsc_ori, sizeof(lv_draw_line_dsc_t));
 8005a64:	220a      	movs	r2, #10
 8005a66:	a937      	add	r1, sp, #220	@ 0xdc
 8005a68:	a826      	add	r0, sp, #152	@ 0x98
 8005a6a:	f011 f83d 	bl	8016ae8 <lv_memcpy>
        lv_memcpy(&point_dsc_tmp, &point_dsc_ori, sizeof(lv_draw_rect_dsc_t));
 8005a6e:	2238      	movs	r2, #56	@ 0x38
 8005a70:	a929      	add	r1, sp, #164	@ 0xa4
 8005a72:	a818      	add	r0, sp, #96	@ 0x60
 8005a74:	f011 f838 	bl	8016ae8 <lv_memcpy>
        line_dsc_tmp.color = cursor->color;
 8005a78:	88e3      	ldrh	r3, [r4, #6]
 8005a7a:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
        point_dsc_tmp.bg_color = cursor->color;
 8005a7e:	f8ad 3064 	strh.w	r3, [sp, #100]	@ 0x64
        part_draw_dsc.p1 = &p1;
 8005a82:	ab3b      	add	r3, sp, #236	@ 0xec
 8005a84:	930f      	str	r3, [sp, #60]	@ 0x3c
        part_draw_dsc.p2 = &p2;
 8005a86:	ab3a      	add	r3, sp, #232	@ 0xe8
 8005a88:	9310      	str	r3, [sp, #64]	@ 0x40
        if(cursor->pos_set) {
 8005a8a:	7b63      	ldrb	r3, [r4, #13]
 8005a8c:	f013 0f01 	tst.w	r3, #1
 8005a90:	f43f af71 	beq.w	8005976 <draw_cursors+0xbe>
            cx = cursor->pos.x;
 8005a94:	f9b4 7000 	ldrsh.w	r7, [r4]
            cy = cursor->pos.y;
 8005a98:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
        cx += obj->coords.x1;
 8005a9c:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8005aa0:	fa17 f782 	uxtah	r7, r7, r2
 8005aa4:	b2b9      	uxth	r1, r7
 8005aa6:	b23f      	sxth	r7, r7
        cy += obj->coords.y1;
 8005aa8:	8aee      	ldrh	r6, [r5, #22]
 8005aaa:	441e      	add	r6, r3
 8005aac:	b2b3      	uxth	r3, r6
 8005aae:	b236      	sxth	r6, r6
        bool draw_point = point_w && point_h;
 8005ab0:	f1ba 0f00 	cmp.w	sl, #0
 8005ab4:	f43f af70 	beq.w	8005998 <draw_cursors+0xe0>
 8005ab8:	9801      	ldr	r0, [sp, #4]
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f43f af6c 	beq.w	8005998 <draw_cursors+0xe0>
            point_area.x1 = cx - point_w;
 8005ac0:	fa1f f08a 	uxth.w	r0, sl
 8005ac4:	eba1 0c00 	sub.w	ip, r1, r0
 8005ac8:	f8ad c010 	strh.w	ip, [sp, #16]
            point_area.x2 = cx + point_w;
 8005acc:	4401      	add	r1, r0
 8005ace:	f8ad 1014 	strh.w	r1, [sp, #20]
            point_area.y1 = cy - point_h;
 8005ad2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005ad6:	1a58      	subs	r0, r3, r1
 8005ad8:	f8ad 0012 	strh.w	r0, [sp, #18]
            point_area.y2 = cy + point_h;
 8005adc:	440b      	add	r3, r1
 8005ade:	f8ad 3016 	strh.w	r3, [sp, #22]
            part_draw_dsc.draw_area = &point_area;
 8005ae2:	ab04      	add	r3, sp, #16
 8005ae4:	9309      	str	r3, [sp, #36]	@ 0x24
        bool draw_point = point_w && point_h;
 8005ae6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005aea:	e759      	b.n	80059a0 <draw_cursors+0xe8>
                lv_draw_rect(draw_ctx, &point_dsc_tmp, &point_area);
 8005aec:	aa04      	add	r2, sp, #16
 8005aee:	a918      	add	r1, sp, #96	@ 0x60
 8005af0:	4640      	mov	r0, r8
 8005af2:	f004 f8ef 	bl	8009cd4 <lv_draw_rect>
 8005af6:	e7a9      	b.n	8005a4c <draw_cursors+0x194>
    draw_ctx->clip_area = clip_area_ori;
 8005af8:	9f03      	ldr	r7, [sp, #12]
 8005afa:	f8c8 7008 	str.w	r7, [r8, #8]
 8005afe:	e6e7      	b.n	80058d0 <draw_cursors+0x18>
 8005b00:	08029f70 	.word	0x08029f70

08005b04 <get_tick_gsc>:
}

lv_chart_tick_dsc_t * get_tick_gsc(lv_obj_t * obj, lv_chart_axis_t axis)
{
    lv_chart_t * chart = (lv_chart_t *) obj;
    switch(axis) {
 8005b04:	2904      	cmp	r1, #4
 8005b06:	d80c      	bhi.n	8005b22 <get_tick_gsc+0x1e>
 8005b08:	e8df f001 	tbb	[pc, r1]
 8005b0c:	0b050703 	.word	0x0b050703
 8005b10:	09          	.byte	0x09
 8005b11:	00          	.byte	0x00
        case LV_CHART_AXIS_PRIMARY_Y:
            return &chart->tick[0];
 8005b12:	303c      	adds	r0, #60	@ 0x3c
 8005b14:	4770      	bx	lr
        case LV_CHART_AXIS_PRIMARY_X:
            return &chart->tick[1];
 8005b16:	3048      	adds	r0, #72	@ 0x48
 8005b18:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_Y:
            return &chart->tick[2];
 8005b1a:	3054      	adds	r0, #84	@ 0x54
 8005b1c:	4770      	bx	lr
        case LV_CHART_AXIS_SECONDARY_X:
            return &chart->tick[3];
 8005b1e:	3060      	adds	r0, #96	@ 0x60
 8005b20:	4770      	bx	lr
    switch(axis) {
 8005b22:	2000      	movs	r0, #0
        default:
            return NULL;
    }
}
 8005b24:	4770      	bx	lr
	...

08005b28 <draw_y_ticks>:
{
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	b0b1      	sub	sp, #196	@ 0xc4
 8005b2e:	4604      	mov	r4, r0
 8005b30:	9106      	str	r1, [sp, #24]
 8005b32:	4690      	mov	r8, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8005b34:	4611      	mov	r1, r2
 8005b36:	f7ff ffe5 	bl	8005b04 <get_tick_gsc>
 8005b3a:	4607      	mov	r7, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8005b3c:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	db01      	blt.n	8005b48 <draw_y_ticks+0x20>
 8005b44:	6803      	ldr	r3, [r0, #0]
 8005b46:	b15b      	cbz	r3, 8005b60 <draw_y_ticks+0x38>
    if(t->major_cnt <= 1) return;
 8005b48:	893e      	ldrh	r6, [r7, #8]
 8005b4a:	f3c6 060e 	ubfx	r6, r6, #0, #15
 8005b4e:	2e01      	cmp	r6, #1
 8005b50:	d906      	bls.n	8005b60 <draw_y_ticks+0x38>
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8005b52:	3e01      	subs	r6, #1
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b5a:	fb03 f606 	mul.w	r6, r3, r6
    if(total_tick_num == 0) return;
 8005b5e:	b916      	cbnz	r6, 8005b66 <draw_y_ticks+0x3e>
}
 8005b60:	b031      	add	sp, #196	@ 0xc4
 8005b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_Y ? 0 : 1;
 8005b66:	f1b8 0900 	subs.w	r9, r8, #0
 8005b6a:	bf18      	it	ne
 8005b6c:	f04f 0901 	movne.w	r9, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005b70:	2232      	movs	r2, #50	@ 0x32
 8005b72:	2100      	movs	r1, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	f016 fdbd 	bl	801c6f4 <lv_obj_get_style_prop>
 8005b7a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4620      	mov	r0, r4
 8005b82:	f016 fdb7 	bl	801c6f4 <lv_obj_get_style_prop>
 8005b86:	4682      	mov	sl, r0
    lv_coord_t h     = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f013 fddb 	bl	8019744 <lv_obj_get_content_height>
 8005b8e:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 8005b92:	fb03 f000 	mul.w	r0, r3, r0
 8005b96:	f340 230f 	sbfx	r3, r0, #8, #16
 8005b9a:	9305      	str	r3, [sp, #20]
    lv_coord_t y_ofs = obj->coords.y1 + pad_top + border_width - lv_obj_get_scroll_top(obj);
 8005b9c:	8ae3      	ldrh	r3, [r4, #22]
 8005b9e:	4453      	add	r3, sl
 8005ba0:	fa15 f583 	uxtah	r5, r5, r3
 8005ba4:	b2ad      	uxth	r5, r5
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f015 f92e 	bl	801ae08 <lv_obj_get_scroll_top>
 8005bac:	b280      	uxth	r0, r0
 8005bae:	1a2d      	subs	r5, r5, r0
 8005bb0:	b2ab      	uxth	r3, r5
 8005bb2:	9304      	str	r3, [sp, #16]
    if(axis == LV_CHART_AXIS_PRIMARY_Y) {
 8005bb4:	f1b8 0f00 	cmp.w	r8, #0
 8005bb8:	d13a      	bne.n	8005c30 <draw_y_ticks+0x108>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005bba:	2212      	movs	r2, #18
 8005bbc:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f016 fd97 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005bc6:	b203      	sxth	r3, r0
 8005bc8:	9309      	str	r3, [sp, #36]	@ 0x24
        x_ofs = obj->coords.x1;
 8005bca:	f9b4 a014 	ldrsh.w	sl, [r4, #20]
    lv_coord_t major_len = t->major_len;
 8005bce:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005bd2:	9307      	str	r3, [sp, #28]
    lv_coord_t minor_len = t->minor_len;
 8005bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bd8:	9308      	str	r3, [sp, #32]
    if(axis == LV_CHART_AXIS_SECONDARY_Y) {
 8005bda:	f1b8 0f01 	cmp.w	r8, #1
 8005bde:	d032      	beq.n	8005c46 <draw_y_ticks+0x11e>
    lv_draw_line_dsc_init(&line_dsc);
 8005be0:	f10d 0bac 	add.w	fp, sp, #172	@ 0xac
 8005be4:	4658      	mov	r0, fp
 8005be6:	f002 fd5c 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8005bea:	465a      	mov	r2, fp
 8005bec:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f013 fa5e 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    lv_draw_label_dsc_init(&label_dsc);
 8005bf6:	ad23      	add	r5, sp, #140	@ 0x8c
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	f002 f9d5 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8005bfe:	462a      	mov	r2, r5
 8005c00:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005c04:	4620      	mov	r0, r4
 8005c06:	f013 f9af 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8005c0a:	9906      	ldr	r1, [sp, #24]
 8005c0c:	a811      	add	r0, sp, #68	@ 0x44
 8005c0e:	f013 fb5e 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8005c12:	4b82      	ldr	r3, [pc, #520]	@ (8005e1c <draw_y_ticks+0x2f4>)
 8005c14:	9312      	str	r3, [sp, #72]	@ 0x48
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 8005c16:	2306      	movs	r3, #6
 8005c18:	9313      	str	r3, [sp, #76]	@ 0x4c
    part_draw_dsc.id = axis;
 8005c1a:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
    part_draw_dsc.part = LV_PART_TICKS;
 8005c1e:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8005c22:	931e      	str	r3, [sp, #120]	@ 0x78
    part_draw_dsc.line_dsc = &line_dsc;
 8005c24:	f8cd b05c 	str.w	fp, [sp, #92]	@ 0x5c
    part_draw_dsc.label_dsc = &label_dsc;
 8005c28:	9516      	str	r5, [sp, #88]	@ 0x58
    for(i = 0; i <= total_tick_num; i++) {
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	46bb      	mov	fp, r7
 8005c2e:	e087      	b.n	8005d40 <draw_y_ticks+0x218>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8005c30:	2213      	movs	r2, #19
 8005c32:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005c36:	4620      	mov	r0, r4
 8005c38:	f016 fd5c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005c3c:	b203      	sxth	r3, r0
 8005c3e:	9309      	str	r3, [sp, #36]	@ 0x24
        x_ofs = obj->coords.x2;
 8005c40:	f9b4 a018 	ldrsh.w	sl, [r4, #24]
 8005c44:	e7c3      	b.n	8005bce <draw_y_ticks+0xa6>
        major_len *= -1;
 8005c46:	9b07      	ldr	r3, [sp, #28]
 8005c48:	425b      	negs	r3, r3
 8005c4a:	b21b      	sxth	r3, r3
 8005c4c:	9307      	str	r3, [sp, #28]
        minor_len *= -1;
 8005c4e:	9b08      	ldr	r3, [sp, #32]
 8005c50:	425b      	negs	r3, r3
 8005c52:	b21b      	sxth	r3, r3
 8005c54:	9308      	str	r3, [sp, #32]
 8005c56:	e7c3      	b.n	8005be0 <draw_y_ticks+0xb8>
        else p1.x++;
 8005c58:	f10a 0301 	add.w	r3, sl, #1
 8005c5c:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
 8005c60:	e08a      	b.n	8005d78 <draw_y_ticks+0x250>
        if(major) p2.x = p1.x - major_len; /*major tick*/
 8005c62:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	@ 0xbc
 8005c66:	9a07      	ldr	r2, [sp, #28]
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
        if(i % t->minor_cnt == 0) major = true;
 8005c6e:	2701      	movs	r7, #1
 8005c70:	e094      	b.n	8005d9c <draw_y_ticks+0x274>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 8005c72:	af0d      	add	r7, sp, #52	@ 0x34
 8005c74:	4603      	mov	r3, r0
 8005c76:	4a6a      	ldr	r2, [pc, #424]	@ (8005e20 <draw_y_ticks+0x2f8>)
 8005c78:	2110      	movs	r1, #16
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f018 f8c2 	bl	801de04 <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 8005c80:	ab23      	add	r3, sp, #140	@ 0x8c
 8005c82:	9316      	str	r3, [sp, #88]	@ 0x58
            part_draw_dsc.text = buf;
 8005c84:	971c      	str	r7, [sp, #112]	@ 0x70
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 8005c86:	2310      	movs	r3, #16
 8005c88:	931d      	str	r3, [sp, #116]	@ 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8005c8a:	aa11      	add	r2, sp, #68	@ 0x44
 8005c8c:	211a      	movs	r1, #26
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f00b f81a 	bl	8010cc8 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 8005c94:	2300      	movs	r3, #0
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f9bd 309e 	ldrsh.w	r3, [sp, #158]	@ 0x9e
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	@ 0xa0
 8005ca8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005caa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8005cac:	a80a      	add	r0, sp, #40	@ 0x28
 8005cae:	f021 fe2c 	bl	802790a <lv_txt_get_size>
            a.y1 = p2.y - size.y / 2;
 8005cb2:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	@ 0xba
 8005cb6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8005cba:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8005cbe:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8005cc2:	1a99      	subs	r1, r3, r2
 8005cc4:	b209      	sxth	r1, r1
 8005cc6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
            a.y2 = p2.y + size.y / 2;
 8005cca:	4413      	add	r3, r2
 8005ccc:	b21b      	sxth	r3, r3
 8005cce:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            if(!sec_axis) {
 8005cd2:	f1b8 0f00 	cmp.w	r8, #0
 8005cd6:	d11e      	bne.n	8005d16 <draw_y_ticks+0x1ee>
                a.x1 = p2.x - size.x - label_gap;
 8005cd8:	f8bd 00b8 	ldrh.w	r0, [sp, #184]	@ 0xb8
 8005cdc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8005ce0:	1a82      	subs	r2, r0, r2
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 8005ce8:	1bd2      	subs	r2, r2, r7
 8005cea:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
                a.x2 = p2.x - label_gap;
 8005cee:	1bc0      	subs	r0, r0, r7
 8005cf0:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
            if(a.y2 >= obj->coords.y1 &&
 8005cf4:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	db73      	blt.n	8005de4 <draw_y_ticks+0x2bc>
               a.y1  <= obj->coords.y2) {
 8005cfc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
            if(a.y2 >= obj->coords.y1 &&
 8005d00:	4299      	cmp	r1, r3
 8005d02:	dc6f      	bgt.n	8005de4 <draw_y_ticks+0x2bc>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 8005d04:	2300      	movs	r3, #0
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8005d0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d0c:	a923      	add	r1, sp, #140	@ 0x8c
 8005d0e:	9806      	ldr	r0, [sp, #24]
 8005d10:	f002 f97a 	bl	8008008 <lv_draw_label>
        if(major && t->label_en)  {
 8005d14:	e066      	b.n	8005de4 <draw_y_ticks+0x2bc>
                a.x1 = p2.x + label_gap;
 8005d16:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	@ 0xb8
 8005d1a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8005d1e:	1817      	adds	r7, r2, r0
 8005d20:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
                a.x2 = p2.x + size.x + label_gap;
 8005d24:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 8005d28:	443a      	add	r2, r7
 8005d2a:	fa10 f282 	uxtah	r2, r0, r2
 8005d2e:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8005d32:	e7df      	b.n	8005cf4 <draw_y_ticks+0x1cc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8005d34:	aa11      	add	r2, sp, #68	@ 0x44
 8005d36:	211b      	movs	r1, #27
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f00a ffc5 	bl	8010cc8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) {
 8005d3e:	3501      	adds	r5, #1
 8005d40:	42b5      	cmp	r5, r6
 8005d42:	f63f af0d 	bhi.w	8005b60 <draw_y_ticks+0x38>
        p2.y = p1.y = y_ofs + (int32_t)((int32_t)(h - line_dsc.width) * i) / total_tick_num;
 8005d46:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	@ 0xae
 8005d4a:	9a05      	ldr	r2, [sp, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	fb05 f303 	mul.w	r3, r5, r3
 8005d52:	fbb3 f3f6 	udiv	r3, r3, r6
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	4413      	add	r3, r2
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	f8ad 30be 	strh.w	r3, [sp, #190]	@ 0xbe
 8005d60:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
        p1.x = x_ofs;
 8005d64:	f8ad a0bc 	strh.w	sl, [sp, #188]	@ 0xbc
        if(axis == LV_CHART_AXIS_PRIMARY_Y) p1.x--;
 8005d68:	f1b8 0f00 	cmp.w	r8, #0
 8005d6c:	f47f af74 	bne.w	8005c58 <draw_y_ticks+0x130>
 8005d70:	f10a 33ff 	add.w	r3, sl, #4294967295	@ 0xffffffff
 8005d74:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
        if(i % t->minor_cnt == 0) major = true;
 8005d78:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8005d7c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d80:	fbb5 f2f3 	udiv	r2, r5, r3
 8005d84:	fb03 5312 	mls	r3, r3, r2, r5
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f43f af6a 	beq.w	8005c62 <draw_y_ticks+0x13a>
        else p2.x = p1.x - minor_len; /*minor tick*/
 8005d8e:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	@ 0xbc
 8005d92:	9a08      	ldr	r2, [sp, #32]
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
        bool major = false;
 8005d9a:	2700      	movs	r7, #0
        part_draw_dsc.p1 = &p1;
 8005d9c:	ab2f      	add	r3, sp, #188	@ 0xbc
 8005d9e:	931a      	str	r3, [sp, #104]	@ 0x68
        part_draw_dsc.p2 = &p2;
 8005da0:	ab2e      	add	r3, sp, #184	@ 0xb8
 8005da2:	931b      	str	r3, [sp, #108]	@ 0x6c
        int32_t tick_value = lv_map(total_tick_num - i, 0, total_tick_num, chart->ymin[sec_axis], chart->ymax[sec_axis]);
 8005da4:	f109 0334 	add.w	r3, r9, #52	@ 0x34
 8005da8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8005dac:	f109 0238 	add.w	r2, r9, #56	@ 0x38
 8005db0:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 8005db4:	9200      	str	r2, [sp, #0]
 8005db6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	1b70      	subs	r0, r6, r5
 8005dc0:	f010 fd65 	bl	801688e <lv_map>
        part_draw_dsc.value = tick_value;
 8005dc4:	9021      	str	r0, [sp, #132]	@ 0x84
        if(major && t->label_en)  {
 8005dc6:	b127      	cbz	r7, 8005dd2 <draw_y_ticks+0x2aa>
 8005dc8:	f99b 3009 	ldrsb.w	r3, [fp, #9]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f6ff af50 	blt.w	8005c72 <draw_y_ticks+0x14a>
            part_draw_dsc.label_dsc = NULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9316      	str	r3, [sp, #88]	@ 0x58
            part_draw_dsc.text = NULL;
 8005dd6:	931c      	str	r3, [sp, #112]	@ 0x70
            part_draw_dsc.text_length = 0;
 8005dd8:	931d      	str	r3, [sp, #116]	@ 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8005dda:	aa11      	add	r2, sp, #68	@ 0x44
 8005ddc:	211a      	movs	r1, #26
 8005dde:	4620      	mov	r0, r4
 8005de0:	f00a ff72 	bl	8010cc8 <lv_event_send>
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 8005de4:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	@ 0xbe
 8005de8:	f9bd 30ae 	ldrsh.w	r3, [sp, #174]	@ 0xae
 8005dec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005df0:	1059      	asrs	r1, r3, #1
 8005df2:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8005df6:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	db9a      	blt.n	8005d34 <draw_y_ticks+0x20c>
           p2.y - line_dsc.width / 2  <= obj->coords.y2) {
 8005dfe:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	@ 0xba
 8005e02:	1a5b      	subs	r3, r3, r1
 8005e04:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
        if(p1.y + line_dsc.width / 2  >= obj->coords.y1 &&
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	dc93      	bgt.n	8005d34 <draw_y_ticks+0x20c>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8005e0c:	ab2e      	add	r3, sp, #184	@ 0xb8
 8005e0e:	aa2f      	add	r2, sp, #188	@ 0xbc
 8005e10:	a92b      	add	r1, sp, #172	@ 0xac
 8005e12:	9806      	ldr	r0, [sp, #24]
 8005e14:	f002 fc5a 	bl	80086cc <lv_draw_line>
 8005e18:	e78c      	b.n	8005d34 <draw_y_ticks+0x20c>
 8005e1a:	bf00      	nop
 8005e1c:	08029f70 	.word	0x08029f70
 8005e20:	08029c7c 	.word	0x08029c7c

08005e24 <draw_x_ticks>:
{
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	b0b1      	sub	sp, #196	@ 0xc4
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	9105      	str	r1, [sp, #20]
 8005e2e:	4690      	mov	r8, r2
    lv_chart_tick_dsc_t * t = get_tick_gsc(obj, axis);
 8005e30:	4611      	mov	r1, r2
 8005e32:	f7ff fe67 	bl	8005b04 <get_tick_gsc>
    if(t->major_cnt <= 1) return;
 8005e36:	8907      	ldrh	r7, [r0, #8]
 8005e38:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8005e3c:	2f01      	cmp	r7, #1
 8005e3e:	d90d      	bls.n	8005e5c <draw_x_ticks+0x38>
 8005e40:	4606      	mov	r6, r0
    if(!t->label_en && !t->major_len && !t->minor_len) return;
 8005e42:	f990 3009 	ldrsb.w	r3, [r0, #9]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	db01      	blt.n	8005e4e <draw_x_ticks+0x2a>
 8005e4a:	6803      	ldr	r3, [r0, #0]
 8005e4c:	b133      	cbz	r3, 8005e5c <draw_x_ticks+0x38>
    uint32_t total_tick_num = (t->major_cnt - 1) * (t->minor_cnt);
 8005e4e:	3f01      	subs	r7, #1
 8005e50:	88f3      	ldrh	r3, [r6, #6]
 8005e52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e56:	fb03 f707 	mul.w	r7, r3, r7
    if(total_tick_num == 0) return;
 8005e5a:	b917      	cbnz	r7, 8005e62 <draw_x_ticks+0x3e>
}
 8005e5c:	b031      	add	sp, #196	@ 0xc4
 8005e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8005e62:	2212      	movs	r2, #18
 8005e64:	2100      	movs	r1, #0
 8005e66:	4620      	mov	r0, r4
 8005e68:	f016 fc44 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + lv_obj_get_style_border_width(obj, LV_PART_MAIN);
 8005e6c:	fa1f f980 	uxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8005e70:	2232      	movs	r2, #50	@ 0x32
 8005e72:	2100      	movs	r1, #0
 8005e74:	4620      	mov	r0, r4
 8005e76:	f016 fc3d 	bl	801c6f4 <lv_obj_get_style_prop>
 8005e7a:	fa19 f980 	uxtah	r9, r9, r0
 8005e7e:	fa1f f989 	uxth.w	r9, r9
    lv_coord_t w     = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 8005e82:	4620      	mov	r0, r4
 8005e84:	f013 fc3e 	bl	8019704 <lv_obj_get_content_width>
 8005e88:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 8005e8c:	fb03 fb00 	mul.w	fp, r3, r0
 8005e90:	ea4f 232b 	mov.w	r3, fp, asr #8
 8005e94:	9308      	str	r3, [sp, #32]
 8005e96:	f34b 2b0f 	sbfx	fp, fp, #8, #16
    lv_draw_label_dsc_init(&label_dsc);
 8005e9a:	a826      	add	r0, sp, #152	@ 0x98
 8005e9c:	f002 f884 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 8005ea0:	aa26      	add	r2, sp, #152	@ 0x98
 8005ea2:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f013 f85e 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    lv_coord_t x_ofs = obj->coords.x1 + pad_left - lv_obj_get_scroll_left(obj);
 8005eac:	8aa3      	ldrh	r3, [r4, #20]
 8005eae:	4499      	add	r9, r3
 8005eb0:	fa1f f989 	uxth.w	r9, r9
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f015 f807 	bl	801aec8 <lv_obj_get_scroll_left>
 8005eba:	b280      	uxth	r0, r0
 8005ebc:	eba9 0900 	sub.w	r9, r9, r0
 8005ec0:	fa1f f389 	uxth.w	r3, r9
 8005ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec6:	fa0f f989 	sxth.w	r9, r9
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8005eca:	f1b8 0f02 	cmp.w	r8, #2
 8005ece:	d04f      	beq.n	8005f70 <draw_x_ticks+0x14c>
        label_gap = t->label_en ? lv_obj_get_style_pad_top(obj, LV_PART_TICKS) : 0;
 8005ed0:	f996 3009 	ldrsb.w	r3, [r6, #9]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	db5e      	blt.n	8005f96 <draw_x_ticks+0x172>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9306      	str	r3, [sp, #24]
        y_ofs = obj->coords.y1 - 1;
 8005edc:	8ae5      	ldrh	r5, [r4, #22]
 8005ede:	3d01      	subs	r5, #1
 8005ee0:	b22d      	sxth	r5, r5
    if(axis == LV_CHART_AXIS_PRIMARY_X) {
 8005ee2:	f1b8 0f02 	cmp.w	r8, #2
 8005ee6:	d112      	bne.n	8005f0e <draw_x_ticks+0xea>
        if(y_ofs > draw_ctx->clip_area->y2) return;
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dbb3      	blt.n	8005e5c <draw_x_ticks+0x38>
        if(y_ofs + label_gap + label_dsc.font->line_height + t->major_len < draw_ctx->clip_area->y1) return;
 8005ef4:	9b06      	ldr	r3, [sp, #24]
 8005ef6:	18eb      	adds	r3, r5, r3
 8005ef8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8005efa:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8005efe:	440b      	add	r3, r1
 8005f00:	f9b6 1000 	ldrsh.w	r1, [r6]
 8005f04:	440b      	add	r3, r1
 8005f06:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	dba6      	blt.n	8005e5c <draw_x_ticks+0x38>
    lv_draw_line_dsc_init(&line_dsc);
 8005f0e:	f10d 0a8c 	add.w	sl, sp, #140	@ 0x8c
 8005f12:	4650      	mov	r0, sl
 8005f14:	f002 fbc5 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 8005f18:	4652      	mov	r2, sl
 8005f1a:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f013 f8c7 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    line_dsc.dash_gap = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	f8ad 3092 	strh.w	r3, [sp, #146]	@ 0x92
    line_dsc.dash_width = 0;
 8005f2a:	f8ad 3090 	strh.w	r3, [sp, #144]	@ 0x90
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8005f2e:	9905      	ldr	r1, [sp, #20]
 8005f30:	a811      	add	r0, sp, #68	@ 0x44
 8005f32:	f013 f9cc 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8005f36:	4ba3      	ldr	r3, [pc, #652]	@ (80061c4 <draw_x_ticks+0x3a0>)
 8005f38:	9312      	str	r3, [sp, #72]	@ 0x48
    part_draw_dsc.type = LV_CHART_DRAW_PART_TICK_LABEL;
 8005f3a:	2306      	movs	r3, #6
 8005f3c:	9313      	str	r3, [sp, #76]	@ 0x4c
    part_draw_dsc.id = LV_CHART_AXIS_PRIMARY_X;
 8005f3e:	2302      	movs	r3, #2
 8005f40:	931f      	str	r3, [sp, #124]	@ 0x7c
    part_draw_dsc.part = LV_PART_TICKS;
 8005f42:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8005f46:	931e      	str	r3, [sp, #120]	@ 0x78
    part_draw_dsc.label_dsc = &label_dsc;
 8005f48:	ab26      	add	r3, sp, #152	@ 0x98
 8005f4a:	9316      	str	r3, [sp, #88]	@ 0x58
    part_draw_dsc.line_dsc = &line_dsc;
 8005f4c:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
    uint8_t sec_axis = axis == LV_CHART_AXIS_PRIMARY_X ? 0 : 1;
 8005f50:	f1b8 0302 	subs.w	r3, r8, #2
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	9307      	str	r3, [sp, #28]
    if(chart->type == LV_CHART_TYPE_BAR) {
 8005f5a:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d020      	beq.n	8005fa8 <draw_x_ticks+0x184>
    p1.y = y_ofs;
 8005f66:	f8ad 50be 	strh.w	r5, [sp, #190]	@ 0xbe
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 8005f6a:	2500      	movs	r5, #0
 8005f6c:	46ba      	mov	sl, r7
 8005f6e:	e07e      	b.n	800606e <draw_x_ticks+0x24a>
        label_gap = t->label_en ? lv_obj_get_style_pad_bottom(obj, LV_PART_TICKS) : 0;
 8005f70:	f996 3009 	ldrsb.w	r3, [r6, #9]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db05      	blt.n	8005f84 <draw_x_ticks+0x160>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9306      	str	r3, [sp, #24]
        y_ofs = obj->coords.y2 + 1;
 8005f7c:	8b65      	ldrh	r5, [r4, #26]
 8005f7e:	3501      	adds	r5, #1
 8005f80:	b22d      	sxth	r5, r5
 8005f82:	e7ae      	b.n	8005ee2 <draw_x_ticks+0xbe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8005f84:	2211      	movs	r2, #17
 8005f86:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f016 fbb2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005f90:	b203      	sxth	r3, r0
 8005f92:	9306      	str	r3, [sp, #24]
 8005f94:	e7f2      	b.n	8005f7c <draw_x_ticks+0x158>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8005f96:	2210      	movs	r2, #16
 8005f98:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f016 fba9 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005fa2:	b203      	sxth	r3, r0
 8005fa4:	9306      	str	r3, [sp, #24]
 8005fa6:	e799      	b.n	8005edc <draw_x_ticks+0xb8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8005fa8:	2215      	movs	r2, #21
 8005faa:	2100      	movs	r1, #0
 8005fac:	4620      	mov	r0, r4
 8005fae:	f016 fba1 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8005fb2:	b202      	sxth	r2, r0
                                                                  LV_PART_MAIN) * chart->zoom_x) >> 8;  /*Gap between the columns on ~adjacent X*/
 8005fb4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 8005fb8:	fb03 f202 	mul.w	r2, r3, r2
        lv_coord_t block_w = (w + block_gap) / (chart->point_cnt);
 8005fbc:	eb0b 2b22 	add.w	fp, fp, r2, asr #8
 8005fc0:	f8b4 3082 	ldrh.w	r3, [r4, #130]	@ 0x82
 8005fc4:	fb9b fbf3 	sdiv	fp, fp, r3
 8005fc8:	fa0f f38b 	sxth.w	r3, fp
        x_ofs += (block_w - block_gap) / 2;
 8005fcc:	eba3 2322 	sub.w	r3, r3, r2, asr #8
 8005fd0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8005fd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fd6:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8005fda:	fa0f f983 	sxth.w	r9, r3
        w -= block_w - block_gap;
 8005fde:	ebcb 2b22 	rsb	fp, fp, r2, asr #8
 8005fe2:	9b08      	ldr	r3, [sp, #32]
 8005fe4:	449b      	add	fp, r3
 8005fe6:	fa0f fb8b 	sxth.w	fp, fp
 8005fea:	e7bc      	b.n	8005f66 <draw_x_ticks+0x142>
        if(i % t->minor_cnt == 0) major = true;
 8005fec:	2701      	movs	r7, #1
 8005fee:	e04b      	b.n	8006088 <draw_x_ticks+0x264>
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 8005ff0:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8005ff4:	b292      	uxth	r2, r2
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
        part_draw_dsc.p1 = &p1;
 8005ffc:	ab2f      	add	r3, sp, #188	@ 0xbc
 8005ffe:	931a      	str	r3, [sp, #104]	@ 0x68
        part_draw_dsc.p2 = &p2;
 8006000:	ab2e      	add	r3, sp, #184	@ 0xb8
 8006002:	931b      	str	r3, [sp, #108]	@ 0x6c
        if(chart->type == LV_CHART_TYPE_SCATTER) {
 8006004:	f894 3088 	ldrb.w	r3, [r4, #136]	@ 0x88
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b03      	cmp	r3, #3
 800600e:	d062      	beq.n	80060d6 <draw_x_ticks+0x2b2>
            tick_value = i / t->minor_cnt;
 8006010:	88f3      	ldrh	r3, [r6, #6]
 8006012:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006016:	fbb5 f3f3 	udiv	r3, r5, r3
        part_draw_dsc.value = tick_value;
 800601a:	9321      	str	r3, [sp, #132]	@ 0x84
        if(major && t->label_en) {
 800601c:	b11f      	cbz	r7, 8006026 <draw_x_ticks+0x202>
 800601e:	f996 2009 	ldrsb.w	r2, [r6, #9]
 8006022:	2a00      	cmp	r2, #0
 8006024:	db69      	blt.n	80060fa <draw_x_ticks+0x2d6>
            part_draw_dsc.label_dsc = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	9316      	str	r3, [sp, #88]	@ 0x58
            part_draw_dsc.text = NULL;
 800602a:	931c      	str	r3, [sp, #112]	@ 0x70
            part_draw_dsc.text_length = 0;
 800602c:	931d      	str	r3, [sp, #116]	@ 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800602e:	aa11      	add	r2, sp, #68	@ 0x44
 8006030:	211a      	movs	r1, #26
 8006032:	4620      	mov	r0, r4
 8006034:	f00a fe48 	bl	8010cc8 <lv_event_send>
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 8006038:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	@ 0xbc
 800603c:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	@ 0x8e
 8006040:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8006044:	1059      	asrs	r1, r3, #1
 8006046:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800604a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800604e:	4293      	cmp	r3, r2
 8006050:	db07      	blt.n	8006062 <draw_x_ticks+0x23e>
           p2.x - line_dsc.width / 2  <= obj->coords.x2) {
 8006052:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	@ 0xb8
 8006056:	1a5b      	subs	r3, r3, r1
 8006058:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
        if(p1.x + line_dsc.width / 2  >= obj->coords.x1 &&
 800605c:	4293      	cmp	r3, r2
 800605e:	f340 80aa 	ble.w	80061b6 <draw_x_ticks+0x392>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8006062:	aa11      	add	r2, sp, #68	@ 0x44
 8006064:	211b      	movs	r1, #27
 8006066:	4620      	mov	r0, r4
 8006068:	f00a fe2e 	bl	8010cc8 <lv_event_send>
    for(i = 0; i <= total_tick_num; i++) { /*one extra loop - it may not exist in the list, empty label*/
 800606c:	3501      	adds	r5, #1
 800606e:	4555      	cmp	r5, sl
 8006070:	f63f aef4 	bhi.w	8005e5c <draw_x_ticks+0x38>
        if(i % t->minor_cnt == 0) major = true;
 8006074:	88f3      	ldrh	r3, [r6, #6]
 8006076:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800607a:	fbb5 f2f3 	udiv	r2, r5, r3
 800607e:	fb03 5312 	mls	r3, r3, r2, r5
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0b2      	beq.n	8005fec <draw_x_ticks+0x1c8>
        bool major = false;
 8006086:	2700      	movs	r7, #0
        p2.x = p1.x = x_ofs + (int32_t)((int32_t)(w - line_dsc.width) * i) / total_tick_num;
 8006088:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	@ 0x8e
 800608c:	ebab 0303 	sub.w	r3, fp, r3
 8006090:	fb05 f303 	mul.w	r3, r5, r3
 8006094:	fbb3 f3fa 	udiv	r3, r3, sl
 8006098:	444b      	add	r3, r9
 800609a:	b21b      	sxth	r3, r3
 800609c:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
 80060a0:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
        if(sec_axis) p2.y = p1.y - (major ? t->major_len : t->minor_len);
 80060a4:	f1b8 0f02 	cmp.w	r8, #2
 80060a8:	d007      	beq.n	80060ba <draw_x_ticks+0x296>
 80060aa:	f8bd 30be 	ldrh.w	r3, [sp, #190]	@ 0xbe
 80060ae:	2f00      	cmp	r7, #0
 80060b0:	d09e      	beq.n	8005ff0 <draw_x_ticks+0x1cc>
 80060b2:	f9b6 2000 	ldrsh.w	r2, [r6]
 80060b6:	b292      	uxth	r2, r2
 80060b8:	e79d      	b.n	8005ff6 <draw_x_ticks+0x1d2>
        else p2.y = p1.y + (major ? t->major_len : t->minor_len);
 80060ba:	f8bd 30be 	ldrh.w	r3, [sp, #190]	@ 0xbe
 80060be:	b137      	cbz	r7, 80060ce <draw_x_ticks+0x2aa>
 80060c0:	f9b6 2000 	ldrsh.w	r2, [r6]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	4413      	add	r3, r2
 80060c8:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
 80060cc:	e796      	b.n	8005ffc <draw_x_ticks+0x1d8>
 80060ce:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80060d2:	b292      	uxth	r2, r2
 80060d4:	e7f7      	b.n	80060c6 <draw_x_ticks+0x2a2>
            tick_value = lv_map(i, 0, total_tick_num, chart->xmin[sec_axis], chart->xmax[sec_axis]);
 80060d6:	9a07      	ldr	r2, [sp, #28]
 80060d8:	f102 0338 	add.w	r3, r2, #56	@ 0x38
 80060dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80060e0:	323c      	adds	r2, #60	@ 0x3c
 80060e2:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 80060e6:	9200      	str	r2, [sp, #0]
 80060e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80060ec:	4652      	mov	r2, sl
 80060ee:	2100      	movs	r1, #0
 80060f0:	4628      	mov	r0, r5
 80060f2:	f010 fbcc 	bl	801688e <lv_map>
 80060f6:	4603      	mov	r3, r0
 80060f8:	e78f      	b.n	800601a <draw_x_ticks+0x1f6>
            lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, tick_value);
 80060fa:	af0d      	add	r7, sp, #52	@ 0x34
 80060fc:	4a32      	ldr	r2, [pc, #200]	@ (80061c8 <draw_x_ticks+0x3a4>)
 80060fe:	2110      	movs	r1, #16
 8006100:	4638      	mov	r0, r7
 8006102:	f017 fe7f 	bl	801de04 <lv_snprintf>
            part_draw_dsc.label_dsc = &label_dsc;
 8006106:	ab26      	add	r3, sp, #152	@ 0x98
 8006108:	9316      	str	r3, [sp, #88]	@ 0x58
            part_draw_dsc.text = buf;
 800610a:	971c      	str	r7, [sp, #112]	@ 0x70
            part_draw_dsc.text_length = LV_CHART_LABEL_MAX_TEXT_LENGTH;
 800610c:	2310      	movs	r3, #16
 800610e:	931d      	str	r3, [sp, #116]	@ 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8006110:	aa11      	add	r2, sp, #68	@ 0x44
 8006112:	211a      	movs	r1, #26
 8006114:	4620      	mov	r0, r4
 8006116:	f00a fdd7 	bl	8010cc8 <lv_event_send>
            lv_txt_get_size(&size, part_draw_dsc.text, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 800611a:	2300      	movs	r3, #0
 800611c:	9302      	str	r3, [sp, #8]
 800611e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	f9bd 30aa 	ldrsh.w	r3, [sp, #170]	@ 0xaa
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 800612e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006130:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8006132:	a80a      	add	r0, sp, #40	@ 0x28
 8006134:	f021 fbe9 	bl	802790a <lv_txt_get_size>
            a.x1 = (p2.x - size.x / 2);
 8006138:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	@ 0xb8
 800613c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8006140:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8006144:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8006148:	1a99      	subs	r1, r3, r2
 800614a:	b209      	sxth	r1, r1
 800614c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
            a.x2 = (p2.x + size.x / 2);
 8006150:	4413      	add	r3, r2
 8006152:	b21b      	sxth	r3, r3
 8006154:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            if(sec_axis) {
 8006158:	f1b8 0f02 	cmp.w	r8, #2
 800615c:	d01e      	beq.n	800619c <draw_x_ticks+0x378>
                a.y2 = p2.y - label_gap;
 800615e:	f8bd 20ba 	ldrh.w	r2, [sp, #186]	@ 0xba
 8006162:	9806      	ldr	r0, [sp, #24]
 8006164:	1a12      	subs	r2, r2, r0
 8006166:	b290      	uxth	r0, r2
 8006168:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
                a.y1 = a.y2 - size.y;
 800616c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8006170:	1a82      	subs	r2, r0, r2
 8006172:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
            if(a.x2 >= obj->coords.x1 &&
 8006176:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 800617a:	4293      	cmp	r3, r2
 800617c:	f6ff af5c 	blt.w	8006038 <draw_x_ticks+0x214>
               a.x1 <= obj->coords.x2) {
 8006180:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
            if(a.x2 >= obj->coords.x1 &&
 8006184:	4299      	cmp	r1, r3
 8006186:	f73f af57 	bgt.w	8006038 <draw_x_ticks+0x214>
                lv_draw_label(draw_ctx, &label_dsc, &a, part_draw_dsc.text, NULL);
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006190:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006192:	a926      	add	r1, sp, #152	@ 0x98
 8006194:	9805      	ldr	r0, [sp, #20]
 8006196:	f001 ff37 	bl	8008008 <lv_draw_label>
        if(major && t->label_en) {
 800619a:	e74d      	b.n	8006038 <draw_x_ticks+0x214>
                a.y1 = p2.y + label_gap;
 800619c:	f8bd 20ba 	ldrh.w	r2, [sp, #186]	@ 0xba
 80061a0:	9806      	ldr	r0, [sp, #24]
 80061a2:	4402      	add	r2, r0
 80061a4:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
                a.y2 = a.y1 + size.y;
 80061a8:	f8bd 002a 	ldrh.w	r0, [sp, #42]	@ 0x2a
 80061ac:	fa10 f282 	uxtah	r2, r0, r2
 80061b0:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80061b4:	e7df      	b.n	8006176 <draw_x_ticks+0x352>
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 80061b6:	ab2e      	add	r3, sp, #184	@ 0xb8
 80061b8:	aa2f      	add	r2, sp, #188	@ 0xbc
 80061ba:	a923      	add	r1, sp, #140	@ 0x8c
 80061bc:	9805      	ldr	r0, [sp, #20]
 80061be:	f002 fa85 	bl	80086cc <lv_draw_line>
 80061c2:	e74e      	b.n	8006062 <draw_x_ticks+0x23e>
 80061c4:	08029f70 	.word	0x08029f70
 80061c8:	08029c7c 	.word	0x08029c7c

080061cc <draw_axes>:
{
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4604      	mov	r4, r0
 80061d0:	460d      	mov	r5, r1
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_Y);
 80061d2:	2200      	movs	r2, #0
 80061d4:	f7ff fca8 	bl	8005b28 <draw_y_ticks>
    draw_y_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_Y);
 80061d8:	2201      	movs	r2, #1
 80061da:	4629      	mov	r1, r5
 80061dc:	4620      	mov	r0, r4
 80061de:	f7ff fca3 	bl	8005b28 <draw_y_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_PRIMARY_X);
 80061e2:	2202      	movs	r2, #2
 80061e4:	4629      	mov	r1, r5
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff fe1c 	bl	8005e24 <draw_x_ticks>
    draw_x_ticks(obj, draw_ctx, LV_CHART_AXIS_SECONDARY_X);
 80061ec:	2204      	movs	r2, #4
 80061ee:	4629      	mov	r1, r5
 80061f0:	4620      	mov	r0, r4
 80061f2:	f7ff fe17 	bl	8005e24 <draw_x_ticks>
}
 80061f6:	bd38      	pop	{r3, r4, r5, pc}

080061f8 <lv_chart_event>:
{
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	460d      	mov	r5, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80061fe:	4881      	ldr	r0, [pc, #516]	@ (8006404 <lv_chart_event+0x20c>)
 8006200:	f00a fcb8 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8006204:	2801      	cmp	r0, #1
 8006206:	d001      	beq.n	800620c <lv_chart_event+0x14>
}
 8006208:	b002      	add	sp, #8
 800620a:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 800620c:	4628      	mov	r0, r5
 800620e:	f00a fd89 	bl	8010d24 <lv_event_get_code>
 8006212:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8006214:	4628      	mov	r0, r5
 8006216:	f00a fd81 	bl	8010d1c <lv_event_get_target>
 800621a:	4606      	mov	r6, r0
    if(code == LV_EVENT_PRESSED) {
 800621c:	1e63      	subs	r3, r4, #1
 800621e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006220:	d8f2      	bhi.n	8006208 <lv_chart_event+0x10>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <lv_chart_event+0x30>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	080062d9 	.word	0x080062d9
 800622c:	08006209 	.word	0x08006209
 8006230:	08006209 	.word	0x08006209
 8006234:	08006209 	.word	0x08006209
 8006238:	08006209 	.word	0x08006209
 800623c:	08006209 	.word	0x08006209
 8006240:	08006209 	.word	0x08006209
 8006244:	08006333 	.word	0x08006333
 8006248:	08006209 	.word	0x08006209
 800624c:	08006209 	.word	0x08006209
 8006250:	08006209 	.word	0x08006209
 8006254:	08006209 	.word	0x08006209
 8006258:	08006209 	.word	0x08006209
 800625c:	08006209 	.word	0x08006209
 8006260:	08006209 	.word	0x08006209
 8006264:	08006209 	.word	0x08006209
 8006268:	08006209 	.word	0x08006209
 800626c:	08006209 	.word	0x08006209
 8006270:	0800634d 	.word	0x0800634d
 8006274:	08006209 	.word	0x08006209
 8006278:	080063a5 	.word	0x080063a5
 800627c:	08006209 	.word	0x08006209
 8006280:	08006209 	.word	0x08006209
 8006284:	08006209 	.word	0x08006209
 8006288:	08006209 	.word	0x08006209
 800628c:	08006209 	.word	0x08006209
 8006290:	08006209 	.word	0x08006209
 8006294:	08006209 	.word	0x08006209
 8006298:	08006209 	.word	0x08006209
 800629c:	08006209 	.word	0x08006209
 80062a0:	08006209 	.word	0x08006209
 80062a4:	08006209 	.word	0x08006209
 80062a8:	08006209 	.word	0x08006209
 80062ac:	08006209 	.word	0x08006209
 80062b0:	08006209 	.word	0x08006209
 80062b4:	08006209 	.word	0x08006209
 80062b8:	08006209 	.word	0x08006209
 80062bc:	08006209 	.word	0x08006209
 80062c0:	08006209 	.word	0x08006209
 80062c4:	08006209 	.word	0x08006209
 80062c8:	08006347 	.word	0x08006347
 80062cc:	08006209 	.word	0x08006209
 80062d0:	08006209 	.word	0x08006209
 80062d4:	08006377 	.word	0x08006377
        lv_indev_t * indev = lv_indev_get_act();
 80062d8:	f00e fa4a 	bl	8014770 <lv_indev_get_act>
        lv_indev_get_point(indev, &p);
 80062dc:	a901      	add	r1, sp, #4
 80062de:	f00e fabe 	bl	801485e <lv_indev_get_point>
        p.x -= obj->coords.x1;
 80062e2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80062e6:	8ab3      	ldrh	r3, [r6, #20]
 80062e8:	1ae4      	subs	r4, r4, r3
 80062ea:	b2a4      	uxth	r4, r4
 80062ec:	f8ad 4004 	strh.w	r4, [sp, #4]
        uint32_t id = get_index_from_x(obj, p.x + lv_obj_get_scroll_left(obj));
 80062f0:	4630      	mov	r0, r6
 80062f2:	f014 fde9 	bl	801aec8 <lv_obj_get_scroll_left>
 80062f6:	fa14 f180 	uxtah	r1, r4, r0
 80062fa:	b209      	sxth	r1, r1
 80062fc:	4630      	mov	r0, r6
 80062fe:	f7fe f901 	bl	8004504 <get_index_from_x>
 8006302:	4604      	mov	r4, r0
        if(id != (uint32_t)chart->pressed_point_id) {
 8006304:	f9b6 307c 	ldrsh.w	r3, [r6, #124]	@ 0x7c
 8006308:	4283      	cmp	r3, r0
 800630a:	f43f af7d 	beq.w	8006208 <lv_chart_event+0x10>
            invalidate_point(obj, id);
 800630e:	b281      	uxth	r1, r0
 8006310:	4630      	mov	r0, r6
 8006312:	f7fe f930 	bl	8004576 <invalidate_point>
            invalidate_point(obj, chart->pressed_point_id);
 8006316:	f9b6 107c 	ldrsh.w	r1, [r6, #124]	@ 0x7c
 800631a:	b289      	uxth	r1, r1
 800631c:	4630      	mov	r0, r6
 800631e:	f7fe f92a 	bl	8004576 <invalidate_point>
            chart->pressed_point_id = id;
 8006322:	f8a6 407c 	strh.w	r4, [r6, #124]	@ 0x7c
            lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8006326:	2200      	movs	r2, #0
 8006328:	211c      	movs	r1, #28
 800632a:	4630      	mov	r0, r6
 800632c:	f00a fccc 	bl	8010cc8 <lv_event_send>
 8006330:	e76a      	b.n	8006208 <lv_chart_event+0x10>
        invalidate_point(obj, chart->pressed_point_id);
 8006332:	f9b0 107c 	ldrsh.w	r1, [r0, #124]	@ 0x7c
 8006336:	b289      	uxth	r1, r1
 8006338:	f7fe f91d 	bl	8004576 <invalidate_point>
        chart->pressed_point_id = LV_CHART_POINT_NONE;
 800633c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8006340:	f8a6 307c 	strh.w	r3, [r6, #124]	@ 0x7c
 8006344:	e760      	b.n	8006208 <lv_chart_event+0x10>
        lv_obj_refresh_self_size(obj);
 8006346:	f013 fbff 	bl	8019b48 <lv_obj_refresh_self_size>
 800634a:	e75d      	b.n	8006208 <lv_chart_event+0x10>
        lv_event_set_ext_draw_size(e, LV_MAX4(chart->tick[0].draw_size, chart->tick[1].draw_size, chart->tick[2].draw_size,
 800634c:	f9b0 1064 	ldrsh.w	r1, [r0, #100]	@ 0x64
 8006350:	f9b0 3058 	ldrsh.w	r3, [r0, #88]	@ 0x58
 8006354:	4299      	cmp	r1, r3
 8006356:	bfb8      	it	lt
 8006358:	4619      	movlt	r1, r3
 800635a:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	@ 0x4c
 800635e:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	@ 0x40
 8006362:	4293      	cmp	r3, r2
 8006364:	bfb8      	it	lt
 8006366:	4613      	movlt	r3, r2
 8006368:	4299      	cmp	r1, r3
 800636a:	bfb8      	it	lt
 800636c:	4619      	movlt	r1, r3
 800636e:	4628      	mov	r0, r5
 8006370:	f00a fd5e 	bl	8010e30 <lv_event_set_ext_draw_size>
 8006374:	e748      	b.n	8006208 <lv_chart_event+0x10>
        lv_point_t * p = lv_event_get_param(e);
 8006376:	4628      	mov	r0, r5
 8006378:	f00a fcd8 	bl	8010d2c <lv_event_get_param>
 800637c:	4604      	mov	r4, r0
        p->x = ((int32_t)lv_obj_get_content_width(obj) * chart->zoom_x) >> 8;
 800637e:	4630      	mov	r0, r6
 8006380:	f013 f9c0 	bl	8019704 <lv_obj_get_content_width>
 8006384:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 8006388:	fb00 f303 	mul.w	r3, r0, r3
 800638c:	121b      	asrs	r3, r3, #8
 800638e:	8023      	strh	r3, [r4, #0]
        p->y = ((int32_t)lv_obj_get_content_height(obj) * chart->zoom_y) >> 8;
 8006390:	4630      	mov	r0, r6
 8006392:	f013 f9d7 	bl	8019744 <lv_obj_get_content_height>
 8006396:	f8b6 3086 	ldrh.w	r3, [r6, #134]	@ 0x86
 800639a:	fb00 f303 	mul.w	r3, r0, r3
 800639e:	121b      	asrs	r3, r3, #8
 80063a0:	8063      	strh	r3, [r4, #2]
 80063a2:	e731      	b.n	8006208 <lv_chart_event+0x10>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80063a4:	4628      	mov	r0, r5
 80063a6:	f00a fd31 	bl	8010e0c <lv_event_get_draw_ctx>
 80063aa:	4604      	mov	r4, r0
        draw_div_lines(obj, draw_ctx);
 80063ac:	4601      	mov	r1, r0
 80063ae:	4630      	mov	r0, r6
 80063b0:	f7fe f9ce 	bl	8004750 <draw_div_lines>
        draw_axes(obj, draw_ctx);
 80063b4:	4621      	mov	r1, r4
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ff08 	bl	80061cc <draw_axes>
        if(_lv_ll_is_empty(&chart->series_ll) == false) {
 80063bc:	f106 0024 	add.w	r0, r6, #36	@ 0x24
 80063c0:	f010 f979 	bl	80166b6 <_lv_ll_is_empty>
 80063c4:	b948      	cbnz	r0, 80063da <lv_chart_event+0x1e2>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 80063c6:	f896 3088 	ldrb.w	r3, [r6, #136]	@ 0x88
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d008      	beq.n	80063e4 <lv_chart_event+0x1ec>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d00b      	beq.n	80063ee <lv_chart_event+0x1f6>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d00e      	beq.n	80063f8 <lv_chart_event+0x200>
        draw_cursors(obj, draw_ctx);
 80063da:	4621      	mov	r1, r4
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff fa6b 	bl	80058b8 <draw_cursors>
 80063e2:	e711      	b.n	8006208 <lv_chart_event+0x10>
            if(chart->type == LV_CHART_TYPE_LINE) draw_series_line(obj, draw_ctx);
 80063e4:	4621      	mov	r1, r4
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7fe fba8 	bl	8004b3c <draw_series_line>
 80063ec:	e7f5      	b.n	80063da <lv_chart_event+0x1e2>
            else if(chart->type == LV_CHART_TYPE_BAR) draw_series_bar(obj, draw_ctx);
 80063ee:	4621      	mov	r1, r4
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7fe fdeb 	bl	8004fcc <draw_series_bar>
 80063f6:	e7f0      	b.n	80063da <lv_chart_event+0x1e2>
            else if(chart->type == LV_CHART_TYPE_SCATTER) draw_series_scatter(obj, draw_ctx);
 80063f8:	4621      	mov	r1, r4
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7fe ff3c 	bl	8005278 <draw_series_scatter>
 8006400:	e7eb      	b.n	80063da <lv_chart_event+0x1e2>
 8006402:	bf00      	nop
 8006404:	08029f70 	.word	0x08029f70

08006408 <lv_checkbox_draw>:
        lv_checkbox_draw(e);
    }
}

static void lv_checkbox_draw(lv_event_t * e)
{
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	b0bd      	sub	sp, #244	@ 0xf4
 800640e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8006410:	f00a fc84 	bl	8010d1c <lv_event_get_target>
 8006414:	4604      	mov	r4, r0
    lv_checkbox_t * cb = (lv_checkbox_t *)obj;

    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006416:	4628      	mov	r0, r5
 8006418:	f00a fcf8 	bl	8010e0c <lv_event_get_draw_ctx>
 800641c:	9005      	str	r0, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800641e:	2257      	movs	r2, #87	@ 0x57
 8006420:	2100      	movs	r1, #0
 8006422:	4620      	mov	r0, r4
 8006424:	f016 f966 	bl	801c6f4 <lv_obj_get_style_prop>
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 8006428:	9007      	str	r0, [sp, #28]
 800642a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800642e:	9106      	str	r1, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8006430:	2232      	movs	r2, #50	@ 0x32
 8006432:	2100      	movs	r1, #0
 8006434:	4620      	mov	r0, r4
 8006436:	f016 f95d 	bl	801c6f4 <lv_obj_get_style_prop>
 800643a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 800643c:	2210      	movs	r2, #16
 800643e:	2100      	movs	r1, #0
 8006440:	4620      	mov	r0, r4
 8006442:	f016 f957 	bl	801c6f4 <lv_obj_get_style_prop>
    const lv_font_t * font = lv_obj_get_style_text_font(obj, LV_PART_MAIN);
    lv_coord_t font_h = lv_font_get_line_height(font);

    lv_coord_t bg_border = lv_obj_get_style_border_width(obj, LV_PART_MAIN);
    lv_coord_t bg_topp = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + bg_border;
 8006446:	b2b6      	uxth	r6, r6
 8006448:	fa16 f080 	uxtah	r0, r6, r0
 800644c:	fa1f f880 	uxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006450:	2212      	movs	r2, #18
 8006452:	2100      	movs	r1, #0
 8006454:	4620      	mov	r0, r4
 8006456:	f016 f94d 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t bg_leftp = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + bg_border;
 800645a:	fa16 f580 	uxtah	r5, r6, r0
 800645e:	b2ad      	uxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8006460:	2215      	movs	r2, #21
 8006462:	2100      	movs	r1, #0
 8006464:	4620      	mov	r0, r4
 8006466:	f016 f945 	bl	801c6f4 <lv_obj_get_style_prop>
 800646a:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800646c:	2212      	movs	r2, #18
 800646e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8006472:	4620      	mov	r0, r4
 8006474:	f016 f93e 	bl	801c6f4 <lv_obj_get_style_prop>
 8006478:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800647a:	2213      	movs	r2, #19
 800647c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8006480:	4620      	mov	r0, r4
 8006482:	f016 f937 	bl	801c6f4 <lv_obj_get_style_prop>
 8006486:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006488:	2210      	movs	r2, #16
 800648a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800648e:	4620      	mov	r0, r4
 8006490:	f016 f930 	bl	801c6f4 <lv_obj_get_style_prop>
 8006494:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006496:	2211      	movs	r2, #17
 8006498:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800649c:	4620      	mov	r0, r4
 800649e:	f016 f929 	bl	801c6f4 <lv_obj_get_style_prop>
 80064a2:	9009      	str	r0, [sp, #36]	@ 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80064a4:	2269      	movs	r2, #105	@ 0x69
 80064a6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80064aa:	4620      	mov	r0, r4
 80064ac:	f016 f922 	bl	801c6f4 <lv_obj_get_style_prop>
 80064b0:	900a      	str	r0, [sp, #40]	@ 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80064b2:	226a      	movs	r2, #106	@ 0x6a
 80064b4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80064b8:	4620      	mov	r0, r4
 80064ba:	f016 f91b 	bl	801c6f4 <lv_obj_get_style_prop>
 80064be:	900b      	str	r0, [sp, #44]	@ 0x2c

    lv_coord_t transf_w = lv_obj_get_style_transform_width(obj, LV_PART_INDICATOR);
    lv_coord_t transf_h = lv_obj_get_style_transform_height(obj, LV_PART_INDICATOR);

    lv_draw_rect_dsc_t indic_dsc;
    lv_draw_rect_dsc_init(&indic_dsc);
 80064c0:	f10d 09b8 	add.w	r9, sp, #184	@ 0xb8
 80064c4:	4648      	mov	r0, r9
 80064c6:	f003 fbc3 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &indic_dsc);
 80064ca:	464a      	mov	r2, r9
 80064cc:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80064d0:	4620      	mov	r0, r4
 80064d2:	f012 fbf7 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_area_t marker_area;
    marker_area.x1 = obj->coords.x1 + bg_leftp;
 80064d6:	8aa3      	ldrh	r3, [r4, #20]
 80064d8:	441d      	add	r5, r3
 80064da:	fa1f fc85 	uxth.w	ip, r5
 80064de:	b228      	sxth	r0, r5
 80064e0:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
    marker_area.x2 = marker_area.x1 + font_h + marker_leftp + marker_rightp - 1;
 80064e4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80064e8:	eb0c 0203 	add.w	r2, ip, r3
 80064ec:	fa17 f282 	uxtah	r2, r7, r2
 80064f0:	fa16 f282 	uxtah	r2, r6, r2
 80064f4:	b292      	uxth	r2, r2
 80064f6:	3a01      	subs	r2, #1
 80064f8:	b296      	uxth	r6, r2
 80064fa:	b212      	sxth	r2, r2
 80064fc:	f8ad 20b4 	strh.w	r2, [sp, #180]	@ 0xb4
    marker_area.y1 = obj->coords.y1 + bg_topp;
 8006500:	8ae1      	ldrh	r1, [r4, #22]
 8006502:	4441      	add	r1, r8
 8006504:	fa1f fa81 	uxth.w	sl, r1
 8006508:	b209      	sxth	r1, r1
 800650a:	f8ad 10b2 	strh.w	r1, [sp, #178]	@ 0xb2
    marker_area.y2 = marker_area.y1 + font_h + marker_topp + marker_bottomp - 1;
 800650e:	4453      	add	r3, sl
 8006510:	fa1b f383 	uxtah	r3, fp, r3
 8006514:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006516:	fa15 f383 	uxtah	r3, r5, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29d      	uxth	r5, r3
 8006520:	b21b      	sxth	r3, r3
 8006522:	f8ad 30b6 	strh.w	r3, [sp, #182]	@ 0xb6
    dest->x1 = src->x1;
 8006526:	f8ad 00a8 	strh.w	r0, [sp, #168]	@ 0xa8
    dest->y1 = src->y1;
 800652a:	f8ad 10aa 	strh.w	r1, [sp, #170]	@ 0xaa
    dest->x2 = src->x2;
 800652e:	f8ad 20ac 	strh.w	r2, [sp, #172]	@ 0xac
    dest->y2 = src->y2;
 8006532:	f8ad 30ae 	strh.w	r3, [sp, #174]	@ 0xae

    lv_area_t marker_area_transf;
    lv_area_copy(&marker_area_transf, &marker_area);
    marker_area_transf.x1 -= transf_w;
 8006536:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800653a:	ebac 0c03 	sub.w	ip, ip, r3
 800653e:	f8ad c0a8 	strh.w	ip, [sp, #168]	@ 0xa8
    marker_area_transf.x2 += transf_w;
 8006542:	4433      	add	r3, r6
 8006544:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
    marker_area_transf.y1 -= transf_h;
 8006548:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800654c:	ebaa 0203 	sub.w	r2, sl, r3
 8006550:	f8ad 20aa 	strh.w	r2, [sp, #170]	@ 0xaa
    marker_area_transf.y2 += transf_h;
 8006554:	442b      	add	r3, r5
 8006556:	f8ad 30ae 	strh.w	r3, [sp, #174]	@ 0xae

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 800655a:	9905      	ldr	r1, [sp, #20]
 800655c:	a818      	add	r0, sp, #96	@ 0x60
 800655e:	f012 feb6 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.rect_dsc = &indic_dsc;
 8006562:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    part_draw_dsc.class_p = MY_CLASS;
 8006566:	4b36      	ldr	r3, [pc, #216]	@ (8006640 <lv_checkbox_draw+0x238>)
 8006568:	9319      	str	r3, [sp, #100]	@ 0x64
    part_draw_dsc.type = LV_CHECKBOX_DRAW_PART_BOX;
 800656a:	2700      	movs	r7, #0
 800656c:	971a      	str	r7, [sp, #104]	@ 0x68
    part_draw_dsc.draw_area = &marker_area_transf;
 800656e:	f10d 0ba8 	add.w	fp, sp, #168	@ 0xa8
 8006572:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
    part_draw_dsc.part = LV_PART_INDICATOR;
 8006576:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800657a:	9325      	str	r3, [sp, #148]	@ 0x94

    lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 800657c:	f10d 0c60 	add.w	ip, sp, #96	@ 0x60
 8006580:	4662      	mov	r2, ip
 8006582:	211a      	movs	r1, #26
 8006584:	4620      	mov	r0, r4
 8006586:	f00a fb9f 	bl	8010cc8 <lv_event_send>
    lv_draw_rect(draw_ctx, &indic_dsc, &marker_area_transf);
 800658a:	465a      	mov	r2, fp
 800658c:	4649      	mov	r1, r9
 800658e:	f8dd b014 	ldr.w	fp, [sp, #20]
 8006592:	4658      	mov	r0, fp
 8006594:	f003 fb9e 	bl	8009cd4 <lv_draw_rect>
    lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8006598:	f10d 0c60 	add.w	ip, sp, #96	@ 0x60
 800659c:	4662      	mov	r2, ip
 800659e:	211b      	movs	r1, #27
 80065a0:	4620      	mov	r0, r4
 80065a2:	f00a fb91 	bl	8010cc8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80065a6:	2259      	movs	r2, #89	@ 0x59
 80065a8:	4639      	mov	r1, r7
 80065aa:	4620      	mov	r0, r4
 80065ac:	f016 f8a2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80065b0:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80065b4:	2258      	movs	r2, #88	@ 0x58
 80065b6:	4639      	mov	r1, r7
 80065b8:	4620      	mov	r0, r4
 80065ba:	f016 f89b 	bl	801c6f4 <lv_obj_get_style_prop>

    lv_coord_t line_space = lv_obj_get_style_text_line_space(obj, LV_PART_MAIN);
    lv_coord_t letter_space = lv_obj_get_style_text_letter_space(obj, LV_PART_MAIN);

    lv_point_t txt_size;
    lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80065be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80065c0:	9702      	str	r7, [sp, #8]
 80065c2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	f8cd 9000 	str.w	r9, [sp]
 80065cc:	b203      	sxth	r3, r0
 80065ce:	9a07      	ldr	r2, [sp, #28]
 80065d0:	a817      	add	r0, sp, #92	@ 0x5c
 80065d2:	f021 f99a 	bl	802790a <lv_txt_get_size>

    lv_draw_label_dsc_t txt_dsc;
    lv_draw_label_dsc_init(&txt_dsc);
 80065d6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fce5 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &txt_dsc);
 80065de:	ab0f      	add	r3, sp, #60	@ 0x3c
 80065e0:	461a      	mov	r2, r3
 80065e2:	4639      	mov	r1, r7
 80065e4:	4620      	mov	r0, r4
 80065e6:	f012 fcbf 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80065ea:	eba5 030a 	sub.w	r3, r5, sl
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	b21b      	sxth	r3, r3

    lv_coord_t y_ofs = (lv_area_get_height(&marker_area) - font_h) / 2;
 80065f4:	9906      	ldr	r1, [sp, #24]
 80065f6:	1a5b      	subs	r3, r3, r1
 80065f8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_area_t txt_area;
    txt_area.x1 = marker_area.x2 + bg_colp;
 80065fc:	9a08      	ldr	r2, [sp, #32]
 80065fe:	4416      	add	r6, r2
 8006600:	f8ad 6034 	strh.w	r6, [sp, #52]	@ 0x34
    txt_area.x2 = txt_area.x1 + txt_size.x;
 8006604:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8006608:	fa12 f686 	uxtah	r6, r2, r6
 800660c:	f8ad 6038 	strh.w	r6, [sp, #56]	@ 0x38
    txt_area.y1 = obj->coords.y1 + bg_topp + y_ofs;
 8006610:	8ae2      	ldrh	r2, [r4, #22]
 8006612:	4442      	add	r2, r8
 8006614:	b292      	uxth	r2, r2
 8006616:	eb02 0363 	add.w	r3, r2, r3, asr #1
 800661a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    txt_area.y2 = txt_area.y1 + txt_size.y;
 800661e:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 8006622:	fa12 f383 	uxtah	r3, r2, r3
 8006626:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a

    lv_draw_label(draw_ctx, &txt_dsc, &txt_area, cb->txt, NULL);
 800662a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800662c:	9700      	str	r7, [sp, #0]
 800662e:	aa0d      	add	r2, sp, #52	@ 0x34
 8006630:	a90f      	add	r1, sp, #60	@ 0x3c
 8006632:	4658      	mov	r0, fp
 8006634:	f001 fce8 	bl	8008008 <lv_draw_label>
}
 8006638:	b03d      	add	sp, #244	@ 0xf4
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663e:	bf00      	nop
 8006640:	08029f8c 	.word	0x08029f8c

08006644 <lv_checkbox_event>:
{
 8006644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 800664c:	4846      	ldr	r0, [pc, #280]	@ (8006768 <lv_checkbox_event+0x124>)
 800664e:	f00a fa91 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8006652:	2801      	cmp	r0, #1
 8006654:	d002      	beq.n	800665c <lv_checkbox_event+0x18>
}
 8006656:	b006      	add	sp, #24
 8006658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_event_code_t code = lv_event_get_code(e);
 800665c:	4620      	mov	r0, r4
 800665e:	f00a fb61 	bl	8010d24 <lv_event_get_code>
 8006662:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8006664:	4620      	mov	r0, r4
 8006666:	f00a fb59 	bl	8010d1c <lv_event_get_target>
 800666a:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 800666c:	2d2c      	cmp	r5, #44	@ 0x2c
 800666e:	d007      	beq.n	8006680 <lv_checkbox_event+0x3c>
    else if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8006670:	2d13      	cmp	r5, #19
 8006672:	d068      	beq.n	8006746 <lv_checkbox_event+0x102>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8006674:	2d15      	cmp	r5, #21
 8006676:	d1ee      	bne.n	8006656 <lv_checkbox_event+0x12>
        lv_checkbox_draw(e);
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff fec5 	bl	8006408 <lv_checkbox_draw>
 800667e:	e7ea      	b.n	8006656 <lv_checkbox_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 8006680:	4620      	mov	r0, r4
 8006682:	f00a fb53 	bl	8010d2c <lv_event_get_param>
 8006686:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8006688:	2257      	movs	r2, #87	@ 0x57
 800668a:	2100      	movs	r1, #0
 800668c:	4630      	mov	r0, r6
 800668e:	f016 f831 	bl	801c6f4 <lv_obj_get_style_prop>
 8006692:	4607      	mov	r7, r0
 8006694:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8006698:	2259      	movs	r2, #89	@ 0x59
 800669a:	2100      	movs	r1, #0
 800669c:	4630      	mov	r0, r6
 800669e:	f016 f829 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80066a2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80066a6:	2258      	movs	r2, #88	@ 0x58
 80066a8:	2100      	movs	r1, #0
 80066aa:	4630      	mov	r0, r6
 80066ac:	f016 f822 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_txt_get_size(&txt_size, cb->txt, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 80066b0:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80066ba:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	f8cd 8000 	str.w	r8, [sp]
 80066c4:	b203      	sxth	r3, r0
 80066c6:	463a      	mov	r2, r7
 80066c8:	a804      	add	r0, sp, #16
 80066ca:	f021 f91e 	bl	802790a <lv_txt_get_size>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80066ce:	2215      	movs	r2, #21
 80066d0:	4649      	mov	r1, r9
 80066d2:	4630      	mov	r0, r6
 80066d4:	f016 f80e 	bl	801c6f4 <lv_obj_get_style_prop>
 80066d8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80066da:	2212      	movs	r2, #18
 80066dc:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80066e0:	4630      	mov	r0, r6
 80066e2:	f016 f807 	bl	801c6f4 <lv_obj_get_style_prop>
 80066e6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80066e8:	2213      	movs	r2, #19
 80066ea:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80066ee:	4630      	mov	r0, r6
 80066f0:	f016 f800 	bl	801c6f4 <lv_obj_get_style_prop>
 80066f4:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80066f6:	2210      	movs	r2, #16
 80066f8:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80066fc:	4630      	mov	r0, r6
 80066fe:	f015 fff9 	bl	801c6f4 <lv_obj_get_style_prop>
 8006702:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006704:	2211      	movs	r2, #17
 8006706:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800670a:	4630      	mov	r0, r6
 800670c:	f015 fff2 	bl	801c6f4 <lv_obj_get_style_prop>
        marker_size.x = font_h + marker_leftp + marker_rightp;
 8006710:	b2a3      	uxth	r3, r4
 8006712:	eb03 0208 	add.w	r2, r3, r8
 8006716:	fa1a f282 	uxtah	r2, sl, r2
 800671a:	f8ad 2014 	strh.w	r2, [sp, #20]
        marker_size.y = font_h + marker_topp + marker_bottomp;
 800671e:	444b      	add	r3, r9
 8006720:	fa10 f383 	uxtah	r3, r0, r3
 8006724:	b21b      	sxth	r3, r3
 8006726:	f8ad 3016 	strh.w	r3, [sp, #22]
        p->x = marker_size.x + txt_size.x + bg_colp;
 800672a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800672e:	fa11 f282 	uxtah	r2, r1, r2
 8006732:	fa17 f282 	uxtah	r2, r7, r2
 8006736:	802a      	strh	r2, [r5, #0]
        p->y = LV_MAX(marker_size.y, txt_size.y);
 8006738:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800673c:	4293      	cmp	r3, r2
 800673e:	bfb8      	it	lt
 8006740:	4613      	movlt	r3, r2
 8006742:	806b      	strh	r3, [r5, #2]
 8006744:	e787      	b.n	8006656 <lv_checkbox_event+0x12>
        lv_coord_t * s = lv_event_get_param(e);
 8006746:	4620      	mov	r0, r4
 8006748:	f00a faf0 	bl	8010d2c <lv_event_get_param>
 800674c:	4604      	mov	r4, r0
        lv_coord_t m = lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR);
 800674e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8006752:	4630      	mov	r0, r6
 8006754:	f012 fd4f 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
        *s = LV_MAX(*s, m);
 8006758:	f9b4 3000 	ldrsh.w	r3, [r4]
 800675c:	4283      	cmp	r3, r0
 800675e:	bfb8      	it	lt
 8006760:	4603      	movlt	r3, r0
 8006762:	8023      	strh	r3, [r4, #0]
 8006764:	e777      	b.n	8006656 <lv_checkbox_event+0x12>
 8006766:	bf00      	nop
 8006768:	08029f8c 	.word	0x08029f8c

0800676c <lv_checkbox_destructor>:
    if(!cb->static_txt) {
 800676c:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8006770:	f013 0f01 	tst.w	r3, #1
 8006774:	d000      	beq.n	8006778 <lv_checkbox_destructor+0xc>
 8006776:	4770      	bx	lr
{
 8006778:	b510      	push	{r4, lr}
 800677a:	460c      	mov	r4, r1
        lv_mem_free((void *)cb->txt);
 800677c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800677e:	f010 f8e9 	bl	8016954 <lv_mem_free>
        cb->txt = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8006786:	bd10      	pop	{r4, pc}

08006788 <lv_checkbox_constructor>:
{
 8006788:	b510      	push	{r4, lr}
 800678a:	460c      	mov	r4, r1
    cb->txt = "Check box";
 800678c:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <lv_checkbox_constructor+0x30>)
 800678e:	624b      	str	r3, [r1, #36]	@ 0x24
    cb->static_txt = 1;
 8006790:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	f881 3028 	strb.w	r3, [r1, #40]	@ 0x28
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 800679c:	2102      	movs	r1, #2
 800679e:	4620      	mov	r0, r4
 80067a0:	f012 f8ae 	bl	8018900 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 80067a4:	2108      	movs	r1, #8
 80067a6:	4620      	mov	r0, r4
 80067a8:	f012 f8aa 	bl	8018900 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80067ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80067b0:	4620      	mov	r0, r4
 80067b2:	f012 f8a5 	bl	8018900 <lv_obj_add_flag>
}
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	08029c80 	.word	0x08029c80

080067bc <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 80067bc:	b283      	uxth	r3, r0
 80067be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80067c2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 80067c6:	b28b      	uxth	r3, r1
 80067c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80067cc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80067d0:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80067d2:	040b      	lsls	r3, r1, #16
 80067d4:	fa13 f181 	uxtah	r1, r3, r1
 80067d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006804 <lv_color_mix+0x48>)
 80067da:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80067dc:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 80067e0:	fa1c f080 	uxtah	r0, ip, r0
 80067e4:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80067e6:	1a40      	subs	r0, r0, r1
 80067e8:	08d2      	lsrs	r2, r2, #3
 80067ea:	fb00 f202 	mul.w	r2, r0, r2
 80067ee:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 80067f2:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 80067f4:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 80067f8:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 80067fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 80067fe:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8006802:	4770      	bx	lr
 8006804:	07e0f81f 	.word	0x07e0f81f

08006808 <lv_color_fill>:

void LV_ATTRIBUTE_FAST_MEM lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t)buf;
    if(buf_int & 0x3) {
 8006808:	f010 0f03 	tst.w	r0, #3
 800680c:	d002      	beq.n	8006814 <lv_color_fill+0xc>
        *buf = color;
 800680e:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
 8006812:	3a01      	subs	r2, #1
    }

    uint32_t c32 = (uint32_t)color.full + ((uint32_t)color.full << 16);
 8006814:	040b      	lsls	r3, r1, #16
 8006816:	fa13 f381 	uxtah	r3, r3, r1
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
 800681a:	e009      	b.n	8006830 <lv_color_fill+0x28>
        *buf32 = c32;
 800681c:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
 800681e:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
 8006820:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
 8006822:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
 8006824:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
 8006826:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
 8006828:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
 800682a:	61c3      	str	r3, [r0, #28]
        buf32++;
 800682c:	3020      	adds	r0, #32

        px_num -= 16;
 800682e:	3a10      	subs	r2, #16
    while(px_num > 16) {
 8006830:	2a10      	cmp	r2, #16
 8006832:	d8f3      	bhi.n	800681c <lv_color_fill+0x14>
 8006834:	e002      	b.n	800683c <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
 8006836:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
 800683a:	3a01      	subs	r2, #1
    while(px_num) {
 800683c:	2a00      	cmp	r2, #0
 800683e:	d1fa      	bne.n	8006836 <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num--;
    }
#endif
}
 8006840:	4770      	bx	lr

08006842 <lv_color_darken>:
{
    return lv_color_mix(lv_color_white(), c, lvl);
}

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
 8006842:	b508      	push	{r3, lr}
 8006844:	460a      	mov	r2, r1
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006852:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8006856:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    return lv_color_mix(lv_color_black(), c, lvl);
 800685a:	4601      	mov	r1, r0
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ffad 	bl	80067bc <lv_color_mix>
}
 8006862:	bd08      	pop	{r3, pc}

08006864 <lv_color_hsv_to_rgb>:
 * @param s saturation [0..100]
 * @param v value [0..100]
 * @return the given RGB color in RGB (with LV_COLOR_DEPTH depth)
 */
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
{
 8006864:	b500      	push	{lr}
    h = (uint32_t)((uint32_t)h * 255) / 360;
 8006866:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 800686a:	08c0      	lsrs	r0, r0, #3
 800686c:	4b3f      	ldr	r3, [pc, #252]	@ (800696c <lv_color_hsv_to_rgb+0x108>)
 800686e:	fba3 3000 	umull	r3, r0, r3, r0
 8006872:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8006876:	f3c0 008f 	ubfx	r0, r0, #2, #16
    s = (uint16_t)((uint16_t)s * 255) / 100;
 800687a:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800687e:	b28b      	uxth	r3, r1
 8006880:	493b      	ldr	r1, [pc, #236]	@ (8006970 <lv_color_hsv_to_rgb+0x10c>)
 8006882:	fba1 e303 	umull	lr, r3, r1, r3
 8006886:	f3c3 1347 	ubfx	r3, r3, #5, #8
    v = (uint16_t)((uint16_t)v * 255) / 100;
 800688a:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
 800688e:	b292      	uxth	r2, r2
 8006890:	fba1 1202 	umull	r1, r2, r1, r2
 8006894:	f3c2 1247 	ubfx	r2, r2, #5, #8

    uint8_t r, g, b;

    uint8_t region, remainder, p, q, t;

    if(s == 0) {
 8006898:	b383      	cbz	r3, 80068fc <lv_color_hsv_to_rgb+0x98>
        return lv_color_make(v, v, v);
    }

    region    = h / 43;
 800689a:	4936      	ldr	r1, [pc, #216]	@ (8006974 <lv_color_hsv_to_rgb+0x110>)
 800689c:	fba1 1000 	umull	r1, r0, r1, r0
 80068a0:	f3c0 00c7 	ubfx	r0, r0, #3, #8
    remainder = (h - (region * 43)) * 6;
 80068a4:	fa1f f18c 	uxth.w	r1, ip
 80068a8:	f06f 0c2a 	mvn.w	ip, #42	@ 0x2a
 80068ac:	fb0c 1100 	mla	r1, ip, r0, r1
 80068b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80068b4:	0049      	lsls	r1, r1, #1
 80068b6:	b2c9      	uxtb	r1, r1

    p = (v * (255 - s)) >> 8;
 80068b8:	f1c3 0eff 	rsb	lr, r3, #255	@ 0xff
 80068bc:	fb0e fe02 	mul.w	lr, lr, r2
 80068c0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80068c4:	fb01 fc03 	mul.w	ip, r1, r3
 80068c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80068cc:	f1cc 0cff 	rsb	ip, ip, #255	@ 0xff
 80068d0:	fb0c fc02 	mul.w	ip, ip, r2
 80068d4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80068d8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	121b      	asrs	r3, r3, #8
 80068e2:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80068e6:	fb02 f303 	mul.w	r3, r2, r3
 80068ea:	f3c3 2307 	ubfx	r3, r3, #8, #8

    switch(region) {
 80068ee:	2804      	cmp	r0, #4
 80068f0:	d836      	bhi.n	8006960 <lv_color_hsv_to_rgb+0xfc>
 80068f2:	e8df f000 	tbb	[pc, r0]
 80068f6:	1412      	.short	0x1412
 80068f8:	2b28      	.short	0x2b28
 80068fa:	30          	.byte	0x30
 80068fb:	00          	.byte	0x00
 80068fc:	0951      	lsrs	r1, r2, #5
 80068fe:	08d3      	lsrs	r3, r2, #3
 8006900:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f361 0002 	bfi	r0, r1, #0, #3
 800690c:	f363 00c7 	bfi	r0, r3, #3, #5
 8006910:	f363 200c 	bfi	r0, r3, #8, #5
 8006914:	f362 304f 	bfi	r0, r2, #13, #3
        return lv_color_make(v, v, v);
 8006918:	e013      	b.n	8006942 <lv_color_hsv_to_rgb+0xde>
    switch(region) {
 800691a:	4694      	mov	ip, r2
 800691c:	461a      	mov	r2, r3
 800691e:	f3c2 1342 	ubfx	r3, r2, #5, #3
 8006922:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8006926:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 800692a:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800692e:	f04f 0000 	mov.w	r0, #0
 8006932:	f363 0002 	bfi	r0, r3, #0, #3
 8006936:	f36c 00c7 	bfi	r0, ip, #3, #5
 800693a:	f36e 200c 	bfi	r0, lr, #8, #5
 800693e:	f362 304f 	bfi	r0, r2, #13, #3
            break;
    }

    lv_color_t result = lv_color_make(r, g, b);
    return result;
}
 8006942:	f85d fb04 	ldr.w	pc, [sp], #4
            r = p;
 8006946:	46f4      	mov	ip, lr
            b = t;
 8006948:	469e      	mov	lr, r3
            break;
 800694a:	e7e8      	b.n	800691e <lv_color_hsv_to_rgb+0xba>
            break;
 800694c:	4663      	mov	r3, ip
            r = p;
 800694e:	46f4      	mov	ip, lr
            b = v;
 8006950:	4696      	mov	lr, r2
            g = q;
 8006952:	461a      	mov	r2, r3
            break;
 8006954:	e7e3      	b.n	800691e <lv_color_hsv_to_rgb+0xba>
            break;
 8006956:	4611      	mov	r1, r2
            g = p;
 8006958:	4672      	mov	r2, lr
            b = v;
 800695a:	468e      	mov	lr, r1
            r = t;
 800695c:	469c      	mov	ip, r3
            break;
 800695e:	e7de      	b.n	800691e <lv_color_hsv_to_rgb+0xba>
            break;
 8006960:	4663      	mov	r3, ip
            r = v;
 8006962:	4694      	mov	ip, r2
            g = p;
 8006964:	4672      	mov	r2, lr
            b = q;
 8006966:	469e      	mov	lr, r3
            break;
 8006968:	e7d9      	b.n	800691e <lv_color_hsv_to_rgb+0xba>
 800696a:	bf00      	nop
 800696c:	16c16c17 	.word	0x16c16c17
 8006970:	51eb851f 	.word	0x51eb851f
 8006974:	2fa0be83 	.word	0x2fa0be83

08006978 <lv_palette_main>:
        LV_COLOR_MAKE(0x00, 0x96, 0x88), LV_COLOR_MAKE(0x4C, 0xAF, 0x50), LV_COLOR_MAKE(0x8B, 0xC3, 0x4A), LV_COLOR_MAKE(0xCD, 0xDC, 0x39),
        LV_COLOR_MAKE(0xFF, 0xEB, 0x3B), LV_COLOR_MAKE(0xFF, 0xC1, 0x07), LV_COLOR_MAKE(0xFF, 0x98, 0x00), LV_COLOR_MAKE(0xFF, 0x57, 0x22),
        LV_COLOR_MAKE(0x79, 0x55, 0x48), LV_COLOR_MAKE(0x60, 0x7D, 0x8B), LV_COLOR_MAKE(0x9E, 0x9E, 0x9E)
    };

    if(p >= _LV_PALETTE_LAST) {
 8006978:	2812      	cmp	r0, #18
 800697a:	d803      	bhi.n	8006984 <lv_palette_main+0xc>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    return colors[p];
 800697c:	4b07      	ldr	r3, [pc, #28]	@ (800699c <lv_palette_main+0x24>)
 800697e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]

}
 8006982:	4770      	bx	lr
 8006984:	f04f 0000 	mov.w	r0, #0
 8006988:	f020 0007 	bic.w	r0, r0, #7
 800698c:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8006990:	f420 50f8 	bic.w	r0, r0, #7936	@ 0x1f00
 8006994:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
        return lv_color_black();
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	0802a100 	.word	0x0802a100

080069a0 <lv_palette_lighten>:
        {LV_COLOR_MAKE(0x8D, 0x6E, 0x63), LV_COLOR_MAKE(0xA1, 0x88, 0x7F), LV_COLOR_MAKE(0xBC, 0xAA, 0xA4), LV_COLOR_MAKE(0xD7, 0xCC, 0xC8), LV_COLOR_MAKE(0xEF, 0xEB, 0xE9)},
        {LV_COLOR_MAKE(0x78, 0x90, 0x9C), LV_COLOR_MAKE(0x90, 0xA4, 0xAE), LV_COLOR_MAKE(0xB0, 0xBE, 0xC5), LV_COLOR_MAKE(0xCF, 0xD8, 0xDC), LV_COLOR_MAKE(0xEC, 0xEF, 0xF1)},
        {LV_COLOR_MAKE(0xBD, 0xBD, 0xBD), LV_COLOR_MAKE(0xE0, 0xE0, 0xE0), LV_COLOR_MAKE(0xEE, 0xEE, 0xEE), LV_COLOR_MAKE(0xF5, 0xF5, 0xF5), LV_COLOR_MAKE(0xFA, 0xFA, 0xFA)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80069a0:	2812      	cmp	r0, #18
 80069a2:	d80a      	bhi.n	80069ba <lv_palette_lighten+0x1a>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 5) {
 80069a4:	3901      	subs	r1, #1
 80069a6:	b2c9      	uxtb	r1, r1
 80069a8:	2904      	cmp	r1, #4
 80069aa:	d811      	bhi.n	80069d0 <lv_palette_lighten+0x30>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80069ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80069b0:	4408      	add	r0, r1
 80069b2:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <lv_palette_lighten+0x48>)
 80069b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 80069b8:	4770      	bx	lr
 80069ba:	f04f 0000 	mov.w	r0, #0
 80069be:	f020 0007 	bic.w	r0, r0, #7
 80069c2:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 80069c6:	f420 50f8 	bic.w	r0, r0, #7936	@ 0x1f00
 80069ca:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
        return lv_color_black();
 80069ce:	4770      	bx	lr
 80069d0:	f04f 0000 	mov.w	r0, #0
 80069d4:	f020 0007 	bic.w	r0, r0, #7
 80069d8:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 80069dc:	f420 50f8 	bic.w	r0, r0, #7936	@ 0x1f00
 80069e0:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
        return lv_color_black();
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	0802a040 	.word	0x0802a040

080069ec <lv_palette_darken>:
        {LV_COLOR_MAKE(0x6D, 0x4C, 0x41), LV_COLOR_MAKE(0x5D, 0x40, 0x37), LV_COLOR_MAKE(0x4E, 0x34, 0x2E), LV_COLOR_MAKE(0x3E, 0x27, 0x23)},
        {LV_COLOR_MAKE(0x54, 0x6E, 0x7A), LV_COLOR_MAKE(0x45, 0x5A, 0x64), LV_COLOR_MAKE(0x37, 0x47, 0x4F), LV_COLOR_MAKE(0x26, 0x32, 0x38)},
        {LV_COLOR_MAKE(0x75, 0x75, 0x75), LV_COLOR_MAKE(0x61, 0x61, 0x61), LV_COLOR_MAKE(0x42, 0x42, 0x42), LV_COLOR_MAKE(0x21, 0x21, 0x21)},
    };

    if(p >= _LV_PALETTE_LAST) {
 80069ec:	2812      	cmp	r0, #18
 80069ee:	d809      	bhi.n	8006a04 <lv_palette_darken+0x18>
        LV_LOG_WARN("Invalid palette: %d", p);
        return lv_color_black();
    }

    if(lvl == 0 || lvl > 4) {
 80069f0:	3901      	subs	r1, #1
 80069f2:	b2c9      	uxtb	r1, r1
 80069f4:	2903      	cmp	r1, #3
 80069f6:	d810      	bhi.n	8006a1a <lv_palette_darken+0x2e>
        return lv_color_black();
    }

    lvl--;

    return colors[p][lvl];
 80069f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80069fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <lv_palette_darken+0x44>)
 80069fe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
 8006a02:	4770      	bx	lr
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f020 0007 	bic.w	r0, r0, #7
 8006a0c:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8006a10:	f420 50f8 	bic.w	r0, r0, #7936	@ 0x1f00
 8006a14:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
        return lv_color_black();
 8006a18:	4770      	bx	lr
 8006a1a:	f04f 0000 	mov.w	r0, #0
 8006a1e:	f020 0007 	bic.w	r0, r0, #7
 8006a22:	f020 00f8 	bic.w	r0, r0, #248	@ 0xf8
 8006a26:	f420 50f8 	bic.w	r0, r0, #7936	@ 0x1f00
 8006a2a:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
        return lv_color_black();
 8006a2e:	4770      	bx	lr
 8006a30:	08029fa8 	.word	0x08029fa8

08006a34 <fast_hsv2rgb>:
 * We fold all symmetry by swapping the R, G, B pointers so that the code is the same for all sextants.
 * We replace division by 255 by a division by 256, a.k.a a shift right by 8 bits.
 * This is wrong, but since this is only used to compute the pixels on the screen and not the final color, it's ok.
 */
static void fast_hsv2rgb(uint16_t h, uint8_t s, uint8_t v, uint8_t * r, uint8_t * g, uint8_t * b)
{
 8006a34:	b530      	push	{r4, r5, lr}
 8006a36:	9c03      	ldr	r4, [sp, #12]
 8006a38:	9d04      	ldr	r5, [sp, #16]
    if(!s) {
 8006a3a:	b339      	cbz	r1, 8006a8c <fast_hsv2rgb+0x58>
 8006a3c:	468c      	mov	ip, r1
        *r = *g = *b = v;
        return;
    }

    uint8_t sextant = h >> 8;
 8006a3e:	ea4f 2e10 	mov.w	lr, r0, lsr #8
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8006a42:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8006a46:	d102      	bne.n	8006a4e <fast_hsv2rgb+0x1a>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	f01e 0f04 	tst.w	lr, #4
 8006a52:	d102      	bne.n	8006a5a <fast_hsv2rgb+0x26>
 8006a54:	4619      	mov	r1, r3
 8006a56:	4623      	mov	r3, r4
 8006a58:	460c      	mov	r4, r1
 8006a5a:	f01e 0f06 	tst.w	lr, #6
 8006a5e:	d119      	bne.n	8006a94 <fast_hsv2rgb+0x60>
 8006a60:	f01e 0f01 	tst.w	lr, #1
 8006a64:	d002      	beq.n	8006a6c <fast_hsv2rgb+0x38>
 8006a66:	4619      	mov	r1, r3
 8006a68:	462b      	mov	r3, r5
 8006a6a:	460d      	mov	r5, r1

    *g = v;
 8006a6c:	702a      	strb	r2, [r5, #0]

    uint8_t bb = ~s;
 8006a6e:	ea6f 010c 	mvn.w	r1, ip
 8006a72:	b2c9      	uxtb	r1, r1
    uint16_t ww = v * bb; /*Don't try to be precise, but instead, be fast*/
 8006a74:	fb02 f101 	mul.w	r1, r2, r1
    *b = ww >> 8;
 8006a78:	0a09      	lsrs	r1, r1, #8
 8006a7a:	7021      	strb	r1, [r4, #0]

    uint8_t h_frac = h & 0xff;
 8006a7c:	b2c1      	uxtb	r1, r0

    if(!(sextant & 1)) {
 8006a7e:	f01e 0f01 	tst.w	lr, #1
 8006a82:	d113      	bne.n	8006aac <fast_hsv2rgb+0x78>
        /*Up slope*/
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8006a84:	b969      	cbnz	r1, 8006aa2 <fast_hsv2rgb+0x6e>
 8006a86:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
 8006a8a:	e012      	b.n	8006ab2 <fast_hsv2rgb+0x7e>
        *r = *g = *b = v;
 8006a8c:	702a      	strb	r2, [r5, #0]
 8006a8e:	7022      	strb	r2, [r4, #0]
 8006a90:	701a      	strb	r2, [r3, #0]
        return;
 8006a92:	e016      	b.n	8006ac2 <fast_hsv2rgb+0x8e>
    HSV_PTR_SWAP(sextant, r, g, b); /*Swap pointers so the conversion code is the same*/
 8006a94:	f01e 0f01 	tst.w	lr, #1
 8006a98:	d1e8      	bne.n	8006a6c <fast_hsv2rgb+0x38>
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	462b      	mov	r3, r5
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	e7e4      	b.n	8006a6c <fast_hsv2rgb+0x38>
        ww = !h_frac ? ((uint16_t)s << 8) : (s * (uint8_t)(-h_frac)); /*Skip multiply if not required*/
 8006aa2:	4249      	negs	r1, r1
 8006aa4:	b2c9      	uxtb	r1, r1
 8006aa6:	fb0c fc01 	mul.w	ip, ip, r1
 8006aaa:	e002      	b.n	8006ab2 <fast_hsv2rgb+0x7e>
    }
    else {
        /*Down slope*/
        ww = s * h_frac;
 8006aac:	b2c0      	uxtb	r0, r0
 8006aae:	fb00 fc0c 	mul.w	ip, r0, ip
    }
    bb = ww >> 8;
    bb = ~bb;
 8006ab2:	ea6f 2c1c 	mvn.w	ip, ip, lsr #8
 8006ab6:	fa5f fc8c 	uxtb.w	ip, ip
    ww = v * bb;
 8006aba:	fb02 f20c 	mul.w	r2, r2, ip
    *r = ww >> 8;
 8006abe:	0a12      	lsrs	r2, r2, #8
 8006ac0:	701a      	strb	r2, [r3, #0]
}
 8006ac2:	bd30      	pop	{r4, r5, pc}

08006ac4 <angle_to_mode_color_fast>:

static lv_color_t angle_to_mode_color_fast(lv_obj_t * obj, uint16_t angle)
{
 8006ac4:	b530      	push	{r4, r5, lr}
 8006ac6:	b085      	sub	sp, #20
    lv_colorwheel_t * ext = (lv_colorwheel_t *)obj;
    uint8_t r = 0, g = 0, b = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f88d 300f 	strb.w	r3, [sp, #15]
 8006ace:	f88d 300e 	strb.w	r3, [sp, #14]
 8006ad2:	f88d 300d 	strb.w	r3, [sp, #13]
    static uint16_t h = 0;
    static uint8_t s = 0, v = 0, m = 255;
    static uint16_t angle_saved = 0xffff;

    /*If the angle is different recalculate scaling*/
    if(angle_saved != angle) m = 255;
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8006c48 <angle_to_mode_color_fast+0x184>)
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	428b      	cmp	r3, r1
 8006adc:	d002      	beq.n	8006ae4 <angle_to_mode_color_fast+0x20>
 8006ade:	4b5b      	ldr	r3, [pc, #364]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006ae0:	22ff      	movs	r2, #255	@ 0xff
 8006ae2:	701a      	strb	r2, [r3, #0]
    angle_saved = angle;
 8006ae4:	4b58      	ldr	r3, [pc, #352]	@ (8006c48 <angle_to_mode_color_fast+0x184>)
 8006ae6:	8019      	strh	r1, [r3, #0]

    switch(ext->mode) {
 8006ae8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006aec:	f3c3 0201 	ubfx	r2, r3, #0, #2
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d04a      	beq.n	8006b8e <angle_to_mode_color_fast+0xca>
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d076      	beq.n	8006bea <angle_to_mode_color_fast+0x126>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            /*Don't recompute costly scaling if it does not change*/
            if(m != ext->mode) {
 8006afc:	4c53      	ldr	r4, [pc, #332]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006afe:	7824      	ldrb	r4, [r4, #0]
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d01a      	beq.n	8006b3a <angle_to_mode_color_fast+0x76>
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8006b04:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 8006b08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b0c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006b10:	4c4f      	ldr	r4, [pc, #316]	@ (8006c50 <angle_to_mode_color_fast+0x18c>)
 8006b12:	fb84 5303 	smull	r5, r3, r4, r3
 8006b16:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8006b1a:	4d4e      	ldr	r5, [pc, #312]	@ (8006c54 <angle_to_mode_color_fast+0x190>)
 8006b1c:	702b      	strb	r3, [r5, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8006b1e:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8006b22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b26:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006b2a:	fb84 4303 	smull	r4, r3, r4, r3
 8006b2e:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8006b32:	4849      	ldr	r0, [pc, #292]	@ (8006c58 <angle_to_mode_color_fast+0x194>)
 8006b34:	7003      	strb	r3, [r0, #0]
                m = ext->mode;
 8006b36:	4b45      	ldr	r3, [pc, #276]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006b38:	701a      	strb	r2, [r3, #0]
            }
            fast_hsv2rgb(angle * 6, s, v, &r, &g,
 8006b3a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8006b3e:	0040      	lsls	r0, r0, #1
 8006b40:	b280      	uxth	r0, r0
 8006b42:	f10d 030d 	add.w	r3, sp, #13
 8006b46:	9301      	str	r3, [sp, #4]
 8006b48:	f10d 030e 	add.w	r3, sp, #14
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	f10d 030f 	add.w	r3, sp, #15
 8006b52:	4a41      	ldr	r2, [pc, #260]	@ (8006c58 <angle_to_mode_color_fast+0x194>)
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	493f      	ldr	r1, [pc, #252]	@ (8006c54 <angle_to_mode_color_fast+0x190>)
 8006b58:	7809      	ldrb	r1, [r1, #0]
 8006b5a:	f7ff ff6b 	bl	8006a34 <fast_hsv2rgb>
                m = ext->mode;
            }
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
            break;
    }
    return lv_color_make(r, g, b);
 8006b5e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8006b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8006b66:	f89d 200d 	ldrb.w	r2, [sp, #13]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8006b6a:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8006b6e:	08c9      	lsrs	r1, r1, #3
 8006b70:	08d2      	lsrs	r2, r2, #3
 8006b72:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8006b76:	f04f 0000 	mov.w	r0, #0
 8006b7a:	f36c 0002 	bfi	r0, ip, #0, #3
 8006b7e:	f361 00c7 	bfi	r0, r1, #3, #5
 8006b82:	f362 200c 	bfi	r0, r2, #8, #5
 8006b86:	f363 304f 	bfi	r0, r3, #13, #3
}
 8006b8a:	b005      	add	sp, #20
 8006b8c:	bd30      	pop	{r4, r5, pc}
            if(m != ext->mode) {
 8006b8e:	4c2f      	ldr	r4, [pc, #188]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006b90:	7824      	ldrb	r4, [r4, #0]
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	d019      	beq.n	8006bca <angle_to_mode_color_fast+0x106>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 8006b96:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8006b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	4c2f      	ldr	r4, [pc, #188]	@ (8006c5c <angle_to_mode_color_fast+0x198>)
 8006ba0:	fba4 4303 	umull	r4, r3, r4, r3
 8006ba4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8006ba8:	4c2d      	ldr	r4, [pc, #180]	@ (8006c60 <angle_to_mode_color_fast+0x19c>)
 8006baa:	8023      	strh	r3, [r4, #0]
                v = (uint8_t)(((uint16_t)ext->hsv.v * 51) / 20);
 8006bac:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
 8006bb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bb4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006bb8:	4825      	ldr	r0, [pc, #148]	@ (8006c50 <angle_to_mode_color_fast+0x18c>)
 8006bba:	fb80 0303 	smull	r0, r3, r0, r3
 8006bbe:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8006bc2:	4825      	ldr	r0, [pc, #148]	@ (8006c58 <angle_to_mode_color_fast+0x194>)
 8006bc4:	7003      	strb	r3, [r0, #0]
                m = ext->mode;
 8006bc6:	4b21      	ldr	r3, [pc, #132]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006bc8:	701a      	strb	r2, [r3, #0]
            fast_hsv2rgb(h, angle, v, &r, &g, &b);
 8006bca:	f10d 030d 	add.w	r3, sp, #13
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	f10d 030e 	add.w	r3, sp, #14
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	f10d 030f 	add.w	r3, sp, #15
 8006bda:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <angle_to_mode_color_fast+0x194>)
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	b2c9      	uxtb	r1, r1
 8006be0:	481f      	ldr	r0, [pc, #124]	@ (8006c60 <angle_to_mode_color_fast+0x19c>)
 8006be2:	8800      	ldrh	r0, [r0, #0]
 8006be4:	f7ff ff26 	bl	8006a34 <fast_hsv2rgb>
            break;
 8006be8:	e7b9      	b.n	8006b5e <angle_to_mode_color_fast+0x9a>
            if(m != ext->mode) {
 8006bea:	4c18      	ldr	r4, [pc, #96]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006bec:	7824      	ldrb	r4, [r4, #0]
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	d019      	beq.n	8006c26 <angle_to_mode_color_fast+0x162>
                h = (uint16_t)(((uint32_t)ext->hsv.h * 6 * 256) / 360);
 8006bf2:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8006bf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006bf8:	019b      	lsls	r3, r3, #6
 8006bfa:	4c18      	ldr	r4, [pc, #96]	@ (8006c5c <angle_to_mode_color_fast+0x198>)
 8006bfc:	fba4 4303 	umull	r4, r3, r4, r3
 8006c00:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8006c04:	4c16      	ldr	r4, [pc, #88]	@ (8006c60 <angle_to_mode_color_fast+0x19c>)
 8006c06:	8023      	strh	r3, [r4, #0]
                s = (uint8_t)(((uint16_t)ext->hsv.s * 51) / 20);
 8006c08:	f890 3026 	ldrb.w	r3, [r0, #38]	@ 0x26
 8006c0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c10:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8006c14:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <angle_to_mode_color_fast+0x18c>)
 8006c16:	fb80 0303 	smull	r0, r3, r0, r3
 8006c1a:	f3c3 03c7 	ubfx	r3, r3, #3, #8
 8006c1e:	480d      	ldr	r0, [pc, #52]	@ (8006c54 <angle_to_mode_color_fast+0x190>)
 8006c20:	7003      	strb	r3, [r0, #0]
                m = ext->mode;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <angle_to_mode_color_fast+0x188>)
 8006c24:	701a      	strb	r2, [r3, #0]
            fast_hsv2rgb(h, s, angle, &r, &g, &b);
 8006c26:	f10d 030d 	add.w	r3, sp, #13
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	f10d 030e 	add.w	r3, sp, #14
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	f10d 030f 	add.w	r3, sp, #15
 8006c36:	b2ca      	uxtb	r2, r1
 8006c38:	4906      	ldr	r1, [pc, #24]	@ (8006c54 <angle_to_mode_color_fast+0x190>)
 8006c3a:	7809      	ldrb	r1, [r1, #0]
 8006c3c:	4808      	ldr	r0, [pc, #32]	@ (8006c60 <angle_to_mode_color_fast+0x19c>)
 8006c3e:	8800      	ldrh	r0, [r0, #0]
 8006c40:	f7ff fef8 	bl	8006a34 <fast_hsv2rgb>
            break;
 8006c44:	e78b      	b.n	8006b5e <angle_to_mode_color_fast+0x9a>
 8006c46:	bf00      	nop
 8006c48:	20000022 	.word	0x20000022
 8006c4c:	20000020 	.word	0x20000020
 8006c50:	66666667 	.word	0x66666667
 8006c54:	2000653b 	.word	0x2000653b
 8006c58:	2000653a 	.word	0x2000653a
 8006c5c:	16c16c17 	.word	0x16c16c17
 8006c60:	20006538 	.word	0x20006538

08006c64 <get_angle>:

static uint16_t get_angle(lv_obj_t * obj)
{
    lv_colorwheel_t * colorwheel = (lv_colorwheel_t *)obj;
    uint16_t angle;
    switch(colorwheel->mode) {
 8006c64:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d003      	beq.n	8006c78 <get_angle+0x14>
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d00c      	beq.n	8006c8e <get_angle+0x2a>
        default:
        case LV_COLORWHEEL_MODE_HUE:
            angle = colorwheel->hsv.h;
 8006c74:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
            break;
 8006c76:	4770      	bx	lr
        case LV_COLORWHEEL_MODE_SATURATION:
            angle = (colorwheel->hsv.s * 360) / 100;
 8006c78:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8006c7c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8006c80:	fb03 f000 	mul.w	r0, r3, r0
 8006c84:	4b07      	ldr	r3, [pc, #28]	@ (8006ca4 <get_angle+0x40>)
 8006c86:	fb83 3000 	smull	r3, r0, r3, r0
 8006c8a:	0940      	lsrs	r0, r0, #5
            break;
 8006c8c:	4770      	bx	lr
        case LV_COLORWHEEL_MODE_VALUE:
            angle = (colorwheel->hsv.v * 360) / 100 ;
 8006c8e:	f890 0027 	ldrb.w	r0, [r0, #39]	@ 0x27
 8006c92:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8006c96:	fb03 f000 	mul.w	r0, r3, r0
 8006c9a:	4b02      	ldr	r3, [pc, #8]	@ (8006ca4 <get_angle+0x40>)
 8006c9c:	fb83 3000 	smull	r3, r0, r3, r0
 8006ca0:	0940      	lsrs	r0, r0, #5
            break;
    }
    return angle;
}
 8006ca2:	4770      	bx	lr
 8006ca4:	51eb851f 	.word	0x51eb851f

08006ca8 <get_knob_area>:
{
 8006ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cac:	b083      	sub	sp, #12
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460c      	mov	r4, r1
    return (lv_opa_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_arc_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8006cb2:	2250      	movs	r2, #80	@ 0x50
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f015 fd1c 	bl	801c6f4 <lv_obj_get_style_prop>
    r = lv_obj_get_style_arc_width(obj, LV_PART_MAIN) / 2;
 8006cbc:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8006cc0:	fa03 f080 	sxtah	r0, r3, r0
 8006cc4:	f3c0 054f 	ubfx	r5, r0, #1, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8006cc8:	2212      	movs	r2, #18
 8006cca:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f015 fd10 	bl	801c6f4 <lv_obj_get_style_prop>
 8006cd4:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8006cd6:	2213      	movs	r2, #19
 8006cd8:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f015 fd09 	bl	801c6f4 <lv_obj_get_style_prop>
 8006ce2:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8006cea:	4620      	mov	r0, r4
 8006cec:	f015 fd02 	bl	801c6f4 <lv_obj_get_style_prop>
 8006cf0:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8006cf2:	2211      	movs	r2, #17
 8006cf4:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f015 fcfb 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_area.x1 = obj->coords.x1 + colorwheel->knob.pos.x - r - left;
 8006cfe:	8aa2      	ldrh	r2, [r4, #20]
 8006d00:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006d02:	441a      	add	r2, r3
 8006d04:	b292      	uxth	r2, r2
 8006d06:	1b53      	subs	r3, r2, r5
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	eba3 0309 	sub.w	r3, r3, r9
 8006d0e:	f8ad 3000 	strh.w	r3, [sp]
    knob_area.y1 = obj->coords.y1 + colorwheel->knob.pos.y - r - right;
 8006d12:	8ae3      	ldrh	r3, [r4, #22]
 8006d14:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8006d16:	440b      	add	r3, r1
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	1b59      	subs	r1, r3, r5
 8006d1c:	b289      	uxth	r1, r1
 8006d1e:	eba1 0108 	sub.w	r1, r1, r8
 8006d22:	f8ad 1002 	strh.w	r1, [sp, #2]
    knob_area.x2 = obj->coords.x1 + colorwheel->knob.pos.x + r + top;
 8006d26:	442a      	add	r2, r5
 8006d28:	fa17 f282 	uxtah	r2, r7, r2
 8006d2c:	f8ad 2004 	strh.w	r2, [sp, #4]
    knob_area.y2 = obj->coords.y1 + colorwheel->knob.pos.y + r + bottom;
 8006d30:	442b      	add	r3, r5
 8006d32:	fa10 f383 	uxtah	r3, r0, r3
 8006d36:	f8ad 3006 	strh.w	r3, [sp, #6]
    return knob_area;
 8006d3a:	466b      	mov	r3, sp
 8006d3c:	cb03      	ldmia	r3!, {r0, r1}
 8006d3e:	6030      	str	r0, [r6, #0]
 8006d40:	6071      	str	r1, [r6, #4]
}
 8006d42:	4630      	mov	r0, r6
 8006d44:	b003      	add	sp, #12
 8006d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006d4a <invalidate_knob>:
{
 8006d4a:	b510      	push	{r4, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	4604      	mov	r4, r0
    lv_area_t knob_area = get_knob_area(obj);
 8006d50:	4601      	mov	r1, r0
 8006d52:	4668      	mov	r0, sp
 8006d54:	f7ff ffa8 	bl	8006ca8 <get_knob_area>
    lv_obj_invalidate_area(obj, &knob_area);
 8006d58:	4669      	mov	r1, sp
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f013 f87b 	bl	8019e56 <lv_obj_invalidate_area>
}
 8006d60:	b002      	add	sp, #8
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <refr_knob_pos>:
{
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	4605      	mov	r5, r0
    invalidate_knob(obj);
 8006d68:	f7ff ffef 	bl	8006d4a <invalidate_knob>
    lv_coord_t w = lv_obj_get_width(obj);
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f012 fcaf 	bl	80196d0 <lv_obj_get_width>
 8006d72:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8006d74:	2250      	movs	r2, #80	@ 0x50
 8006d76:	2100      	movs	r1, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f015 fcbb 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8006d7e:	b204      	sxth	r4, r0
    lv_coord_t r = (w - scale_w) / 2;
 8006d80:	1b34      	subs	r4, r6, r4
 8006d82:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8006d86:	f344 044f 	sbfx	r4, r4, #1, #16
    uint16_t angle = get_angle(obj);
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f7ff ff6a 	bl	8006c64 <get_angle>
 8006d90:	4607      	mov	r7, r0
    colorwheel->knob.pos.x = (((int32_t)r * lv_trigo_sin(angle)) >> LV_TRIGO_SHIFT);
 8006d92:	b200      	sxth	r0, r0
 8006d94:	f00f fc9c 	bl	80166d0 <lv_trigo_sin>
 8006d98:	fb04 f000 	mul.w	r0, r4, r0
 8006d9c:	13c0      	asrs	r0, r0, #15
 8006d9e:	8528      	strh	r0, [r5, #40]	@ 0x28
 */
int16_t /* LV_ATTRIBUTE_FAST_MEM */ lv_trigo_sin(int16_t angle);

static inline int16_t LV_ATTRIBUTE_FAST_MEM lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8006da0:	f107 005a 	add.w	r0, r7, #90	@ 0x5a
 8006da4:	b200      	sxth	r0, r0
 8006da6:	f00f fc93 	bl	80166d0 <lv_trigo_sin>
    colorwheel->knob.pos.y = (((int32_t)r * lv_trigo_cos(angle)) >> LV_TRIGO_SHIFT);
 8006daa:	fb00 f404 	mul.w	r4, r0, r4
 8006dae:	13e4      	asrs	r4, r4, #15
 8006db0:	856c      	strh	r4, [r5, #42]	@ 0x2a
    colorwheel->knob.pos.x = colorwheel->knob.pos.x + w / 2;
 8006db2:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8006db4:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 8006db8:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8006dbc:	441a      	add	r2, r3
 8006dbe:	852a      	strh	r2, [r5, #40]	@ 0x28
    colorwheel->knob.pos.y = colorwheel->knob.pos.y + w / 2;
 8006dc0:	fa13 f484 	uxtah	r4, r3, r4
 8006dc4:	856c      	strh	r4, [r5, #42]	@ 0x2a
    invalidate_knob(obj);
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f7ff ffbf 	bl	8006d4a <invalidate_knob>
}
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dd0 <next_color_mode>:
{
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
    colorwheel->mode = (colorwheel->mode + 1) % 3;
 8006dd4:	f890 103c 	ldrb.w	r1, [r0, #60]	@ 0x3c
 8006dd8:	f001 0303 	and.w	r3, r1, #3
 8006ddc:	3301      	adds	r3, #1
 8006dde:	4a08      	ldr	r2, [pc, #32]	@ (8006e00 <next_color_mode+0x30>)
 8006de0:	fb82 c203 	smull	ip, r2, r2, r3
 8006de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	460a      	mov	r2, r1
 8006dec:	f363 0201 	bfi	r2, r3, #0, #2
 8006df0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    refr_knob_pos(obj);
 8006df4:	f7ff ffb6 	bl	8006d64 <refr_knob_pos>
    lv_obj_invalidate(obj);
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f013 f854 	bl	8019ea6 <lv_obj_invalidate>
}
 8006dfe:	bd10      	pop	{r4, pc}
 8006e00:	55555556 	.word	0x55555556

08006e04 <draw_disc_grad>:
{
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	b09b      	sub	sp, #108	@ 0x6c
 8006e0a:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8006e0c:	f009 ff86 	bl	8010d1c <lv_event_get_target>
 8006e10:	4605      	mov	r5, r0
 8006e12:	9001      	str	r0, [sp, #4]
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8006e14:	4620      	mov	r0, r4
 8006e16:	f009 fff9 	bl	8010e0c <lv_event_get_draw_ctx>
 8006e1a:	9002      	str	r0, [sp, #8]
    lv_coord_t w = lv_obj_get_width(obj);
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f012 fc57 	bl	80196d0 <lv_obj_get_width>
 8006e22:	4681      	mov	r9, r0
    lv_coord_t h = lv_obj_get_height(obj);
 8006e24:	4628      	mov	r0, r5
 8006e26:	f012 fc5a 	bl	80196de <lv_obj_get_height>
    lv_coord_t cx = obj->coords.x1 + w / 2;
 8006e2a:	f8b5 b014 	ldrh.w	fp, [r5, #20]
 8006e2e:	eb09 79d9 	add.w	r9, r9, r9, lsr #31
 8006e32:	f349 094f 	sbfx	r9, r9, #1, #16
 8006e36:	44cb      	add	fp, r9
 8006e38:	fa1f fb8b 	uxth.w	fp, fp
    lv_coord_t cy = obj->coords.y1 + h / 2;
 8006e3c:	8aeb      	ldrh	r3, [r5, #22]
 8006e3e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8006e42:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8006e46:	fa1f fa83 	uxth.w	sl, r3
    lv_draw_line_dsc_init(&line_dsc);
 8006e4a:	a817      	add	r0, sp, #92	@ 0x5c
 8006e4c:	f001 fc29 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 8006e50:	aa17      	add	r2, sp, #92	@ 0x5c
 8006e52:	2100      	movs	r1, #0
 8006e54:	4628      	mov	r0, r5
 8006e56:	f012 f92c 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    line_dsc.width = (r * 628 / (256 / LV_CPICKER_DEF_QF)) / 100;
 8006e5a:	f44f 731d 	mov.w	r3, #628	@ 0x274
 8006e5e:	fb03 f309 	mul.w	r3, r3, r9
 8006e62:	4a56      	ldr	r2, [pc, #344]	@ (8006fbc <draw_disc_grad+0x1b8>)
 8006e64:	fb82 1203 	smull	r1, r2, r2, r3
 8006e68:	17db      	asrs	r3, r3, #31
 8006e6a:	ebc3 3322 	rsb	r3, r3, r2, asr #12
 8006e6e:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    line_dsc.width += 2;
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3302      	adds	r3, #2
 8006e76:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 8006e7a:	2250      	movs	r2, #80	@ 0x50
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f015 fc38 	bl	801c6f4 <lv_obj_get_style_prop>
 8006e84:	4604      	mov	r4, r0
    return (lv_coord_t)v.num;
 8006e86:	b203      	sxth	r3, r0
 8006e88:	9303      	str	r3, [sp, #12]
    lv_draw_mask_radius_init(&mask_out_param, &obj->coords, LV_RADIUS_CIRCLE, false);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006e90:	f105 0114 	add.w	r1, r5, #20
 8006e94:	a811      	add	r0, sp, #68	@ 0x44
 8006e96:	f002 fe2f 	bl	8009af8 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, 0);
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	a811      	add	r0, sp, #68	@ 0x44
 8006e9e:	f002 fc05 	bl	80096ac <lv_draw_mask_add>
 8006ea2:	4680      	mov	r8, r0
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8006ea4:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
 8006ea8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
    dest->y1 = src->y1;
 8006eac:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 8006eb0:	f8ad 103e 	strh.w	r1, [sp, #62]	@ 0x3e
    dest->x2 = src->x2;
 8006eb4:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 8006eb8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
    dest->y2 = src->y2;
 8006ebc:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8006ec0:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
    mask_area.x1 += cir_w;
 8006ec4:	b2a4      	uxth	r4, r4
 8006ec6:	fa14 f080 	uxtah	r0, r4, r0
 8006eca:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
    mask_area.x2 -= cir_w;
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	1b12      	subs	r2, r2, r4
 8006ed2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
    mask_area.y1 += cir_w;
 8006ed6:	fa14 f181 	uxtah	r1, r4, r1
 8006eda:	f8ad 103e 	strh.w	r1, [sp, #62]	@ 0x3e
    mask_area.y2 -= cir_w;
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	1b1b      	subs	r3, r3, r4
 8006ee2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
    lv_draw_mask_radius_init(&mask_in_param, &mask_area, LV_RADIUS_CIRCLE, true);
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006eec:	a90f      	add	r1, sp, #60	@ 0x3c
 8006eee:	a809      	add	r0, sp, #36	@ 0x24
 8006ef0:	f002 fe02 	bl	8009af8 <lv_draw_mask_radius_init>
    int16_t mask_in_id = lv_draw_mask_add(&mask_in_param, 0);
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	a809      	add	r0, sp, #36	@ 0x24
 8006ef8:	f002 fbd8 	bl	80096ac <lv_draw_mask_add>
    lv_coord_t cir_w_extra = line_dsc.width;
 8006efc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8006f00:	9300      	str	r3, [sp, #0]
    uint32_t a = 0;
 8006f02:	2700      	movs	r7, #0
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8006f04:	463e      	mov	r6, r7
 8006f06:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f0a:	9005      	str	r0, [sp, #20]
 8006f0c:	e041      	b.n	8006f92 <draw_disc_grad+0x18e>
        line_dsc.color = angle_to_mode_color_fast(obj, i);
 8006f0e:	4631      	mov	r1, r6
 8006f10:	9801      	ldr	r0, [sp, #4]
 8006f12:	f7ff fdd7 	bl	8006ac4 <angle_to_mode_color_fast>
 8006f16:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
        uint16_t angle_trigo = (uint16_t)(a >> 8); /*i * 360 / 256 is the scale to apply, but we can skip multiplication here*/
 8006f1a:	f3c7 250f 	ubfx	r5, r7, #8, #16
        p[0].x = cx + ((r + cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	eb09 0403 	add.w	r4, r9, r3
 8006f24:	f347 280f 	sbfx	r8, r7, #8, #16
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f00f fbd1 	bl	80166d0 <lv_trigo_sin>
 8006f2e:	fb04 f000 	mul.w	r0, r4, r0
 8006f32:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 8006f36:	f8ad 001c 	strh.w	r0, [sp, #28]
 8006f3a:	355a      	adds	r5, #90	@ 0x5a
 8006f3c:	b22d      	sxth	r5, r5
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f00f fbc6 	bl	80166d0 <lv_trigo_sin>
        p[0].y = cy + ((r + cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8006f44:	fb00 f404 	mul.w	r4, r0, r4
 8006f48:	eb0a 34e4 	add.w	r4, sl, r4, asr #15
 8006f4c:	f8ad 401e 	strh.w	r4, [sp, #30]
        p[1].x = cx + ((r - cir_w - cir_w_extra) * lv_trigo_sin(angle_trigo) >> LV_TRIGO_SHIFT);
 8006f50:	9a03      	ldr	r2, [sp, #12]
 8006f52:	eba9 0402 	sub.w	r4, r9, r2
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	1ae4      	subs	r4, r4, r3
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f00f fbb8 	bl	80166d0 <lv_trigo_sin>
 8006f60:	fb04 f000 	mul.w	r0, r4, r0
 8006f64:	eb0b 30e0 	add.w	r0, fp, r0, asr #15
 8006f68:	f8ad 0020 	strh.w	r0, [sp, #32]
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f00f fbaf 	bl	80166d0 <lv_trigo_sin>
        p[1].y = cy + ((r - cir_w - cir_w_extra) * lv_trigo_cos(angle_trigo) >> LV_TRIGO_SHIFT);
 8006f72:	fb00 f404 	mul.w	r4, r0, r4
 8006f76:	eb0a 34e4 	add.w	r4, sl, r4, asr #15
 8006f7a:	f8ad 4022 	strh.w	r4, [sp, #34]	@ 0x22
        lv_draw_line(draw_ctx, &line_dsc, &p[0], &p[1]);
 8006f7e:	ab08      	add	r3, sp, #32
 8006f80:	aa07      	add	r2, sp, #28
 8006f82:	a917      	add	r1, sp, #92	@ 0x5c
 8006f84:	9802      	ldr	r0, [sp, #8]
 8006f86:	f001 fba1 	bl	80086cc <lv_draw_line>
    for(i = 0; i <= 256; i += LV_CPICKER_DEF_QF, a += 360 * LV_CPICKER_DEF_QF) {
 8006f8a:	3603      	adds	r6, #3
 8006f8c:	b2b6      	uxth	r6, r6
 8006f8e:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 8006f92:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8006f96:	d9ba      	bls.n	8006f0e <draw_disc_grad+0x10a>
    lv_draw_mask_free_param(&mask_out_param);
 8006f98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006f9c:	9c05      	ldr	r4, [sp, #20]
 8006f9e:	a811      	add	r0, sp, #68	@ 0x44
 8006fa0:	f002 fbf4 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_in_param);
 8006fa4:	a809      	add	r0, sp, #36	@ 0x24
 8006fa6:	f002 fbf1 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_out_id);
 8006faa:	4640      	mov	r0, r8
 8006fac:	f002 fbc2 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_in_id);
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f002 fbbf 	bl	8009734 <lv_draw_mask_remove_id>
}
 8006fb6:	b01b      	add	sp, #108	@ 0x6c
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	7b5ca453 	.word	0x7b5ca453

08006fc0 <lv_colorwheel_constructor>:
{
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	460c      	mov	r4, r1
    colorwheel->hsv.h = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	848b      	strh	r3, [r1, #36]	@ 0x24
    colorwheel->hsv.s = 100;
 8006fc8:	2264      	movs	r2, #100	@ 0x64
 8006fca:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
    colorwheel->hsv.v = 100;
 8006fce:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
    colorwheel->mode = LV_COLORWHEEL_MODE_HUE;
 8006fd2:	f891 203c 	ldrb.w	r2, [r1, #60]	@ 0x3c
 8006fd6:	f363 0201 	bfi	r2, r3, #0, #2
 8006fda:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
    colorwheel->mode_fixed = 0;
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	f363 0282 	bfi	r2, r3, #2, #1
 8006fe4:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
    colorwheel->last_click_time = 0;
 8006fe8:	630b      	str	r3, [r1, #48]	@ 0x30
    colorwheel->last_change_time = 0;
 8006fea:	634b      	str	r3, [r1, #52]	@ 0x34
    colorwheel->knob.recolor = create_knob_recolor;
 8006fec:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8006ff0:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <lv_colorwheel_constructor+0x58>)
 8006ff2:	7812      	ldrb	r2, [r2, #0]
 8006ff4:	f362 0300 	bfi	r3, r2, #0, #1
 8006ff8:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8006ffc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8007000:	4620      	mov	r0, r4
 8007002:	f011 fc7d 	bl	8018900 <lv_obj_add_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8007006:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800700a:	4620      	mov	r0, r4
 800700c:	f011 f9e8 	bl	80183e0 <lv_obj_clear_flag>
    refr_knob_pos(obj);
 8007010:	4620      	mov	r0, r4
 8007012:	f7ff fea7 	bl	8006d64 <refr_knob_pos>
}
 8007016:	bd10      	pop	{r4, pc}
 8007018:	2000653c 	.word	0x2000653c

0800701c <lv_colorwheel_set_hsv>:
{
 800701c:	b510      	push	{r4, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	4604      	mov	r4, r0
 8007022:	9101      	str	r1, [sp, #4]
    if(hsv.h > 360) hsv.h %= 360;
 8007024:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007028:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800702c:	d90a      	bls.n	8007044 <lv_colorwheel_set_hsv+0x28>
 800702e:	08da      	lsrs	r2, r3, #3
 8007030:	4917      	ldr	r1, [pc, #92]	@ (8007090 <lv_colorwheel_set_hsv+0x74>)
 8007032:	fba1 1202 	umull	r1, r2, r1, r2
 8007036:	0892      	lsrs	r2, r2, #2
 8007038:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 800703c:	fb01 3312 	mls	r3, r1, r2, r3
 8007040:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(hsv.s > 100) hsv.s = 100;
 8007044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007048:	2b64      	cmp	r3, #100	@ 0x64
 800704a:	d902      	bls.n	8007052 <lv_colorwheel_set_hsv+0x36>
 800704c:	2364      	movs	r3, #100	@ 0x64
 800704e:	f88d 3006 	strb.w	r3, [sp, #6]
    if(hsv.v > 100) hsv.v = 100;
 8007052:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007056:	2b64      	cmp	r3, #100	@ 0x64
 8007058:	d902      	bls.n	8007060 <lv_colorwheel_set_hsv+0x44>
 800705a:	2364      	movs	r3, #100	@ 0x64
 800705c:	f88d 3007 	strb.w	r3, [sp, #7]
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 8007060:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
 8007062:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d104      	bne.n	8007074 <lv_colorwheel_set_hsv+0x58>
 800706a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800706c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007070:	429a      	cmp	r2, r3
 8007072:	d00a      	beq.n	800708a <lv_colorwheel_set_hsv+0x6e>
    colorwheel->hsv = hsv;
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	6263      	str	r3, [r4, #36]	@ 0x24
    refr_knob_pos(obj);
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff fe73 	bl	8006d64 <refr_knob_pos>
    lv_obj_invalidate(obj);
 800707e:	4620      	mov	r0, r4
 8007080:	f012 ff11 	bl	8019ea6 <lv_obj_invalidate>
    return true;
 8007084:	2001      	movs	r0, #1
}
 8007086:	b002      	add	sp, #8
 8007088:	bd10      	pop	{r4, pc}
    if(colorwheel->hsv.h == hsv.h && colorwheel->hsv.s == hsv.s && colorwheel->hsv.v == hsv.v) return false;
 800708a:	2000      	movs	r0, #0
 800708c:	e7fb      	b.n	8007086 <lv_colorwheel_set_hsv+0x6a>
 800708e:	bf00      	nop
 8007090:	16c16c17 	.word	0x16c16c17

08007094 <double_click_reset>:
{
 8007094:	b530      	push	{r4, r5, lr}
 8007096:	b083      	sub	sp, #12
 8007098:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 800709a:	f00d fb69 	bl	8014770 <lv_indev_get_act>
 800709e:	4605      	mov	r5, r0
    if(lv_tick_elaps(colorwheel->last_click_time) < indev->driver->long_press_time) {
 80070a0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80070a2:	f00c f971 	bl	8013388 <lv_tick_elaps>
 80070a6:	682b      	ldr	r3, [r5, #0]
 80070a8:	8b9b      	ldrh	r3, [r3, #28]
 80070aa:	4298      	cmp	r0, r3
 80070ac:	d214      	bcs.n	80070d8 <double_click_reset+0x44>
        hsv_cur = colorwheel->hsv;
 80070ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80070b0:	9301      	str	r3, [sp, #4]
        switch(colorwheel->mode) {
 80070b2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d012      	beq.n	80070e4 <double_click_reset+0x50>
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d014      	beq.n	80070ec <double_click_reset+0x58>
 80070c2:	b90b      	cbnz	r3, 80070c8 <double_click_reset+0x34>
                hsv_cur.h = 0;
 80070c4:	f8ad 3004 	strh.w	r3, [sp, #4]
        lv_indev_wait_release(indev);
 80070c8:	4628      	mov	r0, r5
 80070ca:	f00d fc10 	bl	80148ee <lv_indev_wait_release>
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80070ce:	9901      	ldr	r1, [sp, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff ffa3 	bl	800701c <lv_colorwheel_set_hsv>
 80070d6:	b968      	cbnz	r0, 80070f4 <double_click_reset+0x60>
    colorwheel->last_click_time = lv_tick_get();
 80070d8:	f00c f948 	bl	801336c <lv_tick_get>
 80070dc:	6320      	str	r0, [r4, #48]	@ 0x30
    return LV_RES_OK;
 80070de:	2001      	movs	r0, #1
}
 80070e0:	b003      	add	sp, #12
 80070e2:	bd30      	pop	{r4, r5, pc}
                hsv_cur.s = 100;
 80070e4:	2364      	movs	r3, #100	@ 0x64
 80070e6:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 80070ea:	e7ed      	b.n	80070c8 <double_click_reset+0x34>
                hsv_cur.v = 100;
 80070ec:	2364      	movs	r3, #100	@ 0x64
 80070ee:	f88d 3007 	strb.w	r3, [sp, #7]
                break;
 80070f2:	e7e9      	b.n	80070c8 <double_click_reset+0x34>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80070f4:	2200      	movs	r2, #0
 80070f6:	211c      	movs	r1, #28
 80070f8:	4620      	mov	r0, r4
 80070fa:	f009 fde5 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return res;
 80070fe:	2801      	cmp	r0, #1
 8007100:	d1ee      	bne.n	80070e0 <double_click_reset+0x4c>
 8007102:	e7e9      	b.n	80070d8 <double_click_reset+0x44>

08007104 <lv_colorwheel_get_rgb>:
{
 8007104:	b508      	push	{r3, lr}
    return lv_color_hsv_to_rgb(colorwheel->hsv.h, colorwheel->hsv.s, colorwheel->hsv.v);
 8007106:	f890 2027 	ldrb.w	r2, [r0, #39]	@ 0x27
 800710a:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
 800710e:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 8007110:	f7ff fba8 	bl	8006864 <lv_color_hsv_to_rgb>
}
 8007114:	bd08      	pop	{r3, pc}

08007116 <draw_knob>:
{
 8007116:	b530      	push	{r4, r5, lr}
 8007118:	b091      	sub	sp, #68	@ 0x44
 800711a:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 800711c:	f009 fdfe 	bl	8010d1c <lv_event_get_target>
 8007120:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8007122:	4628      	mov	r0, r5
 8007124:	f009 fe72 	bl	8010e0c <lv_event_get_draw_ctx>
 8007128:	4605      	mov	r5, r0
    lv_draw_rect_dsc_init(&cir_dsc);
 800712a:	a802      	add	r0, sp, #8
 800712c:	f002 fd90 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &cir_dsc);
 8007130:	aa02      	add	r2, sp, #8
 8007132:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8007136:	4620      	mov	r0, r4
 8007138:	f011 fdc4 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    cir_dsc.radius = LV_RADIUS_CIRCLE;
 800713c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007140:	f8ad 3008 	strh.w	r3, [sp, #8]
    if(colorwheel->knob.recolor) {
 8007144:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007148:	f013 0f01 	tst.w	r3, #1
 800714c:	d10a      	bne.n	8007164 <draw_knob+0x4e>
    lv_area_t knob_area = get_knob_area(obj);
 800714e:	4621      	mov	r1, r4
 8007150:	4668      	mov	r0, sp
 8007152:	f7ff fda9 	bl	8006ca8 <get_knob_area>
    lv_draw_rect(draw_ctx, &cir_dsc, &knob_area);
 8007156:	466a      	mov	r2, sp
 8007158:	a902      	add	r1, sp, #8
 800715a:	4628      	mov	r0, r5
 800715c:	f002 fdba 	bl	8009cd4 <lv_draw_rect>
}
 8007160:	b011      	add	sp, #68	@ 0x44
 8007162:	bd30      	pop	{r4, r5, pc}
        cir_dsc.bg_color = lv_colorwheel_get_rgb(obj);
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff ffcd 	bl	8007104 <lv_colorwheel_get_rgb>
 800716a:	f8ad 000c 	strh.w	r0, [sp, #12]
 800716e:	e7ee      	b.n	800714e <draw_knob+0x38>

08007170 <lv_colorwheel_event>:
{
 8007170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007174:	b083      	sub	sp, #12
 8007176:	460d      	mov	r5, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8007178:	48a5      	ldr	r0, [pc, #660]	@ (8007410 <lv_colorwheel_event+0x2a0>)
 800717a:	f009 fcfb 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 800717e:	2801      	cmp	r0, #1
 8007180:	d002      	beq.n	8007188 <lv_colorwheel_event+0x18>
}
 8007182:	b003      	add	sp, #12
 8007184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8007188:	4628      	mov	r0, r5
 800718a:	f009 fdcb 	bl	8010d24 <lv_event_get_code>
 800718e:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8007190:	4628      	mov	r0, r5
 8007192:	f009 fdc3 	bl	8010d1c <lv_event_get_target>
 8007196:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8007198:	1e63      	subs	r3, r4, #1
 800719a:	2b29      	cmp	r3, #41	@ 0x29
 800719c:	d8f1      	bhi.n	8007182 <lv_colorwheel_event+0x12>
 800719e:	a201      	add	r2, pc, #4	@ (adr r2, 80071a4 <lv_colorwheel_event+0x34>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080073f7 	.word	0x080073f7
 80071a8:	0800741d 	.word	0x0800741d
 80071ac:	08007183 	.word	0x08007183
 80071b0:	08007183 	.word	0x08007183
 80071b4:	08007183 	.word	0x08007183
 80071b8:	08007183 	.word	0x08007183
 80071bc:	08007183 	.word	0x08007183
 80071c0:	08007183 	.word	0x08007183
 80071c4:	08007183 	.word	0x08007183
 80071c8:	08007183 	.word	0x08007183
 80071cc:	08007183 	.word	0x08007183
 80071d0:	08007183 	.word	0x08007183
 80071d4:	080072f7 	.word	0x080072f7
 80071d8:	08007183 	.word	0x08007183
 80071dc:	08007183 	.word	0x08007183
 80071e0:	08007183 	.word	0x08007183
 80071e4:	080075d9 	.word	0x080075d9
 80071e8:	08007601 	.word	0x08007601
 80071ec:	0800724d 	.word	0x0800724d
 80071f0:	08007183 	.word	0x08007183
 80071f4:	080075f3 	.word	0x080075f3
 80071f8:	08007183 	.word	0x08007183
 80071fc:	08007183 	.word	0x08007183
 8007200:	08007183 	.word	0x08007183
 8007204:	08007183 	.word	0x08007183
 8007208:	08007183 	.word	0x08007183
 800720c:	08007183 	.word	0x08007183
 8007210:	08007183 	.word	0x08007183
 8007214:	08007183 	.word	0x08007183
 8007218:	08007183 	.word	0x08007183
 800721c:	08007183 	.word	0x08007183
 8007220:	08007183 	.word	0x08007183
 8007224:	08007183 	.word	0x08007183
 8007228:	08007183 	.word	0x08007183
 800722c:	08007183 	.word	0x08007183
 8007230:	08007183 	.word	0x08007183
 8007234:	08007183 	.word	0x08007183
 8007238:	08007183 	.word	0x08007183
 800723c:	08007183 	.word	0x08007183
 8007240:	08007183 	.word	0x08007183
 8007244:	080072b3 	.word	0x080072b3
 8007248:	080072f1 	.word	0x080072f1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 800724c:	2212      	movs	r2, #18
 800724e:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8007252:	f015 fa4f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007256:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 800725a:	2213      	movs	r2, #19
 800725c:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8007260:	4630      	mov	r0, r6
 8007262:	f015 fa47 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007266:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8007268:	2210      	movs	r2, #16
 800726a:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 800726e:	4630      	mov	r0, r6
 8007270:	f015 fa40 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007274:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8007278:	2211      	movs	r2, #17
 800727a:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 800727e:	4630      	mov	r0, r6
 8007280:	f015 fa38 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8007284:	b204      	sxth	r4, r0
        lv_coord_t knob_pad = LV_MAX4(left, right, top, bottom) + 2;
 8007286:	454c      	cmp	r4, r9
 8007288:	bfb8      	it	lt
 800728a:	464c      	movlt	r4, r9
 800728c:	4547      	cmp	r7, r8
 800728e:	bfb8      	it	lt
 8007290:	4647      	movlt	r7, r8
 8007292:	42bc      	cmp	r4, r7
 8007294:	bfb8      	it	lt
 8007296:	463c      	movlt	r4, r7
 8007298:	b2a4      	uxth	r4, r4
 800729a:	3402      	adds	r4, #2
 800729c:	b224      	sxth	r4, r4
        lv_coord_t * s = lv_event_get_param(e);
 800729e:	4628      	mov	r0, r5
 80072a0:	f009 fd44 	bl	8010d2c <lv_event_get_param>
        *s = LV_MAX(*s, knob_pad);
 80072a4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	bfb8      	it	lt
 80072ac:	4623      	movlt	r3, r4
 80072ae:	8003      	strh	r3, [r0, #0]
 80072b0:	e767      	b.n	8007182 <lv_colorwheel_event+0x12>
        void * param = lv_event_get_param(e);
 80072b2:	4628      	mov	r0, r5
 80072b4:	f009 fd3a 	bl	8010d2c <lv_event_get_param>
 80072b8:	4604      	mov	r4, r0
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80072ba:	4630      	mov	r0, r6
 80072bc:	f012 fa08 	bl	80196d0 <lv_obj_get_width>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80072c0:	88a3      	ldrh	r3, [r4, #4]
 80072c2:	8822      	ldrh	r2, [r4, #0]
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3301      	adds	r3, #1
 80072ca:	b21b      	sxth	r3, r3
 80072cc:	4298      	cmp	r0, r3
 80072ce:	d003      	beq.n	80072d8 <lv_colorwheel_event+0x168>
            refr_knob_pos(obj);
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fd47 	bl	8006d64 <refr_knob_pos>
 80072d6:	e754      	b.n	8007182 <lv_colorwheel_event+0x12>
           lv_obj_get_height(obj) != lv_area_get_height(param)) {
 80072d8:	4630      	mov	r0, r6
 80072da:	f012 fa00 	bl	80196de <lv_obj_get_height>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80072de:	88e3      	ldrh	r3, [r4, #6]
 80072e0:	8862      	ldrh	r2, [r4, #2]
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3301      	adds	r3, #1
 80072e8:	b21b      	sxth	r3, r3
        if(lv_obj_get_width(obj) != lv_area_get_width(param) ||
 80072ea:	4298      	cmp	r0, r3
 80072ec:	d1f0      	bne.n	80072d0 <lv_colorwheel_event+0x160>
 80072ee:	e748      	b.n	8007182 <lv_colorwheel_event+0x12>
        refr_knob_pos(obj);
 80072f0:	f7ff fd38 	bl	8006d64 <refr_knob_pos>
 80072f4:	e745      	b.n	8007182 <lv_colorwheel_event+0x12>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 80072f6:	4628      	mov	r0, r5
 80072f8:	f009 fd18 	bl	8010d2c <lv_event_get_param>
 80072fc:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80072fe:	3b11      	subs	r3, #17
 8007300:	2b03      	cmp	r3, #3
 8007302:	f63f af3e 	bhi.w	8007182 <lv_colorwheel_event+0x12>
 8007306:	e8df f003 	tbb	[pc, r3]
 800730a:	4102      	.short	0x4102
 800730c:	4102      	.short	0x4102
            hsv_cur = colorwheel->hsv;
 800730e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8007310:	9301      	str	r3, [sp, #4]
            switch(colorwheel->mode) {
 8007312:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b01      	cmp	r3, #1
 800731c:	d01c      	beq.n	8007358 <lv_colorwheel_event+0x1e8>
 800731e:	2b02      	cmp	r3, #2
 8007320:	d027      	beq.n	8007372 <lv_colorwheel_event+0x202>
 8007322:	b963      	cbnz	r3, 800733e <lv_colorwheel_event+0x1ce>
                    hsv_cur.h = (colorwheel->hsv.h + 1) % 360;
 8007324:	8cb2      	ldrh	r2, [r6, #36]	@ 0x24
 8007326:	3201      	adds	r2, #1
 8007328:	4b3a      	ldr	r3, [pc, #232]	@ (8007414 <lv_colorwheel_event+0x2a4>)
 800732a:	fb83 1302 	smull	r1, r3, r3, r2
 800732e:	4413      	add	r3, r2
 8007330:	121b      	asrs	r3, r3, #8
 8007332:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8007336:	fb01 2313 	mls	r3, r1, r3, r2
 800733a:	f8ad 3004 	strh.w	r3, [sp, #4]
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 800733e:	9901      	ldr	r1, [sp, #4]
 8007340:	4630      	mov	r0, r6
 8007342:	f7ff fe6b 	bl	800701c <lv_colorwheel_set_hsv>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f af1b 	beq.w	8007182 <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 800734c:	2200      	movs	r2, #0
 800734e:	211c      	movs	r1, #28
 8007350:	4630      	mov	r0, r6
 8007352:	f009 fcb9 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8007356:	e714      	b.n	8007182 <lv_colorwheel_event+0x12>
                    hsv_cur.s = (colorwheel->hsv.s + 1) % 100;
 8007358:	f896 2026 	ldrb.w	r2, [r6, #38]	@ 0x26
 800735c:	3201      	adds	r2, #1
 800735e:	4b2e      	ldr	r3, [pc, #184]	@ (8007418 <lv_colorwheel_event+0x2a8>)
 8007360:	fb83 1302 	smull	r1, r3, r3, r2
 8007364:	115b      	asrs	r3, r3, #5
 8007366:	2164      	movs	r1, #100	@ 0x64
 8007368:	fb01 2313 	mls	r3, r1, r3, r2
 800736c:	f88d 3006 	strb.w	r3, [sp, #6]
                    break;
 8007370:	e7e5      	b.n	800733e <lv_colorwheel_event+0x1ce>
                    hsv_cur.v = (colorwheel->hsv.v + 1) % 100;
 8007372:	f896 2027 	ldrb.w	r2, [r6, #39]	@ 0x27
 8007376:	3201      	adds	r2, #1
 8007378:	4b27      	ldr	r3, [pc, #156]	@ (8007418 <lv_colorwheel_event+0x2a8>)
 800737a:	fb83 1302 	smull	r1, r3, r3, r2
 800737e:	115b      	asrs	r3, r3, #5
 8007380:	2164      	movs	r1, #100	@ 0x64
 8007382:	fb01 2313 	mls	r3, r1, r3, r2
 8007386:	f88d 3007 	strb.w	r3, [sp, #7]
                    break;
 800738a:	e7d8      	b.n	800733e <lv_colorwheel_event+0x1ce>
            hsv_cur = colorwheel->hsv;
 800738c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800738e:	9301      	str	r3, [sp, #4]
            switch(colorwheel->mode) {
 8007390:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	2b01      	cmp	r3, #1
 800739a:	d018      	beq.n	80073ce <lv_colorwheel_event+0x25e>
 800739c:	2b02      	cmp	r3, #2
 800739e:	d020      	beq.n	80073e2 <lv_colorwheel_event+0x272>
 80073a0:	b92b      	cbnz	r3, 80073ae <lv_colorwheel_event+0x23e>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 80073a2:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
 80073a4:	b183      	cbz	r3, 80073c8 <lv_colorwheel_event+0x258>
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	f8ad 3004 	strh.w	r3, [sp, #4]
            if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 80073ae:	9901      	ldr	r1, [sp, #4]
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff fe33 	bl	800701c <lv_colorwheel_set_hsv>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f43f aee3 	beq.w	8007182 <lv_colorwheel_event+0x12>
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80073bc:	2200      	movs	r2, #0
 80073be:	211c      	movs	r1, #28
 80073c0:	4630      	mov	r0, r6
 80073c2:	f009 fc81 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 80073c6:	e6dc      	b.n	8007182 <lv_colorwheel_event+0x12>
                    hsv_cur.h = colorwheel->hsv.h > 0 ? (colorwheel->hsv.h - 1) : 360;
 80073c8:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80073cc:	e7ed      	b.n	80073aa <lv_colorwheel_event+0x23a>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 80073ce:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 80073d2:	b123      	cbz	r3, 80073de <lv_colorwheel_event+0x26e>
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	f88d 3006 	strb.w	r3, [sp, #6]
                    break;
 80073dc:	e7e7      	b.n	80073ae <lv_colorwheel_event+0x23e>
                    hsv_cur.s = colorwheel->hsv.s > 0 ? (colorwheel->hsv.s - 1) : 100;
 80073de:	2364      	movs	r3, #100	@ 0x64
 80073e0:	e7fa      	b.n	80073d8 <lv_colorwheel_event+0x268>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 80073e2:	f896 3027 	ldrb.w	r3, [r6, #39]	@ 0x27
 80073e6:	b123      	cbz	r3, 80073f2 <lv_colorwheel_event+0x282>
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	f88d 3007 	strb.w	r3, [sp, #7]
                    break;
 80073f0:	e7dd      	b.n	80073ae <lv_colorwheel_event+0x23e>
                    hsv_cur.v = colorwheel->hsv.v > 0 ? (colorwheel->hsv.v - 1) : 100;
 80073f2:	2364      	movs	r3, #100	@ 0x64
 80073f4:	e7fa      	b.n	80073ec <lv_colorwheel_event+0x27c>
        colorwheel->last_change_time = lv_tick_get();
 80073f6:	f00b ffb9 	bl	801336c <lv_tick_get>
 80073fa:	6370      	str	r0, [r6, #52]	@ 0x34
        lv_indev_get_point(lv_indev_get_act(), &colorwheel->last_press_point);
 80073fc:	f00d f9b8 	bl	8014770 <lv_indev_get_act>
 8007400:	f106 0138 	add.w	r1, r6, #56	@ 0x38
 8007404:	f00d fa2b 	bl	801485e <lv_indev_get_point>
        res = double_click_reset(obj);
 8007408:	4630      	mov	r0, r6
 800740a:	f7ff fe43 	bl	8007094 <double_click_reset>
        if(res != LV_RES_OK) return;
 800740e:	e6b8      	b.n	8007182 <lv_colorwheel_event+0x12>
 8007410:	0802a128 	.word	0x0802a128
 8007414:	b60b60b7 	.word	0xb60b60b7
 8007418:	51eb851f 	.word	0x51eb851f
        lv_indev_t * indev = lv_indev_get_act();
 800741c:	f00d f9a8 	bl	8014770 <lv_indev_get_act>
        if(indev == NULL) return;
 8007420:	4604      	mov	r4, r0
 8007422:	2800      	cmp	r0, #0
 8007424:	f43f aead 	beq.w	8007182 <lv_colorwheel_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8007428:	f00d f9a8 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 800742c:	2804      	cmp	r0, #4
 800742e:	d002      	beq.n	8007436 <lv_colorwheel_event+0x2c6>
 8007430:	2802      	cmp	r0, #2
 8007432:	f040 8085 	bne.w	8007540 <lv_colorwheel_event+0x3d0>
            p.x = obj->coords.x1 + lv_obj_get_width(obj) / 2;
 8007436:	8ab5      	ldrh	r5, [r6, #20]
 8007438:	4630      	mov	r0, r6
 800743a:	f012 f949 	bl	80196d0 <lv_obj_get_width>
 800743e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007442:	eb05 0560 	add.w	r5, r5, r0, asr #1
 8007446:	f8ad 5000 	strh.w	r5, [sp]
            p.y = obj->coords.y1 + lv_obj_get_height(obj) / 2;
 800744a:	8af5      	ldrh	r5, [r6, #22]
 800744c:	4630      	mov	r0, r6
 800744e:	f012 f946 	bl	80196de <lv_obj_get_height>
 8007452:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8007456:	eb05 0560 	add.w	r5, r5, r0, asr #1
 800745a:	f8ad 5002 	strh.w	r5, [sp, #2]
        lv_coord_t drag_limit = indev->driver->scroll_limit;
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	7e1a      	ldrb	r2, [r3, #24]
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8007462:	f9bd 3000 	ldrsh.w	r3, [sp]
 8007466:	f9b6 1038 	ldrsh.w	r1, [r6, #56]	@ 0x38
 800746a:	1a5b      	subs	r3, r3, r1
 800746c:	2b00      	cmp	r3, #0
 800746e:	bfb8      	it	lt
 8007470:	425b      	neglt	r3, r3
 8007472:	4293      	cmp	r3, r2
 8007474:	dc09      	bgt.n	800748a <lv_colorwheel_event+0x31a>
           (LV_ABS(p.y - colorwheel->last_press_point.y) > drag_limit)) {
 8007476:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800747a:	f9b6 103a 	ldrsh.w	r1, [r6, #58]	@ 0x3a
 800747e:	1a5b      	subs	r3, r3, r1
 8007480:	2b00      	cmp	r3, #0
 8007482:	bfb8      	it	lt
 8007484:	425b      	neglt	r3, r3
        if((LV_ABS(p.x - colorwheel->last_press_point.x) > drag_limit) ||
 8007486:	429a      	cmp	r2, r3
 8007488:	da08      	bge.n	800749c <lv_colorwheel_event+0x32c>
            colorwheel->last_change_time = lv_tick_get();
 800748a:	f00b ff6f 	bl	801336c <lv_tick_get>
 800748e:	6370      	str	r0, [r6, #52]	@ 0x34
            colorwheel->last_press_point.x = p.x;
 8007490:	f9bd 3000 	ldrsh.w	r3, [sp]
 8007494:	8733      	strh	r3, [r6, #56]	@ 0x38
            colorwheel->last_press_point.y = p.y;
 8007496:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800749a:	8773      	strh	r3, [r6, #58]	@ 0x3a
        p.x -= obj->coords.x1;
 800749c:	f8bd 3000 	ldrh.w	r3, [sp]
 80074a0:	8ab2      	ldrh	r2, [r6, #20]
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	f8ad 3000 	strh.w	r3, [sp]
        p.y -= obj->coords.y1;
 80074a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80074ac:	8af2      	ldrh	r2, [r6, #22]
 80074ae:	1a9b      	subs	r3, r3, r2
 80074b0:	f8ad 3002 	strh.w	r3, [sp, #2]
        uint16_t w = lv_obj_get_width(obj);
 80074b4:	4630      	mov	r0, r6
 80074b6:	f012 f90b 	bl	80196d0 <lv_obj_get_width>
 80074ba:	b285      	uxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 80074bc:	2250      	movs	r2, #80	@ 0x50
 80074be:	2100      	movs	r1, #0
 80074c0:	4630      	mov	r0, r6
 80074c2:	f015 f917 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80074c6:	b207      	sxth	r7, r0
        p.x -= r_in;
 80074c8:	f8bd 2000 	ldrh.w	r2, [sp]
 80074cc:	eba2 0255 	sub.w	r2, r2, r5, lsr #1
 80074d0:	b212      	sxth	r2, r2
 80074d2:	f8ad 2000 	strh.w	r2, [sp]
        p.y -= r_in;
 80074d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80074da:	eba1 0155 	sub.w	r1, r1, r5, lsr #1
 80074de:	b209      	sxth	r1, r1
 80074e0:	f8ad 1002 	strh.w	r1, [sp, #2]
        r_in -= cir_w;
 80074e4:	ebc0 0355 	rsb	r3, r0, r5, lsr #1
 80074e8:	b298      	uxth	r0, r3
 80074ea:	b21b      	sxth	r3, r3
        if(r_in > LV_DPI_DEF / 2) {
 80074ec:	2b41      	cmp	r3, #65	@ 0x41
 80074ee:	dd07      	ble.n	8007500 <lv_colorwheel_event+0x390>
            lv_coord_t inner = cir_w / 2;
 80074f0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
            r_in -= inner;
 80074f4:	eba0 0067 	sub.w	r0, r0, r7, asr #1
 80074f8:	b203      	sxth	r3, r0
            if(r_in < LV_DPI_DEF / 2) r_in = LV_DPI_DEF / 2;
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	dc00      	bgt.n	8007500 <lv_colorwheel_event+0x390>
 80074fe:	2341      	movs	r3, #65	@ 0x41
        if(p.x * p.x + p.y * p.y < r_in * r_in) {
 8007500:	fb01 f101 	mul.w	r1, r1, r1
 8007504:	fb02 1202 	mla	r2, r2, r2, r1
 8007508:	fb03 f303 	mul.w	r3, r3, r3
 800750c:	429a      	cmp	r2, r3
 800750e:	db1c      	blt.n	800754a <lv_colorwheel_event+0x3da>
        bool on_ring = true;
 8007510:	2501      	movs	r5, #1
        uint32_t diff = lv_tick_elaps(colorwheel->last_change_time);
 8007512:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8007514:	f00b ff38 	bl	8013388 <lv_tick_elaps>
        if(!on_ring && diff > indev->driver->long_press_time && !colorwheel->mode_fixed) {
 8007518:	b9cd      	cbnz	r5, 800754e <lv_colorwheel_event+0x3de>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	8b9b      	ldrh	r3, [r3, #28]
 800751e:	4283      	cmp	r3, r0
 8007520:	f4bf ae2f 	bcs.w	8007182 <lv_colorwheel_event+0x12>
 8007524:	f896 303c 	ldrb.w	r3, [r6, #60]	@ 0x3c
 8007528:	f013 0f04 	tst.w	r3, #4
 800752c:	f47f ae29 	bne.w	8007182 <lv_colorwheel_event+0x12>
            next_color_mode(obj);
 8007530:	4630      	mov	r0, r6
 8007532:	f7ff fc4d 	bl	8006dd0 <next_color_mode>
            lv_indev_wait_release(lv_indev_get_act());
 8007536:	f00d f91b 	bl	8014770 <lv_indev_get_act>
 800753a:	f00d f9d8 	bl	80148ee <lv_indev_wait_release>
            return;
 800753e:	e620      	b.n	8007182 <lv_colorwheel_event+0x12>
            lv_indev_get_point(indev, &p);
 8007540:	4669      	mov	r1, sp
 8007542:	4620      	mov	r0, r4
 8007544:	f00d f98b 	bl	801485e <lv_indev_get_point>
 8007548:	e789      	b.n	800745e <lv_colorwheel_event+0x2ee>
            on_ring = false;
 800754a:	2500      	movs	r5, #0
 800754c:	e7e1      	b.n	8007512 <lv_colorwheel_event+0x3a2>
        angle = lv_atan2(p.x, p.y) % 360;
 800754e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8007552:	f9bd 0000 	ldrsh.w	r0, [sp]
 8007556:	f00f f922 	bl	801679e <lv_atan2>
 800755a:	08c3      	lsrs	r3, r0, #3
 800755c:	4a2d      	ldr	r2, [pc, #180]	@ (8007614 <lv_colorwheel_event+0x4a4>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8007568:	fb02 0313 	mls	r3, r2, r3, r0
 800756c:	b299      	uxth	r1, r3
 800756e:	b21b      	sxth	r3, r3
        hsv_cur = colorwheel->hsv;
 8007570:	6a72      	ldr	r2, [r6, #36]	@ 0x24
 8007572:	9201      	str	r2, [sp, #4]
        switch(colorwheel->mode) {
 8007574:	f896 203c 	ldrb.w	r2, [r6, #60]	@ 0x3c
 8007578:	f002 0203 	and.w	r2, r2, #3
 800757c:	2a01      	cmp	r2, #1
 800757e:	d011      	beq.n	80075a4 <lv_colorwheel_event+0x434>
 8007580:	2a02      	cmp	r2, #2
 8007582:	d01c      	beq.n	80075be <lv_colorwheel_event+0x44e>
 8007584:	b90a      	cbnz	r2, 800758a <lv_colorwheel_event+0x41a>
                hsv_cur.h = angle;
 8007586:	f8ad 1004 	strh.w	r1, [sp, #4]
        if(lv_colorwheel_set_hsv(obj, hsv_cur)) {
 800758a:	9901      	ldr	r1, [sp, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fd45 	bl	800701c <lv_colorwheel_set_hsv>
 8007592:	2800      	cmp	r0, #0
 8007594:	f43f adf5 	beq.w	8007182 <lv_colorwheel_event+0x12>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8007598:	2200      	movs	r2, #0
 800759a:	211c      	movs	r1, #28
 800759c:	4630      	mov	r0, r6
 800759e:	f009 fb93 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 80075a2:	e5ee      	b.n	8007182 <lv_colorwheel_event+0x12>
                hsv_cur.s = (angle * 100) / 360;
 80075a4:	2264      	movs	r2, #100	@ 0x64
 80075a6:	fb02 f303 	mul.w	r3, r2, r3
 80075aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007618 <lv_colorwheel_event+0x4a8>)
 80075ac:	fb82 1203 	smull	r1, r2, r2, r3
 80075b0:	441a      	add	r2, r3
 80075b2:	17db      	asrs	r3, r3, #31
 80075b4:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 80075b8:	f88d 3006 	strb.w	r3, [sp, #6]
                break;
 80075bc:	e7e5      	b.n	800758a <lv_colorwheel_event+0x41a>
                hsv_cur.v = (angle * 100) / 360;
 80075be:	2264      	movs	r2, #100	@ 0x64
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <lv_colorwheel_event+0x4a8>)
 80075c6:	fb82 1203 	smull	r1, r2, r2, r3
 80075ca:	441a      	add	r2, r3
 80075cc:	17db      	asrs	r3, r3, #31
 80075ce:	ebc3 2322 	rsb	r3, r3, r2, asr #8
 80075d2:	f88d 3007 	strb.w	r3, [sp, #7]
                break;
 80075d6:	e7d8      	b.n	800758a <lv_colorwheel_event+0x41a>
        lv_hit_test_info_t * info = lv_event_get_param(e);;
 80075d8:	4628      	mov	r0, r5
 80075da:	f009 fba7 	bl	8010d2c <lv_event_get_param>
 80075de:	4604      	mov	r4, r0
        info->res = _lv_area_is_point_on(&obj->coords, info->point, LV_RADIUS_CIRCLE);
 80075e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80075e4:	6801      	ldr	r1, [r0, #0]
 80075e6:	f106 0014 	add.w	r0, r6, #20
 80075ea:	f7fa fa51 	bl	8001a90 <_lv_area_is_point_on>
 80075ee:	7120      	strb	r0, [r4, #4]
 80075f0:	e5c7      	b.n	8007182 <lv_colorwheel_event+0x12>
        draw_disc_grad(e);
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fc06 	bl	8006e04 <draw_disc_grad>
        draw_knob(e);
 80075f8:	4628      	mov	r0, r5
 80075fa:	f7ff fd8c 	bl	8007116 <draw_knob>
 80075fe:	e5c0      	b.n	8007182 <lv_colorwheel_event+0x12>
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8007600:	4628      	mov	r0, r5
 8007602:	f009 fb93 	bl	8010d2c <lv_event_get_param>
        if(info->res != LV_COVER_RES_MASKED) info->res = LV_COVER_RES_NOT_COVER;
 8007606:	7803      	ldrb	r3, [r0, #0]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f43f adba 	beq.w	8007182 <lv_colorwheel_event+0x12>
 800760e:	2301      	movs	r3, #1
 8007610:	7003      	strb	r3, [r0, #0]
 8007612:	e5b6      	b.n	8007182 <lv_colorwheel_event+0x12>
 8007614:	16c16c17 	.word	0x16c16c17
 8007618:	b60b60b7 	.word	0xb60b60b7

0800761c <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 800761c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800761e:	4603      	mov	r3, r0
 8007620:	b108      	cbz	r0, 8007626 <lv_disp_get_scr_act+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
 8007622:	6918      	ldr	r0, [r3, #16]
}
 8007624:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8007626:	f00b fe29 	bl	801327c <lv_disp_get_default>
    if(!disp) {
 800762a:	4603      	mov	r3, r0
 800762c:	2800      	cmp	r0, #0
 800762e:	d1f8      	bne.n	8007622 <lv_disp_get_scr_act+0x6>
 8007630:	e7f8      	b.n	8007624 <lv_disp_get_scr_act+0x8>

08007632 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
 8007632:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007634:	4603      	mov	r3, r0
 8007636:	b108      	cbz	r0, 800763c <lv_disp_get_scr_prev+0xa>
    if(!disp) {
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
 8007638:	6958      	ldr	r0, [r3, #20]
}
 800763a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 800763c:	f00b fe1e 	bl	801327c <lv_disp_get_default>
    if(!disp) {
 8007640:	4603      	mov	r3, r0
 8007642:	2800      	cmp	r0, #0
 8007644:	d1f8      	bne.n	8007638 <lv_disp_get_scr_prev+0x6>
 8007646:	e7f8      	b.n	800763a <lv_disp_get_scr_prev+0x8>

08007648 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 8007648:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 800764a:	4603      	mov	r3, r0
 800764c:	b108      	cbz	r0, 8007652 <lv_disp_get_layer_top+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
 800764e:	69d8      	ldr	r0, [r3, #28]
}
 8007650:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8007652:	f00b fe13 	bl	801327c <lv_disp_get_default>
    if(!disp) {
 8007656:	4603      	mov	r3, r0
 8007658:	2800      	cmp	r0, #0
 800765a:	d1f8      	bne.n	800764e <lv_disp_get_layer_top+0x6>
 800765c:	e7f8      	b.n	8007650 <lv_disp_get_layer_top+0x8>

0800765e <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be retrieved. (NULL to use the default screen)
 * @return pointer to the sys layer object (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 800765e:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007660:	4603      	mov	r3, r0
 8007662:	b108      	cbz	r0, 8007668 <lv_disp_get_layer_sys+0xa>
    if(!disp) {
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
 8007664:	6a18      	ldr	r0, [r3, #32]
}
 8007666:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 8007668:	f00b fe08 	bl	801327c <lv_disp_get_default>
    if(!disp) {
 800766c:	4603      	mov	r3, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d1f8      	bne.n	8007664 <lv_disp_get_layer_sys+0x6>
 8007672:	e7f8      	b.n	8007666 <lv_disp_get_layer_sys+0x8>

08007674 <lv_disp_get_theme>:
 * Get the theme of a display
 * @param disp pointer to a display
 * @return the display's theme (can be NULL)
 */
lv_theme_t * lv_disp_get_theme(lv_disp_t * disp)
{
 8007674:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 8007676:	4603      	mov	r3, r0
 8007678:	b108      	cbz	r0, 800767e <lv_disp_get_theme+0xa>
    return disp->theme;
}
 800767a:	6898      	ldr	r0, [r3, #8]
 800767c:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 800767e:	f00b fdfd 	bl	801327c <lv_disp_get_default>
 8007682:	4603      	mov	r3, r0
 8007684:	e7f9      	b.n	800767a <lv_disp_get_theme+0x6>

08007686 <lv_disp_is_invalidation_enabled>:
 * Get display invalidation is enabled.
 * @param disp pointer to a display (NULL to use the default display)
 * @return return true if invalidation is enabled
 */
bool lv_disp_is_invalidation_enabled(lv_disp_t * disp)
{
 8007686:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
 8007688:	4603      	mov	r3, r0
 800768a:	b130      	cbz	r0, 800769a <lv_disp_is_invalidation_enabled+0x14>
    if(!disp) {
        LV_LOG_WARN("no display registered");
        return false;
    }

    return (disp->inv_en_cnt > 0);
 800768c:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8007690:	2800      	cmp	r0, #0
 8007692:	bfd4      	ite	le
 8007694:	2000      	movle	r0, #0
 8007696:	2001      	movgt	r0, #1
}
 8007698:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
 800769a:	f00b fdef 	bl	801327c <lv_disp_get_default>
    if(!disp) {
 800769e:	4603      	mov	r3, r0
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d1f3      	bne.n	800768c <lv_disp_is_invalidation_enabled+0x6>
        return false;
 80076a4:	2000      	movs	r0, #0
 80076a6:	e7f7      	b.n	8007698 <lv_disp_is_invalidation_enabled+0x12>

080076a8 <lv_draw_init>:
 **********************/

void lv_draw_init(void)
{
    /*Nothing to init now*/
}
 80076a8:	4770      	bx	lr

080076aa <lv_draw_wait_for_finish>:

void lv_draw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
 80076aa:	b508      	push	{r3, lr}
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 80076ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80076ae:	b103      	cbz	r3, 80076b2 <lv_draw_wait_for_finish+0x8>
 80076b0:	4798      	blx	r3
}
 80076b2:	bd08      	pop	{r3, pc}

080076b4 <lv_draw_arc_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_draw_arc_dsc_init(lv_draw_arc_dsc_t * dsc)
{
 80076b4:	b510      	push	{r4, lr}
 80076b6:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_arc_dsc_t));
 80076b8:	2110      	movs	r1, #16
 80076ba:	f00f fb03 	bl	8016cc4 <lv_memset_00>
    dsc->width = 1;
 80076be:	2301      	movs	r3, #1
 80076c0:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 80076c2:	23ff      	movs	r3, #255	@ 0xff
 80076c4:	7323      	strb	r3, [r4, #12]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	f023 0307 	bic.w	r3, r3, #7
 80076ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80076d2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80076d6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->color = lv_color_black();
 80076da:	8023      	strh	r3, [r4, #0]
}
 80076dc:	bd10      	pop	{r4, pc}

080076de <lv_draw_arc>:

void lv_draw_arc(lv_draw_ctx_t * draw_ctx, const lv_draw_arc_dsc_t * dsc, const lv_point_t * center, uint16_t radius,
                 uint16_t start_angle, uint16_t end_angle)
{
 80076de:	b570      	push	{r4, r5, r6, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80076e6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    if(dsc->opa <= LV_OPA_MIN) return;
 80076ea:	f891 c00c 	ldrb.w	ip, [r1, #12]
 80076ee:	f1bc 0f02 	cmp.w	ip, #2
 80076f2:	d908      	bls.n	8007706 <lv_draw_arc+0x28>
    if(dsc->width == 0) return;
 80076f4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80076f8:	b12e      	cbz	r6, 8007706 <lv_draw_arc+0x28>
    if(start_angle == end_angle) return;
 80076fa:	42ac      	cmp	r4, r5
 80076fc:	d003      	beq.n	8007706 <lv_draw_arc+0x28>

    draw_ctx->draw_arc(draw_ctx, dsc, center, radius, start_angle, end_angle);
 80076fe:	6946      	ldr	r6, [r0, #20]
 8007700:	9501      	str	r5, [sp, #4]
 8007702:	9400      	str	r4, [sp, #0]
 8007704:	47b0      	blx	r6

    //    const lv_draw_backend_t * backend = lv_draw_backend_get();
    //    backend->draw_arc(center_x, center_y, radius, start_angle, end_angle, clip_area, dsc);
}
 8007706:	b002      	add	sp, #8
 8007708:	bd70      	pop	{r4, r5, r6, pc}
	...

0800770c <lv_draw_arc_get_area>:

void lv_draw_arc_get_area(lv_coord_t x, lv_coord_t y, uint16_t radius,  uint16_t start_angle, uint16_t end_angle,
                          lv_coord_t w, bool rounded, lv_area_t * area)
{
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	b085      	sub	sp, #20
 8007712:	4683      	mov	fp, r0
 8007714:	9100      	str	r1, [sp, #0]
 8007716:	4615      	mov	r5, r2
 8007718:	461c      	mov	r4, r3
 800771a:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 800771e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8007722:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 8007726:	9f11      	ldr	r7, [sp, #68]	@ 0x44
    lv_coord_t rout = radius;

    /*Special case: full arc invalidation */
    if(end_angle == start_angle + 360) {
 8007728:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800772c:	459a      	cmp	sl, r3
 800772e:	d047      	beq.n	80077c0 <lv_draw_arc_get_area+0xb4>
 8007730:	fa0f f985 	sxth.w	r9, r5
        area->x2 = x + rout;
        area->y2 = y + rout;
        return;
    }

    if(start_angle > 360) start_angle -= 360;
 8007734:	f5b4 7fb4 	cmp.w	r4, #360	@ 0x168
 8007738:	d902      	bls.n	8007740 <lv_draw_arc_get_area+0x34>
 800773a:	f5a4 74b4 	sub.w	r4, r4, #360	@ 0x168
 800773e:	b2a4      	uxth	r4, r4
    if(end_angle > 360) end_angle -= 360;
 8007740:	f5ba 7fb4 	cmp.w	sl, #360	@ 0x168
 8007744:	d903      	bls.n	800774e <lv_draw_arc_get_area+0x42>
 8007746:	f5aa 7ab4 	sub.w	sl, sl, #360	@ 0x168
 800774a:	fa1f fa8a 	uxth.w	sl, sl

    lv_coord_t rin = radius - w;
 800774e:	eba5 0806 	sub.w	r8, r5, r6
 8007752:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 8007756:	2a00      	cmp	r2, #0
 8007758:	d03e      	beq.n	80077d8 <lv_draw_arc_get_area+0xcc>
 800775a:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800775e:	1076      	asrs	r6, r6, #1
 8007760:	3601      	adds	r6, #1
 8007762:	b236      	sxth	r6, r6
    uint8_t start_quarter = start_angle / 90;
 8007764:	0863      	lsrs	r3, r4, #1
 8007766:	49a9      	ldr	r1, [pc, #676]	@ (8007a0c <lv_draw_arc_get_area+0x300>)
 8007768:	fba1 2303 	umull	r2, r3, r1, r3
 800776c:	f3c3 1347 	ubfx	r3, r3, #5, #8
    uint8_t end_quarter = end_angle / 90;
 8007770:	ea4f 025a 	mov.w	r2, sl, lsr #1
 8007774:	fba1 1202 	umull	r1, r2, r1, r2
 8007778:	f3c2 1247 	ubfx	r2, r2, #5, #8

    /*360 deg still counts as quarter 3 (360 / 90 would be 4)*/
    if(start_quarter == 4) start_quarter = 3;
 800777c:	2b04      	cmp	r3, #4
 800777e:	d02d      	beq.n	80077dc <lv_draw_arc_get_area+0xd0>
    if(end_quarter == 4) end_quarter = 3;
 8007780:	2a04      	cmp	r2, #4
 8007782:	d02d      	beq.n	80077e0 <lv_draw_arc_get_area+0xd4>

    if(start_quarter == end_quarter && start_angle <= end_angle) {
 8007784:	4293      	cmp	r3, r2
 8007786:	d02d      	beq.n	80077e4 <lv_draw_arc_get_area+0xd8>

            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
        }
    }
    else if(start_quarter == 0 && end_quarter == 1) {
 8007788:	b913      	cbnz	r3, 8007790 <lv_draw_arc_get_area+0x84>
 800778a:	2a01      	cmp	r2, #1
 800778c:	f000 80fe 	beq.w	800798c <lv_draw_arc_get_area+0x280>
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
        area->y2 = y + rout + extra_area;
    }
    else if(start_quarter == 1 && end_quarter == 2) {
 8007790:	2b01      	cmp	r3, #1
 8007792:	f000 813d 	beq.w	8007a10 <lv_draw_arc_get_area+0x304>
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
    }
    else if(start_quarter == 2 && end_quarter == 3) {
 8007796:	2b02      	cmp	r3, #2
 8007798:	f000 817e 	beq.w	8007a98 <lv_draw_arc_get_area+0x38c>
        area->y1 = y - rout - extra_area;
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
    }
    else if(start_quarter == 3 && end_quarter == 0) {
 800779c:	2b03      	cmp	r3, #3
 800779e:	f000 81c5 	beq.w	8007b2c <lv_draw_arc_get_area+0x420>
        area->x2 = x + rout + extra_area;
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;

    }
    else {
        area->x1 = x - rout;
 80077a2:	fa1f f28b 	uxth.w	r2, fp
 80077a6:	1b53      	subs	r3, r2, r5
 80077a8:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 80077aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80077ae:	1b59      	subs	r1, r3, r5
 80077b0:	8079      	strh	r1, [r7, #2]
        area->x2 = x + rout;
 80077b2:	442a      	add	r2, r5
 80077b4:	80ba      	strh	r2, [r7, #4]
        area->y2 = y + rout;
 80077b6:	442b      	add	r3, r5
 80077b8:	80fb      	strh	r3, [r7, #6]
    }
}
 80077ba:	b005      	add	sp, #20
 80077bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        area->x1 = x - rout;
 80077c0:	b282      	uxth	r2, r0
 80077c2:	1b53      	subs	r3, r2, r5
 80077c4:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout;
 80077c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80077ca:	1b59      	subs	r1, r3, r5
 80077cc:	8079      	strh	r1, [r7, #2]
        area->x2 = x + rout;
 80077ce:	442a      	add	r2, r5
 80077d0:	80ba      	strh	r2, [r7, #4]
        area->y2 = y + rout;
 80077d2:	442b      	add	r3, r5
 80077d4:	80fb      	strh	r3, [r7, #6]
        return;
 80077d6:	e7f0      	b.n	80077ba <lv_draw_arc_get_area+0xae>
    lv_coord_t extra_area = rounded ? w / 2 + 1 : 0;
 80077d8:	2600      	movs	r6, #0
 80077da:	e7c3      	b.n	8007764 <lv_draw_arc_get_area+0x58>
    if(start_quarter == 4) start_quarter = 3;
 80077dc:	2303      	movs	r3, #3
 80077de:	e7cf      	b.n	8007780 <lv_draw_arc_get_area+0x74>
    if(end_quarter == 4) end_quarter = 3;
 80077e0:	2203      	movs	r2, #3
 80077e2:	e7cf      	b.n	8007784 <lv_draw_arc_get_area+0x78>
    if(start_quarter == end_quarter && start_angle <= end_angle) {
 80077e4:	4554      	cmp	r4, sl
 80077e6:	d8cf      	bhi.n	8007788 <lv_draw_arc_get_area+0x7c>
        if(start_quarter == 0) {
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d8e6      	bhi.n	80077ba <lv_draw_arc_get_area+0xae>
 80077ec:	e8df f003 	tbb	[pc, r3]
 80077f0:	9b683502 	.word	0x9b683502
            area->y1 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80077f4:	b220      	sxth	r0, r4
 80077f6:	f00e ff6b 	bl	80166d0 <lv_trigo_sin>
 80077fa:	fb08 f300 	mul.w	r3, r8, r0
 80077fe:	f8bd 5000 	ldrh.w	r5, [sp]
 8007802:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 8007806:	b29b      	uxth	r3, r3
 8007808:	b2b6      	uxth	r6, r6
 800780a:	1b9b      	subs	r3, r3, r6
 800780c:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800780e:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 8007812:	b200      	sxth	r0, r0
 8007814:	f00e ff5c 	bl	80166d0 <lv_trigo_sin>
 8007818:	fb09 f300 	mul.w	r3, r9, r0
 800781c:	fa1f fb8b 	uxth.w	fp, fp
 8007820:	eb0b 33e3 	add.w	r3, fp, r3, asr #15
 8007824:	fa16 f383 	uxtah	r3, r6, r3
 8007828:	80bb      	strh	r3, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800782a:	fa0f f08a 	sxth.w	r0, sl
 800782e:	f00e ff4f 	bl	80166d0 <lv_trigo_sin>
 8007832:	fb00 f009 	mul.w	r0, r0, r9
 8007836:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 800783a:	fa16 f585 	uxtah	r5, r6, r5
 800783e:	80fd      	strh	r5, [r7, #6]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007840:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 8007844:	b200      	sxth	r0, r0
 8007846:	f00e ff43 	bl	80166d0 <lv_trigo_sin>
 800784a:	fb00 f008 	mul.w	r0, r0, r8
 800784e:	eb0b 33e0 	add.w	r3, fp, r0, asr #15
 8007852:	b29b      	uxth	r3, r3
 8007854:	1b9b      	subs	r3, r3, r6
 8007856:	803b      	strh	r3, [r7, #0]
 8007858:	e7af      	b.n	80077ba <lv_draw_arc_get_area+0xae>
            area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800785a:	b220      	sxth	r0, r4
 800785c:	f00e ff38 	bl	80166d0 <lv_trigo_sin>
 8007860:	fb09 f300 	mul.w	r3, r9, r0
 8007864:	f8bd 5000 	ldrh.w	r5, [sp]
 8007868:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 800786c:	b2b6      	uxth	r6, r6
 800786e:	fa16 f383 	uxtah	r3, r6, r3
 8007872:	80fb      	strh	r3, [r7, #6]
            area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007874:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 8007878:	b200      	sxth	r0, r0
 800787a:	f00e ff29 	bl	80166d0 <lv_trigo_sin>
 800787e:	fb08 f300 	mul.w	r3, r8, r0
 8007882:	fa1f fb8b 	uxth.w	fp, fp
 8007886:	eb0b 33e3 	add.w	r3, fp, r3, asr #15
 800788a:	fa16 f383 	uxtah	r3, r6, r3
 800788e:	80bb      	strh	r3, [r7, #4]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007890:	fa0f f08a 	sxth.w	r0, sl
 8007894:	f00e ff1c 	bl	80166d0 <lv_trigo_sin>
 8007898:	fb00 f008 	mul.w	r0, r0, r8
 800789c:	eb05 33e0 	add.w	r3, r5, r0, asr #15
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	1b9b      	subs	r3, r3, r6
 80078a4:	807b      	strh	r3, [r7, #2]
            area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078a6:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 80078aa:	b200      	sxth	r0, r0
 80078ac:	f00e ff10 	bl	80166d0 <lv_trigo_sin>
 80078b0:	fb00 f009 	mul.w	r0, r0, r9
 80078b4:	eb0b 33e0 	add.w	r3, fp, r0, asr #15
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	1b9b      	subs	r3, r3, r6
 80078bc:	803b      	strh	r3, [r7, #0]
 80078be:	e77c      	b.n	80077ba <lv_draw_arc_get_area+0xae>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078c0:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 80078c4:	b200      	sxth	r0, r0
 80078c6:	f00e ff03 	bl	80166d0 <lv_trigo_sin>
 80078ca:	fb09 f300 	mul.w	r3, r9, r0
 80078ce:	fa1f f58b 	uxth.w	r5, fp
 80078d2:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	b2b6      	uxth	r6, r6
 80078da:	1b9b      	subs	r3, r3, r6
 80078dc:	803b      	strh	r3, [r7, #0]
            area->y2 = y + ((lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 80078de:	b220      	sxth	r0, r4
 80078e0:	f00e fef6 	bl	80166d0 <lv_trigo_sin>
 80078e4:	fb08 f300 	mul.w	r3, r8, r0
 80078e8:	f8bd 4000 	ldrh.w	r4, [sp]
 80078ec:	eb04 33e3 	add.w	r3, r4, r3, asr #15
 80078f0:	fa16 f383 	uxtah	r3, r6, r3
 80078f4:	80fb      	strh	r3, [r7, #6]
            area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 80078f6:	fa0f f08a 	sxth.w	r0, sl
 80078fa:	f00e fee9 	bl	80166d0 <lv_trigo_sin>
 80078fe:	fb00 f009 	mul.w	r0, r0, r9
 8007902:	eb04 33e0 	add.w	r3, r4, r0, asr #15
 8007906:	b29b      	uxth	r3, r3
 8007908:	1b9b      	subs	r3, r3, r6
 800790a:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 800790c:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 8007910:	b200      	sxth	r0, r0
 8007912:	f00e fedd 	bl	80166d0 <lv_trigo_sin>
 8007916:	fb00 f008 	mul.w	r0, r0, r8
 800791a:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 800791e:	fa16 f585 	uxtah	r5, r6, r5
 8007922:	80bd      	strh	r5, [r7, #4]
 8007924:	e749      	b.n	80077ba <lv_draw_arc_get_area+0xae>
            area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007926:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 800792a:	b200      	sxth	r0, r0
 800792c:	f00e fed0 	bl	80166d0 <lv_trigo_sin>
 8007930:	fb08 f300 	mul.w	r3, r8, r0
 8007934:	fa1f f58b 	uxth.w	r5, fp
 8007938:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 800793c:	b29b      	uxth	r3, r3
 800793e:	b2b6      	uxth	r6, r6
 8007940:	1b9b      	subs	r3, r3, r6
 8007942:	803b      	strh	r3, [r7, #0]
            area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007944:	b220      	sxth	r0, r4
 8007946:	f00e fec3 	bl	80166d0 <lv_trigo_sin>
 800794a:	fb09 f300 	mul.w	r3, r9, r0
 800794e:	f8bd 4000 	ldrh.w	r4, [sp]
 8007952:	eb04 33e3 	add.w	r3, r4, r3, asr #15
 8007956:	b29b      	uxth	r3, r3
 8007958:	1b9b      	subs	r3, r3, r6
 800795a:	807b      	strh	r3, [r7, #2]
            area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 800795c:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 8007960:	b200      	sxth	r0, r0
 8007962:	f00e feb5 	bl	80166d0 <lv_trigo_sin>
 8007966:	fb00 f009 	mul.w	r0, r0, r9
 800796a:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 800796e:	fa16 f585 	uxtah	r5, r6, r5
 8007972:	80bd      	strh	r5, [r7, #4]
            area->y2 = y + ((lv_trigo_sin(end_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007974:	fa0f f08a 	sxth.w	r0, sl
 8007978:	f00e feaa 	bl	80166d0 <lv_trigo_sin>
 800797c:	fb00 f008 	mul.w	r0, r0, r8
 8007980:	eb04 34e0 	add.w	r4, r4, r0, asr #15
 8007984:	fa16 f484 	uxtah	r4, r6, r4
 8007988:	80fc      	strh	r4, [r7, #6]
 800798a:	e716      	b.n	80077ba <lv_draw_arc_get_area+0xae>
        area->x1 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 800798c:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 8007990:	b200      	sxth	r0, r0
 8007992:	f00e fe9d 	bl	80166d0 <lv_trigo_sin>
 8007996:	fb09 f300 	mul.w	r3, r9, r0
 800799a:	fa1f fb8b 	uxth.w	fp, fp
 800799e:	eb0b 33e3 	add.w	r3, fp, r3, asr #15
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	b2b6      	uxth	r6, r6
 80079a6:	1b9b      	subs	r3, r3, r6
 80079a8:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079aa:	fa0f fa8a 	sxth.w	sl, sl
 80079ae:	4650      	mov	r0, sl
 80079b0:	f00e fe8e 	bl	80166d0 <lv_trigo_sin>
 80079b4:	9001      	str	r0, [sp, #4]
 80079b6:	b223      	sxth	r3, r4
 80079b8:	9302      	str	r3, [sp, #8]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f00e fe88 	bl	80166d0 <lv_trigo_sin>
 80079c0:	9b01      	ldr	r3, [sp, #4]
 80079c2:	4283      	cmp	r3, r0
 80079c4:	da1d      	bge.n	8007a02 <lv_draw_arc_get_area+0x2f6>
 80079c6:	4650      	mov	r0, sl
 80079c8:	f00e fe82 	bl	80166d0 <lv_trigo_sin>
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80079cc:	fb00 f308 	mul.w	r3, r0, r8
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079d0:	f8bd 8000 	ldrh.w	r8, [sp]
 80079d4:	eb08 33e3 	add.w	r3, r8, r3, asr #15
 80079d8:	b29b      	uxth	r3, r3
                                lv_trigo_sin(start_angle))  * rin) >> LV_TRIGO_SHIFT) - extra_area;
 80079da:	1b9b      	subs	r3, r3, r6
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 80079dc:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 80079de:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 80079e2:	b200      	sxth	r0, r0
 80079e4:	f00e fe74 	bl	80166d0 <lv_trigo_sin>
 80079e8:	fb00 f009 	mul.w	r0, r0, r9
 80079ec:	eb0b 33e0 	add.w	r3, fp, r0, asr #15
 80079f0:	fa16 f383 	uxtah	r3, r6, r3
 80079f4:	80bb      	strh	r3, [r7, #4]
        area->y2 = y + rout + extra_area;
 80079f6:	44a8      	add	r8, r5
 80079f8:	fa16 f888 	uxtah	r8, r6, r8
 80079fc:	f8a7 8006 	strh.w	r8, [r7, #6]
 8007a00:	e6db      	b.n	80077ba <lv_draw_arc_get_area+0xae>
        area->y1 = y + ((LV_MIN(lv_trigo_sin(end_angle),
 8007a02:	9802      	ldr	r0, [sp, #8]
 8007a04:	f00e fe64 	bl	80166d0 <lv_trigo_sin>
 8007a08:	e7e0      	b.n	80079cc <lv_draw_arc_get_area+0x2c0>
 8007a0a:	bf00      	nop
 8007a0c:	b60b60b7 	.word	0xb60b60b7
    else if(start_quarter == 1 && end_quarter == 2) {
 8007a10:	2a02      	cmp	r2, #2
 8007a12:	f47f aec0 	bne.w	8007796 <lv_draw_arc_get_area+0x8a>
        area->x1 = x - rout - extra_area;
 8007a16:	fa1f fb8b 	uxth.w	fp, fp
 8007a1a:	ebab 0305 	sub.w	r3, fp, r5
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	b2b6      	uxth	r6, r6
 8007a22:	1b9b      	subs	r3, r3, r6
 8007a24:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a26:	fa0f f08a 	sxth.w	r0, sl
 8007a2a:	f00e fe51 	bl	80166d0 <lv_trigo_sin>
 8007a2e:	fb09 f300 	mul.w	r3, r9, r0
 8007a32:	f8bd 5000 	ldrh.w	r5, [sp]
 8007a36:	eb05 33e3 	add.w	r3, r5, r3, asr #15
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	1b9b      	subs	r3, r3, r6
 8007a3e:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a40:	f104 035a 	add.w	r3, r4, #90	@ 0x5a
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f00e fe41 	bl	80166d0 <lv_trigo_sin>
 8007a4e:	9000      	str	r0, [sp, #0]
 8007a50:	f10a 0a5a 	add.w	sl, sl, #90	@ 0x5a
 8007a54:	fa0f fa8a 	sxth.w	sl, sl
 8007a58:	4650      	mov	r0, sl
 8007a5a:	f00e fe39 	bl	80166d0 <lv_trigo_sin>
 8007a5e:	9a00      	ldr	r2, [sp, #0]
 8007a60:	4282      	cmp	r2, r0
 8007a62:	dd15      	ble.n	8007a90 <lv_draw_arc_get_area+0x384>
 8007a64:	9801      	ldr	r0, [sp, #4]
 8007a66:	f00e fe33 	bl	80166d0 <lv_trigo_sin>
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007a6a:	fb00 f308 	mul.w	r3, r0, r8
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a6e:	eb0b 3be3 	add.w	fp, fp, r3, asr #15
                                lv_trigo_sin(end_angle + 90)) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007a72:	fa16 fb8b 	uxtah	fp, r6, fp
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a76:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007a7a:	b220      	sxth	r0, r4
 8007a7c:	f00e fe28 	bl	80166d0 <lv_trigo_sin>
 8007a80:	fb00 f009 	mul.w	r0, r0, r9
 8007a84:	eb05 35e0 	add.w	r5, r5, r0, asr #15
 8007a88:	fa16 f585 	uxtah	r5, r6, r5
 8007a8c:	80fd      	strh	r5, [r7, #6]
 8007a8e:	e694      	b.n	80077ba <lv_draw_arc_get_area+0xae>
        area->x2 = x + ((LV_MAX(lv_trigo_sin(start_angle + 90),
 8007a90:	4650      	mov	r0, sl
 8007a92:	f00e fe1d 	bl	80166d0 <lv_trigo_sin>
 8007a96:	e7e8      	b.n	8007a6a <lv_draw_arc_get_area+0x35e>
    else if(start_quarter == 2 && end_quarter == 3) {
 8007a98:	2a03      	cmp	r2, #3
 8007a9a:	f47f ae7f 	bne.w	800779c <lv_draw_arc_get_area+0x90>
        area->x1 = x + ((lv_trigo_sin(start_angle + 90) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007a9e:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 8007aa2:	b200      	sxth	r0, r0
 8007aa4:	f00e fe14 	bl	80166d0 <lv_trigo_sin>
 8007aa8:	fb09 f300 	mul.w	r3, r9, r0
 8007aac:	fa1f fb8b 	uxth.w	fp, fp
 8007ab0:	eb0b 33e3 	add.w	r3, fp, r3, asr #15
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	b2b6      	uxth	r6, r6
 8007ab8:	1b9b      	subs	r3, r3, r6
 8007aba:	803b      	strh	r3, [r7, #0]
        area->y1 = y - rout - extra_area;
 8007abc:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	1b5b      	subs	r3, r3, r5
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	1b9b      	subs	r3, r3, r6
 8007ac8:	807b      	strh	r3, [r7, #2]
        area->x2 = x + ((lv_trigo_sin(end_angle + 90) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007aca:	f10a 005a 	add.w	r0, sl, #90	@ 0x5a
 8007ace:	b200      	sxth	r0, r0
 8007ad0:	f00e fdfe 	bl	80166d0 <lv_trigo_sin>
 8007ad4:	fb00 f009 	mul.w	r0, r0, r9
 8007ad8:	eb0b 3be0 	add.w	fp, fp, r0, asr #15
 8007adc:	fa16 fb8b 	uxtah	fp, r6, fp
 8007ae0:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007ae4:	fa0f fa8a 	sxth.w	sl, sl
 8007ae8:	4650      	mov	r0, sl
 8007aea:	f00e fdf1 	bl	80166d0 <lv_trigo_sin>
 8007aee:	fb08 f500 	mul.w	r5, r8, r0
 8007af2:	b224      	sxth	r4, r4
 8007af4:	4620      	mov	r0, r4
 8007af6:	f00e fdeb 	bl	80166d0 <lv_trigo_sin>
 8007afa:	fb00 f008 	mul.w	r0, r0, r8
 8007afe:	4285      	cmp	r5, r0
 8007b00:	dd0c      	ble.n	8007b1c <lv_draw_arc_get_area+0x410>
 8007b02:	4650      	mov	r0, sl
 8007b04:	f00e fde4 	bl	80166d0 <lv_trigo_sin>
 8007b08:	fb00 f308 	mul.w	r3, r0, r8
 8007b0c:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8007b10:	9a00      	ldr	r2, [sp, #0]
 8007b12:	441a      	add	r2, r3
                               lv_trigo_sin(start_angle) * rin) >> LV_TRIGO_SHIFT) + extra_area;
 8007b14:	fa16 f382 	uxtah	r3, r6, r2
        area->y2 = y + (LV_MAX(lv_trigo_sin(end_angle) * rin,
 8007b18:	80fb      	strh	r3, [r7, #6]
 8007b1a:	e64e      	b.n	80077ba <lv_draw_arc_get_area+0xae>
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	f00e fdd7 	bl	80166d0 <lv_trigo_sin>
 8007b22:	fb00 f308 	mul.w	r3, r0, r8
 8007b26:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8007b2a:	e7f1      	b.n	8007b10 <lv_draw_arc_get_area+0x404>
    else if(start_quarter == 3 && end_quarter == 0) {
 8007b2c:	2a00      	cmp	r2, #0
 8007b2e:	f47f ae38 	bne.w	80077a2 <lv_draw_arc_get_area+0x96>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007b32:	f10a 035a 	add.w	r3, sl, #90	@ 0x5a
 8007b36:	b21b      	sxth	r3, r3
 8007b38:	9302      	str	r3, [sp, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f00e fdc8 	bl	80166d0 <lv_trigo_sin>
 8007b40:	9001      	str	r0, [sp, #4]
 8007b42:	f104 035a 	add.w	r3, r4, #90	@ 0x5a
 8007b46:	b219      	sxth	r1, r3
 8007b48:	9103      	str	r1, [sp, #12]
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	f00e fdc0 	bl	80166d0 <lv_trigo_sin>
 8007b50:	9a01      	ldr	r2, [sp, #4]
 8007b52:	4282      	cmp	r2, r0
 8007b54:	da29      	bge.n	8007baa <lv_draw_arc_get_area+0x49e>
 8007b56:	9802      	ldr	r0, [sp, #8]
 8007b58:	f00e fdba 	bl	80166d0 <lv_trigo_sin>
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007b5c:	fb00 f308 	mul.w	r3, r0, r8
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007b60:	fa1f fb8b 	uxth.w	fp, fp
 8007b64:	eb0b 33e3 	add.w	r3, fp, r3, asr #15
 8007b68:	b29b      	uxth	r3, r3
                                lv_trigo_sin(start_angle + 90)) * rin) >> LV_TRIGO_SHIFT) - extra_area;
 8007b6a:	b2b6      	uxth	r6, r6
 8007b6c:	1b9b      	subs	r3, r3, r6
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007b6e:	803b      	strh	r3, [r7, #0]
        area->y1 = y + ((lv_trigo_sin(start_angle) * rout) >> LV_TRIGO_SHIFT) - extra_area;
 8007b70:	b220      	sxth	r0, r4
 8007b72:	f00e fdad 	bl	80166d0 <lv_trigo_sin>
 8007b76:	fb09 f300 	mul.w	r3, r9, r0
 8007b7a:	f8bd 4000 	ldrh.w	r4, [sp]
 8007b7e:	eb04 33e3 	add.w	r3, r4, r3, asr #15
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	1b9b      	subs	r3, r3, r6
 8007b86:	807b      	strh	r3, [r7, #2]
        area->x2 = x + rout + extra_area;
 8007b88:	44ab      	add	fp, r5
 8007b8a:	fa16 fb8b 	uxtah	fp, r6, fp
 8007b8e:	f8a7 b004 	strh.w	fp, [r7, #4]
        area->y2 = y + ((lv_trigo_sin(end_angle) * rout) >> LV_TRIGO_SHIFT) + extra_area;
 8007b92:	fa0f f08a 	sxth.w	r0, sl
 8007b96:	f00e fd9b 	bl	80166d0 <lv_trigo_sin>
 8007b9a:	fb00 f909 	mul.w	r9, r0, r9
 8007b9e:	eb04 34e9 	add.w	r4, r4, r9, asr #15
 8007ba2:	fa16 f484 	uxtah	r4, r6, r4
 8007ba6:	80fc      	strh	r4, [r7, #6]
 8007ba8:	e607      	b.n	80077ba <lv_draw_arc_get_area+0xae>
        area->x1 = x + ((LV_MIN(lv_trigo_sin(end_angle + 90),
 8007baa:	9803      	ldr	r0, [sp, #12]
 8007bac:	f00e fd90 	bl	80166d0 <lv_trigo_sin>
 8007bb0:	e7d4      	b.n	8007b5c <lv_draw_arc_get_area+0x450>
 8007bb2:	bf00      	nop

08007bb4 <draw_cleanup>:
    lv_draw_label_dsc_init(&label_dsc);
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
}

static void draw_cleanup(_lv_img_cache_entry_t * cache)
{
 8007bb4:	b508      	push	{r3, lr}
    /*Automatically close images with no caching*/
#if LV_IMG_CACHE_DEF_SIZE == 0
    lv_img_decoder_close(&cache->dec_dsc);
 8007bb6:	f00c fd8e 	bl	80146d6 <lv_img_decoder_close>
#else
    LV_UNUSED(cache);
#endif
}
 8007bba:	bd08      	pop	{r3, pc}

08007bbc <show_error>:
{
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	b098      	sub	sp, #96	@ 0x60
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
 8007bc6:	a80a      	add	r0, sp, #40	@ 0x28
 8007bc8:	f002 f842 	bl	8009c50 <lv_draw_rect_dsc_init>
 8007bcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    rect_dsc.bg_color = lv_color_white();
 8007bd0:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
    lv_draw_rect(draw_ctx, &rect_dsc, coords);
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	a90a      	add	r1, sp, #40	@ 0x28
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f002 f87b 	bl	8009cd4 <lv_draw_rect>
    lv_draw_label_dsc_init(&label_dsc);
 8007bde:	a802      	add	r0, sp, #8
 8007be0:	f000 f9e2 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_draw_label(draw_ctx, &label_dsc, coords, msg, NULL);
 8007be4:	2300      	movs	r3, #0
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4633      	mov	r3, r6
 8007bea:	462a      	mov	r2, r5
 8007bec:	a902      	add	r1, sp, #8
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fa0a 	bl	8008008 <lv_draw_label>
}
 8007bf4:	b018      	add	sp, #96	@ 0x60
 8007bf6:	bd70      	pop	{r4, r5, r6, pc}

08007bf8 <lv_draw_img_dsc_init>:
{
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
 8007bfc:	2118      	movs	r1, #24
 8007bfe:	f00f f861 	bl	8016cc4 <lv_memset_00>
 8007c02:	f04f 0300 	mov.w	r3, #0
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c0e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8007c12:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->recolor = lv_color_black();
 8007c16:	8123      	strh	r3, [r4, #8]
    dsc->opa = LV_OPA_COVER;
 8007c18:	23ff      	movs	r3, #255	@ 0xff
 8007c1a:	72e3      	strb	r3, [r4, #11]
    dsc->zoom = LV_IMG_ZOOM_NONE;
 8007c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c20:	8063      	strh	r3, [r4, #2]
    dsc->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8007c22:	7d23      	ldrb	r3, [r4, #20]
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	7523      	strb	r3, [r4, #20]
}
 8007c2a:	bd10      	pop	{r4, pc}

08007c2c <lv_img_cf_get_px_size>:
    switch(cf) {
 8007c2c:	3804      	subs	r0, #4
 8007c2e:	280a      	cmp	r0, #10
 8007c30:	d807      	bhi.n	8007c42 <lv_img_cf_get_px_size+0x16>
 8007c32:	e8df f000 	tbb	[pc, r0]
 8007c36:	0812      	.short	0x0812
 8007c38:	0e0c0a12 	.word	0x0e0c0a12
 8007c3c:	0e0c0a10 	.word	0x0e0c0a10
 8007c40:	10          	.byte	0x10
 8007c41:	00          	.byte	0x00
 8007c42:	2000      	movs	r0, #0
 8007c44:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
 8007c46:	2018      	movs	r0, #24
            break;
 8007c48:	4770      	bx	lr
            px_size = 1;
 8007c4a:	2001      	movs	r0, #1
            break;
 8007c4c:	4770      	bx	lr
            px_size = 2;
 8007c4e:	2002      	movs	r0, #2
            break;
 8007c50:	4770      	bx	lr
            px_size = 4;
 8007c52:	2004      	movs	r0, #4
            break;
 8007c54:	4770      	bx	lr
            px_size = 8;
 8007c56:	2008      	movs	r0, #8
            break;
 8007c58:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
 8007c5a:	2010      	movs	r0, #16
}
 8007c5c:	4770      	bx	lr

08007c5e <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
 8007c5e:	2803      	cmp	r0, #3
 8007c60:	d005      	beq.n	8007c6e <lv_img_cf_is_chroma_keyed+0x10>
 8007c62:	2806      	cmp	r0, #6
 8007c64:	d001      	beq.n	8007c6a <lv_img_cf_is_chroma_keyed+0xc>
            is_chroma_keyed = false;
 8007c66:	2000      	movs	r0, #0
}
 8007c68:	4770      	bx	lr
    switch(cf) {
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	4770      	bx	lr
 8007c6e:	2001      	movs	r0, #1
 8007c70:	4770      	bx	lr

08007c72 <lv_img_cf_has_alpha>:
    switch(cf) {
 8007c72:	280e      	cmp	r0, #14
 8007c74:	d806      	bhi.n	8007c84 <lv_img_cf_has_alpha+0x12>
 8007c76:	f647 73a4 	movw	r3, #32676	@ 0x7fa4
 8007c7a:	fa23 f000 	lsr.w	r0, r3, r0
 8007c7e:	f000 0001 	and.w	r0, r0, #1
 8007c82:	4770      	bx	lr
            has_alpha = false;
 8007c84:	2000      	movs	r0, #0
}
 8007c86:	4770      	bx	lr

08007c88 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
 8007c88:	b160      	cbz	r0, 8007ca4 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8007c8a:	7802      	ldrb	r2, [r0, #0]
 8007c8c:	f1a2 0320 	sub.w	r3, r2, #32
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b5f      	cmp	r3, #95	@ 0x5f
 8007c94:	d908      	bls.n	8007ca8 <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
 8007c96:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8007c9a:	d101      	bne.n	8007ca0 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is draw to the first byte < 0x20*/
 8007c9c:	2000      	movs	r0, #0
}
 8007c9e:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8007ca0:	2002      	movs	r0, #2
 8007ca2:	4770      	bx	lr
    if(src == NULL) return img_src_type;
 8007ca4:	2003      	movs	r0, #3
 8007ca6:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8007ca8:	2001      	movs	r0, #1
 8007caa:	4770      	bx	lr

08007cac <lv_draw_img_decoded>:
{
 8007cac:	b530      	push	{r4, r5, lr}
 8007cae:	b083      	sub	sp, #12
    if(draw_ctx->draw_img_decoded == NULL) return;
 8007cb0:	6984      	ldr	r4, [r0, #24]
 8007cb2:	b11c      	cbz	r4, 8007cbc <lv_draw_img_decoded+0x10>
    draw_ctx->draw_img_decoded(draw_ctx, dsc, coords, map_p, color_format);
 8007cb4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8007cb8:	9500      	str	r5, [sp, #0]
 8007cba:	47a0      	blx	r4
}
 8007cbc:	b003      	add	sp, #12
 8007cbe:	bd30      	pop	{r4, r5, pc}

08007cc0 <decode_and_draw>:
{
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b08d      	sub	sp, #52	@ 0x34
 8007cc6:	4615      	mov	r5, r2
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
 8007cc8:	7aca      	ldrb	r2, [r1, #11]
 8007cca:	2a02      	cmp	r2, #2
 8007ccc:	d803      	bhi.n	8007cd6 <decode_and_draw+0x16>
 8007cce:	2001      	movs	r0, #1
}
 8007cd0:	b00d      	add	sp, #52	@ 0x34
 8007cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460c      	mov	r4, r1
    _lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor, draw_dsc->frame_id);
 8007cda:	690a      	ldr	r2, [r1, #16]
 8007cdc:	8909      	ldrh	r1, [r1, #8]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f00c f8a0 	bl	8013e24 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
 8007ce4:	4607      	mov	r7, r0
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f000 8112 	beq.w	8007f10 <decode_and_draw+0x250>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007cec:	f890 9014 	ldrb.w	r9, [r0, #20]
 8007cf0:	f009 091f 	and.w	r9, r9, #31
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	f7ff ffb2 	bl	8007c5e <lv_img_cf_is_chroma_keyed>
 8007cfa:	b9b0      	cbnz	r0, 8007d2a <decode_and_draw+0x6a>
    else if(LV_IMG_CF_ALPHA_8BIT == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_ALPHA_8BIT;
 8007cfc:	46c8      	mov	r8, r9
 8007cfe:	f1b9 0f0e 	cmp.w	r9, #14
 8007d02:	d009      	beq.n	8007d18 <decode_and_draw+0x58>
    else if(LV_IMG_CF_RGB565A8 == cdsc->dec_dsc.header.cf) cf = LV_IMG_CF_RGB565A8;
 8007d04:	f1b9 0f14 	cmp.w	r9, #20
 8007d08:	d011      	beq.n	8007d2e <decode_and_draw+0x6e>
    else if(lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007d0a:	4648      	mov	r0, r9
 8007d0c:	f7ff ffb1 	bl	8007c72 <lv_img_cf_has_alpha>
 8007d10:	b1c0      	cbz	r0, 8007d44 <decode_and_draw+0x84>
 8007d12:	f04f 0805 	mov.w	r8, #5
 8007d16:	e00a      	b.n	8007d2e <decode_and_draw+0x6e>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d1e:	d006      	beq.n	8007d2e <decode_and_draw+0x6e>
            cdsc->dec_dsc.img_data = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61bb      	str	r3, [r7, #24]
            cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
 8007d24:	f04f 0805 	mov.w	r8, #5
 8007d28:	e001      	b.n	8007d2e <decode_and_draw+0x6e>
    if(lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf)) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
 8007d2a:	f04f 0806 	mov.w	r8, #6
    if(cdsc->dec_dsc.error_msg != NULL) {
 8007d2e:	6a3a      	ldr	r2, [r7, #32]
 8007d30:	b15a      	cbz	r2, 8007d4a <decode_and_draw+0x8a>
        show_error(draw_ctx, coords, cdsc->dec_dsc.error_msg);
 8007d32:	4629      	mov	r1, r5
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ff41 	bl	8007bbc <show_error>
    draw_cleanup(cdsc);
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ff3a 	bl	8007bb4 <draw_cleanup>
    return LV_RES_OK;
 8007d40:	2001      	movs	r0, #1
 8007d42:	e7c5      	b.n	8007cd0 <decode_and_draw+0x10>
    else cf = LV_IMG_CF_TRUE_COLOR;
 8007d44:	f04f 0804 	mov.w	r8, #4
 8007d48:	e7f1      	b.n	8007d2e <decode_and_draw+0x6e>
    else if(cdsc->dec_dsc.img_data) {
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d05a      	beq.n	8007e06 <decode_and_draw+0x146>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8007d50:	f9b5 3000 	ldrsh.w	r3, [r5]
 8007d54:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 8007d58:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8007d5c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
    dest->x2 = src->x2;
 8007d60:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007d64:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    dest->y2 = src->y2;
 8007d68:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8007d6c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
 8007d70:	6822      	ldr	r2, [r4, #0]
 8007d72:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8007d76:	d115      	bne.n	8007da4 <decode_and_draw+0xe4>
        union_ok = _lv_area_intersect(&clip_com, draw_ctx->clip_area, &map_area_rot);
 8007d78:	aa08      	add	r2, sp, #32
 8007d7a:	68b1      	ldr	r1, [r6, #8]
 8007d7c:	a80a      	add	r0, sp, #40	@ 0x28
 8007d7e:	f7f9 fe39 	bl	80019f4 <_lv_area_intersect>
        if(union_ok == false) {
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d03a      	beq.n	8007dfc <decode_and_draw+0x13c>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007d86:	f8d6 9008 	ldr.w	r9, [r6, #8]
        draw_ctx->clip_area = &clip_com;
 8007d8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d8c:	60b3      	str	r3, [r6, #8]
        lv_draw_img_decoded(draw_ctx, draw_dsc, coords, cdsc->dec_dsc.img_data, cf);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f8cd 8000 	str.w	r8, [sp]
 8007d94:	462a      	mov	r2, r5
 8007d96:	4621      	mov	r1, r4
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff ff87 	bl	8007cac <lv_draw_img_decoded>
        draw_ctx->clip_area = clip_area_ori;
 8007d9e:	f8c6 9008 	str.w	r9, [r6, #8]
 8007da2:	e7ca      	b.n	8007d3a <decode_and_draw+0x7a>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007da4:	88a9      	ldrh	r1, [r5, #4]
 8007da6:	882a      	ldrh	r2, [r5, #0]
 8007da8:	1a89      	subs	r1, r1, r2
 8007daa:	b289      	uxth	r1, r1
 8007dac:	3101      	adds	r1, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	886b      	ldrh	r3, [r5, #2]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	b292      	uxth	r2, r2
 8007db6:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
 8007db8:	8863      	ldrh	r3, [r4, #2]
 8007dba:	1d20      	adds	r0, r4, #4
 8007dbc:	9001      	str	r0, [sp, #4]
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	f9b4 3000 	ldrsh.w	r3, [r4]
 8007dc4:	b212      	sxth	r2, r2
 8007dc6:	b209      	sxth	r1, r1
 8007dc8:	a808      	add	r0, sp, #32
 8007dca:	f00b ffa9 	bl	8013d20 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
 8007dce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007dd2:	8829      	ldrh	r1, [r5, #0]
 8007dd4:	440b      	add	r3, r1
 8007dd6:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
 8007dda:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8007dde:	886a      	ldrh	r2, [r5, #2]
 8007de0:	4413      	add	r3, r2
 8007de2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            map_area_rot.x2 += coords->x1;
 8007de6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8007dea:	440b      	add	r3, r1
 8007dec:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
            map_area_rot.y2 += coords->y1;
 8007df0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8007df4:	4413      	add	r3, r2
 8007df6:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8007dfa:	e7bd      	b.n	8007d78 <decode_and_draw+0xb8>
            draw_cleanup(cdsc);
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff fed9 	bl	8007bb4 <draw_cleanup>
            return LV_RES_OK;
 8007e02:	2001      	movs	r0, #1
 8007e04:	e764      	b.n	8007cd0 <decode_and_draw+0x10>
        union_ok = _lv_area_intersect(&mask_com, draw_ctx->clip_area, coords);
 8007e06:	462a      	mov	r2, r5
 8007e08:	68b1      	ldr	r1, [r6, #8]
 8007e0a:	a806      	add	r0, sp, #24
 8007e0c:	f7f9 fdf2 	bl	80019f4 <_lv_area_intersect>
        if(union_ok == false) {
 8007e10:	b3b8      	cbz	r0, 8007e82 <decode_and_draw+0x1c2>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8007e12:	f8bd 901c 	ldrh.w	r9, [sp, #28]
 8007e16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007e1a:	eba9 0903 	sub.w	r9, r9, r3
 8007e1e:	fa1f f989 	uxth.w	r9, r9
 8007e22:	f109 0901 	add.w	r9, r9, #1
 8007e26:	fa0f f389 	sxth.w	r3, r9
 8007e2a:	9305      	str	r3, [sp, #20]
        uint8_t  * buf = lv_mem_buf_get(lv_area_get_width(&mask_com) *
 8007e2c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8007e30:	f00e fdc4 	bl	80169bc <lv_mem_buf_get>
 8007e34:	4682      	mov	sl, r0
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8007e36:	f8d6 b008 	ldr.w	fp, [r6, #8]
    dest->x1 = src->x1;
 8007e3a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8007e3e:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 8007e42:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8007e46:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
    dest->x2 = src->x2;
 8007e4a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8007e4e:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    dest->y2 = src->y2;
 8007e52:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007e56:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        lv_area_set_height(&line, 1);
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	a808      	add	r0, sp, #32
 8007e5e:	f7f9 fd97 	bl	8001990 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
 8007e62:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8007e66:	9303      	str	r3, [sp, #12]
 8007e68:	f9b5 3000 	ldrsh.w	r3, [r5]
 8007e6c:	9304      	str	r3, [sp, #16]
        int32_t y = mask_com.y1 - coords->y1;
 8007e6e:	f9bd 901a 	ldrsh.w	r9, [sp, #26]
 8007e72:	f9b5 5002 	ldrsh.w	r5, [r5, #2]
 8007e76:	eba9 0505 	sub.w	r5, r9, r5
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	4654      	mov	r4, sl
 8007e7e:	469a      	mov	sl, r3
 8007e80:	e013      	b.n	8007eaa <decode_and_draw+0x1ea>
            draw_cleanup(cdsc);
 8007e82:	4638      	mov	r0, r7
 8007e84:	f7ff fe96 	bl	8007bb4 <draw_cleanup>
            return LV_RES_OK;
 8007e88:	2001      	movs	r0, #1
 8007e8a:	e721      	b.n	8007cd0 <decode_and_draw+0x10>
                lv_img_decoder_close(&cdsc->dec_dsc);
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f00c fc22 	bl	80146d6 <lv_img_decoder_close>
                lv_mem_buf_release(buf);
 8007e92:	4620      	mov	r0, r4
 8007e94:	f00e fdf4 	bl	8016a80 <lv_mem_buf_release>
                draw_cleanup(cdsc);
 8007e98:	4638      	mov	r0, r7
 8007e9a:	f7ff fe8b 	bl	8007bb4 <draw_cleanup>
                draw_ctx->clip_area = clip_area_ori;
 8007e9e:	f8c6 b008 	str.w	fp, [r6, #8]
                return LV_RES_INV;
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e714      	b.n	8007cd0 <decode_and_draw+0x10>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
 8007ea6:	f109 0901 	add.w	r9, r9, #1
 8007eaa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8007eae:	454b      	cmp	r3, r9
 8007eb0:	db28      	blt.n	8007f04 <decode_and_draw+0x244>
            union_ok = _lv_area_intersect(&mask_line, clip_area_ori, &line);
 8007eb2:	aa08      	add	r2, sp, #32
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	a80a      	add	r0, sp, #40	@ 0x28
 8007eb8:	f7f9 fd9c 	bl	80019f4 <_lv_area_intersect>
            if(union_ok == false) continue;
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0f2      	beq.n	8007ea6 <decode_and_draw+0x1e6>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
 8007ec0:	9b03      	ldr	r3, [sp, #12]
 8007ec2:	9a04      	ldr	r2, [sp, #16]
 8007ec4:	1a99      	subs	r1, r3, r2
 8007ec6:	9400      	str	r4, [sp, #0]
 8007ec8:	9b05      	ldr	r3, [sp, #20]
 8007eca:	b22a      	sxth	r2, r5
 8007ecc:	b209      	sxth	r1, r1
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f00c fbf0 	bl	80146b4 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
 8007ed4:	2801      	cmp	r0, #1
 8007ed6:	d1d9      	bne.n	8007e8c <decode_and_draw+0x1cc>
            draw_ctx->clip_area = &mask_line;
 8007ed8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007eda:	60b3      	str	r3, [r6, #8]
            lv_draw_img_decoded(draw_ctx, draw_dsc, &line, buf, cf);
 8007edc:	f8cd 8000 	str.w	r8, [sp]
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	aa08      	add	r2, sp, #32
 8007ee4:	4651      	mov	r1, sl
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7ff fee0 	bl	8007cac <lv_draw_img_decoded>
            line.y1++;
 8007eec:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            line.y2++;
 8007ef6:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 8007efa:	3301      	adds	r3, #1
 8007efc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
            y++;
 8007f00:	3501      	adds	r5, #1
 8007f02:	e7d0      	b.n	8007ea6 <decode_and_draw+0x1e6>
        draw_ctx->clip_area = clip_area_ori;
 8007f04:	f8c6 b008 	str.w	fp, [r6, #8]
        lv_mem_buf_release(buf);
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f00e fdb9 	bl	8016a80 <lv_mem_buf_release>
 8007f0e:	e714      	b.n	8007d3a <decode_and_draw+0x7a>
    if(cdsc == NULL) return LV_RES_INV;
 8007f10:	2000      	movs	r0, #0
 8007f12:	e6dd      	b.n	8007cd0 <decode_and_draw+0x10>

08007f14 <lv_draw_img>:
{
 8007f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	4616      	mov	r6, r2
    if(src == NULL) {
 8007f1c:	b1bb      	cbz	r3, 8007f4e <lv_draw_img+0x3a>
 8007f1e:	460d      	mov	r5, r1
 8007f20:	461f      	mov	r7, r3
    if(dsc->opa <= LV_OPA_MIN) return;
 8007f22:	7acb      	ldrb	r3, [r1, #11]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d910      	bls.n	8007f4a <lv_draw_img+0x36>
    if(draw_ctx->draw_img) {
 8007f28:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8007f2c:	f1b8 0f00 	cmp.w	r8, #0
 8007f30:	d003      	beq.n	8007f3a <lv_draw_img+0x26>
        res = draw_ctx->draw_img(draw_ctx, dsc, coords, src);
 8007f32:	463b      	mov	r3, r7
 8007f34:	47c0      	blx	r8
    if(res != LV_RES_OK) {
 8007f36:	2801      	cmp	r0, #1
 8007f38:	d007      	beq.n	8007f4a <lv_draw_img+0x36>
        res = decode_and_draw(draw_ctx, dsc, coords, src);
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff febd 	bl	8007cc0 <decode_and_draw>
    if(res != LV_RES_OK) {
 8007f46:	2801      	cmp	r0, #1
 8007f48:	d106      	bne.n	8007f58 <lv_draw_img+0x44>
}
 8007f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        show_error(draw_ctx, coords, "No\ndata");
 8007f4e:	4a05      	ldr	r2, [pc, #20]	@ (8007f64 <lv_draw_img+0x50>)
 8007f50:	4631      	mov	r1, r6
 8007f52:	f7ff fe33 	bl	8007bbc <show_error>
        return;
 8007f56:	e7f8      	b.n	8007f4a <lv_draw_img+0x36>
        show_error(draw_ctx, coords, "No\ndata");
 8007f58:	4a02      	ldr	r2, [pc, #8]	@ (8007f64 <lv_draw_img+0x50>)
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f7ff fe2d 	bl	8007bbc <show_error>
 8007f62:	e7f2      	b.n	8007f4a <lv_draw_img+0x36>
 8007f64:	08029c8c 	.word	0x08029c8c

08007f68 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 8007f68:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
 8007f6a:	3830      	subs	r0, #48	@ 0x30
 8007f6c:	b2c0      	uxtb	r0, r0
 8007f6e:	2809      	cmp	r0, #9
 8007f70:	d918      	bls.n	8007fa4 <hex_char_to_num+0x3c>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 8007f72:	2b60      	cmp	r3, #96	@ 0x60
 8007f74:	d901      	bls.n	8007f7a <hex_char_to_num+0x12>
 8007f76:	3b20      	subs	r3, #32
 8007f78:	b2db      	uxtb	r3, r3

        switch(hex) {
 8007f7a:	3b41      	subs	r3, #65	@ 0x41
 8007f7c:	2b05      	cmp	r3, #5
 8007f7e:	d80e      	bhi.n	8007f9e <hex_char_to_num+0x36>
 8007f80:	e8df f003 	tbb	[pc, r3]
 8007f84:	07050f03 	.word	0x07050f03
 8007f88:	0b09      	.short	0x0b09
 8007f8a:	200a      	movs	r0, #10
 8007f8c:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
 8007f8e:	200c      	movs	r0, #12
                break;
 8007f90:	4770      	bx	lr
            case 'D':
                result = 13;
 8007f92:	200d      	movs	r0, #13
                break;
 8007f94:	4770      	bx	lr
            case 'E':
                result = 14;
 8007f96:	200e      	movs	r0, #14
                break;
 8007f98:	4770      	bx	lr
            case 'F':
                result = 15;
 8007f9a:	200f      	movs	r0, #15
                break;
 8007f9c:	4770      	bx	lr
            default:
                result = 0;
 8007f9e:	2000      	movs	r0, #0
                break;
 8007fa0:	4770      	bx	lr
                result = 11;
 8007fa2:	200b      	movs	r0, #11
        }
    }

    return result;
}
 8007fa4:	4770      	bx	lr
	...

08007fa8 <lv_draw_label_dsc_init>:
{
 8007fa8:	b510      	push	{r4, lr}
 8007faa:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
 8007fac:	2120      	movs	r1, #32
 8007fae:	f00e fe89 	bl	8016cc4 <lv_memset_00>
    dsc->opa = LV_OPA_COVER;
 8007fb2:	23ff      	movs	r3, #255	@ 0xff
 8007fb4:	76a3      	strb	r3, [r4, #26]
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	f023 0307 	bic.w	r3, r3, #7
 8007fbe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fc2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8007fc6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->color = lv_color_black();
 8007fca:	81a3      	strh	r3, [r4, #12]
    dsc->font = LV_FONT_DEFAULT;
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <lv_draw_label_dsc_init+0x54>)
 8007fce:	6023      	str	r3, [r4, #0]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8007fd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007fd4:	6063      	str	r3, [r4, #4]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
 8007fd6:	60a3      	str	r3, [r4, #8]
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	f023 0307 	bic.w	r3, r3, #7
 8007fe0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007fe4:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8007fe8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->sel_color = lv_color_black();
 8007fec:	81e3      	strh	r3, [r4, #14]
    dsc->sel_bg_color = lv_palette_main(LV_PALETTE_BLUE);
 8007fee:	2005      	movs	r0, #5
 8007ff0:	f7fe fcc2 	bl	8006978 <lv_palette_main>
 8007ff4:	8220      	strh	r0, [r4, #16]
    dsc->bidi_dir = LV_BASE_DIR_LTR;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	76e3      	strb	r3, [r4, #27]
}
 8007ffa:	bd10      	pop	{r4, pc}
 8007ffc:	0802a2b8 	.word	0x0802a2b8

08008000 <lv_draw_letter>:
{
 8008000:	b510      	push	{r4, lr}
    draw_ctx->draw_letter(draw_ctx, dsc, pos_p, letter);
 8008002:	6a04      	ldr	r4, [r0, #32]
 8008004:	47a0      	blx	r4
}
 8008006:	bd10      	pop	{r4, pc}

08008008 <lv_draw_label>:
{
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	b0b5      	sub	sp, #212	@ 0xd4
 800800e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008010:	469c      	mov	ip, r3
 8008012:	9308      	str	r3, [sp, #32]
 8008014:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
    if(dsc->opa <= LV_OPA_MIN) return;
 8008016:	7e8b      	ldrb	r3, [r1, #26]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d915      	bls.n	8008048 <lv_draw_label+0x40>
 800801c:	4682      	mov	sl, r0
 800801e:	460d      	mov	r5, r1
 8008020:	4696      	mov	lr, r2
    if(dsc->font == NULL) {
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	b183      	cbz	r3, 8008048 <lv_draw_label+0x40>
    if(draw_ctx->draw_letter == NULL) {
 8008026:	6a03      	ldr	r3, [r0, #32]
 8008028:	b173      	cbz	r3, 8008048 <lv_draw_label+0x40>
    lv_draw_label_dsc_t dsc_mod = *dsc;
 800802a:	ae2c      	add	r6, sp, #176	@ 0xb0
 800802c:	460f      	mov	r7, r1
 800802e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008030:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008032:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008036:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    const lv_font_t * font = dsc->font;
 800803a:	6828      	ldr	r0, [r5, #0]
 800803c:	9004      	str	r0, [sp, #16]
    if(txt == NULL || txt[0] == '\0')
 800803e:	4663      	mov	r3, ip
 8008040:	b113      	cbz	r3, 8008048 <lv_draw_label+0x40>
 8008042:	f89c 3000 	ldrb.w	r3, [ip]
 8008046:	b913      	cbnz	r3, 800804e <lv_draw_label+0x46>
}
 8008048:	b035      	add	sp, #212	@ 0xd4
 800804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, draw_ctx->clip_area);
 800804e:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008052:	4671      	mov	r1, lr
 8008054:	a82a      	add	r0, sp, #168	@ 0xa8
 8008056:	f7f9 fccd 	bl	80019f4 <_lv_area_intersect>
    if(!clip_ok) return;
 800805a:	2800      	cmp	r0, #0
 800805c:	d0f4      	beq.n	8008048 <lv_draw_label+0x40>
    lv_text_align_t align = dsc->align;
 800805e:	7f2b      	ldrb	r3, [r5, #28]
 8008060:	930c      	str	r3, [sp, #48]	@ 0x30
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8008062:	b90b      	cbnz	r3, 8008068 <lv_draw_label+0x60>
 8008064:	2301      	movs	r3, #1
 8008066:	930c      	str	r3, [sp, #48]	@ 0x30
    if((dsc->flag & LV_TEXT_FLAG_EXPAND) == 0) {
 8008068:	7f6b      	ldrb	r3, [r5, #29]
 800806a:	f013 0f02 	tst.w	r3, #2
 800806e:	d129      	bne.n	80080c4 <lv_draw_label+0xbc>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8008070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008072:	8893      	ldrh	r3, [r2, #4]
 8008074:	8812      	ldrh	r2, [r2, #0]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	b29b      	uxth	r3, r3
 800807a:	3301      	adds	r3, #1
 800807c:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 800807e:	9a04      	ldr	r2, [sp, #16]
 8008080:	f9b2 6008 	ldrsh.w	r6, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
 8008084:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8008088:	1997      	adds	r7, r2, r6
 800808a:	970d      	str	r7, [sp, #52]	@ 0x34
    pos.x = coords->x1;
 800808c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800808e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008092:	f8ad 20a4 	strh.w	r2, [sp, #164]	@ 0xa4
    pos.y = coords->y1;
 8008096:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800809a:	f8ad 20a6 	strh.w	r2, [sp, #166]	@ 0xa6
    x_ofs = dsc->ofs_x;
 800809e:	f9b5 1016 	ldrsh.w	r1, [r5, #22]
 80080a2:	910e      	str	r1, [sp, #56]	@ 0x38
    y_ofs = dsc->ofs_y;
 80080a4:	f9b5 1018 	ldrsh.w	r1, [r5, #24]
    pos.y += y_ofs;
 80080a8:	fa11 f282 	uxtah	r2, r1, r2
 80080ac:	f8ad 20a6 	strh.w	r2, [sp, #166]	@ 0xa6
    if(hint && y_ofs == 0 && coords->y1 < 0) {
 80080b0:	2c00      	cmp	r4, #0
 80080b2:	d046      	beq.n	8008142 <lv_draw_label+0x13a>
 80080b4:	bb31      	cbnz	r1, 8008104 <lv_draw_label+0xfc>
 80080b6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	db13      	blt.n	80080e6 <lv_draw_label+0xde>
 80080be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80080c2:	e021      	b.n	8008108 <lv_draw_label+0x100>
        lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
 80080c4:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 80080c8:	9302      	str	r3, [sp, #8]
 80080ca:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	9200      	str	r2, [sp, #0]
 80080d2:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80080d6:	682a      	ldr	r2, [r5, #0]
 80080d8:	9908      	ldr	r1, [sp, #32]
 80080da:	a815      	add	r0, sp, #84	@ 0x54
 80080dc:	f01f fc15 	bl	802790a <lv_txt_get_size>
        w = p.x;
 80080e0:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 80080e4:	e7cb      	b.n	800807e <lv_draw_label+0x76>
        if(LV_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 80080e6:	68a1      	ldr	r1, [r4, #8]
 80080e8:	1a8a      	subs	r2, r1, r2
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	bfb8      	it	lt
 80080ee:	4252      	neglt	r2, r2
 80080f0:	f5c7 7100 	rsb	r1, r7, #512	@ 0x200
 80080f4:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
 80080f8:	dd02      	ble.n	8008100 <lv_draw_label+0xf8>
            hint->line_start = -1;
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080fe:	6022      	str	r2, [r4, #0]
        last_line_start = hint->line_start;
 8008100:	6827      	ldr	r7, [r4, #0]
    if(hint && last_line_start >= 0) {
 8008102:	e001      	b.n	8008108 <lv_draw_label+0x100>
 8008104:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008108:	2f00      	cmp	r7, #0
 800810a:	db1c      	blt.n	8008146 <lv_draw_label+0x13e>
        pos.y += hint->y;
 800810c:	f8bd 20a6 	ldrh.w	r2, [sp, #166]	@ 0xa6
 8008110:	6861      	ldr	r1, [r4, #4]
 8008112:	440a      	add	r2, r1
 8008114:	f8ad 20a6 	strh.w	r2, [sp, #166]	@ 0xa6
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008118:	b21a      	sxth	r2, r3
 800811a:	920a      	str	r2, [sp, #40]	@ 0x28
 800811c:	7f6b      	ldrb	r3, [r5, #29]
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	2300      	movs	r3, #0
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	4613      	mov	r3, r2
 8008126:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800812a:	9904      	ldr	r1, [sp, #16]
 800812c:	9808      	ldr	r0, [sp, #32]
 800812e:	4438      	add	r0, r7
 8008130:	f01f fa96 	bl	8027660 <_lv_txt_get_next_line>
 8008134:	eb00 0b07 	add.w	fp, r0, r7
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8008138:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 800813c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008140:	e009      	b.n	8008156 <lv_draw_label+0x14e>
    uint32_t line_start     = 0;
 8008142:	2700      	movs	r7, #0
 8008144:	e7e8      	b.n	8008118 <lv_draw_label+0x110>
 8008146:	2700      	movs	r7, #0
 8008148:	e7e6      	b.n	8008118 <lv_draw_label+0x110>
        if(txt[line_start] == '\0') return;
 800814a:	783b      	ldrb	r3, [r7, #0]
        line_start = line_end;
 800814c:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
 800814e:	2b00      	cmp	r3, #0
 8008150:	f43f af7a 	beq.w	8008048 <lv_draw_label+0x40>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008154:	4683      	mov	fp, r0
    while(pos.y + line_height_font < draw_ctx->clip_area->y1) {
 8008156:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800815a:	4433      	add	r3, r6
 800815c:	f8da 2008 	ldr.w	r2, [sl, #8]
 8008160:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008164:	4293      	cmp	r3, r2
 8008166:	da28      	bge.n	80081ba <lv_draw_label+0x1b2>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008168:	eb09 070b 	add.w	r7, r9, fp
 800816c:	7f6b      	ldrb	r3, [r5, #29]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	2300      	movs	r3, #0
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008176:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 800817a:	9904      	ldr	r1, [sp, #16]
 800817c:	4638      	mov	r0, r7
 800817e:	f01f fa6f 	bl	8027660 <_lv_txt_get_next_line>
 8008182:	4458      	add	r0, fp
        pos.y += line_height;
 8008184:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	@ 0xa6
 8008188:	4443      	add	r3, r8
 800818a:	b21b      	sxth	r3, r3
 800818c:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8008190:	2c00      	cmp	r4, #0
 8008192:	d0da      	beq.n	800814a <lv_draw_label+0x142>
 8008194:	f513 6f80 	cmn.w	r3, #1024	@ 0x400
 8008198:	dbd7      	blt.n	800814a <lv_draw_label+0x142>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	dad4      	bge.n	800814a <lv_draw_label+0x142>
            hint->line_start = line_start;
 80081a0:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
 80081a4:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 80081a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081aa:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80081ae:	1a9b      	subs	r3, r3, r2
 80081b0:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
 80081b2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80081b6:	60a3      	str	r3, [r4, #8]
 80081b8:	e7c7      	b.n	800814a <lv_draw_label+0x142>
    if(align == LV_TEXT_ALIGN_CENTER) {
 80081ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d036      	beq.n	800822e <lv_draw_label+0x226>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80081c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d04f      	beq.n	8008266 <lv_draw_label+0x25e>
    uint32_t sel_start = dsc->sel_start;
 80081c6:	686a      	ldr	r2, [r5, #4]
 80081c8:	4614      	mov	r4, r2
    uint32_t sel_end = dsc->sel_end;
 80081ca:	f8d5 9008 	ldr.w	r9, [r5, #8]
    if(sel_start > sel_end) {
 80081ce:	454a      	cmp	r2, r9
 80081d0:	d802      	bhi.n	80081d8 <lv_draw_label+0x1d0>
 80081d2:	464b      	mov	r3, r9
    uint32_t sel_start = dsc->sel_start;
 80081d4:	4691      	mov	r9, r2
    uint32_t sel_end = dsc->sel_end;
 80081d6:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
 80081d8:	7fab      	ldrb	r3, [r5, #30]
 80081da:	f013 0f03 	tst.w	r3, #3
 80081de:	d15b      	bne.n	8008298 <lv_draw_label+0x290>
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80081ec:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80081f0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80081f4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	f028 0807 	bic.w	r8, r8, #7
 8008200:	f028 08f8 	bic.w	r8, r8, #248	@ 0xf8
 8008204:	f428 58f8 	bic.w	r8, r8, #7936	@ 0x1f00
 8008208:	f428 4860 	bic.w	r8, r8, #57344	@ 0xe000
    lv_draw_rect_dsc_init(&draw_dsc_sel);
 800820c:	a817      	add	r0, sp, #92	@ 0x5c
 800820e:	f001 fd1f 	bl	8009c50 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
 8008212:	8a2b      	ldrh	r3, [r5, #16]
 8008214:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
    int32_t pos_x_start = pos.x;
 8008218:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 800821c:	9310      	str	r3, [sp, #64]	@ 0x40
    uint32_t par_start = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008222:	465e      	mov	r6, fp
 8008224:	46a3      	mov	fp, r4
 8008226:	f8cd a01c 	str.w	sl, [sp, #28]
 800822a:	46ba      	mov	sl, r7
    while(txt[line_start] != '\0') {
 800822c:	e155      	b.n	80084da <lv_draw_label+0x4d2>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800822e:	7f6b      	ldrb	r3, [r5, #29]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8008236:	9a04      	ldr	r2, [sp, #16]
 8008238:	ebab 0107 	sub.w	r1, fp, r7
 800823c:	9808      	ldr	r0, [sp, #32]
 800823e:	4438      	add	r0, r7
 8008240:	f01f fb14 	bl	802786c <lv_txt_get_width>
 8008244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008246:	8893      	ldrh	r3, [r2, #4]
 8008248:	8812      	ldrh	r2, [r2, #0]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	b29b      	uxth	r3, r3
 800824e:	3301      	adds	r3, #1
 8008250:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8008252:	1a1b      	subs	r3, r3, r0
 8008254:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008258:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	@ 0xa4
 800825c:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8008260:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8008264:	e7af      	b.n	80081c6 <lv_draw_label+0x1be>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 8008266:	7f6b      	ldrb	r3, [r5, #29]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	ebab 0107 	sub.w	r1, fp, r7
 8008274:	9808      	ldr	r0, [sp, #32]
 8008276:	4438      	add	r0, r7
 8008278:	f01f faf8 	bl	802786c <lv_txt_get_width>
 800827c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800827e:	8893      	ldrh	r3, [r2, #4]
 8008280:	8812      	ldrh	r2, [r2, #0]
 8008282:	1a9b      	subs	r3, r3, r2
 8008284:	b29b      	uxth	r3, r3
 8008286:	3301      	adds	r3, #1
 8008288:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
 800828a:	1a1b      	subs	r3, r3, r0
 800828c:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	@ 0xa4
 8008290:	4413      	add	r3, r2
 8008292:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8008296:	e796      	b.n	80081c6 <lv_draw_label+0x1be>
        lv_draw_line_dsc_init(&line_dsc);
 8008298:	a826      	add	r0, sp, #152	@ 0x98
 800829a:	f000 fa02 	bl	80086a2 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	f8ad 3098 	strh.w	r3, [sp, #152]	@ 0x98
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80082aa:	b903      	cbnz	r3, 80082ae <lv_draw_label+0x2a6>
 80082ac:	2301      	movs	r3, #1
 80082ae:	f8ad 309a 	strh.w	r3, [sp, #154]	@ 0x9a
        line_dsc.opa = dsc->opa;
 80082b2:	7eab      	ldrb	r3, [r5, #26]
 80082b4:	f88d 30a0 	strb.w	r3, [sp, #160]	@ 0xa0
        line_dsc.blend_mode = dsc->blend_mode;
 80082b8:	7fab      	ldrb	r3, [r5, #30]
 80082ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80082be:	f89d 20a1 	ldrb.w	r2, [sp, #161]	@ 0xa1
 80082c2:	f363 0201 	bfi	r2, r3, #0, #2
 80082c6:	f88d 20a1 	strb.w	r2, [sp, #161]	@ 0xa1
 80082ca:	e789      	b.n	80081e0 <lv_draw_label+0x1d8>
            uint32_t logical_char_pos = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	e08b      	b.n	80083ea <lv_draw_label+0x3e2>
 80082d2:	2300      	movs	r3, #0
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	e088      	b.n	80083ea <lv_draw_label+0x3e2>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 80082d8:	b137      	cbz	r7, 80082e8 <lv_draw_label+0x2e0>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char*/
 80082da:	2f01      	cmp	r7, #1
 80082dc:	d05c      	beq.n	8008398 <lv_draw_label+0x390>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end*/
 80082de:	2f02      	cmp	r7, #2
 80082e0:	f040 8091 	bne.w	8008406 <lv_draw_label+0x3fe>
                        cmd_state = CMD_STATE_WAIT;
 80082e4:	2700      	movs	r7, #0
 80082e6:	e06d      	b.n	80083c4 <lv_draw_label+0x3bc>
                        par_start = i;
 80082e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80082ea:	930f      	str	r3, [sp, #60]	@ 0x3c
                        cmd_state = CMD_STATE_PAR;
 80082ec:	2701      	movs	r7, #1
                        continue;
 80082ee:	e069      	b.n	80083c4 <lv_draw_label+0x3bc>
                    if(letter == ' ') {
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d167      	bne.n	80083c4 <lv_draw_label+0x3bc>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 80082f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80082f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	2b07      	cmp	r3, #7
 80082fc:	d004      	beq.n	8008308 <lv_draw_label+0x300>
                            recolor.full = dsc->color.full;
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008304:	2702      	movs	r7, #2
                    continue;
 8008306:	e05d      	b.n	80083c4 <lv_draw_label+0x3bc>
                            lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8008308:	9b06      	ldr	r3, [sp, #24]
 800830a:	1899      	adds	r1, r3, r2
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * LV_ATTRIBUTE_FAST_MEM lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
 800830c:	aa15      	add	r2, sp, #84	@ 0x54
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 800830e:	2306      	movs	r3, #6
 8008310:	e004      	b.n	800831c <lv_draw_label+0x314>
        *d8 = *s8;
 8008312:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008316:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
 800831a:	3b01      	subs	r3, #1
    while(len) {
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f8      	bne.n	8008312 <lv_draw_label+0x30a>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8008320:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008324:	f89d 0054 	ldrb.w	r0, [sp, #84]	@ 0x54
 8008328:	f7ff fe1e 	bl	8007f68 <hex_char_to_num>
 800832c:	0104      	lsls	r4, r0, #4
 800832e:	f89d 0055 	ldrb.w	r0, [sp, #85]	@ 0x55
 8008332:	f7ff fe19 	bl	8007f68 <hex_char_to_num>
 8008336:	1823      	adds	r3, r4, r0
 8008338:	9305      	str	r3, [sp, #20]
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 800833a:	f89d 0056 	ldrb.w	r0, [sp, #86]	@ 0x56
 800833e:	f7ff fe13 	bl	8007f68 <hex_char_to_num>
 8008342:	0104      	lsls	r4, r0, #4
 8008344:	f89d 0057 	ldrb.w	r0, [sp, #87]	@ 0x57
 8008348:	f7ff fe0e 	bl	8007f68 <hex_char_to_num>
 800834c:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 800834e:	f89d 0058 	ldrb.w	r0, [sp, #88]	@ 0x58
 8008352:	f7ff fe09 	bl	8007f68 <hex_char_to_num>
 8008356:	0107      	lsls	r7, r0, #4
 8008358:	f89d 0059 	ldrb.w	r0, [sp, #89]	@ 0x59
 800835c:	f7ff fe04 	bl	8007f68 <hex_char_to_num>
 8008360:	183b      	adds	r3, r7, r0
 8008362:	f3c4 1142 	ubfx	r1, r4, #5, #3
 8008366:	9a05      	ldr	r2, [sp, #20]
 8008368:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800836c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8008370:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8008374:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008376:	f361 0002 	bfi	r0, r1, #0, #3
 800837a:	4601      	mov	r1, r0
 800837c:	f362 01c7 	bfi	r1, r2, #3, #5
 8008380:	460a      	mov	r2, r1
 8008382:	f363 220c 	bfi	r2, r3, #8, #5
 8008386:	4613      	mov	r3, r2
 8008388:	f364 334f 	bfi	r3, r4, #13, #3
 800838c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8008390:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8008394:	2702      	movs	r7, #2
 8008396:	e015      	b.n	80083c4 <lv_draw_label+0x3bc>
                        cmd_state = CMD_STATE_WAIT;
 8008398:	2700      	movs	r7, #0
 800839a:	e037      	b.n	800840c <lv_draw_label+0x404>
            if(cmd_state == CMD_STATE_IN) color = recolor;
 800839c:	f8bd 802e 	ldrh.w	r8, [sp, #46]	@ 0x2e
 80083a0:	e038      	b.n	8008414 <lv_draw_label+0x40c>
            dsc_mod.color = color;
 80083a2:	f8ad 80bc 	strh.w	r8, [sp, #188]	@ 0xbc
            lv_draw_letter(draw_ctx, &dsc_mod, &pos, letter);
 80083a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083a8:	aa29      	add	r2, sp, #164	@ 0xa4
 80083aa:	a92c      	add	r1, sp, #176	@ 0xb0
 80083ac:	9807      	ldr	r0, [sp, #28]
 80083ae:	f7ff fe27 	bl	8008000 <lv_draw_letter>
            if(letter_w > 0) {
 80083b2:	b13c      	cbz	r4, 80083c4 <lv_draw_label+0x3bc>
                pos.x += letter_w + dsc->letter_space;
 80083b4:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 80083b8:	8aaa      	ldrh	r2, [r5, #20]
 80083ba:	4414      	add	r4, r2
 80083bc:	fa13 f484 	uxtah	r4, r3, r4
 80083c0:	f8ad 40a4 	strh.w	r4, [sp, #164]	@ 0xa4
        while(i < line_end - line_start) {
 80083c4:	eba6 030a 	sub.w	r3, r6, sl
 80083c8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80083ca:	428b      	cmp	r3, r1
 80083cc:	d953      	bls.n	8008476 <lv_draw_label+0x46e>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 80083ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083d2:	4599      	cmp	r9, r3
 80083d4:	f43f af7a 	beq.w	80082cc <lv_draw_label+0x2c4>
 80083d8:	459b      	cmp	fp, r3
 80083da:	f43f af7a 	beq.w	80082d2 <lv_draw_label+0x2ca>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
 80083de:	4b84      	ldr	r3, [pc, #528]	@ (80085f0 <lv_draw_label+0x5e8>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4451      	add	r1, sl
 80083e4:	9808      	ldr	r0, [sp, #32]
 80083e6:	4798      	blx	r3
 80083e8:	9005      	str	r0, [sp, #20]
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80083ea:	ab25      	add	r3, sp, #148	@ 0x94
 80083ec:	aa14      	add	r2, sp, #80	@ 0x50
 80083ee:	a913      	add	r1, sp, #76	@ 0x4c
 80083f0:	9806      	ldr	r0, [sp, #24]
 80083f2:	f01f fa25 	bl	8027840 <_lv_txt_encoded_letter_next_2>
            if((dsc->flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80083f6:	7f6b      	ldrb	r3, [r5, #29]
 80083f8:	f013 0f01 	tst.w	r3, #1
 80083fc:	d006      	beq.n	800840c <lv_draw_label+0x404>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80083fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008400:	2b23      	cmp	r3, #35	@ 0x23
 8008402:	f43f af69 	beq.w	80082d8 <lv_draw_label+0x2d0>
                if(cmd_state == CMD_STATE_PAR) {
 8008406:	2f01      	cmp	r7, #1
 8008408:	f43f af72 	beq.w	80082f0 <lv_draw_label+0x2e8>
            color = dsc->color;
 800840c:	f8b5 800c 	ldrh.w	r8, [r5, #12]
            if(cmd_state == CMD_STATE_IN) color = recolor;
 8008410:	2f02      	cmp	r7, #2
 8008412:	d0c3      	beq.n	800839c <lv_draw_label+0x394>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8008414:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008416:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008418:	9804      	ldr	r0, [sp, #16]
 800841a:	f009 fbdf 	bl	8011bdc <lv_font_get_glyph_width>
 800841e:	4604      	mov	r4, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 8008420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008424:	4599      	cmp	r9, r3
 8008426:	d0bc      	beq.n	80083a2 <lv_draw_label+0x39a>
 8008428:	459b      	cmp	fp, r3
 800842a:	d0ba      	beq.n	80083a2 <lv_draw_label+0x39a>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
 800842c:	9b05      	ldr	r3, [sp, #20]
 800842e:	4599      	cmp	r9, r3
 8008430:	d8b7      	bhi.n	80083a2 <lv_draw_label+0x39a>
 8008432:	459b      	cmp	fp, r3
 8008434:	d9b5      	bls.n	80083a2 <lv_draw_label+0x39a>
                    sel_coords.x1 = pos.x;
 8008436:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 800843a:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
                    sel_coords.y1 = pos.y;
 800843e:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	@ 0xa6
 8008442:	f8ad 2056 	strh.w	r2, [sp, #86]	@ 0x56
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
 8008446:	fa10 f383 	uxtah	r3, r0, r3
 800844a:	8aa9      	ldrh	r1, [r5, #20]
 800844c:	fa11 f383 	uxtah	r3, r1, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
                    sel_coords.y2 = pos.y + line_height - 1;
 8008458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800845a:	fa13 f382 	uxtah	r3, r3, r2
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
                    lv_draw_rect(draw_ctx, &draw_dsc_sel, &sel_coords);
 8008466:	aa15      	add	r2, sp, #84	@ 0x54
 8008468:	a917      	add	r1, sp, #92	@ 0x5c
 800846a:	9807      	ldr	r0, [sp, #28]
 800846c:	f001 fc32 	bl	8009cd4 <lv_draw_rect>
                    color = dsc->sel_color;
 8008470:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8008474:	e795      	b.n	80083a2 <lv_draw_label+0x39a>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
 8008476:	7fab      	ldrb	r3, [r5, #30]
 8008478:	f013 0f02 	tst.w	r3, #2
 800847c:	d13f      	bne.n	80084fe <lv_draw_label+0x4f6>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
 800847e:	7fab      	ldrb	r3, [r5, #30]
 8008480:	f013 0f01 	tst.w	r3, #1
 8008484:	d160      	bne.n	8008548 <lv_draw_label+0x540>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 8008486:	9b08      	ldr	r3, [sp, #32]
 8008488:	199c      	adds	r4, r3, r6
 800848a:	7f6b      	ldrb	r3, [r5, #29]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008494:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8008498:	9904      	ldr	r1, [sp, #16]
 800849a:	4620      	mov	r0, r4
 800849c:	f01f f8e0 	bl	8027660 <_lv_txt_get_next_line>
 80084a0:	1837      	adds	r7, r6, r0
        pos.x = coords->x1;
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084a8:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
        if(align == LV_TEXT_ALIGN_CENTER) {
 80084ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d06d      	beq.n	800858e <lv_draw_label+0x586>
        else if(align == LV_TEXT_ALIGN_RIGHT) {
 80084b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	f000 8084 	beq.w	80085c2 <lv_draw_label+0x5ba>
        pos.y += line_height;
 80084ba:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	@ 0xa6
 80084be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80084c0:	4413      	add	r3, r2
 80084c2:	b21b      	sxth	r3, r3
 80084c4:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
        if(pos.y > draw_ctx->clip_area->y2) return;
 80084c8:	9a07      	ldr	r2, [sp, #28]
 80084ca:	6892      	ldr	r2, [r2, #8]
 80084cc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
 80084d0:	46b2      	mov	sl, r6
        if(pos.y > draw_ctx->clip_area->y2) return;
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f73f adb8 	bgt.w	8008048 <lv_draw_label+0x40>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, NULL, dsc->flag);
 80084d8:	463e      	mov	r6, r7
    while(txt[line_start] != '\0') {
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	eb03 020a 	add.w	r2, r3, sl
 80084e0:	9206      	str	r2, [sp, #24]
 80084e2:	f813 300a 	ldrb.w	r3, [r3, sl]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f43f adae 	beq.w	8008048 <lv_draw_label+0x40>
        pos.x += x_ofs;
 80084ec:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 80084f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084f2:	4413      	add	r3, r2
 80084f4:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
        i         = 0;
 80084f8:	2700      	movs	r7, #0
 80084fa:	9725      	str	r7, [sp, #148]	@ 0x94
        while(i < line_end - line_start) {
 80084fc:	e762      	b.n	80083c4 <lv_draw_label+0x3bc>
            p1.x = pos_x_start;
 80084fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008500:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
 8008504:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	@ 0xa6
 8008508:	682a      	ldr	r2, [r5, #0]
 800850a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800850e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8008512:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8008516:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	@ 0x9a
 800851a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800851e:	1052      	asrs	r2, r2, #1
 8008520:	fa12 f383 	uxtah	r3, r2, r3
 8008524:	b21b      	sxth	r3, r3
 8008526:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
            p2.x = pos.x;
 800852a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	@ 0xa4
 800852e:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
            p2.y = p1.y;
 8008532:	f8ad 3056 	strh.w	r3, [sp, #86]	@ 0x56
            line_dsc.color = color;
 8008536:	f8ad 8098 	strh.w	r8, [sp, #152]	@ 0x98
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 800853a:	ab15      	add	r3, sp, #84	@ 0x54
 800853c:	aa14      	add	r2, sp, #80	@ 0x50
 800853e:	a926      	add	r1, sp, #152	@ 0x98
 8008540:	9807      	ldr	r0, [sp, #28]
 8008542:	f000 f8c3 	bl	80086cc <lv_draw_line>
 8008546:	e79a      	b.n	800847e <lv_draw_label+0x476>
            p1.x = pos_x_start;
 8008548:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800854a:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
 800854e:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	@ 0xa6
 8008552:	682a      	ldr	r2, [r5, #0]
 8008554:	8911      	ldrh	r1, [r2, #8]
 8008556:	440b      	add	r3, r1
 8008558:	b29b      	uxth	r3, r3
 800855a:	8952      	ldrh	r2, [r2, #10]
 800855c:	1a9b      	subs	r3, r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	9a04      	ldr	r2, [sp, #16]
 8008562:	f992 200d 	ldrsb.w	r2, [r2, #13]
 8008566:	b292      	uxth	r2, r2
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	b21b      	sxth	r3, r3
 800856c:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
            p2.x = pos.x;
 8008570:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	@ 0xa4
 8008574:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
            p2.y = p1.y;
 8008578:	f8ad 3056 	strh.w	r3, [sp, #86]	@ 0x56
            line_dsc.color = color;
 800857c:	f8ad 8098 	strh.w	r8, [sp, #152]	@ 0x98
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 8008580:	ab15      	add	r3, sp, #84	@ 0x54
 8008582:	aa14      	add	r2, sp, #80	@ 0x50
 8008584:	a926      	add	r1, sp, #152	@ 0x98
 8008586:	9807      	ldr	r0, [sp, #28]
 8008588:	f000 f8a0 	bl	80086cc <lv_draw_line>
 800858c:	e77b      	b.n	8008486 <lv_draw_label+0x47e>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 800858e:	7f6b      	ldrb	r3, [r5, #29]
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8008596:	9a04      	ldr	r2, [sp, #16]
 8008598:	4601      	mov	r1, r0
 800859a:	4620      	mov	r0, r4
 800859c:	f01f f966 	bl	802786c <lv_txt_get_width>
 80085a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a2:	8893      	ldrh	r3, [r2, #4]
 80085a4:	8812      	ldrh	r2, [r2, #0]
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3301      	adds	r3, #1
 80085ac:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80085ae:	1a18      	subs	r0, r3, r0
 80085b0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80085b4:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	@ 0xa4
 80085b8:	eb03 0360 	add.w	r3, r3, r0, asr #1
 80085bc:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 80085c0:	e77b      	b.n	80084ba <lv_draw_label+0x4b2>
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
 80085c2:	7f6b      	ldrb	r3, [r5, #29]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 80085ca:	9a04      	ldr	r2, [sp, #16]
 80085cc:	4601      	mov	r1, r0
 80085ce:	4620      	mov	r0, r4
 80085d0:	f01f f94c 	bl	802786c <lv_txt_get_width>
 80085d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085d6:	8893      	ldrh	r3, [r2, #4]
 80085d8:	8812      	ldrh	r2, [r2, #0]
 80085da:	1a9b      	subs	r3, r3, r2
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3301      	adds	r3, #1
 80085e0:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
 80085e2:	1a1b      	subs	r3, r3, r0
 80085e4:	f8bd 20a4 	ldrh.w	r2, [sp, #164]	@ 0xa4
 80085e8:	4413      	add	r3, r2
 80085ea:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 80085ee:	e764      	b.n	80084ba <lv_draw_label+0x4b2>
 80085f0:	20000078 	.word	0x20000078

080085f4 <lv_draw_layer_create>:
 *   GLOBAL FUNCTIONS
 **********************/

lv_draw_layer_ctx_t * lv_draw_layer_create(lv_draw_ctx_t * draw_ctx, const lv_area_t * layer_area,
                                           lv_draw_layer_flags_t flags)
{
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(draw_ctx->layer_init == NULL) return NULL;
 80085f6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80085f8:	b353      	cbz	r3, 8008650 <lv_draw_layer_create+0x5c>
 80085fa:	4604      	mov	r4, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	4616      	mov	r6, r2

    lv_draw_layer_ctx_t * layer_ctx = lv_mem_alloc(draw_ctx->layer_instance_size);
 8008600:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8008602:	f00e f989 	bl	8016918 <lv_mem_alloc>
    LV_ASSERT_MALLOC(layer_ctx);
 8008606:	4605      	mov	r5, r0
 8008608:	b1e8      	cbz	r0, 8008646 <lv_draw_layer_create+0x52>
    if(layer_ctx == NULL) {
        LV_LOG_WARN("Couldn't allocate a new layer context");
        return NULL;
    }

    lv_memset_00(layer_ctx, draw_ctx->layer_instance_size);
 800860a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800860c:	f00e fb5a 	bl	8016cc4 <lv_memset_00>

    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 8008610:	f016 fd3c 	bl	801f08c <_lv_refr_get_disp_refreshing>
    layer_ctx->original.buf = draw_ctx->buf;
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	622b      	str	r3, [r5, #32]
    layer_ctx->original.buf_area = draw_ctx->buf_area;
 8008618:	6863      	ldr	r3, [r4, #4]
 800861a:	61eb      	str	r3, [r5, #28]
    layer_ctx->original.clip_area = draw_ctx->clip_area;
 800861c:	68a3      	ldr	r3, [r4, #8]
 800861e:	61ab      	str	r3, [r5, #24]
    layer_ctx->original.screen_transp = disp_refr->driver->screen_transp;
 8008620:	6803      	ldr	r3, [r0, #0]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008628:	f885 3024 	strb.w	r3, [r5, #36]	@ 0x24
    layer_ctx->area_full = *layer_area;
 800862c:	462b      	mov	r3, r5
 800862e:	6838      	ldr	r0, [r7, #0]
 8008630:	6879      	ldr	r1, [r7, #4]
 8008632:	c303      	stmia	r3!, {r0, r1}

    lv_draw_layer_ctx_t * init_layer_ctx =  draw_ctx->layer_init(draw_ctx, layer_ctx, flags);
 8008634:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008636:	4632      	mov	r2, r6
 8008638:	4629      	mov	r1, r5
 800863a:	4620      	mov	r0, r4
 800863c:	4798      	blx	r3
    if(NULL == init_layer_ctx) {
 800863e:	4604      	mov	r4, r0
 8008640:	b110      	cbz	r0, 8008648 <lv_draw_layer_create+0x54>
        lv_mem_free(layer_ctx);
    }
    return init_layer_ctx;
}
 8008642:	4620      	mov	r0, r4
 8008644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(layer_ctx);
 8008646:	e7fe      	b.n	8008646 <lv_draw_layer_create+0x52>
        lv_mem_free(layer_ctx);
 8008648:	4628      	mov	r0, r5
 800864a:	f00e f983 	bl	8016954 <lv_mem_free>
 800864e:	e7f8      	b.n	8008642 <lv_draw_layer_create+0x4e>
    if(draw_ctx->layer_init == NULL) return NULL;
 8008650:	2400      	movs	r4, #0
 8008652:	e7f6      	b.n	8008642 <lv_draw_layer_create+0x4e>

08008654 <lv_draw_layer_adjust>:

void lv_draw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                          lv_draw_layer_flags_t flags)
{
 8008654:	b508      	push	{r3, lr}
    if(draw_ctx->layer_adjust) draw_ctx->layer_adjust(draw_ctx, layer_ctx, flags);
 8008656:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8008658:	b103      	cbz	r3, 800865c <lv_draw_layer_adjust+0x8>
 800865a:	4798      	blx	r3
}
 800865c:	bd08      	pop	{r3, pc}

0800865e <lv_draw_layer_blend>:

void lv_draw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                         lv_draw_img_dsc_t * draw_dsc)
{
 800865e:	b508      	push	{r3, lr}
    if(draw_ctx->layer_blend) draw_ctx->layer_blend(draw_ctx, layer_ctx, draw_dsc);
 8008660:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008662:	b103      	cbz	r3, 8008666 <lv_draw_layer_blend+0x8>
 8008664:	4798      	blx	r3
}
 8008666:	bd08      	pop	{r3, pc}

08008668 <lv_draw_layer_destroy>:

void lv_draw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4605      	mov	r5, r0
 800866c:	460c      	mov	r4, r1

    lv_draw_wait_for_finish(draw_ctx);
 800866e:	f7ff f81c 	bl	80076aa <lv_draw_wait_for_finish>
    draw_ctx->buf = layer_ctx->original.buf;
 8008672:	6a23      	ldr	r3, [r4, #32]
 8008674:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 8008676:	69e3      	ldr	r3, [r4, #28]
 8008678:	606b      	str	r3, [r5, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800867a:	69a3      	ldr	r3, [r4, #24]
 800867c:	60ab      	str	r3, [r5, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800867e:	f016 fd05 	bl	801f08c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 8008682:	6803      	ldr	r3, [r0, #0]
 8008684:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
 8008688:	7c1a      	ldrb	r2, [r3, #16]
 800868a:	f361 1286 	bfi	r2, r1, #6, #1
 800868e:	741a      	strb	r2, [r3, #16]

    if(draw_ctx->layer_destroy) draw_ctx->layer_destroy(draw_ctx, layer_ctx);
 8008690:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8008692:	b113      	cbz	r3, 800869a <lv_draw_layer_destroy+0x32>
 8008694:	4621      	mov	r1, r4
 8008696:	4628      	mov	r0, r5
 8008698:	4798      	blx	r3
    lv_mem_free(layer_ctx);
 800869a:	4620      	mov	r0, r4
 800869c:	f00e f95a 	bl	8016954 <lv_mem_free>
}
 80086a0:	bd38      	pop	{r3, r4, r5, pc}

080086a2 <lv_draw_line_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
{
 80086a2:	b510      	push	{r4, lr}
 80086a4:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
 80086a6:	210a      	movs	r1, #10
 80086a8:	f00e fb0c 	bl	8016cc4 <lv_memset_00>
    dsc->width = 1;
 80086ac:	2301      	movs	r3, #1
 80086ae:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
 80086b0:	23ff      	movs	r3, #255	@ 0xff
 80086b2:	7223      	strb	r3, [r4, #8]
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	f023 0307 	bic.w	r3, r3, #7
 80086bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80086c0:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 80086c4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->color = lv_color_black();
 80086c8:	8023      	strh	r3, [r4, #0]
}
 80086ca:	bd10      	pop	{r4, pc}

080086cc <lv_draw_line>:

void LV_ATTRIBUTE_FAST_MEM lv_draw_line(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                        const lv_point_t * point1, const lv_point_t * point2)
{
 80086cc:	b510      	push	{r4, lr}
    if(dsc->width == 0) return;
 80086ce:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80086d2:	b124      	cbz	r4, 80086de <lv_draw_line+0x12>
    if(dsc->opa <= LV_OPA_MIN) return;
 80086d4:	7a0c      	ldrb	r4, [r1, #8]
 80086d6:	2c02      	cmp	r4, #2
 80086d8:	d901      	bls.n	80086de <lv_draw_line+0x12>

    draw_ctx->draw_line(draw_ctx, dsc, point1, point2);
 80086da:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80086dc:	47a0      	blx	r4
}
 80086de:	bd10      	pop	{r4, pc}

080086e0 <circ_init>:
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
static void circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
    c->x = radius;
 80086e0:	8002      	strh	r2, [r0, #0]
    c->y = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	8043      	strh	r3, [r0, #2]
    *tmp = 1 - radius;
 80086e6:	f1c2 0201 	rsb	r2, r2, #1
 80086ea:	800a      	strh	r2, [r1, #0]
}
 80086ec:	4770      	bx	lr

080086ee <circ_cont>:
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
static bool circ_cont(lv_point_t * c)
{
    return c->y <= c->x ? true : false;
 80086ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80086f2:	f9b0 0000 	ldrsh.w	r0, [r0]
}
 80086f6:	4282      	cmp	r2, r0
 80086f8:	bfcc      	ite	gt
 80086fa:	2000      	movgt	r0, #0
 80086fc:	2001      	movle	r0, #1
 80086fe:	4770      	bx	lr

08008700 <circ_next>:
 * @param tmp same as in circ_init.
 */
static void circ_next(lv_point_t * c, lv_coord_t * tmp)
{

    if(*tmp <= 0) {
 8008700:	f9b1 3000 	ldrsh.w	r3, [r1]
 8008704:	2b00      	cmp	r3, #0
 8008706:	dd12      	ble.n	800872e <circ_next+0x2e>
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
    }
    else {
        (*tmp) += 2 * (c->y - c->x) + 5; /*Change for y -> y+1, x -> x-1*/
 8008708:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800870c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8008710:	eba2 020c 	sub.w	r2, r2, ip
 8008714:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008718:	3305      	adds	r3, #5
 800871a:	800b      	strh	r3, [r1, #0]
        c->x--;
 800871c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008720:	3b01      	subs	r3, #1
 8008722:	8003      	strh	r3, [r0, #0]
    }
    c->y++;
 8008724:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008728:	3301      	adds	r3, #1
 800872a:	8043      	strh	r3, [r0, #2]
}
 800872c:	4770      	bx	lr
        (*tmp) += 2 * c->y + 3; /*Change in decision criterion for y -> y+1*/
 800872e:	8842      	ldrh	r2, [r0, #2]
 8008730:	0052      	lsls	r2, r2, #1
 8008732:	b292      	uxth	r2, r2
 8008734:	4413      	add	r3, r2
 8008736:	3303      	adds	r3, #3
 8008738:	800b      	strh	r3, [r1, #0]
 800873a:	e7f3      	b.n	8008724 <circ_next+0x24>

0800873c <get_next_line>:
    lv_mem_buf_release(cir_x);
}

static lv_opa_t * get_next_line(_lv_draw_mask_radius_circle_dsc_t * c, lv_coord_t y, lv_coord_t * len,
                                lv_coord_t * x_start)
{
 800873c:	b410      	push	{r4}
    *len = c->opa_start_on_y[y + 1] - c->opa_start_on_y[y];
 800873e:	68c4      	ldr	r4, [r0, #12]
 8008740:	f101 0c01 	add.w	ip, r1, #1
 8008744:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8008748:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 800874c:	ebac 0c04 	sub.w	ip, ip, r4
 8008750:	f8a2 c000 	strh.w	ip, [r2]
    *x_start = c->x_start_on_y[y];
 8008754:	6882      	ldr	r2, [r0, #8]
 8008756:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800875a:	801a      	strh	r2, [r3, #0]
    return &c->cir_opa[c->opa_start_on_y[y]];
 800875c:	6842      	ldr	r2, [r0, #4]
 800875e:	68c3      	ldr	r3, [r0, #12]
 8008760:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 8008764:	4410      	add	r0, r2
 8008766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876a:	4770      	bx	lr

0800876c <line_mask_flat>:
{
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4605      	mov	r5, r0
 8008770:	9c04      	ldr	r4, [sp, #16]
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
 8008772:	69e0      	ldr	r0, [r4, #28]
 8008774:	fb01 fc00 	mul.w	ip, r1, r0
 8008778:	ea4f 2cac 	mov.w	ip, ip, asr #10
    if(p->yx_steep > 0) {
 800877c:	2800      	cmp	r0, #0
 800877e:	dd08      	ble.n	8008792 <line_mask_flat+0x26>
        if(y_at_x > abs_y) {
 8008780:	4562      	cmp	r2, ip
 8008782:	da0f      	bge.n	80087a4 <line_mask_flat+0x38>
            if(p->inv) {
 8008784:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008788:	f010 0002 	ands.w	r0, r0, #2
 800878c:	d000      	beq.n	8008790 <line_mask_flat+0x24>
                return LV_DRAW_MASK_RES_FULL_COVER;
 800878e:	2001      	movs	r0, #1
}
 8008790:	bd70      	pop	{r4, r5, r6, pc}
        if(y_at_x < abs_y) {
 8008792:	4562      	cmp	r2, ip
 8008794:	dd06      	ble.n	80087a4 <line_mask_flat+0x38>
            if(p->inv) {
 8008796:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800879a:	f010 0002 	ands.w	r0, r0, #2
 800879e:	d0f7      	beq.n	8008790 <line_mask_flat+0x24>
                return LV_DRAW_MASK_RES_FULL_COVER;
 80087a0:	2001      	movs	r0, #1
 80087a2:	e7f5      	b.n	8008790 <line_mask_flat+0x24>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
 80087a4:	eb01 0c03 	add.w	ip, r1, r3
 80087a8:	fb0c fc00 	mul.w	ip, ip, r0
 80087ac:	ea4f 2cac 	mov.w	ip, ip, asr #10
    if(p->yx_steep > 0) {
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dd09      	ble.n	80087c8 <line_mask_flat+0x5c>
        if(y_at_x < abs_y) {
 80087b4:	4562      	cmp	r2, ip
 80087b6:	dd11      	ble.n	80087dc <line_mask_flat+0x70>
            if(p->inv) {
 80087b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80087bc:	f013 0f02 	tst.w	r3, #2
 80087c0:	f000 80d2 	beq.w	8008968 <line_mask_flat+0x1fc>
                return LV_DRAW_MASK_RES_TRANSP;
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7e3      	b.n	8008790 <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
 80087c8:	4562      	cmp	r2, ip
 80087ca:	da07      	bge.n	80087dc <line_mask_flat+0x70>
            if(p->inv) {
 80087cc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80087d0:	f013 0f02 	tst.w	r3, #2
 80087d4:	f000 80ca 	beq.w	800896c <line_mask_flat+0x200>
                return LV_DRAW_MASK_RES_TRANSP;
 80087d8:	2000      	movs	r0, #0
 80087da:	e7d9      	b.n	8008790 <line_mask_flat+0x24>
    if(p->yx_steep > 0) xe = ((abs_y * 256) * p->xy_steep) >> 10;
 80087dc:	2800      	cmp	r0, #0
 80087de:	dd38      	ble.n	8008852 <line_mask_flat+0xe6>
 80087e0:	69a0      	ldr	r0, [r4, #24]
 80087e2:	fb00 f202 	mul.w	r2, r0, r2
 80087e6:	f342 0295 	sbfx	r2, r2, #2, #22
    int32_t xei = xe >> 8;
 80087ea:	1216      	asrs	r6, r2, #8
    if(xef == 0) px_h = 255;
 80087ec:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 80087f0:	d035      	beq.n	800885e <line_mask_flat+0xf2>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
 80087f2:	f1c2 0cff 	rsb	ip, r2, #255	@ 0xff
 80087f6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80087f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80087fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8008800:	f1cc 0cff 	rsb	ip, ip, #255	@ 0xff
    int32_t k = xei - abs_x;
 8008804:	1a71      	subs	r1, r6, r1
    if(xef) {
 8008806:	2a00      	cmp	r2, #0
 8008808:	d05f      	beq.n	80088ca <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
 800880a:	2900      	cmp	r1, #0
 800880c:	db1f      	blt.n	800884e <line_mask_flat+0xe2>
 800880e:	428b      	cmp	r3, r1
 8008810:	dd1d      	ble.n	800884e <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8008812:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8008816:	f1cc 00ff 	rsb	r0, ip, #255	@ 0xff
 800881a:	fb00 f202 	mul.w	r2, r0, r2
 800881e:	f3c2 2247 	ubfx	r2, r2, #9, #8
 8008822:	43d0      	mvns	r0, r2
 8008824:	b2c0      	uxtb	r0, r0
            if(p->inv) m = 255 - m;
 8008826:	f894 6028 	ldrb.w	r6, [r4, #40]	@ 0x28
 800882a:	f016 0f02 	tst.w	r6, #2
 800882e:	d100      	bne.n	8008832 <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
 8008830:	4602      	mov	r2, r0
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8008832:	5c68      	ldrb	r0, [r5, r1]


static inline lv_opa_t LV_ATTRIBUTE_FAST_MEM mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008834:	2afc      	cmp	r2, #252	@ 0xfc
 8008836:	d809      	bhi.n	800884c <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008838:	2a02      	cmp	r2, #2
 800883a:	d913      	bls.n	8008864 <line_mask_flat+0xf8>

    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800883c:	fb00 f202 	mul.w	r2, r0, r2
 8008840:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8008844:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 8008848:	f3c2 50c7 	ubfx	r0, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800884c:	5468      	strb	r0, [r5, r1]
        k++;
 800884e:	1c4a      	adds	r2, r1, #1
 8008850:	e012      	b.n	8008878 <line_mask_flat+0x10c>
    else xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 8008852:	69a0      	ldr	r0, [r4, #24]
 8008854:	fb02 0000 	mla	r0, r2, r0, r0
 8008858:	f340 0295 	sbfx	r2, r0, #2, #22
 800885c:	e7c5      	b.n	80087ea <line_mask_flat+0x7e>
    if(xef == 0) px_h = 255;
 800885e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8008862:	e7cf      	b.n	8008804 <line_mask_flat+0x98>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008864:	2000      	movs	r0, #0
 8008866:	e7f1      	b.n	800884c <line_mask_flat+0xe0>
 8008868:	2000      	movs	r0, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
 800886a:	7030      	strb	r0, [r6, #0]
        px_h -= p->spx;
 800886c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800886e:	ebac 0c00 	sub.w	ip, ip, r0
        k++;
 8008872:	3201      	adds	r2, #1
        if(k >= len) break;
 8008874:	4293      	cmp	r3, r2
 8008876:	dd2a      	ble.n	80088ce <line_mask_flat+0x162>
    while(px_h > p->spx) {
 8008878:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800887a:	4560      	cmp	r0, ip
 800887c:	da27      	bge.n	80088ce <line_mask_flat+0x162>
        if(k >= 0 && k < len) {
 800887e:	2a00      	cmp	r2, #0
 8008880:	dbf4      	blt.n	800886c <line_mask_flat+0x100>
 8008882:	4293      	cmp	r3, r2
 8008884:	ddf2      	ble.n	800886c <line_mask_flat+0x100>
            m = px_h - (p->spx >> 1);
 8008886:	fa5f fe8c 	uxtb.w	lr, ip
 800888a:	f3c0 0047 	ubfx	r0, r0, #1, #8
 800888e:	ebae 0e00 	sub.w	lr, lr, r0
 8008892:	fa5f fe8e 	uxtb.w	lr, lr
            if(p->inv) m = 255 - m;
 8008896:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 800889a:	f010 0f02 	tst.w	r0, #2
 800889e:	d003      	beq.n	80088a8 <line_mask_flat+0x13c>
 80088a0:	ea6f 0e0e 	mvn.w	lr, lr
 80088a4:	fa5f fe8e 	uxtb.w	lr, lr
            mask_buf[k] = mask_mix(mask_buf[k], m);
 80088a8:	18ae      	adds	r6, r5, r2
 80088aa:	5ca8      	ldrb	r0, [r5, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 80088ac:	f1be 0ffc 	cmp.w	lr, #252	@ 0xfc
 80088b0:	d8db      	bhi.n	800886a <line_mask_flat+0xfe>
    if(mask_new <= LV_OPA_MIN) return 0;
 80088b2:	f1be 0f02 	cmp.w	lr, #2
 80088b6:	d9d7      	bls.n	8008868 <line_mask_flat+0xfc>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 80088b8:	fb0e f000 	mul.w	r0, lr, r0
 80088bc:	eb00 2e00 	add.w	lr, r0, r0, lsl #8
 80088c0:	eb00 10ce 	add.w	r0, r0, lr, lsl #7
 80088c4:	f3c0 50c7 	ubfx	r0, r0, #23, #8
 80088c8:	e7cf      	b.n	800886a <line_mask_flat+0xfe>
    int32_t k = xei - abs_x;
 80088ca:	460a      	mov	r2, r1
 80088cc:	e7d4      	b.n	8008878 <line_mask_flat+0x10c>
    if(k < len && k >= 0) {
 80088ce:	4293      	cmp	r3, r2
 80088d0:	dd26      	ble.n	8008920 <line_mask_flat+0x1b4>
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	db24      	blt.n	8008920 <line_mask_flat+0x1b4>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
 80088d6:	69a0      	ldr	r0, [r4, #24]
 80088d8:	fb0c f000 	mul.w	r0, ip, r0
 80088dc:	1280      	asrs	r0, r0, #10
        m = (x_inters * px_h) >> 9;
 80088de:	fb00 fc0c 	mul.w	ip, r0, ip
 80088e2:	f3cc 2c47 	ubfx	ip, ip, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
 80088e6:	69e0      	ldr	r0, [r4, #28]
 80088e8:	2800      	cmp	r0, #0
 80088ea:	db24      	blt.n	8008936 <line_mask_flat+0x1ca>
        if(p->inv) m = 255 - m;
 80088ec:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80088f0:	f010 0f02 	tst.w	r0, #2
 80088f4:	d003      	beq.n	80088fe <line_mask_flat+0x192>
 80088f6:	ea6f 0c0c 	mvn.w	ip, ip
 80088fa:	fa5f fc8c 	uxtb.w	ip, ip
        mask_buf[k] = mask_mix(mask_buf[k], m);
 80088fe:	18ae      	adds	r6, r5, r2
 8008900:	5ca8      	ldrb	r0, [r5, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008902:	f1bc 0ffc 	cmp.w	ip, #252	@ 0xfc
 8008906:	d80a      	bhi.n	800891e <line_mask_flat+0x1b2>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008908:	f1bc 0f02 	cmp.w	ip, #2
 800890c:	d918      	bls.n	8008940 <line_mask_flat+0x1d4>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 800890e:	fb0c f000 	mul.w	r0, ip, r0
 8008912:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
 8008916:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
 800891a:	f3c0 50c7 	ubfx	r0, r0, #23, #8
        mask_buf[k] = mask_mix(mask_buf[k], m);
 800891e:	7030      	strb	r0, [r6, #0]
    if(p->inv) {
 8008920:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008924:	f010 0002 	ands.w	r0, r0, #2
 8008928:	d011      	beq.n	800894e <line_mask_flat+0x1e2>
        if(k > len) {
 800892a:	428b      	cmp	r3, r1
 800892c:	db20      	blt.n	8008970 <line_mask_flat+0x204>
        if(k >= 0) {
 800892e:	2900      	cmp	r1, #0
 8008930:	da08      	bge.n	8008944 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
 8008932:	2002      	movs	r0, #2
 8008934:	e72c      	b.n	8008790 <line_mask_flat+0x24>
        if(p->yx_steep < 0) m = 255 - m;
 8008936:	ea6f 0c0c 	mvn.w	ip, ip
 800893a:	fa5f fc8c 	uxtb.w	ip, ip
 800893e:	e7d5      	b.n	80088ec <line_mask_flat+0x180>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008940:	2000      	movs	r0, #0
 8008942:	e7ec      	b.n	800891e <line_mask_flat+0x1b2>
            lv_memset_00(&mask_buf[0], k);
 8008944:	4628      	mov	r0, r5
 8008946:	f00e f9bd 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 800894a:	2002      	movs	r0, #2
 800894c:	e720      	b.n	8008790 <line_mask_flat+0x24>
        if(k < 0) {
 800894e:	3201      	adds	r2, #1
 8008950:	f53f af1e 	bmi.w	8008790 <line_mask_flat+0x24>
        if(k <= len) {
 8008954:	4293      	cmp	r3, r2
 8008956:	da01      	bge.n	800895c <line_mask_flat+0x1f0>
    return LV_DRAW_MASK_RES_CHANGED;
 8008958:	2002      	movs	r0, #2
 800895a:	e719      	b.n	8008790 <line_mask_flat+0x24>
            lv_memset_00(&mask_buf[k], len - k);
 800895c:	1a99      	subs	r1, r3, r2
 800895e:	18a8      	adds	r0, r5, r2
 8008960:	f00e f9b0 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008964:	2002      	movs	r0, #2
 8008966:	e713      	b.n	8008790 <line_mask_flat+0x24>
                return LV_DRAW_MASK_RES_FULL_COVER;
 8008968:	2001      	movs	r0, #1
 800896a:	e711      	b.n	8008790 <line_mask_flat+0x24>
                return LV_DRAW_MASK_RES_FULL_COVER;
 800896c:	2001      	movs	r0, #1
 800896e:	e70f      	b.n	8008790 <line_mask_flat+0x24>
            return LV_DRAW_MASK_RES_TRANSP;
 8008970:	2000      	movs	r0, #0
 8008972:	e70d      	b.n	8008790 <line_mask_flat+0x24>

08008974 <line_mask_steep>:
{
 8008974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008976:	4684      	mov	ip, r0
 8008978:	9c06      	ldr	r4, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800897a:	69a0      	ldr	r0, [r4, #24]
 800897c:	fb02 f500 	mul.w	r5, r2, r0
 8008980:	ea4f 2ea5 	mov.w	lr, r5, asr #10
    if(p->xy_steep > 0) x_at_y++;
 8008984:	2800      	cmp	r0, #0
 8008986:	dd0a      	ble.n	800899e <line_mask_steep+0x2a>
 8008988:	f10e 0601 	add.w	r6, lr, #1
    if(x_at_y < abs_x) {
 800898c:	42b1      	cmp	r1, r6
 800898e:	dd08      	ble.n	80089a2 <line_mask_steep+0x2e>
        if(p->inv) {
 8008990:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008994:	f010 0002 	ands.w	r0, r0, #2
 8008998:	d000      	beq.n	800899c <line_mask_steep+0x28>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800899a:	2001      	movs	r0, #1
}
 800899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
 800899e:	4676      	mov	r6, lr
 80089a0:	e7f4      	b.n	800898c <line_mask_steep+0x18>
    if(x_at_y > abs_x + len) {
 80089a2:	18ce      	adds	r6, r1, r3
 80089a4:	4576      	cmp	r6, lr
 80089a6:	da07      	bge.n	80089b8 <line_mask_steep+0x44>
        if(p->inv) {
 80089a8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80089ac:	f013 0f02 	tst.w	r3, #2
 80089b0:	f000 814d 	beq.w	8008c4e <line_mask_steep+0x2da>
            return LV_DRAW_MASK_RES_TRANSP;
 80089b4:	2000      	movs	r0, #0
 80089b6:	e7f1      	b.n	800899c <line_mask_steep+0x28>
    int32_t xsi = xs >> 8;
 80089b8:	f345 2e8d 	sbfx	lr, r5, #10, #14
    int32_t xsf = xs & 0xFF;
 80089bc:	f3c5 0587 	ubfx	r5, r5, #2, #8
    int32_t xe = (((abs_y + 1) * 256) * p->xy_steep) >> 10;
 80089c0:	fb02 0200 	mla	r2, r2, r0, r0
    int32_t xei = xe >> 8;
 80089c4:	f342 278d 	sbfx	r7, r2, #10, #14
    int32_t xef = xe & 0xFF;
 80089c8:	f3c2 0287 	ubfx	r2, r2, #2, #8
    k = xsi - abs_x;
 80089cc:	ebae 0601 	sub.w	r6, lr, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 80089d0:	45be      	cmp	lr, r7
 80089d2:	d001      	beq.n	80089d8 <line_mask_steep+0x64>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	db63      	blt.n	8008aa0 <line_mask_steep+0x12c>
    if(xsi == xei) {
 80089d8:	45be      	cmp	lr, r7
 80089da:	d067      	beq.n	8008aac <line_mask_steep+0x138>
        if(p->xy_steep < 0) {
 80089dc:	2800      	cmp	r0, #0
 80089de:	f2c0 80ab 	blt.w	8008b38 <line_mask_steep+0x1c4>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
 80089e2:	f1c5 05ff 	rsb	r5, r5, #255	@ 0xff
 80089e6:	69e2      	ldr	r2, [r4, #28]
 80089e8:	fb05 f202 	mul.w	r2, r5, r2
 80089ec:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	db1f      	blt.n	8008a32 <line_mask_steep+0xbe>
 80089f2:	42b3      	cmp	r3, r6
 80089f4:	dd1d      	ble.n	8008a32 <line_mask_steep+0xbe>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 80089f6:	fb02 f505 	mul.w	r5, r2, r5
 80089fa:	f3c5 2547 	ubfx	r5, r5, #9, #8
 80089fe:	43e8      	mvns	r0, r5
 8008a00:	b2c0      	uxtb	r0, r0
                if(p->inv) m = 255 - m;
 8008a02:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8008a06:	f017 0f02 	tst.w	r7, #2
 8008a0a:	d100      	bne.n	8008a0e <line_mask_steep+0x9a>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
 8008a0c:	4605      	mov	r5, r0
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008a0e:	eb0c 0706 	add.w	r7, ip, r6
 8008a12:	f81c 0006 	ldrb.w	r0, [ip, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008a16:	2dfc      	cmp	r5, #252	@ 0xfc
 8008a18:	d80a      	bhi.n	8008a30 <line_mask_steep+0xbc>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008a1a:	2d02      	cmp	r5, #2
 8008a1c:	f240 80fd 	bls.w	8008c1a <line_mask_steep+0x2a6>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008a20:	fb05 f000 	mul.w	r0, r5, r0
 8008a24:	eb00 2500 	add.w	r5, r0, r0, lsl #8
 8008a28:	eb00 10c5 	add.w	r0, r0, r5, lsl #7
 8008a2c:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008a30:	7038      	strb	r0, [r7, #0]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
 8008a32:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8008a36:	69a0      	ldr	r0, [r4, #24]
 8008a38:	fb02 f000 	mul.w	r0, r2, r0
 8008a3c:	1280      	asrs	r0, r0, #10
            if(k >= 0 && k < len) {
 8008a3e:	1c75      	adds	r5, r6, #1
 8008a40:	d41d      	bmi.n	8008a7e <line_mask_steep+0x10a>
 8008a42:	42ab      	cmp	r3, r5
 8008a44:	dd1b      	ble.n	8008a7e <line_mask_steep+0x10a>
                m = ((255 - y_inters) * x_inters) >> 9;
 8008a46:	fb00 f202 	mul.w	r2, r0, r2
 8008a4a:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
 8008a4e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008a52:	f010 0f02 	tst.w	r0, #2
 8008a56:	d001      	beq.n	8008a5c <line_mask_steep+0xe8>
 8008a58:	43d2      	mvns	r2, r2
 8008a5a:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008a5c:	f81c 0005 	ldrb.w	r0, [ip, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008a60:	2afc      	cmp	r2, #252	@ 0xfc
 8008a62:	d80a      	bhi.n	8008a7a <line_mask_steep+0x106>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008a64:	2a02      	cmp	r2, #2
 8008a66:	f240 80da 	bls.w	8008c1e <line_mask_steep+0x2aa>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008a6a:	fb02 f000 	mul.w	r0, r2, r0
 8008a6e:	eb00 2200 	add.w	r2, r0, r0, lsl #8
 8008a72:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 8008a76:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008a7a:	f80c 0005 	strb.w	r0, [ip, r5]
            k++;
 8008a7e:	3602      	adds	r6, #2
            if(p->inv) {
 8008a80:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008a84:	f010 0002 	ands.w	r0, r0, #2
 8008a88:	f000 80d0 	beq.w	8008c2c <line_mask_steep+0x2b8>
                k = xsi - abs_x;
 8008a8c:	ebae 0101 	sub.w	r1, lr, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8008a90:	428b      	cmp	r3, r1
 8008a92:	f2c0 80e4 	blt.w	8008c5e <line_mask_steep+0x2ea>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8008a96:	2900      	cmp	r1, #0
 8008a98:	f280 80c3 	bge.w	8008c22 <line_mask_steep+0x2ae>
    return LV_DRAW_MASK_RES_CHANGED;
 8008a9c:	2002      	movs	r0, #2
 8008a9e:	e77d      	b.n	800899c <line_mask_steep+0x28>
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	d199      	bne.n	80089d8 <line_mask_steep+0x64>
        k--;
 8008aa4:	3e01      	subs	r6, #1
        xsi = xei;
 8008aa6:	46be      	mov	lr, r7
        xsf = 0xFF;
 8008aa8:	25ff      	movs	r5, #255	@ 0xff
 8008aaa:	e795      	b.n	80089d8 <line_mask_steep+0x64>
        if(k >= 0 && k < len) {
 8008aac:	2e00      	cmp	r6, #0
 8008aae:	db1c      	blt.n	8008aea <line_mask_steep+0x176>
 8008ab0:	42b3      	cmp	r3, r6
 8008ab2:	dd1a      	ble.n	8008aea <line_mask_steep+0x176>
            m = (xsf + xef) >> 1;
 8008ab4:	442a      	add	r2, r5
 8008ab6:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
 8008aba:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008abe:	f010 0f02 	tst.w	r0, #2
 8008ac2:	d001      	beq.n	8008ac8 <line_mask_steep+0x154>
 8008ac4:	43d2      	mvns	r2, r2
 8008ac6:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8008ac8:	eb0c 0506 	add.w	r5, ip, r6
 8008acc:	f81c 0006 	ldrb.w	r0, [ip, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008ad0:	2afc      	cmp	r2, #252	@ 0xfc
 8008ad2:	d809      	bhi.n	8008ae8 <line_mask_steep+0x174>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008ad4:	2a02      	cmp	r2, #2
 8008ad6:	d917      	bls.n	8008b08 <line_mask_steep+0x194>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008ad8:	fb00 f202 	mul.w	r2, r0, r2
 8008adc:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8008ae0:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 8008ae4:	f3c2 50c7 	ubfx	r0, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
 8008ae8:	7028      	strb	r0, [r5, #0]
        k++;
 8008aea:	3601      	adds	r6, #1
        if(p->inv) {
 8008aec:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008af0:	f010 0002 	ands.w	r0, r0, #2
 8008af4:	d00f      	beq.n	8008b16 <line_mask_steep+0x1a2>
            k = xsi - abs_x;
 8008af6:	ebae 0101 	sub.w	r1, lr, r1
            if(k >= len) {
 8008afa:	428b      	cmp	r3, r1
 8008afc:	f340 80a9 	ble.w	8008c52 <line_mask_steep+0x2de>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8008b00:	2900      	cmp	r1, #0
 8008b02:	da03      	bge.n	8008b0c <line_mask_steep+0x198>
    return LV_DRAW_MASK_RES_CHANGED;
 8008b04:	2002      	movs	r0, #2
 8008b06:	e749      	b.n	800899c <line_mask_steep+0x28>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7ed      	b.n	8008ae8 <line_mask_steep+0x174>
            if(k >= 0) lv_memset_00(&mask_buf[0], k);
 8008b0c:	4660      	mov	r0, ip
 8008b0e:	f00e f8d9 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008b12:	2002      	movs	r0, #2
 8008b14:	e742      	b.n	800899c <line_mask_steep+0x28>
            if(k > len) k = len;
 8008b16:	42b3      	cmp	r3, r6
 8008b18:	da00      	bge.n	8008b1c <line_mask_steep+0x1a8>
 8008b1a:	461e      	mov	r6, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8008b1c:	2e00      	cmp	r6, #0
 8008b1e:	f43f af3d 	beq.w	800899c <line_mask_steep+0x28>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	dc01      	bgt.n	8008b2a <line_mask_steep+0x1b6>
    return LV_DRAW_MASK_RES_CHANGED;
 8008b26:	2002      	movs	r0, #2
 8008b28:	e738      	b.n	800899c <line_mask_steep+0x28>
            else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8008b2a:	1b99      	subs	r1, r3, r6
 8008b2c:	eb0c 0006 	add.w	r0, ip, r6
 8008b30:	f00e f8c8 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008b34:	2002      	movs	r0, #2
 8008b36:	e731      	b.n	800899c <line_mask_steep+0x28>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
 8008b38:	69e0      	ldr	r0, [r4, #28]
 8008b3a:	4240      	negs	r0, r0
 8008b3c:	fb05 f000 	mul.w	r0, r5, r0
 8008b40:	1280      	asrs	r0, r0, #10
            if(k >= 0 && k < len) {
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	db1d      	blt.n	8008b82 <line_mask_steep+0x20e>
 8008b46:	42b3      	cmp	r3, r6
 8008b48:	dd1b      	ble.n	8008b82 <line_mask_steep+0x20e>
                m = (y_inters * xsf) >> 9;
 8008b4a:	fb00 f505 	mul.w	r5, r0, r5
 8008b4e:	f3c5 2547 	ubfx	r5, r5, #9, #8
                if(p->inv) m = 255 - m;
 8008b52:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8008b56:	f012 0f02 	tst.w	r2, #2
 8008b5a:	d001      	beq.n	8008b60 <line_mask_steep+0x1ec>
 8008b5c:	43ed      	mvns	r5, r5
 8008b5e:	b2ed      	uxtb	r5, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008b60:	eb0c 0706 	add.w	r7, ip, r6
 8008b64:	f81c 2006 	ldrb.w	r2, [ip, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008b68:	2dfc      	cmp	r5, #252	@ 0xfc
 8008b6a:	d809      	bhi.n	8008b80 <line_mask_steep+0x20c>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008b6c:	2d02      	cmp	r5, #2
 8008b6e:	d93e      	bls.n	8008bee <line_mask_steep+0x27a>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008b70:	fb05 f202 	mul.w	r2, r5, r2
 8008b74:	eb02 2502 	add.w	r5, r2, r2, lsl #8
 8008b78:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
 8008b7c:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008b80:	703a      	strb	r2, [r7, #0]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
 8008b82:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8008b86:	69a2      	ldr	r2, [r4, #24]
 8008b88:	4252      	negs	r2, r2
 8008b8a:	fb00 f202 	mul.w	r2, r0, r2
 8008b8e:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
 8008b90:	1e75      	subs	r5, r6, #1
 8008b92:	d41d      	bmi.n	8008bd0 <line_mask_steep+0x25c>
 8008b94:	42ab      	cmp	r3, r5
 8008b96:	dd1b      	ble.n	8008bd0 <line_mask_steep+0x25c>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8008b98:	fb02 f000 	mul.w	r0, r2, r0
 8008b9c:	f3c0 2047 	ubfx	r0, r0, #9, #8
 8008ba0:	43c2      	mvns	r2, r0
 8008ba2:	b2d2      	uxtb	r2, r2
                if(p->inv) m = 255 - m;
 8008ba4:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8008ba8:	f017 0f02 	tst.w	r7, #2
 8008bac:	d100      	bne.n	8008bb0 <line_mask_steep+0x23c>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
 8008bae:	4610      	mov	r0, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008bb0:	f81c 2005 	ldrb.w	r2, [ip, r5]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8008bb4:	28fc      	cmp	r0, #252	@ 0xfc
 8008bb6:	d809      	bhi.n	8008bcc <line_mask_steep+0x258>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008bb8:	2802      	cmp	r0, #2
 8008bba:	d91a      	bls.n	8008bf2 <line_mask_steep+0x27e>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8008bbc:	fb00 f202 	mul.w	r2, r0, r2
 8008bc0:	eb02 2002 	add.w	r0, r2, r2, lsl #8
 8008bc4:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 8008bc8:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
 8008bcc:	f80c 2005 	strb.w	r2, [ip, r5]
            k += 2;
 8008bd0:	3601      	adds	r6, #1
            if(p->inv) {
 8008bd2:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8008bd6:	f012 0f02 	tst.w	r2, #2
 8008bda:	d011      	beq.n	8008c00 <line_mask_steep+0x28c>
                k = xsi - abs_x - 1;
 8008bdc:	ebae 0101 	sub.w	r1, lr, r1
 8008be0:	3901      	subs	r1, #1
                if(k > len) k = len;
 8008be2:	428b      	cmp	r3, r1
 8008be4:	db37      	blt.n	8008c56 <line_mask_steep+0x2e2>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8008be6:	2900      	cmp	r1, #0
 8008be8:	dc05      	bgt.n	8008bf6 <line_mask_steep+0x282>
    return LV_DRAW_MASK_RES_CHANGED;
 8008bea:	2002      	movs	r0, #2
 8008bec:	e6d6      	b.n	800899c <line_mask_steep+0x28>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008bee:	2200      	movs	r2, #0
 8008bf0:	e7c6      	b.n	8008b80 <line_mask_steep+0x20c>
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	e7ea      	b.n	8008bcc <line_mask_steep+0x258>
                else if(k > 0) lv_memset_00(&mask_buf[0],  k);
 8008bf6:	4660      	mov	r0, ip
 8008bf8:	f00e f864 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008bfc:	2002      	movs	r0, #2
 8008bfe:	e6cd      	b.n	800899c <line_mask_steep+0x28>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	db2a      	blt.n	8008c5a <line_mask_steep+0x2e6>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8008c04:	2e00      	cmp	r6, #0
 8008c06:	da01      	bge.n	8008c0c <line_mask_steep+0x298>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c08:	2002      	movs	r0, #2
 8008c0a:	e6c7      	b.n	800899c <line_mask_steep+0x28>
                if(k >= 0) lv_memset_00(&mask_buf[k],  len - k);
 8008c0c:	1b99      	subs	r1, r3, r6
 8008c0e:	eb0c 0006 	add.w	r0, ip, r6
 8008c12:	f00e f857 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c16:	2002      	movs	r0, #2
 8008c18:	e6c0      	b.n	800899c <line_mask_steep+0x28>
    if(mask_new <= LV_OPA_MIN) return 0;
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	e708      	b.n	8008a30 <line_mask_steep+0xbc>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e72b      	b.n	8008a7a <line_mask_steep+0x106>
                if(k >= 0) lv_memset_00(&mask_buf[0],  k);
 8008c22:	4660      	mov	r0, ip
 8008c24:	f00e f84e 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c28:	2002      	movs	r0, #2
 8008c2a:	e6b7      	b.n	800899c <line_mask_steep+0x28>
                if(k > len) k = len;
 8008c2c:	42b3      	cmp	r3, r6
 8008c2e:	da00      	bge.n	8008c32 <line_mask_steep+0x2be>
 8008c30:	461e      	mov	r6, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	f43f aeb2 	beq.w	800899c <line_mask_steep+0x28>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8008c38:	2e00      	cmp	r6, #0
 8008c3a:	dc01      	bgt.n	8008c40 <line_mask_steep+0x2cc>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c3c:	2002      	movs	r0, #2
 8008c3e:	e6ad      	b.n	800899c <line_mask_steep+0x28>
                else if(k > 0) lv_memset_00(&mask_buf[k],  len - k);
 8008c40:	1b99      	subs	r1, r3, r6
 8008c42:	eb0c 0006 	add.w	r0, ip, r6
 8008c46:	f00e f83d 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c4a:	2002      	movs	r0, #2
 8008c4c:	e6a6      	b.n	800899c <line_mask_steep+0x28>
            return LV_DRAW_MASK_RES_FULL_COVER;
 8008c4e:	2001      	movs	r0, #1
 8008c50:	e6a4      	b.n	800899c <line_mask_steep+0x28>
                return LV_DRAW_MASK_RES_TRANSP;
 8008c52:	2000      	movs	r0, #0
 8008c54:	e6a2      	b.n	800899c <line_mask_steep+0x28>
    return LV_DRAW_MASK_RES_CHANGED;
 8008c56:	2002      	movs	r0, #2
 8008c58:	e6a0      	b.n	800899c <line_mask_steep+0x28>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
 8008c5a:	2001      	movs	r0, #1
 8008c5c:	e69e      	b.n	800899c <line_mask_steep+0x28>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e69c      	b.n	800899c <line_mask_steep+0x28>

08008c62 <lv_draw_mask_line>:
{
 8008c62:	b530      	push	{r4, r5, lr}
 8008c64:	b083      	sub	sp, #12
 8008c66:	4684      	mov	ip, r0
 8008c68:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
 8008c6a:	8aa0      	ldrh	r0, [r4, #20]
 8008c6c:	1a12      	subs	r2, r2, r0
 8008c6e:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
 8008c70:	8a60      	ldrh	r0, [r4, #18]
 8008c72:	1a09      	subs	r1, r1, r0
 8008c74:	b209      	sxth	r1, r1
    if(p->steep == 0) {
 8008c76:	6a25      	ldr	r5, [r4, #32]
 8008c78:	2d00      	cmp	r5, #0
 8008c7a:	d148      	bne.n	8008d0e <lv_draw_mask_line+0xac>
        if(p->flat) {
 8008c7c:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008c80:	f010 0f01 	tst.w	r0, #1
 8008c84:	d014      	beq.n	8008cb0 <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
 8008c86:	7c23      	ldrb	r3, [r4, #16]
 8008c88:	f013 0f02 	tst.w	r3, #2
 8008c8c:	d04f      	beq.n	8008d2e <lv_draw_mask_line+0xcc>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d005      	beq.n	8008ca2 <lv_draw_mask_line+0x40>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d14b      	bne.n	8008d32 <lv_draw_mask_line+0xd0>
 8008c9a:	2a00      	cmp	r2, #0
 8008c9c:	dd06      	ble.n	8008cac <lv_draw_mask_line+0x4a>
 8008c9e:	2001      	movs	r0, #1
 8008ca0:	e03e      	b.n	8008d20 <lv_draw_mask_line+0xbe>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008ca2:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ca6:	daf6      	bge.n	8008c96 <lv_draw_mask_line+0x34>
 8008ca8:	2001      	movs	r0, #1
 8008caa:	e039      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                return LV_DRAW_MASK_RES_TRANSP;
 8008cac:	2000      	movs	r0, #0
 8008cae:	e037      	b.n	8008d20 <lv_draw_mask_line+0xbe>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
 8008cb0:	7c22      	ldrb	r2, [r4, #16]
 8008cb2:	f012 0402 	ands.w	r4, r2, #2
 8008cb6:	d13e      	bne.n	8008d36 <lv_draw_mask_line+0xd4>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008cb8:	f002 0003 	and.w	r0, r2, #3
 8008cbc:	2801      	cmp	r0, #1
 8008cbe:	d009      	beq.n	8008cd4 <lv_draw_mask_line+0x72>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
 8008cc0:	b988      	cbnz	r0, 8008ce6 <lv_draw_mask_line+0x84>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008cc2:	18ca      	adds	r2, r1, r3
 8008cc4:	d439      	bmi.n	8008d3a <lv_draw_mask_line+0xd8>
                    int32_t k = - abs_x;
 8008cc6:	424c      	negs	r4, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	dc29      	bgt.n	8008d20 <lv_draw_mask_line+0xbe>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8008ccc:	42a3      	cmp	r3, r4
 8008cce:	dc04      	bgt.n	8008cda <lv_draw_mask_line+0x78>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8008cd0:	2002      	movs	r0, #2
 8008cd2:	e025      	b.n	8008d20 <lv_draw_mask_line+0xbe>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	ddf3      	ble.n	8008cc0 <lv_draw_mask_line+0x5e>
 8008cd8:	e022      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                    if(k >= 0 && k < len) lv_memset_00(&mask_buf[k], len - k);
 8008cda:	4611      	mov	r1, r2
 8008cdc:	eb0c 0004 	add.w	r0, ip, r4
 8008ce0:	f00d fff0 	bl	8016cc4 <lv_memset_00>
 8008ce4:	e7f4      	b.n	8008cd0 <lv_draw_mask_line+0x6e>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8008ce6:	42d9      	cmn	r1, r3
 8008ce8:	d429      	bmi.n	8008d3e <lv_draw_mask_line+0xdc>
                    int32_t k = - abs_x;
 8008cea:	424a      	negs	r2, r1
                    if(k < 0) k = 0;
 8008cec:	2900      	cmp	r1, #0
 8008cee:	dd03      	ble.n	8008cf8 <lv_draw_mask_line+0x96>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	dc03      	bgt.n	8008cfc <lv_draw_mask_line+0x9a>
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	e013      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                    int32_t k = - abs_x;
 8008cf8:	4615      	mov	r5, r2
 8008cfa:	e7f9      	b.n	8008cf0 <lv_draw_mask_line+0x8e>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 8008cfc:	2d00      	cmp	r5, #0
 8008cfe:	da01      	bge.n	8008d04 <lv_draw_mask_line+0xa2>
                    return  LV_DRAW_MASK_RES_CHANGED;
 8008d00:	2002      	movs	r0, #2
 8008d02:	e00d      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                    else if(k >= 0 && k < len) lv_memset_00(&mask_buf[0], k);
 8008d04:	4629      	mov	r1, r5
 8008d06:	4660      	mov	r0, ip
 8008d08:	f00d ffdc 	bl	8016cc4 <lv_memset_00>
 8008d0c:	e7f8      	b.n	8008d00 <lv_draw_mask_line+0x9e>
    if(p->flat) {
 8008d0e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8008d12:	f010 0f01 	tst.w	r0, #1
 8008d16:	d005      	beq.n	8008d24 <lv_draw_mask_line+0xc2>
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
 8008d18:	9400      	str	r4, [sp, #0]
 8008d1a:	4660      	mov	r0, ip
 8008d1c:	f7ff fd26 	bl	800876c <line_mask_flat>
}
 8008d20:	b003      	add	sp, #12
 8008d22:	bd30      	pop	{r4, r5, pc}
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
 8008d24:	9400      	str	r4, [sp, #0]
 8008d26:	4660      	mov	r0, ip
 8008d28:	f7ff fe24 	bl	8008974 <line_mask_steep>
 8008d2c:	e7f8      	b.n	8008d20 <lv_draw_mask_line+0xbe>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
 8008d2e:	2001      	movs	r0, #1
 8008d30:	e7f6      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                return LV_DRAW_MASK_RES_TRANSP;
 8008d32:	2000      	movs	r0, #0
 8008d34:	e7f4      	b.n	8008d20 <lv_draw_mask_line+0xbe>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7f2      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	e7f0      	b.n	8008d20 <lv_draw_mask_line+0xbe>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
 8008d3e:	4620      	mov	r0, r4
 8008d40:	e7ee      	b.n	8008d20 <lv_draw_mask_line+0xbe>

08008d42 <lv_draw_mask_angle>:
{
 8008d42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	4681      	mov	r9, r0
 8008d4a:	460e      	mov	r6, r1
 8008d4c:	4615      	mov	r5, r2
 8008d4e:	4698      	mov	r8, r3
 8008d50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    int32_t rel_y = abs_y - p->cfg.vertex_p.y;
 8008d52:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008d56:	1ad7      	subs	r7, r2, r3
    int32_t rel_x = abs_x - p->cfg.vertex_p.x;
 8008d58:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8008d5c:	1a89      	subs	r1, r1, r2
    if(p->cfg.start_angle < 180 && p->cfg.end_angle < 180 &&
 8008d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d62:	2ab3      	cmp	r2, #179	@ 0xb3
 8008d64:	f300 809c 	bgt.w	8008ea0 <lv_draw_mask_angle+0x15e>
 8008d68:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8008d6c:	28b3      	cmp	r0, #179	@ 0xb3
 8008d6e:	f300 8097 	bgt.w	8008ea0 <lv_draw_mask_angle+0x15e>
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	f000 8094 	beq.w	8008ea0 <lv_draw_mask_angle+0x15e>
       p->cfg.start_angle != 0  && p->cfg.end_angle != 0 &&
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f000 8091 	beq.w	8008ea0 <lv_draw_mask_angle+0x15e>
 8008d7e:	4282      	cmp	r2, r0
 8008d80:	f340 808e 	ble.w	8008ea0 <lv_draw_mask_angle+0x15e>
        if(abs_y < p->cfg.vertex_p.y) {
 8008d84:	42ab      	cmp	r3, r5
 8008d86:	f300 818f 	bgt.w	80090a8 <lv_draw_mask_angle+0x366>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8008d8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008d8c:	fb07 f303 	mul.w	r3, r7, r3
 8008d90:	ea4f 2ca3 	mov.w	ip, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8008d94:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008d96:	fb07 3303 	mla	r3, r7, r3, r3
 8008d9a:	ea4f 2aa3 	mov.w	sl, r3, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008d9e:	b292      	uxth	r2, r2
 8008da0:	f2a2 130f 	subw	r3, r2, #271	@ 0x10f
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2b58      	cmp	r3, #88	@ 0x58
 8008da8:	d802      	bhi.n	8008db0 <lv_draw_mask_angle+0x6e>
 8008daa:	f1ba 0f00 	cmp.w	sl, #0
 8008dae:	db10      	blt.n	8008dd2 <lv_draw_mask_angle+0x90>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008db0:	1e53      	subs	r3, r2, #1
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b59      	cmp	r3, #89	@ 0x59
 8008db6:	d802      	bhi.n	8008dbe <lv_draw_mask_angle+0x7c>
 8008db8:	f1ba 0f00 	cmp.w	sl, #0
 8008dbc:	db25      	blt.n	8008e0a <lv_draw_mask_angle+0xc8>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8008dbe:	3a5b      	subs	r2, #91	@ 0x5b
 8008dc0:	b293      	uxth	r3, r2
 8008dc2:	2bb2      	cmp	r3, #178	@ 0xb2
 8008dc4:	d807      	bhi.n	8008dd6 <lv_draw_mask_angle+0x94>
 8008dc6:	f1ba 0f00 	cmp.w	sl, #0
 8008dca:	dd04      	ble.n	8008dd6 <lv_draw_mask_angle+0x94>
 8008dcc:	f04f 0a00 	mov.w	sl, #0
 8008dd0:	e001      	b.n	8008dd6 <lv_draw_mask_angle+0x94>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008dd2:	f04f 0a00 	mov.w	sl, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008dd6:	b280      	uxth	r0, r0
 8008dd8:	f2a0 130f 	subw	r3, r0, #271	@ 0x10f
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b58      	cmp	r3, #88	@ 0x58
 8008de0:	d802      	bhi.n	8008de8 <lv_draw_mask_angle+0xa6>
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	db13      	blt.n	8008e10 <lv_draw_mask_angle+0xce>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008de8:	1e43      	subs	r3, r0, #1
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	2b59      	cmp	r3, #89	@ 0x59
 8008dee:	d802      	bhi.n	8008df6 <lv_draw_mask_angle+0xb4>
 8008df0:	f1ba 0f00 	cmp.w	sl, #0
 8008df4:	db36      	blt.n	8008e64 <lv_draw_mask_angle+0x122>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8008df6:	385b      	subs	r0, #91	@ 0x5b
 8008df8:	b283      	uxth	r3, r0
 8008dfa:	2bb2      	cmp	r3, #178	@ 0xb2
 8008dfc:	d80a      	bhi.n	8008e14 <lv_draw_mask_angle+0xd2>
 8008dfe:	f1ba 0f00 	cmp.w	sl, #0
 8008e02:	dd07      	ble.n	8008e14 <lv_draw_mask_angle+0xd2>
 8008e04:	f04f 0a00 	mov.w	sl, #0
 8008e08:	e004      	b.n	8008e14 <lv_draw_mask_angle+0xd2>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008e0a:	f04f 0a00 	mov.w	sl, #0
 8008e0e:	e7e2      	b.n	8008dd6 <lv_draw_mask_angle+0x94>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008e10:	f04f 0a00 	mov.w	sl, #0
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8008e14:	ebac 0c0a 	sub.w	ip, ip, sl
        int32_t tmp = start_angle_last + dist - rel_x;
 8008e18:	eb0a 0a6c 	add.w	sl, sl, ip, asr #1
 8008e1c:	ebaa 0a01 	sub.w	sl, sl, r1
        if(tmp > len) tmp = len;
 8008e20:	45d0      	cmp	r8, sl
 8008e22:	da00      	bge.n	8008e26 <lv_draw_mask_angle+0xe4>
 8008e24:	46c2      	mov	sl, r8
        if(tmp > 0) {
 8008e26:	f1ba 0f00 	cmp.w	sl, #0
 8008e2a:	dc1e      	bgt.n	8008e6a <lv_draw_mask_angle+0x128>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8008e2c:	2701      	movs	r7, #1
        if(tmp > len) tmp = len;
 8008e2e:	45d0      	cmp	r8, sl
 8008e30:	da00      	bge.n	8008e34 <lv_draw_mask_angle+0xf2>
 8008e32:	46c2      	mov	sl, r8
        if(tmp < 0) tmp = 0;
 8008e34:	f1ba 0f00 	cmp.w	sl, #0
 8008e38:	db29      	blt.n	8008e8e <lv_draw_mask_angle+0x14c>
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, &p->end_line);
 8008e3a:	44d1      	add	r9, sl
 8008e3c:	fa1f f38a 	uxth.w	r3, sl
 8008e40:	1999      	adds	r1, r3, r6
 8008e42:	eba8 0303 	sub.w	r3, r8, r3
 8008e46:	343c      	adds	r4, #60	@ 0x3c
 8008e48:	9400      	str	r4, [sp, #0]
 8008e4a:	b21b      	sxth	r3, r3
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	b209      	sxth	r1, r1
 8008e50:	4648      	mov	r0, r9
 8008e52:	f7ff ff06 	bl	8008c62 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8008e56:	4604      	mov	r4, r0
 8008e58:	b1e0      	cbz	r0, 8008e94 <lv_draw_mask_angle+0x152>
        if(res1 == res2) return res1;
 8008e5a:	42a7      	cmp	r7, r4
 8008e5c:	f000 8129 	beq.w	80090b2 <lv_draw_mask_angle+0x370>
        else return LV_DRAW_MASK_RES_CHANGED;
 8008e60:	2702      	movs	r7, #2
 8008e62:	e126      	b.n	80090b2 <lv_draw_mask_angle+0x370>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008e64:	f04f 0a00 	mov.w	sl, #0
 8008e68:	e7d4      	b.n	8008e14 <lv_draw_mask_angle+0xd2>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, &p->start_line);
 8008e6a:	f104 0310 	add.w	r3, r4, #16
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	fa0f f38a 	sxth.w	r3, sl
 8008e74:	462a      	mov	r2, r5
 8008e76:	4631      	mov	r1, r6
 8008e78:	4648      	mov	r0, r9
 8008e7a:	f7ff fef2 	bl	8008c62 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8008e7e:	4607      	mov	r7, r0
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d1d4      	bne.n	8008e2e <lv_draw_mask_angle+0xec>
                lv_memset_00(&mask_buf[0], tmp);
 8008e84:	4651      	mov	r1, sl
 8008e86:	4648      	mov	r0, r9
 8008e88:	f00d ff1c 	bl	8016cc4 <lv_memset_00>
 8008e8c:	e7cf      	b.n	8008e2e <lv_draw_mask_angle+0xec>
        if(tmp < 0) tmp = 0;
 8008e8e:	f04f 0a00 	mov.w	sl, #0
 8008e92:	e7d2      	b.n	8008e3a <lv_draw_mask_angle+0xf8>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8008e94:	eba8 010a 	sub.w	r1, r8, sl
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f00d ff13 	bl	8016cc4 <lv_memset_00>
 8008e9e:	e7dc      	b.n	8008e5a <lv_draw_mask_angle+0x118>
    else if(p->cfg.start_angle > 180 && p->cfg.end_angle > 180 && p->cfg.start_angle > p->cfg.end_angle) {
 8008ea0:	2ab4      	cmp	r2, #180	@ 0xb4
 8008ea2:	f340 8096 	ble.w	8008fd2 <lv_draw_mask_angle+0x290>
 8008ea6:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 8008eaa:	28b4      	cmp	r0, #180	@ 0xb4
 8008eac:	f340 8091 	ble.w	8008fd2 <lv_draw_mask_angle+0x290>
 8008eb0:	4282      	cmp	r2, r0
 8008eb2:	f340 808e 	ble.w	8008fd2 <lv_draw_mask_angle+0x290>
        if(abs_y > p->cfg.vertex_p.y) {
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	f2c0 80f8 	blt.w	80090ac <lv_draw_mask_angle+0x36a>
        int32_t end_angle_first = (rel_y * p->end_line.xy_steep) >> 10;
 8008ebc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ebe:	fb07 f303 	mul.w	r3, r7, r3
 8008ec2:	ea4f 2ca3 	mov.w	ip, r3, asr #10
        int32_t start_angle_last = ((rel_y + 1) * p->start_line.xy_steep) >> 10;
 8008ec6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008ec8:	fb07 3303 	mla	r3, r7, r3, r3
 8008ecc:	ea4f 2aa3 	mov.w	sl, r3, asr #10
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	f2a2 130f 	subw	r3, r2, #271	@ 0x10f
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b58      	cmp	r3, #88	@ 0x58
 8008eda:	d802      	bhi.n	8008ee2 <lv_draw_mask_angle+0x1a0>
 8008edc:	f1ba 0f00 	cmp.w	sl, #0
 8008ee0:	db10      	blt.n	8008f04 <lv_draw_mask_angle+0x1c2>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008ee2:	1e53      	subs	r3, r2, #1
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b59      	cmp	r3, #89	@ 0x59
 8008ee8:	d802      	bhi.n	8008ef0 <lv_draw_mask_angle+0x1ae>
 8008eea:	f1ba 0f00 	cmp.w	sl, #0
 8008eee:	db25      	blt.n	8008f3c <lv_draw_mask_angle+0x1fa>
        else if(p->cfg.start_angle > 90 && p->cfg.start_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8008ef0:	3a5b      	subs	r2, #91	@ 0x5b
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	2ab2      	cmp	r2, #178	@ 0xb2
 8008ef6:	d807      	bhi.n	8008f08 <lv_draw_mask_angle+0x1c6>
 8008ef8:	f1ba 0f00 	cmp.w	sl, #0
 8008efc:	dd04      	ble.n	8008f08 <lv_draw_mask_angle+0x1c6>
 8008efe:	f04f 0a00 	mov.w	sl, #0
 8008f02:	e001      	b.n	8008f08 <lv_draw_mask_angle+0x1c6>
        if(p->cfg.start_angle > 270 && p->cfg.start_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008f04:	f04f 0a00 	mov.w	sl, #0
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008f08:	b283      	uxth	r3, r0
 8008f0a:	f2a3 120f 	subw	r2, r3, #271	@ 0x10f
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	2a58      	cmp	r2, #88	@ 0x58
 8008f12:	d802      	bhi.n	8008f1a <lv_draw_mask_angle+0x1d8>
 8008f14:	f1ba 0f00 	cmp.w	sl, #0
 8008f18:	db13      	blt.n	8008f42 <lv_draw_mask_angle+0x200>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008f1a:	1e5a      	subs	r2, r3, #1
 8008f1c:	b292      	uxth	r2, r2
 8008f1e:	2a59      	cmp	r2, #89	@ 0x59
 8008f20:	d802      	bhi.n	8008f28 <lv_draw_mask_angle+0x1e6>
 8008f22:	f1ba 0f00 	cmp.w	sl, #0
 8008f26:	db36      	blt.n	8008f96 <lv_draw_mask_angle+0x254>
        else if(p->cfg.end_angle > 90 &&  p->cfg.end_angle < 270 && start_angle_last > 0) start_angle_last = 0;
 8008f28:	3b5b      	subs	r3, #91	@ 0x5b
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2bb2      	cmp	r3, #178	@ 0xb2
 8008f2e:	d80a      	bhi.n	8008f46 <lv_draw_mask_angle+0x204>
 8008f30:	f1ba 0f00 	cmp.w	sl, #0
 8008f34:	dd07      	ble.n	8008f46 <lv_draw_mask_angle+0x204>
 8008f36:	f04f 0a00 	mov.w	sl, #0
 8008f3a:	e004      	b.n	8008f46 <lv_draw_mask_angle+0x204>
        else if(p->cfg.start_angle > 0 && p->cfg.start_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008f3c:	f04f 0a00 	mov.w	sl, #0
 8008f40:	e7e2      	b.n	8008f08 <lv_draw_mask_angle+0x1c6>
        if(p->cfg.end_angle > 270 && p->cfg.end_angle <= 359 && start_angle_last < 0) start_angle_last = 0;
 8008f42:	f04f 0a00 	mov.w	sl, #0
        int32_t dist = (end_angle_first - start_angle_last) >> 1;
 8008f46:	ebac 0c0a 	sub.w	ip, ip, sl
        int32_t tmp = start_angle_last + dist - rel_x;
 8008f4a:	eb0a 0a6c 	add.w	sl, sl, ip, asr #1
 8008f4e:	ebaa 0a01 	sub.w	sl, sl, r1
        if(tmp > len) tmp = len;
 8008f52:	45d0      	cmp	r8, sl
 8008f54:	da00      	bge.n	8008f58 <lv_draw_mask_angle+0x216>
 8008f56:	46c2      	mov	sl, r8
        if(tmp > 0) {
 8008f58:	f1ba 0f00 	cmp.w	sl, #0
 8008f5c:	dc1e      	bgt.n	8008f9c <lv_draw_mask_angle+0x25a>
        lv_draw_mask_res_t res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8008f5e:	2701      	movs	r7, #1
        if(tmp > len) tmp = len;
 8008f60:	45d0      	cmp	r8, sl
 8008f62:	da00      	bge.n	8008f66 <lv_draw_mask_angle+0x224>
 8008f64:	46c2      	mov	sl, r8
        if(tmp < 0) tmp = 0;
 8008f66:	f1ba 0f00 	cmp.w	sl, #0
 8008f6a:	db29      	blt.n	8008fc0 <lv_draw_mask_angle+0x27e>
        res2 = lv_draw_mask_line(&mask_buf[tmp], abs_x + tmp, abs_y, len - tmp, (lv_draw_mask_line_param_t *)&p->start_line);
 8008f6c:	44d1      	add	r9, sl
 8008f6e:	fa1f f38a 	uxth.w	r3, sl
 8008f72:	1999      	adds	r1, r3, r6
 8008f74:	eba8 0303 	sub.w	r3, r8, r3
 8008f78:	3410      	adds	r4, #16
 8008f7a:	9400      	str	r4, [sp, #0]
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	462a      	mov	r2, r5
 8008f80:	b209      	sxth	r1, r1
 8008f82:	4648      	mov	r0, r9
 8008f84:	f7ff fe6d 	bl	8008c62 <lv_draw_mask_line>
        if(res2 == LV_DRAW_MASK_RES_TRANSP) {
 8008f88:	4604      	mov	r4, r0
 8008f8a:	b1e0      	cbz	r0, 8008fc6 <lv_draw_mask_angle+0x284>
        if(res1 == res2) return res1;
 8008f8c:	42a7      	cmp	r7, r4
 8008f8e:	f000 8090 	beq.w	80090b2 <lv_draw_mask_angle+0x370>
        else return LV_DRAW_MASK_RES_CHANGED;
 8008f92:	2702      	movs	r7, #2
 8008f94:	e08d      	b.n	80090b2 <lv_draw_mask_angle+0x370>
        else if(p->cfg.end_angle > 0 &&   p->cfg.end_angle <= 90 && start_angle_last < 0) start_angle_last = 0;
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	e7d4      	b.n	8008f46 <lv_draw_mask_angle+0x204>
            res1 = lv_draw_mask_line(&mask_buf[0], abs_x, abs_y, tmp, (lv_draw_mask_line_param_t *)&p->end_line);
 8008f9c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	fa0f f38a 	sxth.w	r3, sl
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4648      	mov	r0, r9
 8008fac:	f7ff fe59 	bl	8008c62 <lv_draw_mask_line>
            if(res1 == LV_DRAW_MASK_RES_TRANSP) {
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d1d4      	bne.n	8008f60 <lv_draw_mask_angle+0x21e>
                lv_memset_00(&mask_buf[0], tmp);
 8008fb6:	4651      	mov	r1, sl
 8008fb8:	4648      	mov	r0, r9
 8008fba:	f00d fe83 	bl	8016cc4 <lv_memset_00>
 8008fbe:	e7cf      	b.n	8008f60 <lv_draw_mask_angle+0x21e>
        if(tmp < 0) tmp = 0;
 8008fc0:	f04f 0a00 	mov.w	sl, #0
 8008fc4:	e7d2      	b.n	8008f6c <lv_draw_mask_angle+0x22a>
            lv_memset_00(&mask_buf[tmp], len - tmp);
 8008fc6:	eba8 010a 	sub.w	r1, r8, sl
 8008fca:	4648      	mov	r0, r9
 8008fcc:	f00d fe7a 	bl	8016cc4 <lv_memset_00>
 8008fd0:	e7dc      	b.n	8008f8c <lv_draw_mask_angle+0x24a>
        if(p->cfg.start_angle == 180) {
 8008fd2:	2ab4      	cmp	r2, #180	@ 0xb4
 8008fd4:	d005      	beq.n	8008fe2 <lv_draw_mask_angle+0x2a0>
        else if(p->cfg.start_angle == 0) {
 8008fd6:	b99a      	cbnz	r2, 8009000 <lv_draw_mask_angle+0x2be>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8008fd8:	42ab      	cmp	r3, r5
 8008fda:	dd27      	ble.n	800902c <lv_draw_mask_angle+0x2ea>
 8008fdc:	f04f 0a03 	mov.w	sl, #3
 8008fe0:	e003      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
            if(abs_y < p->cfg.vertex_p.y) res1 = LV_DRAW_MASK_RES_FULL_COVER;
 8008fe2:	42ab      	cmp	r3, r5
 8008fe4:	dd1f      	ble.n	8009026 <lv_draw_mask_angle+0x2e4>
 8008fe6:	f04f 0a01 	mov.w	sl, #1
        if(p->cfg.end_angle == 180) {
 8008fea:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8008fee:	2bb4      	cmp	r3, #180	@ 0xb4
 8008ff0:	d025      	beq.n	800903e <lv_draw_mask_angle+0x2fc>
        else if(p->cfg.end_angle == 0) {
 8008ff2:	bbbb      	cbnz	r3, 8009064 <lv_draw_mask_angle+0x322>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8008ff4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008ff8:	42ab      	cmp	r3, r5
 8008ffa:	dd4b      	ble.n	8009094 <lv_draw_mask_angle+0x352>
 8008ffc:	2701      	movs	r7, #1
 8008ffe:	e023      	b.n	8009048 <lv_draw_mask_angle+0x306>
        else if((p->cfg.start_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8009000:	2ab3      	cmp	r2, #179	@ 0xb3
 8009002:	dc01      	bgt.n	8009008 <lv_draw_mask_angle+0x2c6>
 8009004:	42ab      	cmp	r3, r5
 8009006:	dc14      	bgt.n	8009032 <lv_draw_mask_angle+0x2f0>
 8009008:	2ab4      	cmp	r2, #180	@ 0xb4
 800900a:	dd01      	ble.n	8009010 <lv_draw_mask_angle+0x2ce>
                (p->cfg.start_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 800900c:	42ab      	cmp	r3, r5
 800900e:	dd13      	ble.n	8009038 <lv_draw_mask_angle+0x2f6>
            res1 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->start_line);
 8009010:	f104 0310 	add.w	r3, r4, #16
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	4643      	mov	r3, r8
 8009018:	462a      	mov	r2, r5
 800901a:	4631      	mov	r1, r6
 800901c:	4648      	mov	r0, r9
 800901e:	f7ff fe20 	bl	8008c62 <lv_draw_mask_line>
 8009022:	4682      	mov	sl, r0
 8009024:	e7e1      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
            else res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8009026:	f04f 0a03 	mov.w	sl, #3
 800902a:	e7de      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
            else res1 = LV_DRAW_MASK_RES_FULL_COVER;
 800902c:	f04f 0a01 	mov.w	sl, #1
 8009030:	e7db      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
            res1 = LV_DRAW_MASK_RES_UNKNOWN;
 8009032:	f04f 0a03 	mov.w	sl, #3
 8009036:	e7d8      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
 8009038:	f04f 0a03 	mov.w	sl, #3
 800903c:	e7d5      	b.n	8008fea <lv_draw_mask_angle+0x2a8>
            if(abs_y < p->cfg.vertex_p.y) res2 = LV_DRAW_MASK_RES_UNKNOWN;
 800903e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8009042:	42ab      	cmp	r3, r5
 8009044:	dd24      	ble.n	8009090 <lv_draw_mask_angle+0x34e>
 8009046:	2703      	movs	r7, #3
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 8009048:	f1ba 0f00 	cmp.w	sl, #0
 800904c:	d030      	beq.n	80090b0 <lv_draw_mask_angle+0x36e>
 800904e:	b387      	cbz	r7, 80090b2 <lv_draw_mask_angle+0x370>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 8009050:	f1ba 0f03 	cmp.w	sl, #3
 8009054:	d024      	beq.n	80090a0 <lv_draw_mask_angle+0x35e>
        else if(res1 == LV_DRAW_MASK_RES_FULL_COVER &&  res2 == LV_DRAW_MASK_RES_FULL_COVER) return LV_DRAW_MASK_RES_FULL_COVER;
 8009056:	f1ba 0f01 	cmp.w	sl, #1
 800905a:	d12e      	bne.n	80090ba <lv_draw_mask_angle+0x378>
 800905c:	2f01      	cmp	r7, #1
 800905e:	d028      	beq.n	80090b2 <lv_draw_mask_angle+0x370>
        else return LV_DRAW_MASK_RES_CHANGED;
 8009060:	2702      	movs	r7, #2
 8009062:	e026      	b.n	80090b2 <lv_draw_mask_angle+0x370>
        else if((p->cfg.end_angle < 180 && abs_y < p->cfg.vertex_p.y) ||
 8009064:	2bb3      	cmp	r3, #179	@ 0xb3
 8009066:	dc03      	bgt.n	8009070 <lv_draw_mask_angle+0x32e>
 8009068:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800906c:	42aa      	cmp	r2, r5
 800906e:	dc13      	bgt.n	8009098 <lv_draw_mask_angle+0x356>
 8009070:	2bb4      	cmp	r3, #180	@ 0xb4
 8009072:	dd03      	ble.n	800907c <lv_draw_mask_angle+0x33a>
                (p->cfg.end_angle > 180 && abs_y >= p->cfg.vertex_p.y)) {
 8009074:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8009078:	42ab      	cmp	r3, r5
 800907a:	dd0f      	ble.n	800909c <lv_draw_mask_angle+0x35a>
            res2 = lv_draw_mask_line(mask_buf, abs_x, abs_y, len, &p->end_line);
 800907c:	343c      	adds	r4, #60	@ 0x3c
 800907e:	9400      	str	r4, [sp, #0]
 8009080:	4643      	mov	r3, r8
 8009082:	462a      	mov	r2, r5
 8009084:	4631      	mov	r1, r6
 8009086:	4648      	mov	r0, r9
 8009088:	f7ff fdeb 	bl	8008c62 <lv_draw_mask_line>
 800908c:	4607      	mov	r7, r0
 800908e:	e7db      	b.n	8009048 <lv_draw_mask_angle+0x306>
            else res2 = LV_DRAW_MASK_RES_FULL_COVER;
 8009090:	2701      	movs	r7, #1
 8009092:	e7d9      	b.n	8009048 <lv_draw_mask_angle+0x306>
            else res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8009094:	2703      	movs	r7, #3
 8009096:	e7d7      	b.n	8009048 <lv_draw_mask_angle+0x306>
            res2 = LV_DRAW_MASK_RES_UNKNOWN;
 8009098:	2703      	movs	r7, #3
 800909a:	e7d5      	b.n	8009048 <lv_draw_mask_angle+0x306>
 800909c:	2703      	movs	r7, #3
 800909e:	e7d3      	b.n	8009048 <lv_draw_mask_angle+0x306>
        else if(res1 == LV_DRAW_MASK_RES_UNKNOWN && res2 == LV_DRAW_MASK_RES_UNKNOWN) return LV_DRAW_MASK_RES_TRANSP;
 80090a0:	2f03      	cmp	r7, #3
 80090a2:	d1d8      	bne.n	8009056 <lv_draw_mask_angle+0x314>
 80090a4:	2700      	movs	r7, #0
 80090a6:	e004      	b.n	80090b2 <lv_draw_mask_angle+0x370>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80090a8:	2701      	movs	r7, #1
 80090aa:	e002      	b.n	80090b2 <lv_draw_mask_angle+0x370>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80090ac:	2701      	movs	r7, #1
 80090ae:	e000      	b.n	80090b2 <lv_draw_mask_angle+0x370>
        if(res1 == LV_DRAW_MASK_RES_TRANSP || res2 == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 80090b0:	4657      	mov	r7, sl
}
 80090b2:	4638      	mov	r0, r7
 80090b4:	b002      	add	sp, #8
 80090b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else return LV_DRAW_MASK_RES_CHANGED;
 80090ba:	2702      	movs	r7, #2
 80090bc:	e7f9      	b.n	80090b2 <lv_draw_mask_angle+0x370>

080090be <lv_draw_mask_radius>:
{
 80090be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	4606      	mov	r6, r0
 80090c6:	460f      	mov	r7, r1
 80090c8:	461d      	mov	r5, r3
 80090ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
    bool outer = p->cfg.outer;
 80090cc:	f890 8012 	ldrb.w	r8, [r0, #18]
    int32_t radius = p->cfg.radius;
 80090d0:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
    dest->x1 = src->x1;
 80090d4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 80090d8:	f8ad c008 	strh.w	ip, [sp, #8]
    dest->y1 = src->y1;
 80090dc:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 80090e0:	f8ad 100a 	strh.w	r1, [sp, #10]
    dest->x2 = src->x2;
 80090e4:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 80090e8:	f8ad 400c 	strh.w	r4, [sp, #12]
    dest->y2 = src->y2;
 80090ec:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80090f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(outer == false) {
 80090f4:	f018 0801 	ands.w	r8, r8, #1
 80090f8:	d132      	bne.n	8009160 <lv_draw_mask_radius+0xa2>
        if((abs_y < rect.y1 || abs_y > rect.y2)) {
 80090fa:	428a      	cmp	r2, r1
 80090fc:	f2c0 8153 	blt.w	80093a6 <lv_draw_mask_radius+0x2e8>
 8009100:	429a      	cmp	r2, r3
 8009102:	f300 8154 	bgt.w	80093ae <lv_draw_mask_radius+0x2f0>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 8009106:	eb0c 0e09 	add.w	lr, ip, r9
 800910a:	4577      	cmp	r7, lr
 800910c:	db05      	blt.n	800911a <lv_draw_mask_radius+0x5c>
 800910e:	eb05 0e07 	add.w	lr, r5, r7
 8009112:	eba4 0a09 	sub.w	sl, r4, r9
 8009116:	45d6      	cmp	lr, sl
 8009118:	dd07      	ble.n	800912a <lv_draw_mask_radius+0x6c>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 800911a:	eb01 0e09 	add.w	lr, r1, r9
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
 800911e:	4572      	cmp	r2, lr
 8009120:	db4a      	blt.n	80091b8 <lv_draw_mask_radius+0xfa>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
 8009122:	eba3 0e09 	sub.w	lr, r3, r9
 8009126:	4572      	cmp	r2, lr
 8009128:	dc46      	bgt.n	80091b8 <lv_draw_mask_radius+0xfa>
        if(outer == false) {
 800912a:	f1b8 0f00 	cmp.w	r8, #0
 800912e:	d128      	bne.n	8009182 <lv_draw_mask_radius+0xc4>
            int32_t last = rect.x1 - abs_x;
 8009130:	ebac 0807 	sub.w	r8, ip, r7
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 8009134:	4545      	cmp	r5, r8
 8009136:	f2c0 813e 	blt.w	80093b6 <lv_draw_mask_radius+0x2f8>
            if(last >= 0) {
 800913a:	f1b8 0f00 	cmp.w	r8, #0
 800913e:	da16      	bge.n	800916e <lv_draw_mask_radius+0xb0>
            int32_t first = rect.x2 - abs_x + 1;
 8009140:	1be7      	subs	r7, r4, r7
 8009142:	3701      	adds	r7, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 8009144:	2f00      	cmp	r7, #0
 8009146:	f340 8138 	ble.w	80093ba <lv_draw_mask_radius+0x2fc>
            else if(first < len) {
 800914a:	42bd      	cmp	r5, r7
 800914c:	dc14      	bgt.n	8009178 <lv_draw_mask_radius+0xba>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 800914e:	f1b8 0f00 	cmp.w	r8, #0
 8009152:	f040 8134 	bne.w	80093be <lv_draw_mask_radius+0x300>
 8009156:	42bd      	cmp	r5, r7
 8009158:	f000 8133 	beq.w	80093c2 <lv_draw_mask_radius+0x304>
            else return LV_DRAW_MASK_RES_CHANGED;
 800915c:	2002      	movs	r0, #2
 800915e:	e123      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
 8009160:	428a      	cmp	r2, r1
 8009162:	f2c0 8126 	blt.w	80093b2 <lv_draw_mask_radius+0x2f4>
 8009166:	429a      	cmp	r2, r3
 8009168:	ddcd      	ble.n	8009106 <lv_draw_mask_radius+0x48>
            return LV_DRAW_MASK_RES_FULL_COVER;
 800916a:	2001      	movs	r0, #1
 800916c:	e11c      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
                lv_memset_00(&mask_buf[0], last);
 800916e:	4641      	mov	r1, r8
 8009170:	4630      	mov	r0, r6
 8009172:	f00d fda7 	bl	8016cc4 <lv_memset_00>
 8009176:	e7e3      	b.n	8009140 <lv_draw_mask_radius+0x82>
                lv_memset_00(&mask_buf[first], len - first);
 8009178:	1be9      	subs	r1, r5, r7
 800917a:	19f0      	adds	r0, r6, r7
 800917c:	f00d fda2 	bl	8016cc4 <lv_memset_00>
 8009180:	e7e5      	b.n	800914e <lv_draw_mask_radius+0x90>
            if(first < 0) first = 0;
 8009182:	ebbc 0c07 	subs.w	ip, ip, r7
 8009186:	d40f      	bmi.n	80091a8 <lv_draw_mask_radius+0xea>
            if(first <= len) {
 8009188:	4565      	cmp	r5, ip
 800918a:	db0b      	blt.n	80091a4 <lv_draw_mask_radius+0xe6>
                int32_t last = rect.x2 - abs_x - first + 1;
 800918c:	1be1      	subs	r1, r4, r7
 800918e:	eba1 010c 	sub.w	r1, r1, ip
 8009192:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
 8009194:	eb0c 0301 	add.w	r3, ip, r1
 8009198:	429d      	cmp	r5, r3
 800919a:	da01      	bge.n	80091a0 <lv_draw_mask_radius+0xe2>
 800919c:	eba5 010c 	sub.w	r1, r5, ip
                if(last >= 0) {
 80091a0:	2900      	cmp	r1, #0
 80091a2:	da04      	bge.n	80091ae <lv_draw_mask_radius+0xf0>
        return LV_DRAW_MASK_RES_CHANGED;
 80091a4:	2002      	movs	r0, #2
 80091a6:	e0ff      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            if(first < 0) first = 0;
 80091a8:	f04f 0c00 	mov.w	ip, #0
 80091ac:	e7ec      	b.n	8009188 <lv_draw_mask_radius+0xca>
                    lv_memset_00(&mask_buf[first], last);
 80091ae:	eb06 000c 	add.w	r0, r6, ip
 80091b2:	f00d fd87 	bl	8016cc4 <lv_memset_00>
 80091b6:	e7f5      	b.n	80091a4 <lv_draw_mask_radius+0xe6>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
 80091b8:	ebac 0707 	sub.w	r7, ip, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80091bc:	b2a4      	uxth	r4, r4
 80091be:	fa1f fc8c 	uxth.w	ip, ip
 80091c2:	eba4 040c 	sub.w	r4, r4, ip
 80091c6:	b2a4      	uxth	r4, r4
 80091c8:	3401      	adds	r4, #1
 80091ca:	b2a4      	uxth	r4, r4
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	b289      	uxth	r1, r1
 80091d0:	1a5b      	subs	r3, r3, r1
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	3301      	adds	r3, #1
 80091d6:	b29b      	uxth	r3, r3
    abs_y -= rect.y1;
 80091d8:	b292      	uxth	r2, r2
 80091da:	eba2 0c01 	sub.w	ip, r2, r1
 80091de:	fa1f fe8c 	uxth.w	lr, ip
 80091e2:	fa0f fc8c 	sxth.w	ip, ip
    if(abs_y < radius) {
 80091e6:	45e1      	cmp	r9, ip
 80091e8:	dd28      	ble.n	800923c <lv_draw_mask_radius+0x17e>
        cir_y = radius - abs_y - 1;
 80091ea:	1a89      	subs	r1, r1, r2
 80091ec:	4449      	add	r1, r9
 80091ee:	b289      	uxth	r1, r1
 80091f0:	3901      	subs	r1, #1
 80091f2:	b209      	sxth	r1, r1
    lv_opa_t * aa_opa = get_next_line(p->circle, cir_y, &aa_len, &x_start);
 80091f4:	ab01      	add	r3, sp, #4
 80091f6:	f10d 0206 	add.w	r2, sp, #6
 80091fa:	6940      	ldr	r0, [r0, #20]
 80091fc:	f7ff fa9e 	bl	800873c <get_next_line>
    lv_coord_t cir_x_right = k + w - radius + x_start;
 8009200:	b2bf      	uxth	r7, r7
 8009202:	eb07 0c04 	add.w	ip, r7, r4
 8009206:	fa1f fc8c 	uxth.w	ip, ip
 800920a:	fa1f f989 	uxth.w	r9, r9
 800920e:	ebac 0c09 	sub.w	ip, ip, r9
 8009212:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009216:	fa13 fc8c 	uxtah	ip, r3, ip
 800921a:	fa1f f18c 	uxth.w	r1, ip
 800921e:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t cir_x_left = k + radius - x_start - 1;
 8009222:	eb07 0409 	add.w	r4, r7, r9
 8009226:	b2a4      	uxth	r4, r4
 8009228:	1ae4      	subs	r4, r4, r3
 800922a:	b2a4      	uxth	r4, r4
 800922c:	3c01      	subs	r4, #1
 800922e:	b224      	sxth	r4, r4
    if(outer == false) {
 8009230:	f1b8 0f00 	cmp.w	r8, #0
 8009234:	f040 8097 	bne.w	8009366 <lv_draw_mask_radius+0x2a8>
        for(i = 0; i < aa_len; i++) {
 8009238:	2200      	movs	r2, #0
 800923a:	e00f      	b.n	800925c <lv_draw_mask_radius+0x19e>
        cir_y = abs_y - (h - radius);
 800923c:	eba9 0303 	sub.w	r3, r9, r3
 8009240:	eb0e 0103 	add.w	r1, lr, r3
 8009244:	b209      	sxth	r1, r1
 8009246:	e7d5      	b.n	80091f4 <lv_draw_mask_radius+0x136>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8009248:	4673      	mov	r3, lr
 800924a:	e022      	b.n	8009292 <lv_draw_mask_radius+0x1d4>
    if(mask_new <= LV_OPA_MIN) return 0;
 800924c:	2300      	movs	r3, #0
 800924e:	e020      	b.n	8009292 <lv_draw_mask_radius+0x1d4>
 8009250:	f04f 0e00 	mov.w	lr, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8009254:	f806 e001 	strb.w	lr, [r6, r1]
        for(i = 0; i < aa_len; i++) {
 8009258:	3201      	adds	r2, #1
 800925a:	b212      	sxth	r2, r2
 800925c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8009260:	4293      	cmp	r3, r2
 8009262:	dd29      	ble.n	80092b8 <lv_draw_mask_radius+0x1fa>
            lv_opa_t opa = aa_opa[aa_len - i - 1];
 8009264:	4611      	mov	r1, r2
 8009266:	1a9b      	subs	r3, r3, r2
 8009268:	3b01      	subs	r3, #1
 800926a:	f810 e003 	ldrb.w	lr, [r0, r3]
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 800926e:	eb1c 0702 	adds.w	r7, ip, r2
 8009272:	d40f      	bmi.n	8009294 <lv_draw_mask_radius+0x1d6>
 8009274:	42af      	cmp	r7, r5
 8009276:	da0d      	bge.n	8009294 <lv_draw_mask_radius+0x1d6>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8009278:	5df3      	ldrb	r3, [r6, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800927a:	2bfc      	cmp	r3, #252	@ 0xfc
 800927c:	d8e4      	bhi.n	8009248 <lv_draw_mask_radius+0x18a>
    if(mask_new <= LV_OPA_MIN) return 0;
 800927e:	2b02      	cmp	r3, #2
 8009280:	d9e4      	bls.n	800924c <lv_draw_mask_radius+0x18e>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8009282:	fb03 f30e 	mul.w	r3, r3, lr
 8009286:	eb03 2803 	add.w	r8, r3, r3, lsl #8
 800928a:	eb03 13c8 	add.w	r3, r3, r8, lsl #7
 800928e:	f3c3 53c7 	ubfx	r3, r3, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8009292:	55f3      	strb	r3, [r6, r7]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 8009294:	1a61      	subs	r1, r4, r1
 8009296:	d4df      	bmi.n	8009258 <lv_draw_mask_radius+0x19a>
 8009298:	42a9      	cmp	r1, r5
 800929a:	dadd      	bge.n	8009258 <lv_draw_mask_radius+0x19a>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 800929c:	5c73      	ldrb	r3, [r6, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800929e:	2bfc      	cmp	r3, #252	@ 0xfc
 80092a0:	d8d8      	bhi.n	8009254 <lv_draw_mask_radius+0x196>
    if(mask_new <= LV_OPA_MIN) return 0;
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d9d4      	bls.n	8009250 <lv_draw_mask_radius+0x192>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 80092a6:	fb03 f30e 	mul.w	r3, r3, lr
 80092aa:	eb03 2703 	add.w	r7, r3, r3, lsl #8
 80092ae:	eb03 13c7 	add.w	r3, r3, r7, lsl #7
 80092b2:	f3c3 5ec7 	ubfx	lr, r3, #23, #8
 80092b6:	e7cd      	b.n	8009254 <lv_draw_mask_radius+0x196>
        cir_x_right = LV_CLAMP(0, cir_x_right + i, len);
 80092b8:	4462      	add	r2, ip
 80092ba:	42aa      	cmp	r2, r5
 80092bc:	bfa8      	it	ge
 80092be:	462a      	movge	r2, r5
 80092c0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80092c4:	b212      	sxth	r2, r2
        lv_memset_00(&mask_buf[cir_x_right], len - cir_x_right);
 80092c6:	1aa9      	subs	r1, r5, r2
 80092c8:	18b0      	adds	r0, r6, r2
 80092ca:	f00d fcfb 	bl	8016cc4 <lv_memset_00>
        cir_x_left = LV_CLAMP(0, cir_x_left - aa_len + 1, len);
 80092ce:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 80092d2:	1a61      	subs	r1, r4, r1
 80092d4:	3101      	adds	r1, #1
 80092d6:	42a9      	cmp	r1, r5
 80092d8:	bfa8      	it	ge
 80092da:	4629      	movge	r1, r5
 80092dc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        lv_memset_00(&mask_buf[0], cir_x_left);
 80092e0:	b209      	sxth	r1, r1
 80092e2:	4630      	mov	r0, r6
 80092e4:	f00d fcee 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 80092e8:	2002      	movs	r0, #2
 80092ea:	e05d      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
    if(mask_new >= LV_OPA_MAX) return mask_act;
 80092ec:	463a      	mov	r2, r7
 80092ee:	e022      	b.n	8009336 <lv_draw_mask_radius+0x278>
    if(mask_new <= LV_OPA_MIN) return 0;
 80092f0:	2200      	movs	r2, #0
 80092f2:	e020      	b.n	8009336 <lv_draw_mask_radius+0x278>
 80092f4:	2700      	movs	r7, #0
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 80092f6:	54b7      	strb	r7, [r6, r2]
        for(i = 0; i < aa_len; i++) {
 80092f8:	3301      	adds	r3, #1
 80092fa:	b21b      	sxth	r3, r3
 80092fc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8009300:	429a      	cmp	r2, r3
 8009302:	dd32      	ble.n	800936a <lv_draw_mask_radius+0x2ac>
            lv_opa_t opa = 255 - (aa_opa[aa_len - 1 - i]);
 8009304:	3a01      	subs	r2, #1
 8009306:	469e      	mov	lr, r3
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	5c87      	ldrb	r7, [r0, r2]
 800930c:	43ff      	mvns	r7, r7
 800930e:	b2ff      	uxtb	r7, r7
            if(cir_x_right + i >= 0 && cir_x_right + i < len) {
 8009310:	eb1c 0803 	adds.w	r8, ip, r3
 8009314:	d411      	bmi.n	800933a <lv_draw_mask_radius+0x27c>
 8009316:	45a8      	cmp	r8, r5
 8009318:	da0f      	bge.n	800933a <lv_draw_mask_radius+0x27c>
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 800931a:	f816 2008 	ldrb.w	r2, [r6, r8]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 800931e:	2afc      	cmp	r2, #252	@ 0xfc
 8009320:	d8e4      	bhi.n	80092ec <lv_draw_mask_radius+0x22e>
    if(mask_new <= LV_OPA_MIN) return 0;
 8009322:	2a02      	cmp	r2, #2
 8009324:	d9e4      	bls.n	80092f0 <lv_draw_mask_radius+0x232>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8009326:	fb07 f202 	mul.w	r2, r7, r2
 800932a:	eb02 2902 	add.w	r9, r2, r2, lsl #8
 800932e:	eb02 12c9 	add.w	r2, r2, r9, lsl #7
 8009332:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                mask_buf[cir_x_right + i] = mask_mix(opa, mask_buf[cir_x_right + i]);
 8009336:	f806 2008 	strb.w	r2, [r6, r8]
            if(cir_x_left - i >= 0 && cir_x_left - i < len) {
 800933a:	ebb4 020e 	subs.w	r2, r4, lr
 800933e:	d4db      	bmi.n	80092f8 <lv_draw_mask_radius+0x23a>
 8009340:	42aa      	cmp	r2, r5
 8009342:	dad9      	bge.n	80092f8 <lv_draw_mask_radius+0x23a>
                mask_buf[cir_x_left - i] = mask_mix(opa, mask_buf[cir_x_left - i]);
 8009344:	f816 e002 	ldrb.w	lr, [r6, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
 8009348:	f1be 0ffc 	cmp.w	lr, #252	@ 0xfc
 800934c:	d8d3      	bhi.n	80092f6 <lv_draw_mask_radius+0x238>
    if(mask_new <= LV_OPA_MIN) return 0;
 800934e:	f1be 0f02 	cmp.w	lr, #2
 8009352:	d9cf      	bls.n	80092f4 <lv_draw_mask_radius+0x236>
    return LV_UDIV255(mask_act * mask_new);// >> 8);
 8009354:	fb0e fe07 	mul.w	lr, lr, r7
 8009358:	eb0e 270e 	add.w	r7, lr, lr, lsl #8
 800935c:	eb0e 1ec7 	add.w	lr, lr, r7, lsl #7
 8009360:	f3ce 57c7 	ubfx	r7, lr, #23, #8
 8009364:	e7c7      	b.n	80092f6 <lv_draw_mask_radius+0x238>
        for(i = 0; i < aa_len; i++) {
 8009366:	2300      	movs	r3, #0
 8009368:	e7c8      	b.n	80092fc <lv_draw_mask_radius+0x23e>
        lv_coord_t clr_start = LV_CLAMP(0, cir_x_left + 1, len);
 800936a:	3401      	adds	r4, #1
 800936c:	42ac      	cmp	r4, r5
 800936e:	bfa8      	it	ge
 8009370:	462c      	movge	r4, r5
 8009372:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009376:	b220      	sxth	r0, r4
        lv_coord_t clr_len = LV_CLAMP(0, cir_x_right - clr_start, len - clr_start);
 8009378:	4565      	cmp	r5, ip
 800937a:	dd08      	ble.n	800938e <lv_draw_mask_radius+0x2d0>
 800937c:	ebac 0300 	sub.w	r3, ip, r0
 8009380:	0fdb      	lsrs	r3, r3, #31
 8009382:	b953      	cbnz	r3, 800939a <lv_draw_mask_radius+0x2dc>
 8009384:	4565      	cmp	r5, ip
 8009386:	dd05      	ble.n	8009394 <lv_draw_mask_radius+0x2d6>
 8009388:	1b09      	subs	r1, r1, r4
 800938a:	b209      	sxth	r1, r1
 800938c:	e006      	b.n	800939c <lv_draw_mask_radius+0x2de>
 800938e:	1a2b      	subs	r3, r5, r0
 8009390:	0fdb      	lsrs	r3, r3, #31
 8009392:	e7f6      	b.n	8009382 <lv_draw_mask_radius+0x2c4>
 8009394:	1b29      	subs	r1, r5, r4
 8009396:	b209      	sxth	r1, r1
 8009398:	e000      	b.n	800939c <lv_draw_mask_radius+0x2de>
 800939a:	2100      	movs	r1, #0
        lv_memset_00(&mask_buf[clr_start], clr_len);
 800939c:	4430      	add	r0, r6
 800939e:	f00d fc91 	bl	8016cc4 <lv_memset_00>
    return LV_DRAW_MASK_RES_CHANGED;
 80093a2:	2002      	movs	r0, #2
 80093a4:	e000      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            return LV_DRAW_MASK_RES_TRANSP;
 80093a6:	2000      	movs	r0, #0
}
 80093a8:	b004      	add	sp, #16
 80093aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return LV_DRAW_MASK_RES_TRANSP;
 80093ae:	2000      	movs	r0, #0
 80093b0:	e7fa      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            return LV_DRAW_MASK_RES_FULL_COVER;
 80093b2:	2001      	movs	r0, #1
 80093b4:	e7f8      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
 80093b6:	2000      	movs	r0, #0
 80093b8:	e7f6      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
 80093ba:	2000      	movs	r0, #0
 80093bc:	e7f4      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            else return LV_DRAW_MASK_RES_CHANGED;
 80093be:	2002      	movs	r0, #2
 80093c0:	e7f2      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
 80093c2:	2001      	movs	r0, #1
 80093c4:	e7f0      	b.n	80093a8 <lv_draw_mask_radius+0x2ea>

080093c6 <circ_calc_aa4>:
    if(radius == 0) return;
 80093c6:	2900      	cmp	r1, #0
 80093c8:	f000 816f 	beq.w	80096aa <circ_calc_aa4+0x2e4>
{
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	b08c      	sub	sp, #48	@ 0x30
 80093d2:	4605      	mov	r5, r0
 80093d4:	468a      	mov	sl, r1
    c->radius = radius;
 80093d6:	8301      	strh	r1, [r0, #24]
    if(c->buf) lv_mem_free(c->buf);
 80093d8:	6800      	ldr	r0, [r0, #0]
 80093da:	b108      	cbz	r0, 80093e0 <circ_calc_aa4+0x1a>
 80093dc:	f00d faba 	bl	8016954 <lv_mem_free>
    c->buf = lv_mem_alloc(radius * 6 + 6);  /*Use uint16_t for opa_start_on_y and x_start_on_y*/
 80093e0:	f10a 0601 	add.w	r6, sl, #1
 80093e4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80093e8:	0040      	lsls	r0, r0, #1
 80093ea:	f00d fa95 	bl	8016918 <lv_mem_alloc>
 80093ee:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MALLOC(c->buf);
 80093f0:	b320      	cbz	r0, 800943c <circ_calc_aa4+0x76>
    c->cir_opa = c->buf;
 80093f2:	6068      	str	r0, [r5, #4]
    c->opa_start_on_y = (uint16_t *)(c->buf + 2 * radius + 2);
 80093f4:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80093f8:	3302      	adds	r3, #2
 80093fa:	4403      	add	r3, r0
 80093fc:	60eb      	str	r3, [r5, #12]
    c->x_start_on_y = (uint16_t *)(c->buf + 4 * radius + 4);
 80093fe:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8009402:	3304      	adds	r3, #4
 8009404:	4403      	add	r3, r0
 8009406:	60ab      	str	r3, [r5, #8]
    if(radius == 1) {
 8009408:	f1ba 0f01 	cmp.w	sl, #1
 800940c:	d017      	beq.n	800943e <circ_calc_aa4+0x78>
    lv_coord_t * cir_x = lv_mem_buf_get((radius + 1) * 2 * 2 * sizeof(lv_coord_t));
 800940e:	00f0      	lsls	r0, r6, #3
 8009410:	f00d fad4 	bl	80169bc <lv_mem_buf_get>
 8009414:	4607      	mov	r7, r0
    lv_coord_t * cir_y = &cir_x[(radius + 1) * 2];
 8009416:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    circ_init(&cp, &tmp, radius * 4);    /*Upscale by 4*/
 800941a:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800941e:	b212      	sxth	r2, r2
 8009420:	f10d 012a 	add.w	r1, sp, #42	@ 0x2a
 8009424:	a80b      	add	r0, sp, #44	@ 0x2c
 8009426:	f7ff f95b 	bl	80086e0 <circ_init>
    x_int[0] = cp.x >> 2;
 800942a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 800942e:	109b      	asrs	r3, r3, #2
 8009430:	9306      	str	r3, [sp, #24]
    x_fract[0] = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	9302      	str	r3, [sp, #8]
    lv_coord_t cir_size = 0;
 8009436:	461c      	mov	r4, r3
    uint32_t y_8th_cnt = 0;
 8009438:	4699      	mov	r9, r3
    while(circ_cont(&cp)) {
 800943a:	e03c      	b.n	80094b6 <circ_calc_aa4+0xf0>
    LV_ASSERT_MALLOC(c->buf);
 800943c:	e7fe      	b.n	800943c <circ_calc_aa4+0x76>
        c->cir_opa[0] = 180;
 800943e:	23b4      	movs	r3, #180	@ 0xb4
 8009440:	7003      	strb	r3, [r0, #0]
        c->opa_start_on_y[0] = 0;
 8009442:	68ea      	ldr	r2, [r5, #12]
 8009444:	2300      	movs	r3, #0
 8009446:	8013      	strh	r3, [r2, #0]
        c->opa_start_on_y[1] = 1;
 8009448:	68ea      	ldr	r2, [r5, #12]
 800944a:	2101      	movs	r1, #1
 800944c:	8051      	strh	r1, [r2, #2]
        c->x_start_on_y[0] = 0;
 800944e:	68aa      	ldr	r2, [r5, #8]
 8009450:	8013      	strh	r3, [r2, #0]
        return;
 8009452:	e127      	b.n	80096a4 <circ_calc_aa4+0x2de>
        if(i != 4) break;
 8009454:	f1b8 0f04 	cmp.w	r8, #4
 8009458:	f040 80b5 	bne.w	80095c6 <circ_calc_aa4+0x200>
        if(x_int[0] == x_int[3]) {
 800945c:	9b06      	ldr	r3, [sp, #24]
 800945e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009460:	4293      	cmp	r3, r2
 8009462:	d04c      	beq.n	80094fe <circ_calc_aa4+0x138>
        else if(x_int[0] != x_int[1]) {
 8009464:	9a07      	ldr	r2, [sp, #28]
 8009466:	4293      	cmp	r3, r2
 8009468:	d05f      	beq.n	800952a <circ_calc_aa4+0x164>
            cir_x[cir_size] = x_int[0];
 800946a:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800946e:	fa0f f189 	sxth.w	r1, r9
 8009472:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0];
 8009476:	686a      	ldr	r2, [r5, #4]
 8009478:	9802      	ldr	r0, [sp, #8]
 800947a:	5510      	strb	r0, [r2, r4]
            c->cir_opa[cir_size] *= 16;
 800947c:	6868      	ldr	r0, [r5, #4]
 800947e:	5d02      	ldrb	r2, [r0, r4]
 8009480:	0112      	lsls	r2, r2, #4
 8009482:	5502      	strb	r2, [r0, r4]
            cir_size++;
 8009484:	b2a4      	uxth	r4, r4
 8009486:	1c62      	adds	r2, r4, #1
 8009488:	b212      	sxth	r2, r2
            cir_x[cir_size] = x_int[0] - 1;
 800948a:	3b01      	subs	r3, #1
 800948c:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8009490:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
            c->cir_opa[cir_size] = 1 * 4 + x_fract[1] + x_fract[2] + x_fract[3];;
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	9904      	ldr	r1, [sp, #16]
 8009498:	440b      	add	r3, r1
 800949a:	6869      	ldr	r1, [r5, #4]
 800949c:	9805      	ldr	r0, [sp, #20]
 800949e:	fa50 f383 	uxtab	r3, r0, r3
 80094a2:	3304      	adds	r3, #4
 80094a4:	548b      	strb	r3, [r1, r2]
            c->cir_opa[cir_size] *= 16;
 80094a6:	6869      	ldr	r1, [r5, #4]
 80094a8:	5c8b      	ldrb	r3, [r1, r2]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	548b      	strb	r3, [r1, r2]
            cir_size++;
 80094ae:	3402      	adds	r4, #2
 80094b0:	b224      	sxth	r4, r4
        y_8th_cnt++;
 80094b2:	f109 0901 	add.w	r9, r9, #1
    while(circ_cont(&cp)) {
 80094b6:	a80b      	add	r0, sp, #44	@ 0x2c
 80094b8:	f7ff f919 	bl	80086ee <circ_cont>
 80094bc:	2800      	cmp	r0, #0
 80094be:	f000 8082 	beq.w	80095c6 <circ_calc_aa4+0x200>
        for(i = 0; i < 4; i++) {
 80094c2:	f04f 0800 	mov.w	r8, #0
 80094c6:	f1b8 0f03 	cmp.w	r8, #3
 80094ca:	dcc3      	bgt.n	8009454 <circ_calc_aa4+0x8e>
            circ_next(&cp, &tmp);
 80094cc:	f10d 012a 	add.w	r1, sp, #42	@ 0x2a
 80094d0:	a80b      	add	r0, sp, #44	@ 0x2c
 80094d2:	f7ff f915 	bl	8008700 <circ_next>
            if(circ_cont(&cp) == false) break;
 80094d6:	a80b      	add	r0, sp, #44	@ 0x2c
 80094d8:	f7ff f909 	bl	80086ee <circ_cont>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d0b9      	beq.n	8009454 <circ_calc_aa4+0x8e>
            x_int[i] = cp.x >> 2;
 80094e0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80094e4:	1099      	asrs	r1, r3, #2
 80094e6:	aa0c      	add	r2, sp, #48	@ 0x30
 80094e8:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 80094ec:	f842 1c18 	str.w	r1, [r2, #-24]
            x_fract[i] = cp.x & 0x3;
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	f842 3c28 	str.w	r3, [r2, #-40]
        for(i = 0; i < 4; i++) {
 80094f8:	f108 0801 	add.w	r8, r8, #1
 80094fc:	e7e3      	b.n	80094c6 <circ_calc_aa4+0x100>
            cir_x[cir_size] = x_int[0];
 80094fe:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8009502:	f826 9014 	strh.w	r9, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2] + x_fract[3];
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	9a03      	ldr	r2, [sp, #12]
 800950a:	4413      	add	r3, r2
 800950c:	9a04      	ldr	r2, [sp, #16]
 800950e:	fa52 f383 	uxtab	r3, r2, r3
 8009512:	686a      	ldr	r2, [r5, #4]
 8009514:	9905      	ldr	r1, [sp, #20]
 8009516:	fa51 f383 	uxtab	r3, r1, r3
 800951a:	5513      	strb	r3, [r2, r4]
            c->cir_opa[cir_size] *= 16;
 800951c:	686a      	ldr	r2, [r5, #4]
 800951e:	5d13      	ldrb	r3, [r2, r4]
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	5513      	strb	r3, [r2, r4]
            cir_size++;
 8009524:	3401      	adds	r4, #1
 8009526:	b224      	sxth	r4, r4
 8009528:	e7c3      	b.n	80094b2 <circ_calc_aa4+0xec>
        else if(x_int[0] != x_int[2]) {
 800952a:	9a08      	ldr	r2, [sp, #32]
 800952c:	4293      	cmp	r3, r2
 800952e:	d023      	beq.n	8009578 <circ_calc_aa4+0x1b2>
            cir_x[cir_size] = x_int[0];
 8009530:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 8009534:	fa0f fc89 	sxth.w	ip, r9
 8009538:	f826 c014 	strh.w	ip, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1];
 800953c:	6869      	ldr	r1, [r5, #4]
 800953e:	9a02      	ldr	r2, [sp, #8]
 8009540:	9803      	ldr	r0, [sp, #12]
 8009542:	4402      	add	r2, r0
 8009544:	550a      	strb	r2, [r1, r4]
            c->cir_opa[cir_size] *= 16;
 8009546:	6869      	ldr	r1, [r5, #4]
 8009548:	5d0a      	ldrb	r2, [r1, r4]
 800954a:	0112      	lsls	r2, r2, #4
 800954c:	550a      	strb	r2, [r1, r4]
            cir_size++;
 800954e:	b2a4      	uxth	r4, r4
 8009550:	1c62      	adds	r2, r4, #1
 8009552:	b212      	sxth	r2, r2
            cir_x[cir_size] = x_int[0] - 1;
 8009554:	3b01      	subs	r3, #1
 8009556:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800955a:	f826 c012 	strh.w	ip, [r6, r2, lsl #1]
            c->cir_opa[cir_size] = 2 * 4 + x_fract[2] + x_fract[3];;
 800955e:	6869      	ldr	r1, [r5, #4]
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	9805      	ldr	r0, [sp, #20]
 8009564:	4403      	add	r3, r0
 8009566:	3308      	adds	r3, #8
 8009568:	548b      	strb	r3, [r1, r2]
            c->cir_opa[cir_size] *= 16;
 800956a:	6869      	ldr	r1, [r5, #4]
 800956c:	5c8b      	ldrb	r3, [r1, r2]
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	548b      	strb	r3, [r1, r2]
            cir_size++;
 8009572:	3402      	adds	r4, #2
 8009574:	b224      	sxth	r4, r4
 8009576:	e79c      	b.n	80094b2 <circ_calc_aa4+0xec>
            cir_x[cir_size] = x_int[0];
 8009578:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 800957c:	fa0f f189 	sxth.w	r1, r9
 8009580:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
            c->cir_opa[cir_size] = x_fract[0] + x_fract[1] + x_fract[2];
 8009584:	9a02      	ldr	r2, [sp, #8]
 8009586:	9803      	ldr	r0, [sp, #12]
 8009588:	4402      	add	r2, r0
 800958a:	6868      	ldr	r0, [r5, #4]
 800958c:	9001      	str	r0, [sp, #4]
 800958e:	9804      	ldr	r0, [sp, #16]
 8009590:	fa50 f282 	uxtab	r2, r0, r2
 8009594:	9801      	ldr	r0, [sp, #4]
 8009596:	5502      	strb	r2, [r0, r4]
            c->cir_opa[cir_size] *= 16;
 8009598:	6868      	ldr	r0, [r5, #4]
 800959a:	5d02      	ldrb	r2, [r0, r4]
 800959c:	0112      	lsls	r2, r2, #4
 800959e:	5502      	strb	r2, [r0, r4]
            cir_size++;
 80095a0:	b2a4      	uxth	r4, r4
 80095a2:	1c62      	adds	r2, r4, #1
 80095a4:	b212      	sxth	r2, r2
            cir_x[cir_size] = x_int[0] - 1;
 80095a6:	3b01      	subs	r3, #1
 80095a8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
            cir_y[cir_size] = y_8th_cnt;
 80095ac:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
            c->cir_opa[cir_size] = 3 * 4 + x_fract[3];;
 80095b0:	6869      	ldr	r1, [r5, #4]
 80095b2:	9b05      	ldr	r3, [sp, #20]
 80095b4:	330c      	adds	r3, #12
 80095b6:	548b      	strb	r3, [r1, r2]
            c->cir_opa[cir_size] *= 16;
 80095b8:	6869      	ldr	r1, [r5, #4]
 80095ba:	5c8b      	ldrb	r3, [r1, r2]
 80095bc:	011b      	lsls	r3, r3, #4
 80095be:	548b      	strb	r3, [r1, r2]
            cir_size++;
 80095c0:	3402      	adds	r4, #2
 80095c2:	b224      	sxth	r4, r4
 80095c4:	e775      	b.n	80094b2 <circ_calc_aa4+0xec>
    int32_t mid = radius * 723;
 80095c6:	f240 23d3 	movw	r3, #723	@ 0x2d3
 80095ca:	fb03 fa0a 	mul.w	sl, r3, sl
    int32_t mid_int = mid >> 10;
 80095ce:	ea4f 21aa 	mov.w	r1, sl, asr #10
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 80095d2:	4622      	mov	r2, r4
 80095d4:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 80095d8:	3b01      	subs	r3, #1
 80095da:	f937 0013 	ldrsh.w	r0, [r7, r3, lsl #1]
 80095de:	ebb0 2faa 	cmp.w	r0, sl, asr #10
 80095e2:	d017      	beq.n	8009614 <circ_calc_aa4+0x24e>
        int32_t tmp_val = mid - (mid_int << 10);
 80095e4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
        if(tmp_val <= 512) {
 80095e8:	f5ba 7f00 	cmp.w	sl, #512	@ 0x200
 80095ec:	dc17      	bgt.n	800961e <circ_calc_aa4+0x258>
            tmp_val = tmp_val * tmp_val * 2;
 80095ee:	fb0a fa0a 	mul.w	sl, sl, sl
            tmp_val = tmp_val >> (10 + 6);
 80095f2:	ea4f 33ea 	mov.w	r3, sl, asr #15
        cir_x[cir_size] = mid_int;
 80095f6:	b209      	sxth	r1, r1
 80095f8:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
        cir_y[cir_size] = mid_int;
 80095fc:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
        c->cir_opa[cir_size] = tmp_val;
 8009600:	6869      	ldr	r1, [r5, #4]
 8009602:	548b      	strb	r3, [r1, r2]
        c->cir_opa[cir_size] *= 16;
 8009604:	6869      	ldr	r1, [r5, #4]
 8009606:	5c8b      	ldrb	r3, [r1, r2]
 8009608:	011b      	lsls	r3, r3, #4
 800960a:	548b      	strb	r3, [r1, r2]
        cir_size++;
 800960c:	3401      	adds	r4, #1
 800960e:	b224      	sxth	r4, r4
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8009610:	1ea3      	subs	r3, r4, #2
 8009612:	e01b      	b.n	800964c <circ_calc_aa4+0x286>
    if(cir_x[cir_size - 1] != mid_int || cir_y[cir_size - 1] != mid_int) {
 8009614:	f936 3013 	ldrsh.w	r3, [r6, r3, lsl #1]
 8009618:	428b      	cmp	r3, r1
 800961a:	d1e3      	bne.n	80095e4 <circ_calc_aa4+0x21e>
 800961c:	e7f8      	b.n	8009610 <circ_calc_aa4+0x24a>
            tmp_val = 1024 - tmp_val;
 800961e:	f5ca 6a80 	rsb	sl, sl, #1024	@ 0x400
            tmp_val = tmp_val * tmp_val * 2;
 8009622:	fb0a fa0a 	mul.w	sl, sl, sl
            tmp_val = tmp_val >> (10 + 6);
 8009626:	ea4f 33ea 	mov.w	r3, sl, asr #15
            tmp_val = 15 - tmp_val;
 800962a:	f1c3 030f 	rsb	r3, r3, #15
 800962e:	e7e2      	b.n	80095f6 <circ_calc_aa4+0x230>
        cir_x[cir_size] = cir_y[i];
 8009630:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 8009634:	f827 2014 	strh.w	r2, [r7, r4, lsl #1]
        cir_y[cir_size] = cir_x[i];
 8009638:	f937 2013 	ldrsh.w	r2, [r7, r3, lsl #1]
 800963c:	f826 2014 	strh.w	r2, [r6, r4, lsl #1]
        c->cir_opa[cir_size] = c->cir_opa[i];
 8009640:	686a      	ldr	r2, [r5, #4]
 8009642:	5cd1      	ldrb	r1, [r2, r3]
 8009644:	5511      	strb	r1, [r2, r4]
    for(i = cir_size - 2; i >= 0; i--, cir_size++) {
 8009646:	3b01      	subs	r3, #1
 8009648:	3401      	adds	r4, #1
 800964a:	b224      	sxth	r4, r4
 800964c:	2b00      	cmp	r3, #0
 800964e:	daef      	bge.n	8009630 <circ_calc_aa4+0x26a>
    c->opa_start_on_y[0] = 0;
 8009650:	68ea      	ldr	r2, [r5, #12]
 8009652:	2300      	movs	r3, #0
 8009654:	8013      	strh	r3, [r2, #0]
    lv_coord_t y = 0;
 8009656:	469c      	mov	ip, r3
    while(i < cir_size) {
 8009658:	e013      	b.n	8009682 <circ_calc_aa4+0x2bc>
            c->x_start_on_y[y] = LV_MIN(c->x_start_on_y[y], cir_x[i]);
 800965a:	5e7a      	ldrsh	r2, [r7, r1]
 800965c:	68a9      	ldr	r1, [r5, #8]
 800965e:	f831 8000 	ldrh.w	r8, [r1, r0]
 8009662:	4542      	cmp	r2, r8
 8009664:	bfa8      	it	ge
 8009666:	4642      	movge	r2, r8
 8009668:	520a      	strh	r2, [r1, r0]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800966a:	3301      	adds	r3, #1
 800966c:	0059      	lsls	r1, r3, #1
 800966e:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
 8009672:	4562      	cmp	r2, ip
 8009674:	d101      	bne.n	800967a <circ_calc_aa4+0x2b4>
 8009676:	459e      	cmp	lr, r3
 8009678:	dcef      	bgt.n	800965a <circ_calc_aa4+0x294>
        y++;
 800967a:	f10c 0c01 	add.w	ip, ip, #1
 800967e:	fa0f fc8c 	sxth.w	ip, ip
    while(i < cir_size) {
 8009682:	46a6      	mov	lr, r4
 8009684:	429c      	cmp	r4, r3
 8009686:	dd0a      	ble.n	800969e <circ_calc_aa4+0x2d8>
        c->opa_start_on_y[y] = i;
 8009688:	68ea      	ldr	r2, [r5, #12]
 800968a:	ea4f 004c 	mov.w	r0, ip, lsl #1
 800968e:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
        c->x_start_on_y[y] = cir_x[i];
 8009692:	68aa      	ldr	r2, [r5, #8]
 8009694:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
 8009698:	f822 101c 	strh.w	r1, [r2, ip, lsl #1]
        for(; cir_y[i] == y && i < (int32_t)cir_size; i++) {
 800969c:	e7e6      	b.n	800966c <circ_calc_aa4+0x2a6>
    lv_mem_buf_release(cir_x);
 800969e:	4638      	mov	r0, r7
 80096a0:	f00d f9ee 	bl	8016a80 <lv_mem_buf_release>
}
 80096a4:	b00c      	add	sp, #48	@ 0x30
 80096a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096aa:	4770      	bx	lr

080096ac <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80096ac:	2300      	movs	r3, #0
 80096ae:	2b0f      	cmp	r3, #15
 80096b0:	d806      	bhi.n	80096c0 <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
 80096b2:	4a0a      	ldr	r2, [pc, #40]	@ (80096dc <lv_draw_mask_add+0x30>)
 80096b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096b8:	b112      	cbz	r2, 80096c0 <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 80096ba:	3301      	adds	r3, #1
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e7f6      	b.n	80096ae <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
 80096c0:	2b0f      	cmp	r3, #15
 80096c2:	d807      	bhi.n	80096d4 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
 80096c4:	4a05      	ldr	r2, [pc, #20]	@ (80096dc <lv_draw_mask_add+0x30>)
 80096c6:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
 80096ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80096ce:	6051      	str	r1, [r2, #4]
    return i;
 80096d0:	b218      	sxth	r0, r3
 80096d2:	4770      	bx	lr
        return LV_MASK_ID_INV;
 80096d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20006674 	.word	0x20006674

080096e0 <lv_draw_mask_apply>:
{
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	b083      	sub	sp, #12
 80096e6:	4681      	mov	r9, r0
 80096e8:	4688      	mov	r8, r1
 80096ea:	4617      	mov	r7, r2
 80096ec:	461e      	mov	r6, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
 80096ee:	4d10      	ldr	r5, [pc, #64]	@ (8009730 <lv_draw_mask_apply+0x50>)
    bool changed = false;
 80096f0:	f04f 0a00 	mov.w	sl, #0
    while(m->param) {
 80096f4:	e000      	b.n	80096f8 <lv_draw_mask_apply+0x18>
        m++;
 80096f6:	3508      	adds	r5, #8
    while(m->param) {
 80096f8:	682c      	ldr	r4, [r5, #0]
 80096fa:	b174      	cbz	r4, 800971a <lv_draw_mask_apply+0x3a>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
 80096fc:	f8d4 b000 	ldr.w	fp, [r4]
 8009700:	9400      	str	r4, [sp, #0]
 8009702:	4633      	mov	r3, r6
 8009704:	463a      	mov	r2, r7
 8009706:	4641      	mov	r1, r8
 8009708:	4648      	mov	r0, r9
 800970a:	47d8      	blx	fp
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
 800970c:	4603      	mov	r3, r0
 800970e:	b140      	cbz	r0, 8009722 <lv_draw_mask_apply+0x42>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
 8009710:	2802      	cmp	r0, #2
 8009712:	d1f0      	bne.n	80096f6 <lv_draw_mask_apply+0x16>
 8009714:	f04f 0a01 	mov.w	sl, #1
 8009718:	e7ed      	b.n	80096f6 <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	d104      	bne.n	800972a <lv_draw_mask_apply+0x4a>
 8009720:	2301      	movs	r3, #1
}
 8009722:	4618      	mov	r0, r3
 8009724:	b003      	add	sp, #12
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
 800972a:	2302      	movs	r3, #2
 800972c:	e7f9      	b.n	8009722 <lv_draw_mask_apply+0x42>
 800972e:	bf00      	nop
 8009730:	20006674 	.word	0x20006674

08009734 <lv_draw_mask_remove_id>:
{
 8009734:	4603      	mov	r3, r0
    if(id != LV_MASK_ID_INV) {
 8009736:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 800973a:	d009      	beq.n	8009750 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
 800973c:	4a05      	ldr	r2, [pc, #20]	@ (8009754 <lv_draw_mask_remove_id+0x20>)
 800973e:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
 8009742:	2100      	movs	r1, #0
 8009744:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
 8009748:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800974c:	6051      	str	r1, [r2, #4]
 800974e:	4770      	bx	lr
    _lv_draw_mask_common_dsc_t * p = NULL;
 8009750:	2000      	movs	r0, #0
}
 8009752:	4770      	bx	lr
 8009754:	20006674 	.word	0x20006674

08009758 <lv_draw_mask_remove_custom>:
{
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4605      	mov	r5, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800975c:	2400      	movs	r4, #0
    _lv_draw_mask_common_dsc_t * p = NULL;
 800975e:	4626      	mov	r6, r4
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009760:	e001      	b.n	8009766 <lv_draw_mask_remove_custom+0xe>
 8009762:	3401      	adds	r4, #1
 8009764:	b2e4      	uxtb	r4, r4
 8009766:	2c0f      	cmp	r4, #15
 8009768:	d80c      	bhi.n	8009784 <lv_draw_mask_remove_custom+0x2c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
 800976a:	4b07      	ldr	r3, [pc, #28]	@ (8009788 <lv_draw_mask_remove_custom+0x30>)
 800976c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	42ab      	cmp	r3, r5
 8009774:	d1f5      	bne.n	8009762 <lv_draw_mask_remove_custom+0xa>
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8009776:	4b04      	ldr	r3, [pc, #16]	@ (8009788 <lv_draw_mask_remove_custom+0x30>)
 8009778:	f853 6034 	ldr.w	r6, [r3, r4, lsl #3]
            lv_draw_mask_remove_id(i);
 800977c:	4620      	mov	r0, r4
 800977e:	f7ff ffd9 	bl	8009734 <lv_draw_mask_remove_id>
 8009782:	e7ee      	b.n	8009762 <lv_draw_mask_remove_custom+0xa>
}
 8009784:	4630      	mov	r0, r6
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	20006674 	.word	0x20006674

0800978c <lv_draw_mask_free_param>:
{
 800978c:	b510      	push	{r4, lr}
 800978e:	4604      	mov	r4, r0
    if(pdsc->type == LV_DRAW_MASK_TYPE_RADIUS) {
 8009790:	7903      	ldrb	r3, [r0, #4]
 8009792:	2b02      	cmp	r3, #2
 8009794:	d002      	beq.n	800979c <lv_draw_mask_free_param+0x10>
    else if(pdsc->type == LV_DRAW_MASK_TYPE_POLYGON) {
 8009796:	2b05      	cmp	r3, #5
 8009798:	d011      	beq.n	80097be <lv_draw_mask_free_param+0x32>
}
 800979a:	bd10      	pop	{r4, pc}
        if(radius_p->circle) {
 800979c:	6943      	ldr	r3, [r0, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0fb      	beq.n	800979a <lv_draw_mask_free_param+0xe>
            if(radius_p->circle->life < 0) {
 80097a2:	691a      	ldr	r2, [r3, #16]
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	db03      	blt.n	80097b0 <lv_draw_mask_free_param+0x24>
                radius_p->circle->used_cnt--;
 80097a8:	695a      	ldr	r2, [r3, #20]
 80097aa:	3a01      	subs	r2, #1
 80097ac:	615a      	str	r2, [r3, #20]
 80097ae:	e7f4      	b.n	800979a <lv_draw_mask_free_param+0xe>
                lv_mem_free(radius_p->circle->cir_opa);
 80097b0:	6858      	ldr	r0, [r3, #4]
 80097b2:	f00d f8cf 	bl	8016954 <lv_mem_free>
                lv_mem_free(radius_p->circle);
 80097b6:	6960      	ldr	r0, [r4, #20]
 80097b8:	f00d f8cc 	bl	8016954 <lv_mem_free>
 80097bc:	e7ed      	b.n	800979a <lv_draw_mask_free_param+0xe>
        lv_mem_free(poly_p->cfg.points);
 80097be:	6880      	ldr	r0, [r0, #8]
 80097c0:	f00d f8c8 	bl	8016954 <lv_mem_free>
}
 80097c4:	e7e9      	b.n	800979a <lv_draw_mask_free_param+0xe>
	...

080097c8 <_lv_draw_mask_cleanup>:
{
 80097c8:	b538      	push	{r3, r4, r5, lr}
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80097ca:	2400      	movs	r4, #0
 80097cc:	e009      	b.n	80097e2 <_lv_draw_mask_cleanup+0x1a>
        lv_memset_00(&LV_GC_ROOT(_lv_circle_cache[i]), sizeof(LV_GC_ROOT(_lv_circle_cache[i])));
 80097ce:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80097d2:	00ab      	lsls	r3, r5, #2
 80097d4:	211c      	movs	r1, #28
 80097d6:	480a      	ldr	r0, [pc, #40]	@ (8009800 <_lv_draw_mask_cleanup+0x38>)
 80097d8:	4418      	add	r0, r3
 80097da:	f00d fa73 	bl	8016cc4 <lv_memset_00>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 80097de:	3401      	adds	r4, #1
 80097e0:	b2e4      	uxtb	r4, r4
 80097e2:	2c03      	cmp	r4, #3
 80097e4:	d80a      	bhi.n	80097fc <_lv_draw_mask_cleanup+0x34>
        if(LV_GC_ROOT(_lv_circle_cache[i]).buf) {
 80097e6:	4625      	mov	r5, r4
 80097e8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80097ec:	0093      	lsls	r3, r2, #2
 80097ee:	4a04      	ldr	r2, [pc, #16]	@ (8009800 <_lv_draw_mask_cleanup+0x38>)
 80097f0:	58d0      	ldr	r0, [r2, r3]
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d0eb      	beq.n	80097ce <_lv_draw_mask_cleanup+0x6>
            lv_mem_free(LV_GC_ROOT(_lv_circle_cache[i]).buf);
 80097f6:	f00d f8ad 	bl	8016954 <lv_mem_free>
 80097fa:	e7e8      	b.n	80097ce <_lv_draw_mask_cleanup+0x6>
}
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	200066f4 	.word	0x200066f4

08009804 <lv_draw_mask_is_any>:
{
 8009804:	b538      	push	{r3, r4, r5, lr}
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 8009806:	b110      	cbz	r0, 800980e <lv_draw_mask_is_any+0xa>
 8009808:	4605      	mov	r5, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 800980a:	2400      	movs	r4, #0
 800980c:	e00e      	b.n	800982c <lv_draw_mask_is_any+0x28>
    if(a == NULL) return LV_GC_ROOT(_lv_draw_mask_list[0]).param ? true : false;
 800980e:	4b16      	ldr	r3, [pc, #88]	@ (8009868 <lv_draw_mask_is_any+0x64>)
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	3800      	subs	r0, #0
 8009814:	bf18      	it	ne
 8009816:	2001      	movne	r0, #1
 8009818:	e021      	b.n	800985e <lv_draw_mask_is_any+0x5a>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 800981a:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800981e:	3108      	adds	r1, #8
 8009820:	4628      	mov	r0, r5
 8009822:	f7f8 fa1b 	bl	8001c5c <_lv_area_is_in>
 8009826:	b1e8      	cbz	r0, 8009864 <lv_draw_mask_is_any+0x60>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
 8009828:	3401      	adds	r4, #1
 800982a:	b2e4      	uxtb	r4, r4
 800982c:	2c0f      	cmp	r4, #15
 800982e:	d815      	bhi.n	800985c <lv_draw_mask_is_any+0x58>
        _lv_draw_mask_common_dsc_t * comm_param = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
 8009830:	4b0d      	ldr	r3, [pc, #52]	@ (8009868 <lv_draw_mask_is_any+0x64>)
 8009832:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
        if(comm_param == NULL) continue;
 8009836:	2900      	cmp	r1, #0
 8009838:	d0f6      	beq.n	8009828 <lv_draw_mask_is_any+0x24>
        if(comm_param->type == LV_DRAW_MASK_TYPE_RADIUS) {
 800983a:	790b      	ldrb	r3, [r1, #4]
 800983c:	2b02      	cmp	r3, #2
 800983e:	d10f      	bne.n	8009860 <lv_draw_mask_is_any+0x5c>
            if(radius_param->cfg.outer) {
 8009840:	7c8b      	ldrb	r3, [r1, #18]
 8009842:	f013 0f01 	tst.w	r3, #1
 8009846:	d0e8      	beq.n	800981a <lv_draw_mask_is_any+0x16>
                if(!_lv_area_is_out(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8009848:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 800984c:	3108      	adds	r1, #8
 800984e:	4628      	mov	r0, r5
 8009850:	f7f8 fb1b 	bl	8001e8a <_lv_area_is_out>
 8009854:	2800      	cmp	r0, #0
 8009856:	d1e7      	bne.n	8009828 <lv_draw_mask_is_any+0x24>
 8009858:	2001      	movs	r0, #1
 800985a:	e000      	b.n	800985e <lv_draw_mask_is_any+0x5a>
    return false;
 800985c:	2000      	movs	r0, #0
}
 800985e:	bd38      	pop	{r3, r4, r5, pc}
            return true;
 8009860:	2001      	movs	r0, #1
 8009862:	e7fc      	b.n	800985e <lv_draw_mask_is_any+0x5a>
                if(!_lv_area_is_in(a, &radius_param->cfg.rect, radius_param->cfg.radius)) return true;
 8009864:	2001      	movs	r0, #1
 8009866:	e7fa      	b.n	800985e <lv_draw_mask_is_any+0x5a>
 8009868:	20006674 	.word	0x20006674

0800986c <lv_draw_mask_line_points_init>:
{
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	4604      	mov	r4, r0
 8009872:	4688      	mov	r8, r1
 8009874:	4615      	mov	r5, r2
 8009876:	461f      	mov	r7, r3
 8009878:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 800987c:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
    lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
 8009880:	212c      	movs	r1, #44	@ 0x2c
 8009882:	f00d fa1f 	bl	8016cc4 <lv_memset_00>
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 8009886:	42b5      	cmp	r5, r6
 8009888:	d04f      	beq.n	800992a <lv_draw_mask_line_points_init+0xbe>
    if(p1y > p2y) {
 800988a:	42b5      	cmp	r5, r6
 800988c:	dc05      	bgt.n	800989a <lv_draw_mask_line_points_init+0x2e>
 800988e:	4633      	mov	r3, r6
 8009890:	462e      	mov	r6, r5
 8009892:	461d      	mov	r5, r3
 8009894:	463b      	mov	r3, r7
 8009896:	4647      	mov	r7, r8
 8009898:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
 800989a:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
 800989c:	8166      	strh	r6, [r4, #10]
    param->cfg.p2.x = p2x;
 800989e:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
 80098a2:	81e5      	strh	r5, [r4, #14]
    param->cfg.side = side;
 80098a4:	7c23      	ldrb	r3, [r4, #16]
 80098a6:	f369 0301 	bfi	r3, r9, #0, #2
 80098aa:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
 80098ac:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
 80098ae:	82a6      	strh	r6, [r4, #20]
    param->flat = (LV_ABS(p2x - p1x) > LV_ABS(p2y - p1y)) ? 1 : 0;
 80098b0:	eba8 0707 	sub.w	r7, r8, r7
 80098b4:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 80098b8:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 80098bc:	1bad      	subs	r5, r5, r6
 80098be:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80098c2:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80098c6:	4293      	cmp	r3, r2
 80098c8:	bfd4      	ite	le
 80098ca:	2300      	movle	r3, #0
 80098cc:	2301      	movgt	r3, #1
 80098ce:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80098d2:	f363 0200 	bfi	r2, r3, #0, #1
 80098d6:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
    param->yx_steep = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	61e3      	str	r3, [r4, #28]
    param->xy_steep = 0;
 80098de:	61a3      	str	r3, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
 80098e0:	4a3d      	ldr	r2, [pc, #244]	@ (80099d8 <lv_draw_mask_line_points_init+0x16c>)
 80098e2:	6022      	str	r2, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
 80098e4:	7123      	strb	r3, [r4, #4]
    if(param->flat) {
 80098e6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80098ea:	f013 0f01 	tst.w	r3, #1
 80098ee:	d024      	beq.n	800993a <lv_draw_mask_line_points_init+0xce>
        if(dx) {
 80098f0:	b13f      	cbz	r7, 8009902 <lv_draw_mask_line_points_init+0x96>
            m = (1L << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
 80098f2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80098f6:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
 80098fa:	fb05 f303 	mul.w	r3, r5, r3
 80098fe:	129b      	asrs	r3, r3, #10
 8009900:	61e3      	str	r3, [r4, #28]
        if(dy) {
 8009902:	b13d      	cbz	r5, 8009914 <lv_draw_mask_line_points_init+0xa8>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 8009904:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009908:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
 800990c:	fb07 f303 	mul.w	r3, r7, r3
 8009910:	129b      	asrs	r3, r3, #10
 8009912:	61a3      	str	r3, [r4, #24]
        param->steep = param->yx_steep;
 8009914:	69e3      	ldr	r3, [r4, #28]
 8009916:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009918:	7c23      	ldrb	r3, [r4, #16]
 800991a:	f003 0303 	and.w	r3, r3, #3
 800991e:	2b03      	cmp	r3, #3
 8009920:	d826      	bhi.n	8009970 <lv_draw_mask_line_points_init+0x104>
 8009922:	e8df f003 	tbb	[pc, r3]
 8009926:	2c1f      	.short	0x2c1f
 8009928:	4433      	.short	0x4433
    if(p1y == p2y && side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
 800992a:	f1b9 0f03 	cmp.w	r9, #3
 800992e:	d1ac      	bne.n	800988a <lv_draw_mask_line_points_init+0x1e>
        p1y--;
 8009930:	3d01      	subs	r5, #1
 8009932:	b22d      	sxth	r5, r5
        p2y--;
 8009934:	3e01      	subs	r6, #1
 8009936:	b236      	sxth	r6, r6
 8009938:	e7a7      	b.n	800988a <lv_draw_mask_line_points_init+0x1e>
        if(dy) {
 800993a:	b13d      	cbz	r5, 800994c <lv_draw_mask_line_points_init+0xe0>
            m = (1L << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800993c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009940:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
 8009944:	fb07 f303 	mul.w	r3, r7, r3
 8009948:	129b      	asrs	r3, r3, #10
 800994a:	61a3      	str	r3, [r4, #24]
        if(dx) {
 800994c:	b13f      	cbz	r7, 800995e <lv_draw_mask_line_points_init+0xf2>
            m = (1L << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
 800994e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009952:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
 8009956:	fb03 f505 	mul.w	r5, r3, r5
 800995a:	12ad      	asrs	r5, r5, #10
 800995c:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
 800995e:	69a3      	ldr	r3, [r4, #24]
 8009960:	6223      	str	r3, [r4, #32]
 8009962:	e7d9      	b.n	8009918 <lv_draw_mask_line_points_init+0xac>
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
 8009964:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009968:	f023 0302 	bic.w	r3, r3, #2
 800996c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
    param->spx = param->steep >> 2;
 8009970:	6a22      	ldr	r2, [r4, #32]
 8009972:	1093      	asrs	r3, r2, #2
 8009974:	6263      	str	r3, [r4, #36]	@ 0x24
    if(param->steep < 0) param->spx = -param->spx;
 8009976:	2a00      	cmp	r2, #0
 8009978:	db2a      	blt.n	80099d0 <lv_draw_mask_line_points_init+0x164>
}
 800997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
 800997e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009982:	f043 0302 	orr.w	r3, r3, #2
 8009986:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800998a:	e7f1      	b.n	8009970 <lv_draw_mask_line_points_init+0x104>
        if(param->steep > 0) param->inv = 1;
 800998c:	6a23      	ldr	r3, [r4, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dd06      	ble.n	80099a0 <lv_draw_mask_line_points_init+0x134>
 8009992:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009996:	f043 0302 	orr.w	r3, r3, #2
 800999a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800999e:	e7e7      	b.n	8009970 <lv_draw_mask_line_points_init+0x104>
        else param->inv = 0;
 80099a0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80099a4:	f023 0302 	bic.w	r3, r3, #2
 80099a8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80099ac:	e7e0      	b.n	8009970 <lv_draw_mask_line_points_init+0x104>
        if(param->steep > 0) param->inv = 0;
 80099ae:	6a23      	ldr	r3, [r4, #32]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dd06      	ble.n	80099c2 <lv_draw_mask_line_points_init+0x156>
 80099b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80099b8:	f023 0302 	bic.w	r3, r3, #2
 80099bc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80099c0:	e7d6      	b.n	8009970 <lv_draw_mask_line_points_init+0x104>
        else param->inv = 1;
 80099c2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80099c6:	f043 0302 	orr.w	r3, r3, #2
 80099ca:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 80099ce:	e7cf      	b.n	8009970 <lv_draw_mask_line_points_init+0x104>
    if(param->steep < 0) param->spx = -param->spx;
 80099d0:	425b      	negs	r3, r3
 80099d2:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80099d4:	e7d1      	b.n	800997a <lv_draw_mask_line_points_init+0x10e>
 80099d6:	bf00      	nop
 80099d8:	08008c63 	.word	0x08008c63

080099dc <lv_draw_mask_line_angle_init>:
{
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	4607      	mov	r7, r0
 80099e4:	460d      	mov	r5, r1
 80099e6:	4616      	mov	r6, r2
 80099e8:	461c      	mov	r4, r3
    if(angle > 180) angle -= 180; /*> 180 will swap the origo*/
 80099ea:	2bb4      	cmp	r3, #180	@ 0xb4
 80099ec:	dd02      	ble.n	80099f4 <lv_draw_mask_line_angle_init+0x18>
 80099ee:	f1a3 04b4 	sub.w	r4, r3, #180	@ 0xb4
 80099f2:	b224      	sxth	r4, r4
    p2x = (lv_trigo_sin(angle + 90) >> 5) + p1x;
 80099f4:	f104 005a 	add.w	r0, r4, #90	@ 0x5a
 80099f8:	b200      	sxth	r0, r0
 80099fa:	f00c fe69 	bl	80166d0 <lv_trigo_sin>
 80099fe:	f340 184f 	sbfx	r8, r0, #5, #16
    p2y = (lv_trigo_sin(angle) >> 5) + py;
 8009a02:	4620      	mov	r0, r4
 8009a04:	f00c fe64 	bl	80166d0 <lv_trigo_sin>
 8009a08:	f340 144f 	sbfx	r4, r0, #5, #16
    lv_draw_mask_line_points_init(param, p1x, py, p2x, p2y, side);
 8009a0c:	eb08 0305 	add.w	r3, r8, r5
 8009a10:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8009a14:	9201      	str	r2, [sp, #4]
 8009a16:	4434      	add	r4, r6
 8009a18:	b224      	sxth	r4, r4
 8009a1a:	9400      	str	r4, [sp, #0]
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	4632      	mov	r2, r6
 8009a20:	4629      	mov	r1, r5
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7ff ff22 	bl	800986c <lv_draw_mask_line_points_init>
}
 8009a28:	b002      	add	sp, #8
 8009a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009a30 <lv_draw_mask_angle_init>:
{
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	4604      	mov	r4, r0
 8009a38:	460e      	mov	r6, r1
 8009a3a:	4617      	mov	r7, r2
 8009a3c:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
    if(start_angle < 0)
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	db05      	blt.n	8009a50 <lv_draw_mask_angle_init+0x20>
    else if(start_angle > 359)
 8009a44:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8009a48:	db03      	blt.n	8009a52 <lv_draw_mask_angle_init+0x22>
        start_angle = 359;
 8009a4a:	f240 1367 	movw	r3, #359	@ 0x167
 8009a4e:	e000      	b.n	8009a52 <lv_draw_mask_angle_init+0x22>
        start_angle = 0;
 8009a50:	2300      	movs	r3, #0
    if(end_angle < 0)
 8009a52:	2d00      	cmp	r5, #0
 8009a54:	db05      	blt.n	8009a62 <lv_draw_mask_angle_init+0x32>
    else if(end_angle > 359)
 8009a56:	f5b5 7fb4 	cmp.w	r5, #360	@ 0x168
 8009a5a:	db03      	blt.n	8009a64 <lv_draw_mask_angle_init+0x34>
        end_angle = 359;
 8009a5c:	f240 1567 	movw	r5, #359	@ 0x167
 8009a60:	e000      	b.n	8009a64 <lv_draw_mask_angle_init+0x34>
        end_angle = 0;
 8009a62:	2500      	movs	r5, #0
    if(end_angle < start_angle) {
 8009a64:	42ab      	cmp	r3, r5
 8009a66:	dd11      	ble.n	8009a8c <lv_draw_mask_angle_init+0x5c>
        param->delta_deg = 360 - start_angle + end_angle;
 8009a68:	1aea      	subs	r2, r5, r3
 8009a6a:	f502 72b4 	add.w	r2, r2, #360	@ 0x168
 8009a6e:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
    param->cfg.start_angle = start_angle;
 8009a72:	81a3      	strh	r3, [r4, #12]
    param->cfg.end_angle = end_angle;
 8009a74:	81e5      	strh	r5, [r4, #14]
    param->cfg.vertex_p.x = vertex_x;
 8009a76:	8126      	strh	r6, [r4, #8]
    param->cfg.vertex_p.y = vertex_y;
 8009a78:	8167      	strh	r7, [r4, #10]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_angle;
 8009a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009af4 <lv_draw_mask_angle_init+0xc4>)
 8009a7c:	6022      	str	r2, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_ANGLE;
 8009a7e:	2201      	movs	r2, #1
 8009a80:	7122      	strb	r2, [r4, #4]
    LV_ASSERT_MSG(start_angle >= 0 && start_angle <= 360, "Unexpected start angle");
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	f5b2 7fb4 	cmp.w	r2, #360	@ 0x168
 8009a88:	d907      	bls.n	8009a9a <lv_draw_mask_angle_init+0x6a>
 8009a8a:	e7fe      	b.n	8009a8a <lv_draw_mask_angle_init+0x5a>
        param->delta_deg = LV_ABS(end_angle - start_angle);
 8009a8c:	1aea      	subs	r2, r5, r3
 8009a8e:	2a00      	cmp	r2, #0
 8009a90:	bfb8      	it	lt
 8009a92:	4252      	neglt	r2, r2
 8009a94:	f8a4 2068 	strh.w	r2, [r4, #104]	@ 0x68
 8009a98:	e7eb      	b.n	8009a72 <lv_draw_mask_angle_init+0x42>
    if(start_angle >= 0 && start_angle < 180) {
 8009a9a:	2ab3      	cmp	r2, #179	@ 0xb3
 8009a9c:	d806      	bhi.n	8009aac <lv_draw_mask_angle_init+0x7c>
        start_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8009a9e:	2200      	movs	r2, #0
    LV_ASSERT_MSG(end_angle >= 0 && start_angle <= 360, "Unexpected end angle");
 8009aa0:	2d00      	cmp	r5, #0
 8009aa2:	db02      	blt.n	8009aaa <lv_draw_mask_angle_init+0x7a>
 8009aa4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8009aa8:	dd02      	ble.n	8009ab0 <lv_draw_mask_angle_init+0x80>
 8009aaa:	e7fe      	b.n	8009aaa <lv_draw_mask_angle_init+0x7a>
        start_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8009aac:	2201      	movs	r2, #1
 8009aae:	e7f7      	b.n	8009aa0 <lv_draw_mask_angle_init+0x70>
    if(end_angle >= 0 && end_angle < 180) {
 8009ab0:	b2a9      	uxth	r1, r5
 8009ab2:	29b3      	cmp	r1, #179	@ 0xb3
 8009ab4:	d906      	bls.n	8009ac4 <lv_draw_mask_angle_init+0x94>
    else if(end_angle >= 180 && end_angle < 360) {
 8009ab6:	39b4      	subs	r1, #180	@ 0xb4
 8009ab8:	b289      	uxth	r1, r1
 8009aba:	29b3      	cmp	r1, #179	@ 0xb3
 8009abc:	d817      	bhi.n	8009aee <lv_draw_mask_angle_init+0xbe>
        end_side = LV_DRAW_MASK_LINE_SIDE_LEFT;
 8009abe:	f04f 0800 	mov.w	r8, #0
 8009ac2:	e001      	b.n	8009ac8 <lv_draw_mask_angle_init+0x98>
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT;
 8009ac4:	f04f 0801 	mov.w	r8, #1
    lv_draw_mask_line_angle_init(&param->start_line, vertex_x, vertex_y, start_angle, start_side);
 8009ac8:	9200      	str	r2, [sp, #0]
 8009aca:	463a      	mov	r2, r7
 8009acc:	4631      	mov	r1, r6
 8009ace:	f104 0010 	add.w	r0, r4, #16
 8009ad2:	f7ff ff83 	bl	80099dc <lv_draw_mask_line_angle_init>
    lv_draw_mask_line_angle_init(&param->end_line, vertex_x, vertex_y, end_angle, end_side);
 8009ad6:	f8cd 8000 	str.w	r8, [sp]
 8009ada:	462b      	mov	r3, r5
 8009adc:	463a      	mov	r2, r7
 8009ade:	4631      	mov	r1, r6
 8009ae0:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 8009ae4:	f7ff ff7a 	bl	80099dc <lv_draw_mask_line_angle_init>
}
 8009ae8:	b002      	add	sp, #8
 8009aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        end_side = LV_DRAW_MASK_LINE_SIDE_RIGHT; /*silence compiler*/
 8009aee:	f04f 0801 	mov.w	r8, #1
 8009af2:	e7e9      	b.n	8009ac8 <lv_draw_mask_angle_init+0x98>
 8009af4:	08008d43 	.word	0x08008d43

08009af8 <lv_draw_mask_radius_init>:
{
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4604      	mov	r4, r0
 8009afc:	4615      	mov	r5, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009afe:	888a      	ldrh	r2, [r1, #4]
 8009b00:	f9b1 0000 	ldrsh.w	r0, [r1]
 8009b04:	b286      	uxth	r6, r0
 8009b06:	1b92      	subs	r2, r2, r6
 8009b08:	b292      	uxth	r2, r2
 8009b0a:	3201      	adds	r2, #1
 8009b0c:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009b0e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8009b12:	884e      	ldrh	r6, [r1, #2]
 8009b14:	ebac 0c06 	sub.w	ip, ip, r6
 8009b18:	fa1f fc8c 	uxth.w	ip, ip
 8009b1c:	f10c 0c01 	add.w	ip, ip, #1
 8009b20:	fa0f fc8c 	sxth.w	ip, ip
    int32_t short_side = LV_MIN(w, h);
 8009b24:	4594      	cmp	ip, r2
 8009b26:	bfa8      	it	ge
 8009b28:	4694      	movge	ip, r2
    if(radius > short_side >> 1) radius = short_side >> 1;
 8009b2a:	ebb5 0f6c 	cmp.w	r5, ip, asr #1
 8009b2e:	dd02      	ble.n	8009b36 <lv_draw_mask_radius_init+0x3e>
 8009b30:	ea4f 026c 	mov.w	r2, ip, asr #1
 8009b34:	b215      	sxth	r5, r2
    if(radius < 0) radius = 0;
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	db21      	blt.n	8009b7e <lv_draw_mask_radius_init+0x86>
    dest->x1 = src->x1;
 8009b3a:	8120      	strh	r0, [r4, #8]
    dest->y1 = src->y1;
 8009b3c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8009b40:	8162      	strh	r2, [r4, #10]
    dest->x2 = src->x2;
 8009b42:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8009b46:	81a2      	strh	r2, [r4, #12]
    dest->y2 = src->y2;
 8009b48:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8009b4c:	81e2      	strh	r2, [r4, #14]
    param->cfg.radius = radius;
 8009b4e:	8225      	strh	r5, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
 8009b50:	7ca2      	ldrb	r2, [r4, #18]
 8009b52:	f363 0200 	bfi	r2, r3, #0, #1
 8009b56:	74a2      	strb	r2, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
 8009b58:	4b3b      	ldr	r3, [pc, #236]	@ (8009c48 <lv_draw_mask_radius_init+0x150>)
 8009b5a:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	7123      	strb	r3, [r4, #4]
    if(radius == 0) {
 8009b60:	b17d      	cbz	r5, 8009b82 <lv_draw_mask_radius_init+0x8a>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b03      	cmp	r3, #3
 8009b66:	d829      	bhi.n	8009bbc <lv_draw_mask_radius_init+0xc4>
        if(LV_GC_ROOT(_lv_circle_cache[i]).radius == radius) {
 8009b68:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8009b6c:	4a37      	ldr	r2, [pc, #220]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009b6e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009b72:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8009b76:	42aa      	cmp	r2, r5
 8009b78:	d006      	beq.n	8009b88 <lv_draw_mask_radius_init+0x90>
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	e7f2      	b.n	8009b64 <lv_draw_mask_radius_init+0x6c>
    if(radius < 0) radius = 0;
 8009b7e:	2500      	movs	r5, #0
 8009b80:	e7db      	b.n	8009b3a <lv_draw_mask_radius_init+0x42>
        param->circle = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	6163      	str	r3, [r4, #20]
        return;
 8009b86:	e04f      	b.n	8009c28 <lv_draw_mask_radius_init+0x130>
            LV_GC_ROOT(_lv_circle_cache[i]).used_cnt++;
 8009b88:	4a30      	ldr	r2, [pc, #192]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009b8a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009b8e:	6951      	ldr	r1, [r2, #20]
 8009b90:	3101      	adds	r1, #1
 8009b92:	6151      	str	r1, [r2, #20]
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8009b94:	6912      	ldr	r2, [r2, #16]
 8009b96:	2d0f      	cmp	r5, #15
 8009b98:	dd0e      	ble.n	8009bb8 <lv_draw_mask_radius_init+0xc0>
 8009b9a:	112d      	asrs	r5, r5, #4
 8009b9c:	442a      	add	r2, r5
 8009b9e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8009ba2:	bfa8      	it	ge
 8009ba4:	f44f 727a 	movge.w	r2, #1000	@ 0x3e8
 8009ba8:	4928      	ldr	r1, [pc, #160]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009baa:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 8009bae:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8009bb2:	6102      	str	r2, [r0, #16]
            param->circle = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009bb4:	6160      	str	r0, [r4, #20]
            return;
 8009bb6:	e037      	b.n	8009c28 <lv_draw_mask_radius_init+0x130>
            CIRCLE_CACHE_AGING(LV_GC_ROOT(_lv_circle_cache[i]).life, radius);
 8009bb8:	2501      	movs	r5, #1
 8009bba:	e7ef      	b.n	8009b9c <lv_draw_mask_radius_init+0xa4>
    _lv_draw_mask_radius_circle_dsc_t * entry = NULL;
 8009bbc:	2600      	movs	r6, #0
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009bbe:	4633      	mov	r3, r6
 8009bc0:	e003      	b.n	8009bca <lv_draw_mask_radius_init+0xd2>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009bc2:	4e22      	ldr	r6, [pc, #136]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009bc4:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    for(i = 0; i < LV_CIRCLE_CACHE_SIZE; i++) {
 8009bc8:	3301      	adds	r3, #1
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d818      	bhi.n	8009c00 <lv_draw_mask_radius_init+0x108>
        if(LV_GC_ROOT(_lv_circle_cache[i]).used_cnt == 0) {
 8009bce:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8009bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009bd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009bd8:	6952      	ldr	r2, [r2, #20]
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	d1f4      	bne.n	8009bc8 <lv_draw_mask_radius_init+0xd0>
            if(!entry) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009bde:	2e00      	cmp	r6, #0
 8009be0:	d0ef      	beq.n	8009bc2 <lv_draw_mask_radius_init+0xca>
            else if(LV_GC_ROOT(_lv_circle_cache[i]).life < entry->life) entry = &LV_GC_ROOT(_lv_circle_cache[i]);
 8009be2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8009be6:	4a19      	ldr	r2, [pc, #100]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009be8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009bec:	6911      	ldr	r1, [r2, #16]
 8009bee:	6932      	ldr	r2, [r6, #16]
 8009bf0:	4291      	cmp	r1, r2
 8009bf2:	dae9      	bge.n	8009bc8 <lv_draw_mask_radius_init+0xd0>
 8009bf4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8009bf8:	4e14      	ldr	r6, [pc, #80]	@ (8009c4c <lv_draw_mask_radius_init+0x154>)
 8009bfa:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8009bfe:	e7e3      	b.n	8009bc8 <lv_draw_mask_radius_init+0xd0>
    if(!entry) {
 8009c00:	b19e      	cbz	r6, 8009c2a <lv_draw_mask_radius_init+0x132>
        entry->used_cnt++;
 8009c02:	6973      	ldr	r3, [r6, #20]
 8009c04:	3301      	adds	r3, #1
 8009c06:	6173      	str	r3, [r6, #20]
        entry->life = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	6133      	str	r3, [r6, #16]
        CIRCLE_CACHE_AGING(entry->life, radius);
 8009c0c:	2d0f      	cmp	r5, #15
 8009c0e:	dd19      	ble.n	8009c44 <lv_draw_mask_radius_init+0x14c>
 8009c10:	112b      	asrs	r3, r5, #4
 8009c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c16:	bfa8      	it	ge
 8009c18:	f44f 737a 	movge.w	r3, #1000	@ 0x3e8
 8009c1c:	6133      	str	r3, [r6, #16]
    param->circle = entry;
 8009c1e:	6166      	str	r6, [r4, #20]
    circ_calc_aa4(param->circle, radius);
 8009c20:	4629      	mov	r1, r5
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7ff fbcf 	bl	80093c6 <circ_calc_aa4>
}
 8009c28:	bd70      	pop	{r4, r5, r6, pc}
        entry = lv_mem_alloc(sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8009c2a:	201c      	movs	r0, #28
 8009c2c:	f00c fe74 	bl	8016918 <lv_mem_alloc>
        LV_ASSERT_MALLOC(entry);
 8009c30:	4606      	mov	r6, r0
 8009c32:	b130      	cbz	r0, 8009c42 <lv_draw_mask_radius_init+0x14a>
        lv_memset_00(entry, sizeof(_lv_draw_mask_radius_circle_dsc_t));
 8009c34:	211c      	movs	r1, #28
 8009c36:	f00d f845 	bl	8016cc4 <lv_memset_00>
        entry->life = -1;
 8009c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c3e:	6133      	str	r3, [r6, #16]
 8009c40:	e7ed      	b.n	8009c1e <lv_draw_mask_radius_init+0x126>
        LV_ASSERT_MALLOC(entry);
 8009c42:	e7fe      	b.n	8009c42 <lv_draw_mask_radius_init+0x14a>
        CIRCLE_CACHE_AGING(entry->life, radius);
 8009c44:	2301      	movs	r3, #1
 8009c46:	e7e4      	b.n	8009c12 <lv_draw_mask_radius_init+0x11a>
 8009c48:	080090bf 	.word	0x080090bf
 8009c4c:	200066f4 	.word	0x200066f4

08009c50 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void LV_ATTRIBUTE_FAST_MEM lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
 8009c50:	b510      	push	{r4, lr}
 8009c52:	4604      	mov	r4, r0
    lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
 8009c54:	2138      	movs	r1, #56	@ 0x38
 8009c56:	f00d f835 	bl	8016cc4 <lv_memset_00>
 8009c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    dsc->bg_color = lv_color_white();
 8009c5e:	80a3      	strh	r3, [r4, #4]
    dsc->bg_grad.stops[0].color = lv_color_white();
 8009c60:	80e3      	strh	r3, [r4, #6]
 8009c62:	f04f 0300 	mov.w	r3, #0
 8009c66:	f023 0307 	bic.w	r3, r3, #7
 8009c6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c6e:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009c72:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->bg_grad.stops[1].color = lv_color_black();
 8009c76:	8163      	strh	r3, [r4, #10]
    dsc->bg_grad.stops[1].frac = 0xFF;
 8009c78:	22ff      	movs	r2, #255	@ 0xff
 8009c7a:	7322      	strb	r2, [r4, #12]
    dsc->bg_grad.stops_count = 2;
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	73a3      	strb	r3, [r4, #14]
 8009c80:	f04f 0300 	mov.w	r3, #0
 8009c84:	f023 0307 	bic.w	r3, r3, #7
 8009c88:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009c8c:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009c90:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->border_color = lv_color_black();
 8009c94:	83e3      	strh	r3, [r4, #30]
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	f023 0307 	bic.w	r3, r3, #7
 8009c9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009ca2:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8009ca6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
    dsc->shadow_color = lv_color_black();
 8009caa:	85a3      	strh	r3, [r4, #44]	@ 0x2c
    dsc->bg_img_symbol_font = LV_FONT_DEFAULT;
 8009cac:	4b08      	ldr	r3, [pc, #32]	@ (8009cd0 <lv_draw_rect_dsc_init+0x80>)
 8009cae:	6163      	str	r3, [r4, #20]
    dsc->bg_opa = LV_OPA_COVER;
 8009cb0:	70e2      	strb	r2, [r4, #3]
    dsc->bg_img_opa = LV_OPA_COVER;
 8009cb2:	76a2      	strb	r2, [r4, #26]
    dsc->outline_opa = LV_OPA_COVER;
 8009cb4:	f884 202a 	strb.w	r2, [r4, #42]	@ 0x2a
    dsc->border_opa = LV_OPA_COVER;
 8009cb8:	f884 2022 	strb.w	r2, [r4, #34]	@ 0x22
    dsc->shadow_opa = LV_OPA_COVER;
 8009cbc:	f884 2036 	strb.w	r2, [r4, #54]	@ 0x36
    dsc->border_side = LV_BORDER_SIDE_FULL;
 8009cc0:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009cc4:	220f      	movs	r2, #15
 8009cc6:	f362 0345 	bfi	r3, r2, #1, #5
 8009cca:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
}
 8009cce:	bd10      	pop	{r4, pc}
 8009cd0:	0802a2b8 	.word	0x0802a2b8

08009cd4 <lv_draw_rect>:
 * @param coords the coordinates of the rectangle
 * @param mask the rectangle will be drawn only in this mask
 * @param dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_rect(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)
{
 8009cd4:	b508      	push	{r3, lr}
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8009cd6:	88d3      	ldrh	r3, [r2, #6]
 8009cd8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 8009cdc:	eba3 030c 	sub.w	r3, r3, ip
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dd0b      	ble.n	8009d02 <lv_draw_rect+0x2e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009cea:	8893      	ldrh	r3, [r2, #4]
 8009cec:	f8b2 c000 	ldrh.w	ip, [r2]
 8009cf0:	eba3 030c 	sub.w	r3, r3, ip
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	b21b      	sxth	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd01      	ble.n	8009d02 <lv_draw_rect+0x2e>

    draw_ctx->draw_rect(draw_ctx, dsc, coords);
 8009cfe:	6903      	ldr	r3, [r0, #16]
 8009d00:	4798      	blx	r3

    LV_ASSERT_MEM_INTEGRITY();
}
 8009d02:	bd08      	pop	{r3, pc}

08009d04 <lv_draw_sw_wait_for_finish>:

void lv_draw_sw_wait_for_finish(lv_draw_ctx_t * draw_ctx)
{
    LV_UNUSED(draw_ctx);
    /*Nothing to wait for*/
}
 8009d04:	4770      	bx	lr

08009d06 <lv_draw_sw_buffer_copy>:

void lv_draw_sw_buffer_copy(lv_draw_ctx_t * draw_ctx,
                            void * dest_buf, lv_coord_t dest_stride, const lv_area_t * dest_area,
                            void * src_buf, lv_coord_t src_stride, const lv_area_t * src_area)
{
 8009d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	4698      	mov	r8, r3
 8009d0e:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 8009d12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28

    lv_color_t * dest_bufc =  dest_buf;
    lv_color_t * src_bufc =  src_buf;

    /*Got the first pixel of each buffer*/
    dest_bufc += dest_stride * dest_area->y1;
 8009d14:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    dest_bufc += dest_area->x1;
 8009d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d1c:	fb04 3009 	mla	r0, r4, r9, r3
 8009d20:	eb01 0640 	add.w	r6, r1, r0, lsl #1

    src_bufc += src_stride * src_area->y1;
 8009d24:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
    src_bufc += src_area->x1;
 8009d28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009d2c:	fb01 220a 	mla	r2, r1, sl, r2
 8009d30:	9d08      	ldr	r5, [sp, #32]
 8009d32:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8009d36:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	1aff      	subs	r7, r7, r3
 8009d3e:	b2bf      	uxth	r7, r7
 8009d40:	3701      	adds	r7, #1
 8009d42:	b23f      	sxth	r7, r7

    uint32_t line_length = lv_area_get_width(dest_area) * sizeof(lv_color_t);
 8009d44:	007f      	lsls	r7, r7, #1
    lv_coord_t y;
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8009d46:	e00a      	b.n	8009d5e <lv_draw_sw_buffer_copy+0x58>
        lv_memcpy(dest_bufc, src_bufc, line_length);
 8009d48:	463a      	mov	r2, r7
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f00c fecb 	bl	8016ae8 <lv_memcpy>
        dest_bufc += dest_stride;
 8009d52:	eb06 0649 	add.w	r6, r6, r9, lsl #1
        src_bufc += src_stride;
 8009d56:	eb05 054a 	add.w	r5, r5, sl, lsl #1
    for(y = dest_area->y1; y <= dest_area->y2; y++) {
 8009d5a:	3401      	adds	r4, #1
 8009d5c:	b224      	sxth	r4, r4
 8009d5e:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8009d62:	42a1      	cmp	r1, r4
 8009d64:	daf0      	bge.n	8009d48 <lv_draw_sw_buffer_copy+0x42>
    }
}
 8009d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009d6c <lv_draw_sw_init_ctx>:
{
 8009d6c:	b510      	push	{r4, lr}
 8009d6e:	460c      	mov	r4, r1
    lv_memset_00(draw_sw_ctx, sizeof(lv_draw_sw_ctx_t));
 8009d70:	2158      	movs	r1, #88	@ 0x58
 8009d72:	4620      	mov	r0, r4
 8009d74:	f00c ffa6 	bl	8016cc4 <lv_memset_00>
    draw_sw_ctx->base_draw.draw_arc = lv_draw_sw_arc;
 8009d78:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <lv_draw_sw_init_ctx+0x50>)
 8009d7a:	6163      	str	r3, [r4, #20]
    draw_sw_ctx->base_draw.draw_rect = lv_draw_sw_rect;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	@ (8009dc0 <lv_draw_sw_init_ctx+0x54>)
 8009d7e:	6123      	str	r3, [r4, #16]
    draw_sw_ctx->base_draw.draw_bg = lv_draw_sw_bg;
 8009d80:	4b10      	ldr	r3, [pc, #64]	@ (8009dc4 <lv_draw_sw_init_ctx+0x58>)
 8009d82:	6323      	str	r3, [r4, #48]	@ 0x30
    draw_sw_ctx->base_draw.draw_letter = lv_draw_sw_letter;
 8009d84:	4b10      	ldr	r3, [pc, #64]	@ (8009dc8 <lv_draw_sw_init_ctx+0x5c>)
 8009d86:	6223      	str	r3, [r4, #32]
    draw_sw_ctx->base_draw.draw_img_decoded = lv_draw_sw_img_decoded;
 8009d88:	4b10      	ldr	r3, [pc, #64]	@ (8009dcc <lv_draw_sw_init_ctx+0x60>)
 8009d8a:	61a3      	str	r3, [r4, #24]
    draw_sw_ctx->base_draw.draw_line = lv_draw_sw_line;
 8009d8c:	4b10      	ldr	r3, [pc, #64]	@ (8009dd0 <lv_draw_sw_init_ctx+0x64>)
 8009d8e:	6263      	str	r3, [r4, #36]	@ 0x24
    draw_sw_ctx->base_draw.draw_polygon = lv_draw_sw_polygon;
 8009d90:	4b10      	ldr	r3, [pc, #64]	@ (8009dd4 <lv_draw_sw_init_ctx+0x68>)
 8009d92:	62a3      	str	r3, [r4, #40]	@ 0x28
    draw_sw_ctx->base_draw.draw_transform = lv_draw_sw_transform;
 8009d94:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <lv_draw_sw_init_ctx+0x6c>)
 8009d96:	62e3      	str	r3, [r4, #44]	@ 0x2c
    draw_sw_ctx->base_draw.wait_for_finish = lv_draw_sw_wait_for_finish;
 8009d98:	4b10      	ldr	r3, [pc, #64]	@ (8009ddc <lv_draw_sw_init_ctx+0x70>)
 8009d9a:	6363      	str	r3, [r4, #52]	@ 0x34
    draw_sw_ctx->base_draw.buffer_copy = lv_draw_sw_buffer_copy;
 8009d9c:	4b10      	ldr	r3, [pc, #64]	@ (8009de0 <lv_draw_sw_init_ctx+0x74>)
 8009d9e:	63a3      	str	r3, [r4, #56]	@ 0x38
    draw_sw_ctx->base_draw.layer_init = lv_draw_sw_layer_create;
 8009da0:	4b10      	ldr	r3, [pc, #64]	@ (8009de4 <lv_draw_sw_init_ctx+0x78>)
 8009da2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    draw_sw_ctx->base_draw.layer_adjust = lv_draw_sw_layer_adjust;
 8009da4:	4b10      	ldr	r3, [pc, #64]	@ (8009de8 <lv_draw_sw_init_ctx+0x7c>)
 8009da6:	6423      	str	r3, [r4, #64]	@ 0x40
    draw_sw_ctx->base_draw.layer_blend = lv_draw_sw_layer_blend;
 8009da8:	4b10      	ldr	r3, [pc, #64]	@ (8009dec <lv_draw_sw_init_ctx+0x80>)
 8009daa:	6463      	str	r3, [r4, #68]	@ 0x44
    draw_sw_ctx->base_draw.layer_destroy = lv_draw_sw_layer_destroy;
 8009dac:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <lv_draw_sw_init_ctx+0x84>)
 8009dae:	64a3      	str	r3, [r4, #72]	@ 0x48
    draw_sw_ctx->blend = lv_draw_sw_blend_basic;
 8009db0:	4b10      	ldr	r3, [pc, #64]	@ (8009df4 <lv_draw_sw_init_ctx+0x88>)
 8009db2:	6563      	str	r3, [r4, #84]	@ 0x54
    draw_ctx->layer_instance_size = sizeof(lv_draw_sw_layer_ctx_t);
 8009db4:	232c      	movs	r3, #44	@ 0x2c
 8009db6:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8009db8:	bd10      	pop	{r4, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800a741 	.word	0x0800a741
 8009dc0:	0800f3e5 	.word	0x0800f3e5
 8009dc4:	0800ec89 	.word	0x0800ec89
 8009dc8:	0800c87d 	.word	0x0800c87d
 8009dcc:	0800bfef 	.word	0x0800bfef
 8009dd0:	0800d071 	.word	0x0800d071
 8009dd4:	0800d219 	.word	0x0800d219
 8009dd8:	0800fa09 	.word	0x0800fa09
 8009ddc:	08009d05 	.word	0x08009d05
 8009de0:	08009d07 	.word	0x08009d07
 8009de4:	0800c365 	.word	0x0800c365
 8009de8:	0800c46d 	.word	0x0800c46d
 8009dec:	0800c4c7 	.word	0x0800c4c7
 8009df0:	0800c561 	.word	0x0800c561
 8009df4:	0800b709 	.word	0x0800b709

08009df8 <draw_quarter_0>:
 *   STATIC FUNCTIONS
 **********************/

#if LV_DRAW_COMPLEX
static void draw_quarter_0(quarter_draw_dsc_t * q)
{
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 8009dfe:	6983      	ldr	r3, [r0, #24]
 8009e00:	689d      	ldr	r5, [r3, #8]
    lv_area_t quarter_area;

    if(q->start_quarter == 0 && q->end_quarter == 0 && q->start_angle < q->end_angle) {
 8009e02:	8943      	ldrh	r3, [r0, #10]
 8009e04:	b92b      	cbnz	r3, 8009e12 <draw_quarter_0+0x1a>
 8009e06:	8982      	ldrh	r2, [r0, #12]
 8009e08:	b91a      	cbnz	r2, 8009e12 <draw_quarter_0+0x1a>
 8009e0a:	88c0      	ldrh	r0, [r0, #6]
 8009e0c:	8922      	ldrh	r2, [r4, #8]
 8009e0e:	4290      	cmp	r0, r2
 8009e10:	d30e      	bcc.n	8009e30 <draw_quarter_0+0x38>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    else if(q->start_quarter == 0 || q->end_quarter == 0) {
 8009e12:	b11b      	cbz	r3, 8009e1c <draw_quarter_0+0x24>
 8009e14:	89a2      	ldrh	r2, [r4, #12]
 8009e16:	2a00      	cmp	r2, #0
 8009e18:	f040 80cd 	bne.w	8009fb6 <draw_quarter_0+0x1be>
        /*Start and/or end arcs here*/
        if(q->start_quarter == 0) {
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d056      	beq.n	8009ece <draw_quarter_0+0xd6>
            if(ok) {
                q->draw_ctx->clip_area = &quarter_area;
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
            }
        }
        if(q->end_quarter == 0) {
 8009e20:	89a3      	ldrh	r3, [r4, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 808d 	beq.w	8009f42 <draw_quarter_0+0x14a>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 8009e28:	69a3      	ldr	r3, [r4, #24]
 8009e2a:	609d      	str	r5, [r3, #8]
}
 8009e2c:	b002      	add	sp, #8
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	885e      	ldrh	r6, [r3, #2]
 8009e34:	b200      	sxth	r0, r0
 8009e36:	f00c fc4b 	bl	80166d0 <lv_trigo_sin>
 8009e3a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009e3e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	fb03 f000 	mul.w	r0, r3, r0
 8009e48:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009e4c:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	881e      	ldrh	r6, [r3, #0]
 8009e54:	88e0      	ldrh	r0, [r4, #6]
 8009e56:	305a      	adds	r0, #90	@ 0x5a
 8009e58:	b200      	sxth	r0, r0
 8009e5a:	f00c fc39 	bl	80166d0 <lv_trigo_sin>
 8009e5e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009e62:	fb03 f000 	mul.w	r0, r3, r0
 8009e66:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009e6a:	f8ad 6004 	strh.w	r6, [sp, #4]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009e6e:	6823      	ldr	r3, [r4, #0]
 8009e70:	885e      	ldrh	r6, [r3, #2]
 8009e72:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8009e76:	f00c fc2b 	bl	80166d0 <lv_trigo_sin>
 8009e7a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009e7e:	fb03 f000 	mul.w	r0, r3, r0
 8009e82:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009e86:	f8ad 6006 	strh.w	r6, [sp, #6]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	881e      	ldrh	r6, [r3, #0]
 8009e8e:	8920      	ldrh	r0, [r4, #8]
 8009e90:	305a      	adds	r0, #90	@ 0x5a
 8009e92:	b200      	sxth	r0, r0
 8009e94:	f00c fc1c 	bl	80166d0 <lv_trigo_sin>
 8009e98:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009e9c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	fb03 f000 	mul.w	r0, r3, r0
 8009ea6:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009eaa:	f8ad 6000 	strh.w	r6, [sp]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4669      	mov	r1, sp
 8009eb2:	4668      	mov	r0, sp
 8009eb4:	f7f7 fd9e 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d0b5      	beq.n	8009e28 <draw_quarter_0+0x30>
            q->draw_ctx->clip_area = &quarter_area;
 8009ebc:	69a3      	ldr	r3, [r4, #24]
 8009ebe:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8009ec2:	6962      	ldr	r2, [r4, #20]
 8009ec4:	6921      	ldr	r1, [r4, #16]
 8009ec6:	69a0      	ldr	r0, [r4, #24]
 8009ec8:	f7ff ff04 	bl	8009cd4 <lv_draw_rect>
 8009ecc:	e7ac      	b.n	8009e28 <draw_quarter_0+0x30>
            quarter_area.x1 = q->center->x;
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009ed4:	f8ad 2000 	strh.w	r2, [sp]
            quarter_area.y2 = q->center->y + q->radius;
 8009ed8:	885a      	ldrh	r2, [r3, #2]
 8009eda:	88a1      	ldrh	r1, [r4, #4]
 8009edc:	440a      	add	r2, r1
 8009ede:	f8ad 2006 	strh.w	r2, [sp, #6]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009ee2:	885e      	ldrh	r6, [r3, #2]
 8009ee4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8009ee8:	f00c fbf2 	bl	80166d0 <lv_trigo_sin>
 8009eec:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009ef0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	fb03 f000 	mul.w	r0, r3, r0
 8009efa:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009efe:	f8ad 6002 	strh.w	r6, [sp, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	881e      	ldrh	r6, [r3, #0]
 8009f06:	88e0      	ldrh	r0, [r4, #6]
 8009f08:	305a      	adds	r0, #90	@ 0x5a
 8009f0a:	b200      	sxth	r0, r0
 8009f0c:	f00c fbe0 	bl	80166d0 <lv_trigo_sin>
 8009f10:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009f14:	fb03 f000 	mul.w	r0, r3, r0
 8009f18:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009f1c:	f8ad 6004 	strh.w	r6, [sp, #4]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009f20:	462a      	mov	r2, r5
 8009f22:	4669      	mov	r1, sp
 8009f24:	4668      	mov	r0, sp
 8009f26:	f7f7 fd65 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f43f af78 	beq.w	8009e20 <draw_quarter_0+0x28>
                q->draw_ctx->clip_area = &quarter_area;
 8009f30:	69a3      	ldr	r3, [r4, #24]
 8009f32:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8009f36:	6962      	ldr	r2, [r4, #20]
 8009f38:	6921      	ldr	r1, [r4, #16]
 8009f3a:	69a0      	ldr	r0, [r4, #24]
 8009f3c:	f7ff feca 	bl	8009cd4 <lv_draw_rect>
 8009f40:	e76e      	b.n	8009e20 <draw_quarter_0+0x28>
            quarter_area.x2 = q->center->x + q->radius;
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	881a      	ldrh	r2, [r3, #0]
 8009f46:	88a1      	ldrh	r1, [r4, #4]
 8009f48:	440a      	add	r2, r1
 8009f4a:	f8ad 2004 	strh.w	r2, [sp, #4]
            quarter_area.y1 = q->center->y;
 8009f4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009f52:	f8ad 2002 	strh.w	r2, [sp, #2]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 8009f56:	885e      	ldrh	r6, [r3, #2]
 8009f58:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8009f5c:	f00c fbb8 	bl	80166d0 <lv_trigo_sin>
 8009f60:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009f64:	fb03 f000 	mul.w	r0, r3, r0
 8009f68:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009f6c:	f8ad 6006 	strh.w	r6, [sp, #6]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	881e      	ldrh	r6, [r3, #0]
 8009f74:	8920      	ldrh	r0, [r4, #8]
 8009f76:	305a      	adds	r0, #90	@ 0x5a
 8009f78:	b200      	sxth	r0, r0
 8009f7a:	f00c fba9 	bl	80166d0 <lv_trigo_sin>
 8009f7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8009f82:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	fb03 f000 	mul.w	r0, r3, r0
 8009f8c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 8009f90:	f8ad 6000 	strh.w	r6, [sp]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009f94:	462a      	mov	r2, r5
 8009f96:	4669      	mov	r1, sp
 8009f98:	4668      	mov	r0, sp
 8009f9a:	f7f7 fd2b 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	f43f af42 	beq.w	8009e28 <draw_quarter_0+0x30>
                q->draw_ctx->clip_area = &quarter_area;
 8009fa4:	69a3      	ldr	r3, [r4, #24]
 8009fa6:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 8009faa:	6962      	ldr	r2, [r4, #20]
 8009fac:	6921      	ldr	r1, [r4, #16]
 8009fae:	69a0      	ldr	r0, [r4, #24]
 8009fb0:	f7ff fe90 	bl	8009cd4 <lv_draw_rect>
 8009fb4:	e738      	b.n	8009e28 <draw_quarter_0+0x30>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d00a      	beq.n	8009fd0 <draw_quarter_0+0x1d8>
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d02f      	beq.n	800a01e <draw_quarter_0+0x226>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d030      	beq.n	800a024 <draw_quarter_0+0x22c>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	f47f af30 	bne.w	8009e28 <draw_quarter_0+0x30>
            (q->start_quarter == 3 && q->end_quarter == 1)) {
 8009fc8:	2a01      	cmp	r2, #1
 8009fca:	f47f af2d 	bne.w	8009e28 <draw_quarter_0+0x30>
 8009fce:	e003      	b.n	8009fd8 <draw_quarter_0+0x1e0>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 0 && q->end_angle < q->start_angle) ||
 8009fd0:	8920      	ldrh	r0, [r4, #8]
 8009fd2:	88e1      	ldrh	r1, [r4, #6]
 8009fd4:	4288      	cmp	r0, r1
 8009fd6:	d2f0      	bcs.n	8009fba <draw_quarter_0+0x1c2>
        quarter_area.x1 = q->center->x;
 8009fd8:	6823      	ldr	r3, [r4, #0]
 8009fda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009fde:	f8ad 2000 	strh.w	r2, [sp]
        quarter_area.y1 = q->center->y;
 8009fe2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009fe6:	f8ad 2002 	strh.w	r2, [sp, #2]
        quarter_area.x2 = q->center->x + q->radius;
 8009fea:	881a      	ldrh	r2, [r3, #0]
 8009fec:	88a1      	ldrh	r1, [r4, #4]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center->y + q->radius;
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	4669      	mov	r1, sp
 800a000:	4668      	mov	r0, sp
 800a002:	f7f7 fcf7 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a006:	2800      	cmp	r0, #0
 800a008:	f43f af0e 	beq.w	8009e28 <draw_quarter_0+0x30>
            q->draw_ctx->clip_area = &quarter_area;
 800a00c:	69a3      	ldr	r3, [r4, #24]
 800a00e:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a012:	6962      	ldr	r2, [r4, #20]
 800a014:	6921      	ldr	r1, [r4, #16]
 800a016:	69a0      	ldr	r0, [r4, #24]
 800a018:	f7ff fe5c 	bl	8009cd4 <lv_draw_rect>
 800a01c:	e704      	b.n	8009e28 <draw_quarter_0+0x30>
            (q->start_quarter == 2 && q->end_quarter == 1) ||
 800a01e:	2a01      	cmp	r2, #1
 800a020:	d1cd      	bne.n	8009fbe <draw_quarter_0+0x1c6>
 800a022:	e7d9      	b.n	8009fd8 <draw_quarter_0+0x1e0>
            (q->start_quarter == 3 && q->end_quarter == 2) ||
 800a024:	2a02      	cmp	r2, #2
 800a026:	d1cc      	bne.n	8009fc2 <draw_quarter_0+0x1ca>
 800a028:	e7d6      	b.n	8009fd8 <draw_quarter_0+0x1e0>

0800a02a <draw_quarter_1>:

static void draw_quarter_1(quarter_draw_dsc_t * q)
{
 800a02a:	b570      	push	{r4, r5, r6, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 800a030:	6983      	ldr	r3, [r0, #24]
 800a032:	689d      	ldr	r5, [r3, #8]
    lv_area_t quarter_area;

    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800a034:	8943      	ldrh	r3, [r0, #10]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d014      	beq.n	800a064 <draw_quarter_1+0x3a>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    else if(q->start_quarter == 1 || q->end_quarter == 1) {
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d067      	beq.n	800a10e <draw_quarter_1+0xe4>
 800a03e:	89a2      	ldrh	r2, [r4, #12]
 800a040:	2a01      	cmp	r2, #1
 800a042:	d064      	beq.n	800a10e <draw_quarter_1+0xe4>
                q->draw_ctx->clip_area = &quarter_area;
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 800a044:	4293      	cmp	r3, r2
 800a046:	f000 80dd 	beq.w	800a204 <draw_quarter_1+0x1da>
 800a04a:	b913      	cbnz	r3, 800a052 <draw_quarter_1+0x28>
            (q->start_quarter == 0 && q->end_quarter == 2) ||
 800a04c:	2a02      	cmp	r2, #2
 800a04e:	f000 80de 	beq.w	800a20e <draw_quarter_1+0x1e4>
 800a052:	b913      	cbnz	r3, 800a05a <draw_quarter_1+0x30>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800a054:	2a03      	cmp	r2, #3
 800a056:	f000 80da 	beq.w	800a20e <draw_quarter_1+0x1e4>
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d15c      	bne.n	800a118 <draw_quarter_1+0xee>
            (q->start_quarter == 3 && q->end_quarter == 2)) {
 800a05e:	2a02      	cmp	r2, #2
 800a060:	d15a      	bne.n	800a118 <draw_quarter_1+0xee>
 800a062:	e0d4      	b.n	800a20e <draw_quarter_1+0x1e4>
    if(q->start_quarter == 1 && q->end_quarter == 1 && q->start_angle < q->end_angle) {
 800a064:	8982      	ldrh	r2, [r0, #12]
 800a066:	2a01      	cmp	r2, #1
 800a068:	d1e7      	bne.n	800a03a <draw_quarter_1+0x10>
 800a06a:	88c0      	ldrh	r0, [r0, #6]
 800a06c:	8922      	ldrh	r2, [r4, #8]
 800a06e:	4290      	cmp	r0, r2
 800a070:	d2e3      	bcs.n	800a03a <draw_quarter_1+0x10>
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	885e      	ldrh	r6, [r3, #2]
 800a076:	b200      	sxth	r0, r0
 800a078:	f00c fb2a 	bl	80166d0 <lv_trigo_sin>
 800a07c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a080:	fb03 f000 	mul.w	r0, r3, r0
 800a084:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a088:	f8ad 6006 	strh.w	r6, [sp, #6]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	881e      	ldrh	r6, [r3, #0]
 800a090:	88e0      	ldrh	r0, [r4, #6]
 800a092:	305a      	adds	r0, #90	@ 0x5a
 800a094:	b200      	sxth	r0, r0
 800a096:	f00c fb1b 	bl	80166d0 <lv_trigo_sin>
 800a09a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a09e:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a0a2:	1a9b      	subs	r3, r3, r2
 800a0a4:	fb03 f000 	mul.w	r0, r3, r0
 800a0a8:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a0ac:	f8ad 6004 	strh.w	r6, [sp, #4]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	885e      	ldrh	r6, [r3, #2]
 800a0b4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a0b8:	f00c fb0a 	bl	80166d0 <lv_trigo_sin>
 800a0bc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a0c0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a0c4:	1a9b      	subs	r3, r3, r2
 800a0c6:	fb03 f000 	mul.w	r0, r3, r0
 800a0ca:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a0ce:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	881e      	ldrh	r6, [r3, #0]
 800a0d6:	8920      	ldrh	r0, [r4, #8]
 800a0d8:	305a      	adds	r0, #90	@ 0x5a
 800a0da:	b200      	sxth	r0, r0
 800a0dc:	f00c faf8 	bl	80166d0 <lv_trigo_sin>
 800a0e0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a0e4:	fb03 f000 	mul.w	r0, r3, r0
 800a0e8:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a0ec:	f8ad 6000 	strh.w	r6, [sp]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	4669      	mov	r1, sp
 800a0f4:	4668      	mov	r0, sp
 800a0f6:	f7f7 fc7d 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a0fa:	b168      	cbz	r0, 800a118 <draw_quarter_1+0xee>
            q->draw_ctx->clip_area = &quarter_area;
 800a0fc:	69a3      	ldr	r3, [r4, #24]
 800a0fe:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a102:	6962      	ldr	r2, [r4, #20]
 800a104:	6921      	ldr	r1, [r4, #16]
 800a106:	69a0      	ldr	r0, [r4, #24]
 800a108:	f7ff fde4 	bl	8009cd4 <lv_draw_rect>
 800a10c:	e004      	b.n	800a118 <draw_quarter_1+0xee>
        if(q->start_quarter == 1) {
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d006      	beq.n	800a120 <draw_quarter_1+0xf6>
        if(q->end_quarter == 1) {
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d03c      	beq.n	800a192 <draw_quarter_1+0x168>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 800a118:	69a3      	ldr	r3, [r4, #24]
 800a11a:	609d      	str	r5, [r3, #8]
}
 800a11c:	b002      	add	sp, #8
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x1 = q->center->x - q->radius;
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	881a      	ldrh	r2, [r3, #0]
 800a124:	88a1      	ldrh	r1, [r4, #4]
 800a126:	1a52      	subs	r2, r2, r1
 800a128:	f8ad 2000 	strh.w	r2, [sp]
            quarter_area.y1 = q->center->y;
 800a12c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a130:	f8ad 2002 	strh.w	r2, [sp, #2]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a134:	885e      	ldrh	r6, [r3, #2]
 800a136:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a13a:	f00c fac9 	bl	80166d0 <lv_trigo_sin>
 800a13e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a142:	fb03 f000 	mul.w	r0, r3, r0
 800a146:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a14a:	f8ad 6006 	strh.w	r6, [sp, #6]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	881e      	ldrh	r6, [r3, #0]
 800a152:	88e0      	ldrh	r0, [r4, #6]
 800a154:	305a      	adds	r0, #90	@ 0x5a
 800a156:	b200      	sxth	r0, r0
 800a158:	f00c faba 	bl	80166d0 <lv_trigo_sin>
 800a15c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a160:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	fb03 f000 	mul.w	r0, r3, r0
 800a16a:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a16e:	f8ad 6004 	strh.w	r6, [sp, #4]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a172:	462a      	mov	r2, r5
 800a174:	4669      	mov	r1, sp
 800a176:	4668      	mov	r0, sp
 800a178:	f7f7 fc3c 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d0c8      	beq.n	800a112 <draw_quarter_1+0xe8>
                q->draw_ctx->clip_area = &quarter_area;
 800a180:	69a3      	ldr	r3, [r4, #24]
 800a182:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a186:	6962      	ldr	r2, [r4, #20]
 800a188:	6921      	ldr	r1, [r4, #16]
 800a18a:	69a0      	ldr	r0, [r4, #24]
 800a18c:	f7ff fda2 	bl	8009cd4 <lv_draw_rect>
 800a190:	e7bf      	b.n	800a112 <draw_quarter_1+0xe8>
            quarter_area.x2 = q->center->x - 1;
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	881a      	ldrh	r2, [r3, #0]
 800a196:	3a01      	subs	r2, #1
 800a198:	f8ad 2004 	strh.w	r2, [sp, #4]
            quarter_area.y2 = q->center->y + q->radius;
 800a19c:	885a      	ldrh	r2, [r3, #2]
 800a19e:	88a1      	ldrh	r1, [r4, #4]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	f8ad 2006 	strh.w	r2, [sp, #6]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a1a6:	885e      	ldrh	r6, [r3, #2]
 800a1a8:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a1ac:	f00c fa90 	bl	80166d0 <lv_trigo_sin>
 800a1b0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a1b4:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a1b8:	1a9b      	subs	r3, r3, r2
 800a1ba:	fb03 f000 	mul.w	r0, r3, r0
 800a1be:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a1c2:	f8ad 6002 	strh.w	r6, [sp, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	881e      	ldrh	r6, [r3, #0]
 800a1ca:	8920      	ldrh	r0, [r4, #8]
 800a1cc:	305a      	adds	r0, #90	@ 0x5a
 800a1ce:	b200      	sxth	r0, r0
 800a1d0:	f00c fa7e 	bl	80166d0 <lv_trigo_sin>
 800a1d4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a1d8:	fb03 f000 	mul.w	r0, r3, r0
 800a1dc:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a1e0:	f8ad 6000 	strh.w	r6, [sp]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4669      	mov	r1, sp
 800a1e8:	4668      	mov	r0, sp
 800a1ea:	f7f7 fc03 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d092      	beq.n	800a118 <draw_quarter_1+0xee>
                q->draw_ctx->clip_area = &quarter_area;
 800a1f2:	69a3      	ldr	r3, [r4, #24]
 800a1f4:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a1f8:	6962      	ldr	r2, [r4, #20]
 800a1fa:	6921      	ldr	r1, [r4, #16]
 800a1fc:	69a0      	ldr	r0, [r4, #24]
 800a1fe:	f7ff fd69 	bl	8009cd4 <lv_draw_rect>
 800a202:	e789      	b.n	800a118 <draw_quarter_1+0xee>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 1 && q->end_angle < q->start_angle) ||
 800a204:	8920      	ldrh	r0, [r4, #8]
 800a206:	88e1      	ldrh	r1, [r4, #6]
 800a208:	4288      	cmp	r0, r1
 800a20a:	f4bf af1e 	bcs.w	800a04a <draw_quarter_1+0x20>
        quarter_area.x1 = q->center->x - q->radius;
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	881a      	ldrh	r2, [r3, #0]
 800a212:	88a1      	ldrh	r1, [r4, #4]
 800a214:	1a52      	subs	r2, r2, r1
 800a216:	f8ad 2000 	strh.w	r2, [sp]
        quarter_area.y1 = q->center->y;
 800a21a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a21e:	f8ad 2002 	strh.w	r2, [sp, #2]
        quarter_area.x2 = q->center->x - 1;
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	3a01      	subs	r2, #1
 800a226:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center->y + q->radius;
 800a22a:	885b      	ldrh	r3, [r3, #2]
 800a22c:	440b      	add	r3, r1
 800a22e:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a232:	462a      	mov	r2, r5
 800a234:	4669      	mov	r1, sp
 800a236:	4668      	mov	r0, sp
 800a238:	f7f7 fbdc 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f43f af6b 	beq.w	800a118 <draw_quarter_1+0xee>
            q->draw_ctx->clip_area = &quarter_area;
 800a242:	69a3      	ldr	r3, [r4, #24]
 800a244:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a248:	6962      	ldr	r2, [r4, #20]
 800a24a:	6921      	ldr	r1, [r4, #16]
 800a24c:	69a0      	ldr	r0, [r4, #24]
 800a24e:	f7ff fd41 	bl	8009cd4 <lv_draw_rect>
 800a252:	e761      	b.n	800a118 <draw_quarter_1+0xee>

0800a254 <draw_quarter_2>:

static void draw_quarter_2(quarter_draw_dsc_t * q)
{
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 800a25a:	6983      	ldr	r3, [r0, #24]
 800a25c:	689d      	ldr	r5, [r3, #8]
    lv_area_t quarter_area;

    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800a25e:	8943      	ldrh	r3, [r0, #10]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d013      	beq.n	800a28c <draw_quarter_2+0x38>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    else if(q->start_quarter == 2 || q->end_quarter == 2) {
 800a264:	2b02      	cmp	r3, #2
 800a266:	d066      	beq.n	800a336 <draw_quarter_2+0xe2>
 800a268:	89a2      	ldrh	r2, [r4, #12]
 800a26a:	2a02      	cmp	r2, #2
 800a26c:	d063      	beq.n	800a336 <draw_quarter_2+0xe2>
                q->draw_ctx->clip_area = &quarter_area;
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 800a26e:	4293      	cmp	r3, r2
 800a270:	f000 80dc 	beq.w	800a42c <draw_quarter_2+0x1d8>
 800a274:	b913      	cbnz	r3, 800a27c <draw_quarter_2+0x28>
            (q->start_quarter == 0 && q->end_quarter == 3) ||
 800a276:	2a03      	cmp	r2, #3
 800a278:	f000 80dd 	beq.w	800a436 <draw_quarter_2+0x1e2>
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	f000 80fd 	beq.w	800a47c <draw_quarter_2+0x228>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 800a282:	2b01      	cmp	r3, #1
 800a284:	d15c      	bne.n	800a340 <draw_quarter_2+0xec>
            (q->start_quarter == 1 && q->end_quarter == 0)) {
 800a286:	2a00      	cmp	r2, #0
 800a288:	d15a      	bne.n	800a340 <draw_quarter_2+0xec>
 800a28a:	e0d4      	b.n	800a436 <draw_quarter_2+0x1e2>
    if(q->start_quarter == 2 && q->end_quarter == 2 && q->start_angle < q->end_angle) {
 800a28c:	8982      	ldrh	r2, [r0, #12]
 800a28e:	2a02      	cmp	r2, #2
 800a290:	d1e8      	bne.n	800a264 <draw_quarter_2+0x10>
 800a292:	88c0      	ldrh	r0, [r0, #6]
 800a294:	8922      	ldrh	r2, [r4, #8]
 800a296:	4290      	cmp	r0, r2
 800a298:	d2e4      	bcs.n	800a264 <draw_quarter_2+0x10>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	881e      	ldrh	r6, [r3, #0]
 800a29e:	305a      	adds	r0, #90	@ 0x5a
 800a2a0:	b200      	sxth	r0, r0
 800a2a2:	f00c fa15 	bl	80166d0 <lv_trigo_sin>
 800a2a6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a2aa:	fb03 f000 	mul.w	r0, r3, r0
 800a2ae:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a2b2:	f8ad 6000 	strh.w	r6, [sp]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	885e      	ldrh	r6, [r3, #2]
 800a2ba:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a2be:	f00c fa07 	bl	80166d0 <lv_trigo_sin>
 800a2c2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a2c6:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	fb03 f000 	mul.w	r0, r3, r0
 800a2d0:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a2d4:	f8ad 6006 	strh.w	r6, [sp, #6]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * q->radius) >> LV_TRIGO_SHIFT);
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	885e      	ldrh	r6, [r3, #2]
 800a2dc:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a2e0:	f00c f9f6 	bl	80166d0 <lv_trigo_sin>
 800a2e4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a2e8:	fb03 f000 	mul.w	r0, r3, r0
 800a2ec:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a2f0:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	881e      	ldrh	r6, [r3, #0]
 800a2f8:	8920      	ldrh	r0, [r4, #8]
 800a2fa:	305a      	adds	r0, #90	@ 0x5a
 800a2fc:	b200      	sxth	r0, r0
 800a2fe:	f00c f9e7 	bl	80166d0 <lv_trigo_sin>
 800a302:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a306:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a30a:	1a9b      	subs	r3, r3, r2
 800a30c:	fb03 f000 	mul.w	r0, r3, r0
 800a310:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a314:	f8ad 6004 	strh.w	r6, [sp, #4]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a318:	462a      	mov	r2, r5
 800a31a:	4669      	mov	r1, sp
 800a31c:	4668      	mov	r0, sp
 800a31e:	f7f7 fb69 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a322:	b168      	cbz	r0, 800a340 <draw_quarter_2+0xec>
            q->draw_ctx->clip_area = &quarter_area;
 800a324:	69a3      	ldr	r3, [r4, #24]
 800a326:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a32a:	6962      	ldr	r2, [r4, #20]
 800a32c:	6921      	ldr	r1, [r4, #16]
 800a32e:	69a0      	ldr	r0, [r4, #24]
 800a330:	f7ff fcd0 	bl	8009cd4 <lv_draw_rect>
 800a334:	e004      	b.n	800a340 <draw_quarter_2+0xec>
        if(q->start_quarter == 2) {
 800a336:	2b02      	cmp	r3, #2
 800a338:	d006      	beq.n	800a348 <draw_quarter_2+0xf4>
        if(q->end_quarter == 2) {
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d03c      	beq.n	800a3ba <draw_quarter_2+0x166>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    q->draw_ctx->clip_area = clip_area_ori;
 800a340:	69a3      	ldr	r3, [r4, #24]
 800a342:	609d      	str	r5, [r3, #8]
}
 800a344:	b002      	add	sp, #8
 800a346:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x2 = q->center->x - 1;
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	881a      	ldrh	r2, [r3, #0]
 800a34c:	3a01      	subs	r2, #1
 800a34e:	f8ad 2004 	strh.w	r2, [sp, #4]
            quarter_area.y1 = q->center->y - q->radius;
 800a352:	885a      	ldrh	r2, [r3, #2]
 800a354:	88a1      	ldrh	r1, [r4, #4]
 800a356:	1a52      	subs	r2, r2, r1
 800a358:	f8ad 2002 	strh.w	r2, [sp, #2]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a35c:	881e      	ldrh	r6, [r3, #0]
 800a35e:	88e0      	ldrh	r0, [r4, #6]
 800a360:	305a      	adds	r0, #90	@ 0x5a
 800a362:	b200      	sxth	r0, r0
 800a364:	f00c f9b4 	bl	80166d0 <lv_trigo_sin>
 800a368:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a36c:	fb03 f000 	mul.w	r0, r3, r0
 800a370:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a374:	f8ad 6000 	strh.w	r6, [sp]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a378:	6823      	ldr	r3, [r4, #0]
 800a37a:	885e      	ldrh	r6, [r3, #2]
 800a37c:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a380:	f00c f9a6 	bl	80166d0 <lv_trigo_sin>
 800a384:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a388:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a38c:	1a9b      	subs	r3, r3, r2
 800a38e:	fb03 f000 	mul.w	r0, r3, r0
 800a392:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a396:	f8ad 6006 	strh.w	r6, [sp, #6]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a39a:	462a      	mov	r2, r5
 800a39c:	4669      	mov	r1, sp
 800a39e:	4668      	mov	r0, sp
 800a3a0:	f7f7 fb28 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d0c8      	beq.n	800a33a <draw_quarter_2+0xe6>
                q->draw_ctx->clip_area = &quarter_area;
 800a3a8:	69a3      	ldr	r3, [r4, #24]
 800a3aa:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a3ae:	6962      	ldr	r2, [r4, #20]
 800a3b0:	6921      	ldr	r1, [r4, #16]
 800a3b2:	69a0      	ldr	r0, [r4, #24]
 800a3b4:	f7ff fc8e 	bl	8009cd4 <lv_draw_rect>
 800a3b8:	e7bf      	b.n	800a33a <draw_quarter_2+0xe6>
            quarter_area.x1 = q->center->x - q->radius;
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	881a      	ldrh	r2, [r3, #0]
 800a3be:	88a1      	ldrh	r1, [r4, #4]
 800a3c0:	1a52      	subs	r2, r2, r1
 800a3c2:	f8ad 2000 	strh.w	r2, [sp]
            quarter_area.y2 = q->center->y - 1;
 800a3c6:	885a      	ldrh	r2, [r3, #2]
 800a3c8:	3a01      	subs	r2, #1
 800a3ca:	f8ad 2006 	strh.w	r2, [sp, #6]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a3ce:	881e      	ldrh	r6, [r3, #0]
 800a3d0:	8920      	ldrh	r0, [r4, #8]
 800a3d2:	305a      	adds	r0, #90	@ 0x5a
 800a3d4:	b200      	sxth	r0, r0
 800a3d6:	f00c f97b 	bl	80166d0 <lv_trigo_sin>
 800a3da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a3de:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	fb03 f000 	mul.w	r0, r3, r0
 800a3e8:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a3ec:	f8ad 6004 	strh.w	r6, [sp, #4]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	885e      	ldrh	r6, [r3, #2]
 800a3f4:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a3f8:	f00c f96a 	bl	80166d0 <lv_trigo_sin>
 800a3fc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a400:	fb03 f000 	mul.w	r0, r3, r0
 800a404:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a408:	f8ad 6002 	strh.w	r6, [sp, #2]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a40c:	462a      	mov	r2, r5
 800a40e:	4669      	mov	r1, sp
 800a410:	4668      	mov	r0, sp
 800a412:	f7f7 faef 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a416:	2800      	cmp	r0, #0
 800a418:	d092      	beq.n	800a340 <draw_quarter_2+0xec>
                q->draw_ctx->clip_area = &quarter_area;
 800a41a:	69a3      	ldr	r3, [r4, #24]
 800a41c:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a420:	6962      	ldr	r2, [r4, #20]
 800a422:	6921      	ldr	r1, [r4, #16]
 800a424:	69a0      	ldr	r0, [r4, #24]
 800a426:	f7ff fc55 	bl	8009cd4 <lv_draw_rect>
 800a42a:	e789      	b.n	800a340 <draw_quarter_2+0xec>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 2 && q->end_angle < q->start_angle) ||
 800a42c:	8920      	ldrh	r0, [r4, #8]
 800a42e:	88e1      	ldrh	r1, [r4, #6]
 800a430:	4288      	cmp	r0, r1
 800a432:	f4bf af1f 	bcs.w	800a274 <draw_quarter_2+0x20>
        quarter_area.x1 = q->center->x - q->radius;
 800a436:	6823      	ldr	r3, [r4, #0]
 800a438:	881a      	ldrh	r2, [r3, #0]
 800a43a:	88a1      	ldrh	r1, [r4, #4]
 800a43c:	1a52      	subs	r2, r2, r1
 800a43e:	f8ad 2000 	strh.w	r2, [sp]
        quarter_area.y1 = q->center->y - q->radius;
 800a442:	885a      	ldrh	r2, [r3, #2]
 800a444:	1a52      	subs	r2, r2, r1
 800a446:	f8ad 2002 	strh.w	r2, [sp, #2]
        quarter_area.x2 = q->center->x - 1;
 800a44a:	881a      	ldrh	r2, [r3, #0]
 800a44c:	3a01      	subs	r2, #1
 800a44e:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center->y - 1;
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	3b01      	subs	r3, #1
 800a456:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a45a:	462a      	mov	r2, r5
 800a45c:	4669      	mov	r1, sp
 800a45e:	4668      	mov	r0, sp
 800a460:	f7f7 fac8 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a464:	2800      	cmp	r0, #0
 800a466:	f43f af6b 	beq.w	800a340 <draw_quarter_2+0xec>
            q->draw_ctx->clip_area = &quarter_area;
 800a46a:	69a3      	ldr	r3, [r4, #24]
 800a46c:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a470:	6962      	ldr	r2, [r4, #20]
 800a472:	6921      	ldr	r1, [r4, #16]
 800a474:	69a0      	ldr	r0, [r4, #24]
 800a476:	f7ff fc2d 	bl	8009cd4 <lv_draw_rect>
 800a47a:	e761      	b.n	800a340 <draw_quarter_2+0xec>
            (q->start_quarter == 1 && q->end_quarter == 3) ||
 800a47c:	2a03      	cmp	r2, #3
 800a47e:	f47f af00 	bne.w	800a282 <draw_quarter_2+0x2e>
 800a482:	e7d8      	b.n	800a436 <draw_quarter_2+0x1e2>

0800a484 <draw_quarter_3>:

static void draw_quarter_3(quarter_draw_dsc_t * q)
{
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	4604      	mov	r4, r0
    const lv_area_t * clip_area_ori = q->draw_ctx->clip_area;
 800a48a:	6983      	ldr	r3, [r0, #24]
 800a48c:	689d      	ldr	r5, [r3, #8]
    lv_area_t quarter_area;

    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800a48e:	8943      	ldrh	r3, [r0, #10]
 800a490:	2b03      	cmp	r3, #3
 800a492:	d012      	beq.n	800a4ba <draw_quarter_3+0x36>
        if(ok) {
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }
    else if(q->start_quarter == 3 || q->end_quarter == 3) {
 800a494:	2b03      	cmp	r3, #3
 800a496:	d065      	beq.n	800a564 <draw_quarter_3+0xe0>
 800a498:	89a2      	ldrh	r2, [r4, #12]
 800a49a:	2a03      	cmp	r2, #3
 800a49c:	d062      	beq.n	800a564 <draw_quarter_3+0xe0>
                q->draw_ctx->clip_area = &quarter_area;
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
            }
        }
    }
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	f000 80db 	beq.w	800a65a <draw_quarter_3+0x1d6>
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	f000 8100 	beq.w	800a6aa <draw_quarter_3+0x226>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	f000 8100 	beq.w	800a6b0 <draw_quarter_3+0x22c>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d15c      	bne.n	800a56e <draw_quarter_3+0xea>
            (q->start_quarter == 2 && q->end_quarter == 1)) {
 800a4b4:	2a01      	cmp	r2, #1
 800a4b6:	d15a      	bne.n	800a56e <draw_quarter_3+0xea>
 800a4b8:	e0d4      	b.n	800a664 <draw_quarter_3+0x1e0>
    if(q->start_quarter == 3 && q->end_quarter == 3 && q->start_angle < q->end_angle) {
 800a4ba:	8982      	ldrh	r2, [r0, #12]
 800a4bc:	2a03      	cmp	r2, #3
 800a4be:	d1e9      	bne.n	800a494 <draw_quarter_3+0x10>
 800a4c0:	88c0      	ldrh	r0, [r0, #6]
 800a4c2:	8922      	ldrh	r2, [r4, #8]
 800a4c4:	4290      	cmp	r0, r2
 800a4c6:	d2e5      	bcs.n	800a494 <draw_quarter_3+0x10>
        quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	881e      	ldrh	r6, [r3, #0]
 800a4cc:	305a      	adds	r0, #90	@ 0x5a
 800a4ce:	b200      	sxth	r0, r0
 800a4d0:	f00c f8fe 	bl	80166d0 <lv_trigo_sin>
 800a4d4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a4d8:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	fb03 f000 	mul.w	r0, r3, r0
 800a4e2:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a4e6:	f8ad 6000 	strh.w	r6, [sp]
        quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	885e      	ldrh	r6, [r3, #2]
 800a4ee:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a4f2:	f00c f8ed 	bl	80166d0 <lv_trigo_sin>
 800a4f6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a4fa:	fb03 f000 	mul.w	r0, r3, r0
 800a4fe:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a502:	f8ad 6002 	strh.w	r6, [sp, #2]
        quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	881e      	ldrh	r6, [r3, #0]
 800a50a:	8920      	ldrh	r0, [r4, #8]
 800a50c:	305a      	adds	r0, #90	@ 0x5a
 800a50e:	b200      	sxth	r0, r0
 800a510:	f00c f8de 	bl	80166d0 <lv_trigo_sin>
 800a514:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a518:	fb03 f000 	mul.w	r0, r3, r0
 800a51c:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a520:	f8ad 6004 	strh.w	r6, [sp, #4]
        quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	885e      	ldrh	r6, [r3, #2]
 800a528:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a52c:	f00c f8d0 	bl	80166d0 <lv_trigo_sin>
 800a530:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a534:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a538:	1a9b      	subs	r3, r3, r2
 800a53a:	fb03 f000 	mul.w	r0, r3, r0
 800a53e:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a542:	f8ad 6006 	strh.w	r6, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a546:	462a      	mov	r2, r5
 800a548:	4669      	mov	r1, sp
 800a54a:	4668      	mov	r0, sp
 800a54c:	f7f7 fa52 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a550:	b168      	cbz	r0, 800a56e <draw_quarter_3+0xea>
            q->draw_ctx->clip_area = &quarter_area;
 800a552:	69a3      	ldr	r3, [r4, #24]
 800a554:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a558:	6962      	ldr	r2, [r4, #20]
 800a55a:	6921      	ldr	r1, [r4, #16]
 800a55c:	69a0      	ldr	r0, [r4, #24]
 800a55e:	f7ff fbb9 	bl	8009cd4 <lv_draw_rect>
 800a562:	e004      	b.n	800a56e <draw_quarter_3+0xea>
        if(q->start_quarter == 3) {
 800a564:	2b03      	cmp	r3, #3
 800a566:	d006      	beq.n	800a576 <draw_quarter_3+0xf2>
        if(q->end_quarter == 3) {
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d03c      	beq.n	800a5e8 <draw_quarter_3+0x164>
            q->draw_ctx->clip_area = &quarter_area;
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
        }
    }

    q->draw_ctx->clip_area = clip_area_ori;
 800a56e:	69a3      	ldr	r3, [r4, #24]
 800a570:	609d      	str	r5, [r3, #8]
}
 800a572:	b002      	add	sp, #8
 800a574:	bd70      	pop	{r4, r5, r6, pc}
            quarter_area.x2 = q->center->x + q->radius;
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	881a      	ldrh	r2, [r3, #0]
 800a57a:	88a1      	ldrh	r1, [r4, #4]
 800a57c:	440a      	add	r2, r1
 800a57e:	f8ad 2004 	strh.w	r2, [sp, #4]
            quarter_area.y2 = q->center->y - 1;
 800a582:	885a      	ldrh	r2, [r3, #2]
 800a584:	3a01      	subs	r2, #1
 800a586:	f8ad 2006 	strh.w	r2, [sp, #6]
            quarter_area.x1 = q->center->x + ((lv_trigo_sin(q->start_angle + 90) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a58a:	881e      	ldrh	r6, [r3, #0]
 800a58c:	88e0      	ldrh	r0, [r4, #6]
 800a58e:	305a      	adds	r0, #90	@ 0x5a
 800a590:	b200      	sxth	r0, r0
 800a592:	f00c f89d 	bl	80166d0 <lv_trigo_sin>
 800a596:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a59a:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	fb03 f000 	mul.w	r0, r3, r0
 800a5a4:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a5a8:	f8ad 6000 	strh.w	r6, [sp]
            quarter_area.y1 = q->center->y + ((lv_trigo_sin(q->start_angle) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a5ac:	6823      	ldr	r3, [r4, #0]
 800a5ae:	885e      	ldrh	r6, [r3, #2]
 800a5b0:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 800a5b4:	f00c f88c 	bl	80166d0 <lv_trigo_sin>
 800a5b8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a5bc:	fb03 f000 	mul.w	r0, r3, r0
 800a5c0:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a5c4:	f8ad 6002 	strh.w	r6, [sp, #2]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4669      	mov	r1, sp
 800a5cc:	4668      	mov	r0, sp
 800a5ce:	f7f7 fa11 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0c8      	beq.n	800a568 <draw_quarter_3+0xe4>
                q->draw_ctx->clip_area = &quarter_area;
 800a5d6:	69a3      	ldr	r3, [r4, #24]
 800a5d8:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a5dc:	6962      	ldr	r2, [r4, #20]
 800a5de:	6921      	ldr	r1, [r4, #16]
 800a5e0:	69a0      	ldr	r0, [r4, #24]
 800a5e2:	f7ff fb77 	bl	8009cd4 <lv_draw_rect>
 800a5e6:	e7bf      	b.n	800a568 <draw_quarter_3+0xe4>
            quarter_area.x1 = q->center->x;
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a5ee:	f8ad 2000 	strh.w	r2, [sp]
            quarter_area.y1 = q->center->y - q->radius;
 800a5f2:	885a      	ldrh	r2, [r3, #2]
 800a5f4:	88a1      	ldrh	r1, [r4, #4]
 800a5f6:	1a52      	subs	r2, r2, r1
 800a5f8:	f8ad 2002 	strh.w	r2, [sp, #2]
            quarter_area.x2 = q->center->x + ((lv_trigo_sin(q->end_angle + 90) * (q->radius)) >> LV_TRIGO_SHIFT);
 800a5fc:	881e      	ldrh	r6, [r3, #0]
 800a5fe:	8920      	ldrh	r0, [r4, #8]
 800a600:	305a      	adds	r0, #90	@ 0x5a
 800a602:	b200      	sxth	r0, r0
 800a604:	f00c f864 	bl	80166d0 <lv_trigo_sin>
 800a608:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a60c:	fb03 f000 	mul.w	r0, r3, r0
 800a610:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a614:	f8ad 6004 	strh.w	r6, [sp, #4]
            quarter_area.y2 = q->center->y + ((lv_trigo_sin(q->end_angle) * (q->radius - q->width)) >> LV_TRIGO_SHIFT);
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	885e      	ldrh	r6, [r3, #2]
 800a61c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800a620:	f00c f856 	bl	80166d0 <lv_trigo_sin>
 800a624:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800a628:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 800a62c:	1a9b      	subs	r3, r3, r2
 800a62e:	fb03 f000 	mul.w	r0, r3, r0
 800a632:	eb06 36e0 	add.w	r6, r6, r0, asr #15
 800a636:	f8ad 6006 	strh.w	r6, [sp, #6]
            bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a63a:	462a      	mov	r2, r5
 800a63c:	4669      	mov	r1, sp
 800a63e:	4668      	mov	r0, sp
 800a640:	f7f7 f9d8 	bl	80019f4 <_lv_area_intersect>
            if(ok) {
 800a644:	2800      	cmp	r0, #0
 800a646:	d092      	beq.n	800a56e <draw_quarter_3+0xea>
                q->draw_ctx->clip_area = &quarter_area;
 800a648:	69a3      	ldr	r3, [r4, #24]
 800a64a:	f8c3 d008 	str.w	sp, [r3, #8]
                lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a64e:	6962      	ldr	r2, [r4, #20]
 800a650:	6921      	ldr	r1, [r4, #16]
 800a652:	69a0      	ldr	r0, [r4, #24]
 800a654:	f7ff fb3e 	bl	8009cd4 <lv_draw_rect>
 800a658:	e789      	b.n	800a56e <draw_quarter_3+0xea>
    else if((q->start_quarter == q->end_quarter && q->start_quarter != 3 && q->end_angle < q->start_angle) ||
 800a65a:	8920      	ldrh	r0, [r4, #8]
 800a65c:	88e1      	ldrh	r1, [r4, #6]
 800a65e:	4288      	cmp	r0, r1
 800a660:	f4bf af20 	bcs.w	800a4a4 <draw_quarter_3+0x20>
        quarter_area.x1 = q->center->x;
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a66a:	f8ad 2000 	strh.w	r2, [sp]
        quarter_area.y1 = q->center->y - q->radius;
 800a66e:	8859      	ldrh	r1, [r3, #2]
 800a670:	88a2      	ldrh	r2, [r4, #4]
 800a672:	1a89      	subs	r1, r1, r2
 800a674:	f8ad 1002 	strh.w	r1, [sp, #2]
        quarter_area.x2 = q->center->x + q->radius;
 800a678:	8819      	ldrh	r1, [r3, #0]
 800a67a:	440a      	add	r2, r1
 800a67c:	f8ad 2004 	strh.w	r2, [sp, #4]
        quarter_area.y2 = q->center->y - 1;
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	3b01      	subs	r3, #1
 800a684:	f8ad 3006 	strh.w	r3, [sp, #6]
        bool ok = _lv_area_intersect(&quarter_area, &quarter_area, clip_area_ori);
 800a688:	462a      	mov	r2, r5
 800a68a:	4669      	mov	r1, sp
 800a68c:	4668      	mov	r0, sp
 800a68e:	f7f7 f9b1 	bl	80019f4 <_lv_area_intersect>
        if(ok) {
 800a692:	2800      	cmp	r0, #0
 800a694:	f43f af6b 	beq.w	800a56e <draw_quarter_3+0xea>
            q->draw_ctx->clip_area = &quarter_area;
 800a698:	69a3      	ldr	r3, [r4, #24]
 800a69a:	f8c3 d008 	str.w	sp, [r3, #8]
            lv_draw_rect(q->draw_ctx, q->draw_dsc, q->draw_area);
 800a69e:	6962      	ldr	r2, [r4, #20]
 800a6a0:	6921      	ldr	r1, [r4, #16]
 800a6a2:	69a0      	ldr	r0, [r4, #24]
 800a6a4:	f7ff fb16 	bl	8009cd4 <lv_draw_rect>
 800a6a8:	e761      	b.n	800a56e <draw_quarter_3+0xea>
            (q->start_quarter == 2 && q->end_quarter == 0) ||
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d0da      	beq.n	800a664 <draw_quarter_3+0x1e0>
 800a6ae:	e6fc      	b.n	800a4aa <draw_quarter_3+0x26>
            (q->start_quarter == 1 && q->end_quarter == 0) ||
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	d0d7      	beq.n	800a664 <draw_quarter_3+0x1e0>
 800a6b4:	e6fc      	b.n	800a4b0 <draw_quarter_3+0x2c>

0800a6b6 <get_rounded_area>:

static void get_rounded_area(int16_t angle, lv_coord_t radius, uint8_t thickness, lv_area_t * res_area)
{
 800a6b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	461d      	mov	r5, r3
    const uint8_t ps = 8;
    const uint8_t pa = 127;

    int32_t thick_half = thickness / 2;
 800a6be:	0857      	lsrs	r7, r2, #1
    uint8_t thick_corr = (thickness & 0x01) ? 0 : 1;
 800a6c0:	f082 0601 	eor.w	r6, r2, #1
 800a6c4:	f006 0601 	and.w	r6, r6, #1

    int32_t cir_x;
    int32_t cir_y;

    cir_x = ((radius - thick_half) * lv_trigo_sin(90 - angle)) >> (LV_TRIGO_SHIFT - ps);
 800a6c8:	eba1 0952 	sub.w	r9, r1, r2, lsr #1
 800a6cc:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 800a6d0:	b200      	sxth	r0, r0
 800a6d2:	f00b fffd 	bl	80166d0 <lv_trigo_sin>
 800a6d6:	fb00 f409 	mul.w	r4, r0, r9
 800a6da:	11e4      	asrs	r4, r4, #7
    cir_y = ((radius - thick_half) * lv_trigo_sin(angle)) >> (LV_TRIGO_SHIFT - ps);
 800a6dc:	4640      	mov	r0, r8
 800a6de:	f00b fff7 	bl	80166d0 <lv_trigo_sin>
 800a6e2:	fb00 f209 	mul.w	r2, r0, r9
 800a6e6:	11d2      	asrs	r2, r2, #7

    /*Actually the center of the pixel need to be calculated so apply 1/2 px offset*/
    if(cir_x > 0) {
 800a6e8:	2c00      	cmp	r4, #0
 800a6ea:	dd15      	ble.n	800a718 <get_rounded_area+0x62>
        cir_x = (cir_x - pa) >> ps;
 800a6ec:	3c7f      	subs	r4, #127	@ 0x7f
        res_area->x1 = cir_x - thick_half + thick_corr;
 800a6ee:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800a6f2:	1be3      	subs	r3, r4, r7
 800a6f4:	fa16 f383 	uxtah	r3, r6, r3
 800a6f8:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half;
 800a6fa:	443c      	add	r4, r7
 800a6fc:	80ac      	strh	r4, [r5, #4]
        cir_x = (cir_x + pa) >> ps;
        res_area->x1 = cir_x - thick_half;
        res_area->x2 = cir_x + thick_half - thick_corr;
    }

    if(cir_y > 0) {
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	dd14      	ble.n	800a72c <get_rounded_area+0x76>
        cir_y = (cir_y - pa) >> ps;
 800a702:	3a7f      	subs	r2, #127	@ 0x7f
        res_area->y1 = cir_y - thick_half + thick_corr;
 800a704:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800a708:	1bd3      	subs	r3, r2, r7
 800a70a:	fa16 f383 	uxtah	r3, r6, r3
 800a70e:	806b      	strh	r3, [r5, #2]
        res_area->y2 = cir_y + thick_half;
 800a710:	443a      	add	r2, r7
 800a712:	80ea      	strh	r2, [r5, #6]
    else {
        cir_y = (cir_y + pa) >> ps;
        res_area->y1 = cir_y - thick_half;
        res_area->y2 = cir_y + thick_half - thick_corr;
    }
}
 800a714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        cir_x = (cir_x + pa) >> ps;
 800a718:	347f      	adds	r4, #127	@ 0x7f
        res_area->x1 = cir_x - thick_half;
 800a71a:	f3c4 240f 	ubfx	r4, r4, #8, #16
 800a71e:	1be3      	subs	r3, r4, r7
 800a720:	802b      	strh	r3, [r5, #0]
        res_area->x2 = cir_x + thick_half - thick_corr;
 800a722:	443c      	add	r4, r7
 800a724:	b2a4      	uxth	r4, r4
 800a726:	1ba4      	subs	r4, r4, r6
 800a728:	80ac      	strh	r4, [r5, #4]
 800a72a:	e7e8      	b.n	800a6fe <get_rounded_area+0x48>
        cir_y = (cir_y + pa) >> ps;
 800a72c:	327f      	adds	r2, #127	@ 0x7f
        res_area->y1 = cir_y - thick_half;
 800a72e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800a732:	1bd3      	subs	r3, r2, r7
 800a734:	806b      	strh	r3, [r5, #2]
        res_area->y2 = cir_y + thick_half - thick_corr;
 800a736:	443a      	add	r2, r7
 800a738:	b292      	uxth	r2, r2
 800a73a:	1b92      	subs	r2, r2, r6
 800a73c:	80ea      	strh	r2, [r5, #6]
}
 800a73e:	e7e9      	b.n	800a714 <get_rounded_area+0x5e>

0800a740 <lv_draw_sw_arc>:
{
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	b0cd      	sub	sp, #308	@ 0x134
 800a746:	9002      	str	r0, [sp, #8]
 800a748:	461f      	mov	r7, r3
 800a74a:	f8bd 5158 	ldrh.w	r5, [sp, #344]	@ 0x158
 800a74e:	f8bd 415c 	ldrh.w	r4, [sp, #348]	@ 0x15c
    if(dsc->opa <= LV_OPA_MIN) return;
 800a752:	7b0b      	ldrb	r3, [r1, #12]
 800a754:	2b02      	cmp	r3, #2
 800a756:	f240 8100 	bls.w	800a95a <lv_draw_sw_arc+0x21a>
 800a75a:	460e      	mov	r6, r1
 800a75c:	4690      	mov	r8, r2
    if(dsc->width == 0) return;
 800a75e:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
 800a762:	f1b9 0f00 	cmp.w	r9, #0
 800a766:	f000 80f8 	beq.w	800a95a <lv_draw_sw_arc+0x21a>
    if(start_angle == end_angle) return;
 800a76a:	42a5      	cmp	r5, r4
 800a76c:	f000 80f5 	beq.w	800a95a <lv_draw_sw_arc+0x21a>
    if(width > radius) width = radius;
 800a770:	45b9      	cmp	r9, r7
 800a772:	dd01      	ble.n	800a778 <lv_draw_sw_arc+0x38>
 800a774:	fa0f f987 	sxth.w	r9, r7
    lv_draw_rect_dsc_init(&cir_dsc);
 800a778:	a83e      	add	r0, sp, #248	@ 0xf8
 800a77a:	f7ff fa69 	bl	8009c50 <lv_draw_rect_dsc_init>
    cir_dsc.blend_mode = dsc->blend_mode;
 800a77e:	7b73      	ldrb	r3, [r6, #13]
 800a780:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a784:	f88d 30fa 	strb.w	r3, [sp, #250]	@ 0xfa
    if(dsc->img_src) {
 800a788:	68b3      	ldr	r3, [r6, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d054      	beq.n	800a838 <lv_draw_sw_arc+0xf8>
        cir_dsc.bg_opa = LV_OPA_TRANSP;
 800a78e:	2200      	movs	r2, #0
 800a790:	f88d 20fb 	strb.w	r2, [sp, #251]	@ 0xfb
        cir_dsc.bg_img_src = dsc->img_src;
 800a794:	9342      	str	r3, [sp, #264]	@ 0x108
        cir_dsc.bg_img_opa = dsc->opa;
 800a796:	7b33      	ldrb	r3, [r6, #12]
 800a798:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
    area_out.x1 = center->x - radius;
 800a79c:	f8b8 2000 	ldrh.w	r2, [r8]
 800a7a0:	eba2 0c07 	sub.w	ip, r2, r7
 800a7a4:	fa0f fb8c 	sxth.w	fp, ip
 800a7a8:	f8ad b0f0 	strh.w	fp, [sp, #240]	@ 0xf0
    area_out.y1 = center->y - radius;
 800a7ac:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800a7b0:	eba1 0e07 	sub.w	lr, r1, r7
 800a7b4:	fa0f fa8e 	sxth.w	sl, lr
 800a7b8:	f8ad a0f2 	strh.w	sl, [sp, #242]	@ 0xf2
    area_out.x2 = center->x + radius - 1;  /*-1 because the center already belongs to the left/bottom part*/
 800a7bc:	443a      	add	r2, r7
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	3a01      	subs	r2, #1
 800a7c2:	b293      	uxth	r3, r2
 800a7c4:	b212      	sxth	r2, r2
 800a7c6:	f8ad 20f4 	strh.w	r2, [sp, #244]	@ 0xf4
    area_out.y2 = center->y + radius - 1;
 800a7ca:	4439      	add	r1, r7
 800a7cc:	b289      	uxth	r1, r1
 800a7ce:	3901      	subs	r1, #1
 800a7d0:	b288      	uxth	r0, r1
 800a7d2:	b209      	sxth	r1, r1
 800a7d4:	f8ad 10f6 	strh.w	r1, [sp, #246]	@ 0xf6
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 800a7d8:	f8ad b0e8 	strh.w	fp, [sp, #232]	@ 0xe8
    dest->y1 = src->y1;
 800a7dc:	f8ad a0ea 	strh.w	sl, [sp, #234]	@ 0xea
    dest->x2 = src->x2;
 800a7e0:	f8ad 20ec 	strh.w	r2, [sp, #236]	@ 0xec
    dest->y2 = src->y2;
 800a7e4:	f8ad 10ee 	strh.w	r1, [sp, #238]	@ 0xee
    area_in.x1 += dsc->width;
 800a7e8:	8872      	ldrh	r2, [r6, #2]
 800a7ea:	fa12 fc8c 	uxtah	ip, r2, ip
 800a7ee:	fa1f fc8c 	uxth.w	ip, ip
 800a7f2:	f8ad c0e8 	strh.w	ip, [sp, #232]	@ 0xe8
    area_in.y1 += dsc->width;
 800a7f6:	fa12 fe8e 	uxtah	lr, r2, lr
 800a7fa:	fa1f fe8e 	uxth.w	lr, lr
 800a7fe:	f8ad e0ea 	strh.w	lr, [sp, #234]	@ 0xea
    area_in.x2 -= dsc->width;
 800a802:	1a9b      	subs	r3, r3, r2
 800a804:	b29b      	uxth	r3, r3
 800a806:	f8ad 30ec 	strh.w	r3, [sp, #236]	@ 0xec
    area_in.y2 -= dsc->width;
 800a80a:	1a80      	subs	r0, r0, r2
 800a80c:	b280      	uxth	r0, r0
 800a80e:	f8ad 00ee 	strh.w	r0, [sp, #238]	@ 0xee
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800a812:	eba3 030c 	sub.w	r3, r3, ip
 800a816:	b29b      	uxth	r3, r3
 800a818:	3301      	adds	r3, #1
 800a81a:	b21b      	sxth	r3, r3
    if(lv_area_get_width(&area_in) > 0 && lv_area_get_height(&area_in) > 0) {
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dd21      	ble.n	800a864 <lv_draw_sw_arc+0x124>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800a820:	eba0 030e 	sub.w	r3, r0, lr
 800a824:	b29b      	uxth	r3, r3
 800a826:	3301      	adds	r3, #1
 800a828:	b21b      	sxth	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dc0b      	bgt.n	800a846 <lv_draw_sw_arc+0x106>
    bool mask_in_param_valid = false;
 800a82e:	2300      	movs	r3, #0
 800a830:	9304      	str	r3, [sp, #16]
    int16_t mask_in_id = LV_MASK_ID_INV;
 800a832:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a836:	e019      	b.n	800a86c <lv_draw_sw_arc+0x12c>
        cir_dsc.bg_opa = dsc->opa;
 800a838:	7b33      	ldrb	r3, [r6, #12]
 800a83a:	f88d 30fb 	strb.w	r3, [sp, #251]	@ 0xfb
        cir_dsc.bg_color = dsc->color;
 800a83e:	8833      	ldrh	r3, [r6, #0]
 800a840:	f8ad 30fc 	strh.w	r3, [sp, #252]	@ 0xfc
 800a844:	e7aa      	b.n	800a79c <lv_draw_sw_arc+0x5c>
        lv_draw_mask_radius_init(&mask_in_param, &area_in, LV_RADIUS_CIRCLE, true);
 800a846:	2301      	movs	r3, #1
 800a848:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a84c:	a93a      	add	r1, sp, #232	@ 0xe8
 800a84e:	a834      	add	r0, sp, #208	@ 0xd0
 800a850:	f7ff f952 	bl	8009af8 <lv_draw_mask_radius_init>
        mask_in_id = lv_draw_mask_add(&mask_in_param, NULL);
 800a854:	2100      	movs	r1, #0
 800a856:	a834      	add	r0, sp, #208	@ 0xd0
 800a858:	f7fe ff28 	bl	80096ac <lv_draw_mask_add>
 800a85c:	4682      	mov	sl, r0
        mask_in_param_valid = true;
 800a85e:	2301      	movs	r3, #1
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	e003      	b.n	800a86c <lv_draw_sw_arc+0x12c>
    bool mask_in_param_valid = false;
 800a864:	2300      	movs	r3, #0
 800a866:	9304      	str	r3, [sp, #16]
    int16_t mask_in_id = LV_MASK_ID_INV;
 800a868:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
    lv_draw_mask_radius_init(&mask_out_param, &area_out, LV_RADIUS_CIRCLE, false);
 800a86c:	2300      	movs	r3, #0
 800a86e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a872:	a93c      	add	r1, sp, #240	@ 0xf0
 800a874:	a82e      	add	r0, sp, #184	@ 0xb8
 800a876:	f7ff f93f 	bl	8009af8 <lv_draw_mask_radius_init>
    int16_t mask_out_id = lv_draw_mask_add(&mask_out_param, NULL);
 800a87a:	2100      	movs	r1, #0
 800a87c:	a82e      	add	r0, sp, #184	@ 0xb8
 800a87e:	f7fe ff15 	bl	80096ac <lv_draw_mask_add>
 800a882:	9003      	str	r0, [sp, #12]
    if(start_angle + 360 == end_angle || start_angle == end_angle + 360) {
 800a884:	f505 73b4 	add.w	r3, r5, #360	@ 0x168
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d003      	beq.n	800a894 <lv_draw_sw_arc+0x154>
 800a88c:	f504 73b4 	add.w	r3, r4, #360	@ 0x168
 800a890:	429d      	cmp	r5, r3
 800a892:	d11f      	bne.n	800a8d4 <lv_draw_sw_arc+0x194>
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800a894:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a898:	f8ad 30f8 	strh.w	r3, [sp, #248]	@ 0xf8
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800a89c:	aa3c      	add	r2, sp, #240	@ 0xf0
 800a89e:	a93e      	add	r1, sp, #248	@ 0xf8
 800a8a0:	9802      	ldr	r0, [sp, #8]
 800a8a2:	f7ff fa17 	bl	8009cd4 <lv_draw_rect>
        lv_draw_mask_remove_id(mask_out_id);
 800a8a6:	9803      	ldr	r0, [sp, #12]
 800a8a8:	f7fe ff44 	bl	8009734 <lv_draw_mask_remove_id>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800a8ac:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a8b0:	d109      	bne.n	800a8c6 <lv_draw_sw_arc+0x186>
        lv_draw_mask_free_param(&mask_out_param);
 800a8b2:	a82e      	add	r0, sp, #184	@ 0xb8
 800a8b4:	f7fe ff6a 	bl	800978c <lv_draw_mask_free_param>
        if(mask_in_param_valid) {
 800a8b8:	9b04      	ldr	r3, [sp, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d04d      	beq.n	800a95a <lv_draw_sw_arc+0x21a>
            lv_draw_mask_free_param(&mask_in_param);
 800a8be:	a834      	add	r0, sp, #208	@ 0xd0
 800a8c0:	f7fe ff64 	bl	800978c <lv_draw_mask_free_param>
        return;
 800a8c4:	e049      	b.n	800a95a <lv_draw_sw_arc+0x21a>
        if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800a8c6:	4650      	mov	r0, sl
 800a8c8:	f7fe ff34 	bl	8009734 <lv_draw_mask_remove_id>
 800a8cc:	e7f1      	b.n	800a8b2 <lv_draw_sw_arc+0x172>
    while(start_angle >= 360) start_angle -= 360;
 800a8ce:	f5a5 75b4 	sub.w	r5, r5, #360	@ 0x168
 800a8d2:	b2ad      	uxth	r5, r5
 800a8d4:	f5b5 7fb4 	cmp.w	r5, #360	@ 0x168
 800a8d8:	d2f9      	bcs.n	800a8ce <lv_draw_sw_arc+0x18e>
 800a8da:	e002      	b.n	800a8e2 <lv_draw_sw_arc+0x1a2>
    while(end_angle >= 360) end_angle -= 360;
 800a8dc:	f5a4 74b4 	sub.w	r4, r4, #360	@ 0x168
 800a8e0:	b2a4      	uxth	r4, r4
 800a8e2:	f5b4 7fb4 	cmp.w	r4, #360	@ 0x168
 800a8e6:	d2f9      	bcs.n	800a8dc <lv_draw_sw_arc+0x19c>
    lv_draw_mask_angle_init(&mask_angle_param, center->x, center->y, start_angle, end_angle);
 800a8e8:	b22b      	sxth	r3, r5
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	fa0f fb84 	sxth.w	fp, r4
 800a8f0:	f8cd b000 	str.w	fp, [sp]
 800a8f4:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800a8f8:	f9b8 1000 	ldrsh.w	r1, [r8]
 800a8fc:	a813      	add	r0, sp, #76	@ 0x4c
 800a8fe:	f7ff f897 	bl	8009a30 <lv_draw_mask_angle_init>
    int16_t mask_angle_id = lv_draw_mask_add(&mask_angle_param, NULL);
 800a902:	2100      	movs	r1, #0
 800a904:	a813      	add	r0, sp, #76	@ 0x4c
 800a906:	f7fe fed1 	bl	80096ac <lv_draw_mask_add>
 800a90a:	9005      	str	r0, [sp, #20]
    if(end_angle > start_angle) {
 800a90c:	42a5      	cmp	r5, r4
 800a90e:	d227      	bcs.n	800a960 <lv_draw_sw_arc+0x220>
        angle_gap = 360 - (end_angle - start_angle);
 800a910:	1b63      	subs	r3, r4, r5
 800a912:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800a916:	9a02      	ldr	r2, [sp, #8]
 800a918:	6892      	ldr	r2, [r2, #8]
 800a91a:	9206      	str	r2, [sp, #24]
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 800a91c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a91e:	dd01      	ble.n	800a924 <lv_draw_sw_arc+0x1e4>
 800a920:	2f0a      	cmp	r7, #10
 800a922:	d81f      	bhi.n	800a964 <lv_draw_sw_arc+0x224>
        lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800a924:	aa3c      	add	r2, sp, #240	@ 0xf0
 800a926:	a93e      	add	r1, sp, #248	@ 0xf8
 800a928:	9802      	ldr	r0, [sp, #8]
 800a92a:	f7ff f9d3 	bl	8009cd4 <lv_draw_rect>
    lv_draw_mask_free_param(&mask_angle_param);
 800a92e:	a813      	add	r0, sp, #76	@ 0x4c
 800a930:	f7fe ff2c 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_out_param);
 800a934:	a82e      	add	r0, sp, #184	@ 0xb8
 800a936:	f7fe ff29 	bl	800978c <lv_draw_mask_free_param>
    if(mask_in_param_valid) {
 800a93a:	9b04      	ldr	r3, [sp, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d13d      	bne.n	800a9bc <lv_draw_sw_arc+0x27c>
    lv_draw_mask_remove_id(mask_angle_id);
 800a940:	9805      	ldr	r0, [sp, #20]
 800a942:	f7fe fef7 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_out_id);
 800a946:	9803      	ldr	r0, [sp, #12]
 800a948:	f7fe fef4 	bl	8009734 <lv_draw_mask_remove_id>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800a94c:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800a950:	d138      	bne.n	800a9c4 <lv_draw_sw_arc+0x284>
    if(dsc->rounded) {
 800a952:	7b73      	ldrb	r3, [r6, #13]
 800a954:	f013 0f04 	tst.w	r3, #4
 800a958:	d138      	bne.n	800a9cc <lv_draw_sw_arc+0x28c>
}
 800a95a:	b04d      	add	sp, #308	@ 0x134
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        angle_gap = start_angle - end_angle;
 800a960:	1b2b      	subs	r3, r5, r4
 800a962:	e7d8      	b.n	800a916 <lv_draw_sw_arc+0x1d6>
        q_dsc.center = center;
 800a964:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
        q_dsc.radius = radius;
 800a968:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
        q_dsc.start_angle = start_angle;
 800a96c:	f8ad 5036 	strh.w	r5, [sp, #54]	@ 0x36
        q_dsc.end_angle = end_angle;
 800a970:	f8ad 4038 	strh.w	r4, [sp, #56]	@ 0x38
        q_dsc.start_quarter = (start_angle / 90) & 0x3;
 800a974:	086b      	lsrs	r3, r5, #1
 800a976:	4a57      	ldr	r2, [pc, #348]	@ (800aad4 <lv_draw_sw_arc+0x394>)
 800a978:	fba2 1303 	umull	r1, r3, r2, r3
 800a97c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800a980:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
        q_dsc.end_quarter = (end_angle / 90) & 0x3;
 800a984:	0863      	lsrs	r3, r4, #1
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800a98e:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
        q_dsc.width = width;
 800a992:	f8ad 903e 	strh.w	r9, [sp, #62]	@ 0x3e
        q_dsc.draw_dsc = &cir_dsc;
 800a996:	ab3e      	add	r3, sp, #248	@ 0xf8
 800a998:	9310      	str	r3, [sp, #64]	@ 0x40
        q_dsc.draw_area = &area_out;
 800a99a:	ab3c      	add	r3, sp, #240	@ 0xf0
 800a99c:	9311      	str	r3, [sp, #68]	@ 0x44
        q_dsc.draw_ctx = draw_ctx;
 800a99e:	9b02      	ldr	r3, [sp, #8]
 800a9a0:	9312      	str	r3, [sp, #72]	@ 0x48
        draw_quarter_0(&q_dsc);
 800a9a2:	a80c      	add	r0, sp, #48	@ 0x30
 800a9a4:	f7ff fa28 	bl	8009df8 <draw_quarter_0>
        draw_quarter_1(&q_dsc);
 800a9a8:	a80c      	add	r0, sp, #48	@ 0x30
 800a9aa:	f7ff fb3e 	bl	800a02a <draw_quarter_1>
        draw_quarter_2(&q_dsc);
 800a9ae:	a80c      	add	r0, sp, #48	@ 0x30
 800a9b0:	f7ff fc50 	bl	800a254 <draw_quarter_2>
        draw_quarter_3(&q_dsc);
 800a9b4:	a80c      	add	r0, sp, #48	@ 0x30
 800a9b6:	f7ff fd65 	bl	800a484 <draw_quarter_3>
    if(angle_gap > SPLIT_ANGLE_GAP_LIMIT && radius > SPLIT_RADIUS_LIMIT) {
 800a9ba:	e7b8      	b.n	800a92e <lv_draw_sw_arc+0x1ee>
        lv_draw_mask_free_param(&mask_in_param);
 800a9bc:	a834      	add	r0, sp, #208	@ 0xd0
 800a9be:	f7fe fee5 	bl	800978c <lv_draw_mask_free_param>
 800a9c2:	e7bd      	b.n	800a940 <lv_draw_sw_arc+0x200>
    if(mask_in_id != LV_MASK_ID_INV) lv_draw_mask_remove_id(mask_in_id);
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	f7fe feb5 	bl	8009734 <lv_draw_mask_remove_id>
 800a9ca:	e7c2      	b.n	800a952 <lv_draw_sw_arc+0x212>
        get_rounded_area(start_angle, radius, width, &round_area);
 800a9cc:	b23f      	sxth	r7, r7
 800a9ce:	fa5f f989 	uxtb.w	r9, r9
 800a9d2:	ab08      	add	r3, sp, #32
 800a9d4:	464a      	mov	r2, r9
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	9807      	ldr	r0, [sp, #28]
 800a9da:	f7ff fe6c 	bl	800a6b6 <get_rounded_area>
        round_area.x1 += center->x;
 800a9de:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a9e2:	f8b8 2000 	ldrh.w	r2, [r8]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f8ad 3020 	strh.w	r3, [sp, #32]
        round_area.x2 += center->x;
 800a9ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
        round_area.y1 += center->y;
 800a9f6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800a9fa:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
        round_area.y2 += center->y;
 800aa04:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800aa08:	4413      	add	r3, r2
 800aa0a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800aa0e:	aa08      	add	r2, sp, #32
 800aa10:	9906      	ldr	r1, [sp, #24]
 800aa12:	a80a      	add	r0, sp, #40	@ 0x28
 800aa14:	f7f6 ffee 	bl	80019f4 <_lv_area_intersect>
 800aa18:	bb38      	cbnz	r0, 800aa6a <lv_draw_sw_arc+0x32a>
        get_rounded_area(end_angle, radius, width, &round_area);
 800aa1a:	ab08      	add	r3, sp, #32
 800aa1c:	464a      	mov	r2, r9
 800aa1e:	4639      	mov	r1, r7
 800aa20:	4658      	mov	r0, fp
 800aa22:	f7ff fe48 	bl	800a6b6 <get_rounded_area>
        round_area.x1 += center->x;
 800aa26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800aa2a:	f8b8 2000 	ldrh.w	r2, [r8]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f8ad 3020 	strh.w	r3, [sp, #32]
        round_area.x2 += center->x;
 800aa34:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 800aa38:	4413      	add	r3, r2
 800aa3a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
        round_area.y1 += center->y;
 800aa3e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 800aa42:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800aa46:	4413      	add	r3, r2
 800aa48:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
        round_area.y2 += center->y;
 800aa4c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800aa50:	4413      	add	r3, r2
 800aa52:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        if(_lv_area_intersect(&clip_area2, clip_area_ori, &round_area)) {
 800aa56:	aa08      	add	r2, sp, #32
 800aa58:	9906      	ldr	r1, [sp, #24]
 800aa5a:	a80a      	add	r0, sp, #40	@ 0x28
 800aa5c:	f7f6 ffca 	bl	80019f4 <_lv_area_intersect>
 800aa60:	b9e8      	cbnz	r0, 800aa9e <lv_draw_sw_arc+0x35e>
        draw_ctx->clip_area = clip_area_ori;
 800aa62:	9b02      	ldr	r3, [sp, #8]
 800aa64:	9a06      	ldr	r2, [sp, #24]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	e777      	b.n	800a95a <lv_draw_sw_arc+0x21a>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800aa70:	a908      	add	r1, sp, #32
 800aa72:	a80c      	add	r0, sp, #48	@ 0x30
 800aa74:	f7ff f840 	bl	8009af8 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800aa78:	2100      	movs	r1, #0
 800aa7a:	a80c      	add	r0, sp, #48	@ 0x30
 800aa7c:	f7fe fe16 	bl	80096ac <lv_draw_mask_add>
 800aa80:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 800aa82:	ab0a      	add	r3, sp, #40	@ 0x28
 800aa84:	9802      	ldr	r0, [sp, #8]
 800aa86:	6083      	str	r3, [r0, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800aa88:	aa3c      	add	r2, sp, #240	@ 0xf0
 800aa8a:	a93e      	add	r1, sp, #248	@ 0xf8
 800aa8c:	f7ff f922 	bl	8009cd4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7fe fe4f 	bl	8009734 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 800aa96:	a80c      	add	r0, sp, #48	@ 0x30
 800aa98:	f7fe fe78 	bl	800978c <lv_draw_mask_free_param>
 800aa9c:	e7bd      	b.n	800aa1a <lv_draw_sw_arc+0x2da>
            lv_draw_mask_radius_init(&mask_end_param, &round_area, LV_RADIUS_CIRCLE, false);
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800aaa4:	a908      	add	r1, sp, #32
 800aaa6:	a80c      	add	r0, sp, #48	@ 0x30
 800aaa8:	f7ff f826 	bl	8009af8 <lv_draw_mask_radius_init>
            int16_t mask_end_id = lv_draw_mask_add(&mask_end_param, NULL);
 800aaac:	2100      	movs	r1, #0
 800aaae:	a80c      	add	r0, sp, #48	@ 0x30
 800aab0:	f7fe fdfc 	bl	80096ac <lv_draw_mask_add>
 800aab4:	4604      	mov	r4, r0
            draw_ctx->clip_area = &clip_area2;
 800aab6:	ab0a      	add	r3, sp, #40	@ 0x28
 800aab8:	9802      	ldr	r0, [sp, #8]
 800aaba:	6083      	str	r3, [r0, #8]
            lv_draw_rect(draw_ctx, &cir_dsc, &area_out);
 800aabc:	aa3c      	add	r2, sp, #240	@ 0xf0
 800aabe:	a93e      	add	r1, sp, #248	@ 0xf8
 800aac0:	f7ff f908 	bl	8009cd4 <lv_draw_rect>
            lv_draw_mask_remove_id(mask_end_id);
 800aac4:	4620      	mov	r0, r4
 800aac6:	f7fe fe35 	bl	8009734 <lv_draw_mask_remove_id>
            lv_draw_mask_free_param(&mask_end_param);
 800aaca:	a80c      	add	r0, sp, #48	@ 0x30
 800aacc:	f7fe fe5e 	bl	800978c <lv_draw_mask_free_param>
 800aad0:	e7c7      	b.n	800aa62 <lv_draw_sw_arc+0x322>
 800aad2:	bf00      	nop
 800aad4:	b60b60b7 	.word	0xb60b60b7

0800aad8 <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 800aad8:	b283      	uxth	r3, r0
 800aada:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800aade:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 800aae2:	b28b      	uxth	r3, r1
 800aae4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800aae8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800aaec:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800aaee:	040b      	lsls	r3, r1, #16
 800aaf0:	fa13 f181 	uxtah	r1, r3, r1
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <lv_color_mix+0x48>)
 800aaf6:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800aaf8:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 800aafc:	fa1c f080 	uxtah	r0, ip, r0
 800ab00:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800ab02:	1a40      	subs	r0, r0, r1
 800ab04:	08d2      	lsrs	r2, r2, #3
 800ab06:	fb00 f202 	mul.w	r2, r0, r2
 800ab0a:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 800ab0e:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 800ab10:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 800ab14:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 800ab16:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 800ab1a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 800ab1e:	4770      	bx	lr
 800ab20:	07e0f81f 	.word	0x07e0f81f

0800ab24 <lv_color_mix_premult>:
 *            Should be modified like mix = `255 - mix`
 * @return the mixed color
 * @note 255 won't give clearly `c1`.
 */
static inline lv_color_t LV_ATTRIBUTE_FAST_MEM lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
 800ab24:	b510      	push	{r4, lr}
 800ab26:	4684      	mov	ip, r0
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8 or 32*/
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ab28:	8803      	ldrh	r3, [r0, #0]
 800ab2a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 800ab2e:	fb02 3300 	mla	r3, r2, r0, r3
 800ab32:	eb03 2003 	add.w	r0, r3, r3, lsl #8
 800ab36:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
 800ab3a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 800ab3e:	f04f 0000 	mov.w	r0, #0
 800ab42:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ab46:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800ab4a:	f001 0407 	and.w	r4, r1, #7
 800ab4e:	f3c1 3e42 	ubfx	lr, r1, #13, #3
 800ab52:	eb0e 0ec4 	add.w	lr, lr, r4, lsl #3
 800ab56:	fb0e 3302 	mla	r3, lr, r2, r3
 800ab5a:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
 800ab5e:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
 800ab62:	f3c3 6e82 	ubfx	lr, r3, #26, #3
 800ab66:	f36e 0002 	bfi	r0, lr, #0, #3
 800ab6a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
 800ab6e:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800ab72:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800ab76:	f3c1 2104 	ubfx	r1, r1, #8, #5
 800ab7a:	fb01 3202 	mla	r2, r1, r2, r3
 800ab7e:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 800ab82:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 800ab86:	f3c2 52c4 	ubfx	r2, r2, #23, #5
 800ab8a:	f362 200c 	bfi	r0, r2, #8, #5
    LV_COLOR_SET_B(c1, premult_c1[2]);
    ret.full = mix > LV_OPA_50 ? c2.full : c1.full;
#endif

    return ret;
}
 800ab8e:	bd10      	pop	{r4, pc}

0800ab90 <fill_blended>:

#if LV_DRAW_COMPLEX
static void fill_blended(lv_color_t * dest_buf, const lv_area_t * dest_area,
                         lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride,
                         lv_blend_mode_t blend_mode)
{
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	b087      	sub	sp, #28
 800ab96:	4605      	mov	r5, r0
 800ab98:	9203      	str	r2, [sp, #12]
 800ab9a:	4699      	mov	r9, r3
 800ab9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800aba4:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	@ 0x48
 800aba8:	9305      	str	r3, [sp, #20]
 800abaa:	f89d 204c 	ldrb.w	r2, [sp, #76]	@ 0x4c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800abae:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800abb2:	880b      	ldrh	r3, [r1, #0]
 800abb4:	eba8 0803 	sub.w	r8, r8, r3
 800abb8:	fa1f f888 	uxth.w	r8, r8
 800abbc:	f108 0801 	add.w	r8, r8, #1
 800abc0:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800abc4:	88cb      	ldrh	r3, [r1, #6]
 800abc6:	8849      	ldrh	r1, [r1, #2]
 800abc8:	1a5b      	subs	r3, r3, r1
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3301      	adds	r3, #1
 800abce:	fa0f fb83 	sxth.w	fp, r3

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 800abd2:	2a02      	cmp	r2, #2
 800abd4:	d010      	beq.n	800abf8 <fill_blended+0x68>
 800abd6:	2a03      	cmp	r2, #3
 800abd8:	d011      	beq.n	800abfe <fill_blended+0x6e>
 800abda:	2a01      	cmp	r2, #1
 800abdc:	d17d      	bne.n	800acda <fill_blended+0x14a>
 800abde:	f8df a100 	ldr.w	sl, [pc, #256]	@ 800ace0 <fill_blended+0x150>
            LV_LOG_WARN("fill_blended: unsupported blend mode");
            return;
    }

    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 800abe2:	b17f      	cbz	r7, 800ac04 <fill_blended+0x74>
    else {
        /*Buffer the result color to avoid recalculating the same color*/
        lv_color_t last_dest_color;
        lv_color_t last_res_color;
        lv_opa_t last_mask = LV_OPA_TRANSP;
        last_dest_color = dest_buf[0];
 800abe4:	882b      	ldrh	r3, [r5, #0]
 800abe6:	4619      	mov	r1, r3
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800abe8:	783b      	ldrb	r3, [r7, #0]
 800abea:	2bfc      	cmp	r3, #252	@ 0xfc
 800abec:	d837      	bhi.n	800ac5e <fill_blended+0xce>
 800abee:	9a01      	ldr	r2, [sp, #4]
 800abf0:	fb02 f303 	mul.w	r3, r2, r3
 800abf4:	0a1a      	lsrs	r2, r3, #8
 800abf6:	e033      	b.n	800ac60 <fill_blended+0xd0>
            blend_fp = color_blend_true_color_subtractive;
 800abf8:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800ace4 <fill_blended+0x154>
 800abfc:	e7f1      	b.n	800abe2 <fill_blended+0x52>
            blend_fp = color_blend_true_color_multiply;
 800abfe:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 800ace8 <fill_blended+0x158>
 800ac02:	e7ee      	b.n	800abe2 <fill_blended+0x52>
        lv_color_t last_dest_color = dest_buf[0];
 800ac04:	882e      	ldrh	r6, [r5, #0]
        lv_color_t last_res_color = blend_fp(color, dest_buf[0], opa);
 800ac06:	9c01      	ldr	r4, [sp, #4]
 800ac08:	4622      	mov	r2, r4
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4648      	mov	r0, r9
 800ac0e:	47d0      	blx	sl
        for(y = 0; y < h; y++) {
 800ac10:	f8cd b008 	str.w	fp, [sp, #8]
 800ac14:	46bb      	mov	fp, r7
 800ac16:	4657      	mov	r7, sl
 800ac18:	46a2      	mov	sl, r4
 800ac1a:	e019      	b.n	800ac50 <fill_blended+0xc0>
                dest_buf[x] = last_res_color;
 800ac1c:	f8ab 0000 	strh.w	r0, [fp]
            for(x = 0; x < w; x++) {
 800ac20:	3401      	adds	r4, #1
 800ac22:	4544      	cmp	r4, r8
 800ac24:	da0d      	bge.n	800ac42 <fill_blended+0xb2>
                if(last_dest_color.full != dest_buf[x].full) {
 800ac26:	b2b3      	uxth	r3, r6
 800ac28:	eb05 0b44 	add.w	fp, r5, r4, lsl #1
 800ac2c:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d0f3      	beq.n	800ac1c <fill_blended+0x8c>
                    last_dest_color = dest_buf[x];
 800ac34:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, dest_buf[x], opa);
 800ac38:	4652      	mov	r2, sl
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	47b8      	blx	r7
 800ac40:	e7ec      	b.n	800ac1c <fill_blended+0x8c>
            dest_buf += dest_stride;
 800ac42:	f8dd b004 	ldr.w	fp, [sp, #4]
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = 0; y < h; y++) {
 800ac4c:	f10b 0b01 	add.w	fp, fp, #1
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	459b      	cmp	fp, r3
 800ac54:	da41      	bge.n	800acda <fill_blended+0x14a>
            for(x = 0; x < w; x++) {
 800ac56:	2400      	movs	r4, #0
 800ac58:	f8cd b004 	str.w	fp, [sp, #4]
 800ac5c:	e7e1      	b.n	800ac22 <fill_blended+0x92>
        lv_opa_t opa_tmp = mask[0] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[0] * opa) >> 8;
 800ac5e:	9a01      	ldr	r2, [sp, #4]
        last_res_color = blend_fp(color, last_dest_color, opa_tmp);
 800ac60:	460c      	mov	r4, r1
 800ac62:	4648      	mov	r0, r9
 800ac64:	47d0      	blx	sl
        lv_opa_t last_mask = LV_OPA_TRANSP;
 800ac66:	2300      	movs	r3, #0
 800ac68:	f8cd b010 	str.w	fp, [sp, #16]
 800ac6c:	469b      	mov	fp, r3
 800ac6e:	46a4      	mov	ip, r4

        for(y = 0; y < h; y++) {
 800ac70:	e02c      	b.n	800accc <fill_blended+0x13c>
            for(x = 0; x < w; x++) {
                if(mask[x] == 0) continue;
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 800ac72:	fa1f f18c 	uxth.w	r1, ip
 800ac76:	f835 e014 	ldrh.w	lr, [r5, r4, lsl #1]
 800ac7a:	4571      	cmp	r1, lr
 800ac7c:	d116      	bne.n	800acac <fill_blended+0x11c>
 800ac7e:	e008      	b.n	800ac92 <fill_blended+0x102>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800ac80:	9a01      	ldr	r2, [sp, #4]

                    last_res_color = blend_fp(color, dest_buf[x], opa_tmp);
 800ac82:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
 800ac86:	4648      	mov	r0, r9
 800ac88:	47d0      	blx	sl
                    last_mask = mask[x];
 800ac8a:	f89b 3000 	ldrb.w	r3, [fp]
                    last_dest_color.full = dest_buf[x].full;
 800ac8e:	f835 c016 	ldrh.w	ip, [r5, r6, lsl #1]
                }
                dest_buf[x] = last_res_color;
 800ac92:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = 0; x < w; x++) {
 800ac96:	3401      	adds	r4, #1
 800ac98:	4544      	cmp	r4, r8
 800ac9a:	da0e      	bge.n	800acba <fill_blended+0x12a>
                if(mask[x] == 0) continue;
 800ac9c:	4626      	mov	r6, r4
 800ac9e:	eb07 0b04 	add.w	fp, r7, r4
 800aca2:	5d3a      	ldrb	r2, [r7, r4]
 800aca4:	2a00      	cmp	r2, #0
 800aca6:	d0f6      	beq.n	800ac96 <fill_blended+0x106>
                if(mask[x] != last_mask || last_dest_color.full != dest_buf[x].full) {
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d0e2      	beq.n	800ac72 <fill_blended+0xe2>
                    opa_tmp = mask[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask[x] * opa) >> 8;
 800acac:	2afc      	cmp	r2, #252	@ 0xfc
 800acae:	d8e7      	bhi.n	800ac80 <fill_blended+0xf0>
 800acb0:	9b01      	ldr	r3, [sp, #4]
 800acb2:	fb03 f202 	mul.w	r2, r3, r2
 800acb6:	0a12      	lsrs	r2, r2, #8
 800acb8:	e7e3      	b.n	800ac82 <fill_blended+0xf2>
            }
            dest_buf += dest_stride;
 800acba:	f8dd b008 	ldr.w	fp, [sp, #8]
 800acbe:	9a03      	ldr	r2, [sp, #12]
 800acc0:	eb05 0542 	add.w	r5, r5, r2, lsl #1
            mask += mask_stride;
 800acc4:	9a05      	ldr	r2, [sp, #20]
 800acc6:	4417      	add	r7, r2
        for(y = 0; y < h; y++) {
 800acc8:	f10b 0b01 	add.w	fp, fp, #1
 800accc:	9a04      	ldr	r2, [sp, #16]
 800acce:	4593      	cmp	fp, r2
 800acd0:	da03      	bge.n	800acda <fill_blended+0x14a>
            for(x = 0; x < w; x++) {
 800acd2:	2400      	movs	r4, #0
 800acd4:	f8cd b008 	str.w	fp, [sp, #8]
 800acd8:	e7de      	b.n	800ac98 <fill_blended+0x108>
        }
    }
}
 800acda:	b007      	add	sp, #28
 800acdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace0:	0800ae81 	.word	0x0800ae81
 800ace4:	0800aee9 	.word	0x0800aee9
 800ace8:	0800af4f 	.word	0x0800af4f

0800acec <map_blended>:

#if LV_DRAW_COMPLEX
static void map_blended(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
                        const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa,
                        const lv_opa_t * mask, lv_coord_t mask_stride, lv_blend_mode_t blend_mode)
{
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b089      	sub	sp, #36	@ 0x24
 800acf2:	4680      	mov	r8, r0
 800acf4:	9205      	str	r2, [sp, #20]
 800acf6:	4699      	mov	r9, r3
 800acf8:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	@ 0x48
 800acfc:	9306      	str	r3, [sp, #24]
 800acfe:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800ad06:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800ad0a:	9307      	str	r3, [sp, #28]
 800ad0c:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ad10:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 800ad14:	880b      	ldrh	r3, [r1, #0]
 800ad16:	ebab 0b03 	sub.w	fp, fp, r3
 800ad1a:	fa1f fb8b 	uxth.w	fp, fp
 800ad1e:	f10b 0b01 	add.w	fp, fp, #1
 800ad22:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ad26:	88cb      	ldrh	r3, [r1, #6]
 800ad28:	8849      	ldrh	r1, [r1, #2]
 800ad2a:	1a5b      	subs	r3, r3, r1
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	3301      	adds	r3, #1
 800ad30:	b21b      	sxth	r3, r3
 800ad32:	9304      	str	r3, [sp, #16]

    int32_t x;
    int32_t y;

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(blend_mode) {
 800ad34:	2a02      	cmp	r2, #2
 800ad36:	d014      	beq.n	800ad62 <map_blended+0x76>
 800ad38:	2a03      	cmp	r2, #3
 800ad3a:	d015      	beq.n	800ad68 <map_blended+0x7c>
 800ad3c:	2a01      	cmp	r2, #1
 800ad3e:	f040 8096 	bne.w	800ae6e <map_blended+0x182>
 800ad42:	4b4c      	ldr	r3, [pc, #304]	@ (800ae74 <map_blended+0x188>)
 800ad44:	9302      	str	r3, [sp, #8]
    }

    lv_color_t last_dest_color;
    lv_color_t last_src_color;
    /*Simple fill (maybe with opacity), no masking*/
    if(mask == NULL) {
 800ad46:	b194      	cbz	r4, 800ad6e <map_blended+0x82>
            src_buf += src_stride;
        }
    }
    /*Masked*/
    else {
        last_dest_color = dest_buf[0];
 800ad48:	f8b8 a000 	ldrh.w	sl, [r8]
        last_src_color = src_buf[0];
 800ad4c:	f8b9 7000 	ldrh.w	r7, [r9]
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	2bfc      	cmp	r3, #252	@ 0xfc
 800ad54:	d841      	bhi.n	800adda <map_blended+0xee>
 800ad56:	9a01      	ldr	r2, [sp, #4]
 800ad58:	fb02 f303 	mul.w	r3, r2, r3
 800ad5c:	0a1b      	lsrs	r3, r3, #8
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	e03d      	b.n	800adde <map_blended+0xf2>
            blend_fp = color_blend_true_color_subtractive;
 800ad62:	4b45      	ldr	r3, [pc, #276]	@ (800ae78 <map_blended+0x18c>)
 800ad64:	9302      	str	r3, [sp, #8]
 800ad66:	e7ee      	b.n	800ad46 <map_blended+0x5a>
            blend_fp = color_blend_true_color_multiply;
 800ad68:	4b44      	ldr	r3, [pc, #272]	@ (800ae7c <map_blended+0x190>)
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	e7eb      	b.n	800ad46 <map_blended+0x5a>
        last_dest_color = dest_buf[0];
 800ad6e:	f8b8 a000 	ldrh.w	sl, [r8]
        last_src_color = src_buf[0];
 800ad72:	f8b9 7000 	ldrh.w	r7, [r9]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 800ad76:	9a01      	ldr	r2, [sp, #4]
 800ad78:	4651      	mov	r1, sl
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	9c02      	ldr	r4, [sp, #8]
 800ad7e:	47a0      	blx	r4
        for(y = 0; y < h; y++) {
 800ad80:	2500      	movs	r5, #0
 800ad82:	462e      	mov	r6, r5
 800ad84:	4625      	mov	r5, r4
 800ad86:	e022      	b.n	800adce <map_blended+0xe2>
                    last_dest_color = dest_buf[x];
 800ad88:	f838 a006 	ldrh.w	sl, [r8, r6]
                    last_src_color = src_buf[x];
 800ad8c:	880f      	ldrh	r7, [r1, #0]
                    last_res_color = blend_fp(last_src_color, last_dest_color, opa);
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	4651      	mov	r1, sl
 800ad92:	4638      	mov	r0, r7
 800ad94:	47a8      	blx	r5
                dest_buf[x] = last_res_color;
 800ad96:	f828 0006 	strh.w	r0, [r8, r6]
            for(x = 0; x < w; x++) {
 800ad9a:	3401      	adds	r4, #1
 800ad9c:	455c      	cmp	r4, fp
 800ad9e:	da0e      	bge.n	800adbe <map_blended+0xd2>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full) {
 800ada0:	b2bb      	uxth	r3, r7
 800ada2:	0066      	lsls	r6, r4, #1
 800ada4:	eb09 0144 	add.w	r1, r9, r4, lsl #1
 800ada8:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
 800adac:	4293      	cmp	r3, r2
 800adae:	d1eb      	bne.n	800ad88 <map_blended+0x9c>
 800adb0:	fa1f f38a 	uxth.w	r3, sl
 800adb4:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 800adb8:	4293      	cmp	r3, r2
 800adba:	d1e5      	bne.n	800ad88 <map_blended+0x9c>
 800adbc:	e7eb      	b.n	800ad96 <map_blended+0xaa>
            dest_buf += dest_stride;
 800adbe:	9e00      	ldr	r6, [sp, #0]
 800adc0:	9b05      	ldr	r3, [sp, #20]
 800adc2:	eb08 0843 	add.w	r8, r8, r3, lsl #1
            src_buf += src_stride;
 800adc6:	9b06      	ldr	r3, [sp, #24]
 800adc8:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = 0; y < h; y++) {
 800adcc:	3601      	adds	r6, #1
 800adce:	9b04      	ldr	r3, [sp, #16]
 800add0:	429e      	cmp	r6, r3
 800add2:	da4c      	bge.n	800ae6e <map_blended+0x182>
            for(x = 0; x < w; x++) {
 800add4:	2400      	movs	r4, #0
 800add6:	9600      	str	r6, [sp, #0]
 800add8:	e7e0      	b.n	800ad9c <map_blended+0xb0>
        lv_opa_t last_opa = mask[0] >= LV_OPA_MAX ? opa : ((opa * mask[0]) >> 8);
 800adda:	9b01      	ldr	r3, [sp, #4]
 800addc:	9300      	str	r3, [sp, #0]
        lv_color_t last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 800adde:	9a00      	ldr	r2, [sp, #0]
 800ade0:	4651      	mov	r1, sl
 800ade2:	4638      	mov	r0, r7
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	4798      	blx	r3
        for(y = 0; y < h; y++) {
 800ade8:	2600      	movs	r6, #0
 800adea:	4635      	mov	r5, r6
 800adec:	f8dd e000 	ldr.w	lr, [sp]
 800adf0:	f8cd b000 	str.w	fp, [sp]
 800adf4:	4626      	mov	r6, r4
 800adf6:	e034      	b.n	800ae62 <map_blended+0x176>
            for(x = 0; x < w; x++) {
                if(mask[x] == 0) continue;
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800adf8:	9d01      	ldr	r5, [sp, #4]
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800adfa:	b2bb      	uxth	r3, r7
 800adfc:	eb09 014b 	add.w	r1, r9, fp, lsl #1
 800ae00:	f839 201b 	ldrh.w	r2, [r9, fp, lsl #1]
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d019      	beq.n	800ae3c <map_blended+0x150>
                    last_dest_color = dest_buf[x];
 800ae08:	f838 a01b 	ldrh.w	sl, [r8, fp, lsl #1]
                    last_src_color = src_buf[x];
 800ae0c:	880f      	ldrh	r7, [r1, #0]
                    last_opa = opa_tmp;
                    last_res_color = blend_fp(last_src_color, last_dest_color, last_opa);
 800ae0e:	462a      	mov	r2, r5
 800ae10:	4651      	mov	r1, sl
 800ae12:	4638      	mov	r0, r7
 800ae14:	9b02      	ldr	r3, [sp, #8]
 800ae16:	4798      	blx	r3
                    last_opa = opa_tmp;
 800ae18:	46ae      	mov	lr, r5
                }
                dest_buf[x] = last_res_color;
 800ae1a:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
            for(x = 0; x < w; x++) {
 800ae1e:	3401      	adds	r4, #1
 800ae20:	9b00      	ldr	r3, [sp, #0]
 800ae22:	429c      	cmp	r4, r3
 800ae24:	da13      	bge.n	800ae4e <map_blended+0x162>
                if(mask[x] == 0) continue;
 800ae26:	46a3      	mov	fp, r4
 800ae28:	5d35      	ldrb	r5, [r6, r4]
 800ae2a:	2d00      	cmp	r5, #0
 800ae2c:	d0f7      	beq.n	800ae1e <map_blended+0x132>
                lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800ae2e:	2dfc      	cmp	r5, #252	@ 0xfc
 800ae30:	d8e2      	bhi.n	800adf8 <map_blended+0x10c>
 800ae32:	9b01      	ldr	r3, [sp, #4]
 800ae34:	fb03 f505 	mul.w	r5, r3, r5
 800ae38:	0a2d      	lsrs	r5, r5, #8
 800ae3a:	e7de      	b.n	800adfa <map_blended+0x10e>
                if(last_src_color.full != src_buf[x].full || last_dest_color.full != dest_buf[x].full || last_opa != opa_tmp) {
 800ae3c:	fa1f f38a 	uxth.w	r3, sl
 800ae40:	f838 201b 	ldrh.w	r2, [r8, fp, lsl #1]
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d1df      	bne.n	800ae08 <map_blended+0x11c>
 800ae48:	45ae      	cmp	lr, r5
 800ae4a:	d1dd      	bne.n	800ae08 <map_blended+0x11c>
 800ae4c:	e7e5      	b.n	800ae1a <map_blended+0x12e>
            }
            dest_buf += dest_stride;
 800ae4e:	9d03      	ldr	r5, [sp, #12]
 800ae50:	9b05      	ldr	r3, [sp, #20]
 800ae52:	eb08 0843 	add.w	r8, r8, r3, lsl #1
            src_buf += src_stride;
 800ae56:	9b06      	ldr	r3, [sp, #24]
 800ae58:	eb09 0943 	add.w	r9, r9, r3, lsl #1
            mask += mask_stride;
 800ae5c:	9b07      	ldr	r3, [sp, #28]
 800ae5e:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800ae60:	3501      	adds	r5, #1
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	429d      	cmp	r5, r3
 800ae66:	da02      	bge.n	800ae6e <map_blended+0x182>
            for(x = 0; x < w; x++) {
 800ae68:	2400      	movs	r4, #0
 800ae6a:	9503      	str	r5, [sp, #12]
 800ae6c:	e7d8      	b.n	800ae20 <map_blended+0x134>
        }
    }
}
 800ae6e:	b009      	add	sp, #36	@ 0x24
 800ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae74:	0800ae81 	.word	0x0800ae81
 800ae78:	0800aee9 	.word	0x0800aee9
 800ae7c:	0800af4f 	.word	0x0800af4f

0800ae80 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
 800ae80:	2a02      	cmp	r2, #2
 800ae82:	d92f      	bls.n	800aee4 <color_blend_true_color_additive+0x64>
{
 800ae84:	b508      	push	{r3, lr}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
 800ae86:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 800ae8a:	f3c0 0cc4 	ubfx	ip, r0, #3, #5
 800ae8e:	4463      	add	r3, ip
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MIN(tmp, 31);
 800ae90:	2b1f      	cmp	r3, #31
 800ae92:	bf28      	it	cs
 800ae94:	231f      	movcs	r3, #31
 800ae96:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 800ae9a:	f001 0c07 	and.w	ip, r1, #7
 800ae9e:	f3c1 3342 	ubfx	r3, r1, #13, #3
 800aea2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800aea6:	f000 0c07 	and.w	ip, r0, #7
 800aeaa:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800aeae:	f3c0 3c42 	ubfx	ip, r0, #13, #3
 800aeb2:	4463      	add	r3, ip
    tmp = LV_MIN(tmp, 63);
 800aeb4:	2b3f      	cmp	r3, #63	@ 0x3f
 800aeb6:	bf28      	it	cs
 800aeb8:	233f      	movcs	r3, #63	@ 0x3f
    fg.ch.green_h = tmp >> 3;
 800aeba:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
 800aebe:	f36c 0002 	bfi	r0, ip, #0, #3
    fg.ch.green_l = tmp & 0x7;
 800aec2:	f363 304f 	bfi	r0, r3, #13, #3
#elif LV_COLOR_DEPTH == 32
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
 800aec6:	f3c1 2304 	ubfx	r3, r1, #8, #5
 800aeca:	f3c0 2c04 	ubfx	ip, r0, #8, #5
 800aece:	4463      	add	r3, ip
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MIN(tmp, 31);
 800aed0:	2b1f      	cmp	r3, #31
 800aed2:	bf28      	it	cs
 800aed4:	231f      	movcs	r3, #31
 800aed6:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
 800aeda:	2aff      	cmp	r2, #255	@ 0xff
 800aedc:	d001      	beq.n	800aee2 <color_blend_true_color_additive+0x62>

    return lv_color_mix(fg, bg, opa);
 800aede:	f7ff fdfb 	bl	800aad8 <lv_color_mix>
}
 800aee2:	bd08      	pop	{r3, pc}
    if(opa <= LV_OPA_MIN) return bg;
 800aee4:	4608      	mov	r0, r1
}
 800aee6:	4770      	bx	lr

0800aee8 <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    if(opa <= LV_OPA_MIN) return bg;
 800aee8:	2a02      	cmp	r2, #2
 800aeea:	d92e      	bls.n	800af4a <color_blend_true_color_subtractive+0x62>
{
 800aeec:	b508      	push	{r3, lr}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
 800aeee:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 800aef2:	f3c0 0cc4 	ubfx	ip, r0, #3, #5
 800aef6:	eba3 030c 	sub.w	r3, r3, ip
    fg.ch.red = LV_MAX(tmp, 0);
 800aefa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aefe:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
 800af02:	f001 0c07 	and.w	ip, r1, #7
 800af06:	f3c1 3342 	ubfx	r3, r1, #13, #3
 800af0a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800af0e:	f000 0c07 	and.w	ip, r0, #7
 800af12:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800af16:	f3c0 3c42 	ubfx	ip, r0, #13, #3
 800af1a:	4463      	add	r3, ip
    tmp = LV_MAX(tmp, 0);
 800af1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
 800af20:	f3c3 0cc2 	ubfx	ip, r3, #3, #3
 800af24:	f36c 0002 	bfi	r0, ip, #0, #3
    fg.ch.green_l = tmp & 0x7;
 800af28:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
 800af2c:	f3c1 2304 	ubfx	r3, r1, #8, #5
 800af30:	f3c0 2c04 	ubfx	ip, r0, #8, #5
 800af34:	eba3 030c 	sub.w	r3, r3, ip
    fg.ch.blue = LV_MAX(tmp, 0);
 800af38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af3c:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
 800af40:	2aff      	cmp	r2, #255	@ 0xff
 800af42:	d001      	beq.n	800af48 <color_blend_true_color_subtractive+0x60>

    return lv_color_mix(fg, bg, opa);
 800af44:	f7ff fdc8 	bl	800aad8 <lv_color_mix>
}
 800af48:	bd08      	pop	{r3, pc}
    if(opa <= LV_OPA_MIN) return bg;
 800af4a:	4608      	mov	r0, r1
}
 800af4c:	4770      	bx	lr

0800af4e <color_blend_true_color_multiply>:

static inline lv_color_t color_blend_true_color_multiply(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{
    if(opa <= LV_OPA_MIN) return bg;
 800af4e:	2a02      	cmp	r2, #2
 800af50:	d933      	bls.n	800afba <color_blend_true_color_multiply+0x6c>
{
 800af52:	b510      	push	{r4, lr}
#if LV_COLOR_DEPTH == 32
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 8;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 8;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 8;
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 5;
 800af54:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800af58:	f3c1 04c4 	ubfx	r4, r1, #3, #5
 800af5c:	fb04 f303 	mul.w	r3, r4, r3
 800af60:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800af64:	f363 00c7 	bfi	r0, r3, #3, #5
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 5;
 800af68:	f3c0 2304 	ubfx	r3, r0, #8, #5
 800af6c:	f3c1 2404 	ubfx	r4, r1, #8, #5
 800af70:	fb04 f303 	mul.w	r3, r4, r3
 800af74:	f3c3 1344 	ubfx	r3, r3, #5, #5
 800af78:	f363 200c 	bfi	r0, r3, #8, #5
    LV_COLOR_SET_G(fg, (LV_COLOR_GET_G(fg) * LV_COLOR_GET_G(bg)) >> 6);
 800af7c:	f000 0c07 	and.w	ip, r0, #7
 800af80:	f3c0 3e42 	ubfx	lr, r0, #13, #3
 800af84:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 800af88:	f001 0407 	and.w	r4, r1, #7
 800af8c:	f3c1 3342 	ubfx	r3, r1, #13, #3
 800af90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af94:	fb03 fc0c 	mul.w	ip, r3, ip
 800af98:	f3cc 2442 	ubfx	r4, ip, #9, #3
 800af9c:	f364 0002 	bfi	r0, r4, #0, #3
 800afa0:	eb0e 0ec4 	add.w	lr, lr, r4, lsl #3
 800afa4:	fb0e f303 	mul.w	r3, lr, r3
 800afa8:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800afac:	f363 304f 	bfi	r0, r3, #13, #3
    fg.ch.red = (fg.ch.red * bg.ch.red) >> 3;
    fg.ch.green = (fg.ch.green * bg.ch.green) >> 3;
    fg.ch.blue = (fg.ch.blue * bg.ch.blue) >> 2;
#endif

    if(opa == LV_OPA_COVER) return fg;
 800afb0:	2aff      	cmp	r2, #255	@ 0xff
 800afb2:	d001      	beq.n	800afb8 <color_blend_true_color_multiply+0x6a>

    return lv_color_mix(fg, bg, opa);
 800afb4:	f7ff fd90 	bl	800aad8 <lv_color_mix>
}
 800afb8:	bd10      	pop	{r4, pc}
    if(opa <= LV_OPA_MIN) return bg;
 800afba:	4608      	mov	r0, r1
}
 800afbc:	4770      	bx	lr

0800afbe <fill_set_px>:
{
 800afbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc2:	b08b      	sub	sp, #44	@ 0x2c
 800afc4:	9005      	str	r0, [sp, #20]
 800afc6:	460d      	mov	r5, r1
 800afc8:	9206      	str	r2, [sp, #24]
 800afca:	469a      	mov	sl, r3
 800afcc:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 800afd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800afd2:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	@ 0x58
 800afd6:	9309      	str	r3, [sp, #36]	@ 0x24
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800afd8:	f014 f858 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800afdc:	4681      	mov	r9, r0
    if(mask == NULL) {
 800afde:	b19e      	cbz	r6, 800b008 <fill_set_px+0x4a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800afe0:	88af      	ldrh	r7, [r5, #4]
 800afe2:	882b      	ldrh	r3, [r5, #0]
 800afe4:	1aff      	subs	r7, r7, r3
 800afe6:	b2bf      	uxth	r7, r7
 800afe8:	3701      	adds	r7, #1
 800afea:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800afec:	88eb      	ldrh	r3, [r5, #6]
 800afee:	886a      	ldrh	r2, [r5, #2]
 800aff0:	1a9b      	subs	r3, r3, r2
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	3301      	adds	r3, #1
 800aff6:	fa0f f883 	sxth.w	r8, r3
        for(y = 0; y < h; y++) {
 800affa:	f04f 0c00 	mov.w	ip, #0
 800affe:	9007      	str	r0, [sp, #28]
 800b000:	46e1      	mov	r9, ip
 800b002:	f8cd 8020 	str.w	r8, [sp, #32]
 800b006:	e044      	b.n	800b092 <fill_set_px+0xd4>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800b008:	f9b5 7002 	ldrsh.w	r7, [r5, #2]
 800b00c:	463a      	mov	r2, r7
 800b00e:	9e05      	ldr	r6, [sp, #20]
 800b010:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b014:	465b      	mov	r3, fp
 800b016:	46ab      	mov	fp, r5
 800b018:	461d      	mov	r5, r3
 800b01a:	e013      	b.n	800b044 <fill_set_px+0x86>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, x, y, color, opa);
 800b01c:	f8d9 0000 	ldr.w	r0, [r9]
 800b020:	69c7      	ldr	r7, [r0, #28]
 800b022:	9502      	str	r5, [sp, #8]
 800b024:	f8ad a004 	strh.w	sl, [sp, #4]
 800b028:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	b223      	sxth	r3, r4
 800b030:	4642      	mov	r2, r8
 800b032:	4631      	mov	r1, r6
 800b034:	47b8      	blx	r7
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800b036:	3401      	adds	r4, #1
 800b038:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	daed      	bge.n	800b01c <fill_set_px+0x5e>
        for(y = blend_area->y1; y <= blend_area->y2; y++) {
 800b040:	9a05      	ldr	r2, [sp, #20]
 800b042:	3201      	adds	r2, #1
 800b044:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800b048:	4293      	cmp	r3, r2
 800b04a:	db27      	blt.n	800b09c <fill_set_px+0xde>
            for(x = blend_area->x1; x <= blend_area->x2; x++) {
 800b04c:	f9bb 4000 	ldrsh.w	r4, [fp]
 800b050:	9205      	str	r2, [sp, #20]
 800b052:	e7f1      	b.n	800b038 <fill_set_px+0x7a>
            for(x = 0; x < w; x++) {
 800b054:	3401      	adds	r4, #1
 800b056:	42bc      	cmp	r4, r7
 800b058:	da17      	bge.n	800b08a <fill_set_px+0xcc>
                if(mask[x]) {
 800b05a:	5d32      	ldrb	r2, [r6, r4]
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	d0f9      	beq.n	800b054 <fill_set_px+0x96>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800b060:	9b07      	ldr	r3, [sp, #28]
 800b062:	6818      	ldr	r0, [r3, #0]
 800b064:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800b068:	882b      	ldrh	r3, [r5, #0]
 800b06a:	4423      	add	r3, r4
 800b06c:	8869      	ldrh	r1, [r5, #2]
 800b06e:	4449      	add	r1, r9
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800b070:	fb02 f20b 	mul.w	r2, r2, fp
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, blend_area->x1 + x, blend_area->y1 + y, color,
 800b074:	0a12      	lsrs	r2, r2, #8
 800b076:	9202      	str	r2, [sp, #8]
 800b078:	f8ad a004 	strh.w	sl, [sp, #4]
 800b07c:	b209      	sxth	r1, r1
 800b07e:	9100      	str	r1, [sp, #0]
 800b080:	b21b      	sxth	r3, r3
 800b082:	9a06      	ldr	r2, [sp, #24]
 800b084:	9905      	ldr	r1, [sp, #20]
 800b086:	47c0      	blx	r8
 800b088:	e7e4      	b.n	800b054 <fill_set_px+0x96>
            mask += mask_stide;
 800b08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08c:	441e      	add	r6, r3
        for(y = 0; y < h; y++) {
 800b08e:	f109 0901 	add.w	r9, r9, #1
 800b092:	9b08      	ldr	r3, [sp, #32]
 800b094:	4599      	cmp	r9, r3
 800b096:	da01      	bge.n	800b09c <fill_set_px+0xde>
            for(x = 0; x < w; x++) {
 800b098:	2400      	movs	r4, #0
 800b09a:	e7dc      	b.n	800b056 <fill_set_px+0x98>
}
 800b09c:	b00b      	add	sp, #44	@ 0x2c
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0a2 <map_set_px>:
{
 800b0a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a6:	b08b      	sub	sp, #44	@ 0x2c
 800b0a8:	9004      	str	r0, [sp, #16]
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	9205      	str	r2, [sp, #20]
 800b0ae:	461f      	mov	r7, r3
 800b0b0:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800b0b4:	9308      	str	r3, [sp, #32]
 800b0b6:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 800b0ba:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0be:	f9bd 905c 	ldrsh.w	r9, [sp, #92]	@ 0x5c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b0c2:	f013 ffe3 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800b0c6:	4682      	mov	sl, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b0c8:	88ae      	ldrh	r6, [r5, #4]
 800b0ca:	882b      	ldrh	r3, [r5, #0]
 800b0cc:	1af6      	subs	r6, r6, r3
 800b0ce:	b2b6      	uxth	r6, r6
 800b0d0:	3601      	adds	r6, #1
 800b0d2:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b0d4:	88eb      	ldrh	r3, [r5, #6]
 800b0d6:	886a      	ldrh	r2, [r5, #2]
 800b0d8:	1a9b      	subs	r3, r3, r2
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	3301      	adds	r3, #1
 800b0de:	b21b      	sxth	r3, r3
 800b0e0:	9307      	str	r3, [sp, #28]
    if(mask == NULL) {
 800b0e2:	f1b8 0f00 	cmp.w	r8, #0
 800b0e6:	d027      	beq.n	800b138 <map_set_px+0x96>
        for(y = 0; y < h; y++) {
 800b0e8:	f04f 0c00 	mov.w	ip, #0
 800b0ec:	9006      	str	r0, [sp, #24]
 800b0ee:	46e2      	mov	sl, ip
 800b0f0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800b0f4:	46b9      	mov	r9, r7
 800b0f6:	e047      	b.n	800b188 <map_set_px+0xe6>
                disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800b0f8:	f8da 0000 	ldr.w	r0, [sl]
 800b0fc:	69c6      	ldr	r6, [r0, #28]
 800b0fe:	882b      	ldrh	r3, [r5, #0]
 800b100:	4423      	add	r3, r4
 800b102:	886a      	ldrh	r2, [r5, #2]
 800b104:	444a      	add	r2, r9
 800b106:	f8cd b008 	str.w	fp, [sp, #8]
 800b10a:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 800b10e:	f8ad 1004 	strh.w	r1, [sp, #4]
 800b112:	b212      	sxth	r2, r2
 800b114:	9200      	str	r2, [sp, #0]
 800b116:	b21b      	sxth	r3, r3
 800b118:	9a05      	ldr	r2, [sp, #20]
 800b11a:	9904      	ldr	r1, [sp, #16]
 800b11c:	47b0      	blx	r6
            for(x = 0; x < w; x++) {
 800b11e:	3401      	adds	r4, #1
 800b120:	4544      	cmp	r4, r8
 800b122:	dbe9      	blt.n	800b0f8 <map_set_px+0x56>
            src_buf += src_stride;
 800b124:	9b08      	ldr	r3, [sp, #32]
 800b126:	eb07 0743 	add.w	r7, r7, r3, lsl #1
        for(y = 0; y < h; y++) {
 800b12a:	f109 0901 	add.w	r9, r9, #1
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	4599      	cmp	r9, r3
 800b132:	da2e      	bge.n	800b192 <map_set_px+0xf0>
            for(x = 0; x < w; x++) {
 800b134:	2400      	movs	r4, #0
 800b136:	e7f3      	b.n	800b120 <map_set_px+0x7e>
        for(y = 0; y < h; y++) {
 800b138:	f04f 0900 	mov.w	r9, #0
 800b13c:	46b0      	mov	r8, r6
 800b13e:	e7f6      	b.n	800b12e <map_set_px+0x8c>
            for(x = 0; x < w; x++) {
 800b140:	3401      	adds	r4, #1
 800b142:	42b4      	cmp	r4, r6
 800b144:	da19      	bge.n	800b17a <map_set_px+0xd8>
                if(mask[x]) {
 800b146:	f818 2004 	ldrb.w	r2, [r8, r4]
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	d0f8      	beq.n	800b140 <map_set_px+0x9e>
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	69c7      	ldr	r7, [r0, #28]
 800b154:	882b      	ldrh	r3, [r5, #0]
 800b156:	4423      	add	r3, r4
 800b158:	8869      	ldrh	r1, [r5, #2]
 800b15a:	4451      	add	r1, sl
                                            (uint32_t)((uint32_t)opa * mask[x]) >> 8);
 800b15c:	fb02 f20b 	mul.w	r2, r2, fp
                    disp->driver->set_px_cb(disp->driver, (void *)dest_buf, dest_stride, dest_area->x1 + x, dest_area->y1 + y, src_buf[x],
 800b160:	0a12      	lsrs	r2, r2, #8
 800b162:	9202      	str	r2, [sp, #8]
 800b164:	f839 2014 	ldrh.w	r2, [r9, r4, lsl #1]
 800b168:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b16c:	b209      	sxth	r1, r1
 800b16e:	9100      	str	r1, [sp, #0]
 800b170:	b21b      	sxth	r3, r3
 800b172:	9a05      	ldr	r2, [sp, #20]
 800b174:	9904      	ldr	r1, [sp, #16]
 800b176:	47b8      	blx	r7
 800b178:	e7e2      	b.n	800b140 <map_set_px+0x9e>
            mask += mask_stride;
 800b17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17c:	4498      	add	r8, r3
            src_buf += src_stride;
 800b17e:	9b08      	ldr	r3, [sp, #32]
 800b180:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = 0; y < h; y++) {
 800b184:	f10a 0a01 	add.w	sl, sl, #1
 800b188:	9b07      	ldr	r3, [sp, #28]
 800b18a:	459a      	cmp	sl, r3
 800b18c:	da01      	bge.n	800b192 <map_set_px+0xf0>
            for(x = 0; x < w; x++) {
 800b18e:	2400      	movs	r4, #0
 800b190:	e7d7      	b.n	800b142 <map_set_px+0xa0>
}
 800b192:	b00b      	add	sp, #44	@ 0x2c
 800b194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b198 <fill_normal>:
{
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	b087      	sub	sp, #28
 800b19e:	4604      	mov	r4, r0
 800b1a0:	9201      	str	r2, [sp, #4]
 800b1a2:	4699      	mov	r9, r3
 800b1a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b1ac:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b1b0:	888f      	ldrh	r7, [r1, #4]
 800b1b2:	880b      	ldrh	r3, [r1, #0]
 800b1b4:	1aff      	subs	r7, r7, r3
 800b1b6:	b2bf      	uxth	r7, r7
 800b1b8:	3701      	adds	r7, #1
 800b1ba:	b23f      	sxth	r7, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b1bc:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800b1c0:	884b      	ldrh	r3, [r1, #2]
 800b1c2:	ebab 0b03 	sub.w	fp, fp, r3
 800b1c6:	fa1f fb8b 	uxth.w	fp, fp
 800b1ca:	f10b 0b01 	add.w	fp, fp, #1
 800b1ce:	fa0f fb8b 	sxth.w	fp, fp
    if(mask == NULL) {
 800b1d2:	b185      	cbz	r5, 800b1f6 <fill_normal+0x5e>
        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
 800b1d4:	ea4f 4109 	mov.w	r1, r9, lsl #16
 800b1d8:	fa11 fa89 	uxtah	sl, r1, r9
        if(opa >= LV_OPA_MAX) {
 800b1dc:	9b00      	ldr	r3, [sp, #0]
 800b1de:	2bfc      	cmp	r3, #252	@ 0xfc
 800b1e0:	f240 80ec 	bls.w	800b3bc <fill_normal+0x224>
            int32_t x_end4 = w - 4;
 800b1e4:	f1a7 0804 	sub.w	r8, r7, #4
            for(y = 0; y < h; y++) {
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	f8cd b000 	str.w	fp, [sp]
 800b1ee:	469b      	mov	fp, r3
 800b1f0:	f8cd c008 	str.w	ip, [sp, #8]
 800b1f4:	e0dd      	b.n	800b3b2 <fill_normal+0x21a>
        if(opa >= LV_OPA_MAX) {
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	2bfc      	cmp	r3, #252	@ 0xfc
 800b1fa:	d82e      	bhi.n	800b25a <fill_normal+0xc2>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 800b1fc:	f04f 0100 	mov.w	r1, #0
 800b200:	f021 0107 	bic.w	r1, r1, #7
 800b204:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 800b208:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 800b20c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800b210:	460e      	mov	r6, r1
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
 800b212:	9d00      	ldr	r5, [sp, #0]
 800b214:	462a      	mov	r2, r5
 800b216:	4648      	mov	r0, r9
 800b218:	f7ff fc5e 	bl	800aad8 <lv_color_mix>
            opa = (uint32_t)((uint32_t)opa + 4) >> 3;
 800b21c:	462b      	mov	r3, r5
 800b21e:	3304      	adds	r3, #4
            opa = opa << 3;
 800b220:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800b224:	f3c9 02c4 	ubfx	r2, r9, #3, #5
 800b228:	fb03 f202 	mul.w	r2, r3, r2
 800b22c:	f8ad 2010 	strh.w	r2, [sp, #16]
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800b230:	f009 0107 	and.w	r1, r9, #7
 800b234:	f3c9 3242 	ubfx	r2, r9, #13, #3
 800b238:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b23c:	fb13 f202 	smulbb	r2, r3, r2
 800b240:	f8ad 2012 	strh.w	r2, [sp, #18]
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800b244:	f3c9 2204 	ubfx	r2, r9, #8, #5
 800b248:	fb03 f202 	mul.w	r2, r3, r2
 800b24c:	f8ad 2014 	strh.w	r2, [sp, #20]
            lv_opa_t opa_inv = 255 - opa;
 800b250:	f083 09ff 	eor.w	r9, r3, #255	@ 0xff
            for(y = 0; y < h; y++) {
 800b254:	f04f 0a00 	mov.w	sl, #0
 800b258:	e026      	b.n	800b2a8 <fill_normal+0x110>
            for(y = 0; y < h; y++) {
 800b25a:	2500      	movs	r5, #0
 800b25c:	9e01      	ldr	r6, [sp, #4]
 800b25e:	455d      	cmp	r5, fp
 800b260:	f280 80f0 	bge.w	800b444 <fill_normal+0x2ac>
                lv_color_fill(dest_buf, color, w);
 800b264:	463a      	mov	r2, r7
 800b266:	4649      	mov	r1, r9
 800b268:	4620      	mov	r0, r4
 800b26a:	f7fb facd 	bl	8006808 <lv_color_fill>
                dest_buf += dest_stride;
 800b26e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
            for(y = 0; y < h; y++) {
 800b272:	3501      	adds	r5, #1
 800b274:	e7f3      	b.n	800b25e <fill_normal+0xc6>
                        last_dest_color = dest_buf[x];
 800b276:	f834 6015 	ldrh.w	r6, [r4, r5, lsl #1]
                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
 800b27a:	464a      	mov	r2, r9
 800b27c:	4631      	mov	r1, r6
 800b27e:	a804      	add	r0, sp, #16
 800b280:	f7ff fc50 	bl	800ab24 <lv_color_mix_premult>
                    dest_buf[x] = last_res_color;
 800b284:	f8a8 0000 	strh.w	r0, [r8]
                for(x = 0; x < w; x++) {
 800b288:	3501      	adds	r5, #1
 800b28a:	42bd      	cmp	r5, r7
 800b28c:	da07      	bge.n	800b29e <fill_normal+0x106>
                    if(last_dest_color.full != dest_buf[x].full) {
 800b28e:	b2b3      	uxth	r3, r6
 800b290:	eb04 0845 	add.w	r8, r4, r5, lsl #1
 800b294:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
 800b298:	4293      	cmp	r3, r2
 800b29a:	d1ec      	bne.n	800b276 <fill_normal+0xde>
 800b29c:	e7f2      	b.n	800b284 <fill_normal+0xec>
                dest_buf += dest_stride;
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
            for(y = 0; y < h; y++) {
 800b2a4:	f10a 0a01 	add.w	sl, sl, #1
 800b2a8:	45da      	cmp	sl, fp
 800b2aa:	f280 80cb 	bge.w	800b444 <fill_normal+0x2ac>
                for(x = 0; x < w; x++) {
 800b2ae:	2500      	movs	r5, #0
 800b2b0:	e7eb      	b.n	800b28a <fill_normal+0xf2>
                    FILL_NORMAL_MASK_PX(color)
 800b2b2:	f8a4 9000 	strh.w	r9, [r4]
 800b2b6:	3501      	adds	r5, #1
 800b2b8:	3402      	adds	r4, #2
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800b2ba:	3601      	adds	r6, #1
 800b2bc:	42be      	cmp	r6, r7
 800b2be:	da57      	bge.n	800b370 <fill_normal+0x1d8>
 800b2c0:	f015 0f03 	tst.w	r5, #3
 800b2c4:	d008      	beq.n	800b2d8 <fill_normal+0x140>
                    FILL_NORMAL_MASK_PX(color)
 800b2c6:	782a      	ldrb	r2, [r5, #0]
 800b2c8:	2aff      	cmp	r2, #255	@ 0xff
 800b2ca:	d0f2      	beq.n	800b2b2 <fill_normal+0x11a>
 800b2cc:	8821      	ldrh	r1, [r4, #0]
 800b2ce:	4648      	mov	r0, r9
 800b2d0:	f7ff fc02 	bl	800aad8 <lv_color_mix>
 800b2d4:	8020      	strh	r0, [r4, #0]
 800b2d6:	e7ee      	b.n	800b2b6 <fill_normal+0x11e>
 800b2d8:	463b      	mov	r3, r7
 800b2da:	4657      	mov	r7, sl
 800b2dc:	469a      	mov	sl, r3
 800b2de:	e00b      	b.n	800b2f8 <fill_normal+0x160>
                        if((lv_uintptr_t)dest_buf & 0x3) {
 800b2e0:	f014 0f03 	tst.w	r4, #3
 800b2e4:	d032      	beq.n	800b34c <fill_normal+0x1b4>
                            *(dest_buf + 0) = color;
 800b2e6:	f8a4 9000 	strh.w	r9, [r4]
                            *d = c32;
 800b2ea:	f8c4 7002 	str.w	r7, [r4, #2]
                            *(dest_buf + 3) = color;
 800b2ee:	f8a4 9006 	strh.w	r9, [r4, #6]
                        dest_buf += 4;
 800b2f2:	3408      	adds	r4, #8
                        mask += 4;
 800b2f4:	3504      	adds	r5, #4
                for(; x <= x_end4; x += 4) {
 800b2f6:	3604      	adds	r6, #4
 800b2f8:	4546      	cmp	r6, r8
 800b2fa:	dc3d      	bgt.n	800b378 <fill_normal+0x1e0>
                    uint32_t mask32 = *((uint32_t *)mask);
 800b2fc:	682b      	ldr	r3, [r5, #0]
                    if(mask32 == 0xFFFFFFFF) {
 800b2fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b302:	d0ed      	beq.n	800b2e0 <fill_normal+0x148>
                    else if(mask32) {
 800b304:	b38b      	cbz	r3, 800b36a <fill_normal+0x1d2>
                        FILL_NORMAL_MASK_PX(color)
 800b306:	782a      	ldrb	r2, [r5, #0]
 800b308:	2aff      	cmp	r2, #255	@ 0xff
 800b30a:	d022      	beq.n	800b352 <fill_normal+0x1ba>
 800b30c:	8821      	ldrh	r1, [r4, #0]
 800b30e:	4648      	mov	r0, r9
 800b310:	f7ff fbe2 	bl	800aad8 <lv_color_mix>
 800b314:	8020      	strh	r0, [r4, #0]
                        FILL_NORMAL_MASK_PX(color)
 800b316:	786a      	ldrb	r2, [r5, #1]
 800b318:	2aff      	cmp	r2, #255	@ 0xff
 800b31a:	d01d      	beq.n	800b358 <fill_normal+0x1c0>
 800b31c:	8861      	ldrh	r1, [r4, #2]
 800b31e:	4648      	mov	r0, r9
 800b320:	f7ff fbda 	bl	800aad8 <lv_color_mix>
 800b324:	8060      	strh	r0, [r4, #2]
                        FILL_NORMAL_MASK_PX(color)
 800b326:	78aa      	ldrb	r2, [r5, #2]
 800b328:	2aff      	cmp	r2, #255	@ 0xff
 800b32a:	d018      	beq.n	800b35e <fill_normal+0x1c6>
 800b32c:	88a1      	ldrh	r1, [r4, #4]
 800b32e:	4648      	mov	r0, r9
 800b330:	f7ff fbd2 	bl	800aad8 <lv_color_mix>
 800b334:	80a0      	strh	r0, [r4, #4]
                        FILL_NORMAL_MASK_PX(color)
 800b336:	78ea      	ldrb	r2, [r5, #3]
 800b338:	2aff      	cmp	r2, #255	@ 0xff
 800b33a:	d013      	beq.n	800b364 <fill_normal+0x1cc>
 800b33c:	88e1      	ldrh	r1, [r4, #6]
 800b33e:	4648      	mov	r0, r9
 800b340:	f7ff fbca 	bl	800aad8 <lv_color_mix>
 800b344:	80e0      	strh	r0, [r4, #6]
 800b346:	3504      	adds	r5, #4
 800b348:	3408      	adds	r4, #8
 800b34a:	e7d4      	b.n	800b2f6 <fill_normal+0x15e>
                            *d = c32;
 800b34c:	6027      	str	r7, [r4, #0]
                            *(d + 1) = c32;
 800b34e:	6067      	str	r7, [r4, #4]
 800b350:	e7cf      	b.n	800b2f2 <fill_normal+0x15a>
                        FILL_NORMAL_MASK_PX(color)
 800b352:	f8a4 9000 	strh.w	r9, [r4]
 800b356:	e7de      	b.n	800b316 <fill_normal+0x17e>
                        FILL_NORMAL_MASK_PX(color)
 800b358:	f8a4 9002 	strh.w	r9, [r4, #2]
 800b35c:	e7e3      	b.n	800b326 <fill_normal+0x18e>
                        FILL_NORMAL_MASK_PX(color)
 800b35e:	f8a4 9004 	strh.w	r9, [r4, #4]
 800b362:	e7e8      	b.n	800b336 <fill_normal+0x19e>
                        FILL_NORMAL_MASK_PX(color)
 800b364:	f8a4 9006 	strh.w	r9, [r4, #6]
 800b368:	e7ed      	b.n	800b346 <fill_normal+0x1ae>
                        mask += 4;
 800b36a:	3504      	adds	r5, #4
                        dest_buf += 4;
 800b36c:	3408      	adds	r4, #8
 800b36e:	e7c2      	b.n	800b2f6 <fill_normal+0x15e>
 800b370:	463b      	mov	r3, r7
 800b372:	4657      	mov	r7, sl
 800b374:	469a      	mov	sl, r3
 800b376:	e7bf      	b.n	800b2f8 <fill_normal+0x160>
 800b378:	4653      	mov	r3, sl
 800b37a:	46ba      	mov	sl, r7
 800b37c:	461f      	mov	r7, r3
 800b37e:	e004      	b.n	800b38a <fill_normal+0x1f2>
                    FILL_NORMAL_MASK_PX(color)
 800b380:	f8a4 9000 	strh.w	r9, [r4]
 800b384:	3501      	adds	r5, #1
 800b386:	3402      	adds	r4, #2
                for(; x < w ; x++) {
 800b388:	3601      	adds	r6, #1
 800b38a:	42be      	cmp	r6, r7
 800b38c:	da08      	bge.n	800b3a0 <fill_normal+0x208>
                    FILL_NORMAL_MASK_PX(color)
 800b38e:	782a      	ldrb	r2, [r5, #0]
 800b390:	2aff      	cmp	r2, #255	@ 0xff
 800b392:	d0f5      	beq.n	800b380 <fill_normal+0x1e8>
 800b394:	8821      	ldrh	r1, [r4, #0]
 800b396:	4648      	mov	r0, r9
 800b398:	f7ff fb9e 	bl	800aad8 <lv_color_mix>
 800b39c:	8020      	strh	r0, [r4, #0]
 800b39e:	e7f1      	b.n	800b384 <fill_normal+0x1ec>
                dest_buf += (dest_stride - w);
 800b3a0:	9b01      	ldr	r3, [sp, #4]
 800b3a2:	1bdb      	subs	r3, r3, r7
 800b3a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += (mask_stride - w);
 800b3a8:	9b02      	ldr	r3, [sp, #8]
 800b3aa:	1bdb      	subs	r3, r3, r7
 800b3ac:	441d      	add	r5, r3
            for(y = 0; y < h; y++) {
 800b3ae:	f10b 0b01 	add.w	fp, fp, #1
 800b3b2:	9b00      	ldr	r3, [sp, #0]
 800b3b4:	459b      	cmp	fp, r3
 800b3b6:	da45      	bge.n	800b444 <fill_normal+0x2ac>
                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
 800b3b8:	2600      	movs	r6, #0
 800b3ba:	e77f      	b.n	800b2bc <fill_normal+0x124>
            last_dest_color.full = dest_buf[0].full;
 800b3bc:	8800      	ldrh	r0, [r0, #0]
 800b3be:	4602      	mov	r2, r0
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
 800b3c0:	f04f 0a00 	mov.w	sl, #0
            lv_opa_t last_mask = LV_OPA_TRANSP;
 800b3c4:	4653      	mov	r3, sl
 800b3c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b3ca:	46d3      	mov	fp, sl
 800b3cc:	46a0      	mov	r8, r4
 800b3ce:	f8cd c00c 	str.w	ip, [sp, #12]
            for(y = 0; y < h; y++) {
 800b3d2:	e032      	b.n	800b43a <fill_normal+0x2a2>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800b3d4:	f8dd a000 	ldr.w	sl, [sp]
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800b3d8:	429c      	cmp	r4, r3
 800b3da:	d01e      	beq.n	800b41a <fill_normal+0x282>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 800b3dc:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800b3e0:	d021      	beq.n	800b426 <fill_normal+0x28e>
                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
 800b3e2:	4652      	mov	r2, sl
 800b3e4:	f838 1016 	ldrh.w	r1, [r8, r6, lsl #1]
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f7ff fb75 	bl	800aad8 <lv_color_mix>
                            last_dest_color.full = dest_buf[x].full;
 800b3ee:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
                        dest_buf[x] = last_res_color;
 800b3f2:	f828 0016 	strh.w	r0, [r8, r6, lsl #1]
 800b3f6:	4623      	mov	r3, r4
                    mask++;
 800b3f8:	3501      	adds	r5, #1
                for(x = 0; x < w; x++) {
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	42be      	cmp	r6, r7
 800b3fe:	da14      	bge.n	800b42a <fill_normal+0x292>
                    if(*mask) {
 800b400:	782c      	ldrb	r4, [r5, #0]
 800b402:	2c00      	cmp	r4, #0
 800b404:	d0f8      	beq.n	800b3f8 <fill_normal+0x260>
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800b406:	429c      	cmp	r4, r3
 800b408:	d0e6      	beq.n	800b3d8 <fill_normal+0x240>
 800b40a:	2cff      	cmp	r4, #255	@ 0xff
 800b40c:	d0e2      	beq.n	800b3d4 <fill_normal+0x23c>
                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
 800b40e:	9900      	ldr	r1, [sp, #0]
 800b410:	fb04 fa01 	mul.w	sl, r4, r1
                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
 800b414:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 800b418:	e7de      	b.n	800b3d8 <fill_normal+0x240>
                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
 800b41a:	b293      	uxth	r3, r2
 800b41c:	f838 1016 	ldrh.w	r1, [r8, r6, lsl #1]
 800b420:	428b      	cmp	r3, r1
 800b422:	d1db      	bne.n	800b3dc <fill_normal+0x244>
 800b424:	e7e5      	b.n	800b3f2 <fill_normal+0x25a>
                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
 800b426:	4648      	mov	r0, r9
 800b428:	e7e1      	b.n	800b3ee <fill_normal+0x256>
                dest_buf += dest_stride;
 800b42a:	9901      	ldr	r1, [sp, #4]
 800b42c:	eb08 0841 	add.w	r8, r8, r1, lsl #1
                mask += (mask_stride - w);
 800b430:	9903      	ldr	r1, [sp, #12]
 800b432:	1bcc      	subs	r4, r1, r7
 800b434:	4425      	add	r5, r4
            for(y = 0; y < h; y++) {
 800b436:	f10b 0b01 	add.w	fp, fp, #1
 800b43a:	9902      	ldr	r1, [sp, #8]
 800b43c:	458b      	cmp	fp, r1
 800b43e:	da01      	bge.n	800b444 <fill_normal+0x2ac>
                for(x = 0; x < w; x++) {
 800b440:	2600      	movs	r6, #0
 800b442:	e7db      	b.n	800b3fc <fill_normal+0x264>
}
 800b444:	b007      	add	sp, #28
 800b446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b44a <map_normal>:
{
 800b44a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44e:	b087      	sub	sp, #28
 800b450:	4606      	mov	r6, r0
 800b452:	9201      	str	r2, [sp, #4]
 800b454:	461f      	mov	r7, r3
 800b456:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800b45a:	9303      	str	r3, [sp, #12]
 800b45c:	f89d a044 	ldrb.w	sl, [sp, #68]	@ 0x44
 800b460:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
 800b464:	f9bd c04c 	ldrsh.w	ip, [sp, #76]	@ 0x4c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b468:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800b46c:	880b      	ldrh	r3, [r1, #0]
 800b46e:	eba8 0803 	sub.w	r8, r8, r3
 800b472:	fa1f f888 	uxth.w	r8, r8
 800b476:	f108 0801 	add.w	r8, r8, #1
 800b47a:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800b47e:	88cb      	ldrh	r3, [r1, #6]
 800b480:	884a      	ldrh	r2, [r1, #2]
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	b29b      	uxth	r3, r3
 800b486:	3301      	adds	r3, #1
 800b488:	b21b      	sxth	r3, r3
 800b48a:	9302      	str	r3, [sp, #8]
    if(mask == NULL) {
 800b48c:	f1b9 0f00 	cmp.w	r9, #0
 800b490:	d00a      	beq.n	800b4a8 <map_normal+0x5e>
        if(opa > LV_OPA_MAX) {
 800b492:	f1ba 0ffd 	cmp.w	sl, #253	@ 0xfd
 800b496:	f240 8114 	bls.w	800b6c2 <map_normal+0x278>
            int32_t x_end4 = w - 4;
 800b49a:	f1a8 0a04 	sub.w	sl, r8, #4
            for(y = 0; y < h; y++) {
 800b49e:	f04f 0b00 	mov.w	fp, #0
 800b4a2:	f8cd c014 	str.w	ip, [sp, #20]
 800b4a6:	e0e1      	b.n	800b66c <map_normal+0x222>
        if(opa >= LV_OPA_MAX) {
 800b4a8:	f1ba 0ffc 	cmp.w	sl, #252	@ 0xfc
 800b4ac:	d804      	bhi.n	800b4b8 <map_normal+0x6e>
            for(y = 0; y < h; y++) {
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	4699      	mov	r9, r3
 800b4b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b4b6:	e01a      	b.n	800b4ee <map_normal+0xa4>
            for(y = 0; y < h; y++) {
 800b4b8:	2400      	movs	r4, #0
 800b4ba:	9d02      	ldr	r5, [sp, #8]
 800b4bc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4c0:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800b4c4:	42ac      	cmp	r4, r5
 800b4c6:	f280 8104 	bge.w	800b6d2 <map_normal+0x288>
                lv_memcpy(dest_buf, src_buf, w * sizeof(lv_color_t));
 800b4ca:	ea4f 0248 	mov.w	r2, r8, lsl #1
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f00b fb09 	bl	8016ae8 <lv_memcpy>
                dest_buf += dest_stride;
 800b4d6:	eb06 0649 	add.w	r6, r6, r9, lsl #1
                src_buf += src_stride;
 800b4da:	eb07 074a 	add.w	r7, r7, sl, lsl #1
            for(y = 0; y < h; y++) {
 800b4de:	3401      	adds	r4, #1
 800b4e0:	e7f0      	b.n	800b4c4 <map_normal+0x7a>
                dest_buf += dest_stride;
 800b4e2:	9b01      	ldr	r3, [sp, #4]
 800b4e4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
                src_buf += src_stride;
 800b4e8:	eb07 074b 	add.w	r7, r7, fp, lsl #1
            for(y = 0; y < h; y++) {
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	454d      	cmp	r5, r9
 800b4f0:	f280 80ef 	bge.w	800b6d2 <map_normal+0x288>
                for(x = 0; x < w; x++) {
 800b4f4:	2400      	movs	r4, #0
 800b4f6:	4544      	cmp	r4, r8
 800b4f8:	daf3      	bge.n	800b4e2 <map_normal+0x98>
                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
 800b4fa:	4652      	mov	r2, sl
 800b4fc:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800b500:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b504:	f7ff fae8 	bl	800aad8 <lv_color_mix>
 800b508:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
                for(x = 0; x < w; x++) {
 800b50c:	3401      	adds	r4, #1
 800b50e:	e7f2      	b.n	800b4f6 <map_normal+0xac>
                    MAP_NORMAL_MASK_PX(x)
 800b510:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800b514:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 800b518:	3501      	adds	r5, #1
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800b51a:	3401      	adds	r4, #1
 800b51c:	4544      	cmp	r4, r8
 800b51e:	da7f      	bge.n	800b620 <map_normal+0x1d6>
 800b520:	f015 0f03 	tst.w	r5, #3
 800b524:	d00d      	beq.n	800b542 <map_normal+0xf8>
                    MAP_NORMAL_MASK_PX(x)
 800b526:	782a      	ldrb	r2, [r5, #0]
 800b528:	2a00      	cmp	r2, #0
 800b52a:	d0f5      	beq.n	800b518 <map_normal+0xce>
 800b52c:	2aff      	cmp	r2, #255	@ 0xff
 800b52e:	d0ef      	beq.n	800b510 <map_normal+0xc6>
 800b530:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800b534:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b538:	f7ff face 	bl	800aad8 <lv_color_mix>
 800b53c:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 800b540:	e7ea      	b.n	800b518 <map_normal+0xce>
 800b542:	f8cd b010 	str.w	fp, [sp, #16]
 800b546:	e014      	b.n	800b572 <map_normal+0x128>
                            dest_buf[x] = src_buf[x];
 800b548:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800b54c:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
                            dest_buf[x + 1] = src_buf[x + 1];
 800b550:	1c63      	adds	r3, r4, #1
 800b552:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b556:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
                            dest_buf[x + 2] = src_buf[x + 2];
 800b55a:	1ca3      	adds	r3, r4, #2
 800b55c:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b560:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
                            dest_buf[x + 3] = src_buf[x + 3];
 800b564:	1ce3      	adds	r3, r4, #3
 800b566:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b56a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
                    mask32++;
 800b56e:	3504      	adds	r5, #4
                for(; x < x_end4; x += 4) {
 800b570:	3404      	adds	r4, #4
 800b572:	4554      	cmp	r4, sl
 800b574:	da57      	bge.n	800b626 <map_normal+0x1dc>
                    if(*mask32) {
 800b576:	682b      	ldr	r3, [r5, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0f8      	beq.n	800b56e <map_normal+0x124>
                        if((*mask32) == 0xFFFFFFFF) {
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b580:	d0e2      	beq.n	800b548 <map_normal+0xfe>
                            MAP_NORMAL_MASK_PX(x)
 800b582:	782a      	ldrb	r2, [r5, #0]
 800b584:	b14a      	cbz	r2, 800b59a <map_normal+0x150>
 800b586:	2aff      	cmp	r2, #255	@ 0xff
 800b588:	d033      	beq.n	800b5f2 <map_normal+0x1a8>
 800b58a:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800b58e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b592:	f7ff faa1 	bl	800aad8 <lv_color_mix>
 800b596:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
 800b59a:	786a      	ldrb	r2, [r5, #1]
 800b59c:	b15a      	cbz	r2, 800b5b6 <map_normal+0x16c>
 800b59e:	2aff      	cmp	r2, #255	@ 0xff
 800b5a0:	d02c      	beq.n	800b5fc <map_normal+0x1b2>
 800b5a2:	f104 0b01 	add.w	fp, r4, #1
 800b5a6:	f836 101b 	ldrh.w	r1, [r6, fp, lsl #1]
 800b5aa:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
 800b5ae:	f7ff fa93 	bl	800aad8 <lv_color_mix>
 800b5b2:	f826 001b 	strh.w	r0, [r6, fp, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
 800b5b6:	78aa      	ldrb	r2, [r5, #2]
 800b5b8:	b15a      	cbz	r2, 800b5d2 <map_normal+0x188>
 800b5ba:	2aff      	cmp	r2, #255	@ 0xff
 800b5bc:	d024      	beq.n	800b608 <map_normal+0x1be>
 800b5be:	f104 0b02 	add.w	fp, r4, #2
 800b5c2:	f836 101b 	ldrh.w	r1, [r6, fp, lsl #1]
 800b5c6:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
 800b5ca:	f7ff fa85 	bl	800aad8 <lv_color_mix>
 800b5ce:	f826 001b 	strh.w	r0, [r6, fp, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
 800b5d2:	78ea      	ldrb	r2, [r5, #3]
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	d0ca      	beq.n	800b56e <map_normal+0x124>
 800b5d8:	2aff      	cmp	r2, #255	@ 0xff
 800b5da:	d01b      	beq.n	800b614 <map_normal+0x1ca>
 800b5dc:	f104 0b03 	add.w	fp, r4, #3
 800b5e0:	f836 101b 	ldrh.w	r1, [r6, fp, lsl #1]
 800b5e4:	f837 001b 	ldrh.w	r0, [r7, fp, lsl #1]
 800b5e8:	f7ff fa76 	bl	800aad8 <lv_color_mix>
 800b5ec:	f826 001b 	strh.w	r0, [r6, fp, lsl #1]
 800b5f0:	e7bd      	b.n	800b56e <map_normal+0x124>
                            MAP_NORMAL_MASK_PX(x)
 800b5f2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800b5f6:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 800b5fa:	e7ce      	b.n	800b59a <map_normal+0x150>
                            MAP_NORMAL_MASK_PX(x + 1)
 800b5fc:	1c63      	adds	r3, r4, #1
 800b5fe:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b602:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800b606:	e7d6      	b.n	800b5b6 <map_normal+0x16c>
                            MAP_NORMAL_MASK_PX(x + 2)
 800b608:	1ca3      	adds	r3, r4, #2
 800b60a:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b60e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800b612:	e7de      	b.n	800b5d2 <map_normal+0x188>
                            MAP_NORMAL_MASK_PX(x + 3)
 800b614:	1ce3      	adds	r3, r4, #3
 800b616:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800b61a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800b61e:	e7a6      	b.n	800b56e <map_normal+0x124>
 800b620:	f8cd b010 	str.w	fp, [sp, #16]
 800b624:	e7a5      	b.n	800b572 <map_normal+0x128>
 800b626:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b62a:	e009      	b.n	800b640 <map_normal+0x1f6>
                    MAP_NORMAL_MASK_PX(x)
 800b62c:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800b630:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800b634:	f7ff fa50 	bl	800aad8 <lv_color_mix>
 800b638:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 800b63c:	3501      	adds	r5, #1
                for(; x < w ; x++) {
 800b63e:	3401      	adds	r4, #1
 800b640:	4544      	cmp	r4, r8
 800b642:	da09      	bge.n	800b658 <map_normal+0x20e>
                    MAP_NORMAL_MASK_PX(x)
 800b644:	782a      	ldrb	r2, [r5, #0]
 800b646:	2a00      	cmp	r2, #0
 800b648:	d0f8      	beq.n	800b63c <map_normal+0x1f2>
 800b64a:	2aff      	cmp	r2, #255	@ 0xff
 800b64c:	d1ee      	bne.n	800b62c <map_normal+0x1e2>
 800b64e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 800b652:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
 800b656:	e7f1      	b.n	800b63c <map_normal+0x1f2>
                dest_buf += dest_stride;
 800b658:	9b01      	ldr	r3, [sp, #4]
 800b65a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
                src_buf += src_stride;
 800b65e:	9b03      	ldr	r3, [sp, #12]
 800b660:	eb07 0743 	add.w	r7, r7, r3, lsl #1
                mask += mask_stride;
 800b664:	9b05      	ldr	r3, [sp, #20]
 800b666:	4499      	add	r9, r3
            for(y = 0; y < h; y++) {
 800b668:	f10b 0b01 	add.w	fp, fp, #1
 800b66c:	9b02      	ldr	r3, [sp, #8]
 800b66e:	459b      	cmp	fp, r3
 800b670:	da2f      	bge.n	800b6d2 <map_normal+0x288>
                const lv_opa_t * mask_tmp_x = mask;
 800b672:	464d      	mov	r5, r9
                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
 800b674:	2400      	movs	r4, #0
 800b676:	e751      	b.n	800b51c <map_normal+0xd2>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800b678:	4652      	mov	r2, sl
                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
 800b67a:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
 800b67e:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800b682:	f7ff fa29 	bl	800aad8 <lv_color_mix>
 800b686:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
                for(x = 0; x < w; x++) {
 800b68a:	3401      	adds	r4, #1
 800b68c:	4544      	cmp	r4, r8
 800b68e:	da0a      	bge.n	800b6a6 <map_normal+0x25c>
                    if(mask[x]) {
 800b690:	4625      	mov	r5, r4
 800b692:	f819 2004 	ldrb.w	r2, [r9, r4]
 800b696:	2a00      	cmp	r2, #0
 800b698:	d0f7      	beq.n	800b68a <map_normal+0x240>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
 800b69a:	2afc      	cmp	r2, #252	@ 0xfc
 800b69c:	d8ec      	bhi.n	800b678 <map_normal+0x22e>
 800b69e:	fb02 f20a 	mul.w	r2, r2, sl
 800b6a2:	0a12      	lsrs	r2, r2, #8
 800b6a4:	e7e9      	b.n	800b67a <map_normal+0x230>
                dest_buf += dest_stride;
 800b6a6:	9b01      	ldr	r3, [sp, #4]
 800b6a8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
                src_buf += src_stride;
 800b6ac:	9b03      	ldr	r3, [sp, #12]
 800b6ae:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
                mask += mask_stride;
 800b6b2:	9b04      	ldr	r3, [sp, #16]
 800b6b4:	4499      	add	r9, r3
            for(y = 0; y < h; y++) {
 800b6b6:	3701      	adds	r7, #1
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	429f      	cmp	r7, r3
 800b6bc:	da09      	bge.n	800b6d2 <map_normal+0x288>
                for(x = 0; x < w; x++) {
 800b6be:	2400      	movs	r4, #0
 800b6c0:	e7e4      	b.n	800b68c <map_normal+0x242>
            for(y = 0; y < h; y++) {
 800b6c2:	f04f 0b00 	mov.w	fp, #0
 800b6c6:	463b      	mov	r3, r7
 800b6c8:	465f      	mov	r7, fp
 800b6ca:	f8cd c010 	str.w	ip, [sp, #16]
 800b6ce:	469b      	mov	fp, r3
 800b6d0:	e7f2      	b.n	800b6b8 <map_normal+0x26e>
}
 800b6d2:	b007      	add	sp, #28
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6d8 <lv_draw_sw_blend>:
    if(dsc->opa <= LV_OPA_MIN) return;
 800b6d8:	7e0b      	ldrb	r3, [r1, #24]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d800      	bhi.n	800b6e0 <lv_draw_sw_blend+0x8>
 800b6de:	4770      	bx	lr
{
 800b6e0:	b530      	push	{r4, r5, lr}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	460c      	mov	r4, r1
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800b6e8:	6882      	ldr	r2, [r0, #8]
 800b6ea:	6809      	ldr	r1, [r1, #0]
 800b6ec:	4668      	mov	r0, sp
 800b6ee:	f7f6 f981 	bl	80019f4 <_lv_area_intersect>
 800b6f2:	b138      	cbz	r0, 800b704 <lv_draw_sw_blend+0x2c>
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 800b6f4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b6f6:	b10b      	cbz	r3, 800b6fc <lv_draw_sw_blend+0x24>
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	4798      	blx	r3
    ((lv_draw_sw_ctx_t *)draw_ctx)->blend(draw_ctx, dsc);
 800b6fc:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	4798      	blx	r3
}
 800b704:	b003      	add	sp, #12
 800b706:	bd30      	pop	{r4, r5, pc}

0800b708 <lv_draw_sw_blend_basic>:
{
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	b08b      	sub	sp, #44	@ 0x2c
 800b70e:	4606      	mov	r6, r0
 800b710:	460c      	mov	r4, r1
    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP) return;
 800b712:	68cf      	ldr	r7, [r1, #12]
 800b714:	b10f      	cbz	r7, 800b71a <lv_draw_sw_blend_basic+0x12>
 800b716:	7c0b      	ldrb	r3, [r1, #16]
 800b718:	b17b      	cbz	r3, 800b73a <lv_draw_sw_blend_basic+0x32>
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800b71a:	7c23      	ldrb	r3, [r4, #16]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d00f      	beq.n	800b740 <lv_draw_sw_blend_basic+0x38>
    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
 800b720:	6873      	ldr	r3, [r6, #4]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800b722:	889d      	ldrh	r5, [r3, #4]
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	1aed      	subs	r5, r5, r3
 800b728:	b2ad      	uxth	r5, r5
 800b72a:	3501      	adds	r5, #1
 800b72c:	b22d      	sxth	r5, r5
    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
 800b72e:	68b2      	ldr	r2, [r6, #8]
 800b730:	6821      	ldr	r1, [r4, #0]
 800b732:	a808      	add	r0, sp, #32
 800b734:	f7f6 f95e 	bl	80019f4 <_lv_area_intersect>
 800b738:	b920      	cbnz	r0, 800b744 <lv_draw_sw_blend_basic+0x3c>
}
 800b73a:	b00b      	add	sp, #44	@ 0x2c
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask = NULL;
 800b740:	2700      	movs	r7, #0
 800b742:	e7ed      	b.n	800b720 <lv_draw_sw_blend_basic+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
 800b744:	f013 fca2 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800b748:	9007      	str	r0, [sp, #28]
    lv_color_t * dest_buf = draw_ctx->buf;
 800b74a:	f8d6 b000 	ldr.w	fp, [r6]
    if(disp->driver->set_px_cb == NULL) {
 800b74e:	6803      	ldr	r3, [r0, #0]
 800b750:	69da      	ldr	r2, [r3, #28]
 800b752:	2a00      	cmp	r2, #0
 800b754:	d05e      	beq.n	800b814 <lv_draw_sw_blend_basic+0x10c>
    const lv_color_t * src_buf = dsc->src_buf;
 800b756:	f8d4 a004 	ldr.w	sl, [r4, #4]
    if(src_buf) {
 800b75a:	f1ba 0f00 	cmp.w	sl, #0
 800b75e:	f000 8081 	beq.w	800b864 <lv_draw_sw_blend_basic+0x15c>
        src_stride = lv_area_get_width(dsc->blend_area);
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800b768:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b76c:	b288      	uxth	r0, r1
 800b76e:	eba9 0900 	sub.w	r9, r9, r0
 800b772:	fa1f f989 	uxth.w	r9, r9
 800b776:	f109 0901 	add.w	r9, r9, #1
 800b77a:	fa0f f989 	sxth.w	r9, r9
        src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
 800b77e:	f9bd 0022 	ldrsh.w	r0, [sp, #34]	@ 0x22
 800b782:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800b786:	1a80      	subs	r0, r0, r2
 800b788:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800b78c:	1a52      	subs	r2, r2, r1
 800b78e:	fb00 2209 	mla	r2, r0, r9, r2
 800b792:	eb0a 0a42 	add.w	sl, sl, r2, lsl #1
    if(mask) {
 800b796:	2f00      	cmp	r7, #0
 800b798:	d077      	beq.n	800b88a <lv_draw_sw_blend_basic+0x182>
        if(disp->driver->antialiasing == 0) {
 800b79a:	7c1b      	ldrb	r3, [r3, #16]
 800b79c:	f013 0808 	ands.w	r8, r3, #8
 800b7a0:	d063      	beq.n	800b86a <lv_draw_sw_blend_basic+0x162>
        mask_stride = lv_area_get_width(dsc->mask_area);
 800b7a2:	6963      	ldr	r3, [r4, #20]
 800b7a4:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 800b7a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b7ac:	b291      	uxth	r1, r2
 800b7ae:	eba8 0801 	sub.w	r8, r8, r1
 800b7b2:	fa1f f888 	uxth.w	r8, r8
 800b7b6:	f108 0801 	add.w	r8, r8, #1
 800b7ba:	fa0f f888 	sxth.w	r8, r8
        mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
 800b7be:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 800b7c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b7c6:	1ac9      	subs	r1, r1, r3
 800b7c8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800b7cc:	1a9b      	subs	r3, r3, r2
 800b7ce:	fb01 3308 	mla	r3, r1, r8, r3
 800b7d2:	441f      	add	r7, r3
    lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
 800b7d4:	6873      	ldr	r3, [r6, #4]
 800b7d6:	8819      	ldrh	r1, [r3, #0]
 800b7d8:	885a      	ldrh	r2, [r3, #2]
 800b7da:	4252      	negs	r2, r2
 800b7dc:	4249      	negs	r1, r1
 800b7de:	b212      	sxth	r2, r2
 800b7e0:	b209      	sxth	r1, r1
 800b7e2:	a808      	add	r0, sp, #32
 800b7e4:	f7f6 f8f7 	bl	80019d6 <lv_area_move>
    if(disp->driver->set_px_cb) {
 800b7e8:	9b07      	ldr	r3, [sp, #28]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	69db      	ldr	r3, [r3, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d05a      	beq.n	800b8a8 <lv_draw_sw_blend_basic+0x1a0>
        if(dsc->src_buf == NULL) {
 800b7f2:	6863      	ldr	r3, [r4, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d04b      	beq.n	800b890 <lv_draw_sw_blend_basic+0x188>
            map_set_px(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 800b7f8:	7e23      	ldrb	r3, [r4, #24]
 800b7fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7fe:	9702      	str	r7, [sp, #8]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	f8cd 9000 	str.w	r9, [sp]
 800b806:	4653      	mov	r3, sl
 800b808:	462a      	mov	r2, r5
 800b80a:	a908      	add	r1, sp, #32
 800b80c:	4658      	mov	r0, fp
 800b80e:	f7ff fc48 	bl	800b0a2 <map_set_px>
 800b812:	e792      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>
        if(disp->driver->screen_transp == 0) {
 800b814:	7c1a      	ldrb	r2, [r3, #16]
 800b816:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800b81a:	d10f      	bne.n	800b83c <lv_draw_sw_blend_basic+0x134>
            dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
 800b81c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 800b820:	6870      	ldr	r0, [r6, #4]
 800b822:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800b826:	1a89      	subs	r1, r1, r2
 800b828:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800b82c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b830:	1a12      	subs	r2, r2, r0
 800b832:	fb01 2205 	mla	r2, r1, r5, r2
 800b836:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 800b83a:	e78c      	b.n	800b756 <lv_draw_sw_blend_basic+0x4e>
            dest_buf8 += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800b83c:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 800b840:	6870      	ldr	r0, [r6, #4]
 800b842:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800b846:	1a52      	subs	r2, r2, r1
 800b848:	fb05 f202 	mul.w	r2, r5, r2
 800b84c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            dest_buf8 += (blend_area.x1 - draw_ctx->buf_area->x1) * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800b850:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800b854:	f9b0 0000 	ldrsh.w	r0, [r0]
 800b858:	1a09      	subs	r1, r1, r0
 800b85a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b85e:	440a      	add	r2, r1
 800b860:	4493      	add	fp, r2
            dest_buf = (lv_color_t *)dest_buf8;
 800b862:	e778      	b.n	800b756 <lv_draw_sw_blend_basic+0x4e>
        src_stride = 0;
 800b864:	f04f 0900 	mov.w	r9, #0
 800b868:	e795      	b.n	800b796 <lv_draw_sw_blend_basic+0x8e>
            int32_t mask_size = lv_area_get_size(dsc->mask_area);
 800b86a:	6960      	ldr	r0, [r4, #20]
 800b86c:	f7f6 f896 	bl	800199c <lv_area_get_size>
            for(i = 0; i < mask_size; i++) {
 800b870:	2300      	movs	r3, #0
 800b872:	e002      	b.n	800b87a <lv_draw_sw_blend_basic+0x172>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800b874:	4641      	mov	r1, r8
 800b876:	7011      	strb	r1, [r2, #0]
            for(i = 0; i < mask_size; i++) {
 800b878:	3301      	adds	r3, #1
 800b87a:	4283      	cmp	r3, r0
 800b87c:	da91      	bge.n	800b7a2 <lv_draw_sw_blend_basic+0x9a>
                mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
 800b87e:	18fa      	adds	r2, r7, r3
 800b880:	5cf9      	ldrb	r1, [r7, r3]
 800b882:	2980      	cmp	r1, #128	@ 0x80
 800b884:	d9f6      	bls.n	800b874 <lv_draw_sw_blend_basic+0x16c>
 800b886:	21ff      	movs	r1, #255	@ 0xff
 800b888:	e7f5      	b.n	800b876 <lv_draw_sw_blend_basic+0x16e>
        mask_stride = 0;
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	e7a1      	b.n	800b7d4 <lv_draw_sw_blend_basic+0xcc>
            fill_set_px(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800b890:	7e23      	ldrb	r3, [r4, #24]
 800b892:	f8cd 8008 	str.w	r8, [sp, #8]
 800b896:	9701      	str	r7, [sp, #4]
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	8923      	ldrh	r3, [r4, #8]
 800b89c:	462a      	mov	r2, r5
 800b89e:	a908      	add	r1, sp, #32
 800b8a0:	4658      	mov	r0, fp
 800b8a2:	f7ff fb8c 	bl	800afbe <fill_set_px>
 800b8a6:	e748      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>
    else if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
 800b8a8:	7e63      	ldrb	r3, [r4, #25]
 800b8aa:	b9db      	cbnz	r3, 800b8e4 <lv_draw_sw_blend_basic+0x1dc>
        if(dsc->src_buf == NULL) {
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	b16b      	cbz	r3, 800b8cc <lv_draw_sw_blend_basic+0x1c4>
            map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
 800b8b0:	7e23      	ldrb	r3, [r4, #24]
 800b8b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b6:	9702      	str	r7, [sp, #8]
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	f8cd 9000 	str.w	r9, [sp]
 800b8be:	4653      	mov	r3, sl
 800b8c0:	462a      	mov	r2, r5
 800b8c2:	a908      	add	r1, sp, #32
 800b8c4:	4658      	mov	r0, fp
 800b8c6:	f7ff fdc0 	bl	800b44a <map_normal>
 800b8ca:	e736      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>
            fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
 800b8cc:	7e23      	ldrb	r3, [r4, #24]
 800b8ce:	f8cd 8008 	str.w	r8, [sp, #8]
 800b8d2:	9701      	str	r7, [sp, #4]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	8923      	ldrh	r3, [r4, #8]
 800b8d8:	462a      	mov	r2, r5
 800b8da:	a908      	add	r1, sp, #32
 800b8dc:	4658      	mov	r0, fp
 800b8de:	f7ff fc5b 	bl	800b198 <fill_normal>
 800b8e2:	e72a      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>
        if(dsc->src_buf == NULL) {
 800b8e4:	6862      	ldr	r2, [r4, #4]
 800b8e6:	b172      	cbz	r2, 800b906 <lv_draw_sw_blend_basic+0x1fe>
            map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
 800b8e8:	7e22      	ldrb	r2, [r4, #24]
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f0:	9702      	str	r7, [sp, #8]
 800b8f2:	9201      	str	r2, [sp, #4]
 800b8f4:	f8cd 9000 	str.w	r9, [sp]
 800b8f8:	4653      	mov	r3, sl
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	a908      	add	r1, sp, #32
 800b8fe:	4658      	mov	r0, fp
 800b900:	f7ff f9f4 	bl	800acec <map_blended>
 800b904:	e719      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>
            fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
 800b906:	7e22      	ldrb	r2, [r4, #24]
 800b908:	9303      	str	r3, [sp, #12]
 800b90a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b90e:	9701      	str	r7, [sp, #4]
 800b910:	9200      	str	r2, [sp, #0]
 800b912:	8923      	ldrh	r3, [r4, #8]
 800b914:	462a      	mov	r2, r5
 800b916:	a908      	add	r1, sp, #32
 800b918:	4658      	mov	r0, fp
 800b91a:	f7ff f939 	bl	800ab90 <fill_blended>
 800b91e:	e70c      	b.n	800b73a <lv_draw_sw_blend_basic+0x32>

0800b920 <lv_color_to32>:
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 800b920:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 800b924:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 800b928:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800b92c:	3307      	adds	r3, #7
 800b92e:	f3c3 1347 	ubfx	r3, r3, #5, #8
 800b932:	2200      	movs	r2, #0
 800b934:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 800b938:	f000 0107 	and.w	r1, r0, #7
 800b93c:	f3c0 3342 	ubfx	r3, r0, #13, #3
 800b940:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b944:	eb03 11c3 	add.w	r1, r3, r3, lsl #7
 800b948:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b94c:	3303      	adds	r3, #3
 800b94e:	f3c3 1387 	ubfx	r3, r3, #6, #8
 800b952:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 800b956:	f3c0 2004 	ubfx	r0, r0, #8, #5
 800b95a:	eb00 1340 	add.w	r3, r0, r0, lsl #5
 800b95e:	ebc0 03c3 	rsb	r3, r0, r3, lsl #3
 800b962:	3307      	adds	r3, #7
 800b964:	f3c3 1347 	ubfx	r3, r3, #5, #8
 800b968:	f363 0207 	bfi	r2, r3, #0, #8
}
 800b96c:	f042 407f 	orr.w	r0, r2, #4278190080	@ 0xff000000
 800b970:	4770      	bx	lr

0800b972 <compute_key>:

static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
{
    union void_cast v;
    v.ptr = g;
    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
 800b972:	4048      	eors	r0, r1
}
 800b974:	ea80 0062 	eor.w	r0, r0, r2, asr #1
 800b978:	4770      	bx	lr

0800b97a <get_cache_item_size>:

static size_t get_cache_item_size(lv_grad_t * c)
{
    size_t s = ALIGN(sizeof(*c)) + ALIGN(c->alloc_size * sizeof(lv_color_t));
 800b97a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800b97e:	0040      	lsls	r0, r0, #1
 800b980:	3003      	adds	r0, #3
 800b982:	f020 0003 	bic.w	r0, r0, #3
#if LV_DITHER_ERROR_DIFFUSION == 1
    s += ALIGN(c->w * sizeof(lv_scolor24_t));
#endif
#endif
    return s;
}
 800b986:	3010      	adds	r0, #16
 800b988:	4770      	bx	lr
	...

0800b98c <next_in_cache>:

static lv_grad_t * next_in_cache(lv_grad_t * item)
{
    if(grad_cache_size == 0) return NULL;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <next_in_cache+0x2c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	b17b      	cbz	r3, 800b9b2 <next_in_cache+0x26>
{
 800b992:	b510      	push	{r4, lr}
 800b994:	4604      	mov	r4, r0

    if(item == NULL)
 800b996:	b138      	cbz	r0, 800b9a8 <next_in_cache+0x1c>
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);

    size_t s = get_cache_item_size(item);
 800b998:	f7ff ffef 	bl	800b97a <get_cache_item_size>
    /*Compute the size for this cache item*/
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 800b99c:	4420      	add	r0, r4
 800b99e:	4b07      	ldr	r3, [pc, #28]	@ (800b9bc <next_in_cache+0x30>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4298      	cmp	r0, r3
 800b9a4:	d203      	bcs.n	800b9ae <next_in_cache+0x22>
    else return (lv_grad_t *)((uint8_t *)item + s);
}
 800b9a6:	bd10      	pop	{r4, pc}
        return (lv_grad_t *)LV_GC_ROOT(_lv_grad_cache_mem);
 800b9a8:	4b05      	ldr	r3, [pc, #20]	@ (800b9c0 <next_in_cache+0x34>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	e7fb      	b.n	800b9a6 <next_in_cache+0x1a>
    if((uint8_t *)item + s >= grad_cache_end) return NULL;
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	e7f9      	b.n	800b9a6 <next_in_cache+0x1a>
    if(grad_cache_size == 0) return NULL;
 800b9b2:	2000      	movs	r0, #0
}
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop
 800b9b8:	20006544 	.word	0x20006544
 800b9bc:	20006540 	.word	0x20006540
 800b9c0:	2000666c 	.word	0x2000666c

0800b9c4 <iterate_cache>:

static lv_res_t iterate_cache(op_cache_t func, void * ctx, lv_grad_t ** out)
{
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460d      	mov	r5, r1
 800b9ca:	4617      	mov	r7, r2
    lv_grad_t * first = next_in_cache(NULL);
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f7ff ffdd 	bl	800b98c <next_in_cache>
 800b9d2:	4604      	mov	r4, r0
    while(first != NULL && first->life) {
 800b9d4:	e003      	b.n	800b9de <iterate_cache+0x1a>
        if((*func)(first, ctx) == LV_RES_OK) {
            if(out != NULL) *out = first;
            return LV_RES_OK;
        }
        first = next_in_cache(first);
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f7ff ffd8 	bl	800b98c <next_in_cache>
 800b9dc:	4604      	mov	r4, r0
    while(first != NULL && first->life) {
 800b9de:	b16c      	cbz	r4, 800b9fc <iterate_cache+0x38>
 800b9e0:	6863      	ldr	r3, [r4, #4]
 800b9e2:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
 800b9e6:	d007      	beq.n	800b9f8 <iterate_cache+0x34>
        if((*func)(first, ctx) == LV_RES_OK) {
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	47b0      	blx	r6
 800b9ee:	2801      	cmp	r0, #1
 800b9f0:	d1f1      	bne.n	800b9d6 <iterate_cache+0x12>
            if(out != NULL) *out = first;
 800b9f2:	b127      	cbz	r7, 800b9fe <iterate_cache+0x3a>
 800b9f4:	603c      	str	r4, [r7, #0]
            return LV_RES_OK;
 800b9f6:	e002      	b.n	800b9fe <iterate_cache+0x3a>
    }
    return LV_RES_INV;
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e000      	b.n	800b9fe <iterate_cache+0x3a>
 800b9fc:	2000      	movs	r0, #0
}
 800b9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba00 <find_oldest_item_life>:

static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx)
{
    uint32_t * min_life = (uint32_t *)ctx;
    if(c->life < *min_life) *min_life = c->life;
 800ba00:	6843      	ldr	r3, [r0, #4]
 800ba02:	f3c3 031d 	ubfx	r3, r3, #0, #30
 800ba06:	680a      	ldr	r2, [r1, #0]
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d200      	bcs.n	800ba0e <find_oldest_item_life+0xe>
 800ba0c:	600b      	str	r3, [r1, #0]
    return LV_RES_INV;
}
 800ba0e:	2000      	movs	r0, #0
 800ba10:	4770      	bx	lr

0800ba12 <find_item>:
}

static lv_res_t find_item(lv_grad_t * c, void * ctx)
{
    uint32_t * k = (uint32_t *)ctx;
    if(c->key == *k) return LV_RES_OK;
 800ba12:	6802      	ldr	r2, [r0, #0]
 800ba14:	680b      	ldr	r3, [r1, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d001      	beq.n	800ba1e <find_item+0xc>
    return LV_RES_INV;
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	4770      	bx	lr
    if(c->key == *k) return LV_RES_OK;
 800ba1e:	2001      	movs	r0, #1
}
 800ba20:	4770      	bx	lr
	...

0800ba24 <allocate_item>:

static lv_grad_t * allocate_item(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h)
{
 800ba24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	460e      	mov	r6, r1
 800ba2e:	4615      	mov	r5, r2
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800ba30:	7a43      	ldrb	r3, [r0, #9]
 800ba32:	f003 0307 	and.w	r3, r3, #7
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d041      	beq.n	800babe <allocate_item+0x9a>
 800ba3a:	4690      	mov	r8, r2
    lv_coord_t map_size = LV_MAX(w, h); /* The map is being used horizontally (width) unless
 800ba3c:	42b5      	cmp	r5, r6
 800ba3e:	bfb8      	it	lt
 800ba40:	4635      	movlt	r5, r6
                                           no dithering is selected where it's used vertically */

    size_t req_size = ALIGN(sizeof(lv_grad_t)) + ALIGN(map_size * sizeof(lv_color_t));
 800ba42:	006c      	lsls	r4, r5, #1
 800ba44:	3403      	adds	r4, #3
 800ba46:	f024 0403 	bic.w	r4, r4, #3
 800ba4a:	3410      	adds	r4, #16
#if LV_DITHER_ERROR_DIFFUSION == 1
    req_size += ALIGN(w * sizeof(lv_scolor24_t));
#endif
#endif

    size_t act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800ba4c:	4b36      	ldr	r3, [pc, #216]	@ (800bb28 <allocate_item+0x104>)
 800ba4e:	f8d3 9000 	ldr.w	r9, [r3]
 800ba52:	4b36      	ldr	r3, [pc, #216]	@ (800bb2c <allocate_item+0x108>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	eba9 0303 	sub.w	r3, r9, r3
    lv_grad_t * item = NULL;
    if(req_size + act_size < grad_cache_size) {
 800ba5a:	18e1      	adds	r1, r4, r3
 800ba5c:	4a34      	ldr	r2, [pc, #208]	@ (800bb30 <allocate_item+0x10c>)
 800ba5e:	6812      	ldr	r2, [r2, #0]
 800ba60:	4291      	cmp	r1, r2
 800ba62:	d22e      	bcs.n	800bac2 <allocate_item+0x9e>
        item = (lv_grad_t *)grad_cache_end;
        item->not_cached = 0;
 800ba64:	f899 3007 	ldrb.w	r3, [r9, #7]
 800ba68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba6c:	f889 3007 	strb.w	r3, [r9, #7]
            if(item == NULL) return NULL;
            item->not_cached = 1;
        }
    }

    item->key = compute_key(g, size, w);
 800ba70:	4632      	mov	r2, r6
 800ba72:	4641      	mov	r1, r8
 800ba74:	4638      	mov	r0, r7
 800ba76:	f7ff ff7c 	bl	800b972 <compute_key>
 800ba7a:	f8c9 0000 	str.w	r0, [r9]
    item->life = 1;
 800ba7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f362 031d 	bfi	r3, r2, #0, #30
 800ba88:	f8c9 3004 	str.w	r3, [r9, #4]
    item->filled = 0;
 800ba8c:	f899 3007 	ldrb.w	r3, [r9, #7]
 800ba90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba94:	f889 3007 	strb.w	r3, [r9, #7]
    item->alloc_size = map_size;
 800ba98:	f8a9 500c 	strh.w	r5, [r9, #12]
    item->size = size;
 800ba9c:	f8a9 800e 	strh.w	r8, [r9, #14]
    if(item->not_cached) {
 800baa0:	b25b      	sxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	db3b      	blt.n	800bb1e <allocate_item+0xfa>
        item->w = w;
#endif
#endif
    }
    else {
        item->map = (lv_color_t *)(grad_cache_end + ALIGN(sizeof(*item)));
 800baa6:	4a20      	ldr	r2, [pc, #128]	@ (800bb28 <allocate_item+0x104>)
 800baa8:	6813      	ldr	r3, [r2, #0]
 800baaa:	f103 0110 	add.w	r1, r3, #16
 800baae:	f8c9 1008 	str.w	r1, [r9, #8]
        item->error_acc = (lv_scolor24_t *)(grad_cache_end + ALIGN(sizeof(*item)) + ALIGN(size * sizeof(lv_grad_color_t)) +
                                            ALIGN(map_size * sizeof(lv_color_t)));
        item->w = w;
#endif
#endif
        grad_cache_end += req_size;
 800bab2:	4423      	add	r3, r4
 800bab4:	6013      	str	r3, [r2, #0]
    }
    return item;
}
 800bab6:	4648      	mov	r0, r9
 800bab8:	b003      	add	sp, #12
 800baba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800babe:	4688      	mov	r8, r1
 800bac0:	e7bc      	b.n	800ba3c <allocate_item+0x18>
        if(req_size <= grad_cache_size) {
 800bac2:	42a2      	cmp	r2, r4
 800bac4:	d21b      	bcs.n	800bafe <allocate_item+0xda>
            item = lv_mem_alloc(req_size);
 800bac6:	4620      	mov	r0, r4
 800bac8:	f00a ff26 	bl	8016918 <lv_mem_alloc>
            LV_ASSERT_MALLOC(item);
 800bacc:	4681      	mov	r9, r0
 800bace:	b328      	cbz	r0, 800bb1c <allocate_item+0xf8>
            item->not_cached = 1;
 800bad0:	79c3      	ldrb	r3, [r0, #7]
 800bad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bad6:	71c3      	strb	r3, [r0, #7]
 800bad8:	e7ca      	b.n	800ba70 <allocate_item+0x4c>
                uint32_t oldest_life = UINT32_MAX;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bade:	9301      	str	r3, [sp, #4]
                iterate_cache(&find_oldest_item_life, &oldest_life, NULL);
 800bae0:	2200      	movs	r2, #0
 800bae2:	a901      	add	r1, sp, #4
 800bae4:	4813      	ldr	r0, [pc, #76]	@ (800bb34 <allocate_item+0x110>)
 800bae6:	f7ff ff6d 	bl	800b9c4 <iterate_cache>
                iterate_cache(&kill_oldest_item, &oldest_life, NULL);
 800baea:	2200      	movs	r2, #0
 800baec:	a901      	add	r1, sp, #4
 800baee:	4812      	ldr	r0, [pc, #72]	@ (800bb38 <allocate_item+0x114>)
 800baf0:	f7ff ff68 	bl	800b9c4 <iterate_cache>
                act_size = (size_t)(grad_cache_end - LV_GC_ROOT(_lv_grad_cache_mem));
 800baf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <allocate_item+0x104>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a0c      	ldr	r2, [pc, #48]	@ (800bb2c <allocate_item+0x108>)
 800bafa:	6812      	ldr	r2, [r2, #0]
 800bafc:	1a9b      	subs	r3, r3, r2
            while(act_size + req_size > grad_cache_size) {
 800bafe:	4423      	add	r3, r4
 800bb00:	4a0b      	ldr	r2, [pc, #44]	@ (800bb30 <allocate_item+0x10c>)
 800bb02:	6812      	ldr	r2, [r2, #0]
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d8e8      	bhi.n	800bada <allocate_item+0xb6>
            item = (lv_grad_t *)grad_cache_end;
 800bb08:	4b07      	ldr	r3, [pc, #28]	@ (800bb28 <allocate_item+0x104>)
 800bb0a:	f8d3 9000 	ldr.w	r9, [r3]
            item->not_cached = 0;
 800bb0e:	f899 3007 	ldrb.w	r3, [r9, #7]
 800bb12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb16:	f889 3007 	strb.w	r3, [r9, #7]
 800bb1a:	e7a9      	b.n	800ba70 <allocate_item+0x4c>
            LV_ASSERT_MALLOC(item);
 800bb1c:	e7fe      	b.n	800bb1c <allocate_item+0xf8>
        item->map = (lv_color_t *)(p + ALIGN(sizeof(*item)));
 800bb1e:	f109 0310 	add.w	r3, r9, #16
 800bb22:	f8c9 3008 	str.w	r3, [r9, #8]
 800bb26:	e7c6      	b.n	800bab6 <allocate_item+0x92>
 800bb28:	20006540 	.word	0x20006540
 800bb2c:	2000666c 	.word	0x2000666c
 800bb30:	20006544 	.word	0x20006544
 800bb34:	0800ba01 	.word	0x0800ba01
 800bb38:	0800bb91 	.word	0x0800bb91

0800bb3c <free_item>:
{
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	4606      	mov	r6, r0
    size_t size = get_cache_item_size(c);
 800bb42:	f7ff ff1a 	bl	800b97a <get_cache_item_size>
    size_t next_items_size = (size_t)(grad_cache_end - (uint8_t *)c) - size;
 800bb46:	4a11      	ldr	r2, [pc, #68]	@ (800bb8c <free_item+0x50>)
 800bb48:	6813      	ldr	r3, [r2, #0]
 800bb4a:	1b9f      	subs	r7, r3, r6
    grad_cache_end -= size;
 800bb4c:	1a1b      	subs	r3, r3, r0
 800bb4e:	6013      	str	r3, [r2, #0]
    if(next_items_size) {
 800bb50:	1a3f      	subs	r7, r7, r0
 800bb52:	d101      	bne.n	800bb58 <free_item+0x1c>
}
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	4605      	mov	r5, r0
 800bb5a:	f1c0 0800 	rsb	r8, r0, #0
        lv_memcpy(c, ((uint8_t *)c) + size, next_items_size);
 800bb5e:	463a      	mov	r2, r7
 800bb60:	1831      	adds	r1, r6, r0
 800bb62:	4630      	mov	r0, r6
 800bb64:	f00a ffc0 	bl	8016ae8 <lv_memcpy>
        while((uint8_t *)c != grad_cache_end) {
 800bb68:	4634      	mov	r4, r6
 800bb6a:	e006      	b.n	800bb7a <free_item+0x3e>
            c->map = (lv_color_t *)(((uint8_t *)c->map) - size);
 800bb6c:	68a3      	ldr	r3, [r4, #8]
 800bb6e:	4443      	add	r3, r8
 800bb70:	60a3      	str	r3, [r4, #8]
            c = (lv_grad_t *)(((uint8_t *)c) + get_cache_item_size(c));
 800bb72:	4620      	mov	r0, r4
 800bb74:	f7ff ff01 	bl	800b97a <get_cache_item_size>
 800bb78:	4404      	add	r4, r0
        while((uint8_t *)c != grad_cache_end) {
 800bb7a:	4b04      	ldr	r3, [pc, #16]	@ (800bb8c <free_item+0x50>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	d1f4      	bne.n	800bb6c <free_item+0x30>
        lv_memset_00(old + next_items_size, size);
 800bb82:	4629      	mov	r1, r5
 800bb84:	19f0      	adds	r0, r6, r7
 800bb86:	f00b f89d 	bl	8016cc4 <lv_memset_00>
}
 800bb8a:	e7e3      	b.n	800bb54 <free_item+0x18>
 800bb8c:	20006540 	.word	0x20006540

0800bb90 <kill_oldest_item>:
{
 800bb90:	b508      	push	{r3, lr}
    if(c->life == *min_life) {
 800bb92:	6843      	ldr	r3, [r0, #4]
 800bb94:	f3c3 031d 	ubfx	r3, r3, #0, #30
 800bb98:	680a      	ldr	r2, [r1, #0]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d001      	beq.n	800bba2 <kill_oldest_item+0x12>
    return LV_RES_INV;
 800bb9e:	2000      	movs	r0, #0
}
 800bba0:	bd08      	pop	{r3, pc}
        free_item(c);
 800bba2:	f7ff ffcb 	bl	800bb3c <free_item>
        return LV_RES_OK;
 800bba6:	2001      	movs	r0, #1
 800bba8:	e7fa      	b.n	800bba0 <kill_oldest_item+0x10>
	...

0800bbac <lv_gradient_set_cache_size>:
    LV_GC_ROOT(_lv_grad_cache_mem) = grad_cache_end = NULL;
    grad_cache_size = 0;
}

void lv_gradient_set_cache_size(size_t max_bytes)
{
 800bbac:	b538      	push	{r3, r4, r5, lr}
 800bbae:	4604      	mov	r4, r0
    lv_mem_free(LV_GC_ROOT(_lv_grad_cache_mem));
 800bbb0:	4d08      	ldr	r5, [pc, #32]	@ (800bbd4 <lv_gradient_set_cache_size+0x28>)
 800bbb2:	6828      	ldr	r0, [r5, #0]
 800bbb4:	f00a fece 	bl	8016954 <lv_mem_free>
    grad_cache_end = LV_GC_ROOT(_lv_grad_cache_mem) = lv_mem_alloc(max_bytes);
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f00a fead 	bl	8016918 <lv_mem_alloc>
 800bbbe:	6028      	str	r0, [r5, #0]
 800bbc0:	4b05      	ldr	r3, [pc, #20]	@ (800bbd8 <lv_gradient_set_cache_size+0x2c>)
 800bbc2:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 800bbc4:	b128      	cbz	r0, 800bbd2 <lv_gradient_set_cache_size+0x26>
    lv_memset_00(LV_GC_ROOT(_lv_grad_cache_mem), max_bytes);
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	f00b f87c 	bl	8016cc4 <lv_memset_00>
    grad_cache_size = max_bytes;
 800bbcc:	4b03      	ldr	r3, [pc, #12]	@ (800bbdc <lv_gradient_set_cache_size+0x30>)
 800bbce:	601c      	str	r4, [r3, #0]
}
 800bbd0:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_grad_cache_mem));
 800bbd2:	e7fe      	b.n	800bbd2 <lv_gradient_set_cache_size+0x26>
 800bbd4:	2000666c 	.word	0x2000666c
 800bbd8:	20006540 	.word	0x20006540
 800bbdc:	20006544 	.word	0x20006544

0800bbe0 <lv_gradient_calculate>:
    return item;
}

lv_grad_color_t LV_ATTRIBUTE_FAST_MEM lv_gradient_calculate(const lv_grad_dsc_t * dsc, lv_coord_t range,
                                                            lv_coord_t frac)
{
 800bbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe4:	4607      	mov	r7, r0
    lv_grad_color_t tmp;
    lv_color32_t one, two;
    /*Clip out-of-bounds first*/
    int32_t min = (dsc->stops[0].frac * range) >> 8;
 800bbe6:	7883      	ldrb	r3, [r0, #2]
 800bbe8:	fb01 f303 	mul.w	r3, r1, r3
    if(frac <= min) {
 800bbec:	ebb2 2f23 	cmp.w	r2, r3, asr #8
 800bbf0:	dd1c      	ble.n	800bc2c <lv_gradient_calculate+0x4c>
 800bbf2:	4688      	mov	r8, r1
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	1219      	asrs	r1, r3, #8
        GRAD_CONV(tmp, dsc->stops[0].color);
        return tmp;
    }

    int32_t max = (dsc->stops[dsc->stops_count - 1].frac * range) >> 8;
 800bbf8:	7a02      	ldrb	r2, [r0, #8]
 800bbfa:	1e50      	subs	r0, r2, #1
 800bbfc:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800bc00:	789b      	ldrb	r3, [r3, #2]
 800bc02:	fb03 f308 	mul.w	r3, r3, r8
    if(frac >= max) {
 800bc06:	ebb5 2f23 	cmp.w	r5, r3, asr #8
 800bc0a:	da12      	bge.n	800bc32 <lv_gradient_calculate+0x52>
        return tmp;
    }

    /*Find the 2 closest stop now*/
    int32_t d = 0;
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 800bc0c:	2401      	movs	r4, #1
 800bc0e:	42a2      	cmp	r2, r4
 800bc10:	d928      	bls.n	800bc64 <lv_gradient_calculate+0x84>
        int32_t cur = (dsc->stops[i].frac * range) >> 8;
 800bc12:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800bc16:	789b      	ldrb	r3, [r3, #2]
 800bc18:	fb03 f308 	mul.w	r3, r3, r8
 800bc1c:	ea4f 2923 	mov.w	r9, r3, asr #8
        if(frac <= cur) {
 800bc20:	ebb5 2f23 	cmp.w	r5, r3, asr #8
 800bc24:	dd08      	ble.n	800bc38 <lv_gradient_calculate+0x58>
    for(uint8_t i = 1; i < dsc->stops_count; i++) {
 800bc26:	3401      	adds	r4, #1
 800bc28:	b2e4      	uxtb	r4, r4
 800bc2a:	e7f0      	b.n	800bc0e <lv_gradient_calculate+0x2e>
        GRAD_CONV(tmp, dsc->stops[0].color);
 800bc2c:	8800      	ldrh	r0, [r0, #0]

    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
                                LV_UDIV255(two.ch.green * mix + one.ch.green * imix),
                                LV_UDIV255(two.ch.blue * mix  + one.ch.blue * imix));
    return r;
}
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        GRAD_CONV(tmp, dsc->stops[dsc->stops_count - 1].color);
 800bc32:	f837 0020 	ldrh.w	r0, [r7, r0, lsl #2]
        return tmp;
 800bc36:	e7fa      	b.n	800bc2e <lv_gradient_calculate+0x4e>
            one.full = lv_color_to32(dsc->stops[i - 1].color);
 800bc38:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 800bc3c:	f837 002a 	ldrh.w	r0, [r7, sl, lsl #2]
 800bc40:	f7ff fe6e 	bl	800b920 <lv_color_to32>
 800bc44:	4606      	mov	r6, r0
            two.full = lv_color_to32(dsc->stops[i].color);
 800bc46:	f837 0024 	ldrh.w	r0, [r7, r4, lsl #2]
 800bc4a:	f7ff fe69 	bl	800b920 <lv_color_to32>
 800bc4e:	4684      	mov	ip, r0
            min = (dsc->stops[i - 1].frac * range) >> 8;
 800bc50:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
 800bc54:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800bc58:	fb03 f308 	mul.w	r3, r3, r8
 800bc5c:	1219      	asrs	r1, r3, #8
            d = max - min;
 800bc5e:	eba9 2223 	sub.w	r2, r9, r3, asr #8
            break;
 800bc62:	e000      	b.n	800bc66 <lv_gradient_calculate+0x86>
    int32_t d = 0;
 800bc64:	2200      	movs	r2, #0
    LV_ASSERT(d != 0);
 800bc66:	b902      	cbnz	r2, 800bc6a <lv_gradient_calculate+0x8a>
 800bc68:	e7fe      	b.n	800bc68 <lv_gradient_calculate+0x88>
    frac -= min;
 800bc6a:	1a6b      	subs	r3, r5, r1
 800bc6c:	b21b      	sxth	r3, r3
    lv_opa_t mix = (frac * 255) / d;
 800bc6e:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 800bc72:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc76:	b2db      	uxtb	r3, r3
    lv_opa_t imix = 255 - mix;
 800bc78:	43da      	mvns	r2, r3
 800bc7a:	b2d2      	uxtb	r2, r2
    lv_grad_color_t r = GRAD_CM(LV_UDIV255(two.ch.red * mix   + one.ch.red * imix),
 800bc7c:	f3cc 2007 	ubfx	r0, ip, #8, #8
 800bc80:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800bc84:	fb02 f101 	mul.w	r1, r2, r1
 800bc88:	fb03 1100 	mla	r1, r3, r0, r1
 800bc8c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
 800bc90:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 800bc94:	f3c1 7402 	ubfx	r4, r1, #28, #3
 800bc98:	f04f 0000 	mov.w	r0, #0
 800bc9c:	f364 0002 	bfi	r0, r4, #0, #3
 800bca0:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800bca4:	f3c6 4407 	ubfx	r4, r6, #16, #8
 800bca8:	fb02 f404 	mul.w	r4, r2, r4
 800bcac:	fb03 4405 	mla	r4, r3, r5, r4
 800bcb0:	eb04 2504 	add.w	r5, r4, r4, lsl #8
 800bcb4:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
 800bcb8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800bcbc:	f364 00c7 	bfi	r0, r4, #3, #5
 800bcc0:	fa5f fc8c 	uxtb.w	ip, ip
 800bcc4:	b2f6      	uxtb	r6, r6
 800bcc6:	fb06 f202 	mul.w	r2, r6, r2
 800bcca:	fb03 230c 	mla	r3, r3, ip, r2
 800bcce:	eb03 2203 	add.w	r2, r3, r3, lsl #8
 800bcd2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800bcd6:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800bcda:	f363 200c 	bfi	r0, r3, #8, #5
 800bcde:	f3c1 6142 	ubfx	r1, r1, #25, #3
 800bce2:	f361 304f 	bfi	r0, r1, #13, #3
    return r;
 800bce6:	e7a2      	b.n	800bc2e <lv_gradient_calculate+0x4e>

0800bce8 <lv_gradient_get>:
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 800bce8:	7a43      	ldrb	r3, [r0, #9]
 800bcea:	f013 0f07 	tst.w	r3, #7
 800bcee:	d046      	beq.n	800bd7e <lv_gradient_get+0x96>
{
 800bcf0:	b570      	push	{r4, r5, r6, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4616      	mov	r6, r2
    if(!inited) {
 800bcfa:	4b22      	ldr	r3, [pc, #136]	@ (800bd84 <lv_gradient_get+0x9c>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	b1e3      	cbz	r3, 800bd3a <lv_gradient_get+0x52>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800bd00:	7a6b      	ldrb	r3, [r5, #9]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d01e      	beq.n	800bd48 <lv_gradient_get+0x60>
 800bd0a:	4631      	mov	r1, r6
    uint32_t key = compute_key(g, size, w);
 800bd0c:	4622      	mov	r2, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f7ff fe2f 	bl	800b972 <compute_key>
 800bd14:	9001      	str	r0, [sp, #4]
    lv_grad_t * item = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	9300      	str	r3, [sp, #0]
    if(iterate_cache(&find_item, &key, &item) == LV_RES_OK) {
 800bd1a:	466a      	mov	r2, sp
 800bd1c:	a901      	add	r1, sp, #4
 800bd1e:	481a      	ldr	r0, [pc, #104]	@ (800bd88 <lv_gradient_get+0xa0>)
 800bd20:	f7ff fe50 	bl	800b9c4 <iterate_cache>
 800bd24:	2801      	cmp	r0, #1
 800bd26:	d011      	beq.n	800bd4c <lv_gradient_get+0x64>
    item = allocate_item(g, w, h);
 800bd28:	4632      	mov	r2, r6
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	f7ff fe79 	bl	800ba24 <allocate_item>
 800bd32:	9000      	str	r0, [sp, #0]
    if(item == NULL) {
 800bd34:	b308      	cbz	r0, 800bd7a <lv_gradient_get+0x92>
    for(lv_coord_t i = 0; i < item->size; i++) {
 800bd36:	2400      	movs	r4, #0
 800bd38:	e01a      	b.n	800bd70 <lv_gradient_get+0x88>
        lv_gradient_set_cache_size(LV_GRAD_CACHE_DEF_SIZE);
 800bd3a:	2000      	movs	r0, #0
 800bd3c:	f7ff ff36 	bl	800bbac <lv_gradient_set_cache_size>
        inited = true;
 800bd40:	4b10      	ldr	r3, [pc, #64]	@ (800bd84 <lv_gradient_get+0x9c>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	701a      	strb	r2, [r3, #0]
 800bd46:	e7db      	b.n	800bd00 <lv_gradient_get+0x18>
    lv_coord_t size = g->dir == LV_GRAD_DIR_HOR ? w : h;
 800bd48:	4621      	mov	r1, r4
 800bd4a:	e7df      	b.n	800bd0c <lv_gradient_get+0x24>
        item->life++; /* Don't forget to bump the counter */
 800bd4c:	9800      	ldr	r0, [sp, #0]
 800bd4e:	6843      	ldr	r3, [r0, #4]
 800bd50:	f3c3 021d 	ubfx	r2, r3, #0, #30
 800bd54:	3201      	adds	r2, #1
 800bd56:	f362 031d 	bfi	r3, r2, #0, #30
 800bd5a:	6043      	str	r3, [r0, #4]
        return item;
 800bd5c:	e00d      	b.n	800bd7a <lv_gradient_get+0x92>
        item->map[i] = lv_gradient_calculate(g, item->size, i);
 800bd5e:	6886      	ldr	r6, [r0, #8]
 800bd60:	4622      	mov	r2, r4
 800bd62:	4628      	mov	r0, r5
 800bd64:	f7ff ff3c 	bl	800bbe0 <lv_gradient_calculate>
 800bd68:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
    for(lv_coord_t i = 0; i < item->size; i++) {
 800bd6c:	3401      	adds	r4, #1
 800bd6e:	b224      	sxth	r4, r4
 800bd70:	9800      	ldr	r0, [sp, #0]
 800bd72:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800bd76:	42a1      	cmp	r1, r4
 800bd78:	dcf1      	bgt.n	800bd5e <lv_gradient_get+0x76>
}
 800bd7a:	b002      	add	sp, #8
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
    if(g->dir == LV_GRAD_DIR_NONE) return NULL;
 800bd7e:	2000      	movs	r0, #0
}
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	2000653d 	.word	0x2000653d
 800bd88:	0800ba13 	.word	0x0800ba13

0800bd8c <lv_gradient_cleanup>:

void lv_gradient_cleanup(lv_grad_t * grad)
{
 800bd8c:	b508      	push	{r3, lr}
    if(grad->not_cached) {
 800bd8e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db00      	blt.n	800bd98 <lv_gradient_cleanup+0xc>
        lv_mem_free(grad);
    }
}
 800bd96:	bd08      	pop	{r3, pc}
        lv_mem_free(grad);
 800bd98:	f00a fddc 	bl	8016954 <lv_mem_free>
}
 800bd9c:	e7fb      	b.n	800bd96 <lv_gradient_cleanup+0xa>

0800bd9e <lv_color_mix_premult>:
{
 800bd9e:	b510      	push	{r4, lr}
 800bda0:	4684      	mov	ip, r0
    LV_COLOR_SET_R(ret, LV_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800bda2:	8803      	ldrh	r3, [r0, #0]
 800bda4:	f3c1 00c4 	ubfx	r0, r1, #3, #5
 800bda8:	fb02 3300 	mla	r3, r2, r0, r3
 800bdac:	eb03 2003 	add.w	r0, r3, r3, lsl #8
 800bdb0:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
 800bdb4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
 800bdb8:	f04f 0000 	mov.w	r0, #0
 800bdbc:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800bdc0:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800bdc4:	f001 0407 	and.w	r4, r1, #7
 800bdc8:	f3c1 3e42 	ubfx	lr, r1, #13, #3
 800bdcc:	eb0e 0ec4 	add.w	lr, lr, r4, lsl #3
 800bdd0:	fb0e 3302 	mla	r3, lr, r2, r3
 800bdd4:	eb03 2e03 	add.w	lr, r3, r3, lsl #8
 800bdd8:	eb03 13ce 	add.w	r3, r3, lr, lsl #7
 800bddc:	f3c3 6e82 	ubfx	lr, r3, #26, #3
 800bde0:	f36e 0002 	bfi	r0, lr, #0, #3
 800bde4:	f3c3 53c2 	ubfx	r3, r3, #23, #3
 800bde8:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
 800bdec:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800bdf0:	f3c1 2104 	ubfx	r1, r1, #8, #5
 800bdf4:	fb01 3202 	mla	r2, r1, r2, r3
 800bdf8:	eb02 2302 	add.w	r3, r2, r2, lsl #8
 800bdfc:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 800be00:	f3c2 52c4 	ubfx	r2, r2, #23, #5
 800be04:	f362 200c 	bfi	r0, r2, #8, #5
}
 800be08:	bd10      	pop	{r4, pc}

0800be0a <convert_cb>:
 **********************/

/* Separate the image channels to RGB and Alpha to match LV_COLOR_DEPTH settings*/
static void convert_cb(const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w, lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
 800be0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0e:	b087      	sub	sp, #28
 800be10:	4683      	mov	fp, r0
 800be12:	9101      	str	r1, [sp, #4]
 800be14:	9202      	str	r2, [sp, #8]
 800be16:	9303      	str	r3, [sp, #12]
 800be18:	f9bd a040 	ldrsh.w	sl, [sp, #64]	@ 0x40
 800be1c:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800be20:	9304      	str	r3, [sp, #16]
 800be22:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800be24:	9d14      	ldr	r5, [sp, #80]	@ 0x50

    const uint8_t * src_tmp8 = (const uint8_t *)src_buf;
    lv_coord_t y;
    lv_coord_t x;

    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800be26:	3b04      	subs	r3, #4
 800be28:	2b10      	cmp	r3, #16
 800be2a:	f200 80dd 	bhi.w	800bfe8 <convert_cb+0x1de>
 800be2e:	e8df f003 	tbb	[pc, r3]
 800be32:	4d09      	.short	0x4d09
 800be34:	dbdbdb09 	.word	0xdbdbdb09
 800be38:	dbdbdbdb 	.word	0xdbdbdbdb
 800be3c:	dbdbdbdb 	.word	0xdbdbdbdb
 800be40:	dbdb      	.short	0xdbdb
 800be42:	8c          	.byte	0x8c
 800be43:	00          	.byte	0x00
        uint32_t px_cnt = lv_area_get_size(dest_area);
 800be44:	f7f5 fdaa 	bl	800199c <lv_area_get_size>
 800be48:	4601      	mov	r1, r0
 800be4a:	9002      	str	r0, [sp, #8]
        lv_memset_ff(abuf, px_cnt);
 800be4c:	4628      	mov	r0, r5
 800be4e:	f00a ff63 	bl	8016d18 <lv_memset_ff>

        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800be52:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
 800be56:	f9bb 3000 	ldrsh.w	r3, [fp]
 800be5a:	fb06 370a 	mla	r7, r6, sl, r3
 800be5e:	9a01      	ldr	r2, [sp, #4]
 800be60:	eb02 0747 	add.w	r7, r2, r7, lsl #1
 800be64:	f8bb 8004 	ldrh.w	r8, [fp, #4]
 800be68:	b29b      	uxth	r3, r3
 800be6a:	eba8 0803 	sub.w	r8, r8, r3
 800be6e:	fa1f f888 	uxth.w	r8, r8
 800be72:	f108 0801 	add.w	r8, r8, #1
 800be76:	fa0f f888 	sxth.w	r8, r8
        uint32_t dest_w = lv_area_get_width(dest_area);
        uint32_t dest_w_byte = dest_w * sizeof(lv_color_t);
 800be7a:	ea4f 0848 	mov.w	r8, r8, lsl #1

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 800be7e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800be82:	fa0f fa8a 	sxth.w	sl, sl
        lv_color_t * cbuf_tmp = cbuf;
 800be86:	46a1      	mov	r9, r4
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800be88:	e008      	b.n	800be9c <convert_cb+0x92>
            lv_memcpy(cbuf_tmp, src_tmp8, dest_w_byte);
 800be8a:	4642      	mov	r2, r8
 800be8c:	4639      	mov	r1, r7
 800be8e:	4648      	mov	r0, r9
 800be90:	f00a fe2a 	bl	8016ae8 <lv_memcpy>
            src_tmp8 += src_stride_byte;
 800be94:	4457      	add	r7, sl
            cbuf_tmp += dest_w;
 800be96:	44c1      	add	r9, r8
        for(y = dest_area->y1; y <= dest_area->y2; y++) {
 800be98:	3601      	adds	r6, #1
 800be9a:	b236      	sxth	r6, r6
 800be9c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 800bea0:	42b3      	cmp	r3, r6
 800bea2:	daf2      	bge.n	800be8a <convert_cb+0x80>
        }

        /*Make "holes" for with Chroma keying*/
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800bea4:	9b04      	ldr	r3, [sp, #16]
 800bea6:	2b06      	cmp	r3, #6
 800bea8:	f040 809e 	bne.w	800bfe8 <convert_cb+0x1de>
            uint16_t chk_v = chk.full;
#elif LV_COLOR_DEPTH == 32
            uint32_t * cbuf_uint = (uint32_t *)cbuf;
            uint32_t chk_v = chk.full;
#endif
            for(i = 0; i < px_cnt; i++) {
 800beac:	2300      	movs	r3, #0
 800beae:	9802      	ldr	r0, [sp, #8]
 800beb0:	e000      	b.n	800beb4 <convert_cb+0xaa>
 800beb2:	3301      	adds	r3, #1
 800beb4:	4283      	cmp	r3, r0
 800beb6:	f080 8097 	bcs.w	800bfe8 <convert_cb+0x1de>
                if(chk_v == cbuf_uint[i]) abuf[i] = 0x00;
 800beba:	f834 1013 	ldrh.w	r1, [r4, r3, lsl #1]
 800bebe:	f24e 0207 	movw	r2, #57351	@ 0xe007
 800bec2:	4291      	cmp	r1, r2
 800bec4:	d1f5      	bne.n	800beb2 <convert_cb+0xa8>
 800bec6:	2200      	movs	r2, #0
 800bec8:	54ea      	strb	r2, [r5, r3]
 800beca:	e7f2      	b.n	800beb2 <convert_cb+0xa8>
            }
        }
    }
    else if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
        src_tmp8 += (src_stride * dest_area->y1 * LV_IMG_PX_SIZE_ALPHA_BYTE) + dest_area->x1 * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800becc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800bed0:	f9b0 1000 	ldrsh.w	r1, [r0]
 800bed4:	fb03 120a 	mla	r2, r3, sl, r1
 800bed8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bedc:	9801      	ldr	r0, [sp, #4]
 800bede:	4410      	add	r0, r2
 800bee0:	4602      	mov	r2, r0
 800bee2:	f8bb 6004 	ldrh.w	r6, [fp, #4]
 800bee6:	b289      	uxth	r1, r1
 800bee8:	1a76      	subs	r6, r6, r1
 800beea:	b2b6      	uxth	r6, r6
 800beec:	3601      	adds	r6, #1
 800beee:	b2b6      	uxth	r6, r6

        lv_coord_t src_new_line_step_px = (src_stride - lv_area_get_width(dest_area));
 800bef0:	ebaa 0c06 	sub.w	ip, sl, r6
 800bef4:	fa1f fc8c 	uxth.w	ip, ip
        lv_coord_t src_new_line_step_byte = src_new_line_step_px * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800bef8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800befc:	fa0f fc8c 	sxth.w	ip, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bf00:	f8bb e006 	ldrh.w	lr, [fp, #6]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	ebae 0e03 	sub.w	lr, lr, r3
 800bf0a:	fa1f fe8e 	uxth.w	lr, lr
 800bf0e:	f10e 0e01 	add.w	lr, lr, #1
 800bf12:	fa0f fe8e 	sxth.w	lr, lr
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bf16:	b236      	sxth	r6, r6

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 800bf18:	2700      	movs	r7, #0
 800bf1a:	e012      	b.n	800bf42 <convert_cb+0x138>
            for(x = 0; x < dest_w; x++) {
                abuf[x] = src_tmp8[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800bf1c:	7891      	ldrb	r1, [r2, #2]
 800bf1e:	54e9      	strb	r1, [r5, r3]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
                cbuf[x].full = *src_tmp8;
#elif LV_COLOR_DEPTH == 16
                cbuf[x].full = *src_tmp8 + ((*(src_tmp8 + 1)) << 8);
 800bf20:	7811      	ldrb	r1, [r2, #0]
 800bf22:	7850      	ldrb	r0, [r2, #1]
 800bf24:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800bf28:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
#elif LV_COLOR_DEPTH == 32
                cbuf[x] = *((lv_color_t *) src_tmp8);
                cbuf[x].ch.alpha = 0xff;
#endif
                src_tmp8 += LV_IMG_PX_SIZE_ALPHA_BYTE;
 800bf2c:	3203      	adds	r2, #3
            for(x = 0; x < dest_w; x++) {
 800bf2e:	3301      	adds	r3, #1
 800bf30:	b21b      	sxth	r3, r3
 800bf32:	42b3      	cmp	r3, r6
 800bf34:	dbf2      	blt.n	800bf1c <convert_cb+0x112>

            }
            cbuf += dest_w;
 800bf36:	eb04 0446 	add.w	r4, r4, r6, lsl #1
            abuf += dest_w;
 800bf3a:	4435      	add	r5, r6
            src_tmp8 += src_new_line_step_byte;
 800bf3c:	4462      	add	r2, ip
        for(y = 0; y < dest_h; y++) {
 800bf3e:	3701      	adds	r7, #1
 800bf40:	b23f      	sxth	r7, r7
 800bf42:	4577      	cmp	r7, lr
 800bf44:	da50      	bge.n	800bfe8 <convert_cb+0x1de>
            for(x = 0; x < dest_w; x++) {
 800bf46:	2300      	movs	r3, #0
 800bf48:	e7f3      	b.n	800bf32 <convert_cb+0x128>
        }
    }
    else if(cf == LV_IMG_CF_RGB565A8) {
        src_tmp8 += (src_stride * dest_area->y1 * sizeof(lv_color_t)) + dest_area->x1 * sizeof(lv_color_t);
 800bf4a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800bf4e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bf52:	fb02 380a 	mla	r8, r2, sl, r3
 800bf56:	9901      	ldr	r1, [sp, #4]
 800bf58:	eb01 0848 	add.w	r8, r1, r8, lsl #1

        lv_coord_t src_stride_byte = src_stride * sizeof(lv_color_t);
 800bf5c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 800bf60:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800bf62:	f8b0 9006 	ldrh.w	r9, [r0, #6]
 800bf66:	b292      	uxth	r2, r2
 800bf68:	eba9 0902 	sub.w	r9, r9, r2
 800bf6c:	fa1f f989 	uxth.w	r9, r9
 800bf70:	f109 0901 	add.w	r9, r9, #1
 800bf74:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800bf78:	8887      	ldrh	r7, [r0, #4]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	1aff      	subs	r7, r7, r3
 800bf7e:	b2bf      	uxth	r7, r7
 800bf80:	3701      	adds	r7, #1
 800bf82:	b23f      	sxth	r7, r7

        lv_coord_t dest_h = lv_area_get_height(dest_area);
        lv_coord_t dest_w = lv_area_get_width(dest_area);
        for(y = 0; y < dest_h; y++) {
 800bf84:	2600      	movs	r6, #0
 800bf86:	9004      	str	r0, [sp, #16]
 800bf88:	468b      	mov	fp, r1
 800bf8a:	f8cd a014 	str.w	sl, [sp, #20]
 800bf8e:	e00a      	b.n	800bfa6 <convert_cb+0x19c>
            lv_memcpy(cbuf, src_tmp8, dest_w * sizeof(lv_color_t));
 800bf90:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800bf94:	4652      	mov	r2, sl
 800bf96:	4641      	mov	r1, r8
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f00a fda5 	bl	8016ae8 <lv_memcpy>
            cbuf += dest_w;
 800bf9e:	4454      	add	r4, sl
            src_tmp8 += src_stride_byte;
 800bfa0:	44d8      	add	r8, fp
        for(y = 0; y < dest_h; y++) {
 800bfa2:	3601      	adds	r6, #1
 800bfa4:	b236      	sxth	r6, r6
 800bfa6:	454e      	cmp	r6, r9
 800bfa8:	dbf2      	blt.n	800bf90 <convert_cb+0x186>
        }

        src_tmp8 = (const uint8_t *)src_buf;
        src_tmp8 += sizeof(lv_color_t) * src_w * src_h;
 800bfaa:	f8dd b010 	ldr.w	fp, [sp, #16]
 800bfae:	f8dd a014 	ldr.w	sl, [sp, #20]
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	9a03      	ldr	r2, [sp, #12]
 800bfb6:	fb02 f303 	mul.w	r3, r2, r3
        src_tmp8 += src_stride * dest_area->y1 + dest_area->x1;
 800bfba:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800bfbe:	f9bb 2000 	ldrsh.w	r2, [fp]
 800bfc2:	fb01 220a 	mla	r2, r1, sl, r2
 800bfc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800bfca:	9e01      	ldr	r6, [sp, #4]
 800bfcc:	441e      	add	r6, r3
        for(y = 0; y < dest_h; y++) {
 800bfce:	2400      	movs	r4, #0
 800bfd0:	e008      	b.n	800bfe4 <convert_cb+0x1da>
            lv_memcpy(abuf, src_tmp8, dest_w);
 800bfd2:	463a      	mov	r2, r7
 800bfd4:	4631      	mov	r1, r6
 800bfd6:	4628      	mov	r0, r5
 800bfd8:	f00a fd86 	bl	8016ae8 <lv_memcpy>
            abuf += dest_w;
 800bfdc:	443d      	add	r5, r7
            src_tmp8 += src_stride;
 800bfde:	4456      	add	r6, sl
        for(y = 0; y < dest_h; y++) {
 800bfe0:	3401      	adds	r4, #1
 800bfe2:	b224      	sxth	r4, r4
 800bfe4:	454c      	cmp	r4, r9
 800bfe6:	dbf4      	blt.n	800bfd2 <convert_cb+0x1c8>
        }
    }
}
 800bfe8:	b007      	add	sp, #28
 800bfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfee <lv_draw_sw_img_decoded>:
{
 800bfee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff2:	b0a1      	sub	sp, #132	@ 0x84
 800bff4:	9007      	str	r0, [sp, #28]
 800bff6:	460f      	mov	r7, r1
 800bff8:	4690      	mov	r8, r2
 800bffa:	930c      	str	r3, [sp, #48]	@ 0x30
 800bffc:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 800c000:	9309      	str	r3, [sp, #36]	@ 0x24
    lv_area_copy(&draw_area, draw_ctx->clip_area);
 800c002:	6883      	ldr	r3, [r0, #8]
    dest->x1 = src->x1;
 800c004:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c008:	f8ad 2078 	strh.w	r2, [sp, #120]	@ 0x78
    dest->y1 = src->y1;
 800c00c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c010:	f8ad 207a 	strh.w	r2, [sp, #122]	@ 0x7a
    dest->x2 = src->x2;
 800c014:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c018:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
    dest->y2 = src->y2;
 800c01c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c020:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
    bool mask_any = lv_draw_mask_is_any(&draw_area);
 800c024:	a81e      	add	r0, sp, #120	@ 0x78
 800c026:	f7fd fbed 	bl	8009804 <lv_draw_mask_is_any>
 800c02a:	4605      	mov	r5, r0
 800c02c:	900b      	str	r0, [sp, #44]	@ 0x2c
    bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
 800c02e:	683c      	ldr	r4, [r7, #0]
 800c030:	940a      	str	r4, [sp, #40]	@ 0x28
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800c032:	211c      	movs	r1, #28
 800c034:	a815      	add	r0, sp, #84	@ 0x54
 800c036:	f00a fe45 	bl	8016cc4 <lv_memset_00>
    blend_dsc.opa = draw_dsc->opa;
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
    blend_dsc.blend_mode = draw_dsc->blend_mode;
 800c040:	7b3b      	ldrb	r3, [r7, #12]
 800c042:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c046:	f88d 306d 	strb.w	r3, [sp, #109]	@ 0x6d
    blend_dsc.blend_area = &blend_area;
 800c04a:	ab1c      	add	r3, sp, #112	@ 0x70
 800c04c:	9315      	str	r3, [sp, #84]	@ 0x54
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c04e:	b945      	cbnz	r5, 800c062 <lv_draw_sw_img_decoded+0x74>
 800c050:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 800c054:	f000 80be 	beq.w	800c1d4 <lv_draw_sw_img_decoded+0x1e6>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800c058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c05e:	f000 80ca 	beq.w	800c1f6 <lv_draw_sw_img_decoded+0x208>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c064:	b923      	cbnz	r3, 800c070 <lv_draw_sw_img_decoded+0x82>
 800c066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c06c:	f000 80e3 	beq.w	800c236 <lv_draw_sw_img_decoded+0x248>
        blend_area.x1 = draw_ctx->clip_area->x1;
 800c070:	9b07      	ldr	r3, [sp, #28]
 800c072:	689a      	ldr	r2, [r3, #8]
 800c074:	f9b2 1000 	ldrsh.w	r1, [r2]
 800c078:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
        blend_area.x2 = draw_ctx->clip_area->x2;
 800c07c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800c080:	f8ad 3074 	strh.w	r3, [sp, #116]	@ 0x74
        blend_area.y1 = draw_ctx->clip_area->y1;
 800c084:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 800c088:	f8ad 5072 	strh.w	r5, [sp, #114]	@ 0x72
        blend_area.y2 = draw_ctx->clip_area->y2;
 800c08c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800c090:	f8ad 2076 	strh.w	r2, [sp, #118]	@ 0x76
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c094:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800c098:	f8b8 4000 	ldrh.w	r4, [r8]
 800c09c:	1b00      	subs	r0, r0, r4
 800c09e:	b280      	uxth	r0, r0
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	b200      	sxth	r0, r0
 800c0a4:	900f      	str	r0, [sp, #60]	@ 0x3c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c0a6:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 800c0aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c0ae:	1b00      	subs	r0, r0, r4
 800c0b0:	b280      	uxth	r0, r0
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	b200      	sxth	r0, r0
 800c0b6:	900e      	str	r0, [sp, #56]	@ 0x38
 800c0b8:	b294      	uxth	r4, r2
 800c0ba:	b2ad      	uxth	r5, r5
 800c0bc:	1b64      	subs	r4, r4, r5
 800c0be:	b2a4      	uxth	r4, r4
 800c0c0:	3401      	adds	r4, #1
 800c0c2:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c0c4:	b29d      	uxth	r5, r3
 800c0c6:	b289      	uxth	r1, r1
 800c0c8:	1a6d      	subs	r5, r5, r1
 800c0ca:	b2ad      	uxth	r5, r5
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	b22d      	sxth	r5, r5
        uint32_t max_buf_size = MAX_BUF_SIZE;
 800c0d0:	f012 ffdc 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800c0d4:	f007 f8d8 	bl	8013288 <lv_disp_get_hor_res>
 800c0d8:	4606      	mov	r6, r0
        uint32_t blend_size = lv_area_get_size(&blend_area);
 800c0da:	a81c      	add	r0, sp, #112	@ 0x70
 800c0dc:	f7f5 fc5e 	bl	800199c <lv_area_get_size>
        if(blend_size <= max_buf_size) {
 800c0e0:	4286      	cmp	r6, r0
 800c0e2:	d201      	bcs.n	800c0e8 <lv_draw_sw_img_decoded+0xfa>
            buf_h = max_buf_size / blend_w;
 800c0e4:	fbb6 f4f5 	udiv	r4, r6, r5
        uint32_t buf_size = buf_w * buf_h;
 800c0e8:	fb05 f904 	mul.w	r9, r5, r4
        lv_color_t * rgb_buf = lv_mem_buf_get(buf_size * sizeof(lv_color_t));
 800c0ec:	ea4f 0049 	mov.w	r0, r9, lsl #1
 800c0f0:	f00a fc64 	bl	80169bc <lv_mem_buf_get>
 800c0f4:	4606      	mov	r6, r0
        lv_opa_t * mask_buf = lv_mem_buf_get(buf_size);
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f00a fc60 	bl	80169bc <lv_mem_buf_get>
 800c0fc:	9008      	str	r0, [sp, #32]
        blend_dsc.mask_buf = mask_buf;
 800c0fe:	9018      	str	r0, [sp, #96]	@ 0x60
        blend_dsc.mask_area = &blend_area;
 800c100:	ab1c      	add	r3, sp, #112	@ 0x70
 800c102:	931a      	str	r3, [sp, #104]	@ 0x68
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c104:	2302      	movs	r3, #2
 800c106:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
        blend_dsc.src_buf = rgb_buf;
 800c10a:	9616      	str	r6, [sp, #88]	@ 0x58
        lv_coord_t y_last = blend_area.y2;
 800c10c:	f9bd a076 	ldrsh.w	sl, [sp, #118]	@ 0x76
        blend_area.y2 = blend_area.y1 + buf_h - 1;
 800c110:	f8bd 3072 	ldrh.w	r3, [sp, #114]	@ 0x72
 800c114:	b2a2      	uxth	r2, r4
 800c116:	920d      	str	r2, [sp, #52]	@ 0x34
 800c118:	4413      	add	r3, r2
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	3b01      	subs	r3, #1
 800c11e:	f8ad 3076 	strh.w	r3, [sp, #118]	@ 0x76
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800c122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c124:	2b04      	cmp	r3, #4
 800c126:	f000 80b2 	beq.w	800c28e <lv_draw_sw_img_decoded+0x2a0>
 800c12a:	2302      	movs	r3, #2
        blend_dsc.mask_res = mask_res_def;
 800c12c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
        while(blend_area.y1 <= y_last) {
 800c130:	f9bd 3072 	ldrsh.w	r3, [sp, #114]	@ 0x72
 800c134:	4553      	cmp	r3, sl
 800c136:	f300 810b 	bgt.w	800c350 <lv_draw_sw_img_decoded+0x362>
    dest->x1 = src->x1;
 800c13a:	f9bd 2070 	ldrsh.w	r2, [sp, #112]	@ 0x70
 800c13e:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
    dest->y1 = src->y1;
 800c142:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
    dest->x2 = src->x2;
 800c146:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 800c14a:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
    dest->y2 = src->y2;
 800c14e:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	@ 0x76
 800c152:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
            lv_area_move(&transform_area, -coords->x1, -coords->y1);
 800c156:	f8b8 1000 	ldrh.w	r1, [r8]
 800c15a:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 800c15e:	4252      	negs	r2, r2
 800c160:	4249      	negs	r1, r1
 800c162:	b212      	sxth	r2, r2
 800c164:	b209      	sxth	r1, r1
 800c166:	a813      	add	r0, sp, #76	@ 0x4c
 800c168:	f7f5 fc35 	bl	80019d6 <lv_area_move>
            if(transform) {
 800c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c16e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c172:	f000 8094 	beq.w	800c29e <lv_draw_sw_img_decoded+0x2b0>
                lv_draw_transform(draw_ctx, &transform_area, src_buf, src_w, src_h, src_w,
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	9305      	str	r3, [sp, #20]
 800c17a:	9604      	str	r6, [sp, #16]
 800c17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c17e:	9303      	str	r3, [sp, #12]
 800c180:	9702      	str	r7, [sp, #8]
 800c182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c188:	9200      	str	r2, [sp, #0]
 800c18a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c18c:	a913      	add	r1, sp, #76	@ 0x4c
 800c18e:	9807      	ldr	r0, [sp, #28]
 800c190:	f003 fd62 	bl	800fc58 <lv_draw_transform>
            if(draw_dsc->recolor_opa > LV_OPA_MIN) {
 800c194:	f897 b00a 	ldrb.w	fp, [r7, #10]
 800c198:	f1bb 0f02 	cmp.w	fp, #2
 800c19c:	f200 808d 	bhi.w	800c2ba <lv_draw_sw_img_decoded+0x2cc>
            if(mask_any) {
 800c1a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f040 80b2 	bne.w	800c30c <lv_draw_sw_img_decoded+0x31e>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c1a8:	a915      	add	r1, sp, #84	@ 0x54
 800c1aa:	9807      	ldr	r0, [sp, #28]
 800c1ac:	f7ff fa94 	bl	800b6d8 <lv_draw_sw_blend>
            blend_area.y1 = blend_area.y2 + 1;
 800c1b0:	f8bd 3076 	ldrh.w	r3, [sp, #118]	@ 0x76
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	f8ad 3072 	strh.w	r3, [sp, #114]	@ 0x72
            blend_area.y2 = blend_area.y1 + buf_h - 1;
 800c1ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c1bc:	fa12 f383 	uxtah	r3, r2, r3
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	b21b      	sxth	r3, r3
 800c1c6:	f8ad 3076 	strh.w	r3, [sp, #118]	@ 0x76
            if(blend_area.y2 > y_last) blend_area.y2 = y_last;
 800c1ca:	4553      	cmp	r3, sl
 800c1cc:	ddb0      	ble.n	800c130 <lv_draw_sw_img_decoded+0x142>
 800c1ce:	f8ad a076 	strh.w	sl, [sp, #118]	@ 0x76
 800c1d2:	e7ad      	b.n	800c130 <lv_draw_sw_img_decoded+0x142>
    if(!mask_any && !transform && cf == LV_IMG_CF_TRUE_COLOR && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d6:	2b04      	cmp	r3, #4
 800c1d8:	f47f af3e 	bne.w	800c058 <lv_draw_sw_img_decoded+0x6a>
 800c1dc:	7abb      	ldrb	r3, [r7, #10]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f47f af3a 	bne.w	800c058 <lv_draw_sw_img_decoded+0x6a>
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800c1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1e6:	9316      	str	r3, [sp, #88]	@ 0x58
        blend_dsc.blend_area = coords;
 800c1e8:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c1ec:	a915      	add	r1, sp, #84	@ 0x54
 800c1ee:	9807      	ldr	r0, [sp, #28]
 800c1f0:	f7ff fa72 	bl	800b6d8 <lv_draw_sw_blend>
 800c1f4:	e0b2      	b.n	800c35c <lv_draw_sw_img_decoded+0x36e>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800c1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1f8:	2b0e      	cmp	r3, #14
 800c1fa:	f47f af32 	bne.w	800c062 <lv_draw_sw_img_decoded+0x74>
        if(!_lv_area_intersect(&clipped_coords, coords, draw_ctx->clip_area)) return;
 800c1fe:	9c07      	ldr	r4, [sp, #28]
 800c200:	68a2      	ldr	r2, [r4, #8]
 800c202:	4641      	mov	r1, r8
 800c204:	a813      	add	r0, sp, #76	@ 0x4c
 800c206:	f7f5 fbf5 	bl	80019f4 <_lv_area_intersect>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f000 80a6 	beq.w	800c35c <lv_draw_sw_img_decoded+0x36e>
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800c210:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c212:	9318      	str	r3, [sp, #96]	@ 0x60
        blend_dsc.mask_area = coords;
 800c214:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
        blend_dsc.src_buf = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	9316      	str	r3, [sp, #88]	@ 0x58
        blend_dsc.color = draw_dsc->recolor;
 800c21c:	893b      	ldrh	r3, [r7, #8]
 800c21e:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c222:	2302      	movs	r3, #2
 800c224:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
        blend_dsc.blend_area = coords;
 800c228:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c22c:	a915      	add	r1, sp, #84	@ 0x54
 800c22e:	4620      	mov	r0, r4
 800c230:	f7ff fa52 	bl	800b6d8 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_ALPHA_8BIT) {
 800c234:	e092      	b.n	800c35c <lv_draw_sw_img_decoded+0x36e>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c238:	2b14      	cmp	r3, #20
 800c23a:	f47f af19 	bne.w	800c070 <lv_draw_sw_img_decoded+0x82>
 800c23e:	7abb      	ldrb	r3, [r7, #10]
 800c240:	2b00      	cmp	r3, #0
 800c242:	f47f af15 	bne.w	800c070 <lv_draw_sw_img_decoded+0x82>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c246:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800c24a:	f8b8 2000 	ldrh.w	r2, [r8]
 800c24e:	1a9b      	subs	r3, r3, r2
 800c250:	b29b      	uxth	r3, r3
 800c252:	3301      	adds	r3, #1
 800c254:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c256:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800c25a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 800c25e:	1a52      	subs	r2, r2, r1
 800c260:	b292      	uxth	r2, r2
 800c262:	3201      	adds	r2, #1
 800c264:	b212      	sxth	r2, r2
        blend_dsc.src_buf = (const lv_color_t *)src_buf;
 800c266:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c268:	9116      	str	r1, [sp, #88]	@ 0x58
        blend_dsc.mask_buf = (lv_opa_t *)src_buf;
 800c26a:	9118      	str	r1, [sp, #96]	@ 0x60
        blend_dsc.mask_buf += sizeof(lv_color_t) * src_w * src_h;
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c274:	9318      	str	r3, [sp, #96]	@ 0x60
        blend_dsc.blend_area = coords;
 800c276:	f8cd 8054 	str.w	r8, [sp, #84]	@ 0x54
        blend_dsc.mask_area = coords;
 800c27a:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c27e:	2302      	movs	r3, #2
 800c280:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c284:	a915      	add	r1, sp, #84	@ 0x54
 800c286:	9807      	ldr	r0, [sp, #28]
 800c288:	f7ff fa26 	bl	800b6d8 <lv_draw_sw_blend>
    else if(!mask_any && !transform && cf == LV_IMG_CF_RGB565A8 && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
 800c28c:	e066      	b.n	800c35c <lv_draw_sw_img_decoded+0x36e>
        lv_draw_mask_res_t mask_res_def = (cf != LV_IMG_CF_TRUE_COLOR || draw_dsc->angle ||
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c294:	d001      	beq.n	800c29a <lv_draw_sw_img_decoded+0x2ac>
 800c296:	2302      	movs	r3, #2
 800c298:	e748      	b.n	800c12c <lv_draw_sw_img_decoded+0x13e>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e746      	b.n	800c12c <lv_draw_sw_img_decoded+0x13e>
                convert_cb(&transform_area, src_buf, src_w, src_h, src_w, draw_dsc, cf, rgb_buf, mask_buf);
 800c29e:	9b08      	ldr	r3, [sp, #32]
 800c2a0:	9304      	str	r3, [sp, #16]
 800c2a2:	9603      	str	r6, [sp, #12]
 800c2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2a6:	9302      	str	r3, [sp, #8]
 800c2a8:	9701      	str	r7, [sp, #4]
 800c2aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c2ac:	9200      	str	r2, [sp, #0]
 800c2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c2b2:	a813      	add	r0, sp, #76	@ 0x4c
 800c2b4:	f7ff fda9 	bl	800be0a <convert_cb>
 800c2b8:	e76c      	b.n	800c194 <lv_draw_sw_img_decoded+0x1a6>
                lv_color_t recolor = draw_dsc->recolor;
 800c2ba:	893b      	ldrh	r3, [r7, #8]
    out[0] = (uint16_t)LV_COLOR_GET_R(c) * mix;
 800c2bc:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 800c2c0:	fb02 f20b 	mul.w	r2, r2, fp
 800c2c4:	f8ad 2044 	strh.w	r2, [sp, #68]	@ 0x44
    out[1] = (uint16_t)LV_COLOR_GET_G(c) * mix;
 800c2c8:	f003 0107 	and.w	r1, r3, #7
 800c2cc:	f3c3 3242 	ubfx	r2, r3, #13, #3
 800c2d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c2d4:	fb1b f202 	smulbb	r2, fp, r2
 800c2d8:	f8ad 2046 	strh.w	r2, [sp, #70]	@ 0x46
    out[2] = (uint16_t)LV_COLOR_GET_B(c) * mix;
 800c2dc:	f3c3 2304 	ubfx	r3, r3, #8, #5
 800c2e0:	fb0b f303 	mul.w	r3, fp, r3
 800c2e4:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
                recolor_opa = 255 - recolor_opa;
 800c2e8:	ea6f 0b0b 	mvn.w	fp, fp
 800c2ec:	fa5f fb8b 	uxtb.w	fp, fp
                for(i = 0; i < buf_size; i++) {
 800c2f0:	2400      	movs	r4, #0
 800c2f2:	e008      	b.n	800c306 <lv_draw_sw_img_decoded+0x318>
                    rgb_buf[i] = lv_color_mix_premult(premult_v, rgb_buf[i], recolor_opa);
 800c2f4:	465a      	mov	r2, fp
 800c2f6:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800c2fa:	a811      	add	r0, sp, #68	@ 0x44
 800c2fc:	f7ff fd4f 	bl	800bd9e <lv_color_mix_premult>
 800c300:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
                for(i = 0; i < buf_size; i++) {
 800c304:	3401      	adds	r4, #1
 800c306:	454c      	cmp	r4, r9
 800c308:	d3f4      	bcc.n	800c2f4 <lv_draw_sw_img_decoded+0x306>
 800c30a:	e749      	b.n	800c1a0 <lv_draw_sw_img_decoded+0x1b2>
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800c30c:	f9bd 4072 	ldrsh.w	r4, [sp, #114]	@ 0x72
                lv_opa_t * mask_buf_tmp = mask_buf;
 800c310:	f8dd b020 	ldr.w	fp, [sp, #32]
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800c314:	e009      	b.n	800c32a <lv_draw_sw_img_decoded+0x33c>
                        lv_memset_00(mask_buf_tmp, blend_w);
 800c316:	4629      	mov	r1, r5
 800c318:	4658      	mov	r0, fp
 800c31a:	f00a fcd3 	bl	8016cc4 <lv_memset_00>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c31e:	2302      	movs	r3, #2
 800c320:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
                    mask_buf_tmp += blend_w;
 800c324:	44ab      	add	fp, r5
                for(y = blend_area.y1; y <= blend_area.y2; y++) {
 800c326:	3401      	adds	r4, #1
 800c328:	b224      	sxth	r4, r4
 800c32a:	f9bd 3076 	ldrsh.w	r3, [sp, #118]	@ 0x76
 800c32e:	42a3      	cmp	r3, r4
 800c330:	f6ff af3a 	blt.w	800c1a8 <lv_draw_sw_img_decoded+0x1ba>
                    mask_res_line = lv_draw_mask_apply(mask_buf_tmp, blend_area.x1, y, blend_w);
 800c334:	462b      	mov	r3, r5
 800c336:	4622      	mov	r2, r4
 800c338:	f9bd 1070 	ldrsh.w	r1, [sp, #112]	@ 0x70
 800c33c:	4658      	mov	r0, fp
 800c33e:	f7fd f9cf 	bl	80096e0 <lv_draw_mask_apply>
                    if(mask_res_line == LV_DRAW_MASK_RES_TRANSP) {
 800c342:	2800      	cmp	r0, #0
 800c344:	d0e7      	beq.n	800c316 <lv_draw_sw_img_decoded+0x328>
                    else if(mask_res_line == LV_DRAW_MASK_RES_CHANGED) {
 800c346:	2802      	cmp	r0, #2
 800c348:	d1ec      	bne.n	800c324 <lv_draw_sw_img_decoded+0x336>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c34a:	f88d 0064 	strb.w	r0, [sp, #100]	@ 0x64
 800c34e:	e7e9      	b.n	800c324 <lv_draw_sw_img_decoded+0x336>
        lv_mem_buf_release(mask_buf);
 800c350:	9808      	ldr	r0, [sp, #32]
 800c352:	f00a fb95 	bl	8016a80 <lv_mem_buf_release>
        lv_mem_buf_release(rgb_buf);
 800c356:	4630      	mov	r0, r6
 800c358:	f00a fb92 	bl	8016a80 <lv_mem_buf_release>
}
 800c35c:	b021      	add	sp, #132	@ 0x84
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c364 <lv_draw_sw_layer_create>:


struct _lv_draw_layer_ctx_t * lv_draw_sw_layer_create(struct _lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx,
                                                      lv_draw_layer_flags_t flags)
{
    if(LV_COLOR_SCREEN_TRANSP == 0 && (flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA)) {
 800c364:	f012 0f01 	tst.w	r2, #1
 800c368:	d17c      	bne.n	800c464 <lv_draw_sw_layer_create+0x100>
{
 800c36a:	b570      	push	{r4, r5, r6, lr}
 800c36c:	4606      	mov	r6, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	4615      	mov	r5, r2
        return NULL;
    }

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    uint32_t px_size = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
    if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 800c372:	f012 0f02 	tst.w	r2, #2
 800c376:	d044      	beq.n	800c402 <lv_draw_sw_layer_create+0x9e>
        layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_BUF_SIZE;
 800c378:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c37a:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800c37e:	f362 031e 	bfi	r3, r2, #0, #31
 800c382:	628b      	str	r3, [r1, #40]	@ 0x28
        uint32_t full_size = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800c384:	4608      	mov	r0, r1
 800c386:	f7f5 fb09 	bl	800199c <lv_area_get_size>
 800c38a:	0042      	lsls	r2, r0, #1
        if(layer_sw_ctx->buf_size_bytes > full_size) layer_sw_ctx->buf_size_bytes = full_size;
 800c38c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c38e:	f3c3 031e 	ubfx	r3, r3, #0, #31
 800c392:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 800c396:	d903      	bls.n	800c3a0 <lv_draw_sw_layer_create+0x3c>
 800c398:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c39a:	f362 031e 	bfi	r3, r2, #0, #31
 800c39e:	62a3      	str	r3, [r4, #40]	@ 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800c3a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800c3a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c3a6:	f00a fab7 	bl	8016918 <lv_mem_alloc>
 800c3aa:	6160      	str	r0, [r4, #20]
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800c3ac:	b1e8      	cbz	r0, 800c3ea <lv_draw_sw_layer_create+0x86>
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
            if(layer_sw_ctx->base_draw.buf == NULL) {
                return NULL;
            }
        }
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800c3ae:	f104 0308 	add.w	r3, r4, #8
 800c3b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3b6:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->base_draw.area_act.y2 = layer_sw_ctx->base_draw.area_full.y1;
 800c3ba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800c3be:	81e3      	strh	r3, [r4, #14]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c3c0:	89a2      	ldrh	r2, [r4, #12]
 800c3c2:	8923      	ldrh	r3, [r4, #8]
 800c3c4:	1ad2      	subs	r2, r2, r3
 800c3c6:	b292      	uxth	r2, r2
 800c3c8:	3201      	adds	r2, #1
 800c3ca:	b212      	sxth	r2, r2
        lv_coord_t w = lv_area_get_width(&layer_sw_ctx->base_draw.area_act);
        layer_sw_ctx->base_draw.max_row_with_alpha = layer_sw_ctx->buf_size_bytes / w / LV_IMG_PX_SIZE_ALPHA_BYTE;
 800c3cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c3ce:	f3c3 031e 	ubfx	r3, r3, #0, #31
 800c3d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d6:	4a24      	ldr	r2, [pc, #144]	@ (800c468 <lv_draw_sw_layer_create+0x104>)
 800c3d8:	fb82 1203 	smull	r1, r2, r2, r3
 800c3dc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800c3e0:	8222      	strh	r2, [r4, #16]
        layer_sw_ctx->base_draw.max_row_with_no_alpha = layer_sw_ctx->buf_size_bytes / w / sizeof(lv_color_t);
 800c3e2:	085b      	lsrs	r3, r3, #1
 800c3e4:	8263      	strh	r3, [r4, #18]

        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
    }

    return layer_ctx;
 800c3e6:	4620      	mov	r0, r4
}
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
            layer_sw_ctx->buf_size_bytes = LV_LAYER_SIMPLE_FALLBACK_BUF_SIZE;
 800c3ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c3ec:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c3f0:	f360 031e 	bfi	r3, r0, #0, #31
 800c3f4:	62a3      	str	r3, [r4, #40]	@ 0x28
            layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800c3f6:	f00a fa8f 	bl	8016918 <lv_mem_alloc>
 800c3fa:	6160      	str	r0, [r4, #20]
            if(layer_sw_ctx->base_draw.buf == NULL) {
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1d6      	bne.n	800c3ae <lv_draw_sw_layer_create+0x4a>
 800c400:	e7f2      	b.n	800c3e8 <lv_draw_sw_layer_create+0x84>
        layer_sw_ctx->base_draw.area_act = layer_sw_ctx->base_draw.area_full;
 800c402:	f101 0308 	add.w	r3, r1, #8
 800c406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c40a:	e883 0003 	stmia.w	r3, {r0, r1}
        layer_sw_ctx->buf_size_bytes = lv_area_get_size(&layer_sw_ctx->base_draw.area_full) * px_size;
 800c40e:	4620      	mov	r0, r4
 800c410:	f7f5 fac4 	bl	800199c <lv_area_get_size>
 800c414:	0040      	lsls	r0, r0, #1
 800c416:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c41a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c41c:	f360 031e 	bfi	r3, r0, #0, #31
 800c420:	62a3      	str	r3, [r4, #40]	@ 0x28
        layer_sw_ctx->base_draw.buf = lv_mem_alloc(layer_sw_ctx->buf_size_bytes);
 800c422:	f00a fa79 	bl	8016918 <lv_mem_alloc>
 800c426:	6160      	str	r0, [r4, #20]
        lv_memset_00(layer_sw_ctx->base_draw.buf, layer_sw_ctx->buf_size_bytes);
 800c428:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c42a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c42e:	f00a fc49 	bl	8016cc4 <lv_memset_00>
        layer_sw_ctx->has_alpha = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800c432:	f005 0501 	and.w	r5, r5, #1
 800c436:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800c43a:	f365 13c7 	bfi	r3, r5, #7, #1
 800c43e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
        if(layer_sw_ctx->base_draw.buf == NULL) {
 800c442:	6960      	ldr	r0, [r4, #20]
 800c444:	2800      	cmp	r0, #0
 800c446:	d0cf      	beq.n	800c3e8 <lv_draw_sw_layer_create+0x84>
        draw_ctx->buf = layer_sw_ctx->base_draw.buf;
 800c448:	6030      	str	r0, [r6, #0]
        draw_ctx->buf_area = &layer_sw_ctx->base_draw.area_act;
 800c44a:	f104 0308 	add.w	r3, r4, #8
 800c44e:	6073      	str	r3, [r6, #4]
        draw_ctx->clip_area = &layer_sw_ctx->base_draw.area_act;
 800c450:	60b3      	str	r3, [r6, #8]
        lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800c452:	f012 fe1b 	bl	801f08c <_lv_refr_get_disp_refreshing>
        disp_refr->driver->screen_transp = flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA ? 1 : 0;
 800c456:	6803      	ldr	r3, [r0, #0]
 800c458:	7c1a      	ldrb	r2, [r3, #16]
 800c45a:	f365 1286 	bfi	r2, r5, #6, #1
 800c45e:	741a      	strb	r2, [r3, #16]
    return layer_ctx;
 800c460:	4620      	mov	r0, r4
 800c462:	e7c1      	b.n	800c3e8 <lv_draw_sw_layer_create+0x84>
        return NULL;
 800c464:	2000      	movs	r0, #0
}
 800c466:	4770      	bx	lr
 800c468:	55555556 	.word	0x55555556

0800c46c <lv_draw_sw_layer_adjust>:

void lv_draw_sw_layer_adjust(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                             lv_draw_layer_flags_t flags)
{
 800c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46e:	4605      	mov	r5, r0
 800c470:	460c      	mov	r4, r1
 800c472:	4617      	mov	r7, r2

    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800c474:	f012 fe0a 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800c478:	4606      	mov	r6, r0
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 800c47a:	f017 0f01 	tst.w	r7, #1
 800c47e:	d110      	bne.n	800c4a2 <lv_draw_sw_layer_adjust+0x36>
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
        layer_sw_ctx->has_alpha = 1;
        disp_refr->driver->screen_transp = 1;
    }
    else {
        layer_sw_ctx->has_alpha = 0;
 800c480:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800c484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c488:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
        disp_refr->driver->screen_transp = 0;
 800c48c:	6802      	ldr	r2, [r0, #0]
 800c48e:	7c13      	ldrb	r3, [r2, #16]
 800c490:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c494:	7413      	strb	r3, [r2, #16]
    }

    draw_ctx->buf = layer_ctx->buf;
 800c496:	6963      	ldr	r3, [r4, #20]
 800c498:	602b      	str	r3, [r5, #0]
    draw_ctx->buf_area = &layer_ctx->area_act;
 800c49a:	3408      	adds	r4, #8
 800c49c:	606c      	str	r4, [r5, #4]
    draw_ctx->clip_area = &layer_ctx->area_act;
 800c49e:	60ac      	str	r4, [r5, #8]
}
 800c4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(layer_ctx->buf, layer_sw_ctx->buf_size_bytes);
 800c4a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c4a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c4a8:	6960      	ldr	r0, [r4, #20]
 800c4aa:	f00a fc0b 	bl	8016cc4 <lv_memset_00>
        layer_sw_ctx->has_alpha = 1;
 800c4ae:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800c4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4b6:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
        disp_refr->driver->screen_transp = 1;
 800c4ba:	6832      	ldr	r2, [r6, #0]
 800c4bc:	7c13      	ldrb	r3, [r2, #16]
 800c4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4c2:	7413      	strb	r3, [r2, #16]
 800c4c4:	e7e7      	b.n	800c496 <lv_draw_sw_layer_adjust+0x2a>

0800c4c6 <lv_draw_sw_layer_blend>:

void lv_draw_sw_layer_blend(struct _lv_draw_ctx_t * draw_ctx, struct _lv_draw_layer_ctx_t * layer_ctx,
                            const lv_draw_img_dsc_t * draw_dsc)
{
 800c4c6:	b570      	push	{r4, r5, r6, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	4616      	mov	r6, r2
    lv_draw_sw_layer_ctx_t * layer_sw_ctx = (lv_draw_sw_layer_ctx_t *) layer_ctx;

    lv_img_dsc_t img;
    img.data = draw_ctx->buf;
 800c4d0:	6803      	ldr	r3, [r0, #0]
 800c4d2:	9303      	str	r3, [sp, #12]
    img.header.always_zero = 0;
 800c4d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c4d8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800c4dc:	f88d 3004 	strb.w	r3, [sp, #4]
    img.header.w = lv_area_get_width(draw_ctx->buf_area);
 800c4e0:	6842      	ldr	r2, [r0, #4]
 800c4e2:	8893      	ldrh	r3, [r2, #4]
 800c4e4:	8811      	ldrh	r1, [r2, #0]
 800c4e6:	1a5b      	subs	r3, r3, r1
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	9901      	ldr	r1, [sp, #4]
 800c4ee:	f363 2194 	bfi	r1, r3, #10, #11
 800c4f2:	9101      	str	r1, [sp, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800c4f4:	88d3      	ldrh	r3, [r2, #6]
 800c4f6:	8852      	ldrh	r2, [r2, #2]
 800c4f8:	1a9b      	subs	r3, r3, r2
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	3301      	adds	r3, #1
    img.header.h = lv_area_get_height(draw_ctx->buf_area);
 800c4fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c502:	f363 124f 	bfi	r2, r3, #5, #11
 800c506:	f8ad 2006 	strh.w	r2, [sp, #6]
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800c50a:	f995 302b 	ldrsb.w	r3, [r5, #43]	@ 0x2b
 800c50e:	2b00      	cmp	r3, #0
 800c510:	db24      	blt.n	800c55c <lv_draw_sw_layer_blend+0x96>
 800c512:	2204      	movs	r2, #4
 800c514:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c518:	f362 0304 	bfi	r3, r2, #0, #5
 800c51c:	f88d 3004 	strb.w	r3, [sp, #4]

    /*Restore the original draw_ctx*/
    draw_ctx->buf = layer_ctx->original.buf;
 800c520:	6a2b      	ldr	r3, [r5, #32]
 800c522:	6023      	str	r3, [r4, #0]
    draw_ctx->buf_area = layer_ctx->original.buf_area;
 800c524:	69eb      	ldr	r3, [r5, #28]
 800c526:	6063      	str	r3, [r4, #4]
    draw_ctx->clip_area = layer_ctx->original.clip_area;
 800c528:	69ab      	ldr	r3, [r5, #24]
 800c52a:	60a3      	str	r3, [r4, #8]
    lv_disp_t * disp_refr = _lv_refr_get_disp_refreshing();
 800c52c:	f012 fdae 	bl	801f08c <_lv_refr_get_disp_refreshing>
    disp_refr->driver->screen_transp = layer_ctx->original.screen_transp;
 800c530:	6803      	ldr	r3, [r0, #0]
 800c532:	f895 1024 	ldrb.w	r1, [r5, #36]	@ 0x24
 800c536:	7c1a      	ldrb	r2, [r3, #16]
 800c538:	f361 1286 	bfi	r2, r1, #6, #1
 800c53c:	741a      	strb	r2, [r3, #16]

    /*Blend the layer*/
    lv_draw_img(draw_ctx, draw_dsc, &layer_ctx->area_act, &img);
 800c53e:	ab01      	add	r3, sp, #4
 800c540:	f105 0208 	add.w	r2, r5, #8
 800c544:	4631      	mov	r1, r6
 800c546:	4620      	mov	r0, r4
 800c548:	f7fb fce4 	bl	8007f14 <lv_draw_img>
    lv_draw_wait_for_finish(draw_ctx);
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7fb f8ac 	bl	80076aa <lv_draw_wait_for_finish>
    lv_img_cache_invalidate_src(&img);
 800c552:	a801      	add	r0, sp, #4
 800c554:	f007 fc94 	bl	8013e80 <lv_img_cache_invalidate_src>
}
 800c558:	b004      	add	sp, #16
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
    img.header.cf = layer_sw_ctx->has_alpha ? LV_IMG_CF_TRUE_COLOR_ALPHA : LV_IMG_CF_TRUE_COLOR;
 800c55c:	2205      	movs	r2, #5
 800c55e:	e7d9      	b.n	800c514 <lv_draw_sw_layer_blend+0x4e>

0800c560 <lv_draw_sw_layer_destroy>:

void lv_draw_sw_layer_destroy(lv_draw_ctx_t * draw_ctx, lv_draw_layer_ctx_t * layer_ctx)
{
 800c560:	b508      	push	{r3, lr}
    LV_UNUSED(draw_ctx);

    lv_mem_free(layer_ctx->buf);
 800c562:	6948      	ldr	r0, [r1, #20]
 800c564:	f00a f9f6 	bl	8016954 <lv_mem_free>
}
 800c568:	bd08      	pop	{r3, pc}
	...

0800c56c <draw_letter_normal>:
 *   STATIC FUNCTIONS
 **********************/

static void LV_ATTRIBUTE_FAST_MEM draw_letter_normal(lv_draw_ctx_t * draw_ctx, const lv_draw_label_dsc_t * dsc,
                                                     const lv_point_t * pos, lv_font_glyph_dsc_t * g, const uint8_t * map_p)
{
 800c56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	b097      	sub	sp, #92	@ 0x5c
 800c572:	9007      	str	r0, [sp, #28]
 800c574:	460d      	mov	r5, r1
 800c576:	9205      	str	r2, [sp, #20]

    const uint8_t * bpp_opa_table_p;
    uint32_t bitmask_init;
    uint32_t bitmask;
    uint32_t bpp = g->bpp;
 800c578:	f893 900e 	ldrb.w	r9, [r3, #14]
 800c57c:	f009 090f 	and.w	r9, r9, #15
    lv_opa_t opa = dsc->opa;
 800c580:	7e8c      	ldrb	r4, [r1, #26]
    uint32_t shades;
    if(bpp == 3) bpp = 4;
 800c582:	f1b9 0f03 	cmp.w	r9, #3
 800c586:	d021      	beq.n	800c5cc <draw_letter_normal+0x60>
        lv_draw_img(draw_ctx, &img_dsc, &fill_area, map_p);
        return;
    }
#endif

    switch(bpp) {
 800c588:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800c58c:	2a07      	cmp	r2, #7
 800c58e:	f200 8158 	bhi.w	800c842 <draw_letter_normal+0x2d6>
 800c592:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c596:	0008      	.short	0x0008
 800c598:	0156002a 	.word	0x0156002a
 800c59c:	0156000e 	.word	0x0156000e
 800c5a0:	01560156 	.word	0x01560156
 800c5a4:	0014      	.short	0x0014
 800c5a6:	2602      	movs	r6, #2
 800c5a8:	2280      	movs	r2, #128	@ 0x80
 800c5aa:	9200      	str	r2, [sp, #0]
 800c5ac:	f8df b2bc 	ldr.w	fp, [pc, #700]	@ 800c86c <draw_letter_normal+0x300>
 800c5b0:	e013      	b.n	800c5da <draw_letter_normal+0x6e>
            shades = 4;
            break;
        case 4:
            bpp_opa_table_p = _lv_bpp4_opa_table;
            bitmask_init  = 0xF0;
            shades = 16;
 800c5b2:	2610      	movs	r6, #16
            bitmask_init  = 0xF0;
 800c5b4:	22f0      	movs	r2, #240	@ 0xf0
 800c5b6:	9200      	str	r2, [sp, #0]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800c5b8:	f8df b2b4 	ldr.w	fp, [pc, #692]	@ 800c870 <draw_letter_normal+0x304>
 800c5bc:	e00d      	b.n	800c5da <draw_letter_normal+0x6e>
            break;
        case 8:
            bpp_opa_table_p = _lv_bpp8_opa_table;
            bitmask_init  = 0xFF;
            shades = 256;
 800c5be:	f44f 7680 	mov.w	r6, #256	@ 0x100
            bitmask_init  = 0xFF;
 800c5c2:	22ff      	movs	r2, #255	@ 0xff
 800c5c4:	9200      	str	r2, [sp, #0]
            bpp_opa_table_p = _lv_bpp8_opa_table;
 800c5c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	@ 800c874 <draw_letter_normal+0x308>
            break;       /*No opa table, pixel value will be used directly*/
 800c5ca:	e006      	b.n	800c5da <draw_letter_normal+0x6e>
    if(bpp == 3) bpp = 4;
 800c5cc:	f04f 0904 	mov.w	r9, #4
            shades = 16;
 800c5d0:	2610      	movs	r6, #16
            bitmask_init  = 0xF0;
 800c5d2:	22f0      	movs	r2, #240	@ 0xf0
 800c5d4:	9200      	str	r2, [sp, #0]
            bpp_opa_table_p = _lv_bpp4_opa_table;
 800c5d6:	f8df b298 	ldr.w	fp, [pc, #664]	@ 800c870 <draw_letter_normal+0x304>
    }

    static lv_opa_t opa_table[256];
    static lv_opa_t prev_opa = LV_OPA_TRANSP;
    static uint32_t prev_bpp = 0;
    if(opa < LV_OPA_MAX) {
 800c5da:	2cfc      	cmp	r4, #252	@ 0xfc
 800c5dc:	d826      	bhi.n	800c62c <draw_letter_normal+0xc0>
        if(prev_opa != opa || prev_bpp != bpp) {
 800c5de:	4aa0      	ldr	r2, [pc, #640]	@ (800c860 <draw_letter_normal+0x2f4>)
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	42a2      	cmp	r2, r4
 800c5e4:	d007      	beq.n	800c5f6 <draw_letter_normal+0x8a>
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	e00f      	b.n	800c60a <draw_letter_normal+0x9e>
            shades = 4;
 800c5ea:	2604      	movs	r6, #4
            bitmask_init  = 0xC0;
 800c5ec:	22c0      	movs	r2, #192	@ 0xc0
 800c5ee:	9200      	str	r2, [sp, #0]
            bpp_opa_table_p = _lv_bpp2_opa_table;
 800c5f0:	f8df b284 	ldr.w	fp, [pc, #644]	@ 800c878 <draw_letter_normal+0x30c>
 800c5f4:	e7f1      	b.n	800c5da <draw_letter_normal+0x6e>
        if(prev_opa != opa || prev_bpp != bpp) {
 800c5f6:	4a9b      	ldr	r2, [pc, #620]	@ (800c864 <draw_letter_normal+0x2f8>)
 800c5f8:	6812      	ldr	r2, [r2, #0]
 800c5fa:	454a      	cmp	r2, r9
 800c5fc:	d00f      	beq.n	800c61e <draw_letter_normal+0xb2>
 800c5fe:	2100      	movs	r1, #0
 800c600:	e003      	b.n	800c60a <draw_letter_normal+0x9e>
            uint32_t i;
            for(i = 0; i < shades; i++) {
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800c602:	4622      	mov	r2, r4
 800c604:	4898      	ldr	r0, [pc, #608]	@ (800c868 <draw_letter_normal+0x2fc>)
 800c606:	5442      	strb	r2, [r0, r1]
            for(i = 0; i < shades; i++) {
 800c608:	3101      	adds	r1, #1
 800c60a:	428e      	cmp	r6, r1
 800c60c:	d907      	bls.n	800c61e <draw_letter_normal+0xb2>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
 800c60e:	f81b 2001 	ldrb.w	r2, [fp, r1]
 800c612:	2aff      	cmp	r2, #255	@ 0xff
 800c614:	d0f5      	beq.n	800c602 <draw_letter_normal+0x96>
 800c616:	fb04 f202 	mul.w	r2, r4, r2
 800c61a:	0a12      	lsrs	r2, r2, #8
 800c61c:	e7f2      	b.n	800c604 <draw_letter_normal+0x98>
            }
        }
        bpp_opa_table_p = opa_table;
        prev_opa = opa;
 800c61e:	4a90      	ldr	r2, [pc, #576]	@ (800c860 <draw_letter_normal+0x2f4>)
 800c620:	7014      	strb	r4, [r2, #0]
        prev_bpp = bpp;
 800c622:	4a90      	ldr	r2, [pc, #576]	@ (800c864 <draw_letter_normal+0x2f8>)
 800c624:	f8c2 9000 	str.w	r9, [r2]
        bpp_opa_table_p = opa_table;
 800c628:	f8df b23c 	ldr.w	fp, [pc, #572]	@ 800c868 <draw_letter_normal+0x2fc>
    }

    int32_t col, row;
    int32_t box_w = g->box_w;
 800c62c:	88da      	ldrh	r2, [r3, #6]
 800c62e:	9206      	str	r2, [sp, #24]
    int32_t box_h = g->box_h;
 800c630:	891f      	ldrh	r7, [r3, #8]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
 800c632:	fb09 f102 	mul.w	r1, r9, r2

    /*Calculate the col/row start/end on the map*/
    int32_t col_start = pos->x >= draw_ctx->clip_area->x1 ? 0 : draw_ctx->clip_area->x1 - pos->x;
 800c636:	9b05      	ldr	r3, [sp, #20]
 800c638:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c63c:	9b07      	ldr	r3, [sp, #28]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c644:	4290      	cmp	r0, r2
 800c646:	da02      	bge.n	800c64e <draw_letter_normal+0xe2>
 800c648:	1a12      	subs	r2, r2, r0
 800c64a:	9202      	str	r2, [sp, #8]
 800c64c:	e001      	b.n	800c652 <draw_letter_normal+0xe6>
 800c64e:	2200      	movs	r2, #0
 800c650:	9202      	str	r2, [sp, #8]
    int32_t col_end   = pos->x + box_w <= draw_ctx->clip_area->x2 ? box_w : draw_ctx->clip_area->x2 - pos->x + 1;
 800c652:	9a06      	ldr	r2, [sp, #24]
 800c654:	1882      	adds	r2, r0, r2
 800c656:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800c65a:	42a2      	cmp	r2, r4
 800c65c:	dd03      	ble.n	800c666 <draw_letter_normal+0xfa>
 800c65e:	1a24      	subs	r4, r4, r0
 800c660:	f104 0801 	add.w	r8, r4, #1
 800c664:	e001      	b.n	800c66a <draw_letter_normal+0xfe>
 800c666:	f8dd 8018 	ldr.w	r8, [sp, #24]
    int32_t row_start = pos->y >= draw_ctx->clip_area->y1 ? 0 : draw_ctx->clip_area->y1 - pos->y;
 800c66a:	9a05      	ldr	r2, [sp, #20]
 800c66c:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800c670:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c674:	4290      	cmp	r0, r2
 800c676:	da02      	bge.n	800c67e <draw_letter_normal+0x112>
 800c678:	1a12      	subs	r2, r2, r0
 800c67a:	9201      	str	r2, [sp, #4]
 800c67c:	e001      	b.n	800c682 <draw_letter_normal+0x116>
 800c67e:	2200      	movs	r2, #0
 800c680:	9201      	str	r2, [sp, #4]
    int32_t row_end   = pos->y + box_h <= draw_ctx->clip_area->y2 ? box_h : draw_ctx->clip_area->y2 - pos->y + 1;
 800c682:	19c2      	adds	r2, r0, r7
 800c684:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800c688:	42a2      	cmp	r2, r4
 800c68a:	dd03      	ble.n	800c694 <draw_letter_normal+0x128>
 800c68c:	1a24      	subs	r4, r4, r0
 800c68e:	1c63      	adds	r3, r4, #1
 800c690:	9303      	str	r3, [sp, #12]
 800c692:	e000      	b.n	800c696 <draw_letter_normal+0x12a>
 800c694:	9703      	str	r7, [sp, #12]

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
 800c696:	9b02      	ldr	r3, [sp, #8]
 800c698:	fb09 f403 	mul.w	r4, r9, r3
 800c69c:	9801      	ldr	r0, [sp, #4]
 800c69e:	fb01 4400 	mla	r4, r1, r0, r4
    map_p += bit_ofs >> 3;
 800c6a2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c6a4:	eb06 06d4 	add.w	r6, r6, r4, lsr #3

    uint8_t letter_px;
    uint32_t col_bit;
    col_bit = bit_ofs & 0x7; /*"& 0x7" equals to "% 8" just faster*/
 800c6a8:	f004 0407 	and.w	r4, r4, #7

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800c6ac:	211c      	movs	r1, #28
 800c6ae:	a80f      	add	r0, sp, #60	@ 0x3c
 800c6b0:	f00a fb08 	bl	8016cc4 <lv_memset_00>
    blend_dsc.color = dsc->color;
 800c6b4:	89ab      	ldrh	r3, [r5, #12]
 800c6b6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    blend_dsc.opa = dsc->opa;
 800c6ba:	7eab      	ldrb	r3, [r5, #26]
 800c6bc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
    blend_dsc.blend_mode = dsc->blend_mode;
 800c6c0:	7fab      	ldrb	r3, [r5, #30]
 800c6c2:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800c6c6:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55

    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800c6ca:	f012 fcdf 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800c6ce:	f006 fddb 	bl	8013288 <lv_disp_get_hor_res>
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
 800c6d2:	9906      	ldr	r1, [sp, #24]
 800c6d4:	fb01 f707 	mul.w	r7, r1, r7
 800c6d8:	463d      	mov	r5, r7
 800c6da:	4287      	cmp	r7, r0
 800c6dc:	bfa8      	it	ge
 800c6de:	4605      	movge	r5, r0
 800c6e0:	9504      	str	r5, [sp, #16]
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	f00a f96a 	bl	80169bc <lv_mem_buf_get>
 800c6e8:	4682      	mov	sl, r0
    blend_dsc.mask_buf = mask_buf;
 800c6ea:	9012      	str	r0, [sp, #72]	@ 0x48
    int32_t mask_p = 0;

    lv_area_t fill_area;
    fill_area.x1 = col_start + pos->x;
 800c6ec:	9d05      	ldr	r5, [sp, #20]
 800c6ee:	882b      	ldrh	r3, [r5, #0]
 800c6f0:	9a02      	ldr	r2, [sp, #8]
 800c6f2:	189a      	adds	r2, r3, r2
 800c6f4:	b291      	uxth	r1, r2
 800c6f6:	b212      	sxth	r2, r2
 800c6f8:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
    fill_area.x2 = col_end  + pos->x - 1;
 800c6fc:	4443      	add	r3, r8
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	3b01      	subs	r3, #1
 800c702:	b298      	uxth	r0, r3
 800c704:	b21b      	sxth	r3, r3
 800c706:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
    fill_area.y1 = row_start + pos->y;
 800c70a:	886d      	ldrh	r5, [r5, #2]
 800c70c:	9f01      	ldr	r7, [sp, #4]
 800c70e:	443d      	add	r5, r7
 800c710:	b22f      	sxth	r7, r5
 800c712:	f8ad 7036 	strh.w	r7, [sp, #54]	@ 0x36
    fill_area.y2 = fill_area.y1;
 800c716:	f8ad 703a 	strh.w	r7, [sp, #58]	@ 0x3a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800c71a:	1a41      	subs	r1, r0, r1
 800c71c:	b289      	uxth	r1, r1
 800c71e:	3101      	adds	r1, #1
 800c720:	b208      	sxth	r0, r1
 800c722:	9008      	str	r0, [sp, #32]
    dest->x1 = src->x1;
 800c724:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
    dest->y1 = src->y1;
 800c728:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
    dest->x2 = src->x2;
 800c72c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
    dest->y2 = src->y2;
 800c730:	f8ad 7032 	strh.w	r7, [sp, #50]	@ 0x32
#if LV_DRAW_COMPLEX
    lv_coord_t fill_w = lv_area_get_width(&fill_area);
    lv_area_t mask_area;
    lv_area_copy(&mask_area, &fill_area);
    mask_area.y2 = mask_area.y1 + row_end;
 800c734:	9803      	ldr	r0, [sp, #12]
 800c736:	fa10 f585 	uxtah	r5, r0, r5
 800c73a:	f8ad 5032 	strh.w	r5, [sp, #50]	@ 0x32
    bool mask_any = lv_draw_mask_is_any(&mask_area);
 800c73e:	a80b      	add	r0, sp, #44	@ 0x2c
 800c740:	f7fd f860 	bl	8009804 <lv_draw_mask_is_any>
 800c744:	9005      	str	r0, [sp, #20]
#endif
    blend_dsc.blend_area = &fill_area;
 800c746:	ab0d      	add	r3, sp, #52	@ 0x34
 800c748:	930f      	str	r3, [sp, #60]	@ 0x3c
    blend_dsc.mask_area = &fill_area;
 800c74a:	9314      	str	r3, [sp, #80]	@ 0x50

    uint32_t col_bit_max = 8 - bpp;
 800c74c:	f1c9 0708 	rsb	r7, r9, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
 800c750:	9b02      	ldr	r3, [sp, #8]
 800c752:	9906      	ldr	r1, [sp, #24]
 800c754:	440b      	add	r3, r1
 800c756:	eba3 0308 	sub.w	r3, r3, r8
 800c75a:	fb09 f303 	mul.w	r3, r9, r3
 800c75e:	9306      	str	r3, [sp, #24]
    int32_t mask_p = 0;
 800c760:	2000      	movs	r0, #0

    for(row = row_start ; row < row_end; row++) {
 800c762:	e036      	b.n	800c7d2 <draw_letter_normal+0x266>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
            if(letter_px) {
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
            }
            else {
                mask_buf[mask_p] = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	f80a 3005 	strb.w	r3, [sl, r5]
 800c76a:	e014      	b.n	800c796 <draw_letter_normal+0x22a>
                bitmask = bitmask >> bpp;
            }
            else {
                col_bit = 0;
                bitmask = bitmask_init;
                map_p++;
 800c76c:	3601      	adds	r6, #1
                bitmask = bitmask_init;
 800c76e:	9900      	ldr	r1, [sp, #0]
                col_bit = 0;
 800c770:	2400      	movs	r4, #0
            }

            /*Next mask byte*/
            mask_p++;
 800c772:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
 800c774:	3201      	adds	r2, #1
 800c776:	4542      	cmp	r2, r8
 800c778:	da13      	bge.n	800c7a2 <draw_letter_normal+0x236>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
 800c77a:	7833      	ldrb	r3, [r6, #0]
 800c77c:	400b      	ands	r3, r1
 800c77e:	eba7 0c04 	sub.w	ip, r7, r4
 800c782:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
 800c786:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800c78a:	d0eb      	beq.n	800c764 <draw_letter_normal+0x1f8>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800c792:	f80a 3005 	strb.w	r3, [sl, r5]
            if(col_bit < col_bit_max) {
 800c796:	42bc      	cmp	r4, r7
 800c798:	d2e8      	bcs.n	800c76c <draw_letter_normal+0x200>
                col_bit += bpp;
 800c79a:	444c      	add	r4, r9
                bitmask = bitmask >> bpp;
 800c79c:	fa21 f109 	lsr.w	r1, r1, r9
 800c7a0:	e7e7      	b.n	800c772 <draw_letter_normal+0x206>
        }

#if LV_DRAW_COMPLEX
        /*Apply masks if any*/
        if(mask_any) {
 800c7a2:	9b05      	ldr	r3, [sp, #20]
 800c7a4:	b9fb      	cbnz	r3, 800c7e6 <draw_letter_normal+0x27a>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
            }
        }
#endif

        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
 800c7a6:	9b02      	ldr	r3, [sp, #8]
 800c7a8:	eba8 0303 	sub.w	r3, r8, r3
 800c7ac:	442b      	add	r3, r5
 800c7ae:	9a04      	ldr	r2, [sp, #16]
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d22c      	bcs.n	800c80e <draw_letter_normal+0x2a2>
            fill_area.y2 ++;
 800c7b4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 800c7be:	4628      	mov	r0, r5
            fill_area.y1 = fill_area.y2 + 1;
            fill_area.y2 = fill_area.y1;
            mask_p = 0;
        }

        col_bit += col_bit_row_ofs;
 800c7c0:	9b06      	ldr	r3, [sp, #24]
 800c7c2:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
 800c7c4:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
 800c7c8:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
 800c7cc:	9b01      	ldr	r3, [sp, #4]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	9301      	str	r3, [sp, #4]
 800c7d2:	9b01      	ldr	r3, [sp, #4]
 800c7d4:	9a03      	ldr	r2, [sp, #12]
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	da2a      	bge.n	800c830 <draw_letter_normal+0x2c4>
        bitmask = bitmask_init >> col_bit;
 800c7da:	9b00      	ldr	r3, [sp, #0]
 800c7dc:	fa23 f104 	lsr.w	r1, r3, r4
        for(col = col_start; col < col_end; col++) {
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	9a02      	ldr	r2, [sp, #8]
 800c7e4:	e7c7      	b.n	800c776 <draw_letter_normal+0x20a>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
 800c7e6:	eb0a 0300 	add.w	r3, sl, r0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ee:	9b08      	ldr	r3, [sp, #32]
 800c7f0:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	@ 0x3a
 800c7f4:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 800c7f8:	f7fc ff72 	bl	80096e0 <lv_draw_mask_apply>
 800c7fc:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800c800:	2800      	cmp	r0, #0
 800c802:	d1d0      	bne.n	800c7a6 <draw_letter_normal+0x23a>
                lv_memset_00(mask_buf + mask_p_start, fill_w);
 800c804:	9908      	ldr	r1, [sp, #32]
 800c806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c808:	f00a fa5c 	bl	8016cc4 <lv_memset_00>
 800c80c:	e7cb      	b.n	800c7a6 <draw_letter_normal+0x23a>
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c80e:	2302      	movs	r3, #2
 800c810:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c814:	a90f      	add	r1, sp, #60	@ 0x3c
 800c816:	9807      	ldr	r0, [sp, #28]
 800c818:	f7fe ff5e 	bl	800b6d8 <lv_draw_sw_blend>
            fill_area.y1 = fill_area.y2 + 1;
 800c81c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 800c820:	3301      	adds	r3, #1
 800c822:	b21b      	sxth	r3, r3
 800c824:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
            fill_area.y2 = fill_area.y1;
 800c828:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
            mask_p = 0;
 800c82c:	2000      	movs	r0, #0
 800c82e:	e7c7      	b.n	800c7c0 <draw_letter_normal+0x254>
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
 800c830:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	@ 0x36
 800c834:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 800c838:	429a      	cmp	r2, r3
 800c83a:	d105      	bne.n	800c848 <draw_letter_normal+0x2dc>
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
        mask_p = 0;
    }

    lv_mem_buf_release(mask_buf);
 800c83c:	4650      	mov	r0, sl
 800c83e:	f00a f91f 	bl	8016a80 <lv_mem_buf_release>
}
 800c842:	b017      	add	sp, #92	@ 0x5c
 800c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        fill_area.y2--;
 800c848:	3b01      	subs	r3, #1
 800c84a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800c84e:	2302      	movs	r3, #2
 800c850:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800c854:	a90f      	add	r1, sp, #60	@ 0x3c
 800c856:	9807      	ldr	r0, [sp, #28]
 800c858:	f7fe ff3e 	bl	800b6d8 <lv_draw_sw_blend>
        mask_p = 0;
 800c85c:	e7ee      	b.n	800c83c <draw_letter_normal+0x2d0>
 800c85e:	bf00      	nop
 800c860:	2000664c 	.word	0x2000664c
 800c864:	20006648 	.word	0x20006648
 800c868:	20006548 	.word	0x20006548
 800c86c:	0802a258 	.word	0x0802a258
 800c870:	0802a244 	.word	0x0802a244
 800c874:	0802a144 	.word	0x0802a144
 800c878:	0802a254 	.word	0x0802a254

0800c87c <lv_draw_sw_letter>:
{
 800c87c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87e:	b099      	sub	sp, #100	@ 0x64
 800c880:	4606      	mov	r6, r0
 800c882:	460d      	mov	r5, r1
 800c884:	4617      	mov	r7, r2
 800c886:	461c      	mov	r4, r3
    bool g_ret = lv_font_get_glyph_dsc(dsc->font, &g, letter, '\0');
 800c888:	2300      	movs	r3, #0
 800c88a:	4622      	mov	r2, r4
 800c88c:	a914      	add	r1, sp, #80	@ 0x50
 800c88e:	6828      	ldr	r0, [r5, #0]
 800c890:	f005 f947 	bl	8011b22 <lv_font_get_glyph_dsc>
    if(g_ret == false) {
 800c894:	2800      	cmp	r0, #0
 800c896:	d04a      	beq.n	800c92e <lv_draw_sw_letter+0xb2>
    if((g.box_h == 0) || (g.box_w == 0)) return;
 800c898:	f8bd 1058 	ldrh.w	r1, [sp, #88]	@ 0x58
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d050      	beq.n	800c942 <lv_draw_sw_letter+0xc6>
 800c8a0:	f8bd 0056 	ldrh.w	r0, [sp, #86]	@ 0x56
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d04c      	beq.n	800c942 <lv_draw_sw_letter+0xc6>
    gpos.x = pos_p->x + g.ofs_x;
 800c8a8:	883b      	ldrh	r3, [r7, #0]
 800c8aa:	f8bd 205a 	ldrh.w	r2, [sp, #90]	@ 0x5a
 800c8ae:	4413      	add	r3, r2
 800c8b0:	b21b      	sxth	r3, r3
 800c8b2:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
    gpos.y = pos_p->y + (dsc->font->line_height - dsc->font->base_line) - g.box_h - g.ofs_y;
 800c8b6:	887f      	ldrh	r7, [r7, #2]
 800c8b8:	682a      	ldr	r2, [r5, #0]
 800c8ba:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800c8be:	8952      	ldrh	r2, [r2, #10]
 800c8c0:	ebac 0c02 	sub.w	ip, ip, r2
 800c8c4:	fa17 fc8c 	uxtah	ip, r7, ip
 800c8c8:	fa1f fc8c 	uxth.w	ip, ip
 800c8cc:	ebac 0c01 	sub.w	ip, ip, r1
 800c8d0:	fa1f fc8c 	uxth.w	ip, ip
 800c8d4:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 800c8d8:	ebac 0c02 	sub.w	ip, ip, r2
 800c8dc:	fa0f fc8c 	sxth.w	ip, ip
 800c8e0:	f8ad c04e 	strh.w	ip, [sp, #78]	@ 0x4e
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800c8e4:	4418      	add	r0, r3
 800c8e6:	68b2      	ldr	r2, [r6, #8]
 800c8e8:	f9b2 7000 	ldrsh.w	r7, [r2]
 800c8ec:	42b8      	cmp	r0, r7
 800c8ee:	db28      	blt.n	800c942 <lv_draw_sw_letter+0xc6>
       gpos.x > draw_ctx->clip_area->x2 ||
 800c8f0:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
    if(gpos.x + g.box_w < draw_ctx->clip_area->x1 ||
 800c8f4:	4283      	cmp	r3, r0
 800c8f6:	dc24      	bgt.n	800c942 <lv_draw_sw_letter+0xc6>
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800c8f8:	4461      	add	r1, ip
 800c8fa:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
       gpos.x > draw_ctx->clip_area->x2 ||
 800c8fe:	4299      	cmp	r1, r3
 800c900:	db1f      	blt.n	800c942 <lv_draw_sw_letter+0xc6>
       gpos.y > draw_ctx->clip_area->y2)  {
 800c902:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
       gpos.y + g.box_h < draw_ctx->clip_area->y1 ||
 800c906:	459c      	cmp	ip, r3
 800c908:	dc1b      	bgt.n	800c942 <lv_draw_sw_letter+0xc6>
    const uint8_t * map_p = lv_font_get_glyph_bitmap(g.resolved_font, letter);
 800c90a:	4621      	mov	r1, r4
 800c90c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c90e:	f005 f902 	bl	8011b16 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
 800c912:	b1b0      	cbz	r0, 800c942 <lv_draw_sw_letter+0xc6>
    if(g.resolved_font->subpx) {
 800c914:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c916:	7b1b      	ldrb	r3, [r3, #12]
 800c918:	f013 0f03 	tst.w	r3, #3
 800c91c:	d111      	bne.n	800c942 <lv_draw_sw_letter+0xc6>
        draw_letter_normal(draw_ctx, dsc, &gpos, &g, map_p);
 800c91e:	9000      	str	r0, [sp, #0]
 800c920:	ab14      	add	r3, sp, #80	@ 0x50
 800c922:	aa13      	add	r2, sp, #76	@ 0x4c
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff fe20 	bl	800c56c <draw_letter_normal>
 800c92c:	e009      	b.n	800c942 <lv_draw_sw_letter+0xc6>
        if(letter >= 0x20 &&
 800c92e:	2c1f      	cmp	r4, #31
 800c930:	d907      	bls.n	800c942 <lv_draw_sw_letter+0xc6>
 800c932:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c936:	429c      	cmp	r4, r3
 800c938:	d003      	beq.n	800c942 <lv_draw_sw_letter+0xc6>
           letter != 0xf8ff && /*LV_SYMBOL_DUMMY*/
 800c93a:	f242 030c 	movw	r3, #8204	@ 0x200c
 800c93e:	429c      	cmp	r4, r3
 800c940:	d101      	bne.n	800c946 <lv_draw_sw_letter+0xca>
}
 800c942:	b019      	add	sp, #100	@ 0x64
 800c944:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lv_coord_t begin_x = pos_p->x + g.ofs_x;
 800c946:	8839      	ldrh	r1, [r7, #0]
 800c948:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 800c94c:	4419      	add	r1, r3
            lv_coord_t begin_y = pos_p->y + g.ofs_y;
 800c94e:	887a      	ldrh	r2, [r7, #2]
 800c950:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 800c954:	441a      	add	r2, r3
            lv_area_set(&glyph_coords, begin_x, begin_y, begin_x + g.box_w, begin_y + g.box_h);
 800c956:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 800c95a:	fa13 f381 	uxtah	r3, r3, r1
 800c95e:	f8bd 0058 	ldrh.w	r0, [sp, #88]	@ 0x58
 800c962:	fa10 f082 	uxtah	r0, r0, r2
 800c966:	b200      	sxth	r0, r0
 800c968:	9000      	str	r0, [sp, #0]
 800c96a:	b21b      	sxth	r3, r3
 800c96c:	b212      	sxth	r2, r2
 800c96e:	b209      	sxth	r1, r1
 800c970:	a803      	add	r0, sp, #12
 800c972:	f7f5 f800 	bl	8001976 <lv_area_set>
            lv_draw_rect_dsc_init(&glyph_dsc);
 800c976:	a805      	add	r0, sp, #20
 800c978:	f7fd f96a 	bl	8009c50 <lv_draw_rect_dsc_init>
            glyph_dsc.bg_opa = LV_OPA_MIN;
 800c97c:	2302      	movs	r3, #2
 800c97e:	f88d 3017 	strb.w	r3, [sp, #23]
            glyph_dsc.outline_opa = LV_OPA_MIN;
 800c982:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
            glyph_dsc.shadow_opa = LV_OPA_MIN;
 800c986:	f88d 304a 	strb.w	r3, [sp, #74]	@ 0x4a
            glyph_dsc.bg_img_opa = LV_OPA_MIN;
 800c98a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
            glyph_dsc.border_color = dsc->color;
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            glyph_dsc.border_width = 1;
 800c994:	2301      	movs	r3, #1
 800c996:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
            draw_ctx->draw_rect(draw_ctx, &glyph_dsc, &glyph_coords);
 800c99a:	6933      	ldr	r3, [r6, #16]
 800c99c:	aa03      	add	r2, sp, #12
 800c99e:	a905      	add	r1, sp, #20
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4798      	blx	r3
        return;
 800c9a4:	e7cd      	b.n	800c942 <lv_draw_sw_letter+0xc6>

0800c9a6 <draw_line_hor>:
 **********************/


static void LV_ATTRIBUTE_FAST_MEM draw_line_hor(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 800c9a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9aa:	b08b      	sub	sp, #44	@ 0x2c
 800c9ac:	4680      	mov	r8, r0
 800c9ae:	460e      	mov	r6, r1
    int32_t w = dsc->width - 1;
 800c9b0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800c9b4:	3901      	subs	r1, #1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800c9b6:	f001 0001 	and.w	r0, r1, #1
 800c9ba:	eb00 0061 	add.w	r0, r0, r1, asr #1

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(point1->x, point2->x);
 800c9be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c2:	f9b2 4000 	ldrsh.w	r4, [r2]
 800c9c6:	461d      	mov	r5, r3
 800c9c8:	42a3      	cmp	r3, r4
 800c9ca:	bfa8      	it	ge
 800c9cc:	4625      	movge	r5, r4
 800c9ce:	f8ad 5020 	strh.w	r5, [sp, #32]
    blend_area.x2 = LV_MAX(point1->x, point2->x)  - 1;
 800c9d2:	42a3      	cmp	r3, r4
 800c9d4:	bfb8      	it	lt
 800c9d6:	4623      	movlt	r3, r4
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    blend_area.y1 = point1->y - w_half1;
 800c9e0:	8853      	ldrh	r3, [r2, #2]
 800c9e2:	1a18      	subs	r0, r3, r0
 800c9e4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
    blend_area.y2 = point1->y + w_half0;
 800c9e8:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800c9ec:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800c9f0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c9f4:	a908      	add	r1, sp, #32
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	f7f4 fffc 	bl	80019f4 <_lv_area_intersect>
    if(!is_common) return;
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f000 809d 	beq.w	800cb3c <draw_line_hor+0x196>
 800ca02:	4605      	mov	r5, r0

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ca04:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ca08:	b12b      	cbz	r3, 800ca16 <draw_line_hor+0x70>
 800ca0a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800ca0e:	b973      	cbnz	r3, 800ca2e <draw_line_hor+0x88>
 800ca10:	f04f 0900 	mov.w	r9, #0
 800ca14:	e001      	b.n	800ca1a <draw_line_hor+0x74>
 800ca16:	f04f 0900 	mov.w	r9, #0
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800ca1a:	a808      	add	r0, sp, #32
 800ca1c:	f7fc fef2 	bl	8009804 <lv_draw_mask_is_any>
 800ca20:	4604      	mov	r4, r0
 800ca22:	b938      	cbnz	r0, 800ca34 <draw_line_hor+0x8e>
    else if(dashed) simple_mode = false;
 800ca24:	f1b9 0f00 	cmp.w	r9, #0
 800ca28:	d105      	bne.n	800ca36 <draw_line_hor+0x90>
    bool simple_mode = true;
 800ca2a:	462c      	mov	r4, r5
 800ca2c:	e003      	b.n	800ca36 <draw_line_hor+0x90>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800ca2e:	f04f 0901 	mov.w	r9, #1
 800ca32:	e7f2      	b.n	800ca1a <draw_line_hor+0x74>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800ca34:	2400      	movs	r4, #0

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800ca36:	211c      	movs	r1, #28
 800ca38:	a801      	add	r0, sp, #4
 800ca3a:	f00a f943 	bl	8016cc4 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800ca3e:	ab08      	add	r3, sp, #32
 800ca40:	9301      	str	r3, [sp, #4]
    blend_dsc.color = dsc->color;
 800ca42:	8833      	ldrh	r3, [r6, #0]
 800ca44:	f8ad 300c 	strh.w	r3, [sp, #12]
    blend_dsc.opa = dsc->opa;
 800ca48:	7a33      	ldrb	r3, [r6, #8]
 800ca4a:	f88d 301c 	strb.w	r3, [sp, #28]

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800ca4e:	bb3c      	cbnz	r4, 800caa0 <draw_line_hor+0xfa>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ca50:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 800ca54:	f9bd b020 	ldrsh.w	fp, [sp, #32]
 800ca58:	fa1f f38b 	uxth.w	r3, fp
 800ca5c:	1ae4      	subs	r4, r4, r3
 800ca5e:	b2a4      	uxth	r4, r4
 800ca60:	3401      	adds	r4, #1
 800ca62:	b224      	sxth	r4, r4
    /*If there other mask apply it*/
    else {

        int32_t blend_area_w = lv_area_get_width(&blend_area);

        lv_coord_t y2 = blend_area.y2;
 800ca64:	f9bd a026 	ldrsh.w	sl, [sp, #38]	@ 0x26
        blend_area.y2 = blend_area.y1;
 800ca68:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800ca6c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26

        lv_coord_t dash_start = 0;
        if(dashed) {
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	d019      	beq.n	800caaa <draw_line_hor+0x104>
            dash_start = (blend_area.x1) % (dsc->dash_gap + dsc->dash_width);
 800ca76:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ca7a:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800ca7e:	4413      	add	r3, r2
 800ca80:	fb9b f2f3 	sdiv	r2, fp, r3
 800ca84:	fb03 bb12 	mls	fp, r3, r2, fp
 800ca88:	fa0f fb8b 	sxth.w	fp, fp
        }

        lv_opa_t * mask_buf = lv_mem_buf_get(blend_area_w);
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f009 ff95 	bl	80169bc <lv_mem_buf_get>
 800ca92:	4607      	mov	r7, r0
        blend_dsc.mask_buf = mask_buf;
 800ca94:	9004      	str	r0, [sp, #16]
        blend_dsc.mask_area = &blend_area;
 800ca96:	ab08      	add	r3, sp, #32
 800ca98:	9306      	str	r3, [sp, #24]
        int32_t h;
        for(h = blend_area.y1; h <= y2; h++) {
 800ca9a:	f9bd 5022 	ldrsh.w	r5, [sp, #34]	@ 0x22
 800ca9e:	e033      	b.n	800cb08 <draw_line_hor+0x162>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800caa0:	a901      	add	r1, sp, #4
 800caa2:	4640      	mov	r0, r8
 800caa4:	f7fe fe18 	bl	800b6d8 <lv_draw_sw_blend>
 800caa8:	e048      	b.n	800cb3c <draw_line_hor+0x196>
        lv_coord_t dash_start = 0;
 800caaa:	f04f 0b00 	mov.w	fp, #0
 800caae:	e7ed      	b.n	800ca8c <draw_line_hor+0xe6>
                        if(dash_cnt <= dsc->dash_width) {
                            int16_t diff = dsc->dash_width - dash_cnt;
                            i += diff;
                            dash_cnt += diff;
                        }
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800cab0:	f9b6 0006 	ldrsh.w	r0, [r6, #6]
 800cab4:	4403      	add	r3, r0
 800cab6:	4299      	cmp	r1, r3
 800cab8:	da12      	bge.n	800cae0 <draw_line_hor+0x13a>
                            dash_cnt = 0;
                        }
                        else {
                            mask_buf[i] = 0x00;
 800caba:	2300      	movs	r3, #0
 800cabc:	54bb      	strb	r3, [r7, r2]
 800cabe:	460b      	mov	r3, r1
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800cac0:	3201      	adds	r2, #1
 800cac2:	b212      	sxth	r2, r2
 800cac4:	3301      	adds	r3, #1
 800cac6:	b219      	sxth	r1, r3
 800cac8:	42a2      	cmp	r2, r4
 800caca:	da0b      	bge.n	800cae4 <draw_line_hor+0x13e>
                        if(dash_cnt <= dsc->dash_width) {
 800cacc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cad0:	428b      	cmp	r3, r1
 800cad2:	dbed      	blt.n	800cab0 <draw_line_hor+0x10a>
                            int16_t diff = dsc->dash_width - dash_cnt;
 800cad4:	b298      	uxth	r0, r3
 800cad6:	1a41      	subs	r1, r0, r1
                            i += diff;
 800cad8:	fa12 f281 	uxtah	r2, r2, r1
 800cadc:	b212      	sxth	r2, r2
                            dash_cnt += diff;
 800cade:	e7ef      	b.n	800cac0 <draw_line_hor+0x11a>
                            dash_cnt = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	e7ed      	b.n	800cac0 <draw_line_hor+0x11a>
                        }
                    }

                    blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cae4:	2302      	movs	r3, #2
 800cae6:	f88d 3014 	strb.w	r3, [sp, #20]
                }
            }

            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800caea:	a901      	add	r1, sp, #4
 800caec:	4640      	mov	r0, r8
 800caee:	f7fe fdf3 	bl	800b6d8 <lv_draw_sw_blend>

            blend_area.y1++;
 800caf2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800caf6:	3301      	adds	r3, #1
 800caf8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            blend_area.y2++;
 800cafc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 800cb00:	3301      	adds	r3, #1
 800cb02:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        for(h = blend_area.y1; h <= y2; h++) {
 800cb06:	3501      	adds	r5, #1
 800cb08:	45aa      	cmp	sl, r5
 800cb0a:	db14      	blt.n	800cb36 <draw_line_hor+0x190>
            lv_memset_ff(mask_buf, blend_area_w);
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4638      	mov	r0, r7
 800cb10:	f00a f902 	bl	8016d18 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, blend_area_w);
 800cb14:	4623      	mov	r3, r4
 800cb16:	b22a      	sxth	r2, r5
 800cb18:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7fc fddf 	bl	80096e0 <lv_draw_mask_apply>
 800cb22:	f88d 0014 	strb.w	r0, [sp, #20]
            if(dashed) {
 800cb26:	f1b9 0f00 	cmp.w	r9, #0
 800cb2a:	d0de      	beq.n	800caea <draw_line_hor+0x144>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0dc      	beq.n	800caea <draw_line_hor+0x144>
                    lv_coord_t dash_cnt = dash_start;
 800cb30:	4659      	mov	r1, fp
                    for(i = 0; i < blend_area_w; i++, dash_cnt++) {
 800cb32:	2200      	movs	r2, #0
 800cb34:	e7c8      	b.n	800cac8 <draw_line_hor+0x122>
        }
        lv_mem_buf_release(mask_buf);
 800cb36:	4638      	mov	r0, r7
 800cb38:	f009 ffa2 	bl	8016a80 <lv_mem_buf_release>
    }
#endif /*LV_DRAW_COMPLEX*/
}
 800cb3c:	b00b      	add	sp, #44	@ 0x2c
 800cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb42 <draw_line_ver>:

static void LV_ATTRIBUTE_FAST_MEM draw_line_ver(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                const lv_point_t * point1, const lv_point_t * point2)
{
 800cb42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb46:	b08b      	sub	sp, #44	@ 0x2c
 800cb48:	4680      	mov	r8, r0
 800cb4a:	460e      	mov	r6, r1
    int32_t w = dsc->width - 1;
 800cb4c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800cb50:	3901      	subs	r1, #1
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800cb52:	f001 0001 	and.w	r0, r1, #1
 800cb56:	eb00 0061 	add.w	r0, r0, r1, asr #1

    lv_area_t blend_area;
    blend_area.x1 = point1->x - w_half1;
 800cb5a:	8814      	ldrh	r4, [r2, #0]
 800cb5c:	1a20      	subs	r0, r4, r0
 800cb5e:	f8ad 0020 	strh.w	r0, [sp, #32]
    blend_area.x2 = point1->x + w_half0;
 800cb62:	eb04 0461 	add.w	r4, r4, r1, asr #1
 800cb66:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    blend_area.y1 = LV_MIN(point1->y, point2->y);
 800cb6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cb6e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800cb72:	4619      	mov	r1, r3
 800cb74:	4293      	cmp	r3, r2
 800cb76:	bfa8      	it	ge
 800cb78:	4611      	movge	r1, r2
 800cb7a:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
    blend_area.y2 = LV_MAX(point1->y, point2->y) - 1;
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	bfb8      	it	lt
 800cb82:	4613      	movlt	r3, r2
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	3b01      	subs	r3, #1
 800cb88:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26

    bool is_common;
    is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800cb8c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800cb90:	a908      	add	r1, sp, #32
 800cb92:	4608      	mov	r0, r1
 800cb94:	f7f4 ff2e 	bl	80019f4 <_lv_area_intersect>
    if(!is_common) return;
 800cb98:	b350      	cbz	r0, 800cbf0 <draw_line_ver+0xae>
 800cb9a:	4605      	mov	r5, r0

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800cb9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cba0:	b12b      	cbz	r3, 800cbae <draw_line_ver+0x6c>
 800cba2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cba6:	b973      	cbnz	r3, 800cbc6 <draw_line_ver+0x84>
 800cba8:	f04f 0a00 	mov.w	sl, #0
 800cbac:	e001      	b.n	800cbb2 <draw_line_ver+0x70>
 800cbae:	f04f 0a00 	mov.w	sl, #0
    bool simple_mode = true;
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800cbb2:	a808      	add	r0, sp, #32
 800cbb4:	f7fc fe26 	bl	8009804 <lv_draw_mask_is_any>
 800cbb8:	4604      	mov	r4, r0
 800cbba:	b938      	cbnz	r0, 800cbcc <draw_line_ver+0x8a>
    else if(dashed) simple_mode = false;
 800cbbc:	f1ba 0f00 	cmp.w	sl, #0
 800cbc0:	d105      	bne.n	800cbce <draw_line_ver+0x8c>
    bool simple_mode = true;
 800cbc2:	462c      	mov	r4, r5
 800cbc4:	e003      	b.n	800cbce <draw_line_ver+0x8c>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
 800cbc6:	f04f 0a01 	mov.w	sl, #1
 800cbca:	e7f2      	b.n	800cbb2 <draw_line_ver+0x70>
    if(lv_draw_mask_is_any(&blend_area)) simple_mode = false;
 800cbcc:	2400      	movs	r4, #0

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800cbce:	211c      	movs	r1, #28
 800cbd0:	a801      	add	r0, sp, #4
 800cbd2:	f00a f877 	bl	8016cc4 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800cbd6:	ab08      	add	r3, sp, #32
 800cbd8:	9301      	str	r3, [sp, #4]
    blend_dsc.color = dsc->color;
 800cbda:	8833      	ldrh	r3, [r6, #0]
 800cbdc:	f8ad 300c 	strh.w	r3, [sp, #12]
    blend_dsc.opa = dsc->opa;
 800cbe0:	7a33      	ldrb	r3, [r6, #8]
 800cbe2:	f88d 301c 	strb.w	r3, [sp, #28]

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
 800cbe6:	b134      	cbz	r4, 800cbf6 <draw_line_ver+0xb4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cbe8:	a901      	add	r1, sp, #4
 800cbea:	4640      	mov	r0, r8
 800cbec:	f7fe fd74 	bl	800b6d8 <lv_draw_sw_blend>
            blend_area.y2++;
        }
        lv_mem_buf_release(mask_buf);
    }
#endif /*LV_DRAW_COMPLEX*/
}
 800cbf0:	b00b      	add	sp, #44	@ 0x2c
 800cbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 800cbfa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cbfe:	1aed      	subs	r5, r5, r3
 800cc00:	b2ad      	uxth	r5, r5
 800cc02:	3501      	adds	r5, #1
 800cc04:	b22d      	sxth	r5, r5
        lv_coord_t y2 = blend_area.y2;
 800cc06:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
        blend_area.y2 = blend_area.y1;
 800cc0a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800cc0e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        lv_opa_t * mask_buf = lv_mem_buf_get(draw_area_w);
 800cc12:	4628      	mov	r0, r5
 800cc14:	f009 fed2 	bl	80169bc <lv_mem_buf_get>
 800cc18:	4681      	mov	r9, r0
        blend_dsc.mask_buf = mask_buf;
 800cc1a:	9004      	str	r0, [sp, #16]
        blend_dsc.mask_area = &blend_area;
 800cc1c:	ab08      	add	r3, sp, #32
 800cc1e:	9306      	str	r3, [sp, #24]
        if(dashed) {
 800cc20:	f1ba 0f00 	cmp.w	sl, #0
 800cc24:	d00e      	beq.n	800cc44 <draw_line_ver+0x102>
            dash_start = (blend_area.y1) % (dsc->dash_gap + dsc->dash_width);
 800cc26:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	@ 0x22
 800cc2a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cc2e:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800cc32:	4413      	add	r3, r2
 800cc34:	fb97 f2f3 	sdiv	r2, r7, r3
 800cc38:	fb03 7712 	mls	r7, r3, r2, r7
 800cc3c:	b23f      	sxth	r7, r7
        for(h = blend_area.y1; h <= y2; h++) {
 800cc3e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 800cc42:	e012      	b.n	800cc6a <draw_line_ver+0x128>
        lv_coord_t dash_start = 0;
 800cc44:	2700      	movs	r7, #0
 800cc46:	e7fa      	b.n	800cc3e <draw_line_ver+0xfc>
                dash_cnt ++;
 800cc48:	3701      	adds	r7, #1
 800cc4a:	b23f      	sxth	r7, r7
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cc4c:	a901      	add	r1, sp, #4
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7fe fd42 	bl	800b6d8 <lv_draw_sw_blend>
            blend_area.y1++;
 800cc54:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800cc58:	3301      	adds	r3, #1
 800cc5a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            blend_area.y2++;
 800cc5e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 800cc62:	3301      	adds	r3, #1
 800cc64:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
        for(h = blend_area.y1; h <= y2; h++) {
 800cc68:	3401      	adds	r4, #1
 800cc6a:	45a3      	cmp	fp, r4
 800cc6c:	db21      	blt.n	800ccb2 <draw_line_ver+0x170>
            lv_memset_ff(mask_buf, draw_area_w);
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4648      	mov	r0, r9
 800cc72:	f00a f851 	bl	8016d18 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, h, draw_area_w);
 800cc76:	462b      	mov	r3, r5
 800cc78:	b222      	sxth	r2, r4
 800cc7a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 800cc7e:	4648      	mov	r0, r9
 800cc80:	f7fc fd2e 	bl	80096e0 <lv_draw_mask_apply>
 800cc84:	f88d 0014 	strb.w	r0, [sp, #20]
            if(dashed) {
 800cc88:	f1ba 0f00 	cmp.w	sl, #0
 800cc8c:	d0de      	beq.n	800cc4c <draw_line_ver+0x10a>
                if(blend_dsc.mask_res != LV_DRAW_MASK_RES_TRANSP) {
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0da      	beq.n	800cc48 <draw_line_ver+0x106>
                    if(dash_cnt > dsc->dash_width) {
 800cc92:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cc96:	42bb      	cmp	r3, r7
 800cc98:	da02      	bge.n	800cca0 <draw_line_ver+0x15e>
                        blend_dsc.mask_res = LV_DRAW_MASK_RES_TRANSP;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f88d 3014 	strb.w	r3, [sp, #20]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
 800cca0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cca4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800cca8:	4413      	add	r3, r2
 800ccaa:	429f      	cmp	r7, r3
 800ccac:	dbcc      	blt.n	800cc48 <draw_line_ver+0x106>
                        dash_cnt = 0;
 800ccae:	2700      	movs	r7, #0
 800ccb0:	e7ca      	b.n	800cc48 <draw_line_ver+0x106>
        lv_mem_buf_release(mask_buf);
 800ccb2:	4648      	mov	r0, r9
 800ccb4:	f009 fee4 	bl	8016a80 <lv_mem_buf_release>
 800ccb8:	e79a      	b.n	800cbf0 <draw_line_ver+0xae>
	...

0800ccbc <draw_line_skew>:

static void LV_ATTRIBUTE_FAST_MEM draw_line_skew(struct _lv_draw_ctx_t * draw_ctx, const lv_draw_line_dsc_t * dsc,
                                                 const lv_point_t * point1, const lv_point_t * point2)
{
 800ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc0:	b0bf      	sub	sp, #252	@ 0xfc
 800ccc2:	9002      	str	r0, [sp, #8]
 800ccc4:	460c      	mov	r4, r1
#if LV_DRAW_COMPLEX
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
 800ccc6:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800ccca:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800ccce:	4281      	cmp	r1, r0
 800ccd0:	f280 80d4 	bge.w	800ce7c <draw_line_skew+0x1c0>
        p1.y = point1->y;
 800ccd4:	f8ad 10f6 	strh.w	r1, [sp, #246]	@ 0xf6
        p2.y = point2->y;
 800ccd8:	f8ad 00f2 	strh.w	r0, [sp, #242]	@ 0xf2
        p1.x = point1->x;
 800ccdc:	f9b2 2000 	ldrsh.w	r2, [r2]
 800cce0:	f8ad 20f4 	strh.w	r2, [sp, #244]	@ 0xf4
        p2.x = point2->x;
 800cce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cce8:	f8ad 30f0 	strh.w	r3, [sp, #240]	@ 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
 800ccec:	f9bd 50f0 	ldrsh.w	r5, [sp, #240]	@ 0xf0
 800ccf0:	f9bd 60f4 	ldrsh.w	r6, [sp, #244]	@ 0xf4
 800ccf4:	eba5 0906 	sub.w	r9, r5, r6
    int32_t ydiff = p2.y - p1.y;
 800ccf8:	f9bd 70f2 	ldrsh.w	r7, [sp, #242]	@ 0xf2
 800ccfc:	f9bd 80f6 	ldrsh.w	r8, [sp, #246]	@ 0xf6
 800cd00:	eba7 0308 	sub.w	r3, r7, r8
 800cd04:	9305      	str	r3, [sp, #20]
    bool flat = LV_ABS(xdiff) > LV_ABS(ydiff) ? true : false;
 800cd06:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
 800cd0a:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
 800cd0e:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800cd12:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
 800cd16:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_ABS(ydiff) << 5) / LV_ABS(xdiff);
 800cd1a:	45d3      	cmp	fp, sl
 800cd1c:	f340 80bb 	ble.w	800ce96 <draw_line_skew+0x1da>
 800cd20:	ea4f 134a 	mov.w	r3, sl, lsl #5
 800cd24:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
 800cd28:	49c6      	ldr	r1, [pc, #792]	@ (800d044 <draw_line_skew+0x388>)
 800cd2a:	5ccb      	ldrb	r3, [r1, r3]
 800cd2c:	fb02 f303 	mul.w	r3, r2, r3
 800cd30:	333f      	adds	r3, #63	@ 0x3f
    int32_t w_half0 = w >> 1;
 800cd32:	121a      	asrs	r2, r3, #8
 800cd34:	9203      	str	r2, [sp, #12]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
 800cd36:	f3c3 12c0 	ubfx	r2, r3, #7, #1
 800cd3a:	eb02 2123 	add.w	r1, r2, r3, asr #8
 800cd3e:	9104      	str	r1, [sp, #16]

    lv_area_t blend_area;
    blend_area.x1 = LV_MIN(p1.x, p2.x) - w;
 800cd40:	462a      	mov	r2, r5
 800cd42:	42b5      	cmp	r5, r6
 800cd44:	bfa8      	it	ge
 800cd46:	4632      	movge	r2, r6
 800cd48:	b292      	uxth	r2, r2
 800cd4a:	f3c3 13cf 	ubfx	r3, r3, #7, #16
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	f8ad 20e8 	strh.w	r2, [sp, #232]	@ 0xe8
    blend_area.x2 = LV_MAX(p1.x, p2.x) + w;
 800cd54:	462a      	mov	r2, r5
 800cd56:	42b5      	cmp	r5, r6
 800cd58:	bfb8      	it	lt
 800cd5a:	4632      	movlt	r2, r6
 800cd5c:	fa13 f282 	uxtah	r2, r3, r2
 800cd60:	f8ad 20ec 	strh.w	r2, [sp, #236]	@ 0xec
    blend_area.y1 = LV_MIN(p1.y, p2.y) - w;
 800cd64:	463a      	mov	r2, r7
 800cd66:	4547      	cmp	r7, r8
 800cd68:	bfa8      	it	ge
 800cd6a:	4642      	movge	r2, r8
 800cd6c:	b292      	uxth	r2, r2
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	f8ad 20ea 	strh.w	r2, [sp, #234]	@ 0xea
    blend_area.y2 = LV_MAX(p1.y, p2.y) + w;
 800cd74:	463a      	mov	r2, r7
 800cd76:	4547      	cmp	r7, r8
 800cd78:	bfb8      	it	lt
 800cd7a:	4642      	movlt	r2, r8
 800cd7c:	fa13 f382 	uxtah	r3, r3, r2
 800cd80:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee

    /*Get the union of `coords` and `clip`*/
    /*`clip` is already truncated to the `draw_buf` size
     *in 'lv_refr_area' function*/
    bool is_common = _lv_area_intersect(&blend_area, &blend_area, draw_ctx->clip_area);
 800cd84:	9b02      	ldr	r3, [sp, #8]
 800cd86:	689a      	ldr	r2, [r3, #8]
 800cd88:	ab3a      	add	r3, sp, #232	@ 0xe8
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f4 fe31 	bl	80019f4 <_lv_area_intersect>
    if(is_common == false) return;
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f000 8152 	beq.w	800d03c <draw_line_skew+0x380>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
 800cd98:	45d3      	cmp	fp, sl
 800cd9a:	f340 80a6 	ble.w	800ceea <draw_line_skew+0x22e>
        if(xdiff > 0) {
 800cd9e:	f1b9 0f00 	cmp.w	r9, #0
 800cda2:	dd7d      	ble.n	800cea0 <draw_line_skew+0x1e4>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800cda4:	fa1f f288 	uxth.w	r2, r8
 800cda8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cdac:	4693      	mov	fp, r2
 800cdae:	1ad2      	subs	r2, r2, r3
 800cdb0:	fa1f fa87 	uxth.w	sl, r7
 800cdb4:	ebaa 0303 	sub.w	r3, sl, r3
 800cdb8:	2100      	movs	r1, #0
 800cdba:	9101      	str	r1, [sp, #4]
 800cdbc:	b21b      	sxth	r3, r3
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	462b      	mov	r3, r5
 800cdc2:	b212      	sxth	r2, r2
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	a82f      	add	r0, sp, #188	@ 0xbc
 800cdc8:	f7fc fd50 	bl	800986c <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800cdcc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800cdd0:	eb0b 0203 	add.w	r2, fp, r3
 800cdd4:	449a      	add	sl, r3
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9301      	str	r3, [sp, #4]
 800cdda:	fa0f f38a 	sxth.w	r3, sl
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	462b      	mov	r3, r5
 800cde2:	b212      	sxth	r2, r2
 800cde4:	4631      	mov	r1, r6
 800cde6:	a824      	add	r0, sp, #144	@ 0x90
 800cde8:	f7fc fd40 	bl	800986c <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
 800cdec:	2100      	movs	r1, #0
 800cdee:	a82f      	add	r0, sp, #188	@ 0xbc
 800cdf0:	f7fc fc5c 	bl	80096ac <lv_draw_mask_add>
 800cdf4:	9003      	str	r0, [sp, #12]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	a824      	add	r0, sp, #144	@ 0x90
 800cdfa:	f7fc fc57 	bl	80096ac <lv_draw_mask_add>
 800cdfe:	9004      	str	r0, [sp, #16]
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
 800ce00:	7a63      	ldrb	r3, [r4, #9]
 800ce02:	f013 0f10 	tst.w	r3, #16
 800ce06:	f000 8091 	beq.w	800cf2c <draw_line_skew+0x270>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
 800ce0a:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
 800ce0e:	465f      	mov	r7, fp
 800ce10:	f8bd 50ec 	ldrh.w	r5, [sp, #236]	@ 0xec
 800ce14:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	@ 0xe8
 800ce18:	1aed      	subs	r5, r5, r3
 800ce1a:	b2ad      	uxth	r5, r5
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	b22d      	sxth	r5, r5
     *So deal with it only with steep lines.*/
    int32_t draw_area_w = lv_area_get_width(&blend_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
 800ce20:	f012 f934 	bl	801f08c <_lv_refr_get_disp_refreshing>
 800ce24:	f006 fa30 	bl	8013288 <lv_disp_get_hor_res>
 800ce28:	4606      	mov	r6, r0
 800ce2a:	4681      	mov	r9, r0
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800ce2c:	a83a      	add	r0, sp, #232	@ 0xe8
 800ce2e:	f7f4 fdb5 	bl	800199c <lv_area_get_size>
 800ce32:	42b0      	cmp	r0, r6
 800ce34:	f0c0 80a8 	bcc.w	800cf88 <draw_line_skew+0x2cc>
    lv_opa_t * mask_buf = lv_mem_buf_get(mask_buf_size);
 800ce38:	4648      	mov	r0, r9
 800ce3a:	f009 fdbf 	bl	80169bc <lv_mem_buf_get>
 800ce3e:	4680      	mov	r8, r0

    lv_coord_t y2 = blend_area.y2;
 800ce40:	f9bd a0ee 	ldrsh.w	sl, [sp, #238]	@ 0xee
    blend_area.y2 = blend_area.y1;
 800ce44:	f9bd 30ea 	ldrsh.w	r3, [sp, #234]	@ 0xea
 800ce48:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee

    uint32_t mask_p = 0;
    lv_memset_ff(mask_buf, mask_buf_size);
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	f009 ff63 	bl	8016d18 <lv_memset_ff>

    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800ce52:	211c      	movs	r1, #28
 800ce54:	eb0d 0001 	add.w	r0, sp, r1
 800ce58:	f009 ff34 	bl	8016cc4 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800ce5c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800ce5e:	9307      	str	r3, [sp, #28]
    blend_dsc.color = dsc->color;
 800ce60:	8822      	ldrh	r2, [r4, #0]
 800ce62:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
    blend_dsc.opa = dsc->opa;
 800ce66:	7a22      	ldrb	r2, [r4, #8]
 800ce68:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
    blend_dsc.mask_buf = mask_buf;
 800ce6c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
    blend_dsc.mask_area = &blend_area;
 800ce70:	930c      	str	r3, [sp, #48]	@ 0x30

    /*Fill the first row with 'color'*/
    for(h = blend_area.y1; h <= y2; h++) {
 800ce72:	f9bd 60ea 	ldrsh.w	r6, [sp, #234]	@ 0xea
    uint32_t mask_p = 0;
 800ce76:	2400      	movs	r4, #0
 800ce78:	9705      	str	r7, [sp, #20]
    for(h = blend_area.y1; h <= y2; h++) {
 800ce7a:	e095      	b.n	800cfa8 <draw_line_skew+0x2ec>
        p1.y = point2->y;
 800ce7c:	f8ad 00f6 	strh.w	r0, [sp, #246]	@ 0xf6
        p2.y = point1->y;
 800ce80:	f8ad 10f2 	strh.w	r1, [sp, #242]	@ 0xf2
        p1.x = point2->x;
 800ce84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ce88:	f8ad 30f4 	strh.w	r3, [sp, #244]	@ 0xf4
        p2.x = point1->x;
 800ce8c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ce90:	f8ad 30f0 	strh.w	r3, [sp, #240]	@ 0xf0
 800ce94:	e72a      	b.n	800ccec <draw_line_skew+0x30>
    else wcorr_i = (LV_ABS(xdiff) << 5) / LV_ABS(ydiff);
 800ce96:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800ce9a:	fb93 f3fa 	sdiv	r3, r3, sl
 800ce9e:	e743      	b.n	800cd28 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
 800cea0:	fa1f f288 	uxth.w	r2, r8
 800cea4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800cea8:	4693      	mov	fp, r2
 800ceaa:	441a      	add	r2, r3
 800ceac:	fa1f fa87 	uxth.w	sl, r7
 800ceb0:	4453      	add	r3, sl
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	9101      	str	r1, [sp, #4]
 800ceb6:	b21b      	sxth	r3, r3
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	462b      	mov	r3, r5
 800cebc:	b212      	sxth	r2, r2
 800cebe:	4631      	mov	r1, r6
 800cec0:	a82f      	add	r0, sp, #188	@ 0xbc
 800cec2:	f7fc fcd3 	bl	800986c <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
 800cec6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ceca:	ebab 0203 	sub.w	r2, fp, r3
 800cece:	ebaa 0a03 	sub.w	sl, sl, r3
 800ced2:	2301      	movs	r3, #1
 800ced4:	9301      	str	r3, [sp, #4]
 800ced6:	fa0f f38a 	sxth.w	r3, sl
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	462b      	mov	r3, r5
 800cede:	b212      	sxth	r2, r2
 800cee0:	4631      	mov	r1, r6
 800cee2:	a824      	add	r0, sp, #144	@ 0x90
 800cee4:	f7fc fcc2 	bl	800986c <lv_draw_mask_line_points_init>
 800cee8:	e780      	b.n	800cdec <draw_line_skew+0x130>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
 800ceea:	b2b2      	uxth	r2, r6
 800ceec:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800cef0:	4693      	mov	fp, r2
 800cef2:	18d1      	adds	r1, r2, r3
 800cef4:	fa1f fa85 	uxth.w	sl, r5
 800cef8:	4453      	add	r3, sl
 800cefa:	2200      	movs	r2, #0
 800cefc:	9201      	str	r2, [sp, #4]
 800cefe:	9700      	str	r7, [sp, #0]
 800cf00:	b21b      	sxth	r3, r3
 800cf02:	4642      	mov	r2, r8
 800cf04:	b209      	sxth	r1, r1
 800cf06:	a82f      	add	r0, sp, #188	@ 0xbc
 800cf08:	f7fc fcb0 	bl	800986c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
 800cf0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cf10:	ebab 0103 	sub.w	r1, fp, r3
 800cf14:	ebaa 0303 	sub.w	r3, sl, r3
 800cf18:	2201      	movs	r2, #1
 800cf1a:	9201      	str	r2, [sp, #4]
 800cf1c:	9700      	str	r7, [sp, #0]
 800cf1e:	b21b      	sxth	r3, r3
 800cf20:	4642      	mov	r2, r8
 800cf22:	b209      	sxth	r1, r1
 800cf24:	a824      	add	r0, sp, #144	@ 0x90
 800cf26:	f7fc fca1 	bl	800986c <lv_draw_mask_line_points_init>
 800cf2a:	e75f      	b.n	800cdec <draw_line_skew+0x130>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
 800cf2c:	b2b3      	uxth	r3, r6
 800cf2e:	f8bd a014 	ldrh.w	sl, [sp, #20]
 800cf32:	eba3 030a 	sub.w	r3, r3, sl
 800cf36:	fa1f f989 	uxth.w	r9, r9
 800cf3a:	fa19 f288 	uxtah	r2, r9, r8
 800cf3e:	2103      	movs	r1, #3
 800cf40:	9101      	str	r1, [sp, #4]
 800cf42:	b212      	sxth	r2, r2
 800cf44:	9200      	str	r2, [sp, #0]
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	4642      	mov	r2, r8
 800cf4a:	4631      	mov	r1, r6
 800cf4c:	a819      	add	r0, sp, #100	@ 0x64
 800cf4e:	f7fc fc8d 	bl	800986c <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
 800cf52:	b2ab      	uxth	r3, r5
 800cf54:	eba3 030a 	sub.w	r3, r3, sl
 800cf58:	fa19 f987 	uxtah	r9, r9, r7
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	9201      	str	r2, [sp, #4]
 800cf60:	fa0f f289 	sxth.w	r2, r9
 800cf64:	9200      	str	r2, [sp, #0]
 800cf66:	b21b      	sxth	r3, r3
 800cf68:	463a      	mov	r2, r7
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	a80e      	add	r0, sp, #56	@ 0x38
 800cf6e:	f7fc fc7d 	bl	800986c <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
 800cf72:	2100      	movs	r1, #0
 800cf74:	a819      	add	r0, sp, #100	@ 0x64
 800cf76:	f7fc fb99 	bl	80096ac <lv_draw_mask_add>
 800cf7a:	4607      	mov	r7, r0
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	a80e      	add	r0, sp, #56	@ 0x38
 800cf80:	f7fc fb94 	bl	80096ac <lv_draw_mask_add>
 800cf84:	4683      	mov	fp, r0
 800cf86:	e743      	b.n	800ce10 <draw_line_skew+0x154>
    size_t mask_buf_size = LV_MIN(lv_area_get_size(&blend_area), hor_res);
 800cf88:	a83a      	add	r0, sp, #232	@ 0xe8
 800cf8a:	f7f4 fd07 	bl	800199c <lv_area_get_size>
 800cf8e:	4681      	mov	r9, r0
 800cf90:	e752      	b.n	800ce38 <draw_line_skew+0x17c>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
            lv_memset_00(&mask_buf[mask_p], draw_area_w);
 800cf92:	4629      	mov	r1, r5
 800cf94:	4638      	mov	r0, r7
 800cf96:	f009 fe95 	bl	8016cc4 <lv_memset_00>
 800cf9a:	e014      	b.n	800cfc6 <draw_line_skew+0x30a>
        }

        mask_p += draw_area_w;
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
            blend_area.y2 ++;
 800cf9c:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	@ 0xee
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
    for(h = blend_area.y1; h <= y2; h++) {
 800cfa6:	3601      	adds	r6, #1
 800cfa8:	45b2      	cmp	sl, r6
 800cfaa:	db25      	blt.n	800cff8 <draw_line_skew+0x33c>
        blend_dsc.mask_res = lv_draw_mask_apply(&mask_buf[mask_p], blend_area.x1, h, draw_area_w);
 800cfac:	eb08 0704 	add.w	r7, r8, r4
 800cfb0:	462b      	mov	r3, r5
 800cfb2:	b232      	sxth	r2, r6
 800cfb4:	f9bd 10e8 	ldrsh.w	r1, [sp, #232]	@ 0xe8
 800cfb8:	4638      	mov	r0, r7
 800cfba:	f7fc fb91 	bl	80096e0 <lv_draw_mask_apply>
 800cfbe:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d0e5      	beq.n	800cf92 <draw_line_skew+0x2d6>
        mask_p += draw_area_w;
 800cfc6:	442c      	add	r4, r5
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
 800cfc8:	192b      	adds	r3, r5, r4
 800cfca:	454b      	cmp	r3, r9
 800cfcc:	d3e6      	bcc.n	800cf9c <draw_line_skew+0x2e0>
        }
        else {
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800cfce:	2302      	movs	r3, #2
 800cfd0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800cfd4:	a907      	add	r1, sp, #28
 800cfd6:	9802      	ldr	r0, [sp, #8]
 800cfd8:	f7fe fb7e 	bl	800b6d8 <lv_draw_sw_blend>

            blend_area.y1 = blend_area.y2 + 1;
 800cfdc:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	@ 0xee
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	b21b      	sxth	r3, r3
 800cfe4:	f8ad 30ea 	strh.w	r3, [sp, #234]	@ 0xea
            blend_area.y2 = blend_area.y1;
 800cfe8:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
            mask_p = 0;
            lv_memset_ff(mask_buf, mask_buf_size);
 800cfec:	4649      	mov	r1, r9
 800cfee:	4640      	mov	r0, r8
 800cff0:	f009 fe92 	bl	8016d18 <lv_memset_ff>
            mask_p = 0;
 800cff4:	2400      	movs	r4, #0
 800cff6:	e7d6      	b.n	800cfa6 <draw_line_skew+0x2ea>
        }
    }

    /*Flush the last part*/
    if(blend_area.y1 != blend_area.y2) {
 800cff8:	9f05      	ldr	r7, [sp, #20]
 800cffa:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	@ 0xea
 800cffe:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	@ 0xee
 800d002:	429a      	cmp	r2, r3
 800d004:	d120      	bne.n	800d048 <draw_line_skew+0x38c>
        blend_area.y2--;
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    lv_mem_buf_release(mask_buf);
 800d006:	4640      	mov	r0, r8
 800d008:	f009 fd3a 	bl	8016a80 <lv_mem_buf_release>

    lv_draw_mask_free_param(&mask_left_param);
 800d00c:	a82f      	add	r0, sp, #188	@ 0xbc
 800d00e:	f7fc fbbd 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_free_param(&mask_right_param);
 800d012:	a824      	add	r0, sp, #144	@ 0x90
 800d014:	f7fc fbba 	bl	800978c <lv_draw_mask_free_param>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800d018:	f1b7 3fff 	cmp.w	r7, #4294967295	@ 0xffffffff
 800d01c:	d11f      	bne.n	800d05e <draw_line_skew+0x3a2>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800d01e:	f1bb 3fff 	cmp.w	fp, #4294967295	@ 0xffffffff
 800d022:	d120      	bne.n	800d066 <draw_line_skew+0x3aa>
    lv_draw_mask_remove_id(mask_left_id);
 800d024:	9803      	ldr	r0, [sp, #12]
 800d026:	f7fc fb85 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
 800d02a:	9804      	ldr	r0, [sp, #16]
 800d02c:	f7fc fb82 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
 800d030:	4638      	mov	r0, r7
 800d032:	f7fc fb7f 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
 800d036:	4658      	mov	r0, fp
 800d038:	f7fc fb7c 	bl	8009734 <lv_draw_mask_remove_id>
    LV_UNUSED(point2);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(dsc);
    LV_LOG_WARN("Can't draw skewed line with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800d03c:	b03f      	add	sp, #252	@ 0xfc
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	bf00      	nop
 800d044:	0802a25c 	.word	0x0802a25c
        blend_area.y2--;
 800d048:	3b01      	subs	r3, #1
 800d04a:	f8ad 30ee 	strh.w	r3, [sp, #238]	@ 0xee
        blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800d04e:	2302      	movs	r3, #2
 800d050:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d054:	a907      	add	r1, sp, #28
 800d056:	9802      	ldr	r0, [sp, #8]
 800d058:	f7fe fb3e 	bl	800b6d8 <lv_draw_sw_blend>
 800d05c:	e7d3      	b.n	800d006 <draw_line_skew+0x34a>
    if(mask_top_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_top_param);
 800d05e:	a819      	add	r0, sp, #100	@ 0x64
 800d060:	f7fc fb94 	bl	800978c <lv_draw_mask_free_param>
 800d064:	e7db      	b.n	800d01e <draw_line_skew+0x362>
    if(mask_bottom_id != LV_MASK_ID_INV) lv_draw_mask_free_param(&mask_bottom_param);
 800d066:	a80e      	add	r0, sp, #56	@ 0x38
 800d068:	f7fc fb90 	bl	800978c <lv_draw_mask_free_param>
 800d06c:	e7da      	b.n	800d024 <draw_line_skew+0x368>
 800d06e:	bf00      	nop

0800d070 <lv_draw_sw_line>:
{
 800d070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d074:	b092      	sub	sp, #72	@ 0x48
 800d076:	461d      	mov	r5, r3
    if(dsc->width == 0) return;
 800d078:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d062      	beq.n	800d146 <lv_draw_sw_line+0xd6>
 800d080:	4607      	mov	r7, r0
 800d082:	460c      	mov	r4, r1
 800d084:	4616      	mov	r6, r2
    if(dsc->opa <= LV_OPA_MIN) return;
 800d086:	7a0a      	ldrb	r2, [r1, #8]
 800d088:	2a02      	cmp	r2, #2
 800d08a:	d95c      	bls.n	800d146 <lv_draw_sw_line+0xd6>
    if(point1->x == point2->x && point1->y == point2->y) return;
 800d08c:	f9b6 2000 	ldrsh.w	r2, [r6]
 800d090:	f9b5 1000 	ldrsh.w	r1, [r5]
 800d094:	428a      	cmp	r2, r1
 800d096:	d105      	bne.n	800d0a4 <lv_draw_sw_line+0x34>
 800d098:	f9b6 c002 	ldrsh.w	ip, [r6, #2]
 800d09c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 800d0a0:	4584      	cmp	ip, r0
 800d0a2:	d050      	beq.n	800d146 <lv_draw_sw_line+0xd6>
    clip_line.x1 = LV_MIN(point1->x, point2->x) - dsc->width / 2;
 800d0a4:	428a      	cmp	r2, r1
 800d0a6:	bfa8      	it	ge
 800d0a8:	460a      	movge	r2, r1
 800d0aa:	b292      	uxth	r2, r2
 800d0ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d0b0:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800d0b4:	1ad2      	subs	r2, r2, r3
 800d0b6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
    clip_line.x2 = LV_MAX(point1->x, point2->x) + dsc->width / 2;
 800d0ba:	f9b5 2000 	ldrsh.w	r2, [r5]
 800d0be:	f9b6 1000 	ldrsh.w	r1, [r6]
 800d0c2:	428a      	cmp	r2, r1
 800d0c4:	bfb8      	it	lt
 800d0c6:	460a      	movlt	r2, r1
 800d0c8:	fa13 f382 	uxtah	r3, r3, r2
 800d0cc:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    clip_line.y1 = LV_MIN(point1->y, point2->y) - dsc->width / 2;
 800d0d0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d0d4:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4283      	cmp	r3, r0
 800d0dc:	bfa8      	it	ge
 800d0de:	4601      	movge	r1, r0
 800d0e0:	b289      	uxth	r1, r1
 800d0e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800d0e6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800d0ea:	eba1 0162 	sub.w	r1, r1, r2, asr #1
 800d0ee:	f8ad 1042 	strh.w	r1, [sp, #66]	@ 0x42
    clip_line.y2 = LV_MAX(point1->y, point2->y) + dsc->width / 2;
 800d0f2:	4283      	cmp	r3, r0
 800d0f4:	bfb8      	it	lt
 800d0f6:	4603      	movlt	r3, r0
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800d0fe:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
    is_common = _lv_area_intersect(&clip_line, &clip_line, draw_ctx->clip_area);
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	a910      	add	r1, sp, #64	@ 0x40
 800d106:	4608      	mov	r0, r1
 800d108:	f7f4 fc74 	bl	80019f4 <_lv_area_intersect>
    if(!is_common) return;
 800d10c:	b1d8      	cbz	r0, 800d146 <lv_draw_sw_line+0xd6>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800d10e:	f8d7 9008 	ldr.w	r9, [r7, #8]
    draw_ctx->clip_area = &clip_line;
 800d112:	ab10      	add	r3, sp, #64	@ 0x40
 800d114:	60bb      	str	r3, [r7, #8]
    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800d116:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 800d11a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d014      	beq.n	800d14c <lv_draw_sw_line+0xdc>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800d122:	f9b6 2000 	ldrsh.w	r2, [r6]
 800d126:	f9b5 3000 	ldrsh.w	r3, [r5]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d015      	beq.n	800d15a <lv_draw_sw_line+0xea>
    else draw_line_skew(draw_ctx, dsc, point1, point2);
 800d12e:	462b      	mov	r3, r5
 800d130:	4632      	mov	r2, r6
 800d132:	4621      	mov	r1, r4
 800d134:	4638      	mov	r0, r7
 800d136:	f7ff fdc1 	bl	800ccbc <draw_line_skew>
    if(dsc->round_end || dsc->round_start) {
 800d13a:	7a63      	ldrb	r3, [r4, #9]
 800d13c:	f013 0f0c 	tst.w	r3, #12
 800d140:	d112      	bne.n	800d168 <lv_draw_sw_line+0xf8>
    draw_ctx->clip_area = clip_area_ori;
 800d142:	f8c7 9008 	str.w	r9, [r7, #8]
}
 800d146:	b012      	add	sp, #72	@ 0x48
 800d148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(point1->y == point2->y) draw_line_hor(draw_ctx, dsc, point1, point2);
 800d14c:	462b      	mov	r3, r5
 800d14e:	4632      	mov	r2, r6
 800d150:	4621      	mov	r1, r4
 800d152:	4638      	mov	r0, r7
 800d154:	f7ff fc27 	bl	800c9a6 <draw_line_hor>
 800d158:	e7ef      	b.n	800d13a <lv_draw_sw_line+0xca>
    else if(point1->x == point2->x) draw_line_ver(draw_ctx, dsc, point1, point2);
 800d15a:	462b      	mov	r3, r5
 800d15c:	4632      	mov	r2, r6
 800d15e:	4621      	mov	r1, r4
 800d160:	4638      	mov	r0, r7
 800d162:	f7ff fcee 	bl	800cb42 <draw_line_ver>
 800d166:	e7e8      	b.n	800d13a <lv_draw_sw_line+0xca>
        lv_draw_rect_dsc_init(&cir_dsc);
 800d168:	a802      	add	r0, sp, #8
 800d16a:	f7fc fd71 	bl	8009c50 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
 800d16e:	8823      	ldrh	r3, [r4, #0]
 800d170:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
 800d174:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800d178:	f8ad 3008 	strh.w	r3, [sp, #8]
        cir_dsc.bg_opa = dsc->opa;
 800d17c:	7a23      	ldrb	r3, [r4, #8]
 800d17e:	f88d 300b 	strb.w	r3, [sp, #11]
        int32_t r = (dsc->width >> 1);
 800d182:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
 800d186:	ea4f 0a68 	mov.w	sl, r8, asr #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
 800d18a:	f088 0801 	eor.w	r8, r8, #1
 800d18e:	f008 0801 	and.w	r8, r8, #1
        if(dsc->round_start) {
 800d192:	7a63      	ldrb	r3, [r4, #9]
 800d194:	f013 0f04 	tst.w	r3, #4
 800d198:	d122      	bne.n	800d1e0 <lv_draw_sw_line+0x170>
        if(dsc->round_end) {
 800d19a:	7a63      	ldrb	r3, [r4, #9]
 800d19c:	f013 0f08 	tst.w	r3, #8
 800d1a0:	d0cf      	beq.n	800d142 <lv_draw_sw_line+0xd2>
            cir_area.x1 = point2->x - r;
 800d1a2:	882b      	ldrh	r3, [r5, #0]
 800d1a4:	fa1f fa8a 	uxth.w	sl, sl
 800d1a8:	eba3 020a 	sub.w	r2, r3, sl
 800d1ac:	f8ad 2000 	strh.w	r2, [sp]
            cir_area.y1 = point2->y - r;
 800d1b0:	886a      	ldrh	r2, [r5, #2]
 800d1b2:	eba2 010a 	sub.w	r1, r2, sl
 800d1b6:	f8ad 1002 	strh.w	r1, [sp, #2]
            cir_area.x2 = point2->x + r - r_corr;
 800d1ba:	4453      	add	r3, sl
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	eba3 0308 	sub.w	r3, r3, r8
 800d1c2:	f8ad 3004 	strh.w	r3, [sp, #4]
            cir_area.y2 = point2->y + r - r_corr ;
 800d1c6:	4492      	add	sl, r2
 800d1c8:	fa1f f38a 	uxth.w	r3, sl
 800d1cc:	eba3 0308 	sub.w	r3, r3, r8
 800d1d0:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800d1d4:	466a      	mov	r2, sp
 800d1d6:	a902      	add	r1, sp, #8
 800d1d8:	4638      	mov	r0, r7
 800d1da:	f7fc fd7b 	bl	8009cd4 <lv_draw_rect>
 800d1de:	e7b0      	b.n	800d142 <lv_draw_sw_line+0xd2>
            cir_area.x1 = point1->x - r;
 800d1e0:	8832      	ldrh	r2, [r6, #0]
 800d1e2:	fa1f f38a 	uxth.w	r3, sl
 800d1e6:	1ad1      	subs	r1, r2, r3
 800d1e8:	f8ad 1000 	strh.w	r1, [sp]
            cir_area.y1 = point1->y - r;
 800d1ec:	8871      	ldrh	r1, [r6, #2]
 800d1ee:	1ac8      	subs	r0, r1, r3
 800d1f0:	f8ad 0002 	strh.w	r0, [sp, #2]
            cir_area.x2 = point1->x + r - r_corr;
 800d1f4:	441a      	add	r2, r3
 800d1f6:	b292      	uxth	r2, r2
 800d1f8:	eba2 0208 	sub.w	r2, r2, r8
 800d1fc:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y2 = point1->y + r - r_corr ;
 800d200:	440b      	add	r3, r1
 800d202:	b29b      	uxth	r3, r3
 800d204:	eba3 0308 	sub.w	r3, r3, r8
 800d208:	f8ad 3006 	strh.w	r3, [sp, #6]
            lv_draw_rect(draw_ctx, &cir_dsc, &cir_area);
 800d20c:	466a      	mov	r2, sp
 800d20e:	a902      	add	r1, sp, #8
 800d210:	4638      	mov	r0, r7
 800d212:	f7fc fd5f 	bl	8009cd4 <lv_draw_rect>
 800d216:	e7c0      	b.n	800d19a <lv_draw_sw_line+0x12a>

0800d218 <lv_draw_sw_polygon>:
 * @param clip_area polygon will be drawn only in this area
 * @param draw_dsc pointer to an initialized `lv_draw_rect_dsc_t` variable
 */
void lv_draw_sw_polygon(lv_draw_ctx_t * draw_ctx, const lv_draw_rect_dsc_t * draw_dsc, const lv_point_t * points,
                        uint16_t point_cnt)
{
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	b08d      	sub	sp, #52	@ 0x34
 800d21e:	9105      	str	r1, [sp, #20]
#if LV_DRAW_COMPLEX
    if(point_cnt < 3) return;
 800d220:	2b02      	cmp	r3, #2
 800d222:	f240 8154 	bls.w	800d4ce <lv_draw_sw_polygon+0x2b6>
 800d226:	4605      	mov	r5, r0
 800d228:	4617      	mov	r7, r2
 800d22a:	4698      	mov	r8, r3
    if(points == NULL) return;
 800d22c:	2a00      	cmp	r2, #0
 800d22e:	f000 814e 	beq.w	800d4ce <lv_draw_sw_polygon+0x2b6>

    /*Join adjacent points if they are on the same coordinate*/
    lv_point_t * p = lv_mem_buf_get(point_cnt * sizeof(lv_point_t));
 800d232:	0098      	lsls	r0, r3, #2
 800d234:	f009 fbc2 	bl	80169bc <lv_mem_buf_get>
    if(p == NULL) return;
 800d238:	4604      	mov	r4, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	f000 8147 	beq.w	800d4ce <lv_draw_sw_polygon+0x2b6>
    uint16_t i;
    uint16_t pcnt = 0;
    p[0] = points[0];
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	6003      	str	r3, [r0, #0]
    uint16_t pcnt = 0;
 800d244:	2600      	movs	r6, #0
    for(i = 0; i < point_cnt - 1; i++) {
 800d246:	4631      	mov	r1, r6
 800d248:	e006      	b.n	800d258 <lv_draw_sw_polygon+0x40>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
            p[pcnt] = points[i];
 800d24a:	583b      	ldr	r3, [r7, r0]
 800d24c:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
            pcnt++;
 800d250:	3601      	adds	r6, #1
 800d252:	b2b6      	uxth	r6, r6
    for(i = 0; i < point_cnt - 1; i++) {
 800d254:	3101      	adds	r1, #1
 800d256:	b289      	uxth	r1, r1
 800d258:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800d25c:	4299      	cmp	r1, r3
 800d25e:	da12      	bge.n	800d286 <lv_draw_sw_polygon+0x6e>
        if(points[i].x != points[i + 1].x || points[i].y != points[i + 1].y) {
 800d260:	0088      	lsls	r0, r1, #2
 800d262:	eb07 0e81 	add.w	lr, r7, r1, lsl #2
 800d266:	f937 2021 	ldrsh.w	r2, [r7, r1, lsl #2]
 800d26a:	1c4b      	adds	r3, r1, #1
 800d26c:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
 800d270:	f937 3023 	ldrsh.w	r3, [r7, r3, lsl #2]
 800d274:	429a      	cmp	r2, r3
 800d276:	d1e8      	bne.n	800d24a <lv_draw_sw_polygon+0x32>
 800d278:	f9be 2002 	ldrsh.w	r2, [lr, #2]
 800d27c:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 800d280:	429a      	cmp	r2, r3
 800d282:	d1e2      	bne.n	800d24a <lv_draw_sw_polygon+0x32>
 800d284:	e7e6      	b.n	800d254 <lv_draw_sw_polygon+0x3c>
        }
    }
    /*The first and the last points are also adjacent*/
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800d286:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d28a:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 800d28e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d292:	eb07 0188 	add.w	r1, r7, r8, lsl #2
 800d296:	f937 3028 	ldrsh.w	r3, [r7, r8, lsl #2]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d00f      	beq.n	800d2be <lv_draw_sw_polygon+0xa6>
        p[pcnt] = points[point_cnt - 1];
 800d29e:	f857 3028 	ldr.w	r3, [r7, r8, lsl #2]
 800d2a2:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
        pcnt++;
 800d2a6:	3601      	adds	r6, #1
 800d2a8:	b2b6      	uxth	r6, r6
    }

    point_cnt = pcnt;
    if(point_cnt < 3) {
 800d2aa:	2e02      	cmp	r6, #2
 800d2ac:	d90e      	bls.n	800d2cc <lv_draw_sw_polygon+0xb4>
        lv_mem_buf_release(p);
        return;
    }

    lv_area_t poly_coords = {.x1 = LV_COORD_MAX, .y1 = LV_COORD_MAX, .x2 = LV_COORD_MIN, .y2 = LV_COORD_MIN};
 800d2ae:	4b89      	ldr	r3, [pc, #548]	@ (800d4d4 <lv_draw_sw_polygon+0x2bc>)
 800d2b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d2b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d2b6:	e903 0003 	stmdb	r3, {r0, r1}

    for(i = 0; i < point_cnt; i++) {
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	e032      	b.n	800d324 <lv_draw_sw_polygon+0x10c>
    if(points[0].x != points[point_cnt - 1].x || points[0].y != points[point_cnt - 1].y) {
 800d2be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d2c2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d1e9      	bne.n	800d29e <lv_draw_sw_polygon+0x86>
 800d2ca:	e7ee      	b.n	800d2aa <lv_draw_sw_polygon+0x92>
        lv_mem_buf_release(p);
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f009 fbd7 	bl	8016a80 <lv_mem_buf_release>
        return;
 800d2d2:	e0fc      	b.n	800d4ce <lv_draw_sw_polygon+0x2b6>
        poly_coords.x1 = LV_MIN(poly_coords.x1, p[i].x);
 800d2d4:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800d2d8:	f934 3022 	ldrsh.w	r3, [r4, r2, lsl #2]
 800d2dc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d2e0:	4283      	cmp	r3, r0
 800d2e2:	bfa8      	it	ge
 800d2e4:	4603      	movge	r3, r0
 800d2e6:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        poly_coords.y1 = LV_MIN(poly_coords.y1, p[i].y);
 800d2ea:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d2ee:	f9bd 002a 	ldrsh.w	r0, [sp, #42]	@ 0x2a
 800d2f2:	4283      	cmp	r3, r0
 800d2f4:	bfa8      	it	ge
 800d2f6:	4603      	movge	r3, r0
 800d2f8:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
        poly_coords.x2 = LV_MAX(poly_coords.x2, p[i].x);
 800d2fc:	f934 3022 	ldrsh.w	r3, [r4, r2, lsl #2]
 800d300:	f9bd 002c 	ldrsh.w	r0, [sp, #44]	@ 0x2c
 800d304:	4283      	cmp	r3, r0
 800d306:	bfb8      	it	lt
 800d308:	4603      	movlt	r3, r0
 800d30a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
        poly_coords.y2 = LV_MAX(poly_coords.y2, p[i].y);
 800d30e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800d312:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	@ 0x2e
 800d316:	428b      	cmp	r3, r1
 800d318:	bfb8      	it	lt
 800d31a:	460b      	movlt	r3, r1
 800d31c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
    for(i = 0; i < point_cnt; i++) {
 800d320:	3201      	adds	r2, #1
 800d322:	b292      	uxth	r2, r2
 800d324:	42b2      	cmp	r2, r6
 800d326:	d3d5      	bcc.n	800d2d4 <lv_draw_sw_polygon+0xbc>
    }

    bool is_common;
    lv_area_t clip_area;
    is_common = _lv_area_intersect(&clip_area, &poly_coords, draw_ctx->clip_area);
 800d328:	68aa      	ldr	r2, [r5, #8]
 800d32a:	a90a      	add	r1, sp, #40	@ 0x28
 800d32c:	a808      	add	r0, sp, #32
 800d32e:	f7f4 fb61 	bl	80019f4 <_lv_area_intersect>
    if(!is_common) {
 800d332:	9003      	str	r0, [sp, #12]
 800d334:	b148      	cbz	r0, 800d34a <lv_draw_sw_polygon+0x132>
        lv_mem_buf_release(p);
        return;
    }

    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800d336:	68ab      	ldr	r3, [r5, #8]
 800d338:	9306      	str	r3, [sp, #24]
    draw_ctx->clip_area = &clip_area;
 800d33a:	ab08      	add	r3, sp, #32
 800d33c:	60ab      	str	r3, [r5, #8]

    /*Find the lowest point*/
    lv_coord_t y_min = p[0].y;
 800d33e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
    int16_t y_min_i = 0;
 800d342:	f04f 0800 	mov.w	r8, #0

    for(i = 1; i < point_cnt; i++) {
 800d346:	2301      	movs	r3, #1
 800d348:	e005      	b.n	800d356 <lv_draw_sw_polygon+0x13e>
        lv_mem_buf_release(p);
 800d34a:	4620      	mov	r0, r4
 800d34c:	f009 fb98 	bl	8016a80 <lv_mem_buf_release>
        return;
 800d350:	e0bd      	b.n	800d4ce <lv_draw_sw_polygon+0x2b6>
    for(i = 1; i < point_cnt; i++) {
 800d352:	3301      	adds	r3, #1
 800d354:	b29b      	uxth	r3, r3
 800d356:	42b3      	cmp	r3, r6
 800d358:	d209      	bcs.n	800d36e <lv_draw_sw_polygon+0x156>
        if(p[i].y < y_min) {
 800d35a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d35e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800d362:	428a      	cmp	r2, r1
 800d364:	daf5      	bge.n	800d352 <lv_draw_sw_polygon+0x13a>
            y_min = p[i].y;
            y_min_i = i;
 800d366:	fa0f f883 	sxth.w	r8, r3
            y_min = p[i].y;
 800d36a:	4611      	mov	r1, r2
 800d36c:	e7f1      	b.n	800d352 <lv_draw_sw_polygon+0x13a>
        }
    }

    lv_draw_mask_line_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_line_param_t) * point_cnt);
 800d36e:	46b2      	mov	sl, r6
 800d370:	202c      	movs	r0, #44	@ 0x2c
 800d372:	fb06 f000 	mul.w	r0, r6, r0
 800d376:	f009 fb21 	bl	80169bc <lv_mem_buf_get>
 800d37a:	9004      	str	r0, [sp, #16]
    lv_draw_mask_line_param_t * mp_next = mp;

    int32_t i_prev_left = y_min_i;
 800d37c:	4647      	mov	r7, r8
    int32_t i_next_right;
    uint32_t mask_cnt = 0;

    /*Get the index of the left and right points*/
    i_next_left = y_min_i - 1;
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800d37e:	f1b8 0101 	subs.w	r1, r8, #1
 800d382:	d42d      	bmi.n	800d3e0 <lv_draw_sw_polygon+0x1c8>

    i_next_right = y_min_i + 1;
 800d384:	1c7b      	adds	r3, r7, #1
    if(i_next_right > point_cnt - 1) i_next_right = 0;
 800d386:	46b3      	mov	fp, r6
 800d388:	429e      	cmp	r6, r3
 800d38a:	dc00      	bgt.n	800d38e <lv_draw_sw_polygon+0x176>
 800d38c:	2300      	movs	r3, #0
     * Explanation:
     *   if angle(p_left) < angle(p_right) -> inverted
     *   dy_left/dx_left < dy_right/dx_right
     *   dy_left * dx_right < dy_right * dx_left
     */
    lv_coord_t dxl = p[i_next_left].x - p[y_min_i].x;
 800d38e:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 800d392:	f834 1021 	ldrh.w	r1, [r4, r1, lsl #2]
 800d396:	eb04 0688 	add.w	r6, r4, r8, lsl #2
 800d39a:	f834 e028 	ldrh.w	lr, [r4, r8, lsl #2]
 800d39e:	eba1 010e 	sub.w	r1, r1, lr
 800d3a2:	b209      	sxth	r1, r1
    lv_coord_t dxr = p[i_next_right].x - p[y_min_i].x;
 800d3a4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 800d3a8:	f834 0023 	ldrh.w	r0, [r4, r3, lsl #2]
 800d3ac:	eba0 000e 	sub.w	r0, r0, lr
 800d3b0:	b200      	sxth	r0, r0
    lv_coord_t dyl = p[i_next_left].y - p[y_min_i].y;
 800d3b2:	8852      	ldrh	r2, [r2, #2]
 800d3b4:	8876      	ldrh	r6, [r6, #2]
 800d3b6:	1b92      	subs	r2, r2, r6
 800d3b8:	b212      	sxth	r2, r2
    lv_coord_t dyr = p[i_next_right].y - p[y_min_i].y;
 800d3ba:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800d3be:	1b9b      	subs	r3, r3, r6
 800d3c0:	b21b      	sxth	r3, r3

    bool inv = false;
    if(dyl * dxr < dyr * dxl) inv = true;
 800d3c2:	fb00 f202 	mul.w	r2, r0, r2
 800d3c6:	fb01 f303 	mul.w	r3, r1, r3
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	db01      	blt.n	800d3d2 <lv_draw_sw_polygon+0x1ba>
    bool inv = false;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	46b9      	mov	r9, r7
 800d3d4:	9b04      	ldr	r3, [sp, #16]
 800d3d6:	469e      	mov	lr, r3
 800d3d8:	f04f 0800 	mov.w	r8, #0
 800d3dc:	9507      	str	r5, [sp, #28]
 800d3de:	e039      	b.n	800d454 <lv_draw_sw_polygon+0x23c>
    if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800d3e0:	4431      	add	r1, r6
 800d3e2:	e7cf      	b.n	800d384 <lv_draw_sw_polygon+0x16c>

    do {
        if(!inv) {
            i_next_left = i_prev_left - 1;
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800d3e4:	445d      	add	r5, fp
 800d3e6:	e03a      	b.n	800d45e <lv_draw_sw_polygon+0x246>

            i_next_right = i_prev_right + 1;
            if(i_next_right > point_cnt - 1) i_next_right = 0;
        }
        else {
            i_next_left = i_prev_left + 1;
 800d3e8:	1c7d      	adds	r5, r7, #1
            if(i_next_left > point_cnt - 1) i_next_left = 0;
 800d3ea:	45ab      	cmp	fp, r5
 800d3ec:	dc00      	bgt.n	800d3f0 <lv_draw_sw_polygon+0x1d8>
 800d3ee:	2500      	movs	r5, #0

            i_next_right = i_prev_right - 1;
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800d3f0:	f1b9 0601 	subs.w	r6, r9, #1
 800d3f4:	d439      	bmi.n	800d46a <lv_draw_sw_polygon+0x252>
        }

        if(p[i_next_left].y >= p[i_prev_left].y) {
 800d3f6:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800d3fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d3fe:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800d402:	00b9      	lsls	r1, r7, #2
 800d404:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 800d408:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d40c:	4290      	cmp	r0, r2
 800d40e:	db08      	blt.n	800d422 <lv_draw_sw_polygon+0x20a>
            if(p[i_next_left].y != p[i_prev_left].y &&
 800d410:	d004      	beq.n	800d41c <lv_draw_sw_polygon+0x204>
               p[i_next_left].x != p[i_prev_left].x) {
 800d412:	f934 300c 	ldrsh.w	r3, [r4, ip]
 800d416:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_left].y != p[i_prev_left].y &&
 800d418:	428b      	cmp	r3, r1
 800d41a:	d128      	bne.n	800d46e <lv_draw_sw_polygon+0x256>
                                              p[i_next_left].x, p[i_next_left].y,
                                              LV_DRAW_MASK_LINE_SIDE_RIGHT);
                lv_draw_mask_add(mp_next, mp);
                mp_next++;
            }
            mask_cnt++;
 800d41c:	f108 0801 	add.w	r8, r8, #1
            i_prev_left = i_next_left;
 800d420:	462f      	mov	r7, r5
        }

        if(mask_cnt == point_cnt) break;
 800d422:	45c2      	cmp	sl, r8
 800d424:	d041      	beq.n	800d4aa <lv_draw_sw_polygon+0x292>

        if(p[i_next_right].y >= p[i_prev_right].y) {
 800d426:	00b5      	lsls	r5, r6, #2
 800d428:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d42c:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 800d430:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800d434:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 800d438:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d43c:	4290      	cmp	r0, r2
 800d43e:	db07      	blt.n	800d450 <lv_draw_sw_polygon+0x238>
            if(p[i_next_right].y != p[i_prev_right].y &&
 800d440:	d003      	beq.n	800d44a <lv_draw_sw_polygon+0x232>
               p[i_next_right].x != p[i_prev_right].x) {
 800d442:	5f63      	ldrsh	r3, [r4, r5]
 800d444:	5e61      	ldrsh	r1, [r4, r1]
            if(p[i_next_right].y != p[i_prev_right].y &&
 800d446:	428b      	cmp	r3, r1
 800d448:	d120      	bne.n	800d48c <lv_draw_sw_polygon+0x274>
                                              p[i_next_right].x, p[i_next_right].y,
                                              LV_DRAW_MASK_LINE_SIDE_LEFT);
                lv_draw_mask_add(mp_next, mp);
                mp_next++;
            }
            mask_cnt++;
 800d44a:	f108 0801 	add.w	r8, r8, #1
            i_prev_right = i_next_right;
 800d44e:	46b1      	mov	r9, r6
        }

    } while(mask_cnt < point_cnt);
 800d450:	45c2      	cmp	sl, r8
 800d452:	d92a      	bls.n	800d4aa <lv_draw_sw_polygon+0x292>
        if(!inv) {
 800d454:	9b03      	ldr	r3, [sp, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d1c6      	bne.n	800d3e8 <lv_draw_sw_polygon+0x1d0>
            if(i_next_left < 0) i_next_left = point_cnt + i_next_left;
 800d45a:	1e7d      	subs	r5, r7, #1
 800d45c:	d4c2      	bmi.n	800d3e4 <lv_draw_sw_polygon+0x1cc>
            i_next_right = i_prev_right + 1;
 800d45e:	f109 0601 	add.w	r6, r9, #1
            if(i_next_right > point_cnt - 1) i_next_right = 0;
 800d462:	45b3      	cmp	fp, r6
 800d464:	dcc7      	bgt.n	800d3f6 <lv_draw_sw_polygon+0x1de>
 800d466:	2600      	movs	r6, #0
 800d468:	e7c5      	b.n	800d3f6 <lv_draw_sw_polygon+0x1de>
            if(i_next_right < 0) i_next_right = point_cnt + i_next_right;
 800d46a:	445e      	add	r6, fp
 800d46c:	e7c3      	b.n	800d3f6 <lv_draw_sw_polygon+0x1de>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_left].x, p[i_prev_left].y,
 800d46e:	2701      	movs	r7, #1
 800d470:	9701      	str	r7, [sp, #4]
 800d472:	9000      	str	r0, [sp, #0]
 800d474:	4677      	mov	r7, lr
 800d476:	4670      	mov	r0, lr
 800d478:	f7fc f9f8 	bl	800986c <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800d47c:	9904      	ldr	r1, [sp, #16]
 800d47e:	4638      	mov	r0, r7
 800d480:	f7fc f914 	bl	80096ac <lv_draw_mask_add>
                mp_next++;
 800d484:	463b      	mov	r3, r7
 800d486:	332c      	adds	r3, #44	@ 0x2c
 800d488:	469e      	mov	lr, r3
 800d48a:	e7c7      	b.n	800d41c <lv_draw_sw_polygon+0x204>
                lv_draw_mask_line_points_init(mp_next, p[i_prev_right].x, p[i_prev_right].y,
 800d48c:	2500      	movs	r5, #0
 800d48e:	9501      	str	r5, [sp, #4]
 800d490:	9000      	str	r0, [sp, #0]
 800d492:	4675      	mov	r5, lr
 800d494:	4670      	mov	r0, lr
 800d496:	f7fc f9e9 	bl	800986c <lv_draw_mask_line_points_init>
                lv_draw_mask_add(mp_next, mp);
 800d49a:	9904      	ldr	r1, [sp, #16]
 800d49c:	4628      	mov	r0, r5
 800d49e:	f7fc f905 	bl	80096ac <lv_draw_mask_add>
                mp_next++;
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	332c      	adds	r3, #44	@ 0x2c
 800d4a6:	469e      	mov	lr, r3
 800d4a8:	e7cf      	b.n	800d44a <lv_draw_sw_polygon+0x232>

    lv_draw_rect(draw_ctx, draw_dsc, &poly_coords);
 800d4aa:	9d07      	ldr	r5, [sp, #28]
 800d4ac:	aa0a      	add	r2, sp, #40	@ 0x28
 800d4ae:	9905      	ldr	r1, [sp, #20]
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f7fc fc0f 	bl	8009cd4 <lv_draw_rect>

    lv_draw_mask_remove_custom(mp);
 800d4b6:	9e04      	ldr	r6, [sp, #16]
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f7fc f94d 	bl	8009758 <lv_draw_mask_remove_custom>

    lv_mem_buf_release(mp);
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f009 fade 	bl	8016a80 <lv_mem_buf_release>
    lv_mem_buf_release(p);
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f009 fadb 	bl	8016a80 <lv_mem_buf_release>

    draw_ctx->clip_area = clip_area_ori;
 800d4ca:	9b06      	ldr	r3, [sp, #24]
 800d4cc:	60ab      	str	r3, [r5, #8]
    LV_UNUSED(point_cnt);
    LV_UNUSED(draw_ctx);
    LV_UNUSED(draw_dsc);
    LV_LOG_WARN("Can't draw polygon with LV_DRAW_COMPLEX == 0");
#endif /*LV_DRAW_COMPLEX*/
}
 800d4ce:	b00d      	add	sp, #52	@ 0x34
 800d4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d4:	080298bc 	.word	0x080298bc

0800d4d8 <draw_border_simple>:

#endif /*LV_DRAW_COMPLEX*/
}
static void draw_border_simple(lv_draw_ctx_t * draw_ctx, const lv_area_t * outer_area, const lv_area_t * inner_area,
                               lv_color_t color, lv_opa_t opa)
{
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	b08f      	sub	sp, #60	@ 0x3c
 800d4de:	9001      	str	r0, [sp, #4]
 800d4e0:	460d      	mov	r5, r1
 800d4e2:	4614      	mov	r4, r2
 800d4e4:	461e      	mov	r6, r3
    lv_area_t a;
    lv_draw_sw_blend_dsc_t blend_dsc;
    lv_memset_00(&blend_dsc, sizeof(lv_draw_sw_blend_dsc_t));
 800d4e6:	211c      	movs	r1, #28
 800d4e8:	a805      	add	r0, sp, #20
 800d4ea:	f009 fbeb 	bl	8016cc4 <lv_memset_00>
    blend_dsc.blend_area = &a;
 800d4ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800d4f0:	9305      	str	r3, [sp, #20]
    blend_dsc.color = color;
 800d4f2:	f8ad 601c 	strh.w	r6, [sp, #28]
    blend_dsc.opa = opa;
 800d4f6:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800d4fa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c

    bool top_side = outer_area->y1 <= inner_area->y1 ? true : false;
 800d4fe:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800d502:	f9b4 b002 	ldrsh.w	fp, [r4, #2]
    bool bottom_side = outer_area->y2 >= inner_area->y2 ? true : false;
 800d506:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d50a:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
    bool left_side = outer_area->x1 <= inner_area->x1 ? true : false;
 800d50e:	f9b5 8000 	ldrsh.w	r8, [r5]
 800d512:	f9b4 3000 	ldrsh.w	r3, [r4]
 800d516:	9302      	str	r3, [sp, #8]
    bool right_side = outer_area->x2 >= inner_area->x2 ? true : false;
 800d518:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 800d51c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d520:	9303      	str	r3, [sp, #12]


    /*Top*/
    a.x1 = outer_area->x1;
 800d522:	f8ad 8030 	strh.w	r8, [sp, #48]	@ 0x30
    a.x2 = outer_area->x2;
 800d526:	f8ad 7034 	strh.w	r7, [sp, #52]	@ 0x34
    a.y1 = outer_area->y1;
 800d52a:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
    a.y2 = inner_area->y1 - 1;
 800d52e:	8863      	ldrh	r3, [r4, #2]
 800d530:	3b01      	subs	r3, #1
 800d532:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    if(top_side) {
 800d536:	455e      	cmp	r6, fp
 800d538:	dd2e      	ble.n	800d598 <draw_border_simple+0xc0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Bottom*/
    a.y1 = inner_area->y2 + 1;
 800d53a:	88e3      	ldrh	r3, [r4, #6]
 800d53c:	3301      	adds	r3, #1
 800d53e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
    a.y2 = outer_area->y2;
 800d542:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d546:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    if(bottom_side) {
 800d54a:	45ca      	cmp	sl, r9
 800d54c:	da29      	bge.n	800d5a2 <draw_border_simple+0xca>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Left*/
    a.x1 = outer_area->x1;
 800d54e:	f9b5 3000 	ldrsh.w	r3, [r5]
 800d552:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
    a.x2 = inner_area->x1 - 1;
 800d556:	8823      	ldrh	r3, [r4, #0]
 800d558:	3b01      	subs	r3, #1
 800d55a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800d55e:	455e      	cmp	r6, fp
 800d560:	dc24      	bgt.n	800d5ac <draw_border_simple+0xd4>
 800d562:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d566:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800d56a:	45ca      	cmp	sl, r9
 800d56c:	db21      	blt.n	800d5b2 <draw_border_simple+0xda>
 800d56e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d572:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    if(left_side) {
 800d576:	9b02      	ldr	r3, [sp, #8]
 800d578:	4598      	cmp	r8, r3
 800d57a:	dd1d      	ble.n	800d5b8 <draw_border_simple+0xe0>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }

    /*Right*/
    a.x1 = inner_area->x2 + 1;
 800d57c:	88a3      	ldrh	r3, [r4, #4]
 800d57e:	3301      	adds	r3, #1
 800d580:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
    a.x2 = outer_area->x2;
 800d584:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800d588:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    if(right_side) {
 800d58c:	9b03      	ldr	r3, [sp, #12]
 800d58e:	429f      	cmp	r7, r3
 800d590:	da17      	bge.n	800d5c2 <draw_border_simple+0xea>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
    }
}
 800d592:	b00f      	add	sp, #60	@ 0x3c
 800d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d598:	a905      	add	r1, sp, #20
 800d59a:	9801      	ldr	r0, [sp, #4]
 800d59c:	f7fe f89c 	bl	800b6d8 <lv_draw_sw_blend>
 800d5a0:	e7cb      	b.n	800d53a <draw_border_simple+0x62>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d5a2:	a905      	add	r1, sp, #20
 800d5a4:	9801      	ldr	r0, [sp, #4]
 800d5a6:	f7fe f897 	bl	800b6d8 <lv_draw_sw_blend>
 800d5aa:	e7d0      	b.n	800d54e <draw_border_simple+0x76>
    a.y1 = (top_side) ? inner_area->y1 : outer_area->y1;
 800d5ac:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800d5b0:	e7d9      	b.n	800d566 <draw_border_simple+0x8e>
    a.y2 = (bottom_side) ? inner_area->y2 : outer_area->y2;
 800d5b2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d5b6:	e7dc      	b.n	800d572 <draw_border_simple+0x9a>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d5b8:	a905      	add	r1, sp, #20
 800d5ba:	9801      	ldr	r0, [sp, #4]
 800d5bc:	f7fe f88c 	bl	800b6d8 <lv_draw_sw_blend>
 800d5c0:	e7dc      	b.n	800d57c <draw_border_simple+0xa4>
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800d5c2:	a905      	add	r1, sp, #20
 800d5c4:	9801      	ldr	r0, [sp, #4]
 800d5c6:	f7fe f887 	bl	800b6d8 <lv_draw_sw_blend>
}
 800d5ca:	e7e2      	b.n	800d592 <draw_border_simple+0xba>

0800d5cc <shadow_blur_corner>:
{
 800d5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	4604      	mov	r4, r0
 800d5d4:	9101      	str	r1, [sp, #4]
 800d5d6:	4617      	mov	r7, r2
    int32_t s_left = sw >> 1;
 800d5d8:	ea4f 0861 	mov.w	r8, r1, asr #1
    if((sw & 1) == 0) s_left--;
 800d5dc:	f011 0f01 	tst.w	r1, #1
 800d5e0:	d102      	bne.n	800d5e8 <shadow_blur_corner+0x1c>
 800d5e2:	f108 39ff 	add.w	r9, r8, #4294967295	@ 0xffffffff
 800d5e6:	e000      	b.n	800d5ea <shadow_blur_corner+0x1e>
    int32_t s_left = sw >> 1;
 800d5e8:	46c1      	mov	r9, r8
    uint16_t * sh_ups_blur_buf = lv_mem_buf_get(size * sizeof(uint16_t));
 800d5ea:	0066      	lsls	r6, r4, #1
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f009 f9e5 	bl	80169bc <lv_mem_buf_get>
 800d5f2:	4605      	mov	r5, r0
    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
 800d5f4:	46ba      	mov	sl, r7
    for(y = 0; y < size; y++) {
 800d5f6:	f04f 0b00 	mov.w	fp, #0
 800d5fa:	e022      	b.n	800d642 <shadow_blur_corner+0x76>
            uint32_t right_val = 0;
 800d5fc:	2100      	movs	r1, #0
            v -= right_val;
 800d5fe:	1a52      	subs	r2, r2, r1
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800d600:	eba3 0109 	sub.w	r1, r3, r9
 800d604:	2900      	cmp	r1, #0
 800d606:	dd11      	ble.n	800d62c <shadow_blur_corner+0x60>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
 800d608:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800d60c:	3901      	subs	r1, #1
 800d60e:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
            v += left_val;
 800d612:	440a      	add	r2, r1
        for(x = size - 1; x >= 0; x--) {
 800d614:	3b01      	subs	r3, #1
 800d616:	2b00      	cmp	r3, #0
 800d618:	db0b      	blt.n	800d632 <shadow_blur_corner+0x66>
            sh_ups_blur_buf[x] = v;
 800d61a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
 800d61e:	eb03 0108 	add.w	r1, r3, r8
 800d622:	42a1      	cmp	r1, r4
 800d624:	daea      	bge.n	800d5fc <shadow_blur_corner+0x30>
 800d626:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
 800d62a:	e7e8      	b.n	800d5fe <shadow_blur_corner+0x32>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
 800d62c:	f8ba 1000 	ldrh.w	r1, [sl]
 800d630:	e7ef      	b.n	800d612 <shadow_blur_corner+0x46>
        lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
 800d632:	4632      	mov	r2, r6
 800d634:	4629      	mov	r1, r5
 800d636:	4650      	mov	r0, sl
 800d638:	f009 fa56 	bl	8016ae8 <lv_memcpy>
        sh_ups_tmp_buf += size;
 800d63c:	44b2      	add	sl, r6
    for(y = 0; y < size; y++) {
 800d63e:	f10b 0b01 	add.w	fp, fp, #1
 800d642:	455c      	cmp	r4, fp
 800d644:	dd09      	ble.n	800d65a <shadow_blur_corner+0x8e>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
 800d646:	f104 4300 	add.w	r3, r4, #2147483648	@ 0x80000000
 800d64a:	3b01      	subs	r3, #1
 800d64c:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 800d650:	9b01      	ldr	r3, [sp, #4]
 800d652:	fb03 f202 	mul.w	r2, r3, r2
        for(x = size - 1; x >= 0; x--) {
 800d656:	1e63      	subs	r3, r4, #1
 800d658:	e7dd      	b.n	800d616 <shadow_blur_corner+0x4a>
    uint32_t max_v_div = max_v / sw;
 800d65a:	f44f 507f 	mov.w	r0, #16320	@ 0x3fc0
 800d65e:	9b01      	ldr	r3, [sp, #4]
 800d660:	fbb0 fcf3 	udiv	ip, r0, r3
    for(i = 0; i < (uint32_t)size * size; i++) {
 800d664:	2300      	movs	r3, #0
 800d666:	e002      	b.n	800d66e <shadow_blur_corner+0xa2>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800d668:	f827 c001 	strh.w	ip, [r7, r1]
    for(i = 0; i < (uint32_t)size * size; i++) {
 800d66c:	3301      	adds	r3, #1
 800d66e:	fb04 f204 	mul.w	r2, r4, r4
 800d672:	429a      	cmp	r2, r3
 800d674:	d90c      	bls.n	800d690 <shadow_blur_corner+0xc4>
        if(sh_ups_buf[i] == 0) continue;
 800d676:	0059      	lsls	r1, r3, #1
 800d678:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	d0f5      	beq.n	800d66c <shadow_blur_corner+0xa0>
        else if(sh_ups_buf[i] == max_v) sh_ups_buf[i] = max_v_div;
 800d680:	f5b2 5f7f 	cmp.w	r2, #16320	@ 0x3fc0
 800d684:	d0f0      	beq.n	800d668 <shadow_blur_corner+0x9c>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
 800d686:	9801      	ldr	r0, [sp, #4]
 800d688:	fb92 f2f0 	sdiv	r2, r2, r0
 800d68c:	527a      	strh	r2, [r7, r1]
 800d68e:	e7ed      	b.n	800d66c <shadow_blur_corner+0xa0>
    for(x = 0; x < size; x++) {
 800d690:	f04f 0c00 	mov.w	ip, #0
 800d694:	e035      	b.n	800d702 <shadow_blur_corner+0x136>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800d696:	f04f 0e00 	mov.w	lr, #0
 800d69a:	e010      	b.n	800d6be <shadow_blur_corner+0xf2>
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800d69c:	f8b0 e000 	ldrh.w	lr, [r0]
 800d6a0:	e018      	b.n	800d6d4 <shadow_blur_corner+0x108>
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
 800d6a2:	1e62      	subs	r2, r4, #1
 800d6a4:	fb02 c204 	mla	r2, r2, r4, ip
 800d6a8:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
            v += bottom_val;
 800d6ac:	4472      	add	r2, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	4430      	add	r0, r6
 800d6b2:	429c      	cmp	r4, r3
 800d6b4:	dd1a      	ble.n	800d6ec <shadow_blur_corner+0x120>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
 800d6b6:	2a00      	cmp	r2, #0
 800d6b8:	dbed      	blt.n	800d696 <shadow_blur_corner+0xca>
 800d6ba:	f3c2 1e8f 	ubfx	lr, r2, #6, #16
 800d6be:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
 800d6c2:	eba3 0e08 	sub.w	lr, r3, r8
 800d6c6:	f1be 0f00 	cmp.w	lr, #0
 800d6ca:	dde7      	ble.n	800d69c <shadow_blur_corner+0xd0>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
 800d6cc:	fb0e ce04 	mla	lr, lr, r4, ip
 800d6d0:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
            v -= top_val;
 800d6d4:	eba2 0e0e 	sub.w	lr, r2, lr
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
 800d6d8:	eb09 0203 	add.w	r2, r9, r3
 800d6dc:	3201      	adds	r2, #1
 800d6de:	4294      	cmp	r4, r2
 800d6e0:	dddf      	ble.n	800d6a2 <shadow_blur_corner+0xd6>
 800d6e2:	fb02 c204 	mla	r2, r2, r4, ip
 800d6e6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800d6ea:	e7df      	b.n	800d6ac <shadow_blur_corner+0xe0>
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e004      	b.n	800d6fa <shadow_blur_corner+0x12e>
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
 800d6f0:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800d6f4:	800a      	strh	r2, [r1, #0]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	4431      	add	r1, r6
 800d6fa:	429c      	cmp	r4, r3
 800d6fc:	dcf8      	bgt.n	800d6f0 <shadow_blur_corner+0x124>
    for(x = 0; x < size; x++) {
 800d6fe:	f10c 0c01 	add.w	ip, ip, #1
 800d702:	4564      	cmp	r4, ip
 800d704:	dd09      	ble.n	800d71a <shadow_blur_corner+0x14e>
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800d706:	eb07 014c 	add.w	r1, r7, ip, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
 800d70a:	f837 201c 	ldrh.w	r2, [r7, ip, lsl #1]
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	fb03 f202 	mul.w	r2, r3, r2
        sh_ups_tmp_buf = &sh_ups_buf[x];
 800d714:	4608      	mov	r0, r1
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
 800d716:	2300      	movs	r3, #0
 800d718:	e7cb      	b.n	800d6b2 <shadow_blur_corner+0xe6>
    lv_mem_buf_release(sh_ups_blur_buf);
 800d71a:	4628      	mov	r0, r5
 800d71c:	f009 f9b0 	bl	8016a80 <lv_mem_buf_release>
}
 800d720:	b003      	add	sp, #12
 800d722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d726 <shadow_draw_corner_buf>:
{
 800d726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	b08b      	sub	sp, #44	@ 0x2c
 800d72c:	4688      	mov	r8, r1
 800d72e:	4691      	mov	r9, r2
 800d730:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
 800d732:	eb03 0409 	add.w	r4, r3, r9
    dest->x1 = src->x1;
 800d736:	f9b0 3000 	ldrsh.w	r3, [r0]
 800d73a:	f8ad 3020 	strh.w	r3, [sp, #32]
    dest->y1 = src->y1;
 800d73e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800d742:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
    dest->x2 = src->x2;
 800d746:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d74a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    dest->y2 = src->y2;
 800d74e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800d752:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
 800d756:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 800d75a:	f3c5 054f 	ubfx	r5, r5, #1, #16
 800d75e:	18ab      	adds	r3, r5, r2
 800d760:	b29b      	uxth	r3, r3
 800d762:	f009 0a01 	and.w	sl, r9, #1
 800d766:	f019 0f01 	tst.w	r9, #1
 800d76a:	bf0c      	ite	eq
 800d76c:	2601      	moveq	r6, #1
 800d76e:	2600      	movne	r6, #0
 800d770:	1b9b      	subs	r3, r3, r6
 800d772:	3b01      	subs	r3, #1
 800d774:	b29e      	uxth	r6, r3
 800d776:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    sh_area.y1 = sw / 2 + 1;
 800d77a:	3501      	adds	r5, #1
 800d77c:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d780:	8883      	ldrh	r3, [r0, #4]
 800d782:	8807      	ldrh	r7, [r0, #0]
 800d784:	1bdb      	subs	r3, r3, r7
 800d786:	b29b      	uxth	r3, r3
 800d788:	3301      	adds	r3, #1
 800d78a:	b29b      	uxth	r3, r3
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
 800d78c:	1af6      	subs	r6, r6, r3
 800d78e:	f8ad 6020 	strh.w	r6, [sp, #32]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d792:	b289      	uxth	r1, r1
 800d794:	8843      	ldrh	r3, [r0, #2]
 800d796:	1ac9      	subs	r1, r1, r3
 800d798:	b289      	uxth	r1, r1
 800d79a:	3101      	adds	r1, #1
 800d79c:	b289      	uxth	r1, r1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
 800d79e:	fa11 f585 	uxtah	r5, r1, r5
 800d7a2:	f8ad 5026 	strh.w	r5, [sp, #38]	@ 0x26
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	a908      	add	r1, sp, #32
 800d7aa:	a802      	add	r0, sp, #8
 800d7ac:	f7fc f9a4 	bl	8009af8 <lv_draw_mask_radius_init>
    if(sw_ori == 1) sw = 1;
 800d7b0:	f1b9 0f01 	cmp.w	r9, #1
 800d7b4:	d009      	beq.n	800d7ca <shadow_draw_corner_buf+0xa4>
    else sw = sw_ori >> 1;
 800d7b6:	ea4f 0969 	mov.w	r9, r9, asr #1
    lv_opa_t * mask_line = lv_mem_buf_get(size);
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	f009 f8fe 	bl	80169bc <lv_mem_buf_get>
 800d7c0:	4605      	mov	r5, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
 800d7c2:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
 800d7c4:	f04f 0b00 	mov.w	fp, #0
 800d7c8:	e024      	b.n	800d814 <shadow_draw_corner_buf+0xee>
    if(sw_ori == 1) sw = 1;
 800d7ca:	f04f 0901 	mov.w	r9, #1
 800d7ce:	e7f4      	b.n	800d7ba <shadow_draw_corner_buf+0x94>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
 800d7d0:	782b      	ldrb	r3, [r5, #0]
 800d7d2:	019b      	lsls	r3, r3, #6
 800d7d4:	4648      	mov	r0, r9
 800d7d6:	fb93 f3f9 	sdiv	r3, r3, r9
 800d7da:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e007      	b.n	800d7f0 <shadow_draw_corner_buf+0xca>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800d7e0:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
 800d7e4:	3a01      	subs	r2, #1
 800d7e6:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800d7ea:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	da0b      	bge.n	800d80c <shadow_draw_corner_buf+0xe6>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
 800d7f4:	5cea      	ldrb	r2, [r5, r3]
 800d7f6:	18e9      	adds	r1, r5, r3
 800d7f8:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 800d7fc:	428a      	cmp	r2, r1
 800d7fe:	d0ef      	beq.n	800d7e0 <shadow_draw_corner_buf+0xba>
                else  sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d800:	0192      	lsls	r2, r2, #6
 800d802:	fb92 f2f0 	sdiv	r2, r2, r0
 800d806:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800d80a:	e7f0      	b.n	800d7ee <shadow_draw_corner_buf+0xc8>
        sh_ups_tmp_buf += size;
 800d80c:	eb06 0644 	add.w	r6, r6, r4, lsl #1
    for(y = 0; y < size; y++) {
 800d810:	f10b 0b01 	add.w	fp, fp, #1
 800d814:	45a3      	cmp	fp, r4
 800d816:	da13      	bge.n	800d840 <shadow_draw_corner_buf+0x11a>
        lv_memset_ff(mask_line, size);
 800d818:	4621      	mov	r1, r4
 800d81a:	4628      	mov	r0, r5
 800d81c:	f009 fa7c 	bl	8016d18 <lv_memset_ff>
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
 800d820:	ab02      	add	r3, sp, #8
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	b223      	sxth	r3, r4
 800d826:	fa0f f28b 	sxth.w	r2, fp
 800d82a:	2100      	movs	r1, #0
 800d82c:	4628      	mov	r0, r5
 800d82e:	9f02      	ldr	r7, [sp, #8]
 800d830:	47b8      	blx	r7
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
 800d832:	2800      	cmp	r0, #0
 800d834:	d1cc      	bne.n	800d7d0 <shadow_draw_corner_buf+0xaa>
            lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
 800d836:	0061      	lsls	r1, r4, #1
 800d838:	4630      	mov	r0, r6
 800d83a:	f009 fa43 	bl	8016cc4 <lv_memset_00>
 800d83e:	e7e5      	b.n	800d80c <shadow_draw_corner_buf+0xe6>
    lv_mem_buf_release(mask_line);
 800d840:	4628      	mov	r0, r5
 800d842:	f009 f91d 	bl	8016a80 <lv_mem_buf_release>
    lv_draw_mask_free_param(&mask_param);
 800d846:	a802      	add	r0, sp, #8
 800d848:	f7fb ffa0 	bl	800978c <lv_draw_mask_free_param>
    if(sw == 1) {
 800d84c:	f1b9 0f01 	cmp.w	r9, #1
 800d850:	d01a      	beq.n	800d888 <shadow_draw_corner_buf+0x162>
    shadow_blur_corner(size, sw, sh_buf);
 800d852:	b225      	sxth	r5, r4
 800d854:	4642      	mov	r2, r8
 800d856:	4649      	mov	r1, r9
 800d858:	4628      	mov	r0, r5
 800d85a:	f7ff feb7 	bl	800d5cc <shadow_blur_corner>
    sw += sw_ori & 1;
 800d85e:	eb0a 0109 	add.w	r1, sl, r9
    if(sw > 1) {
 800d862:	2901      	cmp	r1, #1
 800d864:	dd2a      	ble.n	800d8bc <shadow_draw_corner_buf+0x196>
        uint32_t max_v_div = (LV_OPA_COVER << SHADOW_UPSCALE_SHIFT) / sw;
 800d866:	f44f 567f 	mov.w	r6, #16320	@ 0x3fc0
 800d86a:	fb96 f6f1 	sdiv	r6, r6, r1
        for(i = 0; i < (uint32_t)size * size; i++) {
 800d86e:	2300      	movs	r3, #0
 800d870:	e00f      	b.n	800d892 <shadow_draw_corner_buf+0x16c>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
 800d872:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 800d876:	0992      	lsrs	r2, r2, #6
 800d878:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
 800d87c:	3301      	adds	r3, #1
 800d87e:	fb04 f204 	mul.w	r2, r4, r4
 800d882:	429a      	cmp	r2, r3
 800d884:	dcf5      	bgt.n	800d872 <shadow_draw_corner_buf+0x14c>
 800d886:	e024      	b.n	800d8d2 <shadow_draw_corner_buf+0x1ac>
 800d888:	2300      	movs	r3, #0
 800d88a:	e7f8      	b.n	800d87e <shadow_draw_corner_buf+0x158>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800d88c:	f828 6000 	strh.w	r6, [r8, r0]
        for(i = 0; i < (uint32_t)size * size; i++) {
 800d890:	3301      	adds	r3, #1
 800d892:	fb04 f204 	mul.w	r2, r4, r4
 800d896:	429a      	cmp	r2, r3
 800d898:	d90c      	bls.n	800d8b4 <shadow_draw_corner_buf+0x18e>
            if(sh_buf[i] == 0) continue;
 800d89a:	0058      	lsls	r0, r3, #1
 800d89c:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	d0f5      	beq.n	800d890 <shadow_draw_corner_buf+0x16a>
            else if(sh_buf[i] == LV_OPA_COVER) sh_buf[i] = max_v_div;
 800d8a4:	2aff      	cmp	r2, #255	@ 0xff
 800d8a6:	d0f1      	beq.n	800d88c <shadow_draw_corner_buf+0x166>
            else  sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
 800d8a8:	0192      	lsls	r2, r2, #6
 800d8aa:	fb92 f2f1 	sdiv	r2, r2, r1
 800d8ae:	f828 2000 	strh.w	r2, [r8, r0]
 800d8b2:	e7ed      	b.n	800d890 <shadow_draw_corner_buf+0x16a>
        shadow_blur_corner(size, sw, sh_buf);
 800d8b4:	4642      	mov	r2, r8
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	f7ff fe88 	bl	800d5cc <shadow_blur_corner>
        for(i = 0; i < (uint32_t)size * size; i++) {
 800d8bc:	2300      	movs	r3, #0
 800d8be:	e004      	b.n	800d8ca <shadow_draw_corner_buf+0x1a4>
        res_buf[x] = sh_buf[x];
 800d8c0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 800d8c4:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	fb04 f204 	mul.w	r2, r4, r4
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	dcf6      	bgt.n	800d8c0 <shadow_draw_corner_buf+0x19a>
}
 800d8d2:	b00b      	add	sp, #44	@ 0x2c
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8d8 <draw_shadow>:
    if(dsc->shadow_width == 0) return;
 800d8d8:	f9b1 302e 	ldrsh.w	r3, [r1, #46]	@ 0x2e
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 86bd 	beq.w	800e65c <draw_shadow+0xd84>
{
 800d8e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e6:	b0a7      	sub	sp, #156	@ 0x9c
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	4614      	mov	r4, r2
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
 800d8ee:	f891 9036 	ldrb.w	r9, [r1, #54]	@ 0x36
 800d8f2:	f1b9 0f02 	cmp.w	r9, #2
 800d8f6:	d949      	bls.n	800d98c <draw_shadow+0xb4>
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d04a      	beq.n	800d992 <draw_shadow+0xba>
    core_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
 800d8fc:	8822      	ldrh	r2, [r4, #0]
 800d8fe:	8e29      	ldrh	r1, [r5, #48]	@ 0x30
 800d900:	440a      	add	r2, r1
 800d902:	b292      	uxth	r2, r2
 800d904:	f8b5 e034 	ldrh.w	lr, [r5, #52]	@ 0x34
 800d908:	eba2 020e 	sub.w	r2, r2, lr
 800d90c:	fa1f fc82 	uxth.w	ip, r2
 800d910:	f8ad 2090 	strh.w	r2, [sp, #144]	@ 0x90
    core_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
 800d914:	88a2      	ldrh	r2, [r4, #4]
 800d916:	4411      	add	r1, r2
 800d918:	fa1e f181 	uxtah	r1, lr, r1
 800d91c:	f8ad 1094 	strh.w	r1, [sp, #148]	@ 0x94
    core_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
 800d920:	8860      	ldrh	r0, [r4, #2]
 800d922:	8e6a      	ldrh	r2, [r5, #50]	@ 0x32
 800d924:	4410      	add	r0, r2
 800d926:	b280      	uxth	r0, r0
 800d928:	eba0 000e 	sub.w	r0, r0, lr
 800d92c:	b287      	uxth	r7, r0
 800d92e:	f8ad 0092 	strh.w	r0, [sp, #146]	@ 0x92
    core_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
 800d932:	88e0      	ldrh	r0, [r4, #6]
 800d934:	4402      	add	r2, r0
 800d936:	fa1e f282 	uxtah	r2, lr, r2
 800d93a:	f8ad 2096 	strh.w	r2, [sp, #150]	@ 0x96
    shadow_area.x1 = core_area.x1 - dsc->shadow_width / 2 - 1;
 800d93e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d942:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800d946:	ebac 0003 	sub.w	r0, ip, r3
 800d94a:	b280      	uxth	r0, r0
 800d94c:	3801      	subs	r0, #1
 800d94e:	f8ad 0088 	strh.w	r0, [sp, #136]	@ 0x88
    shadow_area.x2 = core_area.x2 + dsc->shadow_width / 2 + 1;
 800d952:	fa13 f181 	uxtah	r1, r3, r1
 800d956:	b289      	uxth	r1, r1
 800d958:	3101      	adds	r1, #1
 800d95a:	f8ad 108c 	strh.w	r1, [sp, #140]	@ 0x8c
    shadow_area.y1 = core_area.y1 - dsc->shadow_width / 2 - 1;
 800d95e:	1af9      	subs	r1, r7, r3
 800d960:	b289      	uxth	r1, r1
 800d962:	3901      	subs	r1, #1
 800d964:	f8ad 108a 	strh.w	r1, [sp, #138]	@ 0x8a
    shadow_area.y2 = core_area.y2 + dsc->shadow_width / 2 + 1;
 800d968:	fa13 f382 	uxtah	r3, r3, r2
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	3301      	adds	r3, #1
 800d970:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800d974:	f1b9 0ffd 	cmp.w	r9, #253	@ 0xfd
 800d978:	d901      	bls.n	800d97e <draw_shadow+0xa6>
 800d97a:	f04f 09ff 	mov.w	r9, #255	@ 0xff
    if(!_lv_area_intersect(&draw_area, &shadow_area, draw_ctx->clip_area)) return;
 800d97e:	68b2      	ldr	r2, [r6, #8]
 800d980:	a922      	add	r1, sp, #136	@ 0x88
 800d982:	a820      	add	r0, sp, #128	@ 0x80
 800d984:	f7f4 f836 	bl	80019f4 <_lv_area_intersect>
 800d988:	9000      	str	r0, [sp, #0]
 800d98a:	b950      	cbnz	r0, 800d9a2 <draw_shadow+0xca>
}
 800d98c:	b027      	add	sp, #156	@ 0x9c
 800d98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(dsc->shadow_width == 1 && dsc->shadow_spread <= 0 &&
 800d992:	f9b1 2034 	ldrsh.w	r2, [r1, #52]	@ 0x34
 800d996:	2a00      	cmp	r2, #0
 800d998:	dcb0      	bgt.n	800d8fc <draw_shadow+0x24>
       dsc->shadow_ofs_x == 0 && dsc->shadow_ofs_y == 0) {
 800d99a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	d1ad      	bne.n	800d8fc <draw_shadow+0x24>
 800d9a0:	e7f4      	b.n	800d98c <draw_shadow+0xb4>
    dest->x1 = src->x1;
 800d9a2:	f9b4 3000 	ldrsh.w	r3, [r4]
 800d9a6:	f8ad 3078 	strh.w	r3, [sp, #120]	@ 0x78
    dest->y1 = src->y1;
 800d9aa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800d9ae:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
    dest->x2 = src->x2;
 800d9b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800d9b6:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
    dest->y2 = src->y2;
 800d9ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800d9be:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
    lv_area_increase(&bg_area, -1, -1);
 800d9c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	a81e      	add	r0, sp, #120	@ 0x78
 800d9ca:	f7f3 fff5 	bl	80019b8 <lv_area_increase>
    int32_t r_bg = dsc->radius;
 800d9ce:	f9b5 2000 	ldrsh.w	r2, [r5]
 800d9d2:	4617      	mov	r7, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800d9d4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800d9d8:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 800d9dc:	1ac9      	subs	r1, r1, r3
 800d9de:	b289      	uxth	r1, r1
 800d9e0:	3101      	adds	r1, #1
 800d9e2:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800d9e4:	f8bd 307e 	ldrh.w	r3, [sp, #126]	@ 0x7e
 800d9e8:	f8bd 007a 	ldrh.w	r0, [sp, #122]	@ 0x7a
 800d9ec:	1a1b      	subs	r3, r3, r0
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	b21b      	sxth	r3, r3
    lv_coord_t short_side = LV_MIN(lv_area_get_width(&bg_area), lv_area_get_height(&bg_area));
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	da00      	bge.n	800d9fa <draw_shadow+0x122>
 800d9f8:	460b      	mov	r3, r1
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
 800d9fa:	1059      	asrs	r1, r3, #1
 800d9fc:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 800da00:	dd01      	ble.n	800da06 <draw_shadow+0x12e>
 800da02:	9102      	str	r1, [sp, #8]
 800da04:	e000      	b.n	800da08 <draw_shadow+0x130>
    int32_t r_bg = dsc->radius;
 800da06:	9202      	str	r2, [sp, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800da08:	f8bd 1094 	ldrh.w	r1, [sp, #148]	@ 0x94
 800da0c:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 800da10:	1ac9      	subs	r1, r1, r3
 800da12:	b289      	uxth	r1, r1
 800da14:	3101      	adds	r1, #1
 800da16:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800da18:	f8bd 3096 	ldrh.w	r3, [sp, #150]	@ 0x96
 800da1c:	f8bd 0092 	ldrh.w	r0, [sp, #146]	@ 0x92
 800da20:	1a1b      	subs	r3, r3, r0
 800da22:	b29b      	uxth	r3, r3
 800da24:	3301      	adds	r3, #1
 800da26:	b21b      	sxth	r3, r3
    short_side = LV_MIN(lv_area_get_width(&core_area), lv_area_get_height(&core_area));
 800da28:	428b      	cmp	r3, r1
 800da2a:	dd00      	ble.n	800da2e <draw_shadow+0x156>
 800da2c:	460b      	mov	r3, r1
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
 800da2e:	1059      	asrs	r1, r3, #1
 800da30:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 800da34:	dd00      	ble.n	800da38 <draw_shadow+0x160>
 800da36:	460f      	mov	r7, r1
    int32_t corner_size = dsc->shadow_width  + r_sh;
 800da38:	f9b5 402e 	ldrsh.w	r4, [r5, #46]	@ 0x2e
 800da3c:	443c      	add	r4, r7
    sh_buf = lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
 800da3e:	fb04 f004 	mul.w	r0, r4, r4
 800da42:	0040      	lsls	r0, r0, #1
 800da44:	f008 ffba 	bl	80169bc <lv_mem_buf_get>
 800da48:	4601      	mov	r1, r0
 800da4a:	9003      	str	r0, [sp, #12]
    shadow_draw_corner_buf(&core_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
 800da4c:	463b      	mov	r3, r7
 800da4e:	f9b5 202e 	ldrsh.w	r2, [r5, #46]	@ 0x2e
 800da52:	a824      	add	r0, sp, #144	@ 0x90
 800da54:	f7ff fe67 	bl	800d726 <shadow_draw_corner_buf>
    bool mask_any = lv_draw_mask_is_any(&shadow_area);
 800da58:	a822      	add	r0, sp, #136	@ 0x88
 800da5a:	f7fb fed3 	bl	8009804 <lv_draw_mask_is_any>
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800da5e:	b920      	cbnz	r0, 800da6a <draw_shadow+0x192>
 800da60:	886b      	ldrh	r3, [r5, #2]
 800da62:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800da66:	f000 8122 	beq.w	800dcae <draw_shadow+0x3d6>
        lv_draw_mask_radius_init(&mask_rout_param, &bg_area, r_bg, true);
 800da6a:	2301      	movs	r3, #1
 800da6c:	9a02      	ldr	r2, [sp, #8]
 800da6e:	a91e      	add	r1, sp, #120	@ 0x78
 800da70:	a818      	add	r0, sp, #96	@ 0x60
 800da72:	f7fc f841 	bl	8009af8 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800da76:	2100      	movs	r1, #0
 800da78:	a818      	add	r0, sp, #96	@ 0x60
 800da7a:	f7fb fe17 	bl	80096ac <lv_draw_mask_add>
 800da7e:	9007      	str	r0, [sp, #28]
    if(mask_any || dsc->bg_opa < LV_OPA_COVER || dsc->blend_mode != LV_BLEND_MODE_NORMAL) simple = false;
 800da80:	2300      	movs	r3, #0
 800da82:	9300      	str	r3, [sp, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800da84:	f8bd 008c 	ldrh.w	r0, [sp, #140]	@ 0x8c
 800da88:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 800da8c:	1ac0      	subs	r0, r0, r3
 800da8e:	b280      	uxth	r0, r0
 800da90:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = lv_mem_buf_get(lv_area_get_width(&shadow_area));
 800da92:	b200      	sxth	r0, r0
 800da94:	f008 ff92 	bl	80169bc <lv_mem_buf_get>
 800da98:	4607      	mov	r7, r0
 800da9a:	9004      	str	r0, [sp, #16]
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800da9c:	211c      	movs	r1, #28
 800da9e:	a80d      	add	r0, sp, #52	@ 0x34
 800daa0:	f009 f910 	bl	8016cc4 <lv_memset_00>
    blend_dsc.blend_area = &blend_area;
 800daa4:	a916      	add	r1, sp, #88	@ 0x58
 800daa6:	910d      	str	r1, [sp, #52]	@ 0x34
    blend_dsc.mask_area = &blend_area;
 800daa8:	9112      	str	r1, [sp, #72]	@ 0x48
    blend_dsc.mask_buf = mask_buf;
 800daaa:	9710      	str	r7, [sp, #64]	@ 0x40
    blend_dsc.color = dsc->shadow_color;
 800daac:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 800daae:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    blend_dsc.opa = dsc->shadow_opa;
 800dab2:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 800dab6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
    blend_dsc.blend_mode = dsc->blend_mode;
 800daba:	78ab      	ldrb	r3, [r5, #2]
 800dabc:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
    lv_coord_t w_half = shadow_area.x1 + lv_area_get_width(&shadow_area) / 2;
 800dac0:	f8bd 0088 	ldrh.w	r0, [sp, #136]	@ 0x88
 800dac4:	f9bd 708c 	ldrsh.w	r7, [sp, #140]	@ 0x8c
 800dac8:	fa1f fa87 	uxth.w	sl, r7
 800dacc:	ebaa 0300 	sub.w	r3, sl, r0
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	3301      	adds	r3, #1
 800dad4:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
 800dad8:	fa0c f383 	sxtah	r3, ip, r3
 800dadc:	eb00 0063 	add.w	r0, r0, r3, asr #1
 800dae0:	b203      	sxth	r3, r0
 800dae2:	9301      	str	r3, [sp, #4]
    lv_coord_t h_half = shadow_area.y1 + lv_area_get_height(&shadow_area) / 2;
 800dae4:	f9bd c08a 	ldrsh.w	ip, [sp, #138]	@ 0x8a
 800dae8:	fa1f f38c 	uxth.w	r3, ip
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800daec:	f8bd 008e 	ldrh.w	r0, [sp, #142]	@ 0x8e
 800daf0:	1ac0      	subs	r0, r0, r3
 800daf2:	b280      	uxth	r0, r0
 800daf4:	3001      	adds	r0, #1
 800daf6:	f3c0 3ec0 	ubfx	lr, r0, #15, #1
 800dafa:	fa0e f080 	sxtah	r0, lr, r0
 800dafe:	eb03 0060 	add.w	r0, r3, r0, asr #1
 800db02:	b282      	uxth	r2, r0
 800db04:	9206      	str	r2, [sp, #24]
 800db06:	fa0f f880 	sxth.w	r8, r0
    blend_area.x2 = shadow_area.x2;
 800db0a:	f8ad 705c 	strh.w	r7, [sp, #92]	@ 0x5c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800db0e:	b2a7      	uxth	r7, r4
 800db10:	ebaa 0207 	sub.w	r2, sl, r7
 800db14:	b292      	uxth	r2, r2
 800db16:	3201      	adds	r2, #1
 800db18:	b212      	sxth	r2, r2
 800db1a:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
    blend_area.y1 = shadow_area.y1;
 800db1e:	f8ad c05a 	strh.w	ip, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800db22:	443b      	add	r3, r7
 800db24:	b29b      	uxth	r3, r3
 800db26:	3b01      	subs	r3, #1
 800db28:	b21b      	sxth	r3, r3
 800db2a:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800db2e:	9801      	ldr	r0, [sp, #4]
 800db30:	4282      	cmp	r2, r0
 800db32:	bfb8      	it	lt
 800db34:	4602      	movlt	r2, r0
 800db36:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800db3a:	4543      	cmp	r3, r8
 800db3c:	bfa8      	it	ge
 800db3e:	4643      	movge	r3, r8
 800db40:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800db44:	68b2      	ldr	r2, [r6, #8]
 800db46:	a814      	add	r0, sp, #80	@ 0x50
 800db48:	f7f3 ff54 	bl	80019f4 <_lv_area_intersect>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f040 80b2 	bne.w	800dcb6 <draw_shadow+0x3de>
    blend_area.x2 = shadow_area.x2;
 800db52:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800db56:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	1bdb      	subs	r3, r3, r7
 800db5e:	b29b      	uxth	r3, r3
 800db60:	3301      	adds	r3, #1
 800db62:	b21b      	sxth	r3, r3
 800db64:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800db68:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	@ 0x8e
 800db6c:	b28a      	uxth	r2, r1
 800db6e:	1bd2      	subs	r2, r2, r7
 800db70:	b292      	uxth	r2, r2
 800db72:	3201      	adds	r2, #1
 800db74:	b212      	sxth	r2, r2
 800db76:	f8ad 205a 	strh.w	r2, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2;
 800db7a:	f8ad 105e 	strh.w	r1, [sp, #94]	@ 0x5e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800db7e:	9901      	ldr	r1, [sp, #4]
 800db80:	428b      	cmp	r3, r1
 800db82:	bfb8      	it	lt
 800db84:	460b      	movlt	r3, r1
 800db86:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800db8a:	f108 0301 	add.w	r3, r8, #1
 800db8e:	9305      	str	r3, [sp, #20]
 800db90:	429a      	cmp	r2, r3
 800db92:	bfb8      	it	lt
 800db94:	461a      	movlt	r2, r3
 800db96:	f8ad 205a 	strh.w	r2, [sp, #90]	@ 0x5a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800db9a:	68b2      	ldr	r2, [r6, #8]
 800db9c:	a916      	add	r1, sp, #88	@ 0x58
 800db9e:	a814      	add	r0, sp, #80	@ 0x50
 800dba0:	f7f3 ff28 	bl	80019f4 <_lv_area_intersect>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f040 8103 	bne.w	800ddb0 <draw_shadow+0x4d8>
    blend_area.x1 = shadow_area.x1 + corner_size;
 800dbaa:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 800dbae:	443b      	add	r3, r7
 800dbb0:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800dbb4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 800dbb8:	1bdb      	subs	r3, r3, r7
 800dbba:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y1;
 800dbbe:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	@ 0x8a
 800dbc2:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800dbc6:	fa17 f383 	uxtah	r3, r7, r3
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	b21b      	sxth	r3, r3
 800dbd0:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800dbd4:	4543      	cmp	r3, r8
 800dbd6:	bfa8      	it	ge
 800dbd8:	4643      	movge	r3, r8
 800dbda:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800dbde:	68b2      	ldr	r2, [r6, #8]
 800dbe0:	a916      	add	r1, sp, #88	@ 0x58
 800dbe2:	a814      	add	r0, sp, #80	@ 0x50
 800dbe4:	f7f3 ff06 	bl	80019f4 <_lv_area_intersect>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	f040 815e 	bne.w	800deaa <draw_shadow+0x5d2>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800dbee:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 800dbf2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
    blend_area.x1 = shadow_area.x1 + corner_size;
 800dbf6:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 800dbfa:	443b      	add	r3, r7
 800dbfc:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800dc00:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 800dc04:	1bdb      	subs	r3, r3, r7
 800dc06:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800dc0a:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	@ 0x8e
 800dc0e:	b293      	uxth	r3, r2
 800dc10:	1bdb      	subs	r3, r3, r7
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	3301      	adds	r3, #1
 800dc16:	b21b      	sxth	r3, r3
 800dc18:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2;
 800dc1c:	f8ad 205e 	strh.w	r2, [sp, #94]	@ 0x5e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800dc20:	9a05      	ldr	r2, [sp, #20]
 800dc22:	4293      	cmp	r3, r2
 800dc24:	bfb8      	it	lt
 800dc26:	4613      	movlt	r3, r2
 800dc28:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800dc2c:	68b2      	ldr	r2, [r6, #8]
 800dc2e:	a916      	add	r1, sp, #88	@ 0x58
 800dc30:	a814      	add	r0, sp, #80	@ 0x50
 800dc32:	f7f3 fedf 	bl	80019f4 <_lv_area_intersect>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f040 81bc 	bne.w	800dfb4 <draw_shadow+0x6dc>
    blend_dsc.opa = dsc->shadow_opa;    /*Restore*/
 800dc3c:	f895 3036 	ldrb.w	r3, [r5, #54]	@ 0x36
 800dc40:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
    blend_area.x1 = shadow_area.x2 - corner_size + 1;
 800dc44:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	1bd2      	subs	r2, r2, r7
 800dc4c:	b292      	uxth	r2, r2
 800dc4e:	3201      	adds	r2, #1
 800dc50:	b212      	sxth	r2, r2
 800dc52:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x2;
 800dc56:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800dc5a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	@ 0x8a
 800dc5e:	443b      	add	r3, r7
 800dc60:	b21b      	sxth	r3, r3
 800dc62:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2 - corner_size;
 800dc66:	f8bd 108e 	ldrh.w	r1, [sp, #142]	@ 0x8e
 800dc6a:	1bc9      	subs	r1, r1, r7
 800dc6c:	b209      	sxth	r1, r1
 800dc6e:	f8ad 105e 	strh.w	r1, [sp, #94]	@ 0x5e
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800dc72:	4543      	cmp	r3, r8
 800dc74:	dd02      	ble.n	800dc7c <draw_shadow+0x3a4>
 800dc76:	9b06      	ldr	r3, [sp, #24]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	b21b      	sxth	r3, r3
 800dc7c:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800dc80:	4541      	cmp	r1, r8
 800dc82:	bfb8      	it	lt
 800dc84:	4641      	movlt	r1, r8
 800dc86:	f8ad 105e 	strh.w	r1, [sp, #94]	@ 0x5e
    blend_area.x1 = LV_MAX(blend_area.x1, w_half);
 800dc8a:	9b01      	ldr	r3, [sp, #4]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	bfb8      	it	lt
 800dc90:	461a      	movlt	r2, r3
 800dc92:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800dc96:	68b2      	ldr	r2, [r6, #8]
 800dc98:	a916      	add	r1, sp, #88	@ 0x58
 800dc9a:	a814      	add	r0, sp, #80	@ 0x50
 800dc9c:	f7f3 feaa 	bl	80019f4 <_lv_area_intersect>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	f040 820d 	bne.w	800e0c0 <draw_shadow+0x7e8>
        for(x = 0; x < corner_size / 2; x++) {
 800dca6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800dcaa:	2500      	movs	r5, #0
 800dcac:	e288      	b.n	800e1c0 <draw_shadow+0x8e8>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800dcae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcb2:	9307      	str	r3, [sp, #28]
 800dcb4:	e6e6      	b.n	800da84 <draw_shadow+0x1ac>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800dcb6:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 800dcba:	4652      	mov	r2, sl
 800dcbc:	a91e      	add	r1, sp, #120	@ 0x78
 800dcbe:	a814      	add	r0, sp, #80	@ 0x50
 800dcc0:	f7f3 ffcc 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	f47f af44 	bne.w	800db52 <draw_shadow+0x27a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800dcca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800dcce:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800dcd2:	b291      	uxth	r1, r2
 800dcd4:	1a5b      	subs	r3, r3, r1
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	3301      	adds	r3, #1
 800dcda:	b21b      	sxth	r3, r3
 800dcdc:	9305      	str	r3, [sp, #20]
        sh_buf_tmp += (clip_area_sub.y1 - shadow_area.y1) * corner_size;
 800dcde:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	@ 0x52
 800dce2:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	@ 0x8a
 800dce6:	1ac9      	subs	r1, r1, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800dce8:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800dcec:	1b1b      	subs	r3, r3, r4
 800dcee:	3301      	adds	r3, #1
 800dcf0:	eba2 0b03 	sub.w	fp, r2, r3
 800dcf4:	fb04 bb01 	mla	fp, r4, r1, fp
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	449b      	add	fp, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800dcfc:	9b00      	ldr	r3, [sp, #0]
 800dcfe:	b9eb      	cbnz	r3, 800dd3c <draw_shadow+0x464>
        else simple_sub = simple;
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	4619      	mov	r1, r3
        if(w > 0) {
 800dd04:	9b05      	ldr	r3, [sp, #20]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	f77f af23 	ble.w	800db52 <draw_shadow+0x27a>
            blend_dsc.mask_buf = mask_buf;
 800dd0c:	9a04      	ldr	r2, [sp, #16]
 800dd0e:	9210      	str	r2, [sp, #64]	@ 0x40
            blend_area.x1 = clip_area_sub.x1;
 800dd10:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800dd14:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800dd18:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800dd1c:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800dd20:	2302      	movs	r3, #2
 800dd22:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800dd26:	f9bd a052 	ldrsh.w	sl, [sp, #82]	@ 0x52
 800dd2a:	f8cd 9020 	str.w	r9, [sp, #32]
 800dd2e:	9709      	str	r7, [sp, #36]	@ 0x24
 800dd30:	46a1      	mov	r9, r4
 800dd32:	465c      	mov	r4, fp
 800dd34:	4617      	mov	r7, r2
 800dd36:	46ab      	mov	fp, r5
 800dd38:	460d      	mov	r5, r1
 800dd3a:	e023      	b.n	800dd84 <draw_shadow+0x4ac>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800dd3c:	4652      	mov	r2, sl
 800dd3e:	a91e      	add	r1, sp, #120	@ 0x78
 800dd40:	a814      	add	r0, sp, #80	@ 0x50
 800dd42:	f7f4 f8a2 	bl	8001e8a <_lv_area_is_out>
 800dd46:	4601      	mov	r1, r0
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d1db      	bne.n	800dd04 <draw_shadow+0x42c>
        else simple_sub = simple;
 800dd4c:	9b00      	ldr	r3, [sp, #0]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	e7d8      	b.n	800dd04 <draw_shadow+0x42c>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800dd52:	464a      	mov	r2, r9
 800dd54:	4621      	mov	r1, r4
 800dd56:	4638      	mov	r0, r7
 800dd58:	f008 fec6 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800dd5c:	9b05      	ldr	r3, [sp, #20]
 800dd5e:	4652      	mov	r2, sl
 800dd60:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800dd64:	4638      	mov	r0, r7
 800dd66:	f7fb fcbb 	bl	80096e0 <lv_draw_mask_apply>
 800dd6a:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dd6e:	2801      	cmp	r0, #1
 800dd70:	d014      	beq.n	800dd9c <draw_shadow+0x4c4>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800dd72:	a90d      	add	r1, sp, #52	@ 0x34
 800dd74:	4630      	mov	r0, r6
 800dd76:	f7fd fcaf 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800dd7a:	444c      	add	r4, r9
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800dd7c:	f10a 0a01 	add.w	sl, sl, #1
 800dd80:	fa0f fa8a 	sxth.w	sl, sl
 800dd84:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800dd88:	4553      	cmp	r3, sl
 800dd8a:	db0b      	blt.n	800dda4 <draw_shadow+0x4cc>
                blend_area.y1 = y;
 800dd8c:	f8ad a05a 	strh.w	sl, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800dd90:	f8ad a05e 	strh.w	sl, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800dd94:	2d00      	cmp	r5, #0
 800dd96:	d0dc      	beq.n	800dd52 <draw_shadow+0x47a>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800dd98:	9410      	str	r4, [sp, #64]	@ 0x40
 800dd9a:	e7ea      	b.n	800dd72 <draw_shadow+0x49a>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800dd9c:	2302      	movs	r3, #2
 800dd9e:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800dda2:	e7e6      	b.n	800dd72 <draw_shadow+0x49a>
 800dda4:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800dda6:	464c      	mov	r4, r9
 800dda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ddac:	465d      	mov	r5, fp
 800ddae:	e6d0      	b.n	800db52 <draw_shadow+0x27a>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800ddb0:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 800ddb4:	4652      	mov	r2, sl
 800ddb6:	a91e      	add	r1, sp, #120	@ 0x78
 800ddb8:	a814      	add	r0, sp, #80	@ 0x50
 800ddba:	f7f3 ff4f 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	f47f aef3 	bne.w	800dbaa <draw_shadow+0x2d2>
 800ddc4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800ddc8:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800ddcc:	b291      	uxth	r1, r2
 800ddce:	1a5b      	subs	r3, r3, r1
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	b21b      	sxth	r3, r3
 800ddd6:	9308      	str	r3, [sp, #32]
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800ddd8:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	@ 0x5e
 800dddc:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800dde0:	1ac9      	subs	r1, r1, r3
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800dde2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800dde6:	1b1b      	subs	r3, r3, r4
 800dde8:	3301      	adds	r3, #1
 800ddea:	eba2 0b03 	sub.w	fp, r2, r3
 800ddee:	fb04 bb01 	mla	fp, r4, r1, fp
 800ddf2:	9b03      	ldr	r3, [sp, #12]
 800ddf4:	449b      	add	fp, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800ddf6:	9b00      	ldr	r3, [sp, #0]
 800ddf8:	b9eb      	cbnz	r3, 800de36 <draw_shadow+0x55e>
        else simple_sub = simple;
 800ddfa:	9b00      	ldr	r3, [sp, #0]
 800ddfc:	4619      	mov	r1, r3
        if(w > 0) {
 800ddfe:	9b08      	ldr	r3, [sp, #32]
 800de00:	2b00      	cmp	r3, #0
 800de02:	f77f aed2 	ble.w	800dbaa <draw_shadow+0x2d2>
            blend_dsc.mask_buf = mask_buf;
 800de06:	9a04      	ldr	r2, [sp, #16]
 800de08:	9210      	str	r2, [sp, #64]	@ 0x40
            blend_area.x1 = clip_area_sub.x1;
 800de0a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800de0e:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800de12:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800de16:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800de1a:	2302      	movs	r3, #2
 800de1c:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800de20:	f9bd a056 	ldrsh.w	sl, [sp, #86]	@ 0x56
 800de24:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 800de28:	970a      	str	r7, [sp, #40]	@ 0x28
 800de2a:	46a1      	mov	r9, r4
 800de2c:	465c      	mov	r4, fp
 800de2e:	4617      	mov	r7, r2
 800de30:	46ab      	mov	fp, r5
 800de32:	460d      	mov	r5, r1
 800de34:	e023      	b.n	800de7e <draw_shadow+0x5a6>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800de36:	4652      	mov	r2, sl
 800de38:	a91e      	add	r1, sp, #120	@ 0x78
 800de3a:	a814      	add	r0, sp, #80	@ 0x50
 800de3c:	f7f4 f825 	bl	8001e8a <_lv_area_is_out>
 800de40:	4601      	mov	r1, r0
 800de42:	2800      	cmp	r0, #0
 800de44:	d1db      	bne.n	800ddfe <draw_shadow+0x526>
        else simple_sub = simple;
 800de46:	9b00      	ldr	r3, [sp, #0]
 800de48:	4619      	mov	r1, r3
 800de4a:	e7d8      	b.n	800ddfe <draw_shadow+0x526>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800de4c:	464a      	mov	r2, r9
 800de4e:	4621      	mov	r1, r4
 800de50:	4638      	mov	r0, r7
 800de52:	f008 fe49 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800de56:	9b08      	ldr	r3, [sp, #32]
 800de58:	4652      	mov	r2, sl
 800de5a:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800de5e:	4638      	mov	r0, r7
 800de60:	f7fb fc3e 	bl	80096e0 <lv_draw_mask_apply>
 800de64:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800de68:	2801      	cmp	r0, #1
 800de6a:	d014      	beq.n	800de96 <draw_shadow+0x5be>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800de6c:	a90d      	add	r1, sp, #52	@ 0x34
 800de6e:	4630      	mov	r0, r6
 800de70:	f7fd fc32 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800de74:	444c      	add	r4, r9
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800de76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800de7a:	fa0f fa8a 	sxth.w	sl, sl
 800de7e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	@ 0x52
 800de82:	4553      	cmp	r3, sl
 800de84:	dc0b      	bgt.n	800de9e <draw_shadow+0x5c6>
                blend_area.y1 = y;
 800de86:	f8ad a05a 	strh.w	sl, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800de8a:	f8ad a05e 	strh.w	sl, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800de8e:	2d00      	cmp	r5, #0
 800de90:	d0dc      	beq.n	800de4c <draw_shadow+0x574>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800de92:	9410      	str	r4, [sp, #64]	@ 0x40
 800de94:	e7ea      	b.n	800de6c <draw_shadow+0x594>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800de96:	2302      	movs	r3, #2
 800de98:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800de9c:	e7e6      	b.n	800de6c <draw_shadow+0x594>
 800de9e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800dea0:	464c      	mov	r4, r9
 800dea2:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800dea6:	465d      	mov	r5, fp
 800dea8:	e67f      	b.n	800dbaa <draw_shadow+0x2d2>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800deaa:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 800deae:	4652      	mov	r2, sl
 800deb0:	a91e      	add	r1, sp, #120	@ 0x78
 800deb2:	a814      	add	r0, sp, #80	@ 0x50
 800deb4:	f7f3 fed2 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800deb8:	2800      	cmp	r0, #0
 800deba:	f47f ae98 	bne.w	800dbee <draw_shadow+0x316>
 800debe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800dec2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800dec6:	1a9b      	subs	r3, r3, r2
 800dec8:	b29b      	uxth	r3, r3
 800deca:	3301      	adds	r3, #1
 800decc:	b21b      	sxth	r3, r3
 800dece:	9308      	str	r3, [sp, #32]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800ded0:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	@ 0x52
 800ded4:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	@ 0x5a
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	9a03      	ldr	r2, [sp, #12]
 800dedc:	fb04 2b03 	mla	fp, r4, r3, r2
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800dee0:	9b00      	ldr	r3, [sp, #0]
 800dee2:	b9cb      	cbnz	r3, 800df18 <draw_shadow+0x640>
        else simple_sub = simple;
 800dee4:	9b00      	ldr	r3, [sp, #0]
 800dee6:	461a      	mov	r2, r3
        if(w > 0) {
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	2b00      	cmp	r3, #0
 800deec:	f77f ae7f 	ble.w	800dbee <draw_shadow+0x316>
            if(!simple_sub) {
 800def0:	b9ea      	cbnz	r2, 800df2e <draw_shadow+0x656>
                blend_dsc.mask_buf = mask_buf;
 800def2:	9b04      	ldr	r3, [sp, #16]
 800def4:	9310      	str	r3, [sp, #64]	@ 0x40
            blend_area.x1 = clip_area_sub.x1;
 800def6:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800defa:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800defe:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800df02:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800df06:	f9bd a052 	ldrsh.w	sl, [sp, #82]	@ 0x52
 800df0a:	9709      	str	r7, [sp, #36]	@ 0x24
 800df0c:	4617      	mov	r7, r2
 800df0e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800df12:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800df16:	e034      	b.n	800df82 <draw_shadow+0x6aa>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800df18:	4652      	mov	r2, sl
 800df1a:	a91e      	add	r1, sp, #120	@ 0x78
 800df1c:	a814      	add	r0, sp, #80	@ 0x50
 800df1e:	f7f3 ffb4 	bl	8001e8a <_lv_area_is_out>
 800df22:	4602      	mov	r2, r0
 800df24:	2800      	cmp	r0, #0
 800df26:	d1df      	bne.n	800dee8 <draw_shadow+0x610>
        else simple_sub = simple;
 800df28:	9b00      	ldr	r3, [sp, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	e7dc      	b.n	800dee8 <draw_shadow+0x610>
                blend_dsc.mask_buf = NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	9310      	str	r3, [sp, #64]	@ 0x40
 800df32:	e7e0      	b.n	800def6 <draw_shadow+0x61e>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800df34:	9a08      	ldr	r2, [sp, #32]
 800df36:	f89b 1000 	ldrb.w	r1, [fp]
 800df3a:	4640      	mov	r0, r8
 800df3c:	f008 fe64 	bl	8016c08 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800df40:	9b08      	ldr	r3, [sp, #32]
 800df42:	4652      	mov	r2, sl
 800df44:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800df48:	4640      	mov	r0, r8
 800df4a:	f7fb fbc9 	bl	80096e0 <lv_draw_mask_apply>
 800df4e:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800df52:	2801      	cmp	r0, #1
 800df54:	d004      	beq.n	800df60 <draw_shadow+0x688>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800df56:	a90d      	add	r1, sp, #52	@ 0x34
 800df58:	4630      	mov	r0, r6
 800df5a:	f7fd fbbd 	bl	800b6d8 <lv_draw_sw_blend>
 800df5e:	e00b      	b.n	800df78 <draw_shadow+0x6a0>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800df60:	2302      	movs	r3, #2
 800df62:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800df66:	e7f6      	b.n	800df56 <draw_shadow+0x67e>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800df68:	f89b 3000 	ldrb.w	r3, [fp]
 800df6c:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800df70:	a90d      	add	r1, sp, #52	@ 0x34
 800df72:	4630      	mov	r0, r6
 800df74:	f7fd fbb0 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800df78:	44a3      	add	fp, r4
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800df7a:	f10a 0a01 	add.w	sl, sl, #1
 800df7e:	fa0f fa8a 	sxth.w	sl, sl
 800df82:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800df86:	4553      	cmp	r3, sl
 800df88:	db10      	blt.n	800dfac <draw_shadow+0x6d4>
                blend_area.y1 = y;
 800df8a:	f8ad a05a 	strh.w	sl, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800df8e:	f8ad a05e 	strh.w	sl, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800df92:	2f00      	cmp	r7, #0
 800df94:	d0ce      	beq.n	800df34 <draw_shadow+0x65c>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800df96:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800df9a:	d0e5      	beq.n	800df68 <draw_shadow+0x690>
 800df9c:	f89b 3000 	ldrb.w	r3, [fp]
 800dfa0:	f895 2036 	ldrb.w	r2, [r5, #54]	@ 0x36
 800dfa4:	fb02 f303 	mul.w	r3, r2, r3
 800dfa8:	0a1b      	lsrs	r3, r3, #8
 800dfaa:	e7df      	b.n	800df6c <draw_shadow+0x694>
 800dfac:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 800dfae:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800dfb2:	e61c      	b.n	800dbee <draw_shadow+0x316>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800dfb4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800dfb8:	9308      	str	r3, [sp, #32]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	a91e      	add	r1, sp, #120	@ 0x78
 800dfbe:	a814      	add	r0, sp, #80	@ 0x50
 800dfc0:	f7f3 fe4c 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	f47f ae39 	bne.w	800dc3c <draw_shadow+0x364>
 800dfca:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800dfce:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800dfd2:	1a9b      	subs	r3, r3, r2
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b21a      	sxth	r2, r3
 800dfda:	9209      	str	r2, [sp, #36]	@ 0x24
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800dfdc:	f9bd b05e 	ldrsh.w	fp, [sp, #94]	@ 0x5e
 800dfe0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800dfe4:	ebab 0b03 	sub.w	fp, fp, r3
 800dfe8:	9b03      	ldr	r3, [sp, #12]
 800dfea:	fb04 3b0b 	mla	fp, r4, fp, r3
        if(w > 0) {
 800dfee:	2a00      	cmp	r2, #0
 800dff0:	f77f ae24 	ble.w	800dc3c <draw_shadow+0x364>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800dff4:	9b00      	ldr	r3, [sp, #0]
 800dff6:	b9a3      	cbnz	r3, 800e022 <draw_shadow+0x74a>
                blend_dsc.mask_buf = mask_buf;
 800dff8:	9b04      	ldr	r3, [sp, #16]
 800dffa:	9310      	str	r3, [sp, #64]	@ 0x40
            blend_area.x1 = clip_area_sub.x1;
 800dffc:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e000:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e004:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e008:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e00c:	f9bd a056 	ldrsh.w	sl, [sp, #86]	@ 0x56
 800e010:	970a      	str	r7, [sp, #40]	@ 0x28
 800e012:	9f00      	ldr	r7, [sp, #0]
 800e014:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 800e018:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 800e01c:	9509      	str	r5, [sp, #36]	@ 0x24
 800e01e:	9d04      	ldr	r5, [sp, #16]
 800e020:	e027      	b.n	800e072 <draw_shadow+0x79a>
            if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e022:	9a08      	ldr	r2, [sp, #32]
 800e024:	a91e      	add	r1, sp, #120	@ 0x78
 800e026:	a814      	add	r0, sp, #80	@ 0x50
 800e028:	f7f3 ff2f 	bl	8001e8a <_lv_area_is_out>
                blend_dsc.mask_buf = NULL;
 800e02c:	2300      	movs	r3, #0
 800e02e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e030:	e7e4      	b.n	800dffc <draw_shadow+0x724>
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e032:	9a08      	ldr	r2, [sp, #32]
 800e034:	a91e      	add	r1, sp, #120	@ 0x78
 800e036:	a814      	add	r0, sp, #80	@ 0x50
 800e038:	f7f3 ff27 	bl	8001e8a <_lv_area_is_out>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800e03c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e040:	d036      	beq.n	800e0b0 <draw_shadow+0x7d8>
 800e042:	f89b 3000 	ldrb.w	r3, [fp]
 800e046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e048:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800e04c:	fb02 f303 	mul.w	r3, r2, r3
 800e050:	0a1b      	lsrs	r3, r3, #8
 800e052:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e056:	a90d      	add	r1, sp, #52	@ 0x34
 800e058:	4630      	mov	r0, r6
 800e05a:	f7fd fb3d 	bl	800b6d8 <lv_draw_sw_blend>
 800e05e:	e003      	b.n	800e068 <draw_shadow+0x790>
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e060:	a90d      	add	r1, sp, #52	@ 0x34
 800e062:	4630      	mov	r0, r6
 800e064:	f7fd fb38 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800e068:	44a3      	add	fp, r4
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e06a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e06e:	fa0f fa8a 	sxth.w	sl, sl
 800e072:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	@ 0x52
 800e076:	4553      	cmp	r3, sl
 800e078:	dc1d      	bgt.n	800e0b6 <draw_shadow+0x7de>
                blend_area.y1 = y;
 800e07a:	f8ad a05a 	strh.w	sl, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e07e:	f8ad a05e 	strh.w	sl, [sp, #94]	@ 0x5e
                if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e082:	2f00      	cmp	r7, #0
 800e084:	d1d5      	bne.n	800e032 <draw_shadow+0x75a>
                    lv_memset(mask_buf, sh_buf_tmp[0], w);
 800e086:	4642      	mov	r2, r8
 800e088:	f89b 1000 	ldrb.w	r1, [fp]
 800e08c:	4628      	mov	r0, r5
 800e08e:	f008 fdbb 	bl	8016c08 <lv_memset>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e092:	4643      	mov	r3, r8
 800e094:	4652      	mov	r2, sl
 800e096:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7fb fb20 	bl	80096e0 <lv_draw_mask_apply>
 800e0a0:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e0a4:	2801      	cmp	r0, #1
 800e0a6:	d1db      	bne.n	800e060 <draw_shadow+0x788>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800e0ae:	e7d7      	b.n	800e060 <draw_shadow+0x788>
                    blend_dsc.opa = opa == LV_OPA_COVER ? sh_buf_tmp[0] : (sh_buf_tmp[0] * dsc->shadow_opa) >> 8;
 800e0b0:	f89b 3000 	ldrb.w	r3, [fp]
 800e0b4:	e7cd      	b.n	800e052 <draw_shadow+0x77a>
 800e0b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800e0b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 800e0bc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e0be:	e5bd      	b.n	800dc3c <draw_shadow+0x364>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e0c0:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	a91e      	add	r1, sp, #120	@ 0x78
 800e0c8:	a814      	add	r0, sp, #80	@ 0x50
 800e0ca:	f7f3 fdc7 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	f47f ade9 	bne.w	800dca6 <draw_shadow+0x3ce>
 800e0d4:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e0d8:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800e0dc:	b291      	uxth	r1, r2
 800e0de:	1a5b      	subs	r3, r3, r1
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	fa0f fa83 	sxth.w	sl, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800e0e8:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += clip_area_sub.x1 - (shadow_area.x2 - corner_size + 1);
 800e0ea:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 800e0ee:	1b1b      	subs	r3, r3, r4
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	fb04 3301 	mla	r3, r4, r1, r3
 800e0f8:	9a03      	ldr	r2, [sp, #12]
 800e0fa:	eb02 0b03 	add.w	fp, r2, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e0fe:	9b00      	ldr	r3, [sp, #0]
 800e100:	b9d3      	cbnz	r3, 800e138 <draw_shadow+0x860>
 800e102:	f8dd 9000 	ldr.w	r9, [sp]
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e106:	9b04      	ldr	r3, [sp, #16]
 800e108:	9310      	str	r3, [sp, #64]	@ 0x40
        if(w > 0) {
 800e10a:	f1ba 0f00 	cmp.w	sl, #0
 800e10e:	f77f adca 	ble.w	800dca6 <draw_shadow+0x3ce>
            blend_area.x1 = clip_area_sub.x1;
 800e112:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e116:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e11a:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e11e:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e122:	2302      	movs	r3, #2
 800e124:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e128:	f9bd 5052 	ldrsh.w	r5, [sp, #82]	@ 0x52
 800e12c:	9708      	str	r7, [sp, #32]
 800e12e:	4623      	mov	r3, r4
 800e130:	464c      	mov	r4, r9
 800e132:	9f04      	ldr	r7, [sp, #16]
 800e134:	4699      	mov	r9, r3
 800e136:	e012      	b.n	800e15e <draw_shadow+0x886>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e138:	462a      	mov	r2, r5
 800e13a:	a91e      	add	r1, sp, #120	@ 0x78
 800e13c:	a814      	add	r0, sp, #80	@ 0x50
 800e13e:	f7f3 fea4 	bl	8001e8a <_lv_area_is_out>
 800e142:	4681      	mov	r9, r0
 800e144:	b918      	cbnz	r0, 800e14e <draw_shadow+0x876>
 800e146:	f8dd 9000 	ldr.w	r9, [sp]
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e14a:	465b      	mov	r3, fp
 800e14c:	e7dc      	b.n	800e108 <draw_shadow+0x830>
 800e14e:	465b      	mov	r3, fp
 800e150:	e7da      	b.n	800e108 <draw_shadow+0x830>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e152:	a90d      	add	r1, sp, #52	@ 0x34
 800e154:	4630      	mov	r0, r6
 800e156:	f7fd fabf 	bl	800b6d8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e15a:	3501      	adds	r5, #1
 800e15c:	b22d      	sxth	r5, r5
 800e15e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800e162:	42ab      	cmp	r3, r5
 800e164:	db19      	blt.n	800e19a <draw_shadow+0x8c2>
                blend_area.y1 = y;
 800e166:	f8ad 505a 	strh.w	r5, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e16a:	f8ad 505e 	strh.w	r5, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800e16e:	2c00      	cmp	r4, #0
 800e170:	d1ef      	bne.n	800e152 <draw_shadow+0x87a>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800e172:	4652      	mov	r2, sl
 800e174:	4659      	mov	r1, fp
 800e176:	4638      	mov	r0, r7
 800e178:	f008 fcb6 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e17c:	4653      	mov	r3, sl
 800e17e:	462a      	mov	r2, r5
 800e180:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e184:	4638      	mov	r0, r7
 800e186:	f7fb faab 	bl	80096e0 <lv_draw_mask_apply>
 800e18a:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e18e:	2801      	cmp	r0, #1
 800e190:	d1df      	bne.n	800e152 <draw_shadow+0x87a>
 800e192:	2302      	movs	r3, #2
 800e194:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800e198:	e7db      	b.n	800e152 <draw_shadow+0x87a>
 800e19a:	9f08      	ldr	r7, [sp, #32]
 800e19c:	464c      	mov	r4, r9
 800e19e:	e582      	b.n	800dca6 <draw_shadow+0x3ce>
            lv_opa_t tmp = *start;
 800e1a0:	7808      	ldrb	r0, [r1, #0]
            *start = *end;
 800e1a2:	f893 e000 	ldrb.w	lr, [r3]
 800e1a6:	f801 eb01 	strb.w	lr, [r1], #1
            *end = tmp;
 800e1aa:	f803 0901 	strb.w	r0, [r3], #-1
        for(x = 0; x < corner_size / 2; x++) {
 800e1ae:	3201      	adds	r2, #1
 800e1b0:	eb04 70d4 	add.w	r0, r4, r4, lsr #31
 800e1b4:	ebb2 0f60 	cmp.w	r2, r0, asr #1
 800e1b8:	dbf2      	blt.n	800e1a0 <draw_shadow+0x8c8>
        sh_buf_tmp += corner_size;
 800e1ba:	44a4      	add	ip, r4
    for(y = 0; y < corner_size; y++) {
 800e1bc:	3501      	adds	r5, #1
 800e1be:	b22d      	sxth	r5, r5
 800e1c0:	42a5      	cmp	r5, r4
 800e1c2:	da04      	bge.n	800e1ce <draw_shadow+0x8f6>
        lv_opa_t * end = sh_buf_tmp + corner_size - 1;
 800e1c4:	1e63      	subs	r3, r4, #1
 800e1c6:	4463      	add	r3, ip
        lv_opa_t * start = sh_buf_tmp;
 800e1c8:	4661      	mov	r1, ip
        for(x = 0; x < corner_size / 2; x++) {
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	e7f0      	b.n	800e1b0 <draw_shadow+0x8d8>
    blend_area.x1 = shadow_area.x1;
 800e1ce:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 800e1d2:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e1d6:	fa17 f383 	uxtah	r3, r7, r3
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	b21b      	sxth	r3, r3
 800e1e0:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800e1e4:	f8bd 108a 	ldrh.w	r1, [sp, #138]	@ 0x8a
 800e1e8:	4439      	add	r1, r7
 800e1ea:	b209      	sxth	r1, r1
 800e1ec:	f8ad 105a 	strh.w	r1, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2 - corner_size;
 800e1f0:	f8bd 208e 	ldrh.w	r2, [sp, #142]	@ 0x8e
 800e1f4:	1bd2      	subs	r2, r2, r7
 800e1f6:	b212      	sxth	r2, r2
 800e1f8:	f8ad 205e 	strh.w	r2, [sp, #94]	@ 0x5e
    blend_area.y1 = LV_MIN(blend_area.y1, h_half + 1);
 800e1fc:	4541      	cmp	r1, r8
 800e1fe:	dd02      	ble.n	800e206 <draw_shadow+0x92e>
 800e200:	9906      	ldr	r1, [sp, #24]
 800e202:	3101      	adds	r1, #1
 800e204:	b209      	sxth	r1, r1
 800e206:	f8ad 105a 	strh.w	r1, [sp, #90]	@ 0x5a
    blend_area.y2 = LV_MAX(blend_area.y2, h_half);
 800e20a:	4542      	cmp	r2, r8
 800e20c:	bfb8      	it	lt
 800e20e:	4642      	movlt	r2, r8
 800e210:	f8ad 205e 	strh.w	r2, [sp, #94]	@ 0x5e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e214:	9a01      	ldr	r2, [sp, #4]
 800e216:	1e55      	subs	r5, r2, #1
 800e218:	42ab      	cmp	r3, r5
 800e21a:	bfa8      	it	ge
 800e21c:	462b      	movge	r3, r5
 800e21e:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e222:	68b2      	ldr	r2, [r6, #8]
 800e224:	a916      	add	r1, sp, #88	@ 0x58
 800e226:	a814      	add	r0, sp, #80	@ 0x50
 800e228:	f7f3 fbe4 	bl	80019f4 <_lv_area_intersect>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d17a      	bne.n	800e326 <draw_shadow+0xa4e>
    blend_area.x1 = shadow_area.x1;
 800e230:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 800e234:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e238:	fa17 f283 	uxtah	r2, r7, r3
 800e23c:	b292      	uxth	r2, r2
 800e23e:	3a01      	subs	r2, #1
 800e240:	b212      	sxth	r2, r2
 800e242:	f8ad 205c 	strh.w	r2, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y1;
 800e246:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	@ 0x8a
 800e24a:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y1 + corner_size - 1;
 800e24e:	fa17 f383 	uxtah	r3, r7, r3
 800e252:	b29b      	uxth	r3, r3
 800e254:	3b01      	subs	r3, #1
 800e256:	b21b      	sxth	r3, r3
 800e258:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e25c:	42aa      	cmp	r2, r5
 800e25e:	bfa8      	it	ge
 800e260:	462a      	movge	r2, r5
 800e262:	f8ad 205c 	strh.w	r2, [sp, #92]	@ 0x5c
    blend_area.y2 = LV_MIN(blend_area.y2, h_half);
 800e266:	4543      	cmp	r3, r8
 800e268:	bfa8      	it	ge
 800e26a:	4643      	movge	r3, r8
 800e26c:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e270:	68b2      	ldr	r2, [r6, #8]
 800e272:	a916      	add	r1, sp, #88	@ 0x58
 800e274:	a814      	add	r0, sp, #80	@ 0x50
 800e276:	f7f3 fbbd 	bl	80019f4 <_lv_area_intersect>
 800e27a:	2800      	cmp	r0, #0
 800e27c:	f040 80c3 	bne.w	800e406 <draw_shadow+0xb2e>
    blend_area.x1 = shadow_area.x1 ;
 800e280:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
 800e284:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x1 + corner_size - 1;
 800e288:	fa17 f383 	uxtah	r3, r7, r3
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	b21b      	sxth	r3, r3
 800e292:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y2 - corner_size + 1;
 800e296:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	@ 0x8e
 800e29a:	b28a      	uxth	r2, r1
 800e29c:	1bd2      	subs	r2, r2, r7
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	3201      	adds	r2, #1
 800e2a2:	b212      	sxth	r2, r2
 800e2a4:	f8ad 205a 	strh.w	r2, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2;
 800e2a8:	f8ad 105e 	strh.w	r1, [sp, #94]	@ 0x5e
    blend_area.y1 = LV_MAX(blend_area.y1, h_half + 1);
 800e2ac:	9905      	ldr	r1, [sp, #20]
 800e2ae:	4291      	cmp	r1, r2
 800e2b0:	bfb8      	it	lt
 800e2b2:	4611      	movlt	r1, r2
 800e2b4:	f8ad 105a 	strh.w	r1, [sp, #90]	@ 0x5a
    blend_area.x2 = LV_MIN(blend_area.x2, w_half - 1);
 800e2b8:	429d      	cmp	r5, r3
 800e2ba:	bfa8      	it	ge
 800e2bc:	461d      	movge	r5, r3
 800e2be:	f8ad 505c 	strh.w	r5, [sp, #92]	@ 0x5c
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e2c2:	68b2      	ldr	r2, [r6, #8]
 800e2c4:	a916      	add	r1, sp, #88	@ 0x58
 800e2c6:	a814      	add	r0, sp, #80	@ 0x50
 800e2c8:	f7f3 fb94 	bl	80019f4 <_lv_area_intersect>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f040 8110 	bne.w	800e4f2 <draw_shadow+0xc1a>
    blend_area.x1 = shadow_area.x1 + corner_size ;
 800e2d2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 800e2d6:	443b      	add	r3, r7
 800e2d8:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    blend_area.x2 = shadow_area.x2 - corner_size;
 800e2dc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 800e2e0:	1bdb      	subs	r3, r3, r7
 800e2e2:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    blend_area.y1 = shadow_area.y1 + corner_size;
 800e2e6:	f8bd 308a 	ldrh.w	r3, [sp, #138]	@ 0x8a
 800e2ea:	443b      	add	r3, r7
 800e2ec:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
    blend_area.y2 = shadow_area.y2 - corner_size;
 800e2f0:	f8bd 308e 	ldrh.w	r3, [sp, #142]	@ 0x8e
 800e2f4:	1bdb      	subs	r3, r3, r7
 800e2f6:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
    blend_dsc.mask_buf = mask_buf;
 800e2fa:	9b04      	ldr	r3, [sp, #16]
 800e2fc:	9310      	str	r3, [sp, #64]	@ 0x40
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e2fe:	68b2      	ldr	r2, [r6, #8]
 800e300:	a916      	add	r1, sp, #88	@ 0x58
 800e302:	a814      	add	r0, sp, #80	@ 0x50
 800e304:	f7f3 fb76 	bl	80019f4 <_lv_area_intersect>
 800e308:	2800      	cmp	r0, #0
 800e30a:	f040 8167 	bne.w	800e5dc <draw_shadow+0xd04>
    if(!simple) {
 800e30e:	9b00      	ldr	r3, [sp, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	f000 819c 	beq.w	800e64e <draw_shadow+0xd76>
    lv_mem_buf_release(sh_buf);
 800e316:	9803      	ldr	r0, [sp, #12]
 800e318:	f008 fbb2 	bl	8016a80 <lv_mem_buf_release>
    lv_mem_buf_release(mask_buf);
 800e31c:	9804      	ldr	r0, [sp, #16]
 800e31e:	f008 fbaf 	bl	8016a80 <lv_mem_buf_release>
 800e322:	f7ff bb33 	b.w	800d98c <draw_shadow+0xb4>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e326:	f9bd 9008 	ldrsh.w	r9, [sp, #8]
 800e32a:	464a      	mov	r2, r9
 800e32c:	a91e      	add	r1, sp, #120	@ 0x78
 800e32e:	a814      	add	r0, sp, #80	@ 0x50
 800e330:	f7f3 fc94 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e334:	2800      	cmp	r0, #0
 800e336:	f47f af7b 	bne.w	800e230 <draw_shadow+0x958>
 800e33a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e33e:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800e342:	b291      	uxth	r1, r2
 800e344:	1a5b      	subs	r3, r3, r1
 800e346:	b29b      	uxth	r3, r3
 800e348:	3301      	adds	r3, #1
 800e34a:	fa0f fb83 	sxth.w	fp, r3
        sh_buf_tmp += (corner_size - 1) * corner_size;
 800e34e:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e350:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	@ 0x58
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	fb04 3301 	mla	r3, r4, r1, r3
 800e35a:	9a03      	ldr	r2, [sp, #12]
 800e35c:	18d3      	adds	r3, r2, r3
 800e35e:	9301      	str	r3, [sp, #4]
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e360:	9b00      	ldr	r3, [sp, #0]
 800e362:	b9d3      	cbnz	r3, 800e39a <draw_shadow+0xac2>
 800e364:	f8dd a000 	ldr.w	sl, [sp]
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e368:	9b04      	ldr	r3, [sp, #16]
 800e36a:	9310      	str	r3, [sp, #64]	@ 0x40
        if(w > 0) {
 800e36c:	f1bb 0f00 	cmp.w	fp, #0
 800e370:	f77f af5e 	ble.w	800e230 <draw_shadow+0x958>
            blend_area.x1 = clip_area_sub.x1;
 800e374:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e378:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e37c:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e380:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e384:	2302      	movs	r3, #2
 800e386:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e38a:	f9bd 9052 	ldrsh.w	r9, [sp, #82]	@ 0x52
 800e38e:	9506      	str	r5, [sp, #24]
 800e390:	4623      	mov	r3, r4
 800e392:	4654      	mov	r4, sl
 800e394:	9d04      	ldr	r5, [sp, #16]
 800e396:	469a      	mov	sl, r3
 800e398:	e014      	b.n	800e3c4 <draw_shadow+0xaec>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e39a:	464a      	mov	r2, r9
 800e39c:	a91e      	add	r1, sp, #120	@ 0x78
 800e39e:	a814      	add	r0, sp, #80	@ 0x50
 800e3a0:	f7f3 fd73 	bl	8001e8a <_lv_area_is_out>
 800e3a4:	4682      	mov	sl, r0
 800e3a6:	b918      	cbnz	r0, 800e3b0 <draw_shadow+0xad8>
 800e3a8:	f8dd a000 	ldr.w	sl, [sp]
        blend_dsc.mask_buf = simple_sub ? sh_buf_tmp : mask_buf;
 800e3ac:	9b01      	ldr	r3, [sp, #4]
 800e3ae:	e7dc      	b.n	800e36a <draw_shadow+0xa92>
 800e3b0:	9b01      	ldr	r3, [sp, #4]
 800e3b2:	e7da      	b.n	800e36a <draw_shadow+0xa92>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e3b4:	a90d      	add	r1, sp, #52	@ 0x34
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	f7fd f98e 	bl	800b6d8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e3bc:	f109 0901 	add.w	r9, r9, #1
 800e3c0:	fa0f f989 	sxth.w	r9, r9
 800e3c4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800e3c8:	454b      	cmp	r3, r9
 800e3ca:	db19      	blt.n	800e400 <draw_shadow+0xb28>
                blend_area.y1 = y;
 800e3cc:	f8ad 905a 	strh.w	r9, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e3d0:	f8ad 905e 	strh.w	r9, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800e3d4:	2c00      	cmp	r4, #0
 800e3d6:	d1ed      	bne.n	800e3b4 <draw_shadow+0xadc>
                    lv_memcpy(mask_buf, sh_buf_tmp, w);
 800e3d8:	465a      	mov	r2, fp
 800e3da:	9901      	ldr	r1, [sp, #4]
 800e3dc:	4628      	mov	r0, r5
 800e3de:	f008 fb83 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e3e2:	465b      	mov	r3, fp
 800e3e4:	464a      	mov	r2, r9
 800e3e6:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f7fb f978 	bl	80096e0 <lv_draw_mask_apply>
 800e3f0:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e3f4:	2801      	cmp	r0, #1
 800e3f6:	d1dd      	bne.n	800e3b4 <draw_shadow+0xadc>
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800e3fe:	e7d9      	b.n	800e3b4 <draw_shadow+0xadc>
 800e400:	9d06      	ldr	r5, [sp, #24]
 800e402:	4654      	mov	r4, sl
 800e404:	e714      	b.n	800e230 <draw_shadow+0x958>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e406:	f9bd 9008 	ldrsh.w	r9, [sp, #8]
 800e40a:	464a      	mov	r2, r9
 800e40c:	a91e      	add	r1, sp, #120	@ 0x78
 800e40e:	a814      	add	r0, sp, #80	@ 0x50
 800e410:	f7f3 fc24 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e414:	2800      	cmp	r0, #0
 800e416:	f47f af33 	bne.w	800e280 <draw_shadow+0x9a8>
 800e41a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e41e:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800e422:	b291      	uxth	r1, r2
 800e424:	1a5b      	subs	r3, r3, r1
 800e426:	b29b      	uxth	r3, r3
 800e428:	3301      	adds	r3, #1
 800e42a:	b21b      	sxth	r3, r3
 800e42c:	9301      	str	r3, [sp, #4]
        sh_buf_tmp += (clip_area_sub.y1 - blend_area.y1) * corner_size;
 800e42e:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	@ 0x52
 800e432:	f9bd 105a 	ldrsh.w	r1, [sp, #90]	@ 0x5a
 800e436:	1a5b      	subs	r3, r3, r1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e438:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	@ 0x58
 800e43c:	eba2 0a01 	sub.w	sl, r2, r1
 800e440:	fb04 aa03 	mla	sl, r4, r3, sl
 800e444:	9b03      	ldr	r3, [sp, #12]
 800e446:	449a      	add	sl, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e448:	9b00      	ldr	r3, [sp, #0]
 800e44a:	b9db      	cbnz	r3, 800e484 <draw_shadow+0xbac>
        else simple_sub = simple;
 800e44c:	f8dd b000 	ldr.w	fp, [sp]
        blend_dsc.mask_buf = mask_buf;
 800e450:	9a04      	ldr	r2, [sp, #16]
 800e452:	9210      	str	r2, [sp, #64]	@ 0x40
        if(w > 0) {
 800e454:	9b01      	ldr	r3, [sp, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	f77f af12 	ble.w	800e280 <draw_shadow+0x9a8>
            blend_area.x1 = clip_area_sub.x1;
 800e45c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e460:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e464:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e468:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e46c:	2302      	movs	r3, #2
 800e46e:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e472:	f9bd 9052 	ldrsh.w	r9, [sp, #82]	@ 0x52
 800e476:	465b      	mov	r3, fp
 800e478:	46ab      	mov	fp, r5
 800e47a:	46a0      	mov	r8, r4
 800e47c:	4654      	mov	r4, sl
 800e47e:	4692      	mov	sl, r2
 800e480:	461d      	mov	r5, r3
 800e482:	e023      	b.n	800e4cc <draw_shadow+0xbf4>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e484:	464a      	mov	r2, r9
 800e486:	a91e      	add	r1, sp, #120	@ 0x78
 800e488:	a814      	add	r0, sp, #80	@ 0x50
 800e48a:	f7f3 fcfe 	bl	8001e8a <_lv_area_is_out>
 800e48e:	4683      	mov	fp, r0
 800e490:	2800      	cmp	r0, #0
 800e492:	d1dd      	bne.n	800e450 <draw_shadow+0xb78>
        else simple_sub = simple;
 800e494:	f8dd b000 	ldr.w	fp, [sp]
 800e498:	e7da      	b.n	800e450 <draw_shadow+0xb78>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800e49a:	4642      	mov	r2, r8
 800e49c:	4621      	mov	r1, r4
 800e49e:	4650      	mov	r0, sl
 800e4a0:	f008 fb22 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e4a4:	9b01      	ldr	r3, [sp, #4]
 800e4a6:	464a      	mov	r2, r9
 800e4a8:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e4ac:	4650      	mov	r0, sl
 800e4ae:	f7fb f917 	bl	80096e0 <lv_draw_mask_apply>
 800e4b2:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e4b6:	2801      	cmp	r0, #1
 800e4b8:	d014      	beq.n	800e4e4 <draw_shadow+0xc0c>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e4ba:	a90d      	add	r1, sp, #52	@ 0x34
 800e4bc:	4630      	mov	r0, r6
 800e4be:	f7fd f90b 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800e4c2:	4444      	add	r4, r8
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e4c4:	f109 0901 	add.w	r9, r9, #1
 800e4c8:	fa0f f989 	sxth.w	r9, r9
 800e4cc:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800e4d0:	454b      	cmp	r3, r9
 800e4d2:	db0b      	blt.n	800e4ec <draw_shadow+0xc14>
                blend_area.y1 = y;
 800e4d4:	f8ad 905a 	strh.w	r9, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e4d8:	f8ad 905e 	strh.w	r9, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	d0dc      	beq.n	800e49a <draw_shadow+0xbc2>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800e4e0:	9410      	str	r4, [sp, #64]	@ 0x40
 800e4e2:	e7ea      	b.n	800e4ba <draw_shadow+0xbe2>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800e4ea:	e7e6      	b.n	800e4ba <draw_shadow+0xbe2>
 800e4ec:	465d      	mov	r5, fp
 800e4ee:	4644      	mov	r4, r8
 800e4f0:	e6c6      	b.n	800e280 <draw_shadow+0x9a8>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e4f2:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 800e4f6:	462a      	mov	r2, r5
 800e4f8:	a91e      	add	r1, sp, #120	@ 0x78
 800e4fa:	a814      	add	r0, sp, #80	@ 0x50
 800e4fc:	f7f3 fbae 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e500:	2800      	cmp	r0, #0
 800e502:	f47f aee6 	bne.w	800e2d2 <draw_shadow+0x9fa>
 800e506:	f8bd a054 	ldrh.w	sl, [sp, #84]	@ 0x54
 800e50a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e50e:	b29a      	uxth	r2, r3
 800e510:	ebaa 0a02 	sub.w	sl, sl, r2
 800e514:	fa1f fa8a 	uxth.w	sl, sl
 800e518:	f10a 0a01 	add.w	sl, sl, #1
 800e51c:	fa0f fa8a 	sxth.w	sl, sl
        sh_buf_tmp += (blend_area.y2 - clip_area_sub.y2) * corner_size;
 800e520:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 800e524:	f9bd 1056 	ldrsh.w	r1, [sp, #86]	@ 0x56
 800e528:	1a52      	subs	r2, r2, r1
        sh_buf_tmp += clip_area_sub.x1 - blend_area.x1;
 800e52a:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	@ 0x58
 800e52e:	eba3 0901 	sub.w	r9, r3, r1
 800e532:	fb04 9902 	mla	r9, r4, r2, r9
 800e536:	9b03      	ldr	r3, [sp, #12]
 800e538:	4499      	add	r9, r3
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e53a:	9b00      	ldr	r3, [sp, #0]
 800e53c:	b9d3      	cbnz	r3, 800e574 <draw_shadow+0xc9c>
        else simple_sub = simple;
 800e53e:	f8dd b000 	ldr.w	fp, [sp]
        blend_dsc.mask_buf = mask_buf;
 800e542:	9a04      	ldr	r2, [sp, #16]
 800e544:	9210      	str	r2, [sp, #64]	@ 0x40
        if(w > 0) {
 800e546:	f1ba 0f00 	cmp.w	sl, #0
 800e54a:	f77f aec2 	ble.w	800e2d2 <draw_shadow+0x9fa>
            blend_area.x1 = clip_area_sub.x1;
 800e54e:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 800e552:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e556:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e55a:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;    /*In simple mode it won't be overwritten*/
 800e55e:	2302      	movs	r3, #2
 800e560:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e564:	f9bd 5056 	ldrsh.w	r5, [sp, #86]	@ 0x56
 800e568:	46a0      	mov	r8, r4
 800e56a:	464c      	mov	r4, r9
 800e56c:	46b1      	mov	r9, r6
 800e56e:	465e      	mov	r6, fp
 800e570:	4693      	mov	fp, r2
 800e572:	e021      	b.n	800e5b8 <draw_shadow+0xce0>
        if(simple && _lv_area_is_out(&clip_area_sub, &bg_area, r_bg)) simple_sub = true;
 800e574:	462a      	mov	r2, r5
 800e576:	a91e      	add	r1, sp, #120	@ 0x78
 800e578:	a814      	add	r0, sp, #80	@ 0x50
 800e57a:	f7f3 fc86 	bl	8001e8a <_lv_area_is_out>
 800e57e:	4683      	mov	fp, r0
 800e580:	2800      	cmp	r0, #0
 800e582:	d1de      	bne.n	800e542 <draw_shadow+0xc6a>
        else simple_sub = simple;
 800e584:	f8dd b000 	ldr.w	fp, [sp]
 800e588:	e7db      	b.n	800e542 <draw_shadow+0xc6a>
                    lv_memcpy(mask_buf, sh_buf_tmp, corner_size);
 800e58a:	4642      	mov	r2, r8
 800e58c:	4621      	mov	r1, r4
 800e58e:	4658      	mov	r0, fp
 800e590:	f008 faaa 	bl	8016ae8 <lv_memcpy>
                    blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e594:	4653      	mov	r3, sl
 800e596:	462a      	mov	r2, r5
 800e598:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e59c:	4658      	mov	r0, fp
 800e59e:	f7fb f89f 	bl	80096e0 <lv_draw_mask_apply>
 800e5a2:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e5a6:	2801      	cmp	r0, #1
 800e5a8:	d012      	beq.n	800e5d0 <draw_shadow+0xcf8>
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e5aa:	a90d      	add	r1, sp, #52	@ 0x34
 800e5ac:	4648      	mov	r0, r9
 800e5ae:	f7fd f893 	bl	800b6d8 <lv_draw_sw_blend>
                sh_buf_tmp += corner_size;
 800e5b2:	4444      	add	r4, r8
            for(y = clip_area_sub.y2; y >= clip_area_sub.y1; y--) {
 800e5b4:	3d01      	subs	r5, #1
 800e5b6:	b22d      	sxth	r5, r5
 800e5b8:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	@ 0x52
 800e5bc:	42ab      	cmp	r3, r5
 800e5be:	dc0b      	bgt.n	800e5d8 <draw_shadow+0xd00>
                blend_area.y1 = y;
 800e5c0:	f8ad 505a 	strh.w	r5, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e5c4:	f8ad 505e 	strh.w	r5, [sp, #94]	@ 0x5e
                if(!simple_sub) {
 800e5c8:	2e00      	cmp	r6, #0
 800e5ca:	d0de      	beq.n	800e58a <draw_shadow+0xcb2>
                    blend_dsc.mask_buf = sh_buf_tmp;
 800e5cc:	9410      	str	r4, [sp, #64]	@ 0x40
 800e5ce:	e7ec      	b.n	800e5aa <draw_shadow+0xcd2>
                    if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e5d0:	2302      	movs	r3, #2
 800e5d2:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 800e5d6:	e7e8      	b.n	800e5aa <draw_shadow+0xcd2>
 800e5d8:	464e      	mov	r6, r9
 800e5da:	e67a      	b.n	800e2d2 <draw_shadow+0x9fa>
       !_lv_area_is_in(&clip_area_sub, &bg_area, r_bg)) {
 800e5dc:	9a02      	ldr	r2, [sp, #8]
 800e5de:	a91e      	add	r1, sp, #120	@ 0x78
 800e5e0:	a814      	add	r0, sp, #80	@ 0x50
 800e5e2:	f7f3 fb3b 	bl	8001c5c <_lv_area_is_in>
    if(_lv_area_intersect(&clip_area_sub, &blend_area, draw_ctx->clip_area) &&
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	f47f ae91 	bne.w	800e30e <draw_shadow+0xa36>
 800e5ec:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	@ 0x54
 800e5f0:	b29d      	uxth	r5, r3
 800e5f2:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	@ 0x50
 800e5f6:	b291      	uxth	r1, r2
 800e5f8:	1a6d      	subs	r5, r5, r1
 800e5fa:	b2ad      	uxth	r5, r5
 800e5fc:	3501      	adds	r5, #1
 800e5fe:	b22d      	sxth	r5, r5
        if(w > 0) {
 800e600:	2d00      	cmp	r5, #0
 800e602:	f77f ae84 	ble.w	800e30e <draw_shadow+0xa36>
            blend_area.x1 = clip_area_sub.x1;
 800e606:	f8ad 2058 	strh.w	r2, [sp, #88]	@ 0x58
            blend_area.x2 = clip_area_sub.x2;
 800e60a:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e60e:	f9bd 4052 	ldrsh.w	r4, [sp, #82]	@ 0x52
 800e612:	9f04      	ldr	r7, [sp, #16]
 800e614:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 800e618:	42a3      	cmp	r3, r4
 800e61a:	f6ff ae78 	blt.w	800e30e <draw_shadow+0xa36>
                blend_area.y1 = y;
 800e61e:	f8ad 405a 	strh.w	r4, [sp, #90]	@ 0x5a
                blend_area.y2 = y;
 800e622:	f8ad 405e 	strh.w	r4, [sp, #94]	@ 0x5e
                lv_memset_ff(mask_buf, w);
 800e626:	4629      	mov	r1, r5
 800e628:	4638      	mov	r0, r7
 800e62a:	f008 fb75 	bl	8016d18 <lv_memset_ff>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clip_area_sub.x1, y, w);
 800e62e:	462b      	mov	r3, r5
 800e630:	4622      	mov	r2, r4
 800e632:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 800e636:	4638      	mov	r0, r7
 800e638:	f7fb f852 	bl	80096e0 <lv_draw_mask_apply>
 800e63c:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e640:	a90d      	add	r1, sp, #52	@ 0x34
 800e642:	4630      	mov	r0, r6
 800e644:	f7fd f848 	bl	800b6d8 <lv_draw_sw_blend>
            for(y = clip_area_sub.y1; y <= clip_area_sub.y2; y++) {
 800e648:	3401      	adds	r4, #1
 800e64a:	b224      	sxth	r4, r4
 800e64c:	e7e2      	b.n	800e614 <draw_shadow+0xd3c>
        lv_draw_mask_free_param(&mask_rout_param);
 800e64e:	a818      	add	r0, sp, #96	@ 0x60
 800e650:	f7fb f89c 	bl	800978c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rout_id);
 800e654:	9807      	ldr	r0, [sp, #28]
 800e656:	f7fb f86d 	bl	8009734 <lv_draw_mask_remove_id>
 800e65a:	e65c      	b.n	800e316 <draw_shadow+0xa3e>
 800e65c:	4770      	bx	lr

0800e65e <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
 800e65e:	78cb      	ldrb	r3, [r1, #3]
 800e660:	2b02      	cmp	r3, #2
 800e662:	f240 81f1 	bls.w	800ea48 <draw_bg+0x3ea>
{
 800e666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66a:	b09b      	sub	sp, #108	@ 0x6c
 800e66c:	4681      	mov	r9, r0
 800e66e:	460c      	mov	r4, r1
    dest->x1 = src->x1;
 800e670:	f9b2 5000 	ldrsh.w	r5, [r2]
 800e674:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
    dest->y1 = src->y1;
 800e678:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800e67c:	f8ad 0062 	strh.w	r0, [sp, #98]	@ 0x62
    dest->x2 = src->x2;
 800e680:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800e684:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
    dest->y2 = src->y2;
 800e688:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800e68c:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
 800e690:	f9b4 2020 	ldrsh.w	r2, [r4, #32]
 800e694:	2a01      	cmp	r2, #1
 800e696:	dd20      	ble.n	800e6da <draw_bg+0x7c>
 800e698:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
 800e69c:	2afc      	cmp	r2, #252	@ 0xfc
 800e69e:	d91c      	bls.n	800e6da <draw_bg+0x7c>
 800e6a0:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e6a4:	b1ca      	cbz	r2, 800e6da <draw_bg+0x7c>
        bg_coords.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
 800e6a6:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800e6aa:	f3c2 06c0 	ubfx	r6, r2, #3, #1
 800e6ae:	fa16 f585 	uxtah	r5, r6, r5
 800e6b2:	f8ad 5060 	strh.w	r5, [sp, #96]	@ 0x60
        bg_coords.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
 800e6b6:	f3c2 0580 	ubfx	r5, r2, #2, #1
 800e6ba:	fa15 f080 	uxtah	r0, r5, r0
 800e6be:	f8ad 0062 	strh.w	r0, [sp, #98]	@ 0x62
        bg_coords.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
 800e6c2:	b289      	uxth	r1, r1
 800e6c4:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800e6c8:	1a09      	subs	r1, r1, r0
 800e6ca:	f8ad 1064 	strh.w	r1, [sp, #100]	@ 0x64
        bg_coords.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800e6d4:	1a9b      	subs	r3, r3, r2
 800e6d6:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66
    if(!_lv_area_intersect(&clipped_coords, &bg_coords, draw_ctx->clip_area)) return;
 800e6da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800e6de:	a918      	add	r1, sp, #96	@ 0x60
 800e6e0:	a816      	add	r0, sp, #88	@ 0x58
 800e6e2:	f7f3 f987 	bl	80019f4 <_lv_area_intersect>
 800e6e6:	2800      	cmp	r0, #0
 800e6e8:	f000 817a 	beq.w	800e9e0 <draw_bg+0x382>
    lv_grad_dir_t grad_dir = dsc->bg_grad.dir;
 800e6ec:	f894 a00f 	ldrb.w	sl, [r4, #15]
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800e6f0:	f01a 0a07 	ands.w	sl, sl, #7
 800e6f4:	d178      	bne.n	800e7e8 <draw_bg+0x18a>
 800e6f6:	88a5      	ldrh	r5, [r4, #4]
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800e6f8:	b2ab      	uxth	r3, r5
 800e6fa:	8962      	ldrh	r2, [r4, #10]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d075      	beq.n	800e7ec <draw_bg+0x18e>
    bool mask_any = lv_draw_mask_is_any(&bg_coords);
 800e700:	a818      	add	r0, sp, #96	@ 0x60
 800e702:	f7fb f87f 	bl	8009804 <lv_draw_mask_is_any>
    lv_draw_sw_blend_dsc_t blend_dsc = {0};
 800e706:	2300      	movs	r3, #0
 800e708:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e70a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e70c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e70e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e710:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e712:	9314      	str	r3, [sp, #80]	@ 0x50
 800e714:	9315      	str	r3, [sp, #84]	@ 0x54
    blend_dsc.blend_mode = dsc->blend_mode;
 800e716:	78a3      	ldrb	r3, [r4, #2]
 800e718:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
    blend_dsc.color = bg_color;
 800e71c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
    if(!mask_any && dsc->radius == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
 800e720:	9002      	str	r0, [sp, #8]
 800e722:	b928      	cbnz	r0, 800e730 <draw_bg+0xd2>
 800e724:	f9b4 3000 	ldrsh.w	r3, [r4]
 800e728:	b913      	cbnz	r3, 800e730 <draw_bg+0xd2>
 800e72a:	f1ba 0f00 	cmp.w	sl, #0
 800e72e:	d060      	beq.n	800e7f2 <draw_bg+0x194>
    lv_opa_t opa = dsc->bg_opa >= LV_OPA_MAX ? LV_OPA_COVER : dsc->bg_opa;
 800e730:	78e3      	ldrb	r3, [r4, #3]
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	2bfc      	cmp	r3, #252	@ 0xfc
 800e736:	d901      	bls.n	800e73c <draw_bg+0xde>
 800e738:	23ff      	movs	r3, #255	@ 0xff
 800e73a:	9300      	str	r3, [sp, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e73c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800e740:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 800e744:	1aed      	subs	r5, r5, r3
 800e746:	b2ad      	uxth	r5, r5
 800e748:	3501      	adds	r5, #1
 800e74a:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800e74c:	f8bd 7066 	ldrh.w	r7, [sp, #102]	@ 0x66
 800e750:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 800e754:	1aff      	subs	r7, r7, r3
 800e756:	b2bf      	uxth	r7, r7
 800e758:	3701      	adds	r7, #1
 800e75a:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MIN(coords_bg_w, coords_bg_h);
 800e75c:	46bb      	mov	fp, r7
 800e75e:	42af      	cmp	r7, r5
 800e760:	bfa8      	it	ge
 800e762:	46ab      	movge	fp, r5
    int32_t rout = LV_MIN(dsc->radius, short_side >> 1);
 800e764:	ea4f 0b6b 	mov.w	fp, fp, asr #1
 800e768:	f9b4 3000 	ldrsh.w	r3, [r4]
 800e76c:	459b      	cmp	fp, r3
 800e76e:	bfa8      	it	ge
 800e770:	469b      	movge	fp, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800e772:	f8bd 605c 	ldrh.w	r6, [sp, #92]	@ 0x5c
 800e776:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 800e77a:	1af6      	subs	r6, r6, r3
 800e77c:	b2b6      	uxth	r6, r6
 800e77e:	3601      	adds	r6, #1
 800e780:	b236      	sxth	r6, r6
    if(rout > 0 || mask_any) {
 800e782:	f1bb 0f00 	cmp.w	fp, #0
 800e786:	dc02      	bgt.n	800e78e <draw_bg+0x130>
 800e788:	9b02      	ldr	r3, [sp, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d03b      	beq.n	800e806 <draw_bg+0x1a8>
        mask_buf = lv_mem_buf_get(clipped_w);
 800e78e:	4630      	mov	r0, r6
 800e790:	f008 f914 	bl	80169bc <lv_mem_buf_get>
 800e794:	4680      	mov	r8, r0
        lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, rout, false);
 800e796:	2300      	movs	r3, #0
 800e798:	465a      	mov	r2, fp
 800e79a:	a918      	add	r1, sp, #96	@ 0x60
 800e79c:	a809      	add	r0, sp, #36	@ 0x24
 800e79e:	f7fb f9ab 	bl	8009af8 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	a809      	add	r0, sp, #36	@ 0x24
 800e7a6:	f7fa ff81 	bl	80096ac <lv_draw_mask_add>
 800e7aa:	9003      	str	r0, [sp, #12]
    blend_area.x1 = clipped_coords.x1;
 800e7ac:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	@ 0x58
 800e7b0:	f8ad 301c 	strh.w	r3, [sp, #28]
    blend_area.x2 = clipped_coords.x2;
 800e7b4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 800e7b8:	f8ad 3020 	strh.w	r3, [sp, #32]
    blend_dsc.mask_buf = mask_buf;
 800e7bc:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
    blend_dsc.blend_area = &blend_area;
 800e7c0:	ab07      	add	r3, sp, #28
 800e7c2:	930f      	str	r3, [sp, #60]	@ 0x3c
    blend_dsc.mask_area = &blend_area;
 800e7c4:	9314      	str	r3, [sp, #80]	@ 0x50
    blend_dsc.opa = LV_OPA_COVER;
 800e7c6:	23ff      	movs	r3, #255	@ 0xff
 800e7c8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
    lv_grad_t * grad = lv_gradient_get(&dsc->bg_grad, coords_bg_w, coords_bg_h);
 800e7cc:	463a      	mov	r2, r7
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	1da0      	adds	r0, r4, #6
 800e7d2:	f7fd fa89 	bl	800bce8 <lv_gradient_get>
    if(grad && grad_dir == LV_GRAD_DIR_HOR) {
 800e7d6:	9001      	str	r0, [sp, #4]
 800e7d8:	b110      	cbz	r0, 800e7e0 <draw_bg+0x182>
 800e7da:	f1ba 0f02 	cmp.w	sl, #2
 800e7de:	d018      	beq.n	800e812 <draw_bg+0x1b4>
    if(mask_any) {
 800e7e0:	9b02      	ldr	r3, [sp, #8]
 800e7e2:	bb03      	cbnz	r3, 800e826 <draw_bg+0x1c8>
    for(h = 0; h < rout; h++) {
 800e7e4:	2700      	movs	r7, #0
 800e7e6:	e066      	b.n	800e8b6 <draw_bg+0x258>
    lv_color_t bg_color    = grad_dir == LV_GRAD_DIR_NONE ? dsc->bg_color : dsc->bg_grad.stops[0].color;
 800e7e8:	88e5      	ldrh	r5, [r4, #6]
 800e7ea:	e785      	b.n	800e6f8 <draw_bg+0x9a>
    if(bg_color.full == dsc->bg_grad.stops[1].color.full) grad_dir = LV_GRAD_DIR_NONE;
 800e7ec:	f04f 0a00 	mov.w	sl, #0
 800e7f0:	e786      	b.n	800e700 <draw_bg+0xa2>
        blend_dsc.blend_area = &bg_coords;
 800e7f2:	ab18      	add	r3, sp, #96	@ 0x60
 800e7f4:	930f      	str	r3, [sp, #60]	@ 0x3c
        blend_dsc.opa = dsc->bg_opa;
 800e7f6:	78e3      	ldrb	r3, [r4, #3]
 800e7f8:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e7fc:	a90f      	add	r1, sp, #60	@ 0x3c
 800e7fe:	4648      	mov	r0, r9
 800e800:	f7fc ff6a 	bl	800b6d8 <lv_draw_sw_blend>
        return;
 800e804:	e0ec      	b.n	800e9e0 <draw_bg+0x382>
    lv_opa_t * mask_buf = NULL;
 800e806:	f04f 0800 	mov.w	r8, #0
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800e80a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e80e:	9303      	str	r3, [sp, #12]
 800e810:	e7cc      	b.n	800e7ac <draw_bg+0x14e>
        blend_dsc.src_buf = grad->map + clipped_coords.x1 - bg_coords.x1;
 800e812:	6883      	ldr	r3, [r0, #8]
 800e814:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	@ 0x58
 800e818:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	@ 0x60
 800e81c:	1a52      	subs	r2, r2, r1
 800e81e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e822:	9310      	str	r3, [sp, #64]	@ 0x40
 800e824:	e7dc      	b.n	800e7e0 <draw_bg+0x182>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800e826:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	@ 0x5a
 800e82a:	9d00      	ldr	r5, [sp, #0]
 800e82c:	9f01      	ldr	r7, [sp, #4]
 800e82e:	e008      	b.n	800e842 <draw_bg+0x1e4>
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e830:	2302      	movs	r3, #2
 800e832:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e836:	e01f      	b.n	800e878 <draw_bg+0x21a>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e838:	a90f      	add	r1, sp, #60	@ 0x3c
 800e83a:	4648      	mov	r0, r9
 800e83c:	f7fc ff4c 	bl	800b6d8 <lv_draw_sw_blend>
        for(h = clipped_coords.y1; h <= clipped_coords.y2; h++) {
 800e840:	3401      	adds	r4, #1
 800e842:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800e846:	42a3      	cmp	r3, r4
 800e848:	f2c0 80bb 	blt.w	800e9c2 <draw_bg+0x364>
            blend_area.y1 = h;
 800e84c:	fa0f fb84 	sxth.w	fp, r4
 800e850:	f8ad b01e 	strh.w	fp, [sp, #30]
            blend_area.y2 = h;
 800e854:	f8ad b022 	strh.w	fp, [sp, #34]	@ 0x22
            lv_memset(mask_buf, opa, clipped_w);
 800e858:	4632      	mov	r2, r6
 800e85a:	4629      	mov	r1, r5
 800e85c:	4640      	mov	r0, r8
 800e85e:	f008 f9d3 	bl	8016c08 <lv_memset>
            blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800e862:	4633      	mov	r3, r6
 800e864:	465a      	mov	r2, fp
 800e866:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	@ 0x58
 800e86a:	4640      	mov	r0, r8
 800e86c:	f7fa ff38 	bl	80096e0 <lv_draw_mask_apply>
 800e870:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
            if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e874:	2801      	cmp	r0, #1
 800e876:	d0db      	beq.n	800e830 <draw_bg+0x1d2>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800e878:	f1ba 0f01 	cmp.w	sl, #1
 800e87c:	d1dc      	bne.n	800e838 <draw_bg+0x1da>
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	@ 0x62
 800e884:	1ae3      	subs	r3, r4, r3
 800e886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e88a:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800e88e:	e7d3      	b.n	800e838 <draw_bg+0x1da>
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e890:	2302      	movs	r3, #2
 800e892:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e896:	e031      	b.n	800e8fc <draw_bg+0x29e>
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	689b      	ldr	r3, [r3, #8]
 800e89c:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 800e8a0:	1aa4      	subs	r4, r4, r2
 800e8a2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800e8a6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800e8aa:	e032      	b.n	800e912 <draw_bg+0x2b4>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e8ac:	a90f      	add	r1, sp, #60	@ 0x3c
 800e8ae:	4648      	mov	r0, r9
 800e8b0:	f7fc ff12 	bl	800b6d8 <lv_draw_sw_blend>
    for(h = 0; h < rout; h++) {
 800e8b4:	3701      	adds	r7, #1
 800e8b6:	455f      	cmp	r7, fp
 800e8b8:	da44      	bge.n	800e944 <draw_bg+0x2e6>
        lv_coord_t top_y = bg_coords.y1 + h;
 800e8ba:	f8bd 4062 	ldrh.w	r4, [sp, #98]	@ 0x62
 800e8be:	b2bb      	uxth	r3, r7
 800e8c0:	441c      	add	r4, r3
 800e8c2:	b224      	sxth	r4, r4
        lv_coord_t bottom_y = bg_coords.y2 - h;
 800e8c4:	f8bd 5066 	ldrh.w	r5, [sp, #102]	@ 0x66
 800e8c8:	1aed      	subs	r5, r5, r3
 800e8ca:	b22d      	sxth	r5, r5
        if(top_y < clipped_coords.y1 && bottom_y > clipped_coords.y2) continue;   /*This line is clipped now*/
 800e8cc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	@ 0x5a
 800e8d0:	42a3      	cmp	r3, r4
 800e8d2:	dd03      	ble.n	800e8dc <draw_bg+0x27e>
 800e8d4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800e8d8:	42ab      	cmp	r3, r5
 800e8da:	dbeb      	blt.n	800e8b4 <draw_bg+0x256>
        lv_memset(mask_buf, opa, clipped_w);
 800e8dc:	4632      	mov	r2, r6
 800e8de:	9900      	ldr	r1, [sp, #0]
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	f008 f991 	bl	8016c08 <lv_memset>
        blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, blend_area.x1, top_y, clipped_w);
 800e8e6:	4633      	mov	r3, r6
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	f7fa fef6 	bl	80096e0 <lv_draw_mask_apply>
 800e8f4:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
        if(blend_dsc.mask_res == LV_DRAW_MASK_RES_FULL_COVER) blend_dsc.mask_res = LV_DRAW_MASK_RES_CHANGED;
 800e8f8:	2801      	cmp	r0, #1
 800e8fa:	d0c9      	beq.n	800e890 <draw_bg+0x232>
        if(top_y >= clipped_coords.y1) {
 800e8fc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	@ 0x5a
 800e900:	42a3      	cmp	r3, r4
 800e902:	dc0a      	bgt.n	800e91a <draw_bg+0x2bc>
            blend_area.y1 = top_y;
 800e904:	f8ad 401e 	strh.w	r4, [sp, #30]
            blend_area.y2 = top_y;
 800e908:	f8ad 4022 	strh.w	r4, [sp, #34]	@ 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[top_y - bg_coords.y1];
 800e90c:	f1ba 0f01 	cmp.w	sl, #1
 800e910:	d0c2      	beq.n	800e898 <draw_bg+0x23a>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e912:	a90f      	add	r1, sp, #60	@ 0x3c
 800e914:	4648      	mov	r0, r9
 800e916:	f7fc fedf 	bl	800b6d8 <lv_draw_sw_blend>
        if(bottom_y <= clipped_coords.y2) {
 800e91a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 800e91e:	42ab      	cmp	r3, r5
 800e920:	dbc8      	blt.n	800e8b4 <draw_bg+0x256>
            blend_area.y1 = bottom_y;
 800e922:	f8ad 501e 	strh.w	r5, [sp, #30]
            blend_area.y2 = bottom_y;
 800e926:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[bottom_y - bg_coords.y1];
 800e92a:	f1ba 0f01 	cmp.w	sl, #1
 800e92e:	d1bd      	bne.n	800e8ac <draw_bg+0x24e>
 800e930:	9b01      	ldr	r3, [sp, #4]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 800e938:	1aad      	subs	r5, r5, r2
 800e93a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e93e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800e942:	e7b3      	b.n	800e8ac <draw_bg+0x24e>
    center_coords.x1 = bg_coords.x1;
 800e944:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	@ 0x60
 800e948:	f8ad 3014 	strh.w	r3, [sp, #20]
    center_coords.x2 = bg_coords.x2;
 800e94c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 800e950:	f8ad 3018 	strh.w	r3, [sp, #24]
    center_coords.y1 = bg_coords.y1 + rout;
 800e954:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 800e958:	fa1f f48b 	uxth.w	r4, fp
 800e95c:	4423      	add	r3, r4
 800e95e:	f8ad 3016 	strh.w	r3, [sp, #22]
    center_coords.y2 = bg_coords.y2 - rout;
 800e962:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 800e966:	1b1b      	subs	r3, r3, r4
 800e968:	f8ad 301a 	strh.w	r3, [sp, #26]
    bool mask_any_center = lv_draw_mask_is_any(&center_coords);
 800e96c:	a805      	add	r0, sp, #20
 800e96e:	f7fa ff49 	bl	8009804 <lv_draw_mask_is_any>
    if(!mask_any_center && grad_dir == LV_GRAD_DIR_NONE) {
 800e972:	4605      	mov	r5, r0
 800e974:	b910      	cbnz	r0, 800e97c <draw_bg+0x31e>
 800e976:	f1ba 0f00 	cmp.w	sl, #0
 800e97a:	d00f      	beq.n	800e99c <draw_bg+0x33e>
        blend_dsc.opa = opa;
 800e97c:	9b00      	ldr	r3, [sp, #0]
 800e97e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
        blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800e982:	2301      	movs	r3, #1
 800e984:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
        int32_t h_end = bg_coords.y2 - rout;
 800e988:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 800e98c:	eba4 040b 	sub.w	r4, r4, fp
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800e990:	f9bd 7062 	ldrsh.w	r7, [sp, #98]	@ 0x62
 800e994:	445f      	add	r7, fp
 800e996:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e99a:	e038      	b.n	800ea0e <draw_bg+0x3b0>
        blend_area.y1 = bg_coords.y1 + rout;
 800e99c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 800e9a0:	4423      	add	r3, r4
 800e9a2:	f8ad 301e 	strh.w	r3, [sp, #30]
        blend_area.y2 = bg_coords.y2 - rout;
 800e9a6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 800e9aa:	1b1b      	subs	r3, r3, r4
 800e9ac:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
        blend_dsc.opa = opa;
 800e9b0:	9b00      	ldr	r3, [sp, #0]
 800e9b2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
        blend_dsc.mask_buf = NULL;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9312      	str	r3, [sp, #72]	@ 0x48
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800e9ba:	a90f      	add	r1, sp, #60	@ 0x3c
 800e9bc:	4648      	mov	r0, r9
 800e9be:	f7fc fe8b 	bl	800b6d8 <lv_draw_sw_blend>
    if(mask_buf) lv_mem_buf_release(mask_buf);
 800e9c2:	f1b8 0f00 	cmp.w	r8, #0
 800e9c6:	d002      	beq.n	800e9ce <draw_bg+0x370>
 800e9c8:	4640      	mov	r0, r8
 800e9ca:	f008 f859 	bl	8016a80 <lv_mem_buf_release>
    if(mask_rout_id != LV_MASK_ID_INV) {
 800e9ce:	9b03      	ldr	r3, [sp, #12]
 800e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9d4:	d131      	bne.n	800ea3a <draw_bg+0x3dc>
    if(grad) {
 800e9d6:	9b01      	ldr	r3, [sp, #4]
 800e9d8:	b113      	cbz	r3, 800e9e0 <draw_bg+0x382>
        lv_gradient_cleanup(grad);
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fd f9d6 	bl	800bd8c <lv_gradient_cleanup>
}
 800e9e0:	b01b      	add	sp, #108	@ 0x6c
 800e9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                lv_memset(mask_buf, opa, clipped_w);
 800e9e6:	4632      	mov	r2, r6
 800e9e8:	9900      	ldr	r1, [sp, #0]
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f008 f90c 	bl	8016c08 <lv_memset>
                blend_dsc.mask_res = lv_draw_mask_apply(mask_buf, clipped_coords.x1, h, clipped_w);
 800e9f0:	4633      	mov	r3, r6
 800e9f2:	b23a      	sxth	r2, r7
 800e9f4:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	@ 0x58
 800e9f8:	4640      	mov	r0, r8
 800e9fa:	f7fa fe71 	bl	80096e0 <lv_draw_mask_apply>
 800e9fe:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
 800ea02:	e008      	b.n	800ea16 <draw_bg+0x3b8>
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ea04:	a90f      	add	r1, sp, #60	@ 0x3c
 800ea06:	4648      	mov	r0, r9
 800ea08:	f7fc fe66 	bl	800b6d8 <lv_draw_sw_blend>
        for(h = bg_coords.y1 + rout; h <= h_end; h++) {
 800ea0c:	3701      	adds	r7, #1
 800ea0e:	42a7      	cmp	r7, r4
 800ea10:	dcd7      	bgt.n	800e9c2 <draw_bg+0x364>
            if(mask_any_center) {
 800ea12:	2d00      	cmp	r5, #0
 800ea14:	d1e7      	bne.n	800e9e6 <draw_bg+0x388>
            blend_area.y1 = h;
 800ea16:	b23b      	sxth	r3, r7
 800ea18:	f8ad 301e 	strh.w	r3, [sp, #30]
            blend_area.y2 = h;
 800ea1c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            if(grad_dir == LV_GRAD_DIR_VER) blend_dsc.color = grad->map[h - bg_coords.y1];
 800ea20:	f1ba 0f01 	cmp.w	sl, #1
 800ea24:	d1ee      	bne.n	800ea04 <draw_bg+0x3a6>
 800ea26:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ea2a:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	@ 0x62
 800ea2e:	1afb      	subs	r3, r7, r3
 800ea30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea34:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 800ea38:	e7e4      	b.n	800ea04 <draw_bg+0x3a6>
        lv_draw_mask_remove_id(mask_rout_id);
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fa fe7a 	bl	8009734 <lv_draw_mask_remove_id>
        lv_draw_mask_free_param(&mask_rout_param);
 800ea40:	a809      	add	r0, sp, #36	@ 0x24
 800ea42:	f7fa fea3 	bl	800978c <lv_draw_mask_free_param>
 800ea46:	e7c6      	b.n	800e9d6 <draw_bg+0x378>
 800ea48:	4770      	bx	lr

0800ea4a <draw_bg_img>:
    if(dsc->bg_img_src == NULL) return;
 800ea4a:	690b      	ldr	r3, [r1, #16]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	f000 811a 	beq.w	800ec86 <draw_bg_img+0x23c>
{
 800ea52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea56:	b092      	sub	sp, #72	@ 0x48
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	4615      	mov	r5, r2
    if(dsc->bg_img_opa <= LV_OPA_MIN) return;
 800ea5e:	7e8b      	ldrb	r3, [r1, #26]
 800ea60:	2b02      	cmp	r3, #2
 800ea62:	d802      	bhi.n	800ea6a <draw_bg_img+0x20>
}
 800ea64:	b012      	add	sp, #72	@ 0x48
 800ea66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!_lv_area_intersect(&clip_area, coords, draw_ctx->clip_area)) {
 800ea6a:	6882      	ldr	r2, [r0, #8]
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	a810      	add	r0, sp, #64	@ 0x40
 800ea70:	f7f2 ffc0 	bl	80019f4 <_lv_area_intersect>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d0f5      	beq.n	800ea64 <draw_bg_img+0x1a>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800ea78:	68b7      	ldr	r7, [r6, #8]
    draw_ctx->clip_area = &clip_area;
 800ea7a:	ab10      	add	r3, sp, #64	@ 0x40
 800ea7c:	60b3      	str	r3, [r6, #8]
    lv_img_src_t src_type = lv_img_src_get_type(dsc->bg_img_src);
 800ea7e:	6920      	ldr	r0, [r4, #16]
 800ea80:	f7f9 f902 	bl	8007c88 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_SYMBOL) {
 800ea84:	2802      	cmp	r0, #2
 800ea86:	d007      	beq.n	800ea98 <draw_bg_img+0x4e>
        lv_res_t res = lv_img_decoder_get_info(dsc->bg_img_src, &header);
 800ea88:	a905      	add	r1, sp, #20
 800ea8a:	6920      	ldr	r0, [r4, #16]
 800ea8c:	f005 fd82 	bl	8014594 <lv_img_decoder_get_info>
        if(res == LV_RES_OK) {
 800ea90:	2801      	cmp	r0, #1
 800ea92:	d05a      	beq.n	800eb4a <draw_bg_img+0x100>
    draw_ctx->clip_area = clip_area_ori;
 800ea94:	60b7      	str	r7, [r6, #8]
 800ea96:	e7e5      	b.n	800ea64 <draw_bg_img+0x1a>
        lv_txt_get_size(&size, dsc->bg_img_src, dsc->bg_img_symbol_font, 0, 0, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 800ea98:	f04f 0800 	mov.w	r8, #0
 800ea9c:	f8cd 8008 	str.w	r8, [sp, #8]
 800eaa0:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	f8cd 8000 	str.w	r8, [sp]
 800eaaa:	4643      	mov	r3, r8
 800eaac:	6962      	ldr	r2, [r4, #20]
 800eaae:	6921      	ldr	r1, [r4, #16]
 800eab0:	a805      	add	r0, sp, #20
 800eab2:	f018 ff2a 	bl	802790a <lv_txt_get_size>
        a.x1 = coords->x1 + lv_area_get_width(coords) / 2 - size.x / 2;
 800eab6:	882b      	ldrh	r3, [r5, #0]
 800eab8:	88aa      	ldrh	r2, [r5, #4]
 800eaba:	1ad2      	subs	r2, r2, r3
 800eabc:	b292      	uxth	r2, r2
 800eabe:	3201      	adds	r2, #1
 800eac0:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 800eac4:	fa01 f282 	sxtah	r2, r1, r2
 800eac8:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800eacc:	b29b      	uxth	r3, r3
 800eace:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800ead2:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 800ead6:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 800eada:	f8ad 3018 	strh.w	r3, [sp, #24]
        a.x2 = a.x1 + size.x - 1;
 800eade:	b292      	uxth	r2, r2
 800eae0:	fa12 f383 	uxtah	r3, r2, r3
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	3b01      	subs	r3, #1
 800eae8:	f8ad 301c 	strh.w	r3, [sp, #28]
        a.y1 = coords->y1 + lv_area_get_height(coords) / 2 - size.y / 2;
 800eaec:	886b      	ldrh	r3, [r5, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800eaee:	88ea      	ldrh	r2, [r5, #6]
 800eaf0:	1ad2      	subs	r2, r2, r3
 800eaf2:	b292      	uxth	r2, r2
 800eaf4:	3201      	adds	r2, #1
 800eaf6:	f3c2 31c0 	ubfx	r1, r2, #15, #1
 800eafa:	fa01 f282 	sxtah	r2, r1, r2
 800eafe:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 800eb08:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 800eb0c:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 800eb10:	f8ad 301a 	strh.w	r3, [sp, #26]
        a.y2 = a.y1 + size.y - 1;
 800eb14:	b292      	uxth	r2, r2
 800eb16:	fa12 f383 	uxtah	r3, r2, r3
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_draw_label_dsc_init(&label_draw_dsc);
 800eb22:	a808      	add	r0, sp, #32
 800eb24:	f7f9 fa40 	bl	8007fa8 <lv_draw_label_dsc_init>
        label_draw_dsc.font = dsc->bg_img_symbol_font;
 800eb28:	6963      	ldr	r3, [r4, #20]
 800eb2a:	9308      	str	r3, [sp, #32]
        label_draw_dsc.color = dsc->bg_img_recolor;
 800eb2c:	8b23      	ldrh	r3, [r4, #24]
 800eb2e:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
        label_draw_dsc.opa = dsc->bg_img_opa;
 800eb32:	7ea3      	ldrb	r3, [r4, #26]
 800eb34:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
        lv_draw_label(draw_ctx, &label_draw_dsc, &a, dsc->bg_img_src, NULL);
 800eb38:	f8cd 8000 	str.w	r8, [sp]
 800eb3c:	6923      	ldr	r3, [r4, #16]
 800eb3e:	aa06      	add	r2, sp, #24
 800eb40:	a908      	add	r1, sp, #32
 800eb42:	4630      	mov	r0, r6
 800eb44:	f7f9 fa60 	bl	8008008 <lv_draw_label>
 800eb48:	e7a4      	b.n	800ea94 <draw_bg_img+0x4a>
            lv_draw_img_dsc_init(&img_dsc);
 800eb4a:	a808      	add	r0, sp, #32
 800eb4c:	f7f9 f854 	bl	8007bf8 <lv_draw_img_dsc_init>
            img_dsc.blend_mode = dsc->blend_mode;
 800eb50:	78a2      	ldrb	r2, [r4, #2]
 800eb52:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800eb56:	f362 0303 	bfi	r3, r2, #0, #4
 800eb5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
            img_dsc.recolor = dsc->bg_img_recolor;
 800eb5e:	8b23      	ldrh	r3, [r4, #24]
 800eb60:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
            img_dsc.recolor_opa = dsc->bg_img_recolor_opa;
 800eb64:	7ee3      	ldrb	r3, [r4, #27]
 800eb66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
            img_dsc.opa = dsc->bg_img_opa;
 800eb6a:	7ea3      	ldrb	r3, [r4, #26]
 800eb6c:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
            if(dsc->bg_img_tiled == false) {
 800eb70:	7f23      	ldrb	r3, [r4, #28]
 800eb72:	b173      	cbz	r3, 800eb92 <draw_bg_img+0x148>
                area.y1 = coords->y1;
 800eb74:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800eb78:	f8ad 301a 	strh.w	r3, [sp, #26]
                area.y2 = area.y1 + header.h - 1;
 800eb7c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800eb80:	f3c2 124a 	ubfx	r2, r2, #5, #11
 800eb84:	fa12 f383 	uxtah	r3, r2, r3
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	f8ad 301e 	strh.w	r3, [sp, #30]
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800eb90:	e064      	b.n	800ec5c <draw_bg_img+0x212>
                area.x1 = coords->x1 + lv_area_get_width(coords) / 2 - header.w / 2;
 800eb92:	882a      	ldrh	r2, [r5, #0]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800eb94:	88ab      	ldrh	r3, [r5, #4]
 800eb96:	1a9b      	subs	r3, r3, r2
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 800eba0:	fa01 f383 	sxtah	r3, r1, r3
 800eba4:	eb02 0263 	add.w	r2, r2, r3, asr #1
 800eba8:	9b05      	ldr	r3, [sp, #20]
 800ebaa:	f3c3 208a 	ubfx	r0, r3, #10, #11
 800ebae:	f3c3 23c9 	ubfx	r3, r3, #11, #10
 800ebb2:	425b      	negs	r3, r3
 800ebb4:	fa13 f282 	uxtah	r2, r3, r2
 800ebb8:	f8ad 2018 	strh.w	r2, [sp, #24]
                area.y1 = coords->y1 + lv_area_get_height(coords) / 2 - header.h / 2;
 800ebbc:	886b      	ldrh	r3, [r5, #2]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800ebbe:	88e9      	ldrh	r1, [r5, #6]
 800ebc0:	1ac9      	subs	r1, r1, r3
 800ebc2:	b289      	uxth	r1, r1
 800ebc4:	3101      	adds	r1, #1
 800ebc6:	f3c1 35c0 	ubfx	r5, r1, #15, #1
 800ebca:	fa05 f181 	sxtah	r1, r5, r1
 800ebce:	eb03 0361 	add.w	r3, r3, r1, asr #1
 800ebd2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800ebd6:	f3c1 154a 	ubfx	r5, r1, #5, #11
 800ebda:	f3c1 1189 	ubfx	r1, r1, #6, #10
 800ebde:	4249      	negs	r1, r1
 800ebe0:	fa11 f383 	uxtah	r3, r1, r3
 800ebe4:	f8ad 301a 	strh.w	r3, [sp, #26]
                area.x2 = area.x1 + header.w - 1;
 800ebe8:	fa10 f282 	uxtah	r2, r0, r2
 800ebec:	b292      	uxth	r2, r2
 800ebee:	3a01      	subs	r2, #1
 800ebf0:	f8ad 201c 	strh.w	r2, [sp, #28]
                area.y2 = area.y1 + header.h - 1;
 800ebf4:	fa15 f383 	uxtah	r3, r5, r3
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	f8ad 301e 	strh.w	r3, [sp, #30]
                lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800ec00:	6923      	ldr	r3, [r4, #16]
 800ec02:	aa06      	add	r2, sp, #24
 800ec04:	a908      	add	r1, sp, #32
 800ec06:	4630      	mov	r0, r6
 800ec08:	f7f9 f984 	bl	8007f14 <lv_draw_img>
 800ec0c:	e742      	b.n	800ea94 <draw_bg_img+0x4a>
                        lv_draw_img(draw_ctx, &img_dsc, &area, dsc->bg_img_src);
 800ec0e:	6923      	ldr	r3, [r4, #16]
 800ec10:	aa06      	add	r2, sp, #24
 800ec12:	a908      	add	r1, sp, #32
 800ec14:	4630      	mov	r0, r6
 800ec16:	f7f9 f97d 	bl	8007f14 <lv_draw_img>
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ec1a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 800ec1e:	9b05      	ldr	r3, [sp, #20]
 800ec20:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ec24:	441a      	add	r2, r3
 800ec26:	f8ad 2018 	strh.w	r2, [sp, #24]
 800ec2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ec2e:	4413      	add	r3, r2
 800ec30:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec34:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 800ec38:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	dde6      	ble.n	800ec0e <draw_bg_img+0x1c4>
                for(; area.y1 <= coords->y2; area.y1 += header.h, area.y2 += header.h) {
 800ec40:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800ec44:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 800ec48:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800ec4c:	441a      	add	r2, r3
 800ec4e:	f8ad 201a 	strh.w	r2, [sp, #26]
 800ec52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ec56:	4413      	add	r3, r2
 800ec58:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ec5c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 800ec60:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	f73f af15 	bgt.w	800ea94 <draw_bg_img+0x4a>
                    area.x1 = coords->x1;
 800ec6a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800ec6e:	f8ad 3018 	strh.w	r3, [sp, #24]
                    area.x2 = area.x1 + header.w - 1;
 800ec72:	9a05      	ldr	r2, [sp, #20]
 800ec74:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800ec78:	fa12 f383 	uxtah	r3, r2, r3
 800ec7c:	b29b      	uxth	r3, r3
 800ec7e:	3b01      	subs	r3, #1
 800ec80:	f8ad 301c 	strh.w	r3, [sp, #28]
                    for(; area.x1 <= coords->x2; area.x1 += header.w, area.x2 += header.w) {
 800ec84:	e7d6      	b.n	800ec34 <draw_bg_img+0x1ea>
 800ec86:	4770      	bx	lr

0800ec88 <lv_draw_sw_bg>:
{
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	4616      	mov	r6, r2
    draw_bg(draw_ctx, dsc, coords);
 800ec90:	f7ff fce5 	bl	800e65e <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 800ec94:	4632      	mov	r2, r6
 800ec96:	4629      	mov	r1, r5
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f7ff fed6 	bl	800ea4a <draw_bg_img>
}
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}

0800eca0 <draw_border_generic>:
{
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	b0ab      	sub	sp, #172	@ 0xac
 800eca6:	4606      	mov	r6, r0
 800eca8:	460c      	mov	r4, r1
 800ecaa:	9203      	str	r2, [sp, #12]
 800ecac:	461f      	mov	r7, r3
 800ecae:	f9bd 90d0 	ldrsh.w	r9, [sp, #208]	@ 0xd0
 800ecb2:	f89d a0d8 	ldrb.w	sl, [sp, #216]	@ 0xd8
    bool mask_any = lv_draw_mask_is_any(outer_area);
 800ecb6:	4608      	mov	r0, r1
 800ecb8:	f7fa fda4 	bl	8009804 <lv_draw_mask_is_any>
    if(!mask_any && rout == 0 && rin == 0) {
 800ecbc:	9006      	str	r0, [sp, #24]
 800ecbe:	b918      	cbnz	r0, 800ecc8 <draw_border_generic+0x28>
 800ecc0:	b917      	cbnz	r7, 800ecc8 <draw_border_generic+0x28>
 800ecc2:	f1b9 0f00 	cmp.w	r9, #0
 800ecc6:	d009      	beq.n	800ecdc <draw_border_generic+0x3c>
    if(!_lv_area_intersect(&draw_area, outer_area, draw_ctx->clip_area)) return;
 800ecc8:	68b2      	ldr	r2, [r6, #8]
 800ecca:	4621      	mov	r1, r4
 800eccc:	a828      	add	r0, sp, #160	@ 0xa0
 800ecce:	f7f2 fe91 	bl	80019f4 <_lv_area_intersect>
 800ecd2:	9005      	str	r0, [sp, #20]
 800ecd4:	b960      	cbnz	r0, 800ecf0 <draw_border_generic+0x50>
}
 800ecd6:	b02b      	add	sp, #172	@ 0xac
 800ecd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        draw_border_simple(draw_ctx, outer_area, inner_area, color, opa);
 800ecdc:	f8cd a000 	str.w	sl, [sp]
 800ece0:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 800ece4:	9a03      	ldr	r2, [sp, #12]
 800ece6:	4621      	mov	r1, r4
 800ece8:	4630      	mov	r0, r6
 800ecea:	f7fe fbf5 	bl	800d4d8 <draw_border_simple>
        return;
 800ecee:	e7f2      	b.n	800ecd6 <draw_border_generic+0x36>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800ecf0:	f8bd 50a4 	ldrh.w	r5, [sp, #164]	@ 0xa4
 800ecf4:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	@ 0xa0
 800ecf8:	1aed      	subs	r5, r5, r3
 800ecfa:	b2ad      	uxth	r5, r5
 800ecfc:	3501      	adds	r5, #1
 800ecfe:	b22d      	sxth	r5, r5
    lv_memset_00(&blend_dsc, sizeof(blend_dsc));
 800ed00:	211c      	movs	r1, #28
 800ed02:	a821      	add	r0, sp, #132	@ 0x84
 800ed04:	f007 ffde 	bl	8016cc4 <lv_memset_00>
    blend_dsc.mask_buf = lv_mem_buf_get(draw_area_w);;
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f007 fe57 	bl	80169bc <lv_mem_buf_get>
 800ed0e:	9024      	str	r0, [sp, #144]	@ 0x90
    if(rout > 0) {
 800ed10:	2f00      	cmp	r7, #0
 800ed12:	f300 80a4 	bgt.w	800ee5e <draw_border_generic+0x1be>
    int16_t mask_rout_id = LV_MASK_ID_INV;
 800ed16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed1a:	930d      	str	r3, [sp, #52]	@ 0x34
    lv_draw_mask_radius_init(&mask_rin_param, inner_area, rin, true);
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	464a      	mov	r2, r9
 800ed20:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ed24:	4641      	mov	r1, r8
 800ed26:	a815      	add	r0, sp, #84	@ 0x54
 800ed28:	f7fa fee6 	bl	8009af8 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	a815      	add	r0, sp, #84	@ 0x54
 800ed30:	f7fa fcbc 	bl	80096ac <lv_draw_mask_add>
 800ed34:	900c      	str	r0, [sp, #48]	@ 0x30
    blend_dsc.blend_area = &blend_area;
 800ed36:	ab13      	add	r3, sp, #76	@ 0x4c
 800ed38:	9321      	str	r3, [sp, #132]	@ 0x84
    blend_dsc.mask_area = &blend_area;
 800ed3a:	9326      	str	r3, [sp, #152]	@ 0x98
    blend_dsc.color = color;
 800ed3c:	f8bd 30d4 	ldrh.w	r3, [sp, #212]	@ 0xd4
 800ed40:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
    blend_dsc.opa = opa;
 800ed44:	f88d a09c 	strb.w	sl, [sp, #156]	@ 0x9c
    blend_dsc.blend_mode = blend_mode;
 800ed48:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 800ed4c:	f88d 309d 	strb.w	r3, [sp, #157]	@ 0x9d
    core_area.x1 = LV_MAX(outer_area->x1 + rout, inner_area->x1);
 800ed50:	f9b8 3000 	ldrsh.w	r3, [r8]
 800ed54:	9307      	str	r3, [sp, #28]
 800ed56:	f9b4 2000 	ldrsh.w	r2, [r4]
 800ed5a:	9208      	str	r2, [sp, #32]
 800ed5c:	443a      	add	r2, r7
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	bfb8      	it	lt
 800ed62:	461a      	movlt	r2, r3
 800ed64:	b213      	sxth	r3, r2
 800ed66:	930e      	str	r3, [sp, #56]	@ 0x38
 800ed68:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    core_area.x2 = LV_MIN(outer_area->x2 - rout, inner_area->x2);
 800ed6c:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
 800ed70:	9009      	str	r0, [sp, #36]	@ 0x24
 800ed72:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ed76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed78:	1bdb      	subs	r3, r3, r7
 800ed7a:	4283      	cmp	r3, r0
 800ed7c:	bfa8      	it	ge
 800ed7e:	4603      	movge	r3, r0
 800ed80:	b218      	sxth	r0, r3
 800ed82:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ed84:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
    core_area.y1 = LV_MAX(outer_area->y1 + rout, inner_area->y1);
 800ed88:	f9b8 b002 	ldrsh.w	fp, [r8, #2]
 800ed8c:	f9b4 a002 	ldrsh.w	sl, [r4, #2]
 800ed90:	eb07 090a 	add.w	r9, r7, sl
 800ed94:	45d9      	cmp	r9, fp
 800ed96:	bfb8      	it	lt
 800ed98:	46d9      	movlt	r9, fp
 800ed9a:	fa0f f989 	sxth.w	r9, r9
 800ed9e:	f8ad 9046 	strh.w	r9, [sp, #70]	@ 0x46
    core_area.y2 = LV_MIN(outer_area->y2 - rout, inner_area->y2);
 800eda2:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800eda6:	4608      	mov	r0, r1
 800eda8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800edaa:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
 800edae:	eba8 0107 	sub.w	r1, r8, r7
 800edb2:	4281      	cmp	r1, r0
 800edb4:	bfa8      	it	ge
 800edb6:	4601      	movge	r1, r0
 800edb8:	b209      	sxth	r1, r1
 800edba:	9104      	str	r1, [sp, #16]
 800edbc:	f8ad 104a 	strh.w	r1, [sp, #74]	@ 0x4a
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	b292      	uxth	r2, r2
 800edc4:	1a9b      	subs	r3, r3, r2
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	3301      	adds	r3, #1
 800edca:	b21b      	sxth	r3, r3
    if(mask_any) {
 800edcc:	9a06      	ldr	r2, [sp, #24]
 800edce:	2a00      	cmp	r2, #0
 800edd0:	d151      	bne.n	800ee76 <draw_border_generic+0x1d6>
    if(left_side && right_side && top_side && bottom_side &&
 800edd2:	9a07      	ldr	r2, [sp, #28]
 800edd4:	9908      	ldr	r1, [sp, #32]
 800edd6:	428a      	cmp	r2, r1
 800edd8:	db0c      	blt.n	800edf4 <draw_border_generic+0x154>
 800edda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edde:	428a      	cmp	r2, r1
 800ede0:	dc08      	bgt.n	800edf4 <draw_border_generic+0x154>
 800ede2:	45d3      	cmp	fp, sl
 800ede4:	db06      	blt.n	800edf4 <draw_border_generic+0x154>
 800ede6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ede8:	4542      	cmp	r2, r8
 800edea:	dc03      	bgt.n	800edf4 <draw_border_generic+0x154>
 800edec:	2b31      	cmp	r3, #49	@ 0x31
 800edee:	dc01      	bgt.n	800edf4 <draw_border_generic+0x154>
        split_hor = false;
 800edf0:	9b06      	ldr	r3, [sp, #24]
 800edf2:	9305      	str	r3, [sp, #20]
    blend_dsc.mask_res = LV_DRAW_MASK_RES_FULL_COVER;
 800edf4:	2301      	movs	r3, #1
 800edf6:	f88d 3094 	strb.w	r3, [sp, #148]	@ 0x94
    if(top_side && split_hor) {
 800edfa:	45d3      	cmp	fp, sl
 800edfc:	db03      	blt.n	800ee06 <draw_border_generic+0x166>
 800edfe:	9b05      	ldr	r3, [sp, #20]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f040 8081 	bne.w	800ef08 <draw_border_generic+0x268>
    if(bottom_side && split_hor) {
 800ee06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee08:	4543      	cmp	r3, r8
 800ee0a:	dc03      	bgt.n	800ee14 <draw_border_generic+0x174>
 800ee0c:	9b05      	ldr	r3, [sp, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f040 808e 	bne.w	800ef30 <draw_border_generic+0x290>
    if(left_side) {
 800ee14:	9b07      	ldr	r3, [sp, #28]
 800ee16:	9a08      	ldr	r2, [sp, #32]
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	f280 809d 	bge.w	800ef58 <draw_border_generic+0x2b8>
    if(right_side) {
 800ee1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee22:	4293      	cmp	r3, r2
 800ee24:	f340 80ab 	ble.w	800ef7e <draw_border_generic+0x2de>
    if(!split_hor) {
 800ee28:	9b05      	ldr	r3, [sp, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 80fa 	bne.w	800f024 <draw_border_generic+0x384>
        blend_area.x1 = draw_area.x1;
 800ee30:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	@ 0xa0
 800ee34:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = draw_area.x2;
 800ee38:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 800ee3c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        lv_coord_t max_h = LV_MAX(rout, inner_area->y1 - outer_area->y1);
 800ee40:	9b03      	ldr	r3, [sp, #12]
 800ee42:	f9b3 a002 	ldrsh.w	sl, [r3, #2]
 800ee46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ee4a:	ebaa 0a03 	sub.w	sl, sl, r3
 800ee4e:	45ba      	cmp	sl, r7
 800ee50:	bfb8      	it	lt
 800ee52:	46ba      	movlt	sl, r7
 800ee54:	fa0f fa8a 	sxth.w	sl, sl
        for(h = 0; h < max_h; h++) {
 800ee58:	f04f 0900 	mov.w	r9, #0
 800ee5c:	e0b9      	b.n	800efd2 <draw_border_generic+0x332>
        lv_draw_mask_radius_init(&mask_rout_param, outer_area, rout, false);
 800ee5e:	2300      	movs	r3, #0
 800ee60:	463a      	mov	r2, r7
 800ee62:	4621      	mov	r1, r4
 800ee64:	a81b      	add	r0, sp, #108	@ 0x6c
 800ee66:	f7fa fe47 	bl	8009af8 <lv_draw_mask_radius_init>
        mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	a81b      	add	r0, sp, #108	@ 0x6c
 800ee6e:	f7fa fc1d 	bl	80096ac <lv_draw_mask_add>
 800ee72:	900d      	str	r0, [sp, #52]	@ 0x34
 800ee74:	e752      	b.n	800ed1c <draw_border_generic+0x7c>
        blend_area.x1 = draw_area.x1;
 800ee76:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	@ 0xa0
 800ee7a:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = draw_area.x2;
 800ee7e:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 800ee82:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800ee86:	f9bd 40a2 	ldrsh.w	r4, [sp, #162]	@ 0xa2
 800ee8a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee8e:	4681      	mov	r9, r0
 800ee90:	e01b      	b.n	800eeca <draw_border_generic+0x22a>
            if(!bottom_side && h > core_area.y2) break;
 800ee92:	45c1      	cmp	r9, r8
 800ee94:	dd02      	ble.n	800ee9c <draw_border_generic+0x1fc>
 800ee96:	9b04      	ldr	r3, [sp, #16]
 800ee98:	42a3      	cmp	r3, r4
 800ee9a:	db20      	blt.n	800eede <draw_border_generic+0x23e>
            blend_area.y1 = h;
 800ee9c:	b227      	sxth	r7, r4
 800ee9e:	f8ad 704e 	strh.w	r7, [sp, #78]	@ 0x4e
            blend_area.y2 = h;
 800eea2:	f8ad 7052 	strh.w	r7, [sp, #82]	@ 0x52
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800eea6:	4629      	mov	r1, r5
 800eea8:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800eeaa:	f007 ff35 	bl	8016d18 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, draw_area.x1, h, draw_area_w);
 800eeae:	462b      	mov	r3, r5
 800eeb0:	463a      	mov	r2, r7
 800eeb2:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	@ 0xa0
 800eeb6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800eeb8:	f7fa fc12 	bl	80096e0 <lv_draw_mask_apply>
 800eebc:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
            lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800eec0:	a921      	add	r1, sp, #132	@ 0x84
 800eec2:	4630      	mov	r0, r6
 800eec4:	f7fc fc08 	bl	800b6d8 <lv_draw_sw_blend>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
 800eec8:	3401      	adds	r4, #1
 800eeca:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800eece:	42a3      	cmp	r3, r4
 800eed0:	db05      	blt.n	800eede <draw_border_generic+0x23e>
            if(!top_side && h < core_area.y1) continue;
 800eed2:	45d3      	cmp	fp, sl
 800eed4:	dadd      	bge.n	800ee92 <draw_border_generic+0x1f2>
 800eed6:	9b03      	ldr	r3, [sp, #12]
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	ddda      	ble.n	800ee92 <draw_border_generic+0x1f2>
 800eedc:	e7f4      	b.n	800eec8 <draw_border_generic+0x228>
        lv_draw_mask_free_param(&mask_rin_param);
 800eede:	a815      	add	r0, sp, #84	@ 0x54
 800eee0:	f7fa fc54 	bl	800978c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(mask_rin_id);
 800eee4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800eee6:	f7fa fc25 	bl	8009734 <lv_draw_mask_remove_id>
        if(mask_rout_id != LV_MASK_ID_INV) {
 800eeea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800eeec:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800eef0:	d103      	bne.n	800eefa <draw_border_generic+0x25a>
        lv_mem_buf_release(blend_dsc.mask_buf);
 800eef2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800eef4:	f007 fdc4 	bl	8016a80 <lv_mem_buf_release>
        return;
 800eef8:	e6ed      	b.n	800ecd6 <draw_border_generic+0x36>
            lv_draw_mask_free_param(&mask_rout_param);
 800eefa:	a81b      	add	r0, sp, #108	@ 0x6c
 800eefc:	f7fa fc46 	bl	800978c <lv_draw_mask_free_param>
            lv_draw_mask_remove_id(mask_rout_id);
 800ef00:	4620      	mov	r0, r4
 800ef02:	f7fa fc17 	bl	8009734 <lv_draw_mask_remove_id>
 800ef06:	e7f4      	b.n	800eef2 <draw_border_generic+0x252>
        blend_area.x1 = core_area.x1;
 800ef08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef0a:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = core_area.x2;
 800ef0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef10:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        blend_area.y1 = outer_area->y1;
 800ef14:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800ef18:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
        blend_area.y2 = inner_area->y1 - 1;
 800ef1c:	9b03      	ldr	r3, [sp, #12]
 800ef1e:	885b      	ldrh	r3, [r3, #2]
 800ef20:	3b01      	subs	r3, #1
 800ef22:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef26:	a921      	add	r1, sp, #132	@ 0x84
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7fc fbd5 	bl	800b6d8 <lv_draw_sw_blend>
 800ef2e:	e76a      	b.n	800ee06 <draw_border_generic+0x166>
        blend_area.x1 = core_area.x1;
 800ef30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef32:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = core_area.x2;
 800ef36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef38:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        blend_area.y1 = inner_area->y2 + 1;
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	88db      	ldrh	r3, [r3, #6]
 800ef40:	3301      	adds	r3, #1
 800ef42:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
        blend_area.y2 = outer_area->y2;
 800ef46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ef4a:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef4e:	a921      	add	r1, sp, #132	@ 0x84
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7fc fbc1 	bl	800b6d8 <lv_draw_sw_blend>
 800ef56:	e75d      	b.n	800ee14 <draw_border_generic+0x174>
        blend_area.x1 = outer_area->x1;
 800ef58:	f9b4 3000 	ldrsh.w	r3, [r4]
 800ef5c:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = inner_area->x1 - 1;
 800ef60:	9b03      	ldr	r3, [sp, #12]
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	3b01      	subs	r3, #1
 800ef66:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        blend_area.y1 = core_area.y1;
 800ef6a:	f8ad 904e 	strh.w	r9, [sp, #78]	@ 0x4e
        blend_area.y2 = core_area.y2;
 800ef6e:	9b04      	ldr	r3, [sp, #16]
 800ef70:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef74:	a921      	add	r1, sp, #132	@ 0x84
 800ef76:	4630      	mov	r0, r6
 800ef78:	f7fc fbae 	bl	800b6d8 <lv_draw_sw_blend>
 800ef7c:	e74f      	b.n	800ee1e <draw_border_generic+0x17e>
        blend_area.x1 = inner_area->x2 + 1;
 800ef7e:	9b03      	ldr	r3, [sp, #12]
 800ef80:	889b      	ldrh	r3, [r3, #4]
 800ef82:	3301      	adds	r3, #1
 800ef84:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
        blend_area.x2 = outer_area->x2;
 800ef88:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ef8c:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        blend_area.y1 = core_area.y1;
 800ef90:	f8ad 904e 	strh.w	r9, [sp, #78]	@ 0x4e
        blend_area.y2 = core_area.y2;
 800ef94:	9b04      	ldr	r3, [sp, #16]
 800ef96:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
        lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800ef9a:	a921      	add	r1, sp, #132	@ 0x84
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	f7fc fb9b 	bl	800b6d8 <lv_draw_sw_blend>
 800efa2:	e741      	b.n	800ee28 <draw_border_generic+0x188>
            lv_memset_ff(blend_dsc.mask_buf, draw_area_w);
 800efa4:	4629      	mov	r1, r5
 800efa6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800efa8:	f007 feb6 	bl	8016d18 <lv_memset_ff>
            blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, top_y, draw_area_w);
 800efac:	462b      	mov	r3, r5
 800efae:	463a      	mov	r2, r7
 800efb0:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 800efb4:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800efb6:	f7fa fb93 	bl	80096e0 <lv_draw_mask_apply>
 800efba:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
            if(top_y >= draw_area.y1) {
 800efbe:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 800efc2:	42bb      	cmp	r3, r7
 800efc4:	dd1c      	ble.n	800f000 <draw_border_generic+0x360>
            if(bottom_y <= draw_area.y2) {
 800efc6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800efca:	4543      	cmp	r3, r8
 800efcc:	da21      	bge.n	800f012 <draw_border_generic+0x372>
        for(h = 0; h < max_h; h++) {
 800efce:	f109 0901 	add.w	r9, r9, #1
 800efd2:	45ca      	cmp	sl, r9
 800efd4:	f340 80de 	ble.w	800f194 <draw_border_generic+0x4f4>
            lv_coord_t top_y = outer_area->y1 + h;
 800efd8:	8867      	ldrh	r7, [r4, #2]
 800efda:	fa1f f389 	uxth.w	r3, r9
 800efde:	441f      	add	r7, r3
 800efe0:	b23f      	sxth	r7, r7
            lv_coord_t bottom_y = outer_area->y2 - h;
 800efe2:	f8b4 8006 	ldrh.w	r8, [r4, #6]
 800efe6:	eba8 0803 	sub.w	r8, r8, r3
 800efea:	fa0f f888 	sxth.w	r8, r8
            if(top_y < draw_area.y1 && bottom_y > draw_area.y2) continue;   /*This line is clipped now*/
 800efee:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 800eff2:	42bb      	cmp	r3, r7
 800eff4:	ddd6      	ble.n	800efa4 <draw_border_generic+0x304>
 800eff6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800effa:	4543      	cmp	r3, r8
 800effc:	dad2      	bge.n	800efa4 <draw_border_generic+0x304>
 800effe:	e7e6      	b.n	800efce <draw_border_generic+0x32e>
                blend_area.y1 = top_y;
 800f000:	f8ad 704e 	strh.w	r7, [sp, #78]	@ 0x4e
                blend_area.y2 = top_y;
 800f004:	f8ad 7052 	strh.w	r7, [sp, #82]	@ 0x52
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f008:	a921      	add	r1, sp, #132	@ 0x84
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7fc fb64 	bl	800b6d8 <lv_draw_sw_blend>
 800f010:	e7d9      	b.n	800efc6 <draw_border_generic+0x326>
                blend_area.y1 = bottom_y;
 800f012:	f8ad 804e 	strh.w	r8, [sp, #78]	@ 0x4e
                blend_area.y2 = bottom_y;
 800f016:	f8ad 8052 	strh.w	r8, [sp, #82]	@ 0x52
                lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f01a:	a921      	add	r1, sp, #132	@ 0x84
 800f01c:	4630      	mov	r0, r6
 800f01e:	f7fc fb5b 	bl	800b6d8 <lv_draw_sw_blend>
 800f022:	e7d4      	b.n	800efce <draw_border_generic+0x32e>
        blend_area.x1 = draw_area.x1;
 800f024:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	@ 0xa0
 800f028:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
        blend_area.x2 = LV_MIN(draw_area.x2, core_area.x1 - 1);
 800f02c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f02e:	3b01      	subs	r3, #1
 800f030:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	@ 0xa4
 800f034:	428b      	cmp	r3, r1
 800f036:	bfa8      	it	ge
 800f038:	460b      	movge	r3, r1
 800f03a:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 800f03e:	b29f      	uxth	r7, r3
 800f040:	b292      	uxth	r2, r2
 800f042:	1abf      	subs	r7, r7, r2
 800f044:	b2bf      	uxth	r7, r7
 800f046:	3701      	adds	r7, #1
 800f048:	b23f      	sxth	r7, r7
        if(blend_w > 0) {
 800f04a:	2f00      	cmp	r7, #0
 800f04c:	dd46      	ble.n	800f0dc <draw_border_generic+0x43c>
            if(left_side || top_side) {
 800f04e:	9b07      	ldr	r3, [sp, #28]
 800f050:	9a08      	ldr	r2, [sp, #32]
 800f052:	4293      	cmp	r3, r2
 800f054:	da01      	bge.n	800f05a <draw_border_generic+0x3ba>
 800f056:	45d3      	cmp	fp, sl
 800f058:	db1b      	blt.n	800f092 <draw_border_generic+0x3f2>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f05a:	f9bd 40a2 	ldrsh.w	r4, [sp, #162]	@ 0xa2
 800f05e:	e016      	b.n	800f08e <draw_border_generic+0x3ee>
                    blend_area.y1 = h;
 800f060:	b225      	sxth	r5, r4
 800f062:	f8ad 504e 	strh.w	r5, [sp, #78]	@ 0x4e
                    blend_area.y2 = h;
 800f066:	f8ad 5052 	strh.w	r5, [sp, #82]	@ 0x52
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f06a:	4639      	mov	r1, r7
 800f06c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f06e:	f007 fe53 	bl	8016d18 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f072:	463b      	mov	r3, r7
 800f074:	462a      	mov	r2, r5
 800f076:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 800f07a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f07c:	f7fa fb30 	bl	80096e0 <lv_draw_mask_apply>
 800f080:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f084:	a921      	add	r1, sp, #132	@ 0x84
 800f086:	4630      	mov	r0, r6
 800f088:	f7fc fb26 	bl	800b6d8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f08c:	3401      	adds	r4, #1
 800f08e:	45a1      	cmp	r9, r4
 800f090:	dce6      	bgt.n	800f060 <draw_border_generic+0x3c0>
            if(left_side || bottom_side) {
 800f092:	9b07      	ldr	r3, [sp, #28]
 800f094:	9a08      	ldr	r2, [sp, #32]
 800f096:	4293      	cmp	r3, r2
 800f098:	da02      	bge.n	800f0a0 <draw_border_generic+0x400>
 800f09a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f09c:	4543      	cmp	r3, r8
 800f09e:	dc1d      	bgt.n	800f0dc <draw_border_generic+0x43c>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f0a0:	9b04      	ldr	r3, [sp, #16]
 800f0a2:	1c5c      	adds	r4, r3, #1
 800f0a4:	e016      	b.n	800f0d4 <draw_border_generic+0x434>
                    blend_area.y1 = h;
 800f0a6:	b225      	sxth	r5, r4
 800f0a8:	f8ad 504e 	strh.w	r5, [sp, #78]	@ 0x4e
                    blend_area.y2 = h;
 800f0ac:	f8ad 5052 	strh.w	r5, [sp, #82]	@ 0x52
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f0b4:	f007 fe30 	bl	8016d18 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	462a      	mov	r2, r5
 800f0bc:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 800f0c0:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f0c2:	f7fa fb0d 	bl	80096e0 <lv_draw_mask_apply>
 800f0c6:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f0ca:	a921      	add	r1, sp, #132	@ 0x84
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f7fc fb03 	bl	800b6d8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f0d2:	3401      	adds	r4, #1
 800f0d4:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800f0d8:	42a3      	cmp	r3, r4
 800f0da:	dae4      	bge.n	800f0a6 <draw_border_generic+0x406>
        blend_area.x1 = LV_MAX(draw_area.x1, core_area.x2 + 1);
 800f0dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f0de:	3201      	adds	r2, #1
 800f0e0:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	@ 0xa0
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	bfb8      	it	lt
 800f0e8:	461a      	movlt	r2, r3
 800f0ea:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
        blend_area.x2 = draw_area.x2;
 800f0ee:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 800f0f2:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
 800f0f6:	b29f      	uxth	r7, r3
 800f0f8:	b292      	uxth	r2, r2
 800f0fa:	1abf      	subs	r7, r7, r2
 800f0fc:	b2bf      	uxth	r7, r7
 800f0fe:	3701      	adds	r7, #1
 800f100:	b23f      	sxth	r7, r7
        if(blend_w > 0) {
 800f102:	2f00      	cmp	r7, #0
 800f104:	dd46      	ble.n	800f194 <draw_border_generic+0x4f4>
            if(right_side || top_side) {
 800f106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f108:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f10a:	4293      	cmp	r3, r2
 800f10c:	dd01      	ble.n	800f112 <draw_border_generic+0x472>
 800f10e:	45d3      	cmp	fp, sl
 800f110:	db1b      	blt.n	800f14a <draw_border_generic+0x4aa>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f112:	f9bd 40a2 	ldrsh.w	r4, [sp, #162]	@ 0xa2
 800f116:	e016      	b.n	800f146 <draw_border_generic+0x4a6>
                    blend_area.y1 = h;
 800f118:	b225      	sxth	r5, r4
 800f11a:	f8ad 504e 	strh.w	r5, [sp, #78]	@ 0x4e
                    blend_area.y2 = h;
 800f11e:	f8ad 5052 	strh.w	r5, [sp, #82]	@ 0x52
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f122:	4639      	mov	r1, r7
 800f124:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f126:	f007 fdf7 	bl	8016d18 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f12a:	463b      	mov	r3, r7
 800f12c:	462a      	mov	r2, r5
 800f12e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 800f132:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f134:	f7fa fad4 	bl	80096e0 <lv_draw_mask_apply>
 800f138:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f13c:	a921      	add	r1, sp, #132	@ 0x84
 800f13e:	4630      	mov	r0, r6
 800f140:	f7fc faca 	bl	800b6d8 <lv_draw_sw_blend>
                for(h = draw_area.y1; h < core_area.y1; h++) {
 800f144:	3401      	adds	r4, #1
 800f146:	45a1      	cmp	r9, r4
 800f148:	dce6      	bgt.n	800f118 <draw_border_generic+0x478>
            if(right_side || bottom_side) {
 800f14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f14c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f14e:	4293      	cmp	r3, r2
 800f150:	dd02      	ble.n	800f158 <draw_border_generic+0x4b8>
 800f152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f154:	4543      	cmp	r3, r8
 800f156:	dc1d      	bgt.n	800f194 <draw_border_generic+0x4f4>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f158:	9c04      	ldr	r4, [sp, #16]
 800f15a:	3401      	adds	r4, #1
 800f15c:	e016      	b.n	800f18c <draw_border_generic+0x4ec>
                    blend_area.y1 = h;
 800f15e:	b225      	sxth	r5, r4
 800f160:	f8ad 504e 	strh.w	r5, [sp, #78]	@ 0x4e
                    blend_area.y2 = h;
 800f164:	f8ad 5052 	strh.w	r5, [sp, #82]	@ 0x52
                    lv_memset_ff(blend_dsc.mask_buf, blend_w);
 800f168:	4639      	mov	r1, r7
 800f16a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f16c:	f007 fdd4 	bl	8016d18 <lv_memset_ff>
                    blend_dsc.mask_res = lv_draw_mask_apply(blend_dsc.mask_buf, blend_area.x1, h, blend_w);
 800f170:	463b      	mov	r3, r7
 800f172:	462a      	mov	r2, r5
 800f174:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	@ 0x4c
 800f178:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f17a:	f7fa fab1 	bl	80096e0 <lv_draw_mask_apply>
 800f17e:	f88d 0094 	strb.w	r0, [sp, #148]	@ 0x94
                    lv_draw_sw_blend(draw_ctx, &blend_dsc);
 800f182:	a921      	add	r1, sp, #132	@ 0x84
 800f184:	4630      	mov	r0, r6
 800f186:	f7fc faa7 	bl	800b6d8 <lv_draw_sw_blend>
                for(h = core_area.y2 + 1; h <= draw_area.y2; h++) {
 800f18a:	3401      	adds	r4, #1
 800f18c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 800f190:	42a3      	cmp	r3, r4
 800f192:	dae4      	bge.n	800f15e <draw_border_generic+0x4be>
    lv_draw_mask_free_param(&mask_rin_param);
 800f194:	a815      	add	r0, sp, #84	@ 0x54
 800f196:	f7fa faf9 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rin_id);
 800f19a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800f19c:	f7fa faca 	bl	8009734 <lv_draw_mask_remove_id>
    lv_draw_mask_free_param(&mask_rout_param);
 800f1a0:	a81b      	add	r0, sp, #108	@ 0x6c
 800f1a2:	f7fa faf3 	bl	800978c <lv_draw_mask_free_param>
    lv_draw_mask_remove_id(mask_rout_id);
 800f1a6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f1a8:	f7fa fac4 	bl	8009734 <lv_draw_mask_remove_id>
    lv_mem_buf_release(blend_dsc.mask_buf);
 800f1ac:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800f1ae:	f007 fc67 	bl	8016a80 <lv_mem_buf_release>
 800f1b2:	e590      	b.n	800ecd6 <draw_border_generic+0x36>

0800f1b4 <draw_border>:
{
 800f1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b8:	b089      	sub	sp, #36	@ 0x24
 800f1ba:	9004      	str	r0, [sp, #16]
 800f1bc:	4608      	mov	r0, r1
    if(dsc->border_opa <= LV_OPA_MIN) return;
 800f1be:	f891 4022 	ldrb.w	r4, [r1, #34]	@ 0x22
 800f1c2:	2c02      	cmp	r4, #2
 800f1c4:	d96f      	bls.n	800f2a6 <draw_border+0xf2>
 800f1c6:	4611      	mov	r1, r2
    if(dsc->border_width == 0) return;
 800f1c8:	f9b0 2020 	ldrsh.w	r2, [r0, #32]
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	d06a      	beq.n	800f2a6 <draw_border+0xf2>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
 800f1d0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 800f1d4:	f013 0f3e 	tst.w	r3, #62	@ 0x3e
 800f1d8:	d065      	beq.n	800f2a6 <draw_border+0xf2>
    if(dsc->border_post) return;
 800f1da:	f013 0f01 	tst.w	r3, #1
 800f1de:	d162      	bne.n	800f2a6 <draw_border+0xf2>
 800f1e0:	f9b1 8004 	ldrsh.w	r8, [r1, #4]
 800f1e4:	fa1f f388 	uxth.w	r3, r8
 800f1e8:	9305      	str	r3, [sp, #20]
 800f1ea:	f9b1 a000 	ldrsh.w	sl, [r1]
 800f1ee:	fa1f f78a 	uxth.w	r7, sl
 800f1f2:	1bdb      	subs	r3, r3, r7
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f1fa:	f9b1 b006 	ldrsh.w	fp, [r1, #6]
 800f1fe:	fa1f fe8b 	uxth.w	lr, fp
 800f202:	f9b1 9002 	ldrsh.w	r9, [r1, #2]
 800f206:	fa1f f689 	uxth.w	r6, r9
 800f20a:	ebae 0c06 	sub.w	ip, lr, r6
 800f20e:	fa1f fc8c 	uxth.w	ip, ip
 800f212:	f10c 0c01 	add.w	ip, ip, #1
 800f216:	fa0f fc8c 	sxth.w	ip, ip
    int32_t rout = dsc->radius;
 800f21a:	f9b0 5000 	ldrsh.w	r5, [r0]
    int32_t short_side = LV_MIN(coords_w, coords_h);
 800f21e:	459c      	cmp	ip, r3
 800f220:	bfa8      	it	ge
 800f222:	469c      	movge	ip, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
 800f224:	ea4f 036c 	mov.w	r3, ip, asr #1
 800f228:	ebb5 0f6c 	cmp.w	r5, ip, asr #1
 800f22c:	dc00      	bgt.n	800f230 <draw_border+0x7c>
    int32_t rout = dsc->radius;
 800f22e:	462b      	mov	r3, r5
    dest->x1 = src->x1;
 800f230:	f8ad a018 	strh.w	sl, [sp, #24]
    dest->y1 = src->y1;
 800f234:	f8ad 901a 	strh.w	r9, [sp, #26]
    dest->x2 = src->x2;
 800f238:	f8ad 801c 	strh.w	r8, [sp, #28]
    dest->y2 = src->y2;
 800f23c:	f8ad b01e 	strh.w	fp, [sp, #30]
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f240:	f890 8023 	ldrb.w	r8, [r0, #35]	@ 0x23
 800f244:	f3c8 0c44 	ubfx	ip, r8, #1, #5
 800f248:	f018 0f08 	tst.w	r8, #8
 800f24c:	d02e      	beq.n	800f2ac <draw_border+0xf8>
 800f24e:	fa1f f882 	uxth.w	r8, r2
 800f252:	4447      	add	r7, r8
 800f254:	f8ad 7018 	strh.w	r7, [sp, #24]
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f258:	f01c 0f08 	tst.w	ip, #8
 800f25c:	d02f      	beq.n	800f2be <draw_border+0x10a>
 800f25e:	b297      	uxth	r7, r2
 800f260:	9d05      	ldr	r5, [sp, #20]
 800f262:	1bed      	subs	r5, r5, r7
 800f264:	f8ad 501c 	strh.w	r5, [sp, #28]
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f268:	f01c 0f02 	tst.w	ip, #2
 800f26c:	d02d      	beq.n	800f2ca <draw_border+0x116>
 800f26e:	b295      	uxth	r5, r2
 800f270:	4435      	add	r5, r6
 800f272:	f8ad 501a 	strh.w	r5, [sp, #26]
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f276:	f01c 0f01 	tst.w	ip, #1
 800f27a:	d02c      	beq.n	800f2d6 <draw_border+0x122>
 800f27c:	b295      	uxth	r5, r2
 800f27e:	ebae 0e05 	sub.w	lr, lr, r5
 800f282:	f8ad e01e 	strh.w	lr, [sp, #30]
    lv_coord_t rin = rout - dsc->border_width;
 800f286:	b292      	uxth	r2, r2
 800f288:	1a9a      	subs	r2, r3, r2
 800f28a:	b212      	sxth	r2, r2
    if(rin < 0) rin = 0;
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	db28      	blt.n	800f2e2 <draw_border+0x12e>
    draw_border_generic(draw_ctx, coords, &area_inner, rout, rin, dsc->border_color, dsc->border_opa, dsc->blend_mode);
 800f290:	7885      	ldrb	r5, [r0, #2]
 800f292:	9503      	str	r5, [sp, #12]
 800f294:	9402      	str	r4, [sp, #8]
 800f296:	8bc0      	ldrh	r0, [r0, #30]
 800f298:	f8ad 0004 	strh.w	r0, [sp, #4]
 800f29c:	9200      	str	r2, [sp, #0]
 800f29e:	aa06      	add	r2, sp, #24
 800f2a0:	9804      	ldr	r0, [sp, #16]
 800f2a2:	f7ff fcfd 	bl	800eca0 <draw_border_generic>
}
 800f2a6:	b009      	add	sp, #36	@ 0x24
 800f2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
 800f2ac:	fa13 f882 	uxtah	r8, r3, r2
 800f2b0:	fa1f f888 	uxth.w	r8, r8
 800f2b4:	f1c8 0800 	rsb	r8, r8, #0
 800f2b8:	fa1f f888 	uxth.w	r8, r8
 800f2bc:	e7c9      	b.n	800f252 <draw_border+0x9e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
 800f2be:	fa13 f782 	uxtah	r7, r3, r2
 800f2c2:	b2bf      	uxth	r7, r7
 800f2c4:	427f      	negs	r7, r7
 800f2c6:	b2bf      	uxth	r7, r7
 800f2c8:	e7ca      	b.n	800f260 <draw_border+0xac>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
 800f2ca:	fa13 f582 	uxtah	r5, r3, r2
 800f2ce:	b2ad      	uxth	r5, r5
 800f2d0:	426d      	negs	r5, r5
 800f2d2:	b2ad      	uxth	r5, r5
 800f2d4:	e7cc      	b.n	800f270 <draw_border+0xbc>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
 800f2d6:	fa13 f582 	uxtah	r5, r3, r2
 800f2da:	b2ad      	uxth	r5, r5
 800f2dc:	426d      	negs	r5, r5
 800f2de:	b2ad      	uxth	r5, r5
 800f2e0:	e7cd      	b.n	800f27e <draw_border+0xca>
    if(rin < 0) rin = 0;
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	e7d4      	b.n	800f290 <draw_border+0xdc>

0800f2e6 <draw_outline>:
{
 800f2e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ea:	b08b      	sub	sp, #44	@ 0x2c
 800f2ec:	9005      	str	r0, [sp, #20]
    if(dsc->outline_opa <= LV_OPA_MIN) return;
 800f2ee:	f891 902a 	ldrb.w	r9, [r1, #42]	@ 0x2a
 800f2f2:	f1b9 0f02 	cmp.w	r9, #2
 800f2f6:	d972      	bls.n	800f3de <draw_outline+0xf8>
    if(dsc->outline_width == 0) return;
 800f2f8:	f9b1 3026 	ldrsh.w	r3, [r1, #38]	@ 0x26
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d06e      	beq.n	800f3de <draw_outline+0xf8>
    dest->x1 = src->x1;
 800f300:	f9b2 5000 	ldrsh.w	r5, [r2]
 800f304:	f8ad 5020 	strh.w	r5, [sp, #32]
    dest->y1 = src->y1;
 800f308:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 800f30c:	f8ad 6022 	strh.w	r6, [sp, #34]	@ 0x22
    dest->x2 = src->x2;
 800f310:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800f314:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    dest->y2 = src->y2;
 800f318:	f9b2 e006 	ldrsh.w	lr, [r2, #6]
 800f31c:	f8ad e026 	strh.w	lr, [sp, #38]	@ 0x26
    lv_coord_t pad = dsc->outline_pad - 1;
 800f320:	8d08      	ldrh	r0, [r1, #40]	@ 0x28
 800f322:	3801      	subs	r0, #1
 800f324:	b280      	uxth	r0, r0
    area_inner.x1 -= pad;
 800f326:	b2ad      	uxth	r5, r5
 800f328:	eba5 0800 	sub.w	r8, r5, r0
 800f32c:	fa1f fb88 	uxth.w	fp, r8
 800f330:	fa0f f888 	sxth.w	r8, r8
 800f334:	f8ad 8020 	strh.w	r8, [sp, #32]
    area_inner.y1 -= pad;
 800f338:	b2b6      	uxth	r6, r6
 800f33a:	1a37      	subs	r7, r6, r0
 800f33c:	fa1f fa87 	uxth.w	sl, r7
 800f340:	b23f      	sxth	r7, r7
 800f342:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
    area_inner.x2 += pad;
 800f346:	fa10 f484 	uxtah	r4, r0, r4
 800f34a:	b2a2      	uxth	r2, r4
 800f34c:	b224      	sxth	r4, r4
 800f34e:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
    area_inner.y2 += pad;
 800f352:	fa10 fe8e 	uxtah	lr, r0, lr
 800f356:	fa1f fc8e 	uxth.w	ip, lr
 800f35a:	fa0f fe8e 	sxth.w	lr, lr
 800f35e:	f8ad e026 	strh.w	lr, [sp, #38]	@ 0x26
    dest->x1 = src->x1;
 800f362:	f8ad 8018 	strh.w	r8, [sp, #24]
    dest->y1 = src->y1;
 800f366:	f8ad 701a 	strh.w	r7, [sp, #26]
    dest->x2 = src->x2;
 800f36a:	f8ad 401c 	strh.w	r4, [sp, #28]
    dest->y2 = src->y2;
 800f36e:	f8ad e01e 	strh.w	lr, [sp, #30]
    area_outer.x1 -= dsc->outline_width;
 800f372:	b29b      	uxth	r3, r3
 800f374:	ebab 0b03 	sub.w	fp, fp, r3
 800f378:	f8ad b018 	strh.w	fp, [sp, #24]
    area_outer.x2 += dsc->outline_width;
 800f37c:	18d4      	adds	r4, r2, r3
 800f37e:	f8ad 401c 	strh.w	r4, [sp, #28]
    area_outer.y1 -= dsc->outline_width;
 800f382:	ebaa 0a03 	sub.w	sl, sl, r3
 800f386:	f8ad a01a 	strh.w	sl, [sp, #26]
    area_outer.y2 += dsc->outline_width;
 800f38a:	eb0c 0403 	add.w	r4, ip, r3
 800f38e:	f8ad 401e 	strh.w	r4, [sp, #30]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800f392:	1b45      	subs	r5, r0, r5
 800f394:	442a      	add	r2, r5
 800f396:	b292      	uxth	r2, r2
 800f398:	3201      	adds	r2, #1
 800f39a:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800f39c:	1b80      	subs	r0, r0, r6
 800f39e:	4484      	add	ip, r0
 800f3a0:	fa1f fc8c 	uxth.w	ip, ip
 800f3a4:	f10c 0c01 	add.w	ip, ip, #1
 800f3a8:	fa0f fc8c 	sxth.w	ip, ip
    int32_t rin = dsc->radius;
 800f3ac:	f9b1 4000 	ldrsh.w	r4, [r1]
    int32_t short_side = LV_MIN(inner_w, inner_h);
 800f3b0:	4562      	cmp	r2, ip
 800f3b2:	bfa8      	it	ge
 800f3b4:	4662      	movge	r2, ip
    if(rin > short_side >> 1) rin = short_side >> 1;
 800f3b6:	1050      	asrs	r0, r2, #1
 800f3b8:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800f3bc:	dc00      	bgt.n	800f3c0 <draw_outline+0xda>
    int32_t rin = dsc->radius;
 800f3be:	4620      	mov	r0, r4
    lv_coord_t rout = rin + dsc->outline_width;
 800f3c0:	4403      	add	r3, r0
                        dsc->blend_mode);
 800f3c2:	788a      	ldrb	r2, [r1, #2]
    draw_border_generic(draw_ctx, &area_outer, &area_inner, rout, rin, dsc->outline_color, dsc->outline_opa,
 800f3c4:	9203      	str	r2, [sp, #12]
 800f3c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3ca:	8c8a      	ldrh	r2, [r1, #36]	@ 0x24
 800f3cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800f3d0:	9000      	str	r0, [sp, #0]
 800f3d2:	b21b      	sxth	r3, r3
 800f3d4:	aa08      	add	r2, sp, #32
 800f3d6:	a906      	add	r1, sp, #24
 800f3d8:	9805      	ldr	r0, [sp, #20]
 800f3da:	f7ff fc61 	bl	800eca0 <draw_border_generic>
}
 800f3de:	b00b      	add	sp, #44	@ 0x2c
 800f3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3e4 <lv_draw_sw_rect>:
{
 800f3e4:	b570      	push	{r4, r5, r6, lr}
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	460d      	mov	r5, r1
 800f3ea:	4616      	mov	r6, r2
    draw_shadow(draw_ctx, dsc, coords);
 800f3ec:	f7fe fa74 	bl	800d8d8 <draw_shadow>
    draw_bg(draw_ctx, dsc, coords);
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f7ff f932 	bl	800e65e <draw_bg>
    draw_bg_img(draw_ctx, dsc, coords);
 800f3fa:	4632      	mov	r2, r6
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7ff fb23 	bl	800ea4a <draw_bg_img>
    draw_border(draw_ctx, dsc, coords);
 800f404:	4632      	mov	r2, r6
 800f406:	4629      	mov	r1, r5
 800f408:	4620      	mov	r0, r4
 800f40a:	f7ff fed3 	bl	800f1b4 <draw_border>
    draw_outline(draw_ctx, dsc, coords);
 800f40e:	4632      	mov	r2, r6
 800f410:	4629      	mov	r1, r5
 800f412:	4620      	mov	r0, r4
 800f414:	f7ff ff67 	bl	800f2e6 <draw_outline>
}
 800f418:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f41c <lv_color_mix>:
    c1.full = c1.full << 8 | c1.full >> 8;
 800f41c:	b283      	uxth	r3, r0
 800f41e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800f422:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 800f426:	b28b      	uxth	r3, r1
 800f428:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f42c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 800f430:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 800f432:	040b      	lsls	r3, r1, #16
 800f434:	fa13 f181 	uxtah	r1, r3, r1
 800f438:	4b0a      	ldr	r3, [pc, #40]	@ (800f464 <lv_color_mix+0x48>)
 800f43a:	4019      	ands	r1, r3
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 800f43c:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 800f440:	fa1c f080 	uxtah	r0, ip, r0
 800f444:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 800f446:	1a40      	subs	r0, r0, r1
 800f448:	08d2      	lsrs	r2, r2, #3
 800f44a:	fb00 f202 	mul.w	r2, r0, r2
 800f44e:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 800f452:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 800f454:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 800f458:	b288      	uxth	r0, r1
    ret.full = ret.full << 8 | ret.full >> 8;
 800f45a:	f3c1 2107 	ubfx	r1, r1, #8, #8
}
 800f45e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 800f462:	4770      	bx	lr
 800f464:	07e0f81f 	.word	0x07e0f81f

0800f468 <argb_no_aa>:
}

static void argb_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                       int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                       int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 800f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	b083      	sub	sp, #12
 800f46e:	9001      	str	r0, [sp, #4]
 800f470:	4688      	mov	r8, r1
 800f472:	4691      	mov	r9, r2
 800f474:	469a      	mov	sl, r3
 800f476:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f478:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f47a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800f47c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800f47e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800f480:	9912      	ldr	r1, [sp, #72]	@ 0x48
    int32_t xs_ups_start = xs_ups;
    int32_t ys_ups_start = ys_ups;

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 800f482:	f04f 0c00 	mov.w	ip, #0
 800f486:	e006      	b.n	800f496 <argb_no_aa+0x2e>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);

        int32_t xs_int = xs_ups >> 8;
        int32_t ys_int = ys_ups >> 8;
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
            abuf[x] = 0;
 800f488:	2400      	movs	r4, #0
 800f48a:	f801 400c 	strb.w	r4, [r1, ip]
    for(x = 0; x < x_end; x++) {
 800f48e:	f10c 0c01 	add.w	ip, ip, #1
 800f492:	fa0f fc8c 	sxth.w	ip, ip
 800f496:	45ac      	cmp	ip, r5
 800f498:	da26      	bge.n	800f4e8 <argb_no_aa+0x80>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 800f49a:	fb07 fe0c 	mul.w	lr, r7, ip
 800f49e:	eb02 2e2e 	add.w	lr, r2, lr, asr #8
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 800f4a2:	fb06 f40c 	mul.w	r4, r6, ip
 800f4a6:	eb03 2424 	add.w	r4, r3, r4, asr #8
        int32_t ys_int = ys_ups >> 8;
 800f4aa:	1224      	asrs	r4, r4, #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 800f4ac:	ea5f 2e2e 	movs.w	lr, lr, asr #8
 800f4b0:	d4ea      	bmi.n	800f488 <argb_no_aa+0x20>
 800f4b2:	45f0      	cmp	r8, lr
 800f4b4:	dde8      	ble.n	800f488 <argb_no_aa+0x20>
 800f4b6:	2c00      	cmp	r4, #0
 800f4b8:	dbe6      	blt.n	800f488 <argb_no_aa+0x20>
 800f4ba:	45a1      	cmp	r9, r4
 800f4bc:	dde4      	ble.n	800f488 <argb_no_aa+0x20>
        }
        else {
            const uint8_t * src_tmp = src;
            src_tmp += (ys_int * src_stride * LV_IMG_PX_SIZE_ALPHA_BYTE) + xs_int * LV_IMG_PX_SIZE_ALPHA_BYTE;
 800f4be:	fb04 ee0a 	mla	lr, r4, sl, lr
 800f4c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800f4c6:	9801      	ldr	r0, [sp, #4]
 800f4c8:	eb00 0b0e 	add.w	fp, r0, lr

#if LV_COLOR_DEPTH == 1 || LV_COLOR_DEPTH == 8
            cbuf[x].full = src_tmp[0];
#elif LV_COLOR_DEPTH == 16
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 800f4cc:	f810 400e 	ldrb.w	r4, [r0, lr]
 800f4d0:	f89b e001 	ldrb.w	lr, [fp, #1]
 800f4d4:	eb04 240e 	add.w	r4, r4, lr, lsl #8
 800f4d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f4da:	f820 401c 	strh.w	r4, [r0, ip, lsl #1]
#elif LV_COLOR_DEPTH == 32
            cbuf[x].full = *((uint32_t *)src_tmp);
#endif
            abuf[x] = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800f4de:	f89b 4002 	ldrb.w	r4, [fp, #2]
 800f4e2:	f801 400c 	strb.w	r4, [r1, ip]
 800f4e6:	e7d2      	b.n	800f48e <argb_no_aa+0x26>
        }
    }
}
 800f4e8:	b003      	add	sp, #12
 800f4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4ee <rgb565a8_no_aa>:

#if LV_COLOR_DEPTH == 16
static void rgb565a8_no_aa(const uint8_t * src, lv_coord_t src_w, lv_coord_t src_h, lv_coord_t src_stride,
                           int32_t xs_ups, int32_t ys_ups, int32_t xs_step, int32_t ys_step,
                           int32_t x_end, lv_color_t * cbuf, uint8_t * abuf)
{
 800f4ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f2:	4683      	mov	fp, r0
 800f4f4:	4688      	mov	r8, r1
 800f4f6:	4691      	mov	r9, r2
 800f4f8:	469a      	mov	sl, r3
 800f4fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4fe:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f500:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f502:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f504:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    int32_t xs_ups_start = xs_ups;
    int32_t ys_ups_start = ys_ups;

    lv_coord_t x;
    for(x = 0; x < x_end; x++) {
 800f506:	f04f 0c00 	mov.w	ip, #0
 800f50a:	e006      	b.n	800f51a <rgb565a8_no_aa+0x2c>
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);

        int32_t xs_int = xs_ups >> 8;
        int32_t ys_int = ys_ups >> 8;
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
            abuf[x] = 0;
 800f50c:	2400      	movs	r4, #0
 800f50e:	f801 400c 	strb.w	r4, [r1, ip]
    for(x = 0; x < x_end; x++) {
 800f512:	f10c 0c01 	add.w	ip, ip, #1
 800f516:	fa0f fc8c 	sxth.w	ip, ip
 800f51a:	45ac      	cmp	ip, r5
 800f51c:	da21      	bge.n	800f562 <rgb565a8_no_aa+0x74>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 800f51e:	fb07 fe0c 	mul.w	lr, r7, ip
 800f522:	eb02 2e2e 	add.w	lr, r2, lr, asr #8
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 800f526:	fb06 f40c 	mul.w	r4, r6, ip
 800f52a:	eb03 2424 	add.w	r4, r3, r4, asr #8
        int32_t ys_int = ys_ups >> 8;
 800f52e:	1224      	asrs	r4, r4, #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 800f530:	ea5f 2e2e 	movs.w	lr, lr, asr #8
 800f534:	d4ea      	bmi.n	800f50c <rgb565a8_no_aa+0x1e>
 800f536:	45f0      	cmp	r8, lr
 800f538:	dde8      	ble.n	800f50c <rgb565a8_no_aa+0x1e>
 800f53a:	2c00      	cmp	r4, #0
 800f53c:	dbe6      	blt.n	800f50c <rgb565a8_no_aa+0x1e>
 800f53e:	45a1      	cmp	r9, r4
 800f540:	dde4      	ble.n	800f50c <rgb565a8_no_aa+0x1e>
        }
        else {
            const lv_color_t * src_tmp = (const lv_color_t *)src;
            src_tmp += ys_int * src_stride + xs_int;
 800f542:	fb04 ee0a 	mla	lr, r4, sl, lr
            cbuf[x] = *src_tmp;
 800f546:	f83b 401e 	ldrh.w	r4, [fp, lr, lsl #1]
 800f54a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800f54c:	f820 401c 	strh.w	r4, [r0, ip, lsl #1]

            const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 800f550:	fb0a f409 	mul.w	r4, sl, r9
            a_tmp += ys_int * src_stride + xs_int;
 800f554:	eb0e 0e44 	add.w	lr, lr, r4, lsl #1
            abuf[x] = *a_tmp;
 800f558:	f81b 400e 	ldrb.w	r4, [fp, lr]
 800f55c:	f801 400c 	strb.w	r4, [r1, ip]
 800f560:	e7d7      	b.n	800f512 <rgb565a8_no_aa+0x24>
        }
    }
}
 800f562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f566 <transform_point_upscaled>:
    }
}

static void transform_point_upscaled(point_transform_dsc_t * t, int32_t xin, int32_t yin, int32_t * xout,
                                     int32_t * yout)
{
 800f566:	b430      	push	{r4, r5}
    if(t->angle == 0 && t->zoom == LV_IMG_ZOOM_NONE) {
 800f568:	69c4      	ldr	r4, [r0, #28]
 800f56a:	b91c      	cbnz	r4, 800f574 <transform_point_upscaled+0xe>
 800f56c:	6985      	ldr	r5, [r0, #24]
 800f56e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800f572:	d015      	beq.n	800f5a0 <transform_point_upscaled+0x3a>
        *xout = xin * 256;
        *yout = yin * 256;
        return;
    }

    xin -= t->pivot.x;
 800f574:	f9b0 c028 	ldrsh.w	ip, [r0, #40]	@ 0x28
 800f578:	eba1 010c 	sub.w	r1, r1, ip
    yin -= t->pivot.y;
 800f57c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800f580:	eba2 020c 	sub.w	r2, r2, ip

    if(t->angle == 0) {
 800f584:	b994      	cbnz	r4, 800f5ac <transform_point_upscaled+0x46>
        *xout = ((int32_t)(xin * t->zoom)) + (t->pivot_x_256);
 800f586:	6a04      	ldr	r4, [r0, #32]
 800f588:	6985      	ldr	r5, [r0, #24]
 800f58a:	fb01 4405 	mla	r4, r1, r5, r4
 800f58e:	601c      	str	r4, [r3, #0]
        *yout = ((int32_t)(yin * t->zoom)) + (t->pivot_y_256);
 800f590:	6981      	ldr	r1, [r0, #24]
 800f592:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f594:	fb02 3301 	mla	r3, r2, r1, r3
 800f598:	9a02      	ldr	r2, [sp, #8]
 800f59a:	6013      	str	r3, [r2, #0]
    }
    else {
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
    }
}
 800f59c:	bc30      	pop	{r4, r5}
 800f59e:	4770      	bx	lr
        *xout = xin * 256;
 800f5a0:	0209      	lsls	r1, r1, #8
 800f5a2:	6019      	str	r1, [r3, #0]
        *yout = yin * 256;
 800f5a4:	0212      	lsls	r2, r2, #8
 800f5a6:	9b02      	ldr	r3, [sp, #8]
 800f5a8:	601a      	str	r2, [r3, #0]
        return;
 800f5aa:	e7f7      	b.n	800f59c <transform_point_upscaled+0x36>
    else if(t->zoom == LV_IMG_ZOOM_NONE) {
 800f5ac:	6984      	ldr	r4, [r0, #24]
 800f5ae:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800f5b2:	d01a      	beq.n	800f5ea <transform_point_upscaled+0x84>
        *xout = (((t->cosma * xin - t->sinma * yin) * t->zoom) >> 10) + (t->pivot_x_256);
 800f5b4:	6945      	ldr	r5, [r0, #20]
 800f5b6:	fb01 fc05 	mul.w	ip, r1, r5
 800f5ba:	6905      	ldr	r5, [r0, #16]
 800f5bc:	fb02 cc15 	mls	ip, r2, r5, ip
 800f5c0:	fb0c f404 	mul.w	r4, ip, r4
 800f5c4:	6a05      	ldr	r5, [r0, #32]
 800f5c6:	eb05 24a4 	add.w	r4, r5, r4, asr #10
 800f5ca:	601c      	str	r4, [r3, #0]
        *yout = (((t->sinma * xin + t->cosma * yin) * t->zoom) >> 10) + (t->pivot_y_256);
 800f5cc:	6904      	ldr	r4, [r0, #16]
 800f5ce:	6943      	ldr	r3, [r0, #20]
 800f5d0:	fb02 f303 	mul.w	r3, r2, r3
 800f5d4:	fb01 3304 	mla	r3, r1, r4, r3
 800f5d8:	6982      	ldr	r2, [r0, #24]
 800f5da:	fb02 f303 	mul.w	r3, r2, r3
 800f5de:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800f5e0:	eb02 23a3 	add.w	r3, r2, r3, asr #10
 800f5e4:	9a02      	ldr	r2, [sp, #8]
 800f5e6:	6013      	str	r3, [r2, #0]
 800f5e8:	e7d8      	b.n	800f59c <transform_point_upscaled+0x36>
        *xout = ((t->cosma * xin - t->sinma * yin) >> 2) + (t->pivot_x_256);
 800f5ea:	6944      	ldr	r4, [r0, #20]
 800f5ec:	fb01 f404 	mul.w	r4, r1, r4
 800f5f0:	6905      	ldr	r5, [r0, #16]
 800f5f2:	fb02 4415 	mls	r4, r2, r5, r4
 800f5f6:	6a05      	ldr	r5, [r0, #32]
 800f5f8:	eb05 04a4 	add.w	r4, r5, r4, asr #2
 800f5fc:	601c      	str	r4, [r3, #0]
        *yout = ((t->sinma * xin + t->cosma * yin) >> 2) + (t->pivot_y_256);
 800f5fe:	6904      	ldr	r4, [r0, #16]
 800f600:	6943      	ldr	r3, [r0, #20]
 800f602:	fb02 f303 	mul.w	r3, r2, r3
 800f606:	fb01 3304 	mla	r3, r1, r4, r3
 800f60a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800f60c:	eb02 03a3 	add.w	r3, r2, r3, asr #2
 800f610:	9a02      	ldr	r2, [sp, #8]
 800f612:	6013      	str	r3, [r2, #0]
 800f614:	e7c2      	b.n	800f59c <transform_point_upscaled+0x36>

0800f616 <argb_and_rgb_aa>:
{
 800f616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	b08f      	sub	sp, #60	@ 0x3c
 800f61c:	9001      	str	r0, [sp, #4]
 800f61e:	4689      	mov	r9, r1
 800f620:	9200      	str	r2, [sp, #0]
 800f622:	9305      	str	r3, [sp, #20]
 800f624:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f628:	f89d b07c 	ldrb.w	fp, [sp, #124]	@ 0x7c
    lv_color_t ck = _LV_COLOR_ZERO_INITIALIZER;
 800f62c:	f04f 0300 	mov.w	r3, #0
 800f630:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    switch(cf) {
 800f634:	f1ab 0304 	sub.w	r3, fp, #4
 800f638:	2b10      	cmp	r3, #16
 800f63a:	f200 8192 	bhi.w	800f962 <argb_and_rgb_aa+0x34c>
 800f63e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f642:	0011      	.short	0x0011
 800f644:	0016002e 	.word	0x0016002e
 800f648:	01900190 	.word	0x01900190
 800f64c:	01900190 	.word	0x01900190
 800f650:	01900190 	.word	0x01900190
 800f654:	01900190 	.word	0x01900190
 800f658:	01900190 	.word	0x01900190
 800f65c:	01900190 	.word	0x01900190
 800f660:	00290190 	.word	0x00290190
 800f664:	2302      	movs	r3, #2
 800f666:	9302      	str	r3, [sp, #8]
 800f668:	2300      	movs	r3, #0
 800f66a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f66c:	e009      	b.n	800f682 <argb_and_rgb_aa+0x6c>
                lv_disp_t * d = _lv_refr_get_disp_refreshing();
 800f66e:	f00f fd0d 	bl	801f08c <_lv_refr_get_disp_refreshing>
                ck = d->driver->color_chroma_key;
 800f672:	6803      	ldr	r3, [r0, #0]
 800f674:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f676:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
                px_size = sizeof(lv_color_t);
 800f67a:	2302      	movs	r3, #2
 800f67c:	9302      	str	r3, [sp, #8]
                has_alpha = true;
 800f67e:	2301      	movs	r3, #1
 800f680:	930a      	str	r3, [sp, #40]	@ 0x28
    for(x = 0; x < x_end; x++) {
 800f682:	2400      	movs	r4, #0
 800f684:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 800f688:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f68a:	f8cd b018 	str.w	fp, [sp, #24]
 800f68e:	f8dd b064 	ldr.w	fp, [sp, #100]	@ 0x64
 800f692:	e00e      	b.n	800f6b2 <argb_and_rgb_aa+0x9c>
            px_size = sizeof(lv_color_t);
 800f694:	2302      	movs	r3, #2
 800f696:	9302      	str	r3, [sp, #8]
            has_alpha = true;
 800f698:	2301      	movs	r3, #1
 800f69a:	930a      	str	r3, [sp, #40]	@ 0x28
            break;
 800f69c:	e7f1      	b.n	800f682 <argb_and_rgb_aa+0x6c>
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
 800f69e:	2303      	movs	r3, #3
 800f6a0:	9302      	str	r3, [sp, #8]
            has_alpha = true;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6a6:	e7ec      	b.n	800f682 <argb_and_rgb_aa+0x6c>
            abuf[x] = 0x00;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f6ac:	5513      	strb	r3, [r2, r4]
    for(x = 0; x < x_end; x++) {
 800f6ae:	3401      	adds	r4, #1
 800f6b0:	b224      	sxth	r4, r4
 800f6b2:	4554      	cmp	r4, sl
 800f6b4:	f280 8155 	bge.w	800f962 <argb_and_rgb_aa+0x34c>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 800f6b8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f6ba:	fb03 f104 	mul.w	r1, r3, r4
 800f6be:	eb08 2121 	add.w	r1, r8, r1, asr #8
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 800f6c2:	fb05 f604 	mul.w	r6, r5, r4
 800f6c6:	eb0b 2626 	add.w	r6, fp, r6, asr #8
        int32_t ys_int = ys_ups >> 8;
 800f6ca:	1232      	asrs	r2, r6, #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 800f6cc:	120b      	asrs	r3, r1, #8
 800f6ce:	d4eb      	bmi.n	800f6a8 <argb_and_rgb_aa+0x92>
 800f6d0:	4599      	cmp	r9, r3
 800f6d2:	dde9      	ble.n	800f6a8 <argb_and_rgb_aa+0x92>
 800f6d4:	2a00      	cmp	r2, #0
 800f6d6:	dbe7      	blt.n	800f6a8 <argb_and_rgb_aa+0x92>
 800f6d8:	9800      	ldr	r0, [sp, #0]
 800f6da:	4290      	cmp	r0, r2
 800f6dc:	dde4      	ble.n	800f6a8 <argb_and_rgb_aa+0x92>
        int32_t xs_fract = xs_ups & 0xFF;
 800f6de:	b2c8      	uxtb	r0, r1
        int32_t ys_fract = ys_ups & 0xFF;
 800f6e0:	b2f7      	uxtb	r7, r6
        if(xs_fract < 0x80) {
 800f6e2:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800f6e6:	d148      	bne.n	800f77a <argb_and_rgb_aa+0x164>
            xs_fract = (0x7F - xs_fract) * 2;
 800f6e8:	f1c0 007f 	rsb	r0, r0, #127	@ 0x7f
 800f6ec:	0041      	lsls	r1, r0, #1
 800f6ee:	9107      	str	r1, [sp, #28]
            x_next = -1;
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
        if(ys_fract < 0x80) {
 800f6f4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800f6f8:	d144      	bne.n	800f784 <argb_and_rgb_aa+0x16e>
            ys_fract = (0x7F - ys_fract) * 2;
 800f6fa:	f1c7 077f 	rsb	r7, r7, #127	@ 0x7f
 800f6fe:	0079      	lsls	r1, r7, #1
 800f700:	9108      	str	r1, [sp, #32]
            y_next = -1;
 800f702:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
        src_tmp += (ys_int * src_stride * px_size) + xs_int * px_size;
 800f706:	9905      	ldr	r1, [sp, #20]
 800f708:	fb02 f101 	mul.w	r1, r2, r1
 800f70c:	9103      	str	r1, [sp, #12]
 800f70e:	9f02      	ldr	r7, [sp, #8]
 800f710:	fb03 f107 	mul.w	r1, r3, r7
 800f714:	9e03      	ldr	r6, [sp, #12]
 800f716:	fb07 1106 	mla	r1, r7, r6, r1
 800f71a:	9f01      	ldr	r7, [sp, #4]
 800f71c:	187e      	adds	r6, r7, r1
 800f71e:	9604      	str	r6, [sp, #16]
        if(xs_int + x_next >= 0 &&
 800f720:	eb10 0e03 	adds.w	lr, r0, r3
 800f724:	f100 80c7 	bmi.w	800f8b6 <argb_and_rgb_aa+0x2a0>
 800f728:	45f1      	cmp	r9, lr
 800f72a:	f340 80c4 	ble.w	800f8b6 <argb_and_rgb_aa+0x2a0>
           xs_int + x_next <= src_w - 1 &&
 800f72e:	eb1c 0e02 	adds.w	lr, ip, r2
 800f732:	f100 80c0 	bmi.w	800f8b6 <argb_and_rgb_aa+0x2a0>
           ys_int + y_next >= 0 &&
 800f736:	9f00      	ldr	r7, [sp, #0]
 800f738:	4577      	cmp	r7, lr
 800f73a:	f340 80bc 	ble.w	800f8b6 <argb_and_rgb_aa+0x2a0>
            const uint8_t * px_hor = src_tmp + x_next * px_size;
 800f73e:	9a02      	ldr	r2, [sp, #8]
 800f740:	fb00 f702 	mul.w	r7, r0, r2
 800f744:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f746:	4437      	add	r7, r6
 800f748:	970c      	str	r7, [sp, #48]	@ 0x30
            const uint8_t * px_ver = src_tmp + y_next * src_stride * px_size;
 800f74a:	9f05      	ldr	r7, [sp, #20]
 800f74c:	fb0c fc07 	mul.w	ip, ip, r7
 800f750:	fb02 fc0c 	mul.w	ip, r2, ip
 800f754:	4632      	mov	r2, r6
 800f756:	4462      	add	r2, ip
 800f758:	920d      	str	r2, [sp, #52]	@ 0x34
            if(has_alpha) {
 800f75a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f75c:	2a00      	cmp	r2, #0
 800f75e:	d079      	beq.n	800f854 <argb_and_rgb_aa+0x23e>
                if(cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
 800f760:	9a06      	ldr	r2, [sp, #24]
 800f762:	2a05      	cmp	r2, #5
 800f764:	d014      	beq.n	800f790 <argb_and_rgb_aa+0x17a>
                else if(cf == LV_IMG_CF_RGB565A8) {
 800f766:	9a06      	ldr	r2, [sp, #24]
 800f768:	2a14      	cmp	r2, #20
 800f76a:	d049      	beq.n	800f800 <argb_and_rgb_aa+0x1ea>
                else if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800f76c:	9b06      	ldr	r3, [sp, #24]
 800f76e:	2b06      	cmp	r3, #6
 800f770:	d059      	beq.n	800f826 <argb_and_rgb_aa+0x210>
                    a_hor = 0xff;
 800f772:	22ff      	movs	r2, #255	@ 0xff
                    a_ver = 0xff;
 800f774:	4610      	mov	r0, r2
                    a_base = 0xff;
 800f776:	4616      	mov	r6, r2
 800f778:	e00f      	b.n	800f79a <argb_and_rgb_aa+0x184>
            xs_fract = (xs_fract - 0x80) * 2;
 800f77a:	3880      	subs	r0, #128	@ 0x80
 800f77c:	0041      	lsls	r1, r0, #1
 800f77e:	9107      	str	r1, [sp, #28]
            x_next = 1;
 800f780:	2001      	movs	r0, #1
 800f782:	e7b7      	b.n	800f6f4 <argb_and_rgb_aa+0xde>
            ys_fract = (ys_fract - 0x80) * 2;
 800f784:	3f80      	subs	r7, #128	@ 0x80
 800f786:	0079      	lsls	r1, r7, #1
 800f788:	9108      	str	r1, [sp, #32]
            y_next = 1;
 800f78a:	f04f 0c01 	mov.w	ip, #1
 800f78e:	e7ba      	b.n	800f706 <argb_and_rgb_aa+0xf0>
                    a_base = px_base[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800f790:	78b6      	ldrb	r6, [r6, #2]
                    a_ver = px_ver[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800f792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f794:	7898      	ldrb	r0, [r3, #2]
                    a_hor = px_hor[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800f796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f798:	789a      	ldrb	r2, [r3, #2]
                if(a_ver != a_base) a_ver = ((a_ver * ys_fract) + (a_base * (0x100 - ys_fract))) >> 8;
 800f79a:	4286      	cmp	r6, r0
 800f79c:	d008      	beq.n	800f7b0 <argb_and_rgb_aa+0x19a>
 800f79e:	9f08      	ldr	r7, [sp, #32]
 800f7a0:	f5c7 7380 	rsb	r3, r7, #256	@ 0x100
 800f7a4:	fb06 f303 	mul.w	r3, r6, r3
 800f7a8:	fb07 3300 	mla	r3, r7, r0, r3
 800f7ac:	f3c3 2007 	ubfx	r0, r3, #8, #8
                if(a_hor != a_base) a_hor = ((a_hor * xs_fract) + (a_base * (0x100 - xs_fract))) >> 8;
 800f7b0:	4296      	cmp	r6, r2
 800f7b2:	d008      	beq.n	800f7c6 <argb_and_rgb_aa+0x1b0>
 800f7b4:	9f07      	ldr	r7, [sp, #28]
 800f7b6:	f5c7 7380 	rsb	r3, r7, #256	@ 0x100
 800f7ba:	fb06 f303 	mul.w	r3, r6, r3
 800f7be:	fb07 3302 	mla	r3, r7, r2, r3
 800f7c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
                abuf[x] = (a_ver + a_hor) >> 1;
 800f7c6:	1883      	adds	r3, r0, r2
 800f7c8:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800f7cc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f7ce:	5513      	strb	r3, [r2, r4]
                if(abuf[x] == 0x00) continue;
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f43f af6c 	beq.w	800f6ae <argb_and_rgb_aa+0x98>
                c_base.full = px_base[0] + (px_base[1] << 8);
 800f7d6:	9b01      	ldr	r3, [sp, #4]
 800f7d8:	5c5b      	ldrb	r3, [r3, r1]
 800f7da:	9804      	ldr	r0, [sp, #16]
 800f7dc:	7842      	ldrb	r2, [r0, #1]
 800f7de:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f7e2:	4619      	mov	r1, r3
                c_ver.full = px_ver[0] + (px_ver[1] << 8);
 800f7e4:	f810 300c 	ldrb.w	r3, [r0, ip]
 800f7e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7ea:	7852      	ldrb	r2, [r2, #1]
 800f7ec:	eb03 2602 	add.w	r6, r3, r2, lsl #8
                c_hor.full = px_hor[0] + (px_hor[1] << 8);
 800f7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7f2:	5cc3      	ldrb	r3, [r0, r3]
 800f7f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f7f6:	7852      	ldrb	r2, [r2, #1]
 800f7f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f7fc:	9303      	str	r3, [sp, #12]
 800f7fe:	e036      	b.n	800f86e <argb_and_rgb_aa+0x258>
                    const lv_opa_t * a_tmp = src + src_stride * src_h * sizeof(lv_color_t);
 800f800:	9f00      	ldr	r7, [sp, #0]
 800f802:	9a05      	ldr	r2, [sp, #20]
 800f804:	fb02 f207 	mul.w	r2, r2, r7
 800f808:	9f01      	ldr	r7, [sp, #4]
 800f80a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
                    a_base = *(a_tmp + (ys_int * src_stride) + xs_int);
 800f80e:	9a03      	ldr	r2, [sp, #12]
 800f810:	441a      	add	r2, r3
 800f812:	5cbe      	ldrb	r6, [r7, r2]
                    a_hor = *(a_tmp + (ys_int * src_stride) + xs_int + x_next);
 800f814:	4402      	add	r2, r0
 800f816:	4638      	mov	r0, r7
 800f818:	5cba      	ldrb	r2, [r7, r2]
                    a_ver = *(a_tmp + ((ys_int + y_next) * src_stride) + xs_int);
 800f81a:	9f05      	ldr	r7, [sp, #20]
 800f81c:	fb0e 3e07 	mla	lr, lr, r7, r3
 800f820:	f810 000e 	ldrb.w	r0, [r0, lr]
 800f824:	e7b9      	b.n	800f79a <argb_and_rgb_aa+0x184>
                    if(((lv_color_t *)px_base)->full == ck.full ||
 800f826:	9b01      	ldr	r3, [sp, #4]
 800f828:	5a5b      	ldrh	r3, [r3, r1]
 800f82a:	f8bd 2026 	ldrh.w	r2, [sp, #38]	@ 0x26
 800f82e:	4293      	cmp	r3, r2
 800f830:	d00c      	beq.n	800f84c <argb_and_rgb_aa+0x236>
                       ((lv_color_t *)px_ver)->full == ck.full ||
 800f832:	9804      	ldr	r0, [sp, #16]
 800f834:	f830 300c 	ldrh.w	r3, [r0, ip]
                    if(((lv_color_t *)px_base)->full == ck.full ||
 800f838:	429a      	cmp	r2, r3
 800f83a:	d007      	beq.n	800f84c <argb_and_rgb_aa+0x236>
                       ((lv_color_t *)px_hor)->full == ck.full) {
 800f83c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f83e:	5ac3      	ldrh	r3, [r0, r3]
                       ((lv_color_t *)px_ver)->full == ck.full ||
 800f840:	429a      	cmp	r2, r3
 800f842:	d003      	beq.n	800f84c <argb_and_rgb_aa+0x236>
                        a_hor = 0xff;
 800f844:	22ff      	movs	r2, #255	@ 0xff
                        a_ver = 0xff;
 800f846:	4610      	mov	r0, r2
                        a_base = 0xff;
 800f848:	4616      	mov	r6, r2
 800f84a:	e7a6      	b.n	800f79a <argb_and_rgb_aa+0x184>
                        abuf[x] = 0x00;
 800f84c:	2300      	movs	r3, #0
 800f84e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f850:	5513      	strb	r3, [r2, r4]
                        continue;
 800f852:	e72c      	b.n	800f6ae <argb_and_rgb_aa+0x98>
                c_base = *((const lv_color_t *) px_base);
 800f854:	9b01      	ldr	r3, [sp, #4]
 800f856:	5a5b      	ldrh	r3, [r3, r1]
 800f858:	4619      	mov	r1, r3
                c_hor = *((const lv_color_t *) px_hor);
 800f85a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f85c:	9a04      	ldr	r2, [sp, #16]
 800f85e:	5ad3      	ldrh	r3, [r2, r3]
 800f860:	f8ad 300c 	strh.w	r3, [sp, #12]
                c_ver = *((const lv_color_t *) px_ver);
 800f864:	f832 600c 	ldrh.w	r6, [r2, ip]
                abuf[x] = 0xff;
 800f868:	23ff      	movs	r3, #255	@ 0xff
 800f86a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f86c:	5513      	strb	r3, [r2, r4]
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 800f86e:	b28b      	uxth	r3, r1
 800f870:	b2b2      	uxth	r2, r6
 800f872:	4293      	cmp	r3, r2
 800f874:	d017      	beq.n	800f8a6 <argb_and_rgb_aa+0x290>
                c_ver = lv_color_mix(c_ver, c_base, ys_fract);
 800f876:	9b08      	ldr	r3, [sp, #32]
 800f878:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800f87c:	460f      	mov	r7, r1
 800f87e:	4630      	mov	r0, r6
 800f880:	f7ff fdcc 	bl	800f41c <lv_color_mix>
 800f884:	4606      	mov	r6, r0
                c_hor = lv_color_mix(c_hor, c_base, xs_fract);
 800f886:	9b07      	ldr	r3, [sp, #28]
 800f888:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 800f88c:	4639      	mov	r1, r7
 800f88e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800f892:	f7ff fdc3 	bl	800f41c <lv_color_mix>
                cbuf[x] = lv_color_mix(c_hor, c_ver, LV_OPA_50);
 800f896:	227f      	movs	r2, #127	@ 0x7f
 800f898:	4631      	mov	r1, r6
 800f89a:	f7ff fdbf 	bl	800f41c <lv_color_mix>
 800f89e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8a0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
           ys_int + y_next <= src_h - 1) {
 800f8a4:	e703      	b.n	800f6ae <argb_and_rgb_aa+0x98>
            if(c_base.full == c_ver.full && c_base.full == c_hor.full) {
 800f8a6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d1e3      	bne.n	800f876 <argb_and_rgb_aa+0x260>
                cbuf[x] = c_base;
 800f8ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8b0:	f823 1014 	strh.w	r1, [r3, r4, lsl #1]
 800f8b4:	e6fb      	b.n	800f6ae <argb_and_rgb_aa+0x98>
            cbuf[x].full = src_tmp[0] + (src_tmp[1] << 8);
 800f8b6:	9f01      	ldr	r7, [sp, #4]
 800f8b8:	5c79      	ldrb	r1, [r7, r1]
 800f8ba:	9e04      	ldr	r6, [sp, #16]
 800f8bc:	f896 e001 	ldrb.w	lr, [r6, #1]
 800f8c0:	9404      	str	r4, [sp, #16]
 800f8c2:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800f8c6:	b289      	uxth	r1, r1
 800f8c8:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800f8ca:	f827 1014 	strh.w	r1, [r7, r4, lsl #1]
            switch(cf) {
 800f8ce:	9f06      	ldr	r7, [sp, #24]
 800f8d0:	2f06      	cmp	r7, #6
 800f8d2:	d018      	beq.n	800f906 <argb_and_rgb_aa+0x2f0>
 800f8d4:	2f14      	cmp	r7, #20
 800f8d6:	d01e      	beq.n	800f916 <argb_and_rgb_aa+0x300>
 800f8d8:	2f05      	cmp	r7, #5
 800f8da:	d127      	bne.n	800f92c <argb_and_rgb_aa+0x316>
                    a = src_tmp[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
 800f8dc:	78b1      	ldrb	r1, [r6, #2]
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 800f8de:	b90b      	cbnz	r3, 800f8e4 <argb_and_rgb_aa+0x2ce>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	db27      	blt.n	800f934 <argb_and_rgb_aa+0x31e>
 800f8e4:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	d021      	beq.n	800f930 <argb_and_rgb_aa+0x31a>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 800f8ec:	b912      	cbnz	r2, 800f8f4 <argb_and_rgb_aa+0x2de>
 800f8ee:	f1bc 0f00 	cmp.w	ip, #0
 800f8f2:	db2c      	blt.n	800f94e <argb_and_rgb_aa+0x338>
 800f8f4:	9b00      	ldr	r3, [sp, #0]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d025      	beq.n	800f948 <argb_and_rgb_aa+0x332>
                abuf[x] = 0x00;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f900:	9904      	ldr	r1, [sp, #16]
 800f902:	5453      	strb	r3, [r2, r1]
 800f904:	e6d3      	b.n	800f6ae <argb_and_rgb_aa+0x98>
                    a = cbuf[x].full == ck.full ? 0x00 : 0xff;
 800f906:	f8bd 6026 	ldrh.w	r6, [sp, #38]	@ 0x26
 800f90a:	42b1      	cmp	r1, r6
 800f90c:	d001      	beq.n	800f912 <argb_and_rgb_aa+0x2fc>
 800f90e:	21ff      	movs	r1, #255	@ 0xff
 800f910:	e7e5      	b.n	800f8de <argb_and_rgb_aa+0x2c8>
 800f912:	2100      	movs	r1, #0
 800f914:	e7e3      	b.n	800f8de <argb_and_rgb_aa+0x2c8>
                    a = *(src + src_stride * src_h * sizeof(lv_color_t) + (ys_int * src_stride) + xs_int);
 800f916:	9900      	ldr	r1, [sp, #0]
 800f918:	9f05      	ldr	r7, [sp, #20]
 800f91a:	fb07 f101 	mul.w	r1, r7, r1
 800f91e:	9e03      	ldr	r6, [sp, #12]
 800f920:	eb06 0641 	add.w	r6, r6, r1, lsl #1
 800f924:	441e      	add	r6, r3
 800f926:	9901      	ldr	r1, [sp, #4]
 800f928:	5d89      	ldrb	r1, [r1, r6]
                    break;
 800f92a:	e7d8      	b.n	800f8de <argb_and_rgb_aa+0x2c8>
            switch(cf) {
 800f92c:	21ff      	movs	r1, #255	@ 0xff
 800f92e:	e7d6      	b.n	800f8de <argb_and_rgb_aa+0x2c8>
            if((xs_int == 0 && x_next < 0) || (xs_int == src_w - 1 && x_next > 0))  {
 800f930:	2800      	cmp	r0, #0
 800f932:	dddb      	ble.n	800f8ec <argb_and_rgb_aa+0x2d6>
                abuf[x] = (a * (0xFF - xs_fract)) >> 8;
 800f934:	9b07      	ldr	r3, [sp, #28]
 800f936:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800f93a:	fb01 f303 	mul.w	r3, r1, r3
 800f93e:	121b      	asrs	r3, r3, #8
 800f940:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800f942:	9904      	ldr	r1, [sp, #16]
 800f944:	5453      	strb	r3, [r2, r1]
 800f946:	e6b2      	b.n	800f6ae <argb_and_rgb_aa+0x98>
            else if((ys_int == 0 && y_next < 0) || (ys_int == src_h - 1 && y_next > 0))  {
 800f948:	f1bc 0f00 	cmp.w	ip, #0
 800f94c:	ddd6      	ble.n	800f8fc <argb_and_rgb_aa+0x2e6>
                abuf[x] = (a * (0xFF - ys_fract)) >> 8;
 800f94e:	9b08      	ldr	r3, [sp, #32]
 800f950:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800f954:	fb03 f101 	mul.w	r1, r3, r1
 800f958:	1209      	asrs	r1, r1, #8
 800f95a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f95c:	9a04      	ldr	r2, [sp, #16]
 800f95e:	5499      	strb	r1, [r3, r2]
 800f960:	e6a5      	b.n	800f6ae <argb_and_rgb_aa+0x98>
}
 800f962:	b00f      	add	sp, #60	@ 0x3c
 800f964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f968 <rgb_no_aa>:
{
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	b085      	sub	sp, #20
 800f96e:	9002      	str	r0, [sp, #8]
 800f970:	468b      	mov	fp, r1
 800f972:	9201      	str	r2, [sp, #4]
 800f974:	9303      	str	r3, [sp, #12]
 800f976:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800f97a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800f97e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800f982:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f984:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800f986:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f988:	f89d 6054 	ldrb.w	r6, [sp, #84]	@ 0x54
    lv_disp_t * d = _lv_refr_get_disp_refreshing();
 800f98c:	f00f fb7e 	bl	801f08c <_lv_refr_get_disp_refreshing>
    lv_color_t ck = d->driver->color_chroma_key;
 800f990:	6803      	ldr	r3, [r0, #0]
 800f992:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f994:	f8ad 3002 	strh.w	r3, [sp, #2]
    lv_memset_ff(abuf, x_end);
 800f998:	4621      	mov	r1, r4
 800f99a:	4628      	mov	r0, r5
 800f99c:	f007 f9bc 	bl	8016d18 <lv_memset_ff>
    for(x = 0; x < x_end; x++) {
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f8dd c004 	ldr.w	ip, [sp, #4]
 800f9a6:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 800f9aa:	e005      	b.n	800f9b8 <rgb_no_aa+0x50>
            abuf[x] = 0x00;
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	54ea      	strb	r2, [r5, r3]
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 800f9b0:	2e06      	cmp	r6, #6
 800f9b2:	d01d      	beq.n	800f9f0 <rgb_no_aa+0x88>
    for(x = 0; x < x_end; x++) {
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	b21b      	sxth	r3, r3
 800f9b8:	42a3      	cmp	r3, r4
 800f9ba:	da22      	bge.n	800fa02 <rgb_no_aa+0x9a>
        xs_ups = xs_ups_start + ((xs_step * x) >> 8);
 800f9bc:	fb08 f203 	mul.w	r2, r8, r3
 800f9c0:	eb0a 2222 	add.w	r2, sl, r2, asr #8
        ys_ups = ys_ups_start + ((ys_step * x) >> 8);
 800f9c4:	fb07 f103 	mul.w	r1, r7, r3
 800f9c8:	eb09 2121 	add.w	r1, r9, r1, asr #8
        int32_t ys_int = ys_ups >> 8;
 800f9cc:	1209      	asrs	r1, r1, #8
        if(xs_int < 0 || xs_int >= src_w || ys_int < 0 || ys_int >= src_h) {
 800f9ce:	1212      	asrs	r2, r2, #8
 800f9d0:	d4ec      	bmi.n	800f9ac <rgb_no_aa+0x44>
 800f9d2:	4593      	cmp	fp, r2
 800f9d4:	ddea      	ble.n	800f9ac <rgb_no_aa+0x44>
 800f9d6:	2900      	cmp	r1, #0
 800f9d8:	dbe8      	blt.n	800f9ac <rgb_no_aa+0x44>
 800f9da:	458c      	cmp	ip, r1
 800f9dc:	dde6      	ble.n	800f9ac <rgb_no_aa+0x44>
            src_tmp += ys_int * src_stride + xs_int;
 800f9de:	9803      	ldr	r0, [sp, #12]
 800f9e0:	fb01 2200 	mla	r2, r1, r0, r2
            cbuf[x] = *src_tmp;
 800f9e4:	9902      	ldr	r1, [sp, #8]
 800f9e6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800f9ea:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
 800f9ee:	e7df      	b.n	800f9b0 <rgb_no_aa+0x48>
        if(cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED && cbuf[x].full == ck.full) {
 800f9f0:	f83e 1013 	ldrh.w	r1, [lr, r3, lsl #1]
 800f9f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f9f8:	4291      	cmp	r1, r2
 800f9fa:	d1db      	bne.n	800f9b4 <rgb_no_aa+0x4c>
            abuf[x] = 0x00;
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	54ea      	strb	r2, [r5, r3]
 800fa00:	e7d8      	b.n	800f9b4 <rgb_no_aa+0x4c>
}
 800fa02:	b005      	add	sp, #20
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa08 <lv_draw_sw_transform>:
{
 800fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	b0a1      	sub	sp, #132	@ 0x84
 800fa0e:	460c      	mov	r4, r1
 800fa10:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa12:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa14:	f9bd 30a8 	ldrsh.w	r3, [sp, #168]	@ 0xa8
 800fa18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa1a:	f9bd 30ac 	ldrsh.w	r3, [sp, #172]	@ 0xac
 800fa1e:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa20:	f8dd 90b0 	ldr.w	r9, [sp, #176]	@ 0xb0
 800fa24:	f89d b0b4 	ldrb.w	fp, [sp, #180]	@ 0xb4
 800fa28:	9e2e      	ldr	r6, [sp, #184]	@ 0xb8
 800fa2a:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
    tr_dsc.angle = -draw_dsc->angle;
 800fa2c:	f9b9 2000 	ldrsh.w	r2, [r9]
 800fa30:	4250      	negs	r0, r2
 800fa32:	901c      	str	r0, [sp, #112]	@ 0x70
    tr_dsc.zoom = (256 * 256) / draw_dsc->zoom;
 800fa34:	f8b9 1002 	ldrh.w	r1, [r9, #2]
 800fa38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800fa3c:	fb93 f3f1 	sdiv	r3, r3, r1
 800fa40:	931b      	str	r3, [sp, #108]	@ 0x6c
    tr_dsc.pivot = draw_dsc->pivot;
 800fa42:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fa46:	931f      	str	r3, [sp, #124]	@ 0x7c
    int32_t angle_low = tr_dsc.angle / 10;
 800fa48:	f8df a208 	ldr.w	sl, [pc, #520]	@ 800fc54 <lv_draw_sw_transform+0x24c>
 800fa4c:	fb8a 1300 	smull	r1, r3, sl, r0
 800fa50:	17c0      	asrs	r0, r0, #31
 800fa52:	ebc0 08a3 	rsb	r8, r0, r3, asr #2
    int32_t angle_high = angle_low + 1;
 800fa56:	f108 0301 	add.w	r3, r8, #1
 800fa5a:	930d      	str	r3, [sp, #52]	@ 0x34
    int32_t angle_rem = tr_dsc.angle  - (angle_low * 10);
 800fa5c:	f06f 0709 	mvn.w	r7, #9
 800fa60:	fb07 f708 	mul.w	r7, r7, r8
 800fa64:	1abf      	subs	r7, r7, r2
    int32_t s1 = lv_trigo_sin(angle_low);
 800fa66:	fa0f f088 	sxth.w	r0, r8
 800fa6a:	f006 fe31 	bl	80166d0 <lv_trigo_sin>
 800fa6e:	900e      	str	r0, [sp, #56]	@ 0x38
    int32_t s2 = lv_trigo_sin(angle_high);
 800fa70:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 800fa74:	f006 fe2c 	bl	80166d0 <lv_trigo_sin>
 800fa78:	900f      	str	r0, [sp, #60]	@ 0x3c
    int32_t c1 = lv_trigo_sin(angle_low + 90);
 800fa7a:	f108 005a 	add.w	r0, r8, #90	@ 0x5a
 800fa7e:	b200      	sxth	r0, r0
 800fa80:	f006 fe26 	bl	80166d0 <lv_trigo_sin>
 800fa84:	4680      	mov	r8, r0
    int32_t c2 = lv_trigo_sin(angle_high + 90);
 800fa86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa88:	f103 005a 	add.w	r0, r3, #90	@ 0x5a
 800fa8c:	b200      	sxth	r0, r0
 800fa8e:	f006 fe1f 	bl	80166d0 <lv_trigo_sin>
    tr_dsc.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
 800fa92:	f1c7 010a 	rsb	r1, r7, #10
 800fa96:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fa98:	fb07 f202 	mul.w	r2, r7, r2
 800fa9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa9e:	fb03 2201 	mla	r2, r3, r1, r2
 800faa2:	fb8a c302 	smull	ip, r3, sl, r2
 800faa6:	17d2      	asrs	r2, r2, #31
 800faa8:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
 800faac:	9219      	str	r2, [sp, #100]	@ 0x64
    tr_dsc.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
 800faae:	fb00 f307 	mul.w	r3, r0, r7
 800fab2:	fb08 3301 	mla	r3, r8, r1, r3
 800fab6:	fb8a 1a03 	smull	r1, sl, sl, r3
 800faba:	17db      	asrs	r3, r3, #31
 800fabc:	ebc3 03aa 	rsb	r3, r3, sl, asr #2
 800fac0:	931a      	str	r3, [sp, #104]	@ 0x68
    tr_dsc.sinma = tr_dsc.sinma >> (LV_TRIGO_SHIFT - 10);
 800fac2:	1152      	asrs	r2, r2, #5
 800fac4:	9219      	str	r2, [sp, #100]	@ 0x64
    tr_dsc.cosma = tr_dsc.cosma >> (LV_TRIGO_SHIFT - 10);
 800fac6:	115b      	asrs	r3, r3, #5
 800fac8:	931a      	str	r3, [sp, #104]	@ 0x68
    tr_dsc.pivot_x_256 = tr_dsc.pivot.x * 256;
 800faca:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	@ 0x7c
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	931d      	str	r3, [sp, #116]	@ 0x74
    tr_dsc.pivot_y_256 = tr_dsc.pivot.y * 256;
 800fad2:	f9bd 307e 	ldrsh.w	r3, [sp, #126]	@ 0x7e
 800fad6:	021b      	lsls	r3, r3, #8
 800fad8:	931e      	str	r3, [sp, #120]	@ 0x78
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 800fada:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800fade:	8823      	ldrh	r3, [r4, #0]
 800fae0:	eba8 0803 	sub.w	r8, r8, r3
 800fae4:	fa1f f888 	uxth.w	r8, r8
 800fae8:	f108 0801 	add.w	r8, r8, #1
 800faec:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 800faf0:	f8b4 a006 	ldrh.w	sl, [r4, #6]
 800faf4:	8863      	ldrh	r3, [r4, #2]
 800faf6:	ebaa 0a03 	sub.w	sl, sl, r3
 800fafa:	fa1f fa8a 	uxth.w	sl, sl
 800fafe:	f10a 0a01 	add.w	sl, sl, #1
 800fb02:	fa0f fa8a 	sxth.w	sl, sl
    for(y = 0; y < dest_h; y++) {
 800fb06:	2700      	movs	r7, #0
 800fb08:	4623      	mov	r3, r4
 800fb0a:	4644      	mov	r4, r8
 800fb0c:	4698      	mov	r8, r3
 800fb0e:	e042      	b.n	800fb96 <lv_draw_sw_transform+0x18e>
        int32_t ys_step_256 = 0;
 800fb10:	2300      	movs	r3, #0
        int32_t xs_step_256 = 0;
 800fb12:	461a      	mov	r2, r3
 800fb14:	e067      	b.n	800fbe6 <lv_draw_sw_transform+0x1de>
                    argb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 800fb16:	9506      	str	r5, [sp, #24]
 800fb18:	9605      	str	r6, [sp, #20]
 800fb1a:	9404      	str	r4, [sp, #16]
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	9202      	str	r2, [sp, #8]
 800fb20:	9001      	str	r0, [sp, #4]
 800fb22:	9100      	str	r1, [sp, #0]
 800fb24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb2c:	f7ff fc9c 	bl	800f468 <argb_no_aa>
                    break;
 800fb30:	e02c      	b.n	800fb8c <lv_draw_sw_transform+0x184>
                    rgb_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 800fb32:	f8cd b01c 	str.w	fp, [sp, #28]
 800fb36:	9506      	str	r5, [sp, #24]
 800fb38:	9605      	str	r6, [sp, #20]
 800fb3a:	9404      	str	r4, [sp, #16]
 800fb3c:	9303      	str	r3, [sp, #12]
 800fb3e:	9202      	str	r2, [sp, #8]
 800fb40:	9001      	str	r0, [sp, #4]
 800fb42:	9100      	str	r1, [sp, #0]
 800fb44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb4c:	f7ff ff0c 	bl	800f968 <rgb_no_aa>
                    break;
 800fb50:	e01c      	b.n	800fb8c <lv_draw_sw_transform+0x184>
                    rgb565a8_no_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf);
 800fb52:	9506      	str	r5, [sp, #24]
 800fb54:	9605      	str	r6, [sp, #20]
 800fb56:	9404      	str	r4, [sp, #16]
 800fb58:	9303      	str	r3, [sp, #12]
 800fb5a:	9202      	str	r2, [sp, #8]
 800fb5c:	9001      	str	r0, [sp, #4]
 800fb5e:	9100      	str	r1, [sp, #0]
 800fb60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb68:	f7ff fcc1 	bl	800f4ee <rgb565a8_no_aa>
                    break;
 800fb6c:	e00e      	b.n	800fb8c <lv_draw_sw_transform+0x184>
            argb_and_rgb_aa(src_buf, src_w, src_h, src_stride, xs_ups, ys_ups, xs_step_256, ys_step_256, dest_w, cbuf, abuf, cf);
 800fb6e:	f8cd b01c 	str.w	fp, [sp, #28]
 800fb72:	9506      	str	r5, [sp, #24]
 800fb74:	9605      	str	r6, [sp, #20]
 800fb76:	9404      	str	r4, [sp, #16]
 800fb78:	9303      	str	r3, [sp, #12]
 800fb7a:	9202      	str	r2, [sp, #8]
 800fb7c:	9001      	str	r0, [sp, #4]
 800fb7e:	9100      	str	r1, [sp, #0]
 800fb80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb88:	f7ff fd45 	bl	800f616 <argb_and_rgb_aa>
        cbuf += dest_w;
 800fb8c:	eb06 0644 	add.w	r6, r6, r4, lsl #1
        abuf += dest_w;
 800fb90:	4425      	add	r5, r4
    for(y = 0; y < dest_h; y++) {
 800fb92:	3701      	adds	r7, #1
 800fb94:	b23f      	sxth	r7, r7
 800fb96:	4557      	cmp	r7, sl
 800fb98:	da58      	bge.n	800fc4c <lv_draw_sw_transform+0x244>
        transform_point_upscaled(&tr_dsc, dest_area->x1, dest_area->y1 + y, &xs1_ups, &ys1_ups);
 800fb9a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800fb9e:	ab12      	add	r3, sp, #72	@ 0x48
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	ab11      	add	r3, sp, #68	@ 0x44
 800fba4:	443a      	add	r2, r7
 800fba6:	f9b8 1000 	ldrsh.w	r1, [r8]
 800fbaa:	a815      	add	r0, sp, #84	@ 0x54
 800fbac:	f7ff fcdb 	bl	800f566 <transform_point_upscaled>
        transform_point_upscaled(&tr_dsc, dest_area->x2, dest_area->y1 + y, &xs2_ups, &ys2_ups);
 800fbb0:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 800fbb4:	ab14      	add	r3, sp, #80	@ 0x50
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	ab13      	add	r3, sp, #76	@ 0x4c
 800fbba:	443a      	add	r2, r7
 800fbbc:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800fbc0:	a815      	add	r0, sp, #84	@ 0x54
 800fbc2:	f7ff fcd0 	bl	800f566 <transform_point_upscaled>
        int32_t xs_diff = xs2_ups - xs1_ups;
 800fbc6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800fbc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fbca:	1a5a      	subs	r2, r3, r1
        int32_t ys_diff = ys2_ups - ys1_ups;
 800fbcc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fbce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbd0:	1a1b      	subs	r3, r3, r0
        if(dest_w > 1) {
 800fbd2:	2c01      	cmp	r4, #1
 800fbd4:	dd9c      	ble.n	800fb10 <lv_draw_sw_transform+0x108>
            xs_step_256 = (256 * xs_diff) / (dest_w - 1);
 800fbd6:	0212      	lsls	r2, r2, #8
 800fbd8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800fbdc:	fb92 f2fc 	sdiv	r2, r2, ip
            ys_step_256 = (256 * ys_diff) / (dest_w - 1);
 800fbe0:	021b      	lsls	r3, r3, #8
 800fbe2:	fb93 f3fc 	sdiv	r3, r3, ip
        int32_t xs_ups = xs1_ups + 0x80;
 800fbe6:	3180      	adds	r1, #128	@ 0x80
        int32_t ys_ups = ys1_ups + 0x80;
 800fbe8:	3080      	adds	r0, #128	@ 0x80
        if(draw_dsc->antialias == 0) {
 800fbea:	f899 c014 	ldrb.w	ip, [r9, #20]
 800fbee:	f01c 0f01 	tst.w	ip, #1
 800fbf2:	d1bc      	bne.n	800fb6e <lv_draw_sw_transform+0x166>
            switch(cf) {
 800fbf4:	f1ab 0c04 	sub.w	ip, fp, #4
 800fbf8:	f1bc 0f10 	cmp.w	ip, #16
 800fbfc:	d8c6      	bhi.n	800fb8c <lv_draw_sw_transform+0x184>
 800fbfe:	f20f 0e08 	addw	lr, pc, #8
 800fc02:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
 800fc06:	bf00      	nop
 800fc08:	0800fb33 	.word	0x0800fb33
 800fc0c:	0800fb17 	.word	0x0800fb17
 800fc10:	0800fb33 	.word	0x0800fb33
 800fc14:	0800fb8d 	.word	0x0800fb8d
 800fc18:	0800fb8d 	.word	0x0800fb8d
 800fc1c:	0800fb8d 	.word	0x0800fb8d
 800fc20:	0800fb8d 	.word	0x0800fb8d
 800fc24:	0800fb8d 	.word	0x0800fb8d
 800fc28:	0800fb8d 	.word	0x0800fb8d
 800fc2c:	0800fb8d 	.word	0x0800fb8d
 800fc30:	0800fb8d 	.word	0x0800fb8d
 800fc34:	0800fb8d 	.word	0x0800fb8d
 800fc38:	0800fb8d 	.word	0x0800fb8d
 800fc3c:	0800fb8d 	.word	0x0800fb8d
 800fc40:	0800fb8d 	.word	0x0800fb8d
 800fc44:	0800fb8d 	.word	0x0800fb8d
 800fc48:	0800fb53 	.word	0x0800fb53
}
 800fc4c:	b021      	add	sp, #132	@ 0x84
 800fc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc52:	bf00      	nop
 800fc54:	66666667 	.word	0x66666667

0800fc58 <lv_draw_transform>:
 **********************/
void lv_draw_transform(lv_draw_ctx_t * draw_ctx, const lv_area_t * dest_area, const void * src_buf, lv_coord_t src_w,
                       lv_coord_t src_h,
                       lv_coord_t src_stride, const lv_draw_img_dsc_t * draw_dsc, lv_img_cf_t cf, lv_color_t * cbuf, lv_opa_t * abuf)
{
    LV_ASSERT_NULL(draw_ctx);
 800fc58:	b1b8      	cbz	r0, 800fc8a <lv_draw_transform+0x32>
{
 800fc5a:	b510      	push	{r4, lr}
 800fc5c:	b086      	sub	sp, #24
 800fc5e:	4684      	mov	ip, r0
    if(draw_ctx->draw_transform == NULL) {
 800fc60:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800fc62:	b184      	cbz	r4, 800fc86 <lv_draw_transform+0x2e>
        LV_LOG_WARN("draw_ctx->draw_transform == NULL");
        return;
    }

    draw_ctx->draw_transform(draw_ctx, dest_area, src_buf, src_w, src_h, src_stride, draw_dsc, cf, cbuf, abuf);
 800fc64:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800fc66:	9005      	str	r0, [sp, #20]
 800fc68:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800fc6a:	9004      	str	r0, [sp, #16]
 800fc6c:	f89d 002c 	ldrb.w	r0, [sp, #44]	@ 0x2c
 800fc70:	9003      	str	r0, [sp, #12]
 800fc72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc74:	9002      	str	r0, [sp, #8]
 800fc76:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 800fc7a:	9001      	str	r0, [sp, #4]
 800fc7c:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800fc80:	9000      	str	r0, [sp, #0]
 800fc82:	4660      	mov	r0, ip
 800fc84:	47a0      	blx	r4

}
 800fc86:	b006      	add	sp, #24
 800fc88:	bd10      	pop	{r4, pc}
    LV_ASSERT_NULL(draw_ctx);
 800fc8a:	e7fe      	b.n	800fc8a <lv_draw_transform+0x32>

0800fc8c <lv_dropdownlist_destructor>:

static void lv_dropdownlist_destructor(const lv_obj_class_t * class_p, lv_obj_t * list_obj)
{
    LV_UNUSED(class_p);
    lv_dropdown_list_t * list = (lv_dropdown_list_t *)list_obj;
    lv_obj_t * dropdown_obj = list->dropdown;
 800fc8c:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
    lv_dropdown_t * dropdown = (lv_dropdown_t *)dropdown_obj;
    dropdown->list = NULL;
 800fc8e:	2200      	movs	r2, #0
 800fc90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800fc92:	4770      	bx	lr

0800fc94 <get_label>:
}

static lv_obj_t * get_label(const lv_obj_t * obj)
{
    lv_dropdown_t * dropdown = (lv_dropdown_t *)obj;
    if(dropdown->list == NULL) return NULL;
 800fc94:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800fc96:	b120      	cbz	r0, 800fca2 <get_label+0xe>
{
 800fc98:	b508      	push	{r3, lr}

    return lv_obj_get_child(dropdown->list, 0);
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	f00d fa94 	bl	801d1c8 <lv_obj_get_child>
}
 800fca0:	bd08      	pop	{r3, pc}
 800fca2:	4770      	bx	lr

0800fca4 <position_to_selected>:
{
 800fca4:	b570      	push	{r4, r5, r6, lr}
 800fca6:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(dropdown_obj);
 800fca8:	f7ff fff4 	bl	800fc94 <get_label>
    if(label == NULL) return;
 800fcac:	b140      	cbz	r0, 800fcc0 <position_to_selected+0x1c>
 800fcae:	4606      	mov	r6, r0
    if(lv_obj_get_height(label) <= lv_obj_get_content_height(dropdown_obj)) return;
 800fcb0:	f009 fd15 	bl	80196de <lv_obj_get_height>
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	f009 fd44 	bl	8019744 <lv_obj_get_content_height>
 800fcbc:	4285      	cmp	r5, r0
 800fcbe:	dc00      	bgt.n	800fcc2 <position_to_selected+0x1e>
}
 800fcc0:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800fcc2:	2257      	movs	r2, #87	@ 0x57
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f00c fd14 	bl	801c6f4 <lv_obj_get_style_prop>
 800fccc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800fcd0:	2259      	movs	r2, #89	@ 0x59
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f00c fd0d 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t unit_h = font_h + line_space;
 800fcda:	1829      	adds	r1, r5, r0
    lv_coord_t line_y1 = dropdown->sel_opt_id * unit_h;
 800fcdc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800fcde:	fb11 f103 	smulbb	r1, r1, r3
    lv_obj_scroll_to_y(dropdown->list, line_y1, LV_ANIM_OFF);
 800fce2:	2200      	movs	r2, #0
 800fce4:	b209      	sxth	r1, r1
 800fce6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fce8:	f00b fb4e 	bl	801b388 <lv_obj_scroll_to_y>
    lv_obj_invalidate(dropdown->list);
 800fcec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fcee:	f00a f8da 	bl	8019ea6 <lv_obj_invalidate>
 800fcf2:	e7e5      	b.n	800fcc0 <position_to_selected+0x1c>

0800fcf4 <get_id_on_point>:
{
 800fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	460c      	mov	r4, r1
    lv_obj_t * label = get_label(dropdown_obj);
 800fcfa:	f7ff ffcb 	bl	800fc94 <get_label>
    if(label == NULL) return 0;
 800fcfe:	b300      	cbz	r0, 800fd42 <get_id_on_point+0x4e>
 800fd00:	4607      	mov	r7, r0
    y -= label->coords.y1;
 800fd02:	8ac3      	ldrh	r3, [r0, #22]
 800fd04:	1ae4      	subs	r4, r4, r3
 800fd06:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800fd08:	2257      	movs	r2, #87	@ 0x57
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	f00c fcf2 	bl	801c6f4 <lv_obj_get_style_prop>
 800fd10:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800fd14:	2259      	movs	r2, #89	@ 0x59
 800fd16:	2100      	movs	r1, #0
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f00c fceb 	bl	801c6f4 <lv_obj_get_style_prop>
    y += line_space / 2;
 800fd1e:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 800fd22:	fa03 f380 	sxtah	r3, r3, r0
 800fd26:	eb04 0363 	add.w	r3, r4, r3, asr #1
 800fd2a:	b21b      	sxth	r3, r3
    lv_coord_t h = font_h + line_space;
 800fd2c:	4406      	add	r6, r0
 800fd2e:	b236      	sxth	r6, r6
    uint16_t opt = y / h;
 800fd30:	fb93 f3f6 	sdiv	r3, r3, r6
 800fd34:	b298      	uxth	r0, r3
    if(opt >= dropdown->option_cnt) opt = dropdown->option_cnt - 1;
 800fd36:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 800fd38:	4283      	cmp	r3, r0
 800fd3a:	d801      	bhi.n	800fd40 <get_id_on_point+0x4c>
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	b298      	uxth	r0, r3
}
 800fd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(label == NULL) return 0;
 800fd42:	2000      	movs	r0, #0
 800fd44:	e7fc      	b.n	800fd40 <get_id_on_point+0x4c>

0800fd46 <lv_dropdown_destructor>:
{
 800fd46:	b510      	push	{r4, lr}
 800fd48:	460c      	mov	r4, r1
    if(dropdown->list) {
 800fd4a:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800fd4c:	b118      	cbz	r0, 800fd56 <lv_dropdown_destructor+0x10>
        lv_obj_del(dropdown->list);
 800fd4e:	f00d faf9 	bl	801d344 <lv_obj_del>
        dropdown->list = NULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	6263      	str	r3, [r4, #36]	@ 0x24
    if(!dropdown->static_txt) {
 800fd56:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800fd5a:	f013 0f10 	tst.w	r3, #16
 800fd5e:	d000      	beq.n	800fd62 <lv_dropdown_destructor+0x1c>
}
 800fd60:	bd10      	pop	{r4, pc}
        lv_mem_free(dropdown->options);
 800fd62:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800fd64:	f006 fdf6 	bl	8016954 <lv_mem_free>
        dropdown->options = NULL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800fd6c:	e7f8      	b.n	800fd60 <lv_dropdown_destructor+0x1a>
	...

0800fd70 <lv_dropdown_list_create>:
{
 800fd70:	b510      	push	{r4, lr}
 800fd72:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdownlist_class, parent);
 800fd74:	4803      	ldr	r0, [pc, #12]	@ (800fd84 <lv_dropdown_list_create+0x14>)
 800fd76:	f008 fe55 	bl	8018a24 <lv_obj_class_create_obj>
 800fd7a:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 800fd7c:	f008 fef1 	bl	8018b62 <lv_obj_class_init_obj>
}
 800fd80:	4620      	mov	r0, r4
 800fd82:	bd10      	pop	{r4, pc}
 800fd84:	0802a280 	.word	0x0802a280

0800fd88 <list_press_handler>:
{
 800fd88:	b570      	push	{r4, r5, r6, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	4604      	mov	r4, r0
    lv_obj_t * dropdown_obj = list->dropdown;
 800fd8e:	6a46      	ldr	r6, [r0, #36]	@ 0x24
    lv_indev_t * indev = lv_indev_get_act();
 800fd90:	f004 fcee 	bl	8014770 <lv_indev_get_act>
    if(indev && (lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON)) {
 800fd94:	b1b0      	cbz	r0, 800fdc4 <list_press_handler+0x3c>
 800fd96:	4605      	mov	r5, r0
 800fd98:	f004 fcf0 	bl	801477c <lv_indev_get_type>
 800fd9c:	2801      	cmp	r0, #1
 800fd9e:	d004      	beq.n	800fdaa <list_press_handler+0x22>
 800fda0:	4628      	mov	r0, r5
 800fda2:	f004 fceb 	bl	801477c <lv_indev_get_type>
 800fda6:	2803      	cmp	r0, #3
 800fda8:	d10c      	bne.n	800fdc4 <list_press_handler+0x3c>
        lv_indev_get_point(indev, &p);
 800fdaa:	a901      	add	r1, sp, #4
 800fdac:	4628      	mov	r0, r5
 800fdae:	f004 fd56 	bl	801485e <lv_indev_get_point>
        dropdown->pr_opt_id = get_id_on_point(dropdown_obj, p.y);
 800fdb2:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	f7ff ff9c 	bl	800fcf4 <get_id_on_point>
 800fdbc:	8770      	strh	r0, [r6, #58]	@ 0x3a
        lv_obj_invalidate(list_obj);
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f00a f871 	bl	8019ea6 <lv_obj_invalidate>
}
 800fdc4:	b002      	add	sp, #8
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}

0800fdc8 <draw_box>:
{
 800fdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdcc:	b091      	sub	sp, #68	@ 0x44
 800fdce:	4693      	mov	fp, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 800fdd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdd4:	4593      	cmp	fp, r2
 800fdd6:	d05c      	beq.n	800fe92 <draw_box+0xca>
 800fdd8:	4605      	mov	r5, r0
 800fdda:	460f      	mov	r7, r1
    lv_obj_t * list_obj = dropdown->list;
 800fddc:	6a44      	ldr	r4, [r0, #36]	@ 0x24
    lv_state_t state_ori = list_obj->state;
 800fdde:	f8b4 8020 	ldrh.w	r8, [r4, #32]
    if(state != list_obj->state) {
 800fde2:	4598      	cmp	r8, r3
 800fde4:	d006      	beq.n	800fdf4 <draw_box+0x2c>
        list_obj->state = state;
 800fde6:	8423      	strh	r3, [r4, #32]
        list_obj->skip_trans = 1;
 800fde8:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800fdec:	f043 0308 	orr.w	r3, r3, #8
 800fdf0:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 800fdf4:	2257      	movs	r2, #87	@ 0x57
 800fdf6:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f00c fc7a 	bl	801c6f4 <lv_obj_get_style_prop>
 800fe00:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800fe02:	2259      	movs	r2, #89	@ 0x59
 800fe04:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f00c fc73 	bl	801c6f4 <lv_obj_get_style_prop>
 800fe0e:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 800fe10:	fa0f fa80 	sxth.w	sl, r0
 800fe14:	f9b9 9008 	ldrsh.w	r9, [r9, #8]
    lv_obj_t * label = get_label(dropdown_obj);
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f7ff ff3b 	bl	800fc94 <get_label>
    rect_area.y1 = label->coords.y1;
 800fe1e:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 800fe22:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    rect_area.y1 += id * (font_h + line_space);
 800fe26:	eb09 020a 	add.w	r2, r9, sl
 800fe2a:	fb12 f20b 	smulbb	r2, r2, fp
 800fe2e:	fa12 f383 	uxtah	r3, r2, r3
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    rect_area.y1 -= line_space / 2;
 800fe38:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 800fe3c:	eba3 036a 	sub.w	r3, r3, sl, asr #1
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    rect_area.y2 = rect_area.y1 + font_h + line_space - 1;
 800fe46:	444b      	add	r3, r9
 800fe48:	fa16 f383 	uxtah	r3, r6, r3
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    rect_area.x1 = dropdown->list->coords.x1;
 800fe54:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800fe56:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800fe5a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
    rect_area.x2 = dropdown->list->coords.x2;
 800fe5e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800fe62:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    lv_draw_rect_dsc_init(&sel_rect);
 800fe66:	4668      	mov	r0, sp
 800fe68:	f7f9 fef2 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(list_obj,  LV_PART_SELECTED, &sel_rect);
 800fe6c:	466a      	mov	r2, sp
 800fe6e:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800fe72:	4620      	mov	r0, r4
 800fe74:	f008 ff26 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &sel_rect, &rect_area);
 800fe78:	aa0e      	add	r2, sp, #56	@ 0x38
 800fe7a:	4669      	mov	r1, sp
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	f7f9 ff29 	bl	8009cd4 <lv_draw_rect>
    list_obj->state = state_ori;
 800fe82:	f8a4 8020 	strh.w	r8, [r4, #32]
    list_obj->skip_trans = 0;
 800fe86:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800fe8a:	f023 0308 	bic.w	r3, r3, #8
 800fe8e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
}
 800fe92:	b011      	add	sp, #68	@ 0x44
 800fe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe98 <draw_box_label>:
{
 800fe98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe9c:	b08f      	sub	sp, #60	@ 0x3c
 800fe9e:	4690      	mov	r8, r2
    if(id == LV_DROPDOWN_PR_NONE) return;
 800fea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fea4:	4590      	cmp	r8, r2
 800fea6:	d057      	beq.n	800ff58 <draw_box_label+0xc0>
 800fea8:	4607      	mov	r7, r0
 800feaa:	460d      	mov	r5, r1
    lv_obj_t * list_obj = dropdown->list;
 800feac:	6a44      	ldr	r4, [r0, #36]	@ 0x24
    lv_state_t state_orig = list_obj->state;
 800feae:	8c26      	ldrh	r6, [r4, #32]
    if(state != list_obj->state) {
 800feb0:	429e      	cmp	r6, r3
 800feb2:	d006      	beq.n	800fec2 <draw_box_label+0x2a>
        list_obj->state = state;
 800feb4:	8423      	strh	r3, [r4, #32]
        list_obj->skip_trans = 1;
 800feb6:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800feba:	f043 0308 	orr.w	r3, r3, #8
 800febe:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    lv_draw_label_dsc_init(&label_dsc);
 800fec2:	a806      	add	r0, sp, #24
 800fec4:	f7f8 f870 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(list_obj, LV_PART_SELECTED, &label_dsc);
 800fec8:	aa06      	add	r2, sp, #24
 800feca:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800fece:	4620      	mov	r0, r4
 800fed0:	f009 f84a 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 800fed4:	2259      	movs	r2, #89	@ 0x59
 800fed6:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800feda:	4620      	mov	r0, r4
 800fedc:	f00c fc0a 	bl	801c6f4 <lv_obj_get_style_prop>
    label_dsc.line_space = lv_obj_get_style_text_line_space(list_obj,
 800fee0:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
    lv_obj_t * label = get_label(dropdown_obj);
 800fee4:	4638      	mov	r0, r7
 800fee6:	f7ff fed5 	bl	800fc94 <get_label>
    if(label == NULL) return;
 800feea:	4607      	mov	r7, r0
 800feec:	b3a0      	cbz	r0, 800ff58 <draw_box_label+0xc0>
    lv_coord_t font_h        = lv_font_get_line_height(label_dsc.font);
 800feee:	9b06      	ldr	r3, [sp, #24]
 800fef0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
    area_sel.y1 = label->coords.y1;
 800fef4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800fef8:	f8ad 3012 	strh.w	r3, [sp, #18]
    area_sel.y1 += id * (font_h + label_dsc.line_space);
 800fefc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800ff00:	1881      	adds	r1, r0, r2
 800ff02:	fb11 f108 	smulbb	r1, r1, r8
 800ff06:	fa11 f383 	uxtah	r3, r1, r3
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	f8ad 3012 	strh.w	r3, [sp, #18]
    area_sel.y1 -= label_dsc.line_space / 2;
 800ff10:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
 800ff14:	eba3 0361 	sub.w	r3, r3, r1, asr #1
 800ff18:	b29b      	uxth	r3, r3
 800ff1a:	f8ad 3012 	strh.w	r3, [sp, #18]
    area_sel.y2 = area_sel.y1 + font_h + label_dsc.line_space - 1;
 800ff1e:	4403      	add	r3, r0
 800ff20:	b292      	uxth	r2, r2
 800ff22:	fa12 f383 	uxtah	r3, r2, r3
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	f8ad 3016 	strh.w	r3, [sp, #22]
    area_sel.x1 = list_obj->coords.x1;
 800ff2e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800ff32:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_sel.x2 = list_obj->coords.x2;
 800ff36:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800ff3a:	f8ad 3014 	strh.w	r3, [sp, #20]
    area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &area_sel);
 800ff3e:	aa04      	add	r2, sp, #16
 800ff40:	68a9      	ldr	r1, [r5, #8]
 800ff42:	a802      	add	r0, sp, #8
 800ff44:	f7f1 fd56 	bl	80019f4 <_lv_area_intersect>
    if(area_ok) {
 800ff48:	b948      	cbnz	r0, 800ff5e <draw_box_label+0xc6>
    list_obj->state = state_orig;
 800ff4a:	8426      	strh	r6, [r4, #32]
    list_obj->skip_trans = 0;
 800ff4c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800ff50:	f023 0308 	bic.w	r3, r3, #8
 800ff54:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
}
 800ff58:	b00f      	add	sp, #60	@ 0x3c
 800ff5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800ff5e:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &mask_sel;
 800ff62:	ab02      	add	r3, sp, #8
 800ff64:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_dsc, &label->coords, lv_label_get_text(label), NULL);
 800ff66:	f107 0914 	add.w	r9, r7, #20
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	f004 ff1c 	bl	8014da8 <lv_label_get_text>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2200      	movs	r2, #0
 800ff74:	9200      	str	r2, [sp, #0]
 800ff76:	464a      	mov	r2, r9
 800ff78:	a906      	add	r1, sp, #24
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f7f8 f844 	bl	8008008 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 800ff80:	f8c5 8008 	str.w	r8, [r5, #8]
 800ff84:	e7e1      	b.n	800ff4a <draw_box_label+0xb2>

0800ff86 <draw_list>:
{
 800ff86:	b570      	push	{r4, r5, r6, lr}
 800ff88:	b082      	sub	sp, #8
 800ff8a:	4604      	mov	r4, r0
    lv_obj_t * list_obj = lv_event_get_target(e);
 800ff8c:	f000 fec6 	bl	8010d1c <lv_event_get_target>
    lv_obj_t * dropdown_obj = list->dropdown;
 800ff90:	6a45      	ldr	r5, [r0, #36]	@ 0x24
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 800ff92:	4620      	mov	r0, r4
 800ff94:	f000 ff3a 	bl	8010e0c <lv_event_get_draw_ctx>
 800ff98:	4604      	mov	r4, r0
    has_common = _lv_area_intersect(&clip_area_core, draw_ctx->clip_area, &dropdown->list->coords);
 800ff9a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800ff9c:	3214      	adds	r2, #20
 800ff9e:	6881      	ldr	r1, [r0, #8]
 800ffa0:	4668      	mov	r0, sp
 800ffa2:	f7f1 fd27 	bl	80019f4 <_lv_area_intersect>
    if(has_common) {
 800ffa6:	b318      	cbz	r0, 800fff0 <draw_list+0x6a>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 800ffa8:	68a6      	ldr	r6, [r4, #8]
        draw_ctx->clip_area = &clip_area_core;
 800ffaa:	f8c4 d008 	str.w	sp, [r4, #8]
        if(dropdown->selected_highlight) {
 800ffae:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 800ffb2:	f013 0f20 	tst.w	r3, #32
 800ffb6:	d029      	beq.n	801000c <draw_list+0x86>
            if(dropdown->pr_opt_id == dropdown->sel_opt_id) {
 800ffb8:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 800ffba:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d019      	beq.n	800fff4 <draw_list+0x6e>
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 800ffc0:	2320      	movs	r3, #32
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4628      	mov	r0, r5
 800ffc6:	f7ff feff 	bl	800fdc8 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 800ffca:	2320      	movs	r3, #32
 800ffcc:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 800ffce:	4621      	mov	r1, r4
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	f7ff ff61 	bl	800fe98 <draw_box_label>
                draw_box(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800ffda:	4621      	mov	r1, r4
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7ff fef3 	bl	800fdc8 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->sel_opt_id, LV_STATE_CHECKED);
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800ffe6:	4621      	mov	r1, r4
 800ffe8:	4628      	mov	r0, r5
 800ffea:	f7ff ff55 	bl	800fe98 <draw_box_label>
        draw_ctx->clip_area = clip_area_ori;
 800ffee:	60a6      	str	r6, [r4, #8]
}
 800fff0:	b002      	add	sp, #8
 800fff2:	bd70      	pop	{r4, r5, r6, pc}
                draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 800fff4:	2321      	movs	r3, #33	@ 0x21
 800fff6:	4621      	mov	r1, r4
 800fff8:	4628      	mov	r0, r5
 800fffa:	f7ff fee5 	bl	800fdc8 <draw_box>
                draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_CHECKED | LV_STATE_PRESSED);
 800fffe:	2321      	movs	r3, #33	@ 0x21
 8010000:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 8010002:	4621      	mov	r1, r4
 8010004:	4628      	mov	r0, r5
 8010006:	f7ff ff47 	bl	800fe98 <draw_box_label>
 801000a:	e7f0      	b.n	800ffee <draw_list+0x68>
            draw_box(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 801000c:	2320      	movs	r3, #32
 801000e:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 8010010:	4621      	mov	r1, r4
 8010012:	4628      	mov	r0, r5
 8010014:	f7ff fed8 	bl	800fdc8 <draw_box>
            draw_box_label(dropdown_obj, draw_ctx, dropdown->pr_opt_id, LV_STATE_PRESSED);
 8010018:	2320      	movs	r3, #32
 801001a:	8f6a      	ldrh	r2, [r5, #58]	@ 0x3a
 801001c:	4621      	mov	r1, r4
 801001e:	4628      	mov	r0, r5
 8010020:	f7ff ff3a 	bl	800fe98 <draw_box_label>
 8010024:	e7e3      	b.n	800ffee <draw_list+0x68>

08010026 <lv_dropdownlist_constructor>:
{
 8010026:	b510      	push	{r4, lr}
 8010028:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 801002a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801002e:	4620      	mov	r0, r4
 8010030:	f008 f9d6 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 8010034:	2104      	movs	r1, #4
 8010036:	4620      	mov	r0, r4
 8010038:	f008 f9d2 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_IGNORE_LAYOUT);
 801003c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8010040:	4620      	mov	r0, r4
 8010042:	f008 fc5d 	bl	8018900 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_HIDDEN);
 8010046:	2101      	movs	r1, #1
 8010048:	4620      	mov	r0, r4
 801004a:	f008 fc59 	bl	8018900 <lv_obj_add_flag>
    lv_label_create(obj);
 801004e:	4620      	mov	r0, r4
 8010050:	f004 fe94 	bl	8014d7c <lv_label_create>
}
 8010054:	bd10      	pop	{r4, pc}
	...

08010058 <lv_dropdown_create>:
{
 8010058:	b510      	push	{r4, lr}
 801005a:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_dropdown_class, parent);
 801005c:	4803      	ldr	r0, [pc, #12]	@ (801006c <lv_dropdown_create+0x14>)
 801005e:	f008 fce1 	bl	8018a24 <lv_obj_class_create_obj>
 8010062:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8010064:	f008 fd7d 	bl	8018b62 <lv_obj_class_init_obj>
}
 8010068:	4620      	mov	r0, r4
 801006a:	bd10      	pop	{r4, pc}
 801006c:	0802a29c 	.word	0x0802a29c

08010070 <lv_dropdown_set_options>:
    LV_ASSERT_NULL(options);
 8010070:	b129      	cbz	r1, 801007e <lv_dropdown_set_options+0xe>
{
 8010072:	b570      	push	{r4, r5, r6, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	460d      	mov	r5, r1
    dropdown->option_cnt = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	8683      	strh	r3, [r0, #52]	@ 0x34
    for(i = 0; options[i] != '\0'; i++) {
 801007c:	e001      	b.n	8010082 <lv_dropdown_set_options+0x12>
    LV_ASSERT_NULL(options);
 801007e:	e7fe      	b.n	801007e <lv_dropdown_set_options+0xe>
    for(i = 0; options[i] != '\0'; i++) {
 8010080:	3301      	adds	r3, #1
 8010082:	5cea      	ldrb	r2, [r5, r3]
 8010084:	b12a      	cbz	r2, 8010092 <lv_dropdown_set_options+0x22>
        if(options[i] == '\n') dropdown->option_cnt++;
 8010086:	2a0a      	cmp	r2, #10
 8010088:	d1fa      	bne.n	8010080 <lv_dropdown_set_options+0x10>
 801008a:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801008c:	3201      	adds	r2, #1
 801008e:	86a2      	strh	r2, [r4, #52]	@ 0x34
 8010090:	e7f6      	b.n	8010080 <lv_dropdown_set_options+0x10>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 8010092:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010094:	3301      	adds	r3, #1
 8010096:	86a3      	strh	r3, [r4, #52]	@ 0x34
    dropdown->sel_opt_id      = 0;
 8010098:	2300      	movs	r3, #0
 801009a:	86e3      	strh	r3, [r4, #54]	@ 0x36
    dropdown->sel_opt_id_orig = 0;
 801009c:	8723      	strh	r3, [r4, #56]	@ 0x38
    size_t len = strlen(options) + 1;
 801009e:	4628      	mov	r0, r5
 80100a0:	f7f0 f87c 	bl	800019c <strlen>
 80100a4:	1c46      	adds	r6, r0, #1
    if(dropdown->options != NULL && dropdown->static_txt == 0) {
 80100a6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80100a8:	b120      	cbz	r0, 80100b4 <lv_dropdown_set_options+0x44>
 80100aa:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80100ae:	f013 0f10 	tst.w	r3, #16
 80100b2:	d015      	beq.n	80100e0 <lv_dropdown_set_options+0x70>
    dropdown->options = lv_mem_alloc(len);
 80100b4:	4630      	mov	r0, r6
 80100b6:	f006 fc2f 	bl	8016918 <lv_mem_alloc>
 80100ba:	6320      	str	r0, [r4, #48]	@ 0x30
    LV_ASSERT_MALLOC(dropdown->options);
 80100bc:	b1a8      	cbz	r0, 80100ea <lv_dropdown_set_options+0x7a>
    strcpy(dropdown->options, options);
 80100be:	4629      	mov	r1, r5
 80100c0:	f019 fa8a 	bl	80295d8 <strcpy>
    dropdown->static_txt = 0;
 80100c4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80100c8:	f023 0310 	bic.w	r3, r3, #16
 80100cc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    lv_obj_invalidate(obj);
 80100d0:	4620      	mov	r0, r4
 80100d2:	f009 fee8 	bl	8019ea6 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 80100d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80100d8:	b108      	cbz	r0, 80100de <lv_dropdown_set_options+0x6e>
 80100da:	f009 fee4 	bl	8019ea6 <lv_obj_invalidate>
}
 80100de:	bd70      	pop	{r4, r5, r6, pc}
        lv_mem_free(dropdown->options);
 80100e0:	f006 fc38 	bl	8016954 <lv_mem_free>
        dropdown->options = NULL;
 80100e4:	2300      	movs	r3, #0
 80100e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80100e8:	e7e4      	b.n	80100b4 <lv_dropdown_set_options+0x44>
    LV_ASSERT_MALLOC(dropdown->options);
 80100ea:	e7fe      	b.n	80100ea <lv_dropdown_set_options+0x7a>

080100ec <lv_dropdown_set_options_static>:
    LV_ASSERT_NULL(options);
 80100ec:	b129      	cbz	r1, 80100fa <lv_dropdown_set_options_static+0xe>
{
 80100ee:	b538      	push	{r3, r4, r5, lr}
 80100f0:	4604      	mov	r4, r0
 80100f2:	460d      	mov	r5, r1
    dropdown->option_cnt = 0;
 80100f4:	2300      	movs	r3, #0
 80100f6:	8683      	strh	r3, [r0, #52]	@ 0x34
    for(i = 0; options[i] != '\0'; i++) {
 80100f8:	e001      	b.n	80100fe <lv_dropdown_set_options_static+0x12>
    LV_ASSERT_NULL(options);
 80100fa:	e7fe      	b.n	80100fa <lv_dropdown_set_options_static+0xe>
    for(i = 0; options[i] != '\0'; i++) {
 80100fc:	3301      	adds	r3, #1
 80100fe:	5cea      	ldrb	r2, [r5, r3]
 8010100:	b12a      	cbz	r2, 801010e <lv_dropdown_set_options_static+0x22>
        if(options[i] == '\n') dropdown->option_cnt++;
 8010102:	2a0a      	cmp	r2, #10
 8010104:	d1fa      	bne.n	80100fc <lv_dropdown_set_options_static+0x10>
 8010106:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8010108:	3201      	adds	r2, #1
 801010a:	86a2      	strh	r2, [r4, #52]	@ 0x34
 801010c:	e7f6      	b.n	80100fc <lv_dropdown_set_options_static+0x10>
    dropdown->option_cnt++;   /*Last option has no `\n`*/
 801010e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8010110:	3301      	adds	r3, #1
 8010112:	86a3      	strh	r3, [r4, #52]	@ 0x34
    dropdown->sel_opt_id      = 0;
 8010114:	2300      	movs	r3, #0
 8010116:	86e3      	strh	r3, [r4, #54]	@ 0x36
    dropdown->sel_opt_id_orig = 0;
 8010118:	8723      	strh	r3, [r4, #56]	@ 0x38
    if(dropdown->static_txt == 0 && dropdown->options != NULL) {
 801011a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801011e:	f013 0f10 	tst.w	r3, #16
 8010122:	d105      	bne.n	8010130 <lv_dropdown_set_options_static+0x44>
 8010124:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010126:	b118      	cbz	r0, 8010130 <lv_dropdown_set_options_static+0x44>
        lv_mem_free(dropdown->options);
 8010128:	f006 fc14 	bl	8016954 <lv_mem_free>
        dropdown->options = NULL;
 801012c:	2300      	movs	r3, #0
 801012e:	6323      	str	r3, [r4, #48]	@ 0x30
    dropdown->static_txt = 1;
 8010130:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8010134:	f043 0310 	orr.w	r3, r3, #16
 8010138:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    dropdown->options = (char *)options;
 801013c:	6325      	str	r5, [r4, #48]	@ 0x30
    lv_obj_invalidate(obj);
 801013e:	4620      	mov	r0, r4
 8010140:	f009 feb1 	bl	8019ea6 <lv_obj_invalidate>
    if(dropdown->list) lv_obj_invalidate(dropdown->list);
 8010144:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010146:	b108      	cbz	r0, 801014c <lv_dropdown_set_options_static+0x60>
 8010148:	f009 fead 	bl	8019ea6 <lv_obj_invalidate>
}
 801014c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010150 <lv_dropdown_constructor>:
{
 8010150:	b510      	push	{r4, lr}
 8010152:	460c      	mov	r4, r1
    dropdown->list          = NULL;
 8010154:	2300      	movs	r3, #0
 8010156:	624b      	str	r3, [r1, #36]	@ 0x24
    dropdown->options     = NULL;
 8010158:	630b      	str	r3, [r1, #48]	@ 0x30
    dropdown->symbol         = LV_SYMBOL_DOWN;
 801015a:	4a16      	ldr	r2, [pc, #88]	@ (80101b4 <lv_dropdown_constructor+0x64>)
 801015c:	62ca      	str	r2, [r1, #44]	@ 0x2c
    dropdown->text         = NULL;
 801015e:	628b      	str	r3, [r1, #40]	@ 0x28
    dropdown->static_txt = 1;
 8010160:	f891 203c 	ldrb.w	r2, [r1, #60]	@ 0x3c
 8010164:	f042 0210 	orr.w	r2, r2, #16
 8010168:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
    dropdown->selected_highlight = 1;
 801016c:	b2d2      	uxtb	r2, r2
 801016e:	f042 0220 	orr.w	r2, r2, #32
 8010172:	f881 203c 	strb.w	r2, [r1, #60]	@ 0x3c
    dropdown->sel_opt_id      = 0;
 8010176:	86cb      	strh	r3, [r1, #54]	@ 0x36
    dropdown->sel_opt_id_orig = 0;
 8010178:	870b      	strh	r3, [r1, #56]	@ 0x38
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 801017a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801017e:	874a      	strh	r2, [r1, #58]	@ 0x3a
    dropdown->option_cnt      = 0;
 8010180:	868b      	strh	r3, [r1, #52]	@ 0x34
    dropdown->dir = LV_DIR_BOTTOM;
 8010182:	f891 303c 	ldrb.w	r3, [r1, #60]	@ 0x3c
 8010186:	2208      	movs	r2, #8
 8010188:	f362 0303 	bfi	r3, r2, #0, #4
 801018c:	f881 303c 	strb.w	r3, [r1, #60]	@ 0x3c
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8010190:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010194:	4620      	mov	r0, r4
 8010196:	f008 fbb3 	bl	8018900 <lv_obj_add_flag>
    lv_dropdown_set_options_static(obj, "Option 1\nOption 2\nOption 3");
 801019a:	4907      	ldr	r1, [pc, #28]	@ (80101b8 <lv_dropdown_constructor+0x68>)
 801019c:	4620      	mov	r0, r4
 801019e:	f7ff ffa5 	bl	80100ec <lv_dropdown_set_options_static>
    dropdown->list = lv_dropdown_list_create(lv_obj_get_screen(obj));
 80101a2:	4620      	mov	r0, r4
 80101a4:	f00c ffea 	bl	801d17c <lv_obj_get_screen>
 80101a8:	f7ff fde2 	bl	800fd70 <lv_dropdown_list_create>
 80101ac:	6260      	str	r0, [r4, #36]	@ 0x24
    list->dropdown = obj;
 80101ae:	6244      	str	r4, [r0, #36]	@ 0x24
}
 80101b0:	bd10      	pop	{r4, pc}
 80101b2:	bf00      	nop
 80101b4:	08029c94 	.word	0x08029c94
 80101b8:	08029c98 	.word	0x08029c98

080101bc <lv_dropdown_set_selected>:
    if(dropdown->sel_opt_id == sel_opt) return;
 80101bc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80101be:	428b      	cmp	r3, r1
 80101c0:	d011      	beq.n	80101e6 <lv_dropdown_set_selected+0x2a>
{
 80101c2:	b510      	push	{r4, lr}
 80101c4:	4604      	mov	r4, r0
    dropdown->sel_opt_id      = sel_opt < dropdown->option_cnt ? sel_opt : dropdown->option_cnt - 1;
 80101c6:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80101c8:	428b      	cmp	r3, r1
 80101ca:	d801      	bhi.n	80101d0 <lv_dropdown_set_selected+0x14>
 80101cc:	3b01      	subs	r3, #1
 80101ce:	b299      	uxth	r1, r3
 80101d0:	86e1      	strh	r1, [r4, #54]	@ 0x36
    dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80101d2:	8721      	strh	r1, [r4, #56]	@ 0x38
    if(dropdown->list) {
 80101d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80101d6:	b113      	cbz	r3, 80101de <lv_dropdown_set_selected+0x22>
        position_to_selected(obj);
 80101d8:	4620      	mov	r0, r4
 80101da:	f7ff fd63 	bl	800fca4 <position_to_selected>
    lv_obj_invalidate(obj);
 80101de:	4620      	mov	r0, r4
 80101e0:	f009 fe61 	bl	8019ea6 <lv_obj_invalidate>
}
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	4770      	bx	lr

080101e8 <lv_dropdown_get_selected>:
}
 80101e8:	8ec0      	ldrh	r0, [r0, #54]	@ 0x36
 80101ea:	4770      	bx	lr

080101ec <lv_dropdown_get_selected_str>:
{
 80101ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ee:	460e      	mov	r6, r1
    if(dropdown->options)  {
 80101f0:	6b07      	ldr	r7, [r0, #48]	@ 0x30
 80101f2:	b13f      	cbz	r7, 8010204 <lv_dropdown_get_selected_str+0x18>
 80101f4:	4604      	mov	r4, r0
 80101f6:	4615      	mov	r5, r2
        txt_len     = strlen(dropdown->options);
 80101f8:	4638      	mov	r0, r7
 80101fa:	f7ef ffcf 	bl	800019c <strlen>
    uint32_t line        = 0;
 80101fe:	2100      	movs	r1, #0
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 8010200:	460b      	mov	r3, r1
 8010202:	e003      	b.n	801020c <lv_dropdown_get_selected_str+0x20>
        buf[0] = '\0';
 8010204:	2300      	movs	r3, #0
 8010206:	700b      	strb	r3, [r1, #0]
        return;
 8010208:	e022      	b.n	8010250 <lv_dropdown_get_selected_str+0x64>
    for(i = 0; i < txt_len && line != dropdown->sel_opt_id_orig; i++) {
 801020a:	3301      	adds	r3, #1
 801020c:	4283      	cmp	r3, r0
 801020e:	d220      	bcs.n	8010252 <lv_dropdown_get_selected_str+0x66>
 8010210:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 8010212:	428a      	cmp	r2, r1
 8010214:	d004      	beq.n	8010220 <lv_dropdown_get_selected_str+0x34>
        if(dropdown->options[i] == '\n') line++;
 8010216:	5cfa      	ldrb	r2, [r7, r3]
 8010218:	2a0a      	cmp	r2, #10
 801021a:	d1f6      	bne.n	801020a <lv_dropdown_get_selected_str+0x1e>
 801021c:	3101      	adds	r1, #1
 801021e:	e7f4      	b.n	801020a <lv_dropdown_get_selected_str+0x1e>
 8010220:	f04f 0c00 	mov.w	ip, #0
 8010224:	e004      	b.n	8010230 <lv_dropdown_get_selected_str+0x44>
        buf[c] = dropdown->options[i];
 8010226:	f806 e00c 	strb.w	lr, [r6, ip]
    for(c = 0; i < txt_len && dropdown->options[i] != '\n'; c++, i++) {
 801022a:	f10c 0c01 	add.w	ip, ip, #1
 801022e:	3301      	adds	r3, #1
 8010230:	4283      	cmp	r3, r0
 8010232:	d20a      	bcs.n	801024a <lv_dropdown_get_selected_str+0x5e>
 8010234:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010236:	f812 e003 	ldrb.w	lr, [r2, r3]
 801023a:	f1be 0f0a 	cmp.w	lr, #10
 801023e:	d004      	beq.n	801024a <lv_dropdown_get_selected_str+0x5e>
        if(buf_size && c >= buf_size - 1) {
 8010240:	2d00      	cmp	r5, #0
 8010242:	d0f0      	beq.n	8010226 <lv_dropdown_get_selected_str+0x3a>
 8010244:	1e6a      	subs	r2, r5, #1
 8010246:	4562      	cmp	r2, ip
 8010248:	d8ed      	bhi.n	8010226 <lv_dropdown_get_selected_str+0x3a>
    buf[c] = '\0';
 801024a:	2300      	movs	r3, #0
 801024c:	f806 300c 	strb.w	r3, [r6, ip]
}
 8010250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010252:	f04f 0c00 	mov.w	ip, #0
 8010256:	e7eb      	b.n	8010230 <lv_dropdown_get_selected_str+0x44>

08010258 <draw_main>:
{
 8010258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801025c:	b0a3      	sub	sp, #140	@ 0x8c
 801025e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8010260:	f000 fd5c 	bl	8010d1c <lv_event_get_target>
 8010264:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8010266:	4628      	mov	r0, r5
 8010268:	f000 fdd0 	bl	8010e0c <lv_event_get_draw_ctx>
 801026c:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801026e:	2232      	movs	r2, #50	@ 0x32
 8010270:	2100      	movs	r1, #0
 8010272:	4620      	mov	r0, r4
 8010274:	f00c fa3e 	bl	801c6f4 <lv_obj_get_style_prop>
 8010278:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801027a:	2212      	movs	r2, #18
 801027c:	2100      	movs	r1, #0
 801027e:	4620      	mov	r0, r4
 8010280:	f00c fa38 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8010284:	fa1f f888 	uxth.w	r8, r8
 8010288:	fa18 f680 	uxtah	r6, r8, r0
 801028c:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801028e:	2213      	movs	r2, #19
 8010290:	2100      	movs	r1, #0
 8010292:	4620      	mov	r0, r4
 8010294:	f00c fa2e 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8010298:	fa18 f780 	uxtah	r7, r8, r0
 801029c:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801029e:	2210      	movs	r2, #16
 80102a0:	2100      	movs	r1, #0
 80102a2:	4620      	mov	r0, r4
 80102a4:	f00c fa26 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 80102a8:	fa18 f580 	uxtah	r5, r8, r0
 80102ac:	b2ad      	uxth	r5, r5
    lv_draw_label_dsc_init(&symbol_dsc);
 80102ae:	a81a      	add	r0, sp, #104	@ 0x68
 80102b0:	f7f7 fe7a 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_INDICATOR, &symbol_dsc);
 80102b4:	aa1a      	add	r2, sp, #104	@ 0x68
 80102b6:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80102ba:	4620      	mov	r0, r4
 80102bc:	f008 fe54 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    if(dropdown->text) opt_txt = dropdown->text;
 80102c0:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 80102c4:	f1b8 0f00 	cmp.w	r8, #0
 80102c8:	f000 80ad 	beq.w	8010426 <draw_main+0x1ce>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 80102cc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80102d0:	f003 030f 	and.w	r3, r3, #15
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	f000 80b0 	beq.w	801043a <draw_main+0x1e2>
    bool symbol_to_left = false;
 80102da:	f04f 0b00 	mov.w	fp, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80102de:	2216      	movs	r2, #22
 80102e0:	2100      	movs	r1, #0
 80102e2:	4620      	mov	r0, r4
 80102e4:	f00c fa06 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80102e8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 80102ea:	2801      	cmp	r0, #1
 80102ec:	f000 80a8 	beq.w	8010440 <draw_main+0x1e8>
    if(dropdown->symbol) {
 80102f0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d057      	beq.n	80103a6 <draw_main+0x14e>
        lv_img_src_t symbol_type = lv_img_src_get_type(dropdown->symbol);
 80102f6:	f7f7 fcc7 	bl	8007c88 <lv_img_src_get_type>
 80102fa:	9005      	str	r0, [sp, #20]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 80102fc:	2802      	cmp	r0, #2
 80102fe:	f000 80a2 	beq.w	8010446 <draw_main+0x1ee>
            lv_res_t res = lv_img_decoder_get_info(dropdown->symbol, &header);
 8010302:	a909      	add	r1, sp, #36	@ 0x24
 8010304:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8010306:	f004 f945 	bl	8014594 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801030a:	2801      	cmp	r0, #1
 801030c:	f000 80b0 	beq.w	8010470 <draw_main+0x218>
                symbol_h = -1;
 8010310:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
                symbol_w = -1;
 8010314:	46d1      	mov	r9, sl
        if(symbol_to_left) {
 8010316:	f1bb 0f00 	cmp.w	fp, #0
 801031a:	f000 80b1 	beq.w	8010480 <draw_main+0x228>
            symbol_area.x1 = obj->coords.x1 + left;
 801031e:	8aa3      	ldrh	r3, [r4, #20]
 8010320:	4433      	add	r3, r6
 8010322:	f8ad 301c 	strh.w	r3, [sp, #28]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 8010326:	fa19 f383 	uxtah	r3, r9, r3
 801032a:	b29b      	uxth	r3, r3
 801032c:	3b01      	subs	r3, #1
 801032e:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(symbol_type == LV_IMG_SRC_SYMBOL) {
 8010332:	9b05      	ldr	r3, [sp, #20]
 8010334:	2b02      	cmp	r3, #2
 8010336:	f000 80ae 	beq.w	8010496 <draw_main+0x23e>
            symbol_area.y1 = obj->coords.y1 + (lv_obj_get_height(obj) - symbol_h) / 2;
 801033a:	8ae3      	ldrh	r3, [r4, #22]
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	4620      	mov	r0, r4
 8010340:	f009 f9cd 	bl	80196de <lv_obj_get_height>
 8010344:	eba0 000a 	sub.w	r0, r0, sl
 8010348:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801034c:	9b05      	ldr	r3, [sp, #20]
 801034e:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8010352:	f8ad 301e 	strh.w	r3, [sp, #30]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 8010356:	fa1a f383 	uxtah	r3, sl, r3
 801035a:	b29b      	uxth	r3, r3
 801035c:	3b01      	subs	r3, #1
 801035e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            lv_draw_img_dsc_init(&img_dsc);
 8010362:	a809      	add	r0, sp, #36	@ 0x24
 8010364:	f7f7 fc48 	bl	8007bf8 <lv_draw_img_dsc_init>
            lv_obj_init_draw_img_dsc(obj, LV_PART_INDICATOR, &img_dsc);
 8010368:	aa09      	add	r2, sp, #36	@ 0x24
 801036a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 801036e:	4620      	mov	r0, r4
 8010370:	f008 fe4b 	bl	801900a <lv_obj_init_draw_img_dsc>
            img_dsc.pivot.x = symbol_w / 2;
 8010374:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
 8010378:	105b      	asrs	r3, r3, #1
 801037a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
            img_dsc.pivot.y = symbol_h / 2;
 801037e:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8010382:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8010386:	f8ad a02a 	strh.w	sl, [sp, #42]	@ 0x2a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801038a:	226e      	movs	r2, #110	@ 0x6e
 801038c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8010390:	4620      	mov	r0, r4
 8010392:	f00c f9af 	bl	801c6f4 <lv_obj_get_style_prop>
            img_dsc.angle = lv_obj_get_style_transform_angle(obj, LV_PART_INDICATOR);
 8010396:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
            lv_draw_img(draw_ctx, &img_dsc, &symbol_area, dropdown->symbol);
 801039a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801039c:	aa07      	add	r2, sp, #28
 801039e:	a909      	add	r1, sp, #36	@ 0x24
 80103a0:	9804      	ldr	r0, [sp, #16]
 80103a2:	f7f7 fdb7 	bl	8007f14 <lv_draw_img>
    lv_draw_label_dsc_init(&label_dsc);
 80103a6:	a812      	add	r0, sp, #72	@ 0x48
 80103a8:	f7f7 fdfe 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80103ac:	aa12      	add	r2, sp, #72	@ 0x48
 80103ae:	2100      	movs	r1, #0
 80103b0:	4620      	mov	r0, r4
 80103b2:	f008 fdd9 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    lv_txt_get_size(&size, opt_txt, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
 80103b6:	f89d 3065 	ldrb.w	r3, [sp, #101]	@ 0x65
 80103ba:	9302      	str	r3, [sp, #8]
 80103bc:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	@ 0x5a
 80103c6:	9300      	str	r3, [sp, #0]
 80103c8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 80103cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80103ce:	4641      	mov	r1, r8
 80103d0:	a811      	add	r0, sp, #68	@ 0x44
 80103d2:	f017 fa9a 	bl	802790a <lv_txt_get_size>
    txt_area.y1 = obj->coords.y1 + top;
 80103d6:	8ae3      	ldrh	r3, [r4, #22]
 80103d8:	441d      	add	r5, r3
 80103da:	f8ad 503e 	strh.w	r5, [sp, #62]	@ 0x3e
    txt_area.y2 = txt_area.y1 + size.y;
 80103de:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 80103e2:	fa13 f585 	uxtah	r5, r3, r5
 80103e6:	f8ad 5042 	strh.w	r5, [sp, #66]	@ 0x42
    if(dropdown->symbol == NULL) {
 80103ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d065      	beq.n	80104bc <draw_main+0x264>
        if(symbol_to_left) {
 80103f0:	f1bb 0f00 	cmp.w	fp, #0
 80103f4:	d075      	beq.n	80104e2 <draw_main+0x28a>
            txt_area.x1 = obj->coords.x2 - right - size.x;
 80103f6:	8b23      	ldrh	r3, [r4, #24]
 80103f8:	1bdb      	subs	r3, r3, r7
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 8010400:	1a9a      	subs	r2, r3, r2
 8010402:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
            txt_area.x2 = txt_area.x1 + size.x;
 8010406:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
    lv_draw_label(draw_ctx, &label_dsc, &txt_area, opt_txt, NULL);
 801040a:	2300      	movs	r3, #0
 801040c:	9300      	str	r3, [sp, #0]
 801040e:	4643      	mov	r3, r8
 8010410:	aa0f      	add	r2, sp, #60	@ 0x3c
 8010412:	a912      	add	r1, sp, #72	@ 0x48
 8010414:	9804      	ldr	r0, [sp, #16]
 8010416:	f7f7 fdf7 	bl	8008008 <lv_draw_label>
    if(dropdown->text == NULL) {
 801041a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801041c:	2b00      	cmp	r3, #0
 801041e:	d06b      	beq.n	80104f8 <draw_main+0x2a0>
}
 8010420:	b023      	add	sp, #140	@ 0x8c
 8010422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        char * buf = lv_mem_buf_get(128);
 8010426:	2080      	movs	r0, #128	@ 0x80
 8010428:	f006 fac8 	bl	80169bc <lv_mem_buf_get>
 801042c:	4680      	mov	r8, r0
        lv_dropdown_get_selected_str(obj, buf, 128);
 801042e:	2280      	movs	r2, #128	@ 0x80
 8010430:	4601      	mov	r1, r0
 8010432:	4620      	mov	r0, r4
 8010434:	f7ff feda 	bl	80101ec <lv_dropdown_get_selected_str>
        opt_txt = buf;
 8010438:	e748      	b.n	80102cc <draw_main+0x74>
    if(dropdown->dir == LV_DIR_LEFT) symbol_to_left = true;
 801043a:	f04f 0b01 	mov.w	fp, #1
 801043e:	e74e      	b.n	80102de <draw_main+0x86>
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) symbol_to_left = true;
 8010440:	f04f 0b01 	mov.w	fp, #1
 8010444:	e754      	b.n	80102f0 <draw_main+0x98>
            lv_txt_get_size(&size, dropdown->symbol, symbol_dsc.font, symbol_dsc.letter_space, symbol_dsc.line_space, LV_COORD_MAX,
 8010446:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010448:	f89d 3085 	ldrb.w	r3, [sp, #133]	@ 0x85
 801044c:	9302      	str	r3, [sp, #8]
 801044e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	f9bd 307a 	ldrsh.w	r3, [sp, #122]	@ 0x7a
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	@ 0x7c
 801045e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010460:	a809      	add	r0, sp, #36	@ 0x24
 8010462:	f017 fa52 	bl	802790a <lv_txt_get_size>
            symbol_w = size.x;
 8010466:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
            symbol_h = size.y;
 801046a:	f9bd a026 	ldrsh.w	sl, [sp, #38]	@ 0x26
 801046e:	e752      	b.n	8010316 <draw_main+0xbe>
                symbol_w = header.w;
 8010470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010472:	f3c3 298a 	ubfx	r9, r3, #10, #11
                symbol_h = header.h;
 8010476:	f8bd a026 	ldrh.w	sl, [sp, #38]	@ 0x26
 801047a:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
 801047e:	e74a      	b.n	8010316 <draw_main+0xbe>
            symbol_area.x1 = obj->coords.x2 - right - symbol_w;
 8010480:	8b23      	ldrh	r3, [r4, #24]
 8010482:	1bdb      	subs	r3, r3, r7
 8010484:	b29b      	uxth	r3, r3
 8010486:	eba3 0209 	sub.w	r2, r3, r9
 801048a:	f8ad 201c 	strh.w	r2, [sp, #28]
            symbol_area.x2 = symbol_area.x1 + symbol_w - 1;
 801048e:	3b01      	subs	r3, #1
 8010490:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010494:	e74d      	b.n	8010332 <draw_main+0xda>
            symbol_area.y1 = obj->coords.y1 + top;
 8010496:	8ae3      	ldrh	r3, [r4, #22]
 8010498:	442b      	add	r3, r5
 801049a:	f8ad 301e 	strh.w	r3, [sp, #30]
            symbol_area.y2 = symbol_area.y1 + symbol_h - 1;
 801049e:	fa1a f383 	uxtah	r3, sl, r3
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	3b01      	subs	r3, #1
 80104a6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
            lv_draw_label(draw_ctx, &symbol_dsc, &symbol_area, dropdown->symbol, NULL);
 80104aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80104ac:	2200      	movs	r2, #0
 80104ae:	9200      	str	r2, [sp, #0]
 80104b0:	aa07      	add	r2, sp, #28
 80104b2:	a91a      	add	r1, sp, #104	@ 0x68
 80104b4:	9804      	ldr	r0, [sp, #16]
 80104b6:	f7f7 fda7 	bl	8008008 <lv_draw_label>
 80104ba:	e774      	b.n	80103a6 <draw_main+0x14e>
        txt_area.x1 = obj->coords.x1 + (lv_obj_get_width(obj) - size.x) / 2;
 80104bc:	8aa5      	ldrh	r5, [r4, #20]
 80104be:	4620      	mov	r0, r4
 80104c0:	f009 f906 	bl	80196d0 <lv_obj_get_width>
 80104c4:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	@ 0x44
 80104c8:	1a80      	subs	r0, r0, r2
 80104ca:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80104ce:	eb05 0360 	add.w	r3, r5, r0, asr #1
 80104d2:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
        txt_area.x2 = txt_area.x1 + size.x;
 80104d6:	b292      	uxth	r2, r2
 80104d8:	fa12 f383 	uxtah	r3, r2, r3
 80104dc:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80104e0:	e793      	b.n	801040a <draw_main+0x1b2>
            txt_area.x1 = obj->coords.x1 + left;
 80104e2:	8aa3      	ldrh	r3, [r4, #20]
 80104e4:	441e      	add	r6, r3
 80104e6:	f8ad 603c 	strh.w	r6, [sp, #60]	@ 0x3c
            txt_area.x2 = txt_area.x1 + size.x;
 80104ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80104ee:	fa13 f686 	uxtah	r6, r3, r6
 80104f2:	f8ad 6040 	strh.w	r6, [sp, #64]	@ 0x40
 80104f6:	e788      	b.n	801040a <draw_main+0x1b2>
        lv_mem_buf_release((char *)opt_txt);
 80104f8:	4640      	mov	r0, r8
 80104fa:	f006 fac1 	bl	8016a80 <lv_mem_buf_release>
}
 80104fe:	e78f      	b.n	8010420 <draw_main+0x1c8>

08010500 <lv_dropdown_open>:
{
 8010500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010504:	b082      	sub	sp, #8
 8010506:	4604      	mov	r4, r0
    lv_obj_add_state(dropdown_obj, LV_STATE_CHECKED);
 8010508:	2101      	movs	r1, #1
 801050a:	f007 ffa8 	bl	801845e <lv_obj_add_state>
    lv_obj_set_parent(dropdown->list, lv_obj_get_screen(dropdown_obj));
 801050e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8010510:	4620      	mov	r0, r4
 8010512:	f00c fe33 	bl	801d17c <lv_obj_get_screen>
 8010516:	4601      	mov	r1, r0
 8010518:	4628      	mov	r0, r5
 801051a:	f00c ff40 	bl	801d39e <lv_obj_set_parent>
    lv_obj_move_to_index(dropdown->list, -1);
 801051e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8010522:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010524:	f00c ffa4 	bl	801d470 <lv_obj_move_to_index>
    lv_obj_clear_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 8010528:	2101      	movs	r1, #1
 801052a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801052c:	f007 ff58 	bl	80183e0 <lv_obj_clear_flag>
    lv_event_send(dropdown_obj, LV_EVENT_READY, NULL);
 8010530:	2200      	movs	r2, #0
 8010532:	211f      	movs	r1, #31
 8010534:	4620      	mov	r0, r4
 8010536:	f000 fbc7 	bl	8010cc8 <lv_event_send>
    lv_obj_t * label = get_label(dropdown_obj);
 801053a:	4620      	mov	r0, r4
 801053c:	f7ff fbaa 	bl	800fc94 <get_label>
 8010540:	4607      	mov	r7, r0
    lv_label_set_text_static(label, dropdown->options);
 8010542:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010544:	f005 f936 	bl	80157b4 <lv_label_set_text_static>
    lv_obj_set_width(dropdown->list, LV_SIZE_CONTENT);
 8010548:	f242 71d1 	movw	r1, #10193	@ 0x27d1
 801054c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801054e:	f008 ffcb 	bl	80194e8 <lv_obj_set_width>
    lv_obj_update_layout(label);
 8010552:	4638      	mov	r0, r7
 8010554:	f00a f9a2 	bl	801a89c <lv_obj_update_layout>
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8010558:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801055a:	f009 f8b9 	bl	80196d0 <lv_obj_get_width>
 801055e:	4605      	mov	r5, r0
 8010560:	4620      	mov	r0, r4
 8010562:	f009 f8b5 	bl	80196d0 <lv_obj_get_width>
 8010566:	4285      	cmp	r5, r0
 8010568:	dc07      	bgt.n	801057a <lv_dropdown_open+0x7a>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 801056a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 801056e:	f003 030f 	and.w	r3, r3, #15
    if(lv_obj_get_width(dropdown->list) <= lv_obj_get_width(dropdown_obj) &&
 8010572:	2b04      	cmp	r3, #4
 8010574:	d03c      	beq.n	80105f0 <lv_dropdown_open+0xf0>
       (dropdown->dir == LV_DIR_TOP || dropdown->dir == LV_DIR_BOTTOM)) {
 8010576:	2b08      	cmp	r3, #8
 8010578:	d03a      	beq.n	80105f0 <lv_dropdown_open+0xf0>
    lv_coord_t label_h = lv_obj_get_height(label);
 801057a:	4638      	mov	r0, r7
 801057c:	f009 f8af 	bl	80196de <lv_obj_get_height>
 8010580:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8010582:	2232      	movs	r2, #50	@ 0x32
 8010584:	2100      	movs	r1, #0
 8010586:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010588:	f00c f8b4 	bl	801c6f4 <lv_obj_get_style_prop>
 801058c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801058e:	2210      	movs	r2, #16
 8010590:	2100      	movs	r1, #0
 8010592:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010594:	f00c f8ae 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(dropdown->list, LV_PART_MAIN) + border_width;
 8010598:	b2ad      	uxth	r5, r5
 801059a:	fa15 f680 	uxtah	r6, r5, r0
 801059e:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80105a0:	2211      	movs	r2, #17
 80105a2:	2100      	movs	r1, #0
 80105a4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80105a6:	f00c f8a5 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(dropdown->list, LV_PART_MAIN) + border_width;
 80105aa:	fa15 f580 	uxtah	r5, r5, r0
    lv_coord_t list_fit_h = label_h + top + bottom;
 80105ae:	4446      	add	r6, r8
 80105b0:	b2b6      	uxth	r6, r6
 80105b2:	fa16 f585 	uxtah	r5, r6, r5
 80105b6:	b22d      	sxth	r5, r5
    lv_dir_t dir = dropdown->dir;
 80105b8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80105bc:	f003 060f 	and.w	r6, r3, #15
    if(dropdown->dir == LV_DIR_BOTTOM) {
 80105c0:	2e08      	cmp	r6, #8
 80105c2:	d01e      	beq.n	8010602 <lv_dropdown_open+0x102>
    else if(dropdown->dir == LV_DIR_TOP) {
 80105c4:	2e04      	cmp	r6, #4
 80105c6:	d042      	beq.n	801064e <lv_dropdown_open+0x14e>
    lv_coord_t list_h = list_fit_h;
 80105c8:	462b      	mov	r3, r5
    if(list_h > list_fit_h) list_h = list_fit_h;
 80105ca:	42ab      	cmp	r3, r5
 80105cc:	dc00      	bgt.n	80105d0 <lv_dropdown_open+0xd0>
 80105ce:	461d      	mov	r5, r3
    lv_obj_set_height(dropdown->list, list_h);
 80105d0:	4629      	mov	r1, r5
 80105d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80105d4:	f008 ff9f 	bl	8019516 <lv_obj_set_height>
    position_to_selected(dropdown_obj);
 80105d8:	4620      	mov	r0, r4
 80105da:	f7ff fb63 	bl	800fca4 <position_to_selected>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 80105de:	1e73      	subs	r3, r6, #1
 80105e0:	2b07      	cmp	r3, #7
 80105e2:	d859      	bhi.n	8010698 <lv_dropdown_open+0x198>
 80105e4:	e8df f003 	tbb	[pc, r3]
 80105e8:	7558857d 	.word	0x7558857d
 80105ec:	51585858 	.word	0x51585858
        lv_obj_set_width(dropdown->list, lv_obj_get_width(dropdown_obj));
 80105f0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80105f2:	4620      	mov	r0, r4
 80105f4:	f009 f86c 	bl	80196d0 <lv_obj_get_width>
 80105f8:	4601      	mov	r1, r0
 80105fa:	4628      	mov	r0, r5
 80105fc:	f008 ff74 	bl	80194e8 <lv_obj_set_width>
 8010600:	e7bb      	b.n	801057a <lv_dropdown_open+0x7a>
        if(dropdown_obj->coords.y2 + list_h > LV_VER_RES) {
 8010602:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 8010606:	44a8      	add	r8, r5
 8010608:	f002 fe38 	bl	801327c <lv_disp_get_default>
 801060c:	f002 fe54 	bl	80132b8 <lv_disp_get_ver_res>
 8010610:	4580      	cmp	r8, r0
 8010612:	dc01      	bgt.n	8010618 <lv_dropdown_open+0x118>
    lv_coord_t list_h = list_fit_h;
 8010614:	462b      	mov	r3, r5
 8010616:	e7d8      	b.n	80105ca <lv_dropdown_open+0xca>
            if(dropdown_obj->coords.y1 > LV_VER_RES - dropdown_obj->coords.y2) {
 8010618:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801061c:	f002 fe2e 	bl	801327c <lv_disp_get_default>
 8010620:	f002 fe4a 	bl	80132b8 <lv_disp_get_ver_res>
 8010624:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8010628:	1ac0      	subs	r0, r0, r3
 801062a:	4580      	cmp	r8, r0
 801062c:	dd04      	ble.n	8010638 <lv_dropdown_open+0x138>
                list_h = dropdown_obj->coords.y1 - 1;
 801062e:	8ae3      	ldrh	r3, [r4, #22]
 8010630:	3b01      	subs	r3, #1
 8010632:	b21b      	sxth	r3, r3
                dir = LV_DIR_TOP;
 8010634:	2604      	movs	r6, #4
 8010636:	e7c8      	b.n	80105ca <lv_dropdown_open+0xca>
                list_h = LV_VER_RES - dropdown_obj->coords.y2 - 1 ;
 8010638:	f002 fe20 	bl	801327c <lv_disp_get_default>
 801063c:	f002 fe3c 	bl	80132b8 <lv_disp_get_ver_res>
 8010640:	b283      	uxth	r3, r0
 8010642:	8b62      	ldrh	r2, [r4, #26]
 8010644:	1a9b      	subs	r3, r3, r2
 8010646:	b29b      	uxth	r3, r3
 8010648:	3b01      	subs	r3, #1
 801064a:	b21b      	sxth	r3, r3
 801064c:	e7bd      	b.n	80105ca <lv_dropdown_open+0xca>
        if(dropdown_obj->coords.y1 - list_h < 0) {
 801064e:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 8010652:	eba8 0305 	sub.w	r3, r8, r5
 8010656:	2b00      	cmp	r3, #0
 8010658:	db01      	blt.n	801065e <lv_dropdown_open+0x15e>
    lv_coord_t list_h = list_fit_h;
 801065a:	462b      	mov	r3, r5
 801065c:	e7b5      	b.n	80105ca <lv_dropdown_open+0xca>
            if(dropdown_obj->coords.y1 < LV_VER_RES - dropdown_obj->coords.y2) {
 801065e:	f002 fe0d 	bl	801327c <lv_disp_get_default>
 8010662:	f002 fe29 	bl	80132b8 <lv_disp_get_ver_res>
 8010666:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801066a:	1ac0      	subs	r0, r0, r3
 801066c:	4580      	cmp	r8, r0
 801066e:	db02      	blt.n	8010676 <lv_dropdown_open+0x176>
                list_h = dropdown_obj->coords.y1;
 8010670:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8010674:	e7a9      	b.n	80105ca <lv_dropdown_open+0xca>
                list_h = LV_VER_RES - dropdown_obj->coords.y2;
 8010676:	f002 fe01 	bl	801327c <lv_disp_get_default>
 801067a:	f002 fe1d 	bl	80132b8 <lv_disp_get_ver_res>
 801067e:	b283      	uxth	r3, r0
 8010680:	8b62      	ldrh	r2, [r4, #26]
 8010682:	1a9b      	subs	r3, r3, r2
 8010684:	b21b      	sxth	r3, r3
                dir = LV_DIR_BOTTOM;
 8010686:	2608      	movs	r6, #8
 8010688:	e79f      	b.n	80105ca <lv_dropdown_open+0xca>
    if(dir == LV_DIR_BOTTOM)     lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_BOTTOM_LEFT, 0, 0);
 801068a:	2300      	movs	r3, #0
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	220d      	movs	r2, #13
 8010690:	4621      	mov	r1, r4
 8010692:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010694:	f00a f922 	bl	801a8dc <lv_obj_align_to>
    lv_obj_update_layout(dropdown->list);
 8010698:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801069a:	f00a f8ff 	bl	801a89c <lv_obj_update_layout>
    if(dropdown->dir == LV_DIR_LEFT || dropdown->dir == LV_DIR_RIGHT) {
 801069e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80106a2:	f003 030f 	and.w	r3, r3, #15
 80106a6:	3b01      	subs	r3, #1
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d929      	bls.n	8010702 <lv_dropdown_open+0x202>
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, dropdown->options);
 80106ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80106b0:	2100      	movs	r1, #0
 80106b2:	4638      	mov	r0, r7
 80106b4:	f00c fc9e 	bl	801cff4 <lv_obj_calculate_style_text_align>
    switch(align) {
 80106b8:	2802      	cmp	r0, #2
 80106ba:	d047      	beq.n	801074c <lv_dropdown_open+0x24c>
 80106bc:	2803      	cmp	r0, #3
 80106be:	d03e      	beq.n	801073e <lv_dropdown_open+0x23e>
            lv_obj_align(label, LV_ALIGN_TOP_LEFT, 0, 0);
 80106c0:	2300      	movs	r3, #0
 80106c2:	461a      	mov	r2, r3
 80106c4:	2101      	movs	r1, #1
 80106c6:	4638      	mov	r0, r7
 80106c8:	f008 ffa2 	bl	8019610 <lv_obj_align>
}
 80106cc:	b002      	add	sp, #8
 80106ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(dir == LV_DIR_TOP)   lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_TOP_LEFT, 0, 0);
 80106d2:	2300      	movs	r3, #0
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	220a      	movs	r2, #10
 80106d8:	4621      	mov	r1, r4
 80106da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80106dc:	f00a f8fe 	bl	801a8dc <lv_obj_align_to>
 80106e0:	e7da      	b.n	8010698 <lv_dropdown_open+0x198>
    else if(dir == LV_DIR_LEFT)  lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_LEFT_TOP, 0, 0);
 80106e2:	2300      	movs	r3, #0
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	2210      	movs	r2, #16
 80106e8:	4621      	mov	r1, r4
 80106ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80106ec:	f00a f8f6 	bl	801a8dc <lv_obj_align_to>
 80106f0:	e7d2      	b.n	8010698 <lv_dropdown_open+0x198>
    else if(dir == LV_DIR_RIGHT) lv_obj_align_to(dropdown->list, dropdown_obj, LV_ALIGN_OUT_RIGHT_TOP, 0, 0);
 80106f2:	2300      	movs	r3, #0
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	2213      	movs	r2, #19
 80106f8:	4621      	mov	r1, r4
 80106fa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80106fc:	f00a f8ee 	bl	801a8dc <lv_obj_align_to>
 8010700:	e7ca      	b.n	8010698 <lv_dropdown_open+0x198>
        lv_coord_t y1 = lv_obj_get_y(dropdown->list);
 8010702:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010704:	f008 ffc1 	bl	801968a <lv_obj_get_y>
 8010708:	4680      	mov	r8, r0
        lv_coord_t y2 = lv_obj_get_y2(dropdown->list);
 801070a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801070c:	f008 ffee 	bl	80196ec <lv_obj_get_y2>
 8010710:	4605      	mov	r5, r0
        if(y2 >= LV_VER_RES) {
 8010712:	f002 fdb3 	bl	801327c <lv_disp_get_default>
 8010716:	f002 fdcf 	bl	80132b8 <lv_disp_get_ver_res>
 801071a:	42a8      	cmp	r0, r5
 801071c:	dcc7      	bgt.n	80106ae <lv_dropdown_open+0x1ae>
            lv_obj_set_y(dropdown->list, y1 - (y2 - LV_VER_RES) - 1);
 801071e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8010720:	f002 fdac 	bl	801327c <lv_disp_get_default>
 8010724:	f002 fdc8 	bl	80132b8 <lv_disp_get_ver_res>
 8010728:	b281      	uxth	r1, r0
 801072a:	1b49      	subs	r1, r1, r5
 801072c:	fa18 f181 	uxtah	r1, r8, r1
 8010730:	b289      	uxth	r1, r1
 8010732:	3901      	subs	r1, #1
 8010734:	b209      	sxth	r1, r1
 8010736:	4630      	mov	r0, r6
 8010738:	f008 feb5 	bl	80194a6 <lv_obj_set_y>
 801073c:	e7b7      	b.n	80106ae <lv_dropdown_open+0x1ae>
            lv_obj_align(label, LV_ALIGN_TOP_RIGHT, 0, 0);
 801073e:	2300      	movs	r3, #0
 8010740:	461a      	mov	r2, r3
 8010742:	2103      	movs	r1, #3
 8010744:	4638      	mov	r0, r7
 8010746:	f008 ff63 	bl	8019610 <lv_obj_align>
            break;
 801074a:	e7bf      	b.n	80106cc <lv_dropdown_open+0x1cc>
            lv_obj_align(label, LV_ALIGN_TOP_MID, 0, 0);
 801074c:	2300      	movs	r3, #0
 801074e:	461a      	mov	r2, r3
 8010750:	2102      	movs	r1, #2
 8010752:	4638      	mov	r0, r7
 8010754:	f008 ff5c 	bl	8019610 <lv_obj_align>
}
 8010758:	e7b8      	b.n	80106cc <lv_dropdown_open+0x1cc>

0801075a <lv_dropdown_close>:
{
 801075a:	b510      	push	{r4, lr}
 801075c:	4604      	mov	r4, r0
    lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801075e:	2101      	movs	r1, #1
 8010760:	f007 fe89 	bl	8018476 <lv_obj_clear_state>
    dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8010764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010768:	8763      	strh	r3, [r4, #58]	@ 0x3a
    lv_obj_add_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN);
 801076a:	2101      	movs	r1, #1
 801076c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801076e:	f008 f8c7 	bl	8018900 <lv_obj_add_flag>
    lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8010772:	2200      	movs	r2, #0
 8010774:	2120      	movs	r1, #32
 8010776:	4620      	mov	r0, r4
 8010778:	f000 faa6 	bl	8010cc8 <lv_event_send>
}
 801077c:	bd10      	pop	{r4, pc}

0801077e <list_release_handler>:
{
 801077e:	b570      	push	{r4, r5, r6, lr}
 8010780:	b082      	sub	sp, #8
    lv_obj_t * dropdown_obj = list->dropdown;
 8010782:	6a44      	ldr	r4, [r0, #36]	@ 0x24
    lv_indev_t * indev = lv_indev_get_act();
 8010784:	f003 fff4 	bl	8014770 <lv_indev_get_act>
 8010788:	4605      	mov	r5, r0
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 801078a:	f003 fff7 	bl	801477c <lv_indev_get_type>
 801078e:	2804      	cmp	r0, #4
 8010790:	d022      	beq.n	80107d8 <list_release_handler+0x5a>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8010792:	4628      	mov	r0, r5
 8010794:	f003 fff2 	bl	801477c <lv_indev_get_type>
 8010798:	2801      	cmp	r0, #1
 801079a:	d004      	beq.n	80107a6 <list_release_handler+0x28>
 801079c:	4628      	mov	r0, r5
 801079e:	f003 ffed 	bl	801477c <lv_indev_get_type>
 80107a2:	2803      	cmp	r0, #3
 80107a4:	d10a      	bne.n	80107bc <list_release_handler+0x3e>
        lv_indev_get_point(indev, &p);
 80107a6:	4669      	mov	r1, sp
 80107a8:	4628      	mov	r0, r5
 80107aa:	f004 f858 	bl	801485e <lv_indev_get_point>
        dropdown->sel_opt_id     = get_id_on_point(dropdown_obj, p.y);
 80107ae:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80107b2:	4620      	mov	r0, r4
 80107b4:	f7ff fa9e 	bl	800fcf4 <get_id_on_point>
 80107b8:	86e0      	strh	r0, [r4, #54]	@ 0x36
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80107ba:	8720      	strh	r0, [r4, #56]	@ 0x38
    lv_dropdown_close(dropdown_obj);
 80107bc:	4620      	mov	r0, r4
 80107be:	f7ff ffcc 	bl	801075a <lv_dropdown_close>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 80107c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80107c4:	b1bb      	cbz	r3, 80107f6 <list_release_handler+0x78>
    uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 80107c6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80107c8:	9301      	str	r3, [sp, #4]
    lv_res_t res = lv_event_send(dropdown_obj, LV_EVENT_VALUE_CHANGED, &id);
 80107ca:	aa01      	add	r2, sp, #4
 80107cc:	211c      	movs	r1, #28
 80107ce:	4620      	mov	r0, r4
 80107d0:	f000 fa7a 	bl	8010cc8 <lv_event_send>
}
 80107d4:	b002      	add	sp, #8
 80107d6:	bd70      	pop	{r4, r5, r6, pc}
        dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80107d8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80107da:	8723      	strh	r3, [r4, #56]	@ 0x38
        lv_group_t * g      = lv_obj_get_group(dropdown_obj);
 80107dc:	4620      	mov	r0, r4
 80107de:	f007 fe6a 	bl	80184b6 <lv_obj_get_group>
 80107e2:	4606      	mov	r6, r0
        if(lv_group_get_editing(g)) {
 80107e4:	f002 fc68 	bl	80130b8 <lv_group_get_editing>
 80107e8:	2800      	cmp	r0, #0
 80107ea:	d0d2      	beq.n	8010792 <list_release_handler+0x14>
            lv_group_set_editing(g, false);
 80107ec:	2100      	movs	r1, #0
 80107ee:	4630      	mov	r0, r6
 80107f0:	f002 fc40 	bl	8013074 <lv_group_set_editing>
 80107f4:	e7cd      	b.n	8010792 <list_release_handler+0x14>
    if(dropdown->text == NULL) lv_obj_invalidate(dropdown_obj);
 80107f6:	4620      	mov	r0, r4
 80107f8:	f009 fb55 	bl	8019ea6 <lv_obj_invalidate>
 80107fc:	e7e3      	b.n	80107c6 <list_release_handler+0x48>
	...

08010800 <lv_dropdown_list_event>:
{
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 8010804:	4608      	mov	r0, r1
 8010806:	f000 fa8d 	bl	8010d24 <lv_event_get_code>
 801080a:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_POST) {
 801080c:	2818      	cmp	r0, #24
 801080e:	d005      	beq.n	801081c <lv_dropdown_list_event+0x1c>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8010810:	4629      	mov	r1, r5
 8010812:	481a      	ldr	r0, [pc, #104]	@ (801087c <lv_dropdown_list_event+0x7c>)
 8010814:	f000 f9ae 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8010818:	2801      	cmp	r0, #1
 801081a:	d120      	bne.n	801085e <lv_dropdown_list_event+0x5e>
    lv_obj_t * list = lv_event_get_target(e);
 801081c:	4628      	mov	r0, r5
 801081e:	f000 fa7d 	bl	8010d1c <lv_event_get_target>
 8010822:	4606      	mov	r6, r0
    lv_obj_t * dropdown_obj = ((lv_dropdown_list_t *)list)->dropdown;
 8010824:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    if(code == LV_EVENT_RELEASED) {
 8010826:	3c01      	subs	r4, #1
 8010828:	2c17      	cmp	r4, #23
 801082a:	d818      	bhi.n	801085e <lv_dropdown_list_event+0x5e>
 801082c:	e8df f004 	tbb	[pc, r4]
 8010830:	17171715 	.word	0x17171715
 8010834:	0c171717 	.word	0x0c171717
 8010838:	17171718 	.word	0x17171718
 801083c:	17171717 	.word	0x17171717
 8010840:	17171717 	.word	0x17171717
 8010844:	1e171717 	.word	0x1e171717
        if(lv_indev_get_scroll_obj(lv_indev_get_act()) == NULL) {
 8010848:	f003 ff92 	bl	8014770 <lv_indev_get_act>
 801084c:	f004 f830 	bl	80148b0 <lv_indev_get_scroll_obj>
 8010850:	b928      	cbnz	r0, 801085e <lv_dropdown_list_event+0x5e>
            list_release_handler(list);
 8010852:	4630      	mov	r0, r6
 8010854:	f7ff ff93 	bl	801077e <list_release_handler>
 8010858:	e001      	b.n	801085e <lv_dropdown_list_event+0x5e>
        list_press_handler(list);
 801085a:	f7ff fa95 	bl	800fd88 <list_press_handler>
}
 801085e:	bd70      	pop	{r4, r5, r6, pc}
        dropdown->pr_opt_id = LV_DROPDOWN_PR_NONE;
 8010860:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010864:	875a      	strh	r2, [r3, #58]	@ 0x3a
        lv_obj_invalidate(list);
 8010866:	f009 fb1e 	bl	8019ea6 <lv_obj_invalidate>
 801086a:	e7f8      	b.n	801085e <lv_dropdown_list_event+0x5e>
        draw_list(e);
 801086c:	4628      	mov	r0, r5
 801086e:	f7ff fb8a 	bl	800ff86 <draw_list>
        res = lv_obj_event_base(MY_CLASS_LIST, e);
 8010872:	4629      	mov	r1, r5
 8010874:	4801      	ldr	r0, [pc, #4]	@ (801087c <lv_dropdown_list_event+0x7c>)
 8010876:	f000 f97d 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801087a:	e7f0      	b.n	801085e <lv_dropdown_list_event+0x5e>
 801087c:	0802a280 	.word	0x0802a280

08010880 <lv_dropdown_is_open>:
{
 8010880:	b508      	push	{r3, lr}
    return lv_obj_has_flag(dropdown->list, LV_OBJ_FLAG_HIDDEN) ? false : true;
 8010882:	2101      	movs	r1, #1
 8010884:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010886:	f007 fe02 	bl	801848e <lv_obj_has_flag>
 801088a:	f080 0001 	eor.w	r0, r0, #1
}
 801088e:	b2c0      	uxtb	r0, r0
 8010890:	bd08      	pop	{r3, pc}

08010892 <btn_release_handler>:
{
 8010892:	b530      	push	{r4, r5, lr}
 8010894:	b083      	sub	sp, #12
 8010896:	4604      	mov	r4, r0
    lv_indev_t * indev = lv_indev_get_act();
 8010898:	f003 ff6a 	bl	8014770 <lv_indev_get_act>
 801089c:	4605      	mov	r5, r0
    if(lv_indev_get_scroll_obj(indev) == NULL) {
 801089e:	f004 f807 	bl	80148b0 <lv_indev_get_scroll_obj>
 80108a2:	b138      	cbz	r0, 80108b4 <btn_release_handler+0x22>
        dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80108a4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80108a6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        lv_obj_invalidate(obj);
 80108a8:	4620      	mov	r0, r4
 80108aa:	f009 fafc 	bl	8019ea6 <lv_obj_invalidate>
    return LV_RES_OK;
 80108ae:	2001      	movs	r0, #1
}
 80108b0:	b003      	add	sp, #12
 80108b2:	bd30      	pop	{r4, r5, pc}
        if(lv_dropdown_is_open(obj)) {
 80108b4:	4620      	mov	r0, r4
 80108b6:	f7ff ffe3 	bl	8010880 <lv_dropdown_is_open>
 80108ba:	b308      	cbz	r0, 8010900 <btn_release_handler+0x6e>
            lv_dropdown_close(obj);
 80108bc:	4620      	mov	r0, r4
 80108be:	f7ff ff4c 	bl	801075a <lv_dropdown_close>
            if(dropdown->sel_opt_id_orig != dropdown->sel_opt_id) {
 80108c2:	8f22      	ldrh	r2, [r4, #56]	@ 0x38
 80108c4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d00b      	beq.n	80108e2 <btn_release_handler+0x50>
                dropdown->sel_opt_id_orig = dropdown->sel_opt_id;
 80108ca:	8723      	strh	r3, [r4, #56]	@ 0x38
                uint32_t id  = dropdown->sel_opt_id; /*Just to use uint32_t in event data*/
 80108cc:	9301      	str	r3, [sp, #4]
                res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 80108ce:	aa01      	add	r2, sp, #4
 80108d0:	211c      	movs	r1, #28
 80108d2:	4620      	mov	r0, r4
 80108d4:	f000 f9f8 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return res;
 80108d8:	2801      	cmp	r0, #1
 80108da:	d1e9      	bne.n	80108b0 <btn_release_handler+0x1e>
                lv_obj_invalidate(obj);
 80108dc:	4620      	mov	r0, r4
 80108de:	f009 fae2 	bl	8019ea6 <lv_obj_invalidate>
            lv_indev_type_t indev_type = lv_indev_get_type(indev);
 80108e2:	4628      	mov	r0, r5
 80108e4:	f003 ff4a 	bl	801477c <lv_indev_get_type>
            if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80108e8:	2804      	cmp	r0, #4
 80108ea:	d001      	beq.n	80108f0 <btn_release_handler+0x5e>
    return LV_RES_OK;
 80108ec:	2001      	movs	r0, #1
 80108ee:	e7df      	b.n	80108b0 <btn_release_handler+0x1e>
                lv_group_set_editing(lv_obj_get_group(obj), false);
 80108f0:	4620      	mov	r0, r4
 80108f2:	f007 fde0 	bl	80184b6 <lv_obj_get_group>
 80108f6:	2100      	movs	r1, #0
 80108f8:	f002 fbbc 	bl	8013074 <lv_group_set_editing>
    return LV_RES_OK;
 80108fc:	2001      	movs	r0, #1
 80108fe:	e7d7      	b.n	80108b0 <btn_release_handler+0x1e>
            lv_dropdown_open(obj);
 8010900:	4620      	mov	r0, r4
 8010902:	f7ff fdfd 	bl	8010500 <lv_dropdown_open>
    return LV_RES_OK;
 8010906:	2001      	movs	r0, #1
 8010908:	e7d2      	b.n	80108b0 <btn_release_handler+0x1e>
	...

0801090c <lv_dropdown_event>:
{
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8010910:	487a      	ldr	r0, [pc, #488]	@ (8010afc <lv_dropdown_event+0x1f0>)
 8010912:	f000 f92f 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8010916:	2801      	cmp	r0, #1
 8010918:	d000      	beq.n	801091c <lv_dropdown_event+0x10>
}
 801091a:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801091c:	4620      	mov	r0, r4
 801091e:	f000 fa01 	bl	8010d24 <lv_event_get_code>
 8010922:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8010924:	4620      	mov	r0, r4
 8010926:	f000 f9f9 	bl	8010d1c <lv_event_get_target>
 801092a:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 801092c:	f1a5 0308 	sub.w	r3, r5, #8
 8010930:	2b24      	cmp	r3, #36	@ 0x24
 8010932:	d8f2      	bhi.n	801091a <lv_dropdown_event+0xe>
 8010934:	a201      	add	r2, pc, #4	@ (adr r2, 801093c <lv_dropdown_event+0x30>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	08010a03 	.word	0x08010a03
 8010940:	0801091b 	.word	0x0801091b
 8010944:	0801091b 	.word	0x0801091b
 8010948:	0801091b 	.word	0x0801091b
 801094c:	0801091b 	.word	0x0801091b
 8010950:	08010a2f 	.word	0x08010a2f
 8010954:	080109d1 	.word	0x080109d1
 8010958:	080109fd 	.word	0x080109fd
 801095c:	080109fd 	.word	0x080109fd
 8010960:	0801091b 	.word	0x0801091b
 8010964:	0801091b 	.word	0x0801091b
 8010968:	0801091b 	.word	0x0801091b
 801096c:	0801091b 	.word	0x0801091b
 8010970:	08010af5 	.word	0x08010af5
 8010974:	0801091b 	.word	0x0801091b
 8010978:	0801091b 	.word	0x0801091b
 801097c:	0801091b 	.word	0x0801091b
 8010980:	0801091b 	.word	0x0801091b
 8010984:	0801091b 	.word	0x0801091b
 8010988:	0801091b 	.word	0x0801091b
 801098c:	0801091b 	.word	0x0801091b
 8010990:	0801091b 	.word	0x0801091b
 8010994:	0801091b 	.word	0x0801091b
 8010998:	0801091b 	.word	0x0801091b
 801099c:	0801091b 	.word	0x0801091b
 80109a0:	0801091b 	.word	0x0801091b
 80109a4:	0801091b 	.word	0x0801091b
 80109a8:	0801091b 	.word	0x0801091b
 80109ac:	0801091b 	.word	0x0801091b
 80109b0:	0801091b 	.word	0x0801091b
 80109b4:	0801091b 	.word	0x0801091b
 80109b8:	0801091b 	.word	0x0801091b
 80109bc:	0801091b 	.word	0x0801091b
 80109c0:	08010a0f 	.word	0x08010a0f
 80109c4:	08010a09 	.word	0x08010a09
 80109c8:	0801091b 	.word	0x0801091b
 80109cc:	08010a15 	.word	0x08010a15
        lv_group_t * g             = lv_obj_get_group(obj);
 80109d0:	f007 fd71 	bl	80184b6 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 80109d4:	f002 fb70 	bl	80130b8 <lv_group_get_editing>
 80109d8:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80109da:	f003 fec9 	bl	8014770 <lv_indev_get_act>
 80109de:	f003 fecd 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 80109e2:	2804      	cmp	r0, #4
 80109e4:	d199      	bne.n	801091a <lv_dropdown_event+0xe>
            if(editing) {
 80109e6:	b11c      	cbz	r4, 80109f0 <lv_dropdown_event+0xe4>
                lv_dropdown_open(obj);
 80109e8:	4630      	mov	r0, r6
 80109ea:	f7ff fd89 	bl	8010500 <lv_dropdown_open>
 80109ee:	e794      	b.n	801091a <lv_dropdown_event+0xe>
                dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 80109f0:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 80109f2:	86f3      	strh	r3, [r6, #54]	@ 0x36
                lv_dropdown_close(obj);
 80109f4:	4630      	mov	r0, r6
 80109f6:	f7ff feb0 	bl	801075a <lv_dropdown_close>
 80109fa:	e78e      	b.n	801091a <lv_dropdown_event+0xe>
        lv_dropdown_close(obj);
 80109fc:	f7ff fead 	bl	801075a <lv_dropdown_close>
 8010a00:	e78b      	b.n	801091a <lv_dropdown_event+0xe>
        res = btn_release_handler(obj);
 8010a02:	f7ff ff46 	bl	8010892 <btn_release_handler>
        if(res != LV_RES_OK) return;
 8010a06:	e788      	b.n	801091a <lv_dropdown_event+0xe>
        lv_obj_refresh_self_size(obj);
 8010a08:	f009 f89e 	bl	8019b48 <lv_obj_refresh_self_size>
 8010a0c:	e785      	b.n	801091a <lv_dropdown_event+0xe>
        lv_obj_refresh_self_size(obj);
 8010a0e:	f009 f89b 	bl	8019b48 <lv_obj_refresh_self_size>
 8010a12:	e782      	b.n	801091a <lv_dropdown_event+0xe>
        lv_point_t * p = lv_event_get_param(e);
 8010a14:	4620      	mov	r0, r4
 8010a16:	f000 f989 	bl	8010d2c <lv_event_get_param>
 8010a1a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8010a1c:	2257      	movs	r2, #87	@ 0x57
 8010a1e:	2100      	movs	r1, #0
 8010a20:	4630      	mov	r0, r6
 8010a22:	f00b fe67 	bl	801c6f4 <lv_obj_get_style_prop>
 8010a26:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
        p->y = lv_font_get_line_height(font);
 8010a2a:	8063      	strh	r3, [r4, #2]
 8010a2c:	e775      	b.n	801091a <lv_dropdown_event+0xe>
        char c = *((char *)lv_event_get_param(e));
 8010a2e:	4620      	mov	r0, r4
 8010a30:	f000 f97c 	bl	8010d2c <lv_event_get_param>
 8010a34:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 8010a36:	3b0a      	subs	r3, #10
 8010a38:	2b11      	cmp	r3, #17
 8010a3a:	f63f af6e 	bhi.w	801091a <lv_dropdown_event+0xe>
 8010a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a44 <lv_dropdown_event+0x138>)
 8010a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a44:	08010ae3 	.word	0x08010ae3
 8010a48:	0801091b 	.word	0x0801091b
 8010a4c:	0801091b 	.word	0x0801091b
 8010a50:	0801091b 	.word	0x0801091b
 8010a54:	0801091b 	.word	0x0801091b
 8010a58:	0801091b 	.word	0x0801091b
 8010a5c:	0801091b 	.word	0x0801091b
 8010a60:	08010ab3 	.word	0x08010ab3
 8010a64:	08010a8d 	.word	0x08010a8d
 8010a68:	08010a8d 	.word	0x08010a8d
 8010a6c:	08010ab3 	.word	0x08010ab3
 8010a70:	0801091b 	.word	0x0801091b
 8010a74:	0801091b 	.word	0x0801091b
 8010a78:	0801091b 	.word	0x0801091b
 8010a7c:	0801091b 	.word	0x0801091b
 8010a80:	0801091b 	.word	0x0801091b
 8010a84:	0801091b 	.word	0x0801091b
 8010a88:	08010ad7 	.word	0x08010ad7
            if(!lv_dropdown_is_open(obj)) {
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	f7ff fef7 	bl	8010880 <lv_dropdown_is_open>
 8010a92:	b150      	cbz	r0, 8010aaa <lv_dropdown_event+0x19e>
            else if(dropdown->sel_opt_id + 1 < dropdown->option_cnt) {
 8010a94:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8010a96:	1c59      	adds	r1, r3, #1
 8010a98:	8eb2      	ldrh	r2, [r6, #52]	@ 0x34
 8010a9a:	4291      	cmp	r1, r2
 8010a9c:	f6bf af3d 	bge.w	801091a <lv_dropdown_event+0xe>
                dropdown->sel_opt_id++;
 8010aa0:	86f1      	strh	r1, [r6, #54]	@ 0x36
                position_to_selected(obj);
 8010aa2:	4630      	mov	r0, r6
 8010aa4:	f7ff f8fe 	bl	800fca4 <position_to_selected>
 8010aa8:	e737      	b.n	801091a <lv_dropdown_event+0xe>
                lv_dropdown_open(obj);
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f7ff fd28 	bl	8010500 <lv_dropdown_open>
 8010ab0:	e733      	b.n	801091a <lv_dropdown_event+0xe>
            if(!lv_dropdown_is_open(obj)) {
 8010ab2:	4630      	mov	r0, r6
 8010ab4:	f7ff fee4 	bl	8010880 <lv_dropdown_is_open>
 8010ab8:	b148      	cbz	r0, 8010ace <lv_dropdown_event+0x1c2>
            else if(dropdown->sel_opt_id > 0) {
 8010aba:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f43f af2c 	beq.w	801091a <lv_dropdown_event+0xe>
                dropdown->sel_opt_id--;
 8010ac2:	3b01      	subs	r3, #1
 8010ac4:	86f3      	strh	r3, [r6, #54]	@ 0x36
                position_to_selected(obj);
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f7ff f8ec 	bl	800fca4 <position_to_selected>
 8010acc:	e725      	b.n	801091a <lv_dropdown_event+0xe>
                lv_dropdown_open(obj);
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f7ff fd16 	bl	8010500 <lv_dropdown_open>
 8010ad4:	e721      	b.n	801091a <lv_dropdown_event+0xe>
            dropdown->sel_opt_id = dropdown->sel_opt_id_orig;
 8010ad6:	8f33      	ldrh	r3, [r6, #56]	@ 0x38
 8010ad8:	86f3      	strh	r3, [r6, #54]	@ 0x36
            lv_dropdown_close(obj);
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7ff fe3d 	bl	801075a <lv_dropdown_close>
 8010ae0:	e71b      	b.n	801091a <lv_dropdown_event+0xe>
            lv_obj_t * indev_obj = lv_indev_get_obj_act();
 8010ae2:	f003 ff0b 	bl	80148fc <lv_indev_get_obj_act>
            if(indev_obj != obj) {
 8010ae6:	4286      	cmp	r6, r0
 8010ae8:	f43f af17 	beq.w	801091a <lv_dropdown_event+0xe>
                res = btn_release_handler(obj);
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7ff fed0 	bl	8010892 <btn_release_handler>
                if(res != LV_RES_OK) return;
 8010af2:	e712      	b.n	801091a <lv_dropdown_event+0xe>
        draw_main(e);
 8010af4:	4620      	mov	r0, r4
 8010af6:	f7ff fbaf 	bl	8010258 <draw_main>
 8010afa:	e70e      	b.n	801091a <lv_dropdown_event+0xe>
 8010afc:	0802a29c 	.word	0x0802a29c

08010b00 <lv_obj_get_event_dsc>:

static lv_event_dsc_t * lv_obj_get_event_dsc(const lv_obj_t * obj, uint32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(!obj->spec_attr) return NULL;
 8010b00:	6880      	ldr	r0, [r0, #8]
 8010b02:	b158      	cbz	r0, 8010b1c <lv_obj_get_event_dsc+0x1c>
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8010b04:	7e83      	ldrb	r3, [r0, #26]
 8010b06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b0a:	428b      	cmp	r3, r1
 8010b0c:	d905      	bls.n	8010b1a <lv_obj_get_event_dsc+0x1a>

    return &obj->spec_attr->event_dsc[id];
 8010b0e:	68c0      	ldr	r0, [r0, #12]
 8010b10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010b14:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010b18:	4770      	bx	lr
    if(id >= obj->spec_attr->event_dsc_cnt) return NULL;
 8010b1a:	2000      	movs	r0, #0
}
 8010b1c:	4770      	bx	lr
	...

08010b20 <event_is_bubbled>:
    return res;
}

static bool event_is_bubbled(lv_event_t * e)
{
    if(e->stop_bubbling) return false;
 8010b20:	7e03      	ldrb	r3, [r0, #24]
 8010b22:	f013 0f04 	tst.w	r3, #4
 8010b26:	d11e      	bne.n	8010b66 <event_is_bubbled+0x46>
{
 8010b28:	b510      	push	{r4, lr}
 8010b2a:	4604      	mov	r4, r0

    /*Event codes that always bubble*/
    switch(e->code) {
 8010b2c:	7a03      	ldrb	r3, [r0, #8]
 8010b2e:	3b23      	subs	r3, #35	@ 0x23
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d801      	bhi.n	8010b38 <event_is_bubbled+0x18>
        case LV_EVENT_CHILD_CREATED:
        case LV_EVENT_CHILD_DELETED:
            return true;
 8010b34:	2001      	movs	r0, #1
        case LV_EVENT_GET_SELF_SIZE:
            return false;
        default:
            return true;
    }
}
 8010b36:	bd10      	pop	{r4, pc}
    if(lv_obj_has_flag(e->current_target, LV_OBJ_FLAG_EVENT_BUBBLE) == false) return false;
 8010b38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010b3c:	6840      	ldr	r0, [r0, #4]
 8010b3e:	f007 fca6 	bl	801848e <lv_obj_has_flag>
 8010b42:	2800      	cmp	r0, #0
 8010b44:	d0f7      	beq.n	8010b36 <event_is_bubbled+0x16>
    switch(e->code) {
 8010b46:	7a23      	ldrb	r3, [r4, #8]
 8010b48:	3b11      	subs	r3, #17
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b1b      	cmp	r3, #27
 8010b4e:	bf94      	ite	ls
 8010b50:	2100      	movls	r1, #0
 8010b52:	2101      	movhi	r1, #1
 8010b54:	b949      	cbnz	r1, 8010b6a <event_is_bubbled+0x4a>
 8010b56:	4a06      	ldr	r2, [pc, #24]	@ (8010b70 <event_is_bubbled+0x50>)
 8010b58:	fa22 f303 	lsr.w	r3, r2, r3
 8010b5c:	f013 0f01 	tst.w	r3, #1
 8010b60:	d0e9      	beq.n	8010b36 <event_is_bubbled+0x16>
 8010b62:	4608      	mov	r0, r1
 8010b64:	e7e7      	b.n	8010b36 <event_is_bubbled+0x16>
    if(e->stop_bubbling) return false;
 8010b66:	2000      	movs	r0, #0
}
 8010b68:	4770      	bx	lr
            return true;
 8010b6a:	4608      	mov	r0, r1
 8010b6c:	e7e3      	b.n	8010b36 <event_is_bubbled+0x16>
 8010b6e:	bf00      	nop
 8010b70:	0b0f27ff 	.word	0x0b0f27ff

08010b74 <lv_obj_event_base>:
{
 8010b74:	b510      	push	{r4, lr}
 8010b76:	460c      	mov	r4, r1
    if(class_p == NULL) base = e->current_target->class_p;
 8010b78:	b108      	cbz	r0, 8010b7e <lv_obj_event_base+0xa>
    else base = class_p->base_class;
 8010b7a:	6800      	ldr	r0, [r0, #0]
 8010b7c:	e003      	b.n	8010b86 <lv_obj_event_base+0x12>
    if(class_p == NULL) base = e->current_target->class_p;
 8010b7e:	684b      	ldr	r3, [r1, #4]
 8010b80:	6818      	ldr	r0, [r3, #0]
 8010b82:	e000      	b.n	8010b86 <lv_obj_event_base+0x12>
    while(base && base->event_cb == NULL) base = base->base_class;
 8010b84:	6800      	ldr	r0, [r0, #0]
 8010b86:	b110      	cbz	r0, 8010b8e <lv_obj_event_base+0x1a>
 8010b88:	6903      	ldr	r3, [r0, #16]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d0fa      	beq.n	8010b84 <lv_obj_event_base+0x10>
    if(base == NULL) return LV_RES_OK;
 8010b8e:	b160      	cbz	r0, 8010baa <lv_obj_event_base+0x36>
    if(base->event_cb == NULL) return LV_RES_OK;
 8010b90:	6903      	ldr	r3, [r0, #16]
 8010b92:	b163      	cbz	r3, 8010bae <lv_obj_event_base+0x3a>
    e->user_data = NULL;
 8010b94:	2300      	movs	r3, #0
 8010b96:	60e3      	str	r3, [r4, #12]
    base->event_cb(base, e);
 8010b98:	6903      	ldr	r3, [r0, #16]
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	4798      	blx	r3
    if(e->deleted) res = LV_RES_INV;
 8010b9e:	7e23      	ldrb	r3, [r4, #24]
 8010ba0:	f013 0f01 	tst.w	r3, #1
 8010ba4:	d105      	bne.n	8010bb2 <lv_obj_event_base+0x3e>
    lv_res_t res = LV_RES_OK;
 8010ba6:	2001      	movs	r0, #1
}
 8010ba8:	bd10      	pop	{r4, pc}
    if(base == NULL) return LV_RES_OK;
 8010baa:	2001      	movs	r0, #1
 8010bac:	e7fc      	b.n	8010ba8 <lv_obj_event_base+0x34>
    if(base->event_cb == NULL) return LV_RES_OK;
 8010bae:	2001      	movs	r0, #1
 8010bb0:	e7fa      	b.n	8010ba8 <lv_obj_event_base+0x34>
    if(e->deleted) res = LV_RES_INV;
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	e7f8      	b.n	8010ba8 <lv_obj_event_base+0x34>

08010bb6 <event_send_core>:
{
 8010bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb8:	4606      	mov	r6, r0
    lv_indev_t * indev_act = lv_indev_get_act();
 8010bba:	f003 fdd9 	bl	8014770 <lv_indev_get_act>
    if(indev_act) {
 8010bbe:	b158      	cbz	r0, 8010bd8 <event_send_core+0x22>
        if(indev_act->driver->feedback_cb) indev_act->driver->feedback_cb(indev_act->driver, e->code);
 8010bc0:	6800      	ldr	r0, [r0, #0]
 8010bc2:	6883      	ldr	r3, [r0, #8]
 8010bc4:	b10b      	cbz	r3, 8010bca <event_send_core+0x14>
 8010bc6:	7a31      	ldrb	r1, [r6, #8]
 8010bc8:	4798      	blx	r3
        if(e->stop_processing) return LV_RES_OK;
 8010bca:	7e33      	ldrb	r3, [r6, #24]
 8010bcc:	f013 0702 	ands.w	r7, r3, #2
 8010bd0:	d174      	bne.n	8010cbc <event_send_core+0x106>
        if(e->deleted) return LV_RES_INV;
 8010bd2:	f013 0f01 	tst.w	r3, #1
 8010bd6:	d15b      	bne.n	8010c90 <event_send_core+0xda>
    lv_event_dsc_t * event_dsc = lv_obj_get_event_dsc(e->current_target, 0);
 8010bd8:	2100      	movs	r1, #0
 8010bda:	6870      	ldr	r0, [r6, #4]
 8010bdc:	f7ff ff90 	bl	8010b00 <lv_obj_get_event_dsc>
 8010be0:	4604      	mov	r4, r0
    uint32_t i = 0;
 8010be2:	2500      	movs	r5, #0
    while(event_dsc && res == LV_RES_OK) {
 8010be4:	e011      	b.n	8010c0a <event_send_core+0x54>
            e->user_data = event_dsc->user_data;
 8010be6:	6863      	ldr	r3, [r4, #4]
 8010be8:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	4630      	mov	r0, r6
 8010bee:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8010bf0:	7e33      	ldrb	r3, [r6, #24]
 8010bf2:	f013 0702 	ands.w	r7, r3, #2
 8010bf6:	d163      	bne.n	8010cc0 <event_send_core+0x10a>
            if(e->deleted) return LV_RES_INV;
 8010bf8:	f013 0f01 	tst.w	r3, #1
 8010bfc:	d148      	bne.n	8010c90 <event_send_core+0xda>
        i++;
 8010bfe:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8010c00:	4629      	mov	r1, r5
 8010c02:	6870      	ldr	r0, [r6, #4]
 8010c04:	f7ff ff7c 	bl	8010b00 <lv_obj_get_event_dsc>
 8010c08:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8010c0a:	b17c      	cbz	r4, 8010c2c <event_send_core+0x76>
        if(event_dsc->cb  && ((event_dsc->filter & LV_EVENT_PREPROCESS) == LV_EVENT_PREPROCESS)
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d0f5      	beq.n	8010bfe <event_send_core+0x48>
 8010c12:	7a23      	ldrb	r3, [r4, #8]
 8010c14:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	daf0      	bge.n	8010bfe <event_send_core+0x48>
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8010c1c:	2b80      	cmp	r3, #128	@ 0x80
 8010c1e:	d0e2      	beq.n	8010be6 <event_send_core+0x30>
               (event_dsc->filter & ~LV_EVENT_PREPROCESS) == e->code)) {
 8010c20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c24:	7a32      	ldrb	r2, [r6, #8]
           && (event_dsc->filter == (LV_EVENT_ALL | LV_EVENT_PREPROCESS) ||
 8010c26:	4293      	cmp	r3, r2
 8010c28:	d1e9      	bne.n	8010bfe <event_send_core+0x48>
 8010c2a:	e7dc      	b.n	8010be6 <event_send_core+0x30>
    res = lv_obj_event_base(NULL, e);
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	2000      	movs	r0, #0
 8010c30:	f7ff ffa0 	bl	8010b74 <lv_obj_event_base>
    event_dsc = res == LV_RES_INV ? NULL : lv_obj_get_event_dsc(e->current_target, 0);
 8010c34:	4607      	mov	r7, r0
 8010c36:	b120      	cbz	r0, 8010c42 <event_send_core+0x8c>
 8010c38:	2100      	movs	r1, #0
 8010c3a:	6870      	ldr	r0, [r6, #4]
 8010c3c:	f7ff ff60 	bl	8010b00 <lv_obj_get_event_dsc>
 8010c40:	4604      	mov	r4, r0
    uint32_t i = 0;
 8010c42:	2500      	movs	r5, #0
 8010c44:	e011      	b.n	8010c6a <event_send_core+0xb4>
            e->user_data = event_dsc->user_data;
 8010c46:	6863      	ldr	r3, [r4, #4]
 8010c48:	60f3      	str	r3, [r6, #12]
            event_dsc->cb(e);
 8010c4a:	6823      	ldr	r3, [r4, #0]
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	4798      	blx	r3
            if(e->stop_processing) return LV_RES_OK;
 8010c50:	7e33      	ldrb	r3, [r6, #24]
 8010c52:	f013 0202 	ands.w	r2, r3, #2
 8010c56:	d11b      	bne.n	8010c90 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8010c58:	f013 0f01 	tst.w	r3, #1
 8010c5c:	d132      	bne.n	8010cc4 <event_send_core+0x10e>
        i++;
 8010c5e:	3501      	adds	r5, #1
        event_dsc = lv_obj_get_event_dsc(e->current_target, i);
 8010c60:	4629      	mov	r1, r5
 8010c62:	6870      	ldr	r0, [r6, #4]
 8010c64:	f7ff ff4c 	bl	8010b00 <lv_obj_get_event_dsc>
 8010c68:	4604      	mov	r4, r0
    while(event_dsc && res == LV_RES_OK) {
 8010c6a:	b17c      	cbz	r4, 8010c8c <event_send_core+0xd6>
 8010c6c:	2f01      	cmp	r7, #1
 8010c6e:	d10d      	bne.n	8010c8c <event_send_core+0xd6>
        if(event_dsc->cb && ((event_dsc->filter & LV_EVENT_PREPROCESS) == 0)
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d0f3      	beq.n	8010c5e <event_send_core+0xa8>
 8010c76:	7a22      	ldrb	r2, [r4, #8]
 8010c78:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	dbee      	blt.n	8010c5e <event_send_core+0xa8>
           && (event_dsc->filter == LV_EVENT_ALL || event_dsc->filter == e->code)) {
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	d0e0      	beq.n	8010c46 <event_send_core+0x90>
 8010c84:	7a33      	ldrb	r3, [r6, #8]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d1e9      	bne.n	8010c5e <event_send_core+0xa8>
 8010c8a:	e7dc      	b.n	8010c46 <event_send_core+0x90>
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8010c8c:	2f01      	cmp	r7, #1
 8010c8e:	d001      	beq.n	8010c94 <event_send_core+0xde>
}
 8010c90:	4638      	mov	r0, r7
 8010c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(res == LV_RES_OK && e->current_target->parent && event_is_bubbled(e)) {
 8010c94:	6873      	ldr	r3, [r6, #4]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d0f9      	beq.n	8010c90 <event_send_core+0xda>
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff ff3f 	bl	8010b20 <event_is_bubbled>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d0f4      	beq.n	8010c90 <event_send_core+0xda>
        e->current_target = e->current_target->parent;
 8010ca6:	6873      	ldr	r3, [r6, #4]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	6073      	str	r3, [r6, #4]
        res = event_send_core(e);
 8010cac:	4630      	mov	r0, r6
 8010cae:	f7ff ff82 	bl	8010bb6 <event_send_core>
 8010cb2:	4607      	mov	r7, r0
        if(res != LV_RES_OK) return LV_RES_INV;
 8010cb4:	2801      	cmp	r0, #1
 8010cb6:	d0eb      	beq.n	8010c90 <event_send_core+0xda>
 8010cb8:	2700      	movs	r7, #0
 8010cba:	e7e9      	b.n	8010c90 <event_send_core+0xda>
        if(e->stop_processing) return LV_RES_OK;
 8010cbc:	2701      	movs	r7, #1
 8010cbe:	e7e7      	b.n	8010c90 <event_send_core+0xda>
            if(e->stop_processing) return LV_RES_OK;
 8010cc0:	2701      	movs	r7, #1
 8010cc2:	e7e5      	b.n	8010c90 <event_send_core+0xda>
            if(e->deleted) return LV_RES_INV;
 8010cc4:	4617      	mov	r7, r2
 8010cc6:	e7e3      	b.n	8010c90 <event_send_core+0xda>

08010cc8 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
 8010cc8:	b318      	cbz	r0, 8010d12 <lv_event_send+0x4a>
{
 8010cca:	b510      	push	{r4, lr}
 8010ccc:	b088      	sub	sp, #32
    e.target = obj;
 8010cce:	9001      	str	r0, [sp, #4]
    e.current_target = obj;
 8010cd0:	9002      	str	r0, [sp, #8]
    e.code = event_code;
 8010cd2:	f88d 100c 	strb.w	r1, [sp, #12]
    e.user_data = NULL;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	9304      	str	r3, [sp, #16]
    e.param = param;
 8010cda:	9205      	str	r2, [sp, #20]
    e.deleted = 0;
 8010cdc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8010ce0:	f363 0200 	bfi	r2, r3, #0, #1
 8010ce4:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_bubbling = 0;
 8010ce8:	b2d2      	uxtb	r2, r2
 8010cea:	f363 0282 	bfi	r2, r3, #2, #1
 8010cee:	f88d 201c 	strb.w	r2, [sp, #28]
    e.stop_processing = 0;
 8010cf2:	b2d2      	uxtb	r2, r2
 8010cf4:	f363 0241 	bfi	r2, r3, #1, #1
 8010cf8:	f88d 201c 	strb.w	r2, [sp, #28]
    e.prev = event_head;
 8010cfc:	4c06      	ldr	r4, [pc, #24]	@ (8010d18 <lv_event_send+0x50>)
 8010cfe:	6823      	ldr	r3, [r4, #0]
 8010d00:	9306      	str	r3, [sp, #24]
    event_head = &e;
 8010d02:	a801      	add	r0, sp, #4
 8010d04:	6020      	str	r0, [r4, #0]
    lv_res_t res = event_send_core(&e);
 8010d06:	f7ff ff56 	bl	8010bb6 <event_send_core>
    event_head = e.prev;
 8010d0a:	9b06      	ldr	r3, [sp, #24]
 8010d0c:	6023      	str	r3, [r4, #0]
}
 8010d0e:	b008      	add	sp, #32
 8010d10:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
 8010d12:	2001      	movs	r0, #1
}
 8010d14:	4770      	bx	lr
 8010d16:	bf00      	nop
 8010d18:	20006650 	.word	0x20006650

08010d1c <lv_event_get_target>:
}
 8010d1c:	6800      	ldr	r0, [r0, #0]
 8010d1e:	4770      	bx	lr

08010d20 <lv_event_get_current_target>:
}
 8010d20:	6840      	ldr	r0, [r0, #4]
 8010d22:	4770      	bx	lr

08010d24 <lv_event_get_code>:
    return e->code & ~LV_EVENT_PREPROCESS;
 8010d24:	7a00      	ldrb	r0, [r0, #8]
}
 8010d26:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8010d2a:	4770      	bx	lr

08010d2c <lv_event_get_param>:
}
 8010d2c:	6900      	ldr	r0, [r0, #16]
 8010d2e:	4770      	bx	lr

08010d30 <lv_event_get_user_data>:
}
 8010d30:	68c0      	ldr	r0, [r0, #12]
 8010d32:	4770      	bx	lr

08010d34 <_lv_event_mark_deleted>:
    lv_event_t * e = event_head;
 8010d34:	4b08      	ldr	r3, [pc, #32]	@ (8010d58 <_lv_event_mark_deleted+0x24>)
 8010d36:	681b      	ldr	r3, [r3, #0]
    while(e) {
 8010d38:	e004      	b.n	8010d44 <_lv_event_mark_deleted+0x10>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8010d3a:	7e1a      	ldrb	r2, [r3, #24]
 8010d3c:	f042 0201 	orr.w	r2, r2, #1
 8010d40:	761a      	strb	r2, [r3, #24]
        e = e->prev;
 8010d42:	695b      	ldr	r3, [r3, #20]
    while(e) {
 8010d44:	b133      	cbz	r3, 8010d54 <_lv_event_mark_deleted+0x20>
        if(e->current_target == obj || e->target == obj) e->deleted = 1;
 8010d46:	685a      	ldr	r2, [r3, #4]
 8010d48:	4282      	cmp	r2, r0
 8010d4a:	d0f6      	beq.n	8010d3a <_lv_event_mark_deleted+0x6>
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	4282      	cmp	r2, r0
 8010d50:	d1f7      	bne.n	8010d42 <_lv_event_mark_deleted+0xe>
 8010d52:	e7f2      	b.n	8010d3a <_lv_event_mark_deleted+0x6>
}
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	20006650 	.word	0x20006650

08010d5c <lv_obj_add_event_cb>:
{
 8010d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d60:	4604      	mov	r4, r0
 8010d62:	460f      	mov	r7, r1
 8010d64:	4616      	mov	r6, r2
 8010d66:	461d      	mov	r5, r3
    lv_obj_allocate_spec_attr(obj);
 8010d68:	f007 fe12 	bl	8018990 <lv_obj_allocate_spec_attr>
    obj->spec_attr->event_dsc_cnt++;
 8010d6c:	68a1      	ldr	r1, [r4, #8]
 8010d6e:	7e8b      	ldrb	r3, [r1, #26]
 8010d70:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8010d74:	3201      	adds	r2, #1
 8010d76:	f362 0305 	bfi	r3, r2, #0, #6
 8010d7a:	768b      	strb	r3, [r1, #26]
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8010d7c:	f8d4 8008 	ldr.w	r8, [r4, #8]
                                               obj->spec_attr->event_dsc_cnt * sizeof(lv_event_dsc_t));
 8010d80:	f898 101a 	ldrb.w	r1, [r8, #26]
 8010d84:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
    obj->spec_attr->event_dsc = lv_mem_realloc(obj->spec_attr->event_dsc,
 8010d88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010d8c:	0089      	lsls	r1, r1, #2
 8010d8e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8010d92:	f005 fdfb 	bl	801698c <lv_mem_realloc>
 8010d96:	f8c8 000c 	str.w	r0, [r8, #12]
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8010d9a:	68a3      	ldr	r3, [r4, #8]
 8010d9c:	68da      	ldr	r2, [r3, #12]
 8010d9e:	b34a      	cbz	r2, 8010df4 <lv_obj_add_event_cb+0x98>
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].cb = event_cb;
 8010da0:	7e9b      	ldrb	r3, [r3, #26]
 8010da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010da6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	3b0c      	subs	r3, #12
 8010dae:	50d7      	str	r7, [r2, r3]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].filter = filter;
 8010db0:	68a3      	ldr	r3, [r4, #8]
 8010db2:	68da      	ldr	r2, [r3, #12]
 8010db4:	7e99      	ldrb	r1, [r3, #26]
 8010db6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8010dba:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	3b0c      	subs	r3, #12
 8010dc2:	4413      	add	r3, r2
 8010dc4:	721e      	strb	r6, [r3, #8]
    obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1].user_data = user_data;
 8010dc6:	68a2      	ldr	r2, [r4, #8]
 8010dc8:	68d3      	ldr	r3, [r2, #12]
 8010dca:	7e92      	ldrb	r2, [r2, #26]
 8010dcc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010dd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010dd4:	0092      	lsls	r2, r2, #2
 8010dd6:	3a0c      	subs	r2, #12
 8010dd8:	4413      	add	r3, r2
 8010dda:	605d      	str	r5, [r3, #4]
    return &obj->spec_attr->event_dsc[obj->spec_attr->event_dsc_cnt - 1];
 8010ddc:	68a3      	ldr	r3, [r4, #8]
 8010dde:	68d8      	ldr	r0, [r3, #12]
 8010de0:	7e9b      	ldrb	r3, [r3, #26]
 8010de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010de6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	3b0c      	subs	r3, #12
}
 8010dee:	4418      	add	r0, r3
 8010df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(obj->spec_attr->event_dsc);
 8010df4:	e7fe      	b.n	8010df4 <lv_obj_add_event_cb+0x98>

08010df6 <lv_event_get_indev>:
{
 8010df6:	b508      	push	{r3, lr}
    if(e->code == LV_EVENT_PRESSED ||
 8010df8:	7a03      	ldrb	r3, [r0, #8]
       e->code == LV_EVENT_DEFOCUSED ||
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	b2db      	uxtb	r3, r3
    if(e->code == LV_EVENT_PRESSED ||
 8010dfe:	2b0f      	cmp	r3, #15
 8010e00:	d802      	bhi.n	8010e08 <lv_event_get_indev+0x12>
        return lv_event_get_param(e);
 8010e02:	f7ff ff93 	bl	8010d2c <lv_event_get_param>
}
 8010e06:	bd08      	pop	{r3, pc}
        return NULL;
 8010e08:	2000      	movs	r0, #0
 8010e0a:	e7fc      	b.n	8010e06 <lv_event_get_indev+0x10>

08010e0c <lv_event_get_draw_ctx>:
{
 8010e0c:	b508      	push	{r3, lr}
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8010e0e:	7a02      	ldrb	r2, [r0, #8]
       e->code == LV_EVENT_DRAW_MAIN_BEGIN ||
 8010e10:	f1a2 0314 	sub.w	r3, r2, #20
 8010e14:	b2db      	uxtb	r3, r3
    if(e->code == LV_EVENT_DRAW_MAIN ||
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	d905      	bls.n	8010e26 <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_MAIN_END ||
 8010e1a:	2a18      	cmp	r2, #24
 8010e1c:	d003      	beq.n	8010e26 <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_POST ||
 8010e1e:	2a17      	cmp	r2, #23
 8010e20:	d001      	beq.n	8010e26 <lv_event_get_draw_ctx+0x1a>
       e->code == LV_EVENT_DRAW_POST_BEGIN ||
 8010e22:	2a19      	cmp	r2, #25
 8010e24:	d102      	bne.n	8010e2c <lv_event_get_draw_ctx+0x20>
        return lv_event_get_param(e);
 8010e26:	f7ff ff81 	bl	8010d2c <lv_event_get_param>
}
 8010e2a:	bd08      	pop	{r3, pc}
        return NULL;
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	e7fc      	b.n	8010e2a <lv_event_get_draw_ctx+0x1e>

08010e30 <lv_event_set_ext_draw_size>:
    if(e->code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 8010e30:	7a03      	ldrb	r3, [r0, #8]
 8010e32:	2b13      	cmp	r3, #19
 8010e34:	d000      	beq.n	8010e38 <lv_event_set_ext_draw_size+0x8>
 8010e36:	4770      	bx	lr
{
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	460c      	mov	r4, r1
        lv_coord_t * cur_size = lv_event_get_param(e);
 8010e3c:	f7ff ff76 	bl	8010d2c <lv_event_get_param>
        *cur_size = LV_MAX(*cur_size, size);
 8010e40:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010e44:	42a3      	cmp	r3, r4
 8010e46:	bfb8      	it	lt
 8010e48:	4623      	movlt	r3, r4
 8010e4a:	8003      	strh	r3, [r0, #0]
}
 8010e4c:	bd10      	pop	{r4, pc}

08010e4e <lv_extra_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_extra_init(void)
{
 8010e4e:	b508      	push	{r3, lr}
#if LV_USE_FLEX
    lv_flex_init();
 8010e50:	f000 fdcc 	bl	80119ec <lv_flex_init>
#endif

#if LV_USE_GRID
    lv_grid_init();
 8010e54:	f001 ff2e 	bl	8012cb4 <lv_grid_init>
    lv_freetype_init(LV_FREETYPE_CACHE_FT_FACES, LV_FREETYPE_CACHE_FT_SIZES, LV_FREETYPE_CACHE_SIZE);
#  else
    lv_freetype_init(0, 0, 0);
#  endif
#endif
}
 8010e58:	bd08      	pop	{r3, pc}

08010e5a <lv_area_get_width>:
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8010e5a:	8883      	ldrh	r3, [r0, #4]
 8010e5c:	8802      	ldrh	r2, [r0, #0]
 8010e5e:	1a98      	subs	r0, r3, r2
 8010e60:	b280      	uxth	r0, r0
 8010e62:	3001      	adds	r0, #1
}
 8010e64:	b200      	sxth	r0, r0
 8010e66:	4770      	bx	lr

08010e68 <lv_area_get_height>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8010e68:	88c3      	ldrh	r3, [r0, #6]
 8010e6a:	8842      	ldrh	r2, [r0, #2]
 8010e6c:	1a98      	subs	r0, r3, r2
 8010e6e:	b280      	uxth	r0, r0
 8010e70:	3001      	adds	r0, #1
}
 8010e72:	b200      	sxth	r0, r0
 8010e74:	4770      	bx	lr

08010e76 <place_content>:
/**
 * Tell a start coordinate and gap for a placement type.
 */
static void place_content(lv_flex_align_t place, lv_coord_t max_size, lv_coord_t content_size, lv_coord_t item_cnt,
                          lv_coord_t * start_pos, lv_coord_t * gap)
{
 8010e76:	b410      	push	{r4}
 8010e78:	9c01      	ldr	r4, [sp, #4]
    if(item_cnt <= 1) {
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	dd07      	ble.n	8010e8e <place_content+0x18>
            default:
                break;
        }
    }

    switch(place) {
 8010e7e:	3801      	subs	r0, #1
 8010e80:	2804      	cmp	r0, #4
 8010e82:	d846      	bhi.n	8010f12 <place_content+0x9c>
 8010e84:	e8df f000 	tbb	[pc, r0]
 8010e88:	27380815 	.word	0x27380815
 8010e8c:	1e          	.byte	0x1e
 8010e8d:	00          	.byte	0x00
        switch(place) {
 8010e8e:	f1a0 0c03 	sub.w	ip, r0, #3
 8010e92:	f1bc 0f02 	cmp.w	ip, #2
 8010e96:	d8f2      	bhi.n	8010e7e <place_content+0x8>
        case LV_FLEX_ALIGN_CENTER:
            *gap = 0;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	9802      	ldr	r0, [sp, #8]
 8010e9c:	8003      	strh	r3, [r0, #0]
            *start_pos += (max_size - content_size) / 2;
 8010e9e:	8823      	ldrh	r3, [r4, #0]
 8010ea0:	1a8a      	subs	r2, r1, r2
 8010ea2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8010ea6:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8010eaa:	8023      	strh	r3, [r4, #0]
            *start_pos += *gap;
            break;
        default:
            *gap = 0;
    }
}
 8010eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eb0:	4770      	bx	lr
            *gap = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	9802      	ldr	r0, [sp, #8]
 8010eb6:	8003      	strh	r3, [r0, #0]
            *start_pos += max_size - content_size;
 8010eb8:	8823      	ldrh	r3, [r4, #0]
 8010eba:	1a8a      	subs	r2, r1, r2
 8010ebc:	fa13 f282 	uxtah	r2, r3, r2
 8010ec0:	8022      	strh	r2, [r4, #0]
            break;
 8010ec2:	e7f3      	b.n	8010eac <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt - 1);
 8010ec4:	1a8a      	subs	r2, r1, r2
 8010ec6:	b212      	sxth	r2, r2
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	b21b      	sxth	r3, r3
 8010ecc:	fb92 f2f3 	sdiv	r2, r2, r3
 8010ed0:	9b02      	ldr	r3, [sp, #8]
 8010ed2:	801a      	strh	r2, [r3, #0]
            break;
 8010ed4:	e7ea      	b.n	8010eac <place_content+0x36>
            *gap += (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt);
 8010ed6:	9802      	ldr	r0, [sp, #8]
 8010ed8:	8800      	ldrh	r0, [r0, #0]
 8010eda:	1a8a      	subs	r2, r1, r2
 8010edc:	b212      	sxth	r2, r2
 8010ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ee2:	4403      	add	r3, r0
 8010ee4:	b21b      	sxth	r3, r3
 8010ee6:	9a02      	ldr	r2, [sp, #8]
 8010ee8:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap / 2;
 8010eea:	8822      	ldrh	r2, [r4, #0]
 8010eec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010ef0:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8010ef4:	8023      	strh	r3, [r4, #0]
            break;
 8010ef6:	e7d9      	b.n	8010eac <place_content+0x36>
            *gap = (lv_coord_t)(max_size - content_size) / (lv_coord_t)(item_cnt + 1);
 8010ef8:	1a8a      	subs	r2, r1, r2
 8010efa:	b212      	sxth	r2, r2
 8010efc:	3301      	adds	r3, #1
 8010efe:	b21b      	sxth	r3, r3
 8010f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8010f04:	9a02      	ldr	r2, [sp, #8]
 8010f06:	8013      	strh	r3, [r2, #0]
            *start_pos += *gap;
 8010f08:	8822      	ldrh	r2, [r4, #0]
 8010f0a:	fa12 f383 	uxtah	r3, r2, r3
 8010f0e:	8023      	strh	r3, [r4, #0]
            break;
 8010f10:	e7cc      	b.n	8010eac <place_content+0x36>
            *gap = 0;
 8010f12:	2300      	movs	r3, #0
 8010f14:	9a02      	ldr	r2, [sp, #8]
 8010f16:	8013      	strh	r3, [r2, #0]
}
 8010f18:	e7c8      	b.n	8010eac <place_content+0x36>

08010f1a <get_next_item>:

static lv_obj_t * get_next_item(lv_obj_t * cont, bool rev, int32_t * item_id)
{
    if(rev) {
 8010f1a:	b149      	cbz	r1, 8010f30 <get_next_item+0x16>
        (*item_id)--;
 8010f1c:	6813      	ldr	r3, [r2, #0]
 8010f1e:	3b01      	subs	r3, #1
 8010f20:	6013      	str	r3, [r2, #0]
        if(*item_id >= 0) return cont->spec_attr->children[*item_id];
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	db0f      	blt.n	8010f46 <get_next_item+0x2c>
 8010f26:	6882      	ldr	r2, [r0, #8]
 8010f28:	6812      	ldr	r2, [r2, #0]
 8010f2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010f2e:	4770      	bx	lr
        else return NULL;
    }
    else {
        (*item_id)++;
 8010f30:	6813      	ldr	r3, [r2, #0]
 8010f32:	3301      	adds	r3, #1
 8010f34:	6013      	str	r3, [r2, #0]
        if((*item_id) < (int32_t)cont->spec_attr->child_cnt) return cont->spec_attr->children[*item_id];
 8010f36:	6882      	ldr	r2, [r0, #8]
 8010f38:	6851      	ldr	r1, [r2, #4]
 8010f3a:	428b      	cmp	r3, r1
 8010f3c:	da05      	bge.n	8010f4a <get_next_item+0x30>
 8010f3e:	6812      	ldr	r2, [r2, #0]
 8010f40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010f44:	4770      	bx	lr
        else return NULL;
 8010f46:	2000      	movs	r0, #0
 8010f48:	4770      	bx	lr
        else return NULL;
 8010f4a:	2000      	movs	r0, #0
    }
}
 8010f4c:	4770      	bx	lr
	...

08010f50 <find_track_end>:
{
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	b087      	sub	sp, #28
 8010f56:	4681      	mov	r9, r0
 8010f58:	460e      	mov	r6, r1
 8010f5a:	4690      	mov	r8, r2
 8010f5c:	9302      	str	r3, [sp, #8]
 8010f5e:	f9bd b040 	ldrsh.w	fp, [sp, #64]	@ 0x40
 8010f62:	9d11      	ldr	r5, [sp, #68]	@ 0x44
static inline lv_coord_t lv_obj_get_style_width(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8010f64:	2201      	movs	r2, #1
 8010f66:	2100      	movs	r1, #0
 8010f68:	f00b fbc4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8010f6c:	b204      	sxth	r4, r0
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8010f6e:	2204      	movs	r2, #4
 8010f70:	2100      	movs	r1, #0
 8010f72:	4648      	mov	r0, r9
 8010f74:	f00b fbbe 	bl	801c6f4 <lv_obj_get_style_prop>
    if(f->wrap && ((f->row && w_set == LV_SIZE_CONTENT) || (!f->row && h_set == LV_SIZE_CONTENT))) {
 8010f78:	78f3      	ldrb	r3, [r6, #3]
 8010f7a:	f013 0f02 	tst.w	r3, #2
 8010f7e:	d010      	beq.n	8010fa2 <find_track_end+0x52>
 8010f80:	b200      	sxth	r0, r0
 8010f82:	f013 0301 	ands.w	r3, r3, #1
 8010f86:	d003      	beq.n	8010f90 <find_track_end+0x40>
 8010f88:	f242 72d1 	movw	r2, #10193	@ 0x27d1
 8010f8c:	4294      	cmp	r4, r2
 8010f8e:	d004      	beq.n	8010f9a <find_track_end+0x4a>
 8010f90:	b93b      	cbnz	r3, 8010fa2 <find_track_end+0x52>
 8010f92:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8010f96:	4298      	cmp	r0, r3
 8010f98:	d103      	bne.n	8010fa2 <find_track_end+0x52>
        f->wrap = false;
 8010f9a:	78f3      	ldrb	r3, [r6, #3]
 8010f9c:	f023 0302 	bic.w	r3, r3, #2
 8010fa0:	70f3      	strb	r3, [r6, #3]
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 8010fa2:	78f3      	ldrb	r3, [r6, #3]
 8010fa4:	f013 0301 	ands.w	r3, r3, #1
 8010fa8:	d013      	beq.n	8010fd2 <find_track_end+0x82>
 8010faa:	4a81      	ldr	r2, [pc, #516]	@ (80111b0 <find_track_end+0x260>)
 8010fac:	9203      	str	r2, [sp, #12]
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8010fae:	b99b      	cbnz	r3, 8010fd8 <find_track_end+0x88>
 8010fb0:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 80111b0 <find_track_end+0x260>
    t->track_main_size = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	806b      	strh	r3, [r5, #2]
    t->track_fix_main_size = 0;
 8010fb8:	80ab      	strh	r3, [r5, #4]
    t->grow_item_cnt = 0;
 8010fba:	612b      	str	r3, [r5, #16]
    t->track_cross_size = 0;
 8010fbc:	802b      	strh	r3, [r5, #0]
    t->item_cnt = 0;
 8010fbe:	60ab      	str	r3, [r5, #8]
    t->grow_dsc = NULL;
 8010fc0:	60eb      	str	r3, [r5, #12]
    int32_t item_id = item_start_id;
 8010fc2:	f8cd 8014 	str.w	r8, [sp, #20]
    lv_obj_t * item = lv_obj_get_child(cont, item_id);
 8010fc6:	4641      	mov	r1, r8
 8010fc8:	4648      	mov	r0, r9
 8010fca:	f00c f8fd 	bl	801d1c8 <lv_obj_get_child>
 8010fce:	4604      	mov	r4, r0
    while(item) {
 8010fd0:	e0a6      	b.n	8011120 <find_track_end+0x1d0>
    lv_coord_t(*get_main_size)(const lv_obj_t *) = (f->row ? lv_obj_get_width : lv_obj_get_height);
 8010fd2:	4a78      	ldr	r2, [pc, #480]	@ (80111b4 <find_track_end+0x264>)
 8010fd4:	9203      	str	r2, [sp, #12]
 8010fd6:	e7ea      	b.n	8010fae <find_track_end+0x5e>
    lv_coord_t(*get_cross_size)(const lv_obj_t *) = (!f->row ? lv_obj_get_width : lv_obj_get_height);
 8010fd8:	f8df a1d8 	ldr.w	sl, [pc, #472]	@ 80111b4 <find_track_end+0x264>
 8010fdc:	e7ea      	b.n	8010fb4 <find_track_end+0x64>
    return (lv_flex_align_t)v.num;
}

static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_GROW);
 8010fde:	4b76      	ldr	r3, [pc, #472]	@ (80111b8 <find_track_end+0x268>)
 8010fe0:	881a      	ldrh	r2, [r3, #0]
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f00b fb85 	bl	801c6f4 <lv_obj_get_style_prop>
 8010fea:	4607      	mov	r7, r0
            if(grow_value) {
 8010fec:	f010 0fff 	tst.w	r0, #255	@ 0xff
 8010ff0:	d06c      	beq.n	80110cc <find_track_end+0x17c>
                t->grow_item_cnt++;
 8010ff2:	6928      	ldr	r0, [r5, #16]
 8010ff4:	3001      	adds	r0, #1
 8010ff6:	6128      	str	r0, [r5, #16]
                t->track_fix_main_size += item_gap;
 8010ff8:	88ab      	ldrh	r3, [r5, #4]
 8010ffa:	445b      	add	r3, fp
 8010ffc:	80ab      	strh	r3, [r5, #4]
                if(t->grow_dsc_calc) {
 8010ffe:	7d2b      	ldrb	r3, [r5, #20]
 8011000:	f013 0f01 	tst.w	r3, #1
 8011004:	d074      	beq.n	80110f0 <find_track_end+0x1a0>
                    grow_dsc_t * new_dsc = lv_mem_buf_get(sizeof(grow_dsc_t) * (t->grow_item_cnt));
 8011006:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801100a:	0080      	lsls	r0, r0, #2
 801100c:	f005 fcd6 	bl	80169bc <lv_mem_buf_get>
                    LV_ASSERT_MALLOC(new_dsc);
 8011010:	9001      	str	r0, [sp, #4]
 8011012:	2800      	cmp	r0, #0
 8011014:	d04b      	beq.n	80110ae <find_track_end+0x15e>
                    if(t->grow_dsc) {
 8011016:	68e9      	ldr	r1, [r5, #12]
 8011018:	b151      	cbz	r1, 8011030 <find_track_end+0xe0>
                        lv_memcpy(new_dsc, t->grow_dsc, sizeof(grow_dsc_t) * (t->grow_item_cnt - 1));
 801101a:	692b      	ldr	r3, [r5, #16]
 801101c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011020:	009a      	lsls	r2, r3, #2
 8011022:	3a14      	subs	r2, #20
 8011024:	9801      	ldr	r0, [sp, #4]
 8011026:	f005 fd5f 	bl	8016ae8 <lv_memcpy>
                        lv_mem_buf_release(t->grow_dsc);
 801102a:	68e8      	ldr	r0, [r5, #12]
 801102c:	f005 fd28 	bl	8016a80 <lv_mem_buf_release>
                    new_dsc[t->grow_item_cnt - 1].item = item;
 8011030:	692b      	ldr	r3, [r5, #16]
 8011032:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	3b14      	subs	r3, #20
 801103a:	9a01      	ldr	r2, [sp, #4]
 801103c:	50d4      	str	r4, [r2, r3]
                    new_dsc[t->grow_item_cnt - 1].min_size = f->row ? lv_obj_get_style_min_width(item,
 801103e:	78f3      	ldrb	r3, [r6, #3]
 8011040:	f013 0f01 	tst.w	r3, #1
 8011044:	d034      	beq.n	80110b0 <find_track_end+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 8011046:	2202      	movs	r2, #2
 8011048:	2100      	movs	r1, #0
 801104a:	4620      	mov	r0, r4
 801104c:	f00b fb52 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8011050:	b200      	sxth	r0, r0
 8011052:	692b      	ldr	r3, [r5, #16]
 8011054:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011058:	009b      	lsls	r3, r3, #2
 801105a:	3b14      	subs	r3, #20
 801105c:	9a01      	ldr	r2, [sp, #4]
 801105e:	4413      	add	r3, r2
 8011060:	8098      	strh	r0, [r3, #4]
                    new_dsc[t->grow_item_cnt - 1].max_size = f->row ? lv_obj_get_style_max_width(item,
 8011062:	78f3      	ldrb	r3, [r6, #3]
 8011064:	f013 0f01 	tst.w	r3, #1
 8011068:	d029      	beq.n	80110be <find_track_end+0x16e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 801106a:	2203      	movs	r2, #3
 801106c:	2100      	movs	r1, #0
 801106e:	4620      	mov	r0, r4
 8011070:	f00b fb40 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8011074:	b200      	sxth	r0, r0
 8011076:	692b      	ldr	r3, [r5, #16]
 8011078:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	3b14      	subs	r3, #20
 8011080:	9901      	ldr	r1, [sp, #4]
 8011082:	440b      	add	r3, r1
 8011084:	80d8      	strh	r0, [r3, #6]
                    new_dsc[t->grow_item_cnt - 1].grow_value = grow_value;
 8011086:	692b      	ldr	r3, [r5, #16]
 8011088:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	3b14      	subs	r3, #20
 8011090:	440b      	add	r3, r1
 8011092:	b2ff      	uxtb	r7, r7
 8011094:	60df      	str	r7, [r3, #12]
                    new_dsc[t->grow_item_cnt - 1].clamped = 0;
 8011096:	692b      	ldr	r3, [r5, #16]
 8011098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	3b14      	subs	r3, #20
 80110a0:	440b      	add	r3, r1
 80110a2:	7c1a      	ldrb	r2, [r3, #16]
 80110a4:	f022 0201 	bic.w	r2, r2, #1
 80110a8:	741a      	strb	r2, [r3, #16]
                    t->grow_dsc = new_dsc;
 80110aa:	60e9      	str	r1, [r5, #12]
 80110ac:	e020      	b.n	80110f0 <find_track_end+0x1a0>
                    LV_ASSERT_MALLOC(new_dsc);
 80110ae:	e7fe      	b.n	80110ae <find_track_end+0x15e>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_min_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 80110b0:	2205      	movs	r2, #5
 80110b2:	2100      	movs	r1, #0
 80110b4:	4620      	mov	r0, r4
 80110b6:	f00b fb1d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80110ba:	b200      	sxth	r0, r0
 80110bc:	e7c9      	b.n	8011052 <find_track_end+0x102>
}

static inline lv_coord_t lv_obj_get_style_max_height(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 80110be:	2206      	movs	r2, #6
 80110c0:	2100      	movs	r1, #0
 80110c2:	4620      	mov	r0, r4
 80110c4:	f00b fb16 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80110c8:	b200      	sxth	r0, r0
 80110ca:	e7d4      	b.n	8011076 <find_track_end+0x126>
                lv_coord_t item_size = get_main_size(item);
 80110cc:	4620      	mov	r0, r4
 80110ce:	9b03      	ldr	r3, [sp, #12]
 80110d0:	4798      	blx	r3
                if(f->wrap && t->track_fix_main_size + item_size > max_main_size) break;
 80110d2:	78f3      	ldrb	r3, [r6, #3]
 80110d4:	f013 0f02 	tst.w	r3, #2
 80110d8:	d005      	beq.n	80110e6 <find_track_end+0x196>
 80110da:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80110de:	4403      	add	r3, r0
 80110e0:	9a02      	ldr	r2, [sp, #8]
 80110e2:	4293      	cmp	r3, r2
 80110e4:	dc34      	bgt.n	8011150 <find_track_end+0x200>
                t->track_fix_main_size += item_size + item_gap;
 80110e6:	88ab      	ldrh	r3, [r5, #4]
 80110e8:	4458      	add	r0, fp
 80110ea:	fa13 f080 	uxtah	r0, r3, r0
 80110ee:	80a8      	strh	r0, [r5, #4]
            t->track_cross_size = LV_MAX(get_cross_size(item), t->track_cross_size);
 80110f0:	4620      	mov	r0, r4
 80110f2:	47d0      	blx	sl
 80110f4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80110f8:	4298      	cmp	r0, r3
 80110fa:	dd02      	ble.n	8011102 <find_track_end+0x1b2>
 80110fc:	4620      	mov	r0, r4
 80110fe:	47d0      	blx	sl
 8011100:	4603      	mov	r3, r0
 8011102:	802b      	strh	r3, [r5, #0]
            t->item_cnt++;
 8011104:	68ab      	ldr	r3, [r5, #8]
 8011106:	3301      	adds	r3, #1
 8011108:	60ab      	str	r3, [r5, #8]
 801110a:	e01a      	b.n	8011142 <find_track_end+0x1f2>
        item_id += f->rev ? -1 : +1;
 801110c:	2101      	movs	r1, #1
 801110e:	9b05      	ldr	r3, [sp, #20]
 8011110:	4419      	add	r1, r3
 8011112:	9105      	str	r1, [sp, #20]
        if(item_id < 0) break;
 8011114:	2900      	cmp	r1, #0
 8011116:	db1b      	blt.n	8011150 <find_track_end+0x200>
        item = lv_obj_get_child(cont, item_id);
 8011118:	4648      	mov	r0, r9
 801111a:	f00c f855 	bl	801d1c8 <lv_obj_get_child>
 801111e:	4604      	mov	r4, r0
    while(item) {
 8011120:	b1b4      	cbz	r4, 8011150 <find_track_end+0x200>
        if(item_id != item_start_id && lv_obj_has_flag(item, LV_OBJ_FLAG_FLEX_IN_NEW_TRACK)) break;
 8011122:	9b05      	ldr	r3, [sp, #20]
 8011124:	4543      	cmp	r3, r8
 8011126:	d005      	beq.n	8011134 <find_track_end+0x1e4>
 8011128:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 801112c:	4620      	mov	r0, r4
 801112e:	f007 f9ae 	bl	801848e <lv_obj_has_flag>
 8011132:	b968      	cbnz	r0, 8011150 <find_track_end+0x200>
        if(!lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 8011134:	4921      	ldr	r1, [pc, #132]	@ (80111bc <find_track_end+0x26c>)
 8011136:	4620      	mov	r0, r4
 8011138:	f007 f9af 	bl	801849a <lv_obj_has_flag_any>
 801113c:	2800      	cmp	r0, #0
 801113e:	f43f af4e 	beq.w	8010fde <find_track_end+0x8e>
        item_id += f->rev ? -1 : +1;
 8011142:	78f3      	ldrb	r3, [r6, #3]
 8011144:	f013 0f04 	tst.w	r3, #4
 8011148:	d0e0      	beq.n	801110c <find_track_end+0x1bc>
 801114a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801114e:	e7de      	b.n	801110e <find_track_end+0x1be>
    if(t->track_fix_main_size > 0) t->track_fix_main_size -= item_gap; /*There is no gap after the last item*/
 8011150:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dd03      	ble.n	8011160 <find_track_end+0x210>
 8011158:	b29b      	uxth	r3, r3
 801115a:	eba3 030b 	sub.w	r3, r3, fp
 801115e:	80ab      	strh	r3, [r5, #4]
    t->track_main_size = t->grow_item_cnt ? max_main_size : t->track_fix_main_size;
 8011160:	692b      	ldr	r3, [r5, #16]
 8011162:	b913      	cbnz	r3, 801116a <find_track_end+0x21a>
 8011164:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	9b02      	ldr	r3, [sp, #8]
 801116c:	806b      	strh	r3, [r5, #2]
    if(item && item_id == item_start_id) {
 801116e:	b114      	cbz	r4, 8011176 <find_track_end+0x226>
 8011170:	9b05      	ldr	r3, [sp, #20]
 8011172:	4543      	cmp	r3, r8
 8011174:	d003      	beq.n	801117e <find_track_end+0x22e>
}
 8011176:	9805      	ldr	r0, [sp, #20]
 8011178:	b007      	add	sp, #28
 801117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        item = cont->spec_attr->children[item_id];
 801117e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8011182:	6812      	ldr	r2, [r2, #0]
 8011184:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        get_next_item(cont, f->rev, &item_id);
 8011188:	78f1      	ldrb	r1, [r6, #3]
 801118a:	aa05      	add	r2, sp, #20
 801118c:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8011190:	4648      	mov	r0, r9
 8011192:	f7ff fec2 	bl	8010f1a <get_next_item>
        if(item) {
 8011196:	2c00      	cmp	r4, #0
 8011198:	d0ed      	beq.n	8011176 <find_track_end+0x226>
            t->track_cross_size = get_cross_size(item);
 801119a:	4620      	mov	r0, r4
 801119c:	47d0      	blx	sl
 801119e:	8028      	strh	r0, [r5, #0]
            t->track_main_size = get_main_size(item);
 80111a0:	4620      	mov	r0, r4
 80111a2:	9b03      	ldr	r3, [sp, #12]
 80111a4:	4798      	blx	r3
 80111a6:	8068      	strh	r0, [r5, #2]
            t->item_cnt = 1;
 80111a8:	2301      	movs	r3, #1
 80111aa:	60ab      	str	r3, [r5, #8]
 80111ac:	e7e3      	b.n	8011176 <find_track_end+0x226>
 80111ae:	bf00      	nop
 80111b0:	080196d1 	.word	0x080196d1
 80111b4:	080196df 	.word	0x080196df
 80111b8:	20006654 	.word	0x20006654
 80111bc:	00060001 	.word	0x00060001

080111c0 <children_repos>:
{
 80111c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c4:	b093      	sub	sp, #76	@ 0x4c
 80111c6:	9003      	str	r0, [sp, #12]
 80111c8:	468a      	mov	sl, r1
 80111ca:	920d      	str	r2, [sp, #52]	@ 0x34
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	@ 0x70
 80111d2:	9306      	str	r3, [sp, #24]
 80111d4:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 80111d8:	9307      	str	r3, [sp, #28]
 80111da:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	@ 0x7c
 80111de:	9308      	str	r3, [sp, #32]
 80111e0:	9c20      	ldr	r4, [sp, #128]	@ 0x80
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 80111e2:	78cb      	ldrb	r3, [r1, #3]
 80111e4:	f013 0301 	ands.w	r3, r3, #1
 80111e8:	d009      	beq.n	80111fe <children_repos+0x3e>
 80111ea:	4aa6      	ldr	r2, [pc, #664]	@ (8011484 <children_repos+0x2c4>)
 80111ec:	920a      	str	r2, [sp, #40]	@ 0x28
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 80111ee:	b14b      	cbz	r3, 8011204 <children_repos+0x44>
 80111f0:	4aa5      	ldr	r2, [pc, #660]	@ (8011488 <children_repos+0x2c8>)
 80111f2:	9205      	str	r2, [sp, #20]
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 80111f4:	b94b      	cbnz	r3, 801120a <children_repos+0x4a>
 80111f6:	4ba4      	ldr	r3, [pc, #656]	@ (8011488 <children_repos+0x2c8>)
 80111f8:	9309      	str	r3, [sp, #36]	@ 0x24
    bool grow_reiterate  = true;
 80111fa:	2601      	movs	r6, #1
    while(grow_reiterate) {
 80111fc:	e057      	b.n	80112ae <children_repos+0xee>
    void (*area_set_main_size)(lv_area_t *, lv_coord_t) = (f->row ? lv_area_set_width : lv_area_set_height);
 80111fe:	4aa3      	ldr	r2, [pc, #652]	@ (801148c <children_repos+0x2cc>)
 8011200:	920a      	str	r2, [sp, #40]	@ 0x28
 8011202:	e7f4      	b.n	80111ee <children_repos+0x2e>
    lv_coord_t (*area_get_main_size)(const lv_area_t *) = (f->row ? lv_area_get_width : lv_area_get_height);
 8011204:	4aa2      	ldr	r2, [pc, #648]	@ (8011490 <children_repos+0x2d0>)
 8011206:	9205      	str	r2, [sp, #20]
 8011208:	e7f4      	b.n	80111f4 <children_repos+0x34>
    lv_coord_t (*area_get_cross_size)(const lv_area_t *) = (!f->row ? lv_area_get_width : lv_area_get_height);
 801120a:	4ba1      	ldr	r3, [pc, #644]	@ (8011490 <children_repos+0x2d0>)
 801120c:	9309      	str	r3, [sp, #36]	@ 0x24
 801120e:	e7f4      	b.n	80111fa <children_repos+0x3a>
                grow_max_size -= t->grow_dsc[i].final_size;
 8011210:	8900      	ldrh	r0, [r0, #8]
 8011212:	1a09      	subs	r1, r1, r0
 8011214:	b209      	sxth	r1, r1
        for(i = 0; i < t->grow_item_cnt; i++) {
 8011216:	3301      	adds	r3, #1
 8011218:	6920      	ldr	r0, [r4, #16]
 801121a:	4298      	cmp	r0, r3
 801121c:	d90c      	bls.n	8011238 <children_repos+0x78>
            if(t->grow_dsc[i].clamped == 0) {
 801121e:	68e0      	ldr	r0, [r4, #12]
 8011220:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8011224:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8011228:	7c05      	ldrb	r5, [r0, #16]
 801122a:	f015 0f01 	tst.w	r5, #1
 801122e:	d1ef      	bne.n	8011210 <children_repos+0x50>
                grow_value_sum += t->grow_dsc[i].grow_value;
 8011230:	68c0      	ldr	r0, [r0, #12]
 8011232:	4402      	add	r2, r0
 8011234:	b212      	sxth	r2, r2
 8011236:	e7ee      	b.n	8011216 <children_repos+0x56>
        grow_reiterate = false;
 8011238:	f04f 0c00 	mov.w	ip, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 801123c:	4660      	mov	r0, ip
 801123e:	e00d      	b.n	801125c <children_repos+0x9c>
                LV_ASSERT(grow_value_sum != 0);
 8011240:	e7fe      	b.n	8011240 <children_repos+0x80>
                t->grow_dsc[i].final_size = size_clamp;
 8011242:	68e3      	ldr	r3, [r4, #12]
 8011244:	443b      	add	r3, r7
 8011246:	f8a3 e008 	strh.w	lr, [r3, #8]
                grow_value_sum -= t->grow_dsc[i].grow_value;
 801124a:	68e3      	ldr	r3, [r4, #12]
 801124c:	443b      	add	r3, r7
 801124e:	68dd      	ldr	r5, [r3, #12]
 8011250:	1b55      	subs	r5, r2, r5
 8011252:	b22a      	sxth	r2, r5
                grow_max_size  -= t->grow_dsc[i].final_size;
 8011254:	891b      	ldrh	r3, [r3, #8]
 8011256:	1acb      	subs	r3, r1, r3
 8011258:	b219      	sxth	r1, r3
        for(i = 0; i < t->grow_item_cnt; i++) {
 801125a:	3001      	adds	r0, #1
 801125c:	6923      	ldr	r3, [r4, #16]
 801125e:	4283      	cmp	r3, r0
 8011260:	d924      	bls.n	80112ac <children_repos+0xec>
            if(t->grow_dsc[i].clamped == 0) {
 8011262:	68e5      	ldr	r5, [r4, #12]
 8011264:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8011268:	009f      	lsls	r7, r3, #2
 801126a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801126e:	7c1d      	ldrb	r5, [r3, #16]
 8011270:	f015 0f01 	tst.w	r5, #1
 8011274:	d1f1      	bne.n	801125a <children_repos+0x9a>
                LV_ASSERT(grow_value_sum != 0);
 8011276:	2a00      	cmp	r2, #0
 8011278:	d0e2      	beq.n	8011240 <children_repos+0x80>
                grow_unit = grow_max_size / grow_value_sum;
 801127a:	fb91 f5f2 	sdiv	r5, r1, r2
                lv_coord_t size = grow_unit * t->grow_dsc[i].grow_value;
 801127e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011282:	fb15 f50e 	smulbb	r5, r5, lr
 8011286:	b22d      	sxth	r5, r5
                lv_coord_t size_clamp = LV_CLAMP(t->grow_dsc[i].min_size, size, t->grow_dsc[i].max_size);
 8011288:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 801128c:	45ae      	cmp	lr, r5
 801128e:	bfa8      	it	ge
 8011290:	46ae      	movge	lr, r5
 8011292:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8011296:	45c6      	cmp	lr, r8
 8011298:	bfb8      	it	lt
 801129a:	46c6      	movlt	lr, r8
                if(size_clamp != size) {
 801129c:	4575      	cmp	r5, lr
 801129e:	d0d0      	beq.n	8011242 <children_repos+0x82>
                    t->grow_dsc[i].clamped = 1;
 80112a0:	7c1d      	ldrb	r5, [r3, #16]
 80112a2:	f045 0501 	orr.w	r5, r5, #1
 80112a6:	741d      	strb	r5, [r3, #16]
                    grow_reiterate = true;
 80112a8:	46b4      	mov	ip, r6
 80112aa:	e7ca      	b.n	8011242 <children_repos+0x82>
 80112ac:	4666      	mov	r6, ip
    while(grow_reiterate) {
 80112ae:	b136      	cbz	r6, 80112be <children_repos+0xfe>
        lv_coord_t grow_max_size = t->track_main_size - t->track_fix_main_size;
 80112b0:	8861      	ldrh	r1, [r4, #2]
 80112b2:	88a3      	ldrh	r3, [r4, #4]
 80112b4:	1ac9      	subs	r1, r1, r3
 80112b6:	b209      	sxth	r1, r1
        lv_coord_t grow_value_sum = 0;
 80112b8:	2200      	movs	r2, #0
        for(i = 0; i < t->grow_item_cnt; i++) {
 80112ba:	4613      	mov	r3, r2
 80112bc:	e7ac      	b.n	8011218 <children_repos+0x58>
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80112be:	2216      	movs	r2, #22
 80112c0:	2100      	movs	r1, #0
 80112c2:	9803      	ldr	r0, [sp, #12]
 80112c4:	f00b fa16 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80112c8:	b2c5      	uxtb	r5, r0
 80112ca:	950c      	str	r5, [sp, #48]	@ 0x30
    lv_coord_t main_pos = 0;
 80112cc:	2300      	movs	r3, #0
 80112ce:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
    lv_coord_t place_gap = 0;
 80112d2:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    place_content(f->main_place, max_main_size, t->track_main_size, t->item_cnt, &main_pos, &place_gap);
 80112d6:	ab11      	add	r3, sp, #68	@ 0x44
 80112d8:	9301      	str	r3, [sp, #4]
 80112da:	f10d 0346 	add.w	r3, sp, #70	@ 0x46
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80112e4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80112e8:	f9bd 1078 	ldrsh.w	r1, [sp, #120]	@ 0x78
 80112ec:	f89a 0000 	ldrb.w	r0, [sl]
 80112f0:	f7ff fdc1 	bl	8010e76 <place_content>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 80112f4:	f89a 3003 	ldrb.w	r3, [sl, #3]
 80112f8:	f013 0f01 	tst.w	r3, #1
 80112fc:	d001      	beq.n	8011302 <children_repos+0x142>
 80112fe:	2d01      	cmp	r5, #1
 8011300:	d005      	beq.n	801130e <children_repos+0x14e>
    lv_obj_t * item = lv_obj_get_child(cont, item_first_id);
 8011302:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011304:	9803      	ldr	r0, [sp, #12]
 8011306:	f00b ff5f 	bl	801d1c8 <lv_obj_get_child>
 801130a:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 801130c:	e0db      	b.n	80114c6 <children_repos+0x306>
    if(f->row && rtl) main_pos += lv_obj_get_content_width(cont);
 801130e:	9803      	ldr	r0, [sp, #12]
 8011310:	f008 f9f8 	bl	8019704 <lv_obj_get_content_width>
 8011314:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8011318:	fa13 f380 	uxtah	r3, r3, r0
 801131c:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 8011320:	e7ef      	b.n	8011302 <children_repos+0x142>
            item = get_next_item(cont, f->rev, &item_first_id);
 8011322:	f89a 1003 	ldrb.w	r1, [sl, #3]
 8011326:	aa0d      	add	r2, sp, #52	@ 0x34
 8011328:	f3c1 0180 	ubfx	r1, r1, #2, #1
 801132c:	9803      	ldr	r0, [sp, #12]
 801132e:	f7ff fdf4 	bl	8010f1a <get_next_item>
 8011332:	4605      	mov	r5, r0
            continue;
 8011334:	e0c7      	b.n	80114c6 <children_repos+0x306>
                    s = t->grow_dsc[i].final_size;
 8011336:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
                    break;
 801133a:	e00f      	b.n	801135c <children_repos+0x19c>
            for(i = 0; i < t->grow_item_cnt; i++) {
 801133c:	2300      	movs	r3, #0
 801133e:	6922      	ldr	r2, [r4, #16]
 8011340:	429a      	cmp	r2, r3
 8011342:	d90a      	bls.n	801135a <children_repos+0x19a>
                if(t->grow_dsc[i].item == item) {
 8011344:	68e2      	ldr	r2, [r4, #12]
 8011346:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801134a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801134e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8011352:	42aa      	cmp	r2, r5
 8011354:	d0ef      	beq.n	8011336 <children_repos+0x176>
            for(i = 0; i < t->grow_item_cnt; i++) {
 8011356:	3301      	adds	r3, #1
 8011358:	e7f1      	b.n	801133e <children_repos+0x17e>
            lv_coord_t s = 0;
 801135a:	2700      	movs	r7, #0
            if(f->row) {
 801135c:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8011360:	f013 0f01 	tst.w	r3, #1
 8011364:	d039      	beq.n	80113da <children_repos+0x21a>
                item->w_layout = 1;
 8011366:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801136a:	f043 0308 	orr.w	r3, r3, #8
 801136e:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
                item->h_layout = 0;
 8011372:	b2db      	uxtb	r3, r3
 8011374:	f023 0304 	bic.w	r3, r3, #4
 8011378:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
            if(s != area_get_main_size(&item->coords)) {
 801137c:	f105 0614 	add.w	r6, r5, #20
 8011380:	4630      	mov	r0, r6
 8011382:	9b05      	ldr	r3, [sp, #20]
 8011384:	4798      	blx	r3
 8011386:	42b8      	cmp	r0, r7
 8011388:	f000 80c1 	beq.w	801150e <children_repos+0x34e>
                lv_obj_invalidate(item);
 801138c:	4628      	mov	r0, r5
 801138e:	f008 fd8a 	bl	8019ea6 <lv_obj_invalidate>
    dest->x1 = src->x1;
 8011392:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8011396:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    dest->y1 = src->y1;
 801139a:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801139e:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    dest->x2 = src->x2;
 80113a2:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 80113a6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
    dest->y2 = src->y2;
 80113aa:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 80113ae:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
                area_set_main_size(&item->coords, s);
 80113b2:	4639      	mov	r1, r7
 80113b4:	4630      	mov	r0, r6
 80113b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113b8:	4798      	blx	r3
                lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 80113ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80113bc:	2129      	movs	r1, #41	@ 0x29
 80113be:	4628      	mov	r0, r5
 80113c0:	f7ff fc82 	bl	8010cc8 <lv_event_send>
                lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 80113c4:	4628      	mov	r0, r5
 80113c6:	f00b fed5 	bl	801d174 <lv_obj_get_parent>
 80113ca:	462a      	mov	r2, r5
 80113cc:	2122      	movs	r1, #34	@ 0x22
 80113ce:	f7ff fc7b 	bl	8010cc8 <lv_event_send>
                lv_obj_invalidate(item);
 80113d2:	4628      	mov	r0, r5
 80113d4:	f008 fd67 	bl	8019ea6 <lv_obj_invalidate>
 80113d8:	e099      	b.n	801150e <children_repos+0x34e>
                item->h_layout = 1;
 80113da:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 80113de:	f043 0304 	orr.w	r3, r3, #4
 80113e2:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
                item->w_layout = 0;
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	f023 0308 	bic.w	r3, r3, #8
 80113ec:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
 80113f0:	e7c4      	b.n	801137c <children_repos+0x1bc>
                cross_pos = t->track_cross_size - area_get_cross_size(&item->coords);
 80113f2:	8826      	ldrh	r6, [r4, #0]
 80113f4:	f105 0014 	add.w	r0, r5, #20
 80113f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113fa:	4798      	blx	r3
 80113fc:	b283      	uxth	r3, r0
 80113fe:	1af6      	subs	r6, r6, r3
 8011400:	b236      	sxth	r6, r6
                break;
 8011402:	e09a      	b.n	801153a <children_repos+0x37a>
        switch(f->cross_place) {
 8011404:	2600      	movs	r6, #0
 8011406:	e098      	b.n	801153a <children_repos+0x37a>
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 8011408:	f105 0014 	add.w	r0, r5, #20
 801140c:	9b05      	ldr	r3, [sp, #20]
 801140e:	4798      	blx	r3
 8011410:	b282      	uxth	r2, r0
 8011412:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8011416:	1a9b      	subs	r3, r3, r2
 8011418:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 801141c:	e096      	b.n	801154c <children_repos+0x38c>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801141e:	f42b 43c0 	bic.w	r3, fp, #24576	@ 0x6000
 8011422:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8011426:	f300 80ae 	bgt.w	8011586 <children_repos+0x3c6>
 801142a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801142e:	dd01      	ble.n	8011434 <children_repos+0x274>
 8011430:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8011434:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011436:	fb03 f202 	mul.w	r2, r3, r2
 801143a:	4613      	mov	r3, r2
 801143c:	4a15      	ldr	r2, [pc, #84]	@ (8011494 <children_repos+0x2d4>)
 801143e:	fb82 1203 	smull	r1, r2, r2, r3
 8011442:	17db      	asrs	r3, r3, #31
 8011444:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8011448:	fa0f fb83 	sxth.w	fp, r3
 801144c:	e09b      	b.n	8011586 <children_repos+0x3c6>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 801144e:	f429 43c0 	bic.w	r3, r9, #24576	@ 0x6000
 8011452:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8011456:	f300 809c 	bgt.w	8011592 <children_repos+0x3d2>
 801145a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801145e:	dd01      	ble.n	8011464 <children_repos+0x2a4>
 8011460:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8011464:	fb03 f000 	mul.w	r0, r3, r0
 8011468:	4b0a      	ldr	r3, [pc, #40]	@ (8011494 <children_repos+0x2d4>)
 801146a:	fb83 2300 	smull	r2, r3, r3, r0
 801146e:	17c0      	asrs	r0, r0, #31
 8011470:	ebc0 1363 	rsb	r3, r0, r3, asr #5
 8011474:	fa0f f983 	sxth.w	r9, r3
 8011478:	e08b      	b.n	8011592 <children_repos+0x3d2>
        diff_x += f->row ? main_pos : cross_pos;
 801147a:	b2b1      	uxth	r1, r6
 801147c:	e09d      	b.n	80115ba <children_repos+0x3fa>
        diff_y += f->row ? cross_pos : main_pos;
 801147e:	f8bd 6046 	ldrh.w	r6, [sp, #70]	@ 0x46
 8011482:	e0a2      	b.n	80115ca <children_repos+0x40a>
 8011484:	08001985 	.word	0x08001985
 8011488:	08010e5b 	.word	0x08010e5b
 801148c:	08001991 	.word	0x08001991
 8011490:	08010e69 	.word	0x08010e69
 8011494:	51eb851f 	.word	0x51eb851f
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 8011498:	f105 0014 	add.w	r0, r5, #20
 801149c:	9b05      	ldr	r3, [sp, #20]
 801149e:	4798      	blx	r3
 80114a0:	9b08      	ldr	r3, [sp, #32]
 80114a2:	181a      	adds	r2, r3, r0
 80114a4:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 80114a8:	4413      	add	r3, r2
 80114aa:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 80114ae:	4413      	add	r3, r2
 80114b0:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
        item = get_next_item(cont, f->rev, &item_first_id);
 80114b4:	f89a 1003 	ldrb.w	r1, [sl, #3]
 80114b8:	aa0d      	add	r2, sp, #52	@ 0x34
 80114ba:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80114be:	9803      	ldr	r0, [sp, #12]
 80114c0:	f7ff fd2b 	bl	8010f1a <get_next_item>
 80114c4:	4605      	mov	r5, r0
    while(item && item_first_id != item_last_id) {
 80114c6:	2d00      	cmp	r5, #0
 80114c8:	f000 80b4 	beq.w	8011634 <children_repos+0x474>
 80114cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114ce:	9a04      	ldr	r2, [sp, #16]
 80114d0:	4293      	cmp	r3, r2
 80114d2:	f000 80af 	beq.w	8011634 <children_repos+0x474>
        if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) {
 80114d6:	4959      	ldr	r1, [pc, #356]	@ (801163c <children_repos+0x47c>)
 80114d8:	4628      	mov	r0, r5
 80114da:	f006 ffde 	bl	801849a <lv_obj_has_flag_any>
 80114de:	2800      	cmp	r0, #0
 80114e0:	f47f af1f 	bne.w	8011322 <children_repos+0x162>
 80114e4:	4b56      	ldr	r3, [pc, #344]	@ (8011640 <children_repos+0x480>)
 80114e6:	881a      	ldrh	r2, [r3, #0]
 80114e8:	2100      	movs	r1, #0
 80114ea:	4628      	mov	r0, r5
 80114ec:	f00b f902 	bl	801c6f4 <lv_obj_get_style_prop>
        if(grow_size) {
 80114f0:	f010 0fff 	tst.w	r0, #255	@ 0xff
 80114f4:	f47f af22 	bne.w	801133c <children_repos+0x17c>
            item->w_layout = 0;
 80114f8:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 80114fc:	f023 0308 	bic.w	r3, r3, #8
 8011500:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
            item->h_layout = 0;
 8011504:	b2db      	uxtb	r3, r3
 8011506:	f023 0304 	bic.w	r3, r3, #4
 801150a:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23
        switch(f->cross_place) {
 801150e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8011512:	2b01      	cmp	r3, #1
 8011514:	f43f af6d 	beq.w	80113f2 <children_repos+0x232>
 8011518:	2b02      	cmp	r3, #2
 801151a:	f47f af73 	bne.w	8011404 <children_repos+0x244>
                cross_pos = (((t->track_cross_size + 1) & (~1)) - area_get_cross_size(&item->coords)) / 2;
 801151e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8011522:	3601      	adds	r6, #1
 8011524:	f026 0601 	bic.w	r6, r6, #1
 8011528:	f105 0014 	add.w	r0, r5, #20
 801152c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801152e:	4798      	blx	r3
 8011530:	1a36      	subs	r6, r6, r0
 8011532:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8011536:	f346 064f 	sbfx	r6, r6, #1, #16
        if(f->row && rtl) main_pos -= area_get_main_size(&item->coords);
 801153a:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801153e:	f013 0f01 	tst.w	r3, #1
 8011542:	d003      	beq.n	801154c <children_repos+0x38c>
 8011544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011546:	2b01      	cmp	r3, #1
 8011548:	f43f af5e 	beq.w	8011408 <children_repos+0x248>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801154c:	226b      	movs	r2, #107	@ 0x6b
 801154e:	2100      	movs	r1, #0
 8011550:	4628      	mov	r0, r5
 8011552:	f00b f8cf 	bl	801c6f4 <lv_obj_get_style_prop>
 8011556:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8011558:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801155c:	226c      	movs	r2, #108	@ 0x6c
 801155e:	2100      	movs	r1, #0
 8011560:	4628      	mov	r0, r5
 8011562:	f00b f8c7 	bl	801c6f4 <lv_obj_get_style_prop>
 8011566:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 8011568:	fa0f f980 	sxth.w	r9, r0
        lv_coord_t w = lv_obj_get_width(item);
 801156c:	4628      	mov	r0, r5
 801156e:	f008 f8af 	bl	80196d0 <lv_obj_get_width>
 8011572:	900b      	str	r0, [sp, #44]	@ 0x2c
        lv_coord_t h = lv_obj_get_height(item);
 8011574:	4628      	mov	r0, r5
 8011576:	f008 f8b2 	bl	80196de <lv_obj_get_height>
        if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801157a:	f408 48c0 	and.w	r8, r8, #24576	@ 0x6000
 801157e:	f5b8 5f00 	cmp.w	r8, #8192	@ 0x2000
 8011582:	f43f af4c 	beq.w	801141e <children_repos+0x25e>
        if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8011586:	f407 47c0 	and.w	r7, r7, #24576	@ 0x6000
 801158a:	f5b7 5f00 	cmp.w	r7, #8192	@ 0x2000
 801158e:	f43f af5e 	beq.w	801144e <children_repos+0x28e>
        lv_coord_t diff_x = abs_x - item->coords.x1 + tr_x;
 8011592:	8aaf      	ldrh	r7, [r5, #20]
 8011594:	9b06      	ldr	r3, [sp, #24]
 8011596:	1bdf      	subs	r7, r3, r7
 8011598:	fa1b f787 	uxtah	r7, fp, r7
 801159c:	b2bf      	uxth	r7, r7
        lv_coord_t diff_y = abs_y - item->coords.y1 + tr_y;
 801159e:	8aeb      	ldrh	r3, [r5, #22]
 80115a0:	9a07      	ldr	r2, [sp, #28]
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	fa19 f383 	uxtah	r3, r9, r3
 80115a8:	b29b      	uxth	r3, r3
        diff_x += f->row ? main_pos : cross_pos;
 80115aa:	f89a 2003 	ldrb.w	r2, [sl, #3]
 80115ae:	f012 0201 	ands.w	r2, r2, #1
 80115b2:	f43f af62 	beq.w	801147a <children_repos+0x2ba>
 80115b6:	f8bd 1046 	ldrh.w	r1, [sp, #70]	@ 0x46
 80115ba:	440f      	add	r7, r1
 80115bc:	fa1f f887 	uxth.w	r8, r7
 80115c0:	b23f      	sxth	r7, r7
        diff_y += f->row ? cross_pos : main_pos;
 80115c2:	2a00      	cmp	r2, #0
 80115c4:	f43f af5b 	beq.w	801147e <children_repos+0x2be>
 80115c8:	b2b6      	uxth	r6, r6
 80115ca:	4433      	add	r3, r6
 80115cc:	fa1f f983 	uxth.w	r9, r3
 80115d0:	b21e      	sxth	r6, r3
        if(diff_x || diff_y) {
 80115d2:	b907      	cbnz	r7, 80115d6 <children_repos+0x416>
 80115d4:	b1ce      	cbz	r6, 801160a <children_repos+0x44a>
            lv_obj_invalidate(item);
 80115d6:	4628      	mov	r0, r5
 80115d8:	f008 fc65 	bl	8019ea6 <lv_obj_invalidate>
            item->coords.x1 += diff_x;
 80115dc:	8aab      	ldrh	r3, [r5, #20]
 80115de:	4443      	add	r3, r8
 80115e0:	82ab      	strh	r3, [r5, #20]
            item->coords.x2 += diff_x;
 80115e2:	8b2b      	ldrh	r3, [r5, #24]
 80115e4:	4498      	add	r8, r3
 80115e6:	f8a5 8018 	strh.w	r8, [r5, #24]
            item->coords.y1 += diff_y;
 80115ea:	8aeb      	ldrh	r3, [r5, #22]
 80115ec:	444b      	add	r3, r9
 80115ee:	82eb      	strh	r3, [r5, #22]
            item->coords.y2 += diff_y;
 80115f0:	8b6b      	ldrh	r3, [r5, #26]
 80115f2:	4499      	add	r9, r3
 80115f4:	f8a5 901a 	strh.w	r9, [r5, #26]
            lv_obj_invalidate(item);
 80115f8:	4628      	mov	r0, r5
 80115fa:	f008 fc54 	bl	8019ea6 <lv_obj_invalidate>
            lv_obj_move_children_by(item, diff_x, diff_y, false);
 80115fe:	2300      	movs	r3, #0
 8011600:	4632      	mov	r2, r6
 8011602:	4639      	mov	r1, r7
 8011604:	4628      	mov	r0, r5
 8011606:	f008 fab9 	bl	8019b7c <lv_obj_move_children_by>
        if(!(f->row && rtl)) main_pos += area_get_main_size(&item->coords) + item_gap + place_gap;
 801160a:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801160e:	f013 0f01 	tst.w	r3, #1
 8011612:	f43f af41 	beq.w	8011498 <children_repos+0x2d8>
 8011616:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011618:	2b01      	cmp	r3, #1
 801161a:	f47f af3d 	bne.w	8011498 <children_repos+0x2d8>
        else main_pos -= item_gap + place_gap;
 801161e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8011622:	9a08      	ldr	r2, [sp, #32]
 8011624:	4413      	add	r3, r2
 8011626:	b29b      	uxth	r3, r3
 8011628:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 8011632:	e73f      	b.n	80114b4 <children_repos+0x2f4>
}
 8011634:	b013      	add	sp, #76	@ 0x4c
 8011636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163a:	bf00      	nop
 801163c:	00060001 	.word	0x00060001
 8011640:	20006654 	.word	0x20006654

08011644 <flex_update>:
{
 8011644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011648:	b095      	sub	sp, #84	@ 0x54
 801164a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_FLOW);
 801164c:	4bb1      	ldr	r3, [pc, #708]	@ (8011914 <flex_update+0x2d0>)
 801164e:	881a      	ldrh	r2, [r3, #0]
 8011650:	2100      	movs	r1, #0
 8011652:	f00b f84f 	bl	801c6f4 <lv_obj_get_style_prop>
    f.row = flow & _LV_FLEX_COLUMN ? 0 : 1;
 8011656:	f010 0f01 	tst.w	r0, #1
 801165a:	bf0c      	ite	eq
 801165c:	2201      	moveq	r2, #1
 801165e:	2200      	movne	r2, #0
 8011660:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 8011664:	f362 0300 	bfi	r3, r2, #0, #1
 8011668:	f88d 304f 	strb.w	r3, [sp, #79]	@ 0x4f
    f.wrap = flow & _LV_FLEX_WRAP ? 1 : 0;
 801166c:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8011670:	b2db      	uxtb	r3, r3
 8011672:	f362 0341 	bfi	r3, r2, #1, #1
 8011676:	f88d 304f 	strb.w	r3, [sp, #79]	@ 0x4f
    f.rev = flow & _LV_FLEX_REVERSE ? 1 : 0;
 801167a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 801167e:	b2db      	uxtb	r3, r3
 8011680:	f360 0382 	bfi	r3, r0, #2, #1
 8011684:	f88d 304f 	strb.w	r3, [sp, #79]	@ 0x4f
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_MAIN_PLACE);
 8011688:	4ba3      	ldr	r3, [pc, #652]	@ (8011918 <flex_update+0x2d4>)
 801168a:	881a      	ldrh	r2, [r3, #0]
 801168c:	2100      	movs	r1, #0
 801168e:	4620      	mov	r0, r4
 8011690:	f00b f830 	bl	801c6f4 <lv_obj_get_style_prop>
    f.main_place = lv_obj_get_style_flex_main_place(cont, LV_PART_MAIN);
 8011694:	f88d 004c 	strb.w	r0, [sp, #76]	@ 0x4c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_CROSS_PLACE);
 8011698:	4ba0      	ldr	r3, [pc, #640]	@ (801191c <flex_update+0x2d8>)
 801169a:	881a      	ldrh	r2, [r3, #0]
 801169c:	2100      	movs	r1, #0
 801169e:	4620      	mov	r0, r4
 80116a0:	f00b f828 	bl	801c6f4 <lv_obj_get_style_prop>
    f.cross_place = lv_obj_get_style_flex_cross_place(cont, LV_PART_MAIN);
 80116a4:	f88d 004d 	strb.w	r0, [sp, #77]	@ 0x4d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_FLEX_TRACK_PLACE);
 80116a8:	4b9d      	ldr	r3, [pc, #628]	@ (8011920 <flex_update+0x2dc>)
 80116aa:	881a      	ldrh	r2, [r3, #0]
 80116ac:	2100      	movs	r1, #0
 80116ae:	4620      	mov	r0, r4
 80116b0:	f00b f820 	bl	801c6f4 <lv_obj_get_style_prop>
    f.track_place = lv_obj_get_style_flex_track_place(cont, LV_PART_MAIN);
 80116b4:	f88d 004e 	strb.w	r0, [sp, #78]	@ 0x4e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80116b8:	2216      	movs	r2, #22
 80116ba:	2100      	movs	r1, #0
 80116bc:	4620      	mov	r0, r4
 80116be:	f00b f819 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80116c2:	fa5f f880 	uxtb.w	r8, r0
    lv_coord_t track_gap = !f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 80116c6:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80116ca:	f013 0f01 	tst.w	r3, #1
 80116ce:	f040 8084 	bne.w	80117da <flex_update+0x196>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80116d2:	2215      	movs	r2, #21
 80116d4:	2100      	movs	r1, #0
 80116d6:	4620      	mov	r0, r4
 80116d8:	f00b f80c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80116dc:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t item_gap = f.row ? lv_obj_get_style_pad_column(cont, LV_PART_MAIN) : lv_obj_get_style_pad_row(cont,
 80116e0:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80116e4:	f013 0f01 	tst.w	r3, #1
 80116e8:	d07f      	beq.n	80117ea <flex_update+0x1a6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 80116ea:	2215      	movs	r2, #21
 80116ec:	2100      	movs	r1, #0
 80116ee:	4620      	mov	r0, r4
 80116f0:	f00b f800 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80116f4:	b206      	sxth	r6, r0
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 80116f6:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80116fa:	f013 0f01 	tst.w	r3, #1
 80116fe:	d07b      	beq.n	80117f8 <flex_update+0x1b4>
 8011700:	4620      	mov	r0, r4
 8011702:	f007 ffff 	bl	8019704 <lv_obj_get_content_width>
 8011706:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8011708:	2232      	movs	r2, #50	@ 0x32
 801170a:	2100      	movs	r1, #0
 801170c:	4620      	mov	r0, r4
 801170e:	f00a fff1 	bl	801c6f4 <lv_obj_get_style_prop>
 8011712:	4681      	mov	r9, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8011714:	8ae5      	ldrh	r5, [r4, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8011716:	2210      	movs	r2, #16
 8011718:	2100      	movs	r1, #0
 801171a:	4620      	mov	r0, r4
 801171c:	f00a ffea 	bl	801c6f4 <lv_obj_get_style_prop>
 8011720:	fa15 f580 	uxtah	r5, r5, r0
                                                                  LV_PART_MAIN) + border_width - lv_obj_get_scroll_y(cont);
 8011724:	fa1f f989 	uxth.w	r9, r9
 8011728:	fa19 f585 	uxtah	r5, r9, r5
 801172c:	b2ad      	uxth	r5, r5
 801172e:	4620      	mov	r0, r4
 8011730:	f009 fb62 	bl	801adf8 <lv_obj_get_scroll_y>
 8011734:	b280      	uxth	r0, r0
 8011736:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_y = cont->coords.y1 + lv_obj_get_style_pad_top(cont,
 8011738:	f8ad 504a 	strh.w	r5, [sp, #74]	@ 0x4a
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 801173c:	8aa5      	ldrh	r5, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801173e:	2212      	movs	r2, #18
 8011740:	2100      	movs	r1, #0
 8011742:	4620      	mov	r0, r4
 8011744:	f00a ffd6 	bl	801c6f4 <lv_obj_get_style_prop>
 8011748:	fa15 f580 	uxtah	r5, r5, r0
                                                                   LV_PART_MAIN) + border_width - lv_obj_get_scroll_x(cont);
 801174c:	fa19 f585 	uxtah	r5, r9, r5
 8011750:	b2ad      	uxth	r5, r5
 8011752:	4620      	mov	r0, r4
 8011754:	f009 fb48 	bl	801ade8 <lv_obj_get_scroll_x>
 8011758:	b280      	uxth	r0, r0
 801175a:	1a2d      	subs	r5, r5, r0
    lv_coord_t abs_x = cont->coords.x1 + lv_obj_get_style_pad_left(cont,
 801175c:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
    lv_flex_align_t track_cross_place = f.track_place;
 8011760:	f89d 304e 	ldrb.w	r3, [sp, #78]	@ 0x4e
 8011764:	9307      	str	r3, [sp, #28]
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8011766:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 801176a:	f013 0f01 	tst.w	r3, #1
 801176e:	d048      	beq.n	8011802 <flex_update+0x1be>
 8011770:	f10d 094a 	add.w	r9, sp, #74	@ 0x4a
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8011774:	2201      	movs	r2, #1
 8011776:	2100      	movs	r1, #0
 8011778:	4620      	mov	r0, r4
 801177a:	f00a ffbb 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801177e:	b203      	sxth	r3, r0
 8011780:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8011782:	2204      	movs	r2, #4
 8011784:	2100      	movs	r1, #0
 8011786:	4620      	mov	r0, r4
 8011788:	f00a ffb4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801178c:	b203      	sxth	r3, r0
 801178e:	4618      	mov	r0, r3
 8011790:	9309      	str	r3, [sp, #36]	@ 0x24
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8011792:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 8011796:	f013 0201 	ands.w	r2, r3, #1
 801179a:	d003      	beq.n	80117a4 <flex_update+0x160>
 801179c:	f242 71d1 	movw	r1, #10193	@ 0x27d1
 80117a0:	4288      	cmp	r0, r1
 80117a2:	d031      	beq.n	8011808 <flex_update+0x1c4>
 80117a4:	b922      	cbnz	r2, 80117b0 <flex_update+0x16c>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 80117a6:	f242 71d1 	movw	r1, #10193	@ 0x27d1
 80117aa:	9808      	ldr	r0, [sp, #32]
 80117ac:	4288      	cmp	r0, r1
 80117ae:	d033      	beq.n	8011818 <flex_update+0x1d4>
    if(rtl && !f.row) {
 80117b0:	f1b8 0f01 	cmp.w	r8, #1
 80117b4:	d038      	beq.n	8011828 <flex_update+0x1e4>
    lv_coord_t gap = 0;
 80117b6:	2200      	movs	r2, #0
 80117b8:	f8ad 2046 	strh.w	r2, [sp, #70]	@ 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 80117bc:	9a07      	ldr	r2, [sp, #28]
 80117be:	2a00      	cmp	r2, #0
 80117c0:	f000 8095 	beq.w	80118ee <flex_update+0x2aa>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80117c4:	f013 0f04 	tst.w	r3, #4
 80117c8:	f000 808a 	beq.w	80118e0 <flex_update+0x29c>
 80117cc:	68a3      	ldr	r3, [r4, #8]
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	3a01      	subs	r2, #1
 80117d2:	f04f 0b00 	mov.w	fp, #0
 80117d6:	465d      	mov	r5, fp
 80117d8:	e04d      	b.n	8011876 <flex_update+0x232>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80117da:	2214      	movs	r2, #20
 80117dc:	2100      	movs	r1, #0
 80117de:	4620      	mov	r0, r4
 80117e0:	f00a ff88 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80117e4:	fa0f fa80 	sxth.w	sl, r0
 80117e8:	e77a      	b.n	80116e0 <flex_update+0x9c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80117ea:	2214      	movs	r2, #20
 80117ec:	2100      	movs	r1, #0
 80117ee:	4620      	mov	r0, r4
 80117f0:	f00a ff80 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80117f4:	b206      	sxth	r6, r0
 80117f6:	e77e      	b.n	80116f6 <flex_update+0xb2>
    lv_coord_t max_main_size = (f.row ? lv_obj_get_content_width(cont) : lv_obj_get_content_height(cont));
 80117f8:	4620      	mov	r0, r4
 80117fa:	f007 ffa3 	bl	8019744 <lv_obj_get_content_height>
 80117fe:	4607      	mov	r7, r0
 8011800:	e782      	b.n	8011708 <flex_update+0xc4>
    lv_coord_t * cross_pos = (f.row ? &abs_y : &abs_x);
 8011802:	f10d 0948 	add.w	r9, sp, #72	@ 0x48
 8011806:	e7b5      	b.n	8011774 <flex_update+0x130>
    if((f.row && h_set == LV_SIZE_CONTENT && cont->h_layout == 0) ||
 8011808:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 801180c:	f011 0f04 	tst.w	r1, #4
 8011810:	d1c8      	bne.n	80117a4 <flex_update+0x160>
        track_cross_place = LV_FLEX_ALIGN_START;
 8011812:	2100      	movs	r1, #0
 8011814:	9107      	str	r1, [sp, #28]
 8011816:	e7cb      	b.n	80117b0 <flex_update+0x16c>
       (!f.row && w_set == LV_SIZE_CONTENT && cont->w_layout == 0)) {
 8011818:	f894 1023 	ldrb.w	r1, [r4, #35]	@ 0x23
 801181c:	f011 0f08 	tst.w	r1, #8
 8011820:	d1c6      	bne.n	80117b0 <flex_update+0x16c>
        track_cross_place = LV_FLEX_ALIGN_START;
 8011822:	2100      	movs	r1, #0
 8011824:	9107      	str	r1, [sp, #28]
 8011826:	e7c3      	b.n	80117b0 <flex_update+0x16c>
    if(rtl && !f.row) {
 8011828:	2a00      	cmp	r2, #0
 801182a:	d1c4      	bne.n	80117b6 <flex_update+0x172>
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 801182c:	9a07      	ldr	r2, [sp, #28]
 801182e:	b922      	cbnz	r2, 801183a <flex_update+0x1f6>
    lv_coord_t gap = 0;
 8011830:	f8ad 2046 	strh.w	r2, [sp, #70]	@ 0x46
        if(track_cross_place == LV_FLEX_ALIGN_START) track_cross_place = LV_FLEX_ALIGN_END;
 8011834:	f8cd 801c 	str.w	r8, [sp, #28]
 8011838:	e7c4      	b.n	80117c4 <flex_update+0x180>
        else if(track_cross_place == LV_FLEX_ALIGN_END) track_cross_place = LV_FLEX_ALIGN_START;
 801183a:	9a07      	ldr	r2, [sp, #28]
 801183c:	2a01      	cmp	r2, #1
 801183e:	d1ba      	bne.n	80117b6 <flex_update+0x172>
    lv_coord_t gap = 0;
 8011840:	2500      	movs	r5, #0
 8011842:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
    if(track_cross_place != LV_FLEX_ALIGN_START) {
 8011846:	e036      	b.n	80118b6 <flex_update+0x272>
            t.grow_dsc_calc = 0;
 8011848:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 801184c:	f023 0301 	bic.w	r3, r3, #1
 8011850:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
            next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 8011854:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	9600      	str	r6, [sp, #0]
 801185a:	463b      	mov	r3, r7
 801185c:	a913      	add	r1, sp, #76	@ 0x4c
 801185e:	4620      	mov	r0, r4
 8011860:	f7ff fb76 	bl	8010f50 <find_track_end>
 8011864:	4602      	mov	r2, r0
            total_track_cross_size += t.track_cross_size + track_gap;
 8011866:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801186a:	4453      	add	r3, sl
 801186c:	fa15 f383 	uxtah	r3, r5, r3
 8011870:	b21d      	sxth	r5, r3
            track_cnt++;
 8011872:	f10b 0b01 	add.w	fp, fp, #1
        while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8011876:	68a3      	ldr	r3, [r4, #8]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	4293      	cmp	r3, r2
 801187c:	dd01      	ble.n	8011882 <flex_update+0x23e>
 801187e:	2a00      	cmp	r2, #0
 8011880:	dae2      	bge.n	8011848 <flex_update+0x204>
        if(track_cnt) total_track_cross_size -= track_gap;   /*No gap after the last track*/
 8011882:	f1bb 0f00 	cmp.w	fp, #0
 8011886:	d002      	beq.n	801188e <flex_update+0x24a>
 8011888:	eba5 050a 	sub.w	r5, r5, sl
 801188c:	b22d      	sxth	r5, r5
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 801188e:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 8011892:	f013 0f01 	tst.w	r3, #1
 8011896:	d025      	beq.n	80118e4 <flex_update+0x2a0>
 8011898:	4620      	mov	r0, r4
 801189a:	f007 ff53 	bl	8019744 <lv_obj_get_content_height>
 801189e:	4601      	mov	r1, r0
        place_content(track_cross_place, max_cross_size, total_track_cross_size, track_cnt, cross_pos, &gap);
 80118a0:	f10d 0346 	add.w	r3, sp, #70	@ 0x46
 80118a4:	9301      	str	r3, [sp, #4]
 80118a6:	f8cd 9000 	str.w	r9, [sp]
 80118aa:	fa0f f38b 	sxth.w	r3, fp
 80118ae:	462a      	mov	r2, r5
 80118b0:	9807      	ldr	r0, [sp, #28]
 80118b2:	f7ff fae0 	bl	8010e76 <place_content>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80118b6:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80118ba:	f013 0f04 	tst.w	r3, #4
 80118be:	d018      	beq.n	80118f2 <flex_update+0x2ae>
 80118c0:	68a2      	ldr	r2, [r4, #8]
 80118c2:	6852      	ldr	r2, [r2, #4]
 80118c4:	f102 3bff 	add.w	fp, r2, #4294967295	@ 0xffffffff
    if(rtl && !f.row) {
 80118c8:	f1b8 0f01 	cmp.w	r8, #1
 80118cc:	d138      	bne.n	8011940 <flex_update+0x2fc>
 80118ce:	f013 0f01 	tst.w	r3, #1
 80118d2:	d135      	bne.n	8011940 <flex_update+0x2fc>
        *cross_pos += total_track_cross_size;
 80118d4:	f8b9 3000 	ldrh.w	r3, [r9]
 80118d8:	442b      	add	r3, r5
 80118da:	f8a9 3000 	strh.w	r3, [r9]
 80118de:	e02f      	b.n	8011940 <flex_update+0x2fc>
        track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80118e0:	2200      	movs	r2, #0
 80118e2:	e776      	b.n	80117d2 <flex_update+0x18e>
        lv_coord_t max_cross_size = (f.row ? lv_obj_get_content_height(cont) : lv_obj_get_content_width(cont));
 80118e4:	4620      	mov	r0, r4
 80118e6:	f007 ff0d 	bl	8019704 <lv_obj_get_content_width>
 80118ea:	4601      	mov	r1, r0
 80118ec:	e7d8      	b.n	80118a0 <flex_update+0x25c>
    lv_coord_t total_track_cross_size = 0;
 80118ee:	2500      	movs	r5, #0
 80118f0:	e7e1      	b.n	80118b6 <flex_update+0x272>
    track_first_item = f.rev ? cont->spec_attr->child_cnt - 1 : 0;
 80118f2:	f04f 0b00 	mov.w	fp, #0
 80118f6:	e7e7      	b.n	80118c8 <flex_update+0x284>
        if(rtl && !f.row) {
 80118f8:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80118fc:	f013 0f01 	tst.w	r3, #1
 8011900:	d138      	bne.n	8011974 <flex_update+0x330>
            *cross_pos -= t.track_cross_size;
 8011902:	f8b9 3000 	ldrh.w	r3, [r9]
 8011906:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801190a:	1a9b      	subs	r3, r3, r2
 801190c:	f8a9 3000 	strh.w	r3, [r9]
 8011910:	e030      	b.n	8011974 <flex_update+0x330>
 8011912:	bf00      	nop
 8011914:	2000665c 	.word	0x2000665c
 8011918:	2000665a 	.word	0x2000665a
 801191c:	20006658 	.word	0x20006658
 8011920:	20006656 	.word	0x20006656
            *cross_pos += t.track_cross_size + gap + track_gap;
 8011924:	f8b9 3000 	ldrh.w	r3, [r9]
 8011928:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801192c:	f8bd 1046 	ldrh.w	r1, [sp, #70]	@ 0x46
 8011930:	440a      	add	r2, r1
 8011932:	fa1a f282 	uxtah	r2, sl, r2
 8011936:	fa13 f282 	uxtah	r2, r3, r2
 801193a:	f8a9 2000 	strh.w	r2, [r9]
        track_first_item = next_track_first_item;
 801193e:	46ab      	mov	fp, r5
    while(track_first_item < (int32_t)cont->spec_attr->child_cnt && track_first_item >= 0) {
 8011940:	68a3      	ldr	r3, [r4, #8]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	455b      	cmp	r3, fp
 8011946:	dd3c      	ble.n	80119c2 <flex_update+0x37e>
 8011948:	f1bb 0f00 	cmp.w	fp, #0
 801194c:	db39      	blt.n	80119c2 <flex_update+0x37e>
        t.grow_dsc_calc = 1;
 801194e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8011952:	f043 0301 	orr.w	r3, r3, #1
 8011956:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
        next_track_first_item = find_track_end(cont, &f, track_first_item, max_main_size, item_gap, &t);
 801195a:	ab0b      	add	r3, sp, #44	@ 0x2c
 801195c:	9301      	str	r3, [sp, #4]
 801195e:	9600      	str	r6, [sp, #0]
 8011960:	463b      	mov	r3, r7
 8011962:	465a      	mov	r2, fp
 8011964:	a913      	add	r1, sp, #76	@ 0x4c
 8011966:	4620      	mov	r0, r4
 8011968:	f7ff faf2 	bl	8010f50 <find_track_end>
 801196c:	4605      	mov	r5, r0
        if(rtl && !f.row) {
 801196e:	f1b8 0f01 	cmp.w	r8, #1
 8011972:	d0c1      	beq.n	80118f8 <flex_update+0x2b4>
        children_repos(cont, &f, track_first_item, next_track_first_item, abs_x, abs_y, max_main_size, item_gap, &t);
 8011974:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011976:	9304      	str	r3, [sp, #16]
 8011978:	9603      	str	r6, [sp, #12]
 801197a:	9702      	str	r7, [sp, #8]
 801197c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	@ 0x4a
 8011980:	9301      	str	r3, [sp, #4]
 8011982:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	@ 0x48
 8011986:	9300      	str	r3, [sp, #0]
 8011988:	462b      	mov	r3, r5
 801198a:	465a      	mov	r2, fp
 801198c:	a913      	add	r1, sp, #76	@ 0x4c
 801198e:	4620      	mov	r0, r4
 8011990:	f7ff fc16 	bl	80111c0 <children_repos>
        lv_mem_buf_release(t.grow_dsc);
 8011994:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011996:	f005 f873 	bl	8016a80 <lv_mem_buf_release>
        t.grow_dsc = NULL;
 801199a:	2300      	movs	r3, #0
 801199c:	930e      	str	r3, [sp, #56]	@ 0x38
        if(rtl && !f.row) {
 801199e:	f1b8 0f01 	cmp.w	r8, #1
 80119a2:	d1bf      	bne.n	8011924 <flex_update+0x2e0>
 80119a4:	f89d 304f 	ldrb.w	r3, [sp, #79]	@ 0x4f
 80119a8:	f013 0f01 	tst.w	r3, #1
 80119ac:	d1ba      	bne.n	8011924 <flex_update+0x2e0>
            *cross_pos -= gap + track_gap;
 80119ae:	f8b9 2000 	ldrh.w	r2, [r9]
 80119b2:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 80119b6:	4453      	add	r3, sl
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	f8a9 3000 	strh.w	r3, [r9]
 80119c0:	e7bd      	b.n	801193e <flex_update+0x2fa>
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 80119c2:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 80119c6:	9a08      	ldr	r2, [sp, #32]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d00a      	beq.n	80119e2 <flex_update+0x39e>
 80119cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d007      	beq.n	80119e2 <flex_update+0x39e>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 80119d2:	2200      	movs	r2, #0
 80119d4:	212b      	movs	r1, #43	@ 0x2b
 80119d6:	4620      	mov	r0, r4
 80119d8:	f7ff f976 	bl	8010cc8 <lv_event_send>
}
 80119dc:	b015      	add	sp, #84	@ 0x54
 80119de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refr_size(cont);
 80119e2:	4620      	mov	r0, r4
 80119e4:	f008 fd60 	bl	801a4a8 <lv_obj_refr_size>
 80119e8:	e7f3      	b.n	80119d2 <flex_update+0x38e>
 80119ea:	bf00      	nop

080119ec <lv_flex_init>:
{
 80119ec:	b508      	push	{r3, lr}
    LV_LAYOUT_FLEX = lv_layout_register(flex_update, NULL);
 80119ee:	2100      	movs	r1, #0
 80119f0:	480f      	ldr	r0, [pc, #60]	@ (8011a30 <lv_flex_init+0x44>)
 80119f2:	f007 fdeb 	bl	80195cc <lv_layout_register>
 80119f6:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <lv_flex_init+0x48>)
 80119f8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_FLOW = lv_style_register_prop(LV_STYLE_PROP_FLAG_NONE);
 80119fa:	2000      	movs	r0, #0
 80119fc:	f00f f99c 	bl	8020d38 <lv_style_register_prop>
 8011a00:	4b0d      	ldr	r3, [pc, #52]	@ (8011a38 <lv_flex_init+0x4c>)
 8011a02:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_MAIN_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8011a04:	2004      	movs	r0, #4
 8011a06:	f00f f997 	bl	8020d38 <lv_style_register_prop>
 8011a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011a3c <lv_flex_init+0x50>)
 8011a0c:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_CROSS_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8011a0e:	2004      	movs	r0, #4
 8011a10:	f00f f992 	bl	8020d38 <lv_style_register_prop>
 8011a14:	4b0a      	ldr	r3, [pc, #40]	@ (8011a40 <lv_flex_init+0x54>)
 8011a16:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_TRACK_PLACE = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8011a18:	2004      	movs	r0, #4
 8011a1a:	f00f f98d 	bl	8020d38 <lv_style_register_prop>
 8011a1e:	4b09      	ldr	r3, [pc, #36]	@ (8011a44 <lv_flex_init+0x58>)
 8011a20:	8018      	strh	r0, [r3, #0]
    LV_STYLE_FLEX_GROW = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8011a22:	2004      	movs	r0, #4
 8011a24:	f00f f988 	bl	8020d38 <lv_style_register_prop>
 8011a28:	4b07      	ldr	r3, [pc, #28]	@ (8011a48 <lv_flex_init+0x5c>)
 8011a2a:	8018      	strh	r0, [r3, #0]
}
 8011a2c:	bd08      	pop	{r3, pc}
 8011a2e:	bf00      	nop
 8011a30:	08011645 	.word	0x08011645
 8011a34:	2000665e 	.word	0x2000665e
 8011a38:	2000665c 	.word	0x2000665c
 8011a3c:	2000665a 	.word	0x2000665a
 8011a40:	20006658 	.word	0x20006658
 8011a44:	20006656 	.word	0x20006656
 8011a48:	20006654 	.word	0x20006654

08011a4c <lv_obj_set_style_flex_flow>:
{
 8011a4c:	b508      	push	{r3, lr}
 8011a4e:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_FLOW, v, selector);
 8011a50:	460a      	mov	r2, r1
 8011a52:	4902      	ldr	r1, [pc, #8]	@ (8011a5c <lv_obj_set_style_flex_flow+0x10>)
 8011a54:	8809      	ldrh	r1, [r1, #0]
 8011a56:	f00b f8b7 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 8011a5a:	bd08      	pop	{r3, pc}
 8011a5c:	2000665c 	.word	0x2000665c

08011a60 <lv_obj_set_flex_flow>:
{
 8011a60:	b510      	push	{r4, lr}
 8011a62:	4604      	mov	r4, r0
    lv_obj_set_style_flex_flow(obj, flow, 0);
 8011a64:	2200      	movs	r2, #0
 8011a66:	f7ff fff1 	bl	8011a4c <lv_obj_set_style_flex_flow>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4b02      	ldr	r3, [pc, #8]	@ (8011a78 <lv_obj_set_flex_flow+0x18>)
 8011a6e:	8819      	ldrh	r1, [r3, #0]
 8011a70:	4620      	mov	r0, r4
 8011a72:	f00b fb71 	bl	801d158 <lv_obj_set_style_layout>
}
 8011a76:	bd10      	pop	{r4, pc}
 8011a78:	2000665e 	.word	0x2000665e

08011a7c <lv_obj_set_style_flex_main_place>:
{
 8011a7c:	b508      	push	{r3, lr}
 8011a7e:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_MAIN_PLACE, v, selector);
 8011a80:	460a      	mov	r2, r1
 8011a82:	4902      	ldr	r1, [pc, #8]	@ (8011a8c <lv_obj_set_style_flex_main_place+0x10>)
 8011a84:	8809      	ldrh	r1, [r1, #0]
 8011a86:	f00b f89f 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 8011a8a:	bd08      	pop	{r3, pc}
 8011a8c:	2000665a 	.word	0x2000665a

08011a90 <lv_obj_set_style_flex_cross_place>:
{
 8011a90:	b508      	push	{r3, lr}
 8011a92:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_CROSS_PLACE, v, selector);
 8011a94:	460a      	mov	r2, r1
 8011a96:	4902      	ldr	r1, [pc, #8]	@ (8011aa0 <lv_obj_set_style_flex_cross_place+0x10>)
 8011a98:	8809      	ldrh	r1, [r1, #0]
 8011a9a:	f00b f895 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 8011a9e:	bd08      	pop	{r3, pc}
 8011aa0:	20006658 	.word	0x20006658

08011aa4 <lv_obj_set_style_flex_track_place>:
{
 8011aa4:	b508      	push	{r3, lr}
 8011aa6:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_TRACK_PLACE, v, selector);
 8011aa8:	460a      	mov	r2, r1
 8011aaa:	4902      	ldr	r1, [pc, #8]	@ (8011ab4 <lv_obj_set_style_flex_track_place+0x10>)
 8011aac:	8809      	ldrh	r1, [r1, #0]
 8011aae:	f00b f88b 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 8011ab2:	bd08      	pop	{r3, pc}
 8011ab4:	20006656 	.word	0x20006656

08011ab8 <lv_obj_set_flex_align>:
{
 8011ab8:	b570      	push	{r4, r5, r6, lr}
 8011aba:	4604      	mov	r4, r0
 8011abc:	4616      	mov	r6, r2
 8011abe:	461d      	mov	r5, r3
    lv_obj_set_style_flex_main_place(obj, main_place, 0);
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f7ff ffdb 	bl	8011a7c <lv_obj_set_style_flex_main_place>
    lv_obj_set_style_flex_cross_place(obj, cross_place, 0);
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	4631      	mov	r1, r6
 8011aca:	4620      	mov	r0, r4
 8011acc:	f7ff ffe0 	bl	8011a90 <lv_obj_set_style_flex_cross_place>
    lv_obj_set_style_flex_track_place(obj, track_place, 0);
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f7ff ffe5 	bl	8011aa4 <lv_obj_set_style_flex_track_place>
    lv_obj_set_style_layout(obj, LV_LAYOUT_FLEX, 0);
 8011ada:	2200      	movs	r2, #0
 8011adc:	4b02      	ldr	r3, [pc, #8]	@ (8011ae8 <lv_obj_set_flex_align+0x30>)
 8011ade:	8819      	ldrh	r1, [r3, #0]
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f00b fb39 	bl	801d158 <lv_obj_set_style_layout>
}
 8011ae6:	bd70      	pop	{r4, r5, r6, pc}
 8011ae8:	2000665e 	.word	0x2000665e

08011aec <lv_obj_set_style_flex_grow>:
{
 8011aec:	b508      	push	{r3, lr}
 8011aee:	4613      	mov	r3, r2
    lv_obj_set_local_style_prop(obj, LV_STYLE_FLEX_GROW, v, selector);
 8011af0:	460a      	mov	r2, r1
 8011af2:	4902      	ldr	r1, [pc, #8]	@ (8011afc <lv_obj_set_style_flex_grow+0x10>)
 8011af4:	8809      	ldrh	r1, [r1, #0]
 8011af6:	f00b f867 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 8011afa:	bd08      	pop	{r3, pc}
 8011afc:	20006654 	.word	0x20006654

08011b00 <lv_obj_set_flex_grow>:
{
 8011b00:	b510      	push	{r4, lr}
 8011b02:	4604      	mov	r4, r0
    lv_obj_set_style_flex_grow(obj, grow, 0);
 8011b04:	2200      	movs	r2, #0
 8011b06:	f7ff fff1 	bl	8011aec <lv_obj_set_style_flex_grow>
    lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f00b fb32 	bl	801d174 <lv_obj_get_parent>
 8011b10:	f007 fd3c 	bl	801958c <lv_obj_mark_layout_as_dirty>
}
 8011b14:	bd10      	pop	{r4, pc}

08011b16 <lv_font_get_glyph_bitmap>:
 * @param letter a UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    LV_ASSERT_NULL(font_p);
 8011b16:	b118      	cbz	r0, 8011b20 <lv_font_get_glyph_bitmap+0xa>
{
 8011b18:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
 8011b1a:	6842      	ldr	r2, [r0, #4]
 8011b1c:	4790      	blx	r2
}
 8011b1e:	bd08      	pop	{r3, pc}
    LV_ASSERT_NULL(font_p);
 8011b20:	e7fe      	b.n	8011b20 <lv_font_get_glyph_bitmap+0xa>

08011b22 <lv_font_get_glyph_dsc>:
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{

    LV_ASSERT_NULL(font_p);
 8011b22:	b158      	cbz	r0, 8011b3c <lv_font_get_glyph_dsc+0x1a>
{
 8011b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b28:	460d      	mov	r5, r1
 8011b2a:	4616      	mov	r6, r2
 8011b2c:	469a      	mov	sl, r3
 8011b2e:	4681      	mov	r9, r0
    LV_ASSERT_NULL(dsc_out);
 8011b30:	b129      	cbz	r1, 8011b3e <lv_font_get_glyph_dsc+0x1c>
    const lv_font_t * placeholder_font = NULL;
#endif

    const lv_font_t * f = font_p;

    dsc_out->resolved_font = NULL;
 8011b32:	2300      	movs	r3, #0
 8011b34:	600b      	str	r3, [r1, #0]
    const lv_font_t * f = font_p;
 8011b36:	4604      	mov	r4, r0
    const lv_font_t * placeholder_font = NULL;
 8011b38:	4698      	mov	r8, r3

    while(f) {
 8011b3a:	e004      	b.n	8011b46 <lv_font_get_glyph_dsc+0x24>
    LV_ASSERT_NULL(font_p);
 8011b3c:	e7fe      	b.n	8011b3c <lv_font_get_glyph_dsc+0x1a>
    LV_ASSERT_NULL(dsc_out);
 8011b3e:	e7fe      	b.n	8011b3e <lv_font_get_glyph_dsc+0x1c>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
        if(found) {
            if(!dsc_out->is_placeholder) {
                dsc_out->resolved_font = f;
 8011b40:	602c      	str	r4, [r5, #0]
                return true;
 8011b42:	e020      	b.n	8011b86 <lv_font_get_glyph_dsc+0x64>
            else if(placeholder_font == NULL) {
                placeholder_font = f;
            }
#endif
        }
        f = f->fallback;
 8011b44:	6964      	ldr	r4, [r4, #20]
    while(f) {
 8011b46:	b18c      	cbz	r4, 8011b6c <lv_font_get_glyph_dsc+0x4a>
        bool found = f->get_glyph_dsc(f, dsc_out, letter, letter_next);
 8011b48:	4653      	mov	r3, sl
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	4620      	mov	r0, r4
 8011b50:	6827      	ldr	r7, [r4, #0]
 8011b52:	47b8      	blx	r7
        if(found) {
 8011b54:	4603      	mov	r3, r0
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d0f4      	beq.n	8011b44 <lv_font_get_glyph_dsc+0x22>
            if(!dsc_out->is_placeholder) {
 8011b5a:	7baa      	ldrb	r2, [r5, #14]
 8011b5c:	f012 0f10 	tst.w	r2, #16
 8011b60:	d0ee      	beq.n	8011b40 <lv_font_get_glyph_dsc+0x1e>
            else if(placeholder_font == NULL) {
 8011b62:	f1b8 0f00 	cmp.w	r8, #0
 8011b66:	d1ed      	bne.n	8011b44 <lv_font_get_glyph_dsc+0x22>
                placeholder_font = f;
 8011b68:	46a0      	mov	r8, r4
 8011b6a:	e7eb      	b.n	8011b44 <lv_font_get_glyph_dsc+0x22>
    }

#if LV_USE_FONT_PLACEHOLDER
    if(placeholder_font != NULL) {
 8011b6c:	f1b8 0f00 	cmp.w	r8, #0
 8011b70:	d00c      	beq.n	8011b8c <lv_font_get_glyph_dsc+0x6a>
        placeholder_font->get_glyph_dsc(placeholder_font, dsc_out, letter, letter_next);
 8011b72:	f8d8 4000 	ldr.w	r4, [r8]
 8011b76:	4653      	mov	r3, sl
 8011b78:	4632      	mov	r2, r6
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	4640      	mov	r0, r8
 8011b7e:	47a0      	blx	r4
        dsc_out->resolved_font = placeholder_font;
 8011b80:	f8c5 8000 	str.w	r8, [r5]
        return true;
 8011b84:	2301      	movs	r3, #1
    dsc_out->ofs_y = 0;
    dsc_out->bpp   = 1;
    dsc_out->is_placeholder = true;

    return false;
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(letter < 0x20 ||
 8011b8c:	2e1f      	cmp	r6, #31
 8011b8e:	d911      	bls.n	8011bb4 <lv_font_get_glyph_dsc+0x92>
 8011b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011b94:	429e      	cmp	r6, r3
 8011b96:	d00d      	beq.n	8011bb4 <lv_font_get_glyph_dsc+0x92>
       letter == 0xf8ff || /*LV_SYMBOL_DUMMY*/
 8011b98:	f242 030c 	movw	r3, #8204	@ 0x200c
 8011b9c:	429e      	cmp	r6, r3
 8011b9e:	d009      	beq.n	8011bb4 <lv_font_get_glyph_dsc+0x92>
        dsc_out->box_w = font_p->line_height / 2;
 8011ba0:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
 8011ba4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8011ba8:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8011bac:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = dsc_out->box_w + 2;
 8011bae:	3302      	adds	r3, #2
 8011bb0:	80ab      	strh	r3, [r5, #4]
 8011bb2:	e002      	b.n	8011bba <lv_font_get_glyph_dsc+0x98>
        dsc_out->box_w = 0;
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	80eb      	strh	r3, [r5, #6]
        dsc_out->adv_w = 0;
 8011bb8:	80ab      	strh	r3, [r5, #4]
    dsc_out->resolved_font = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	602b      	str	r3, [r5, #0]
    dsc_out->box_h = font_p->line_height;
 8011bbe:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8011bc2:	812a      	strh	r2, [r5, #8]
    dsc_out->ofs_x = 0;
 8011bc4:	816b      	strh	r3, [r5, #10]
    dsc_out->ofs_y = 0;
 8011bc6:	81ab      	strh	r3, [r5, #12]
    dsc_out->bpp   = 1;
 8011bc8:	7baa      	ldrb	r2, [r5, #14]
 8011bca:	2101      	movs	r1, #1
 8011bcc:	f361 0203 	bfi	r2, r1, #0, #4
 8011bd0:	73aa      	strb	r2, [r5, #14]
    dsc_out->is_placeholder = true;
 8011bd2:	b2d2      	uxtb	r2, r2
 8011bd4:	f042 0210 	orr.w	r2, r2, #16
 8011bd8:	73aa      	strb	r2, [r5, #14]
    return false;
 8011bda:	e7d4      	b.n	8011b86 <lv_font_get_glyph_dsc+0x64>

08011bdc <lv_font_get_glyph_width>:
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
    LV_ASSERT_NULL(font);
 8011bdc:	b158      	cbz	r0, 8011bf6 <lv_font_get_glyph_width+0x1a>
{
 8011bde:	b500      	push	{lr}
 8011be0:	b085      	sub	sp, #20
 8011be2:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 8011be4:	460a      	mov	r2, r1
 8011be6:	4669      	mov	r1, sp
 8011be8:	f7ff ff9b 	bl	8011b22 <lv_font_get_glyph_dsc>
    return g.adv_w;
}
 8011bec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8011bf0:	b005      	add	sp, #20
 8011bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    LV_ASSERT_NULL(font);
 8011bf6:	e7fe      	b.n	8011bf6 <lv_font_get_glyph_width+0x1a>

08011bf8 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 8011bf8:	7803      	ldrb	r3, [r0, #0]
 8011bfa:	780a      	ldrb	r2, [r1, #0]
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d001      	beq.n	8011c04 <kern_pair_8_compare+0xc>
 8011c00:	1a98      	subs	r0, r3, r2
 8011c02:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
 8011c04:	7840      	ldrb	r0, [r0, #1]
 8011c06:	784b      	ldrb	r3, [r1, #1]
 8011c08:	1ac0      	subs	r0, r0, r3

}
 8011c0a:	4770      	bx	lr

08011c0c <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 8011c0c:	8803      	ldrh	r3, [r0, #0]
 8011c0e:	880a      	ldrh	r2, [r1, #0]
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d001      	beq.n	8011c18 <kern_pair_16_compare+0xc>
 8011c14:	1a98      	subs	r0, r3, r2
 8011c16:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
 8011c18:	8840      	ldrh	r0, [r0, #2]
 8011c1a:	884b      	ldrh	r3, [r1, #2]
 8011c1c:	1ac0      	subs	r0, r0, r3
}
 8011c1e:	4770      	bx	lr

08011c20 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
 8011c20:	8800      	ldrh	r0, [r0, #0]
 8011c22:	880b      	ldrh	r3, [r1, #0]
}
 8011c24:	1ac0      	subs	r0, r0, r3
 8011c26:	4770      	bx	lr

08011c28 <get_glyph_dsc_id>:
{
 8011c28:	b570      	push	{r4, r5, r6, lr}
 8011c2a:	b084      	sub	sp, #16
    if(letter == '\0') return 0;
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	2900      	cmp	r1, #0
 8011c30:	d069      	beq.n	8011d06 <get_glyph_dsc_id+0xde>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011c32:	6904      	ldr	r4, [r0, #16]
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011c34:	6960      	ldr	r0, [r4, #20]
 8011c36:	2800      	cmp	r0, #0
 8011c38:	d05d      	beq.n	8011cf6 <get_glyph_dsc_id+0xce>
 8011c3a:	6803      	ldr	r3, [r0, #0]
 8011c3c:	428b      	cmp	r3, r1
 8011c3e:	d018      	beq.n	8011c72 <get_glyph_dsc_id+0x4a>
 8011c40:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011c42:	8a63      	ldrh	r3, [r4, #18]
 8011c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d956      	bls.n	8011cfa <get_glyph_dsc_id+0xd2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 8011c4c:	68a1      	ldr	r1, [r4, #8]
 8011c4e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8011c52:	009e      	lsls	r6, r3, #2
 8011c54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011c58:	5989      	ldr	r1, [r1, r6]
 8011c5a:	1a69      	subs	r1, r5, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
 8011c5c:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8011c60:	458c      	cmp	ip, r1
 8011c62:	d308      	bcc.n	8011c76 <get_glyph_dsc_id+0x4e>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011c64:	7c9a      	ldrb	r2, [r3, #18]
 8011c66:	2a03      	cmp	r2, #3
 8011c68:	d843      	bhi.n	8011cf2 <get_glyph_dsc_id+0xca>
 8011c6a:	e8df f002 	tbb	[pc, r2]
 8011c6e:	2b10      	.short	0x2b10
 8011c70:	1507      	.short	0x1507
    if(fdsc->cache && letter == fdsc->cache->last_letter) return fdsc->cache->last_glyph_id;
 8011c72:	6840      	ldr	r0, [r0, #4]
 8011c74:	e009      	b.n	8011c8a <get_glyph_dsc_id+0x62>
    for(i = 0; i < fdsc->cmap_num; i++) {
 8011c76:	3201      	adds	r2, #1
 8011c78:	b292      	uxth	r2, r2
 8011c7a:	e7e2      	b.n	8011c42 <get_glyph_dsc_id+0x1a>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 8011c7c:	88d8      	ldrh	r0, [r3, #6]
 8011c7e:	4408      	add	r0, r1
        if(fdsc->cache) {
 8011c80:	6963      	ldr	r3, [r4, #20]
 8011c82:	b113      	cbz	r3, 8011c8a <get_glyph_dsc_id+0x62>
            fdsc->cache->last_letter = letter;
 8011c84:	601d      	str	r5, [r3, #0]
            fdsc->cache->last_glyph_id = glyph_id;
 8011c86:	6963      	ldr	r3, [r4, #20]
 8011c88:	6058      	str	r0, [r3, #4]
}
 8011c8a:	b004      	add	sp, #16
 8011c8c:	bd70      	pop	{r4, r5, r6, pc}
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 8011c8e:	68da      	ldr	r2, [r3, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 8011c90:	88d8      	ldrh	r0, [r3, #6]
 8011c92:	5c53      	ldrb	r3, [r2, r1]
 8011c94:	4418      	add	r0, r3
 8011c96:	e7f3      	b.n	8011c80 <get_glyph_dsc_id+0x58>
            uint16_t key = rcp;
 8011c98:	f8ad 100e 	strh.w	r1, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011c9c:	6899      	ldr	r1, [r3, #8]
 8011c9e:	8a1a      	ldrh	r2, [r3, #16]
 8011ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8011d10 <get_glyph_dsc_id+0xe8>)
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	2302      	movs	r3, #2
 8011ca6:	f10d 000e 	add.w	r0, sp, #14
 8011caa:	f015 fe94 	bl	80279d6 <_lv_utils_bsearch>
            if(p) {
 8011cae:	b138      	cbz	r0, 8011cc0 <get_glyph_dsc_id+0x98>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011cb0:	68a3      	ldr	r3, [r4, #8]
 8011cb2:	4433      	add	r3, r6
 8011cb4:	6899      	ldr	r1, [r3, #8]
 8011cb6:	1a42      	subs	r2, r0, r1
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 8011cb8:	88d8      	ldrh	r0, [r3, #6]
 8011cba:	eb00 0062 	add.w	r0, r0, r2, asr #1
 8011cbe:	e7df      	b.n	8011c80 <get_glyph_dsc_id+0x58>
        uint32_t glyph_id = 0;
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	e7dd      	b.n	8011c80 <get_glyph_dsc_id+0x58>
            uint16_t key = rcp;
 8011cc4:	f8ad 100e 	strh.w	r1, [sp, #14]
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
 8011cc8:	6899      	ldr	r1, [r3, #8]
 8011cca:	8a1a      	ldrh	r2, [r3, #16]
 8011ccc:	4b10      	ldr	r3, [pc, #64]	@ (8011d10 <get_glyph_dsc_id+0xe8>)
 8011cce:	9300      	str	r3, [sp, #0]
 8011cd0:	2302      	movs	r3, #2
 8011cd2:	f10d 000e 	add.w	r0, sp, #14
 8011cd6:	f015 fe7e 	bl	80279d6 <_lv_utils_bsearch>
            if(p) {
 8011cda:	b140      	cbz	r0, 8011cee <get_glyph_dsc_id+0xc6>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
 8011cdc:	68a3      	ldr	r3, [r4, #8]
 8011cde:	4433      	add	r3, r6
 8011ce0:	6899      	ldr	r1, [r3, #8]
 8011ce2:	1a42      	subs	r2, r0, r1
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 8011ce4:	68d9      	ldr	r1, [r3, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 8011ce6:	88d8      	ldrh	r0, [r3, #6]
 8011ce8:	5a8b      	ldrh	r3, [r1, r2]
 8011cea:	4418      	add	r0, r3
 8011cec:	e7c8      	b.n	8011c80 <get_glyph_dsc_id+0x58>
        uint32_t glyph_id = 0;
 8011cee:	2000      	movs	r0, #0
 8011cf0:	e7c6      	b.n	8011c80 <get_glyph_dsc_id+0x58>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	e7c4      	b.n	8011c80 <get_glyph_dsc_id+0x58>
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	e7a3      	b.n	8011c42 <get_glyph_dsc_id+0x1a>
    if(fdsc->cache) {
 8011cfa:	b130      	cbz	r0, 8011d0a <get_glyph_dsc_id+0xe2>
        fdsc->cache->last_letter = letter;
 8011cfc:	6005      	str	r5, [r0, #0]
        fdsc->cache->last_glyph_id = 0;
 8011cfe:	6963      	ldr	r3, [r4, #20]
 8011d00:	2000      	movs	r0, #0
 8011d02:	6058      	str	r0, [r3, #4]
 8011d04:	e7c1      	b.n	8011c8a <get_glyph_dsc_id+0x62>
    if(letter == '\0') return 0;
 8011d06:	4608      	mov	r0, r1
 8011d08:	e7bf      	b.n	8011c8a <get_glyph_dsc_id+0x62>
    return 0;
 8011d0a:	2000      	movs	r0, #0
 8011d0c:	e7bd      	b.n	8011c8a <get_glyph_dsc_id+0x62>
 8011d0e:	bf00      	nop
 8011d10:	08011c21 	.word	0x08011c21

08011d14 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011d14:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
 8011d16:	7cd8      	ldrb	r0, [r3, #19]
 8011d18:	f010 0f20 	tst.w	r0, #32
 8011d1c:	d13a      	bne.n	8011d94 <get_kern_value+0x80>
{
 8011d1e:	b530      	push	{r4, r5, lr}
 8011d20:	b085      	sub	sp, #20
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 8011d22:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
 8011d24:	7ae3      	ldrb	r3, [r4, #11]
 8011d26:	2b3f      	cmp	r3, #63	@ 0x3f
 8011d28:	d906      	bls.n	8011d38 <get_kern_value+0x24>
        else if(kdsc->glyph_ids_size == 1) {
 8011d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011d2e:	2b40      	cmp	r3, #64	@ 0x40
 8011d30:	d01a      	beq.n	8011d68 <get_kern_value+0x54>
    int8_t value = 0;
 8011d32:	2000      	movs	r0, #0
}
 8011d34:	b005      	add	sp, #20
 8011d36:	bd30      	pop	{r4, r5, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
 8011d38:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 8011d3a:	0212      	lsls	r2, r2, #8
 8011d3c:	b292      	uxth	r2, r2
 8011d3e:	4411      	add	r1, r2
 8011d40:	f8ad 100c 	strh.w	r1, [sp, #12]
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 8011d44:	68a2      	ldr	r2, [r4, #8]
 8011d46:	4b1d      	ldr	r3, [pc, #116]	@ (8011dbc <get_kern_value+0xa8>)
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	2302      	movs	r3, #2
 8011d4c:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8011d50:	4629      	mov	r1, r5
 8011d52:	a803      	add	r0, sp, #12
 8011d54:	f015 fe3f 	bl	80279d6 <_lv_utils_bsearch>
            if(kid_p) {
 8011d58:	b120      	cbz	r0, 8011d64 <get_kern_value+0x50>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011d5a:	1b43      	subs	r3, r0, r5
 8011d5c:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
 8011d5e:	6862      	ldr	r2, [r4, #4]
 8011d60:	56d0      	ldrsb	r0, [r2, r3]
 8011d62:	e7e7      	b.n	8011d34 <get_kern_value+0x20>
    int8_t value = 0;
 8011d64:	2000      	movs	r0, #0
 8011d66:	e7e5      	b.n	8011d34 <get_kern_value+0x20>
            const uint32_t * g_ids = kdsc->glyph_ids;
 8011d68:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
 8011d6a:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 8011d6e:	9103      	str	r1, [sp, #12]
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 8011d70:	68a2      	ldr	r2, [r4, #8]
 8011d72:	4b13      	ldr	r3, [pc, #76]	@ (8011dc0 <get_kern_value+0xac>)
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	2304      	movs	r3, #4
 8011d78:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8011d7c:	4629      	mov	r1, r5
 8011d7e:	a803      	add	r0, sp, #12
 8011d80:	f015 fe29 	bl	80279d6 <_lv_utils_bsearch>
            if(kid_p) {
 8011d84:	b120      	cbz	r0, 8011d90 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
 8011d86:	1b43      	subs	r3, r0, r5
 8011d88:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
 8011d8a:	6862      	ldr	r2, [r4, #4]
 8011d8c:	56d0      	ldrsb	r0, [r2, r3]
 8011d8e:	e7d1      	b.n	8011d34 <get_kern_value+0x20>
    int8_t value = 0;
 8011d90:	2000      	movs	r0, #0
 8011d92:	e7cf      	b.n	8011d34 <get_kern_value+0x20>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 8011d94:	68db      	ldr	r3, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 8011d96:	6858      	ldr	r0, [r3, #4]
 8011d98:	5c41      	ldrb	r1, [r0, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
 8011d9a:	6898      	ldr	r0, [r3, #8]
 8011d9c:	5c82      	ldrb	r2, [r0, r2]
        if(left_class > 0 && right_class > 0) {
 8011d9e:	b141      	cbz	r1, 8011db2 <get_kern_value+0x9e>
 8011da0:	b14a      	cbz	r2, 8011db6 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
 8011da2:	6818      	ldr	r0, [r3, #0]
 8011da4:	3901      	subs	r1, #1
 8011da6:	7b5b      	ldrb	r3, [r3, #13]
 8011da8:	3a01      	subs	r2, #1
 8011daa:	fb03 2201 	mla	r2, r3, r1, r2
 8011dae:	5680      	ldrsb	r0, [r0, r2]
 8011db0:	4770      	bx	lr
    int8_t value = 0;
 8011db2:	2000      	movs	r0, #0
 8011db4:	4770      	bx	lr
 8011db6:	2000      	movs	r0, #0
}
 8011db8:	4770      	bx	lr
 8011dba:	bf00      	nop
 8011dbc:	08011bf9 	.word	0x08011bf9
 8011dc0:	08011c0d 	.word	0x08011c0d

08011dc4 <lv_font_get_bitmap_fmt_txt>:
{
 8011dc4:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8011dc6:	2909      	cmp	r1, #9
 8011dc8:	d00f      	beq.n	8011dea <lv_font_get_bitmap_fmt_txt+0x26>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011dca:	6904      	ldr	r4, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011dcc:	f7ff ff2c 	bl	8011c28 <get_glyph_dsc_id>
    if(!gid) return NULL;
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	b160      	cbz	r0, 8011dee <lv_font_get_bitmap_fmt_txt+0x2a>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011dd4:	6861      	ldr	r1, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
 8011dd6:	7ce3      	ldrb	r3, [r4, #19]
 8011dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8011dda:	d80a      	bhi.n	8011df2 <lv_font_get_bitmap_fmt_txt+0x2e>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 8011ddc:	6820      	ldr	r0, [r4, #0]
 8011dde:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
 8011de2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011de6:	4418      	add	r0, r3
}
 8011de8:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
 8011dea:	2120      	movs	r1, #32
 8011dec:	e7ed      	b.n	8011dca <lv_font_get_bitmap_fmt_txt+0x6>
    if(!gid) return NULL;
 8011dee:	2000      	movs	r0, #0
 8011df0:	e7fa      	b.n	8011de8 <lv_font_get_bitmap_fmt_txt+0x24>
        return NULL;
 8011df2:	2000      	movs	r0, #0
 8011df4:	e7f8      	b.n	8011de8 <lv_font_get_bitmap_fmt_txt+0x24>

08011df6 <lv_font_get_glyph_dsc_fmt_txt>:
{
 8011df6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dfa:	4607      	mov	r7, r0
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	4615      	mov	r5, r2
 8011e00:	4699      	mov	r9, r3
    if(is_tab) {
 8011e02:	2a09      	cmp	r2, #9
 8011e04:	d011      	beq.n	8011e2a <lv_font_get_glyph_dsc_fmt_txt+0x34>
 8011e06:	4611      	mov	r1, r2
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *)font->dsc;
 8011e08:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 8011e0a:	4638      	mov	r0, r7
 8011e0c:	f7ff ff0c 	bl	8011c28 <get_glyph_dsc_id>
    if(!gid) return false;
 8011e10:	4680      	mov	r8, r0
 8011e12:	2800      	cmp	r0, #0
 8011e14:	d042      	beq.n	8011e9c <lv_font_get_glyph_dsc_fmt_txt+0xa6>
    if(fdsc->kern_dsc) {
 8011e16:	68f3      	ldr	r3, [r6, #12]
 8011e18:	b17b      	cbz	r3, 8011e3a <lv_font_get_glyph_dsc_fmt_txt+0x44>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 8011e1a:	4649      	mov	r1, r9
 8011e1c:	4638      	mov	r0, r7
 8011e1e:	f7ff ff03 	bl	8011c28 <get_glyph_dsc_id>
        if(gid_next) {
 8011e22:	4602      	mov	r2, r0
 8011e24:	b918      	cbnz	r0, 8011e2e <lv_font_get_glyph_dsc_fmt_txt+0x38>
    int8_t kvalue = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	e008      	b.n	8011e3c <lv_font_get_glyph_dsc_fmt_txt+0x46>
        unicode_letter = ' ';
 8011e2a:	2120      	movs	r1, #32
 8011e2c:	e7ec      	b.n	8011e08 <lv_font_get_glyph_dsc_fmt_txt+0x12>
            kvalue = get_kern_value(font, gid, gid_next);
 8011e2e:	4641      	mov	r1, r8
 8011e30:	4638      	mov	r0, r7
 8011e32:	f7ff ff6f 	bl	8011d14 <get_kern_value>
 8011e36:	4603      	mov	r3, r0
 8011e38:	e000      	b.n	8011e3c <lv_font_get_glyph_dsc_fmt_txt+0x46>
    int8_t kvalue = 0;
 8011e3a:	2300      	movs	r3, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 8011e3c:	6871      	ldr	r1, [r6, #4]
 8011e3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 8011e42:	8a32      	ldrh	r2, [r6, #16]
 8011e44:	fb02 f303 	mul.w	r3, r2, r3
 8011e48:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
 8011e4a:	884a      	ldrh	r2, [r1, #2]
 8011e4c:	f3c2 120b 	ubfx	r2, r2, #4, #12
    if(is_tab) adv_w *= 2;
 8011e50:	2d09      	cmp	r5, #9
 8011e52:	d01d      	beq.n	8011e90 <lv_font_get_glyph_dsc_fmt_txt+0x9a>
    adv_w += kv;
 8011e54:	4413      	add	r3, r2
    adv_w  = (adv_w + (1 << 3)) >> 4;
 8011e56:	3308      	adds	r3, #8
 8011e58:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
 8011e5a:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_h = gdsc->box_h;
 8011e5c:	794b      	ldrb	r3, [r1, #5]
 8011e5e:	8123      	strh	r3, [r4, #8]
    dsc_out->box_w = gdsc->box_w;
 8011e60:	790a      	ldrb	r2, [r1, #4]
 8011e62:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_x = gdsc->ofs_x;
 8011e64:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8011e68:	8163      	strh	r3, [r4, #10]
    dsc_out->ofs_y = gdsc->ofs_y;
 8011e6a:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8011e6e:	81a3      	strh	r3, [r4, #12]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
 8011e70:	7cf3      	ldrb	r3, [r6, #19]
 8011e72:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8011e76:	7ba1      	ldrb	r1, [r4, #14]
 8011e78:	f363 0103 	bfi	r1, r3, #0, #4
 8011e7c:	73a1      	strb	r1, [r4, #14]
    dsc_out->is_placeholder = false;
 8011e7e:	b2cb      	uxtb	r3, r1
 8011e80:	f023 0310 	bic.w	r3, r3, #16
 8011e84:	73a3      	strb	r3, [r4, #14]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011e86:	2d09      	cmp	r5, #9
 8011e88:	d004      	beq.n	8011e94 <lv_font_get_glyph_dsc_fmt_txt+0x9e>
    return true;
 8011e8a:	2001      	movs	r0, #1
}
 8011e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(is_tab) adv_w *= 2;
 8011e90:	0052      	lsls	r2, r2, #1
 8011e92:	e7df      	b.n	8011e54 <lv_font_get_glyph_dsc_fmt_txt+0x5e>
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
 8011e94:	0052      	lsls	r2, r2, #1
 8011e96:	80e2      	strh	r2, [r4, #6]
    return true;
 8011e98:	2001      	movs	r0, #1
 8011e9a:	e7f7      	b.n	8011e8c <lv_font_get_glyph_dsc_fmt_txt+0x96>
    if(!gid) return false;
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e7f5      	b.n	8011e8c <lv_font_get_glyph_dsc_fmt_txt+0x96>

08011ea0 <_lv_font_clean_up_fmt_txt>:
}
 8011ea0:	4770      	bx	lr

08011ea2 <lv_fs_get_real_path>:
 * Skip the driver letter and the possible : after the letter
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. /folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 8011ea2:	4603      	mov	r3, r0
    path++; /*Ignore the driver letter*/
 8011ea4:	3001      	adds	r0, #1
    if(*path == ':') path++;
 8011ea6:	785a      	ldrb	r2, [r3, #1]
 8011ea8:	2a3a      	cmp	r2, #58	@ 0x3a
 8011eaa:	d000      	beq.n	8011eae <lv_fs_get_real_path+0xc>

    return path;
}
 8011eac:	4770      	bx	lr
    if(*path == ':') path++;
 8011eae:	1c98      	adds	r0, r3, #2
    return path;
 8011eb0:	e7fc      	b.n	8011eac <lv_fs_get_real_path+0xa>

08011eb2 <lv_fs_read_cached>:
{
 8011eb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eb6:	b085      	sub	sp, #20
 8011eb8:	4604      	mov	r4, r0
 8011eba:	4688      	mov	r8, r1
 8011ebc:	4615      	mov	r5, r2
 8011ebe:	461f      	mov	r7, r3
    uint32_t file_position = file_p->cache->file_position;
 8011ec0:	6886      	ldr	r6, [r0, #8]
 8011ec2:	f8d6 9008 	ldr.w	r9, [r6, #8]
    uint32_t start = file_p->cache->start;
 8011ec6:	6833      	ldr	r3, [r6, #0]
    uint32_t end = file_p->cache->end;
 8011ec8:	6872      	ldr	r2, [r6, #4]
    char * buffer = file_p->cache->buffer;
 8011eca:	f8d6 a00c 	ldr.w	sl, [r6, #12]
    uint16_t buffer_size = file_p->drv->cache_size;
 8011ece:	6840      	ldr	r0, [r0, #4]
 8011ed0:	f8b0 b002 	ldrh.w	fp, [r0, #2]
    if(start <= file_position && file_position < end) {
 8011ed4:	4599      	cmp	r9, r3
 8011ed6:	d350      	bcc.n	8011f7a <lv_fs_read_cached+0xc8>
 8011ed8:	4591      	cmp	r9, r2
 8011eda:	d24e      	bcs.n	8011f7a <lv_fs_read_cached+0xc8>
        uint16_t buffer_offset = file_position - start;
 8011edc:	fa1f f189 	uxth.w	r1, r9
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	1ac9      	subs	r1, r1, r3
 8011ee4:	b289      	uxth	r1, r1
        uint32_t buffer_remaining_length = LV_MIN((uint32_t)buffer_size - buffer_offset, (uint32_t)end - file_position);
 8011ee6:	eba2 0909 	sub.w	r9, r2, r9
 8011eea:	ebab 0301 	sub.w	r3, fp, r1
 8011eee:	4599      	cmp	r9, r3
 8011ef0:	bf28      	it	cs
 8011ef2:	4699      	movcs	r9, r3
        if(btr <= buffer_remaining_length) {
 8011ef4:	45a9      	cmp	r9, r5
 8011ef6:	d307      	bcc.n	8011f08 <lv_fs_read_cached+0x56>
            lv_memcpy(buf, buffer + buffer_offset, btr);
 8011ef8:	462a      	mov	r2, r5
 8011efa:	4451      	add	r1, sl
 8011efc:	4640      	mov	r0, r8
 8011efe:	f004 fdf3 	bl	8016ae8 <lv_memcpy>
            *br = btr;
 8011f02:	603d      	str	r5, [r7, #0]
    lv_fs_res_t res = LV_FS_RES_OK;
 8011f04:	2600      	movs	r6, #0
 8011f06:	e042      	b.n	8011f8e <lv_fs_read_cached+0xdc>
            lv_memcpy(buf, buffer + buffer_offset, buffer_remaining_length);
 8011f08:	464a      	mov	r2, r9
 8011f0a:	4451      	add	r1, sl
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	f004 fdeb 	bl	8016ae8 <lv_memcpy>
            uint32_t bytes_read_to_buffer = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	9303      	str	r3, [sp, #12]
            if(btr > buffer_size) {
 8011f16:	45ab      	cmp	fp, r5
 8011f18:	d212      	bcs.n	8011f40 <lv_fs_read_cached+0x8e>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)(buf + buffer_remaining_length),
 8011f1a:	6860      	ldr	r0, [r4, #4]
 8011f1c:	6906      	ldr	r6, [r0, #16]
 8011f1e:	ab03      	add	r3, sp, #12
 8011f20:	9300      	str	r3, [sp, #0]
 8011f22:	eba5 0309 	sub.w	r3, r5, r9
 8011f26:	eb08 0209 	add.w	r2, r8, r9
 8011f2a:	6821      	ldr	r1, [r4, #0]
 8011f2c:	47b0      	blx	r6
 8011f2e:	4606      	mov	r6, r0
            *br = LV_MIN(buffer_remaining_length + bytes_read_to_buffer, btr);
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	eb09 0203 	add.w	r2, r9, r3
 8011f36:	42aa      	cmp	r2, r5
 8011f38:	bf28      	it	cs
 8011f3a:	462a      	movcs	r2, r5
 8011f3c:	603a      	str	r2, [r7, #0]
 8011f3e:	e025      	b.n	8011f8c <lv_fs_read_cached+0xda>
                res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011f40:	6860      	ldr	r0, [r4, #4]
 8011f42:	6906      	ldr	r6, [r0, #16]
 8011f44:	ab03      	add	r3, sp, #12
 8011f46:	9300      	str	r3, [sp, #0]
 8011f48:	465b      	mov	r3, fp
 8011f4a:	4652      	mov	r2, sl
 8011f4c:	6821      	ldr	r1, [r4, #0]
 8011f4e:	47b0      	blx	r6
 8011f50:	4606      	mov	r6, r0
                file_p->cache->start = file_p->cache->end;
 8011f52:	68a3      	ldr	r3, [r4, #8]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	601a      	str	r2, [r3, #0]
                file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8011f58:	68a2      	ldr	r2, [r4, #8]
 8011f5a:	6813      	ldr	r3, [r2, #0]
 8011f5c:	9903      	ldr	r1, [sp, #12]
 8011f5e:	440b      	add	r3, r1
 8011f60:	6053      	str	r3, [r2, #4]
                uint16_t data_chunk_remaining = LV_MIN(btr - buffer_remaining_length, bytes_read_to_buffer);
 8011f62:	eba5 0209 	sub.w	r2, r5, r9
 8011f66:	428a      	cmp	r2, r1
 8011f68:	bf28      	it	cs
 8011f6a:	460a      	movcs	r2, r1
                lv_memcpy(buf + buffer_remaining_length, buffer, data_chunk_remaining);
 8011f6c:	b292      	uxth	r2, r2
 8011f6e:	4651      	mov	r1, sl
 8011f70:	eb08 0009 	add.w	r0, r8, r9
 8011f74:	f004 fdb8 	bl	8016ae8 <lv_memcpy>
 8011f78:	e7da      	b.n	8011f30 <lv_fs_read_cached+0x7e>
        if(btr > buffer_size) {
 8011f7a:	45ab      	cmp	fp, r5
 8011f7c:	d210      	bcs.n	8011fa0 <lv_fs_read_cached+0xee>
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buf, btr, br);
 8011f7e:	6906      	ldr	r6, [r0, #16]
 8011f80:	9700      	str	r7, [sp, #0]
 8011f82:	462b      	mov	r3, r5
 8011f84:	4642      	mov	r2, r8
 8011f86:	6821      	ldr	r1, [r4, #0]
 8011f88:	47b0      	blx	r6
 8011f8a:	4606      	mov	r6, r0
    if(res == LV_FS_RES_OK) {
 8011f8c:	b926      	cbnz	r6, 8011f98 <lv_fs_read_cached+0xe6>
        file_p->cache->file_position += *br;
 8011f8e:	68a2      	ldr	r2, [r4, #8]
 8011f90:	6893      	ldr	r3, [r2, #8]
 8011f92:	6839      	ldr	r1, [r7, #0]
 8011f94:	440b      	add	r3, r1
 8011f96:	6093      	str	r3, [r2, #8]
}
 8011f98:	4630      	mov	r0, r6
 8011f9a:	b005      	add	sp, #20
 8011f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(buffer == NULL) {
 8011fa0:	f1ba 0f00 	cmp.w	sl, #0
 8011fa4:	d01b      	beq.n	8011fde <lv_fs_read_cached+0x12c>
            uint32_t bytes_read_to_buffer = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	9303      	str	r3, [sp, #12]
            res = file_p->drv->read_cb(file_p->drv, file_p->file_d, (void *)buffer, buffer_size, &bytes_read_to_buffer);
 8011faa:	6860      	ldr	r0, [r4, #4]
 8011fac:	6906      	ldr	r6, [r0, #16]
 8011fae:	ab03      	add	r3, sp, #12
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	465b      	mov	r3, fp
 8011fb4:	4652      	mov	r2, sl
 8011fb6:	6821      	ldr	r1, [r4, #0]
 8011fb8:	47b0      	blx	r6
 8011fba:	4606      	mov	r6, r0
            file_p->cache->start = file_position;
 8011fbc:	68a3      	ldr	r3, [r4, #8]
 8011fbe:	f8c3 9000 	str.w	r9, [r3]
            file_p->cache->end = file_p->cache->start + bytes_read_to_buffer;
 8011fc2:	68a1      	ldr	r1, [r4, #8]
 8011fc4:	680b      	ldr	r3, [r1, #0]
 8011fc6:	9a03      	ldr	r2, [sp, #12]
 8011fc8:	4413      	add	r3, r2
 8011fca:	604b      	str	r3, [r1, #4]
            *br = LV_MIN(btr, bytes_read_to_buffer);
 8011fcc:	42aa      	cmp	r2, r5
 8011fce:	bf28      	it	cs
 8011fd0:	462a      	movcs	r2, r5
 8011fd2:	603a      	str	r2, [r7, #0]
            lv_memcpy(buf, buffer, *br);
 8011fd4:	4651      	mov	r1, sl
 8011fd6:	4640      	mov	r0, r8
 8011fd8:	f004 fd86 	bl	8016ae8 <lv_memcpy>
 8011fdc:	e7d6      	b.n	8011f8c <lv_fs_read_cached+0xda>
                file_p->cache->buffer = lv_mem_alloc(buffer_size);
 8011fde:	4658      	mov	r0, fp
 8011fe0:	f004 fc9a 	bl	8016918 <lv_mem_alloc>
 8011fe4:	60f0      	str	r0, [r6, #12]
                LV_ASSERT_MALLOC(file_p->cache->buffer);
 8011fe6:	68a3      	ldr	r3, [r4, #8]
 8011fe8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8011fec:	f1ba 0f00 	cmp.w	sl, #0
 8011ff0:	d1d9      	bne.n	8011fa6 <lv_fs_read_cached+0xf4>
 8011ff2:	e7fe      	b.n	8011ff2 <lv_fs_read_cached+0x140>

08011ff4 <_lv_fs_init>:
{
 8011ff4:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_fsdrv_ll), sizeof(lv_fs_drv_t *));
 8011ff6:	2104      	movs	r1, #4
 8011ff8:	4801      	ldr	r0, [pc, #4]	@ (8012000 <_lv_fs_init+0xc>)
 8011ffa:	f004 fa6c 	bl	80164d6 <_lv_ll_init>
}
 8011ffe:	bd08      	pop	{r3, pc}
 8012000:	20006848 	.word	0x20006848

08012004 <lv_fs_close>:
{
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8012008:	6840      	ldr	r0, [r0, #4]
 801200a:	b1b0      	cbz	r0, 801203a <lv_fs_close+0x36>
    if(file_p->drv->close_cb == NULL) {
 801200c:	68c3      	ldr	r3, [r0, #12]
 801200e:	b1b3      	cbz	r3, 801203e <lv_fs_close+0x3a>
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 8012010:	6821      	ldr	r1, [r4, #0]
 8012012:	4798      	blx	r3
 8012014:	4605      	mov	r5, r0
    if(file_p->drv->cache_size && file_p->cache) {
 8012016:	6863      	ldr	r3, [r4, #4]
 8012018:	885b      	ldrh	r3, [r3, #2]
 801201a:	b143      	cbz	r3, 801202e <lv_fs_close+0x2a>
 801201c:	68a3      	ldr	r3, [r4, #8]
 801201e:	b133      	cbz	r3, 801202e <lv_fs_close+0x2a>
        if(file_p->cache->buffer) {
 8012020:	68d8      	ldr	r0, [r3, #12]
 8012022:	b108      	cbz	r0, 8012028 <lv_fs_close+0x24>
            lv_mem_free(file_p->cache->buffer);
 8012024:	f004 fc96 	bl	8016954 <lv_mem_free>
        lv_mem_free(file_p->cache);
 8012028:	68a0      	ldr	r0, [r4, #8]
 801202a:	f004 fc93 	bl	8016954 <lv_mem_free>
    file_p->file_d = NULL;
 801202e:	2300      	movs	r3, #0
 8012030:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
 8012032:	6063      	str	r3, [r4, #4]
    file_p->cache  = NULL;
 8012034:	60a3      	str	r3, [r4, #8]
}
 8012036:	4628      	mov	r0, r5
 8012038:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 801203a:	250b      	movs	r5, #11
 801203c:	e7fb      	b.n	8012036 <lv_fs_close+0x32>
        return LV_FS_RES_NOT_IMP;
 801203e:	2509      	movs	r5, #9
 8012040:	e7f9      	b.n	8012036 <lv_fs_close+0x32>

08012042 <lv_fs_read>:
{
 8012042:	b530      	push	{r4, r5, lr}
 8012044:	b085      	sub	sp, #20
 8012046:	4684      	mov	ip, r0
    if(br != NULL) *br = 0;
 8012048:	461c      	mov	r4, r3
 801204a:	b10b      	cbz	r3, 8012050 <lv_fs_read+0xe>
 801204c:	2300      	movs	r3, #0
 801204e:	6023      	str	r3, [r4, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012050:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012054:	b1b0      	cbz	r0, 8012084 <lv_fs_read+0x42>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8012056:	6905      	ldr	r5, [r0, #16]
 8012058:	b1b5      	cbz	r5, 8012088 <lv_fs_read+0x46>
    uint32_t br_tmp = 0;
 801205a:	2300      	movs	r3, #0
 801205c:	9303      	str	r3, [sp, #12]
    if(file_p->drv->cache_size) {
 801205e:	8843      	ldrh	r3, [r0, #2]
 8012060:	b95b      	cbnz	r3, 801207a <lv_fs_read+0x38>
        res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 8012062:	ab03      	add	r3, sp, #12
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	4613      	mov	r3, r2
 8012068:	460a      	mov	r2, r1
 801206a:	f8dc 1000 	ldr.w	r1, [ip]
 801206e:	47a8      	blx	r5
    if(br != NULL) *br = br_tmp;
 8012070:	b10c      	cbz	r4, 8012076 <lv_fs_read+0x34>
 8012072:	9b03      	ldr	r3, [sp, #12]
 8012074:	6023      	str	r3, [r4, #0]
}
 8012076:	b005      	add	sp, #20
 8012078:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_read_cached(file_p, (char *)buf, btr, &br_tmp);
 801207a:	ab03      	add	r3, sp, #12
 801207c:	4660      	mov	r0, ip
 801207e:	f7ff ff18 	bl	8011eb2 <lv_fs_read_cached>
 8012082:	e7f5      	b.n	8012070 <lv_fs_read+0x2e>
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 8012084:	200b      	movs	r0, #11
 8012086:	e7f6      	b.n	8012076 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 8012088:	2009      	movs	r0, #9
 801208a:	e7f4      	b.n	8012076 <lv_fs_read+0x34>

0801208c <lv_fs_seek>:
{
 801208c:	b530      	push	{r4, r5, lr}
 801208e:	b083      	sub	sp, #12
 8012090:	4604      	mov	r4, r0
    if(file_p->drv == NULL) {
 8012092:	6840      	ldr	r0, [r0, #4]
 8012094:	2800      	cmp	r0, #0
 8012096:	d041      	beq.n	801211c <lv_fs_seek+0x90>
 8012098:	4613      	mov	r3, r2
    if(file_p->drv->seek_cb == NULL) {
 801209a:	6985      	ldr	r5, [r0, #24]
 801209c:	2d00      	cmp	r5, #0
 801209e:	d03f      	beq.n	8012120 <lv_fs_seek+0x94>
    if(file_p->drv->cache_size) {
 80120a0:	8842      	ldrh	r2, [r0, #2]
 80120a2:	2a00      	cmp	r2, #0
 80120a4:	d035      	beq.n	8012112 <lv_fs_seek+0x86>
        switch(whence) {
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d013      	beq.n	80120d2 <lv_fs_seek+0x46>
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	d023      	beq.n	80120f6 <lv_fs_seek+0x6a>
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d138      	bne.n	8012124 <lv_fs_seek+0x98>
                    file_p->cache->file_position = pos;
 80120b2:	68a2      	ldr	r2, [r4, #8]
 80120b4:	6091      	str	r1, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80120b6:	68a1      	ldr	r1, [r4, #8]
 80120b8:	688a      	ldr	r2, [r1, #8]
 80120ba:	6808      	ldr	r0, [r1, #0]
 80120bc:	4282      	cmp	r2, r0
 80120be:	d302      	bcc.n	80120c6 <lv_fs_seek+0x3a>
 80120c0:	6849      	ldr	r1, [r1, #4]
 80120c2:	428a      	cmp	r2, r1
 80120c4:	d930      	bls.n	8012128 <lv_fs_seek+0x9c>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 80120c6:	6860      	ldr	r0, [r4, #4]
 80120c8:	6985      	ldr	r5, [r0, #24]
 80120ca:	2300      	movs	r3, #0
 80120cc:	6821      	ldr	r1, [r4, #0]
 80120ce:	47a8      	blx	r5
 80120d0:	e022      	b.n	8012118 <lv_fs_seek+0x8c>
                    file_p->cache->file_position += pos;
 80120d2:	68a2      	ldr	r2, [r4, #8]
 80120d4:	6893      	ldr	r3, [r2, #8]
 80120d6:	440b      	add	r3, r1
 80120d8:	6093      	str	r3, [r2, #8]
                    if(file_p->cache->file_position < file_p->cache->start || file_p->cache->file_position > file_p->cache->end) {
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	689a      	ldr	r2, [r3, #8]
 80120de:	6819      	ldr	r1, [r3, #0]
 80120e0:	428a      	cmp	r2, r1
 80120e2:	d302      	bcc.n	80120ea <lv_fs_seek+0x5e>
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d920      	bls.n	801212c <lv_fs_seek+0xa0>
                        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, file_p->cache->file_position, LV_FS_SEEK_SET);
 80120ea:	6860      	ldr	r0, [r4, #4]
 80120ec:	6985      	ldr	r5, [r0, #24]
 80120ee:	2300      	movs	r3, #0
 80120f0:	6821      	ldr	r1, [r4, #0]
 80120f2:	47a8      	blx	r5
 80120f4:	e010      	b.n	8012118 <lv_fs_seek+0x8c>
                    res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 80120f6:	460a      	mov	r2, r1
 80120f8:	6821      	ldr	r1, [r4, #0]
 80120fa:	47a8      	blx	r5
                    if(res == LV_FS_RES_OK) {
 80120fc:	b960      	cbnz	r0, 8012118 <lv_fs_seek+0x8c>
                        res = file_p->drv->tell_cb(file_p->drv, file_p->file_d, &tmp_position);
 80120fe:	6860      	ldr	r0, [r4, #4]
 8012100:	69c3      	ldr	r3, [r0, #28]
 8012102:	aa01      	add	r2, sp, #4
 8012104:	6821      	ldr	r1, [r4, #0]
 8012106:	4798      	blx	r3
                        if(res == LV_FS_RES_OK) {
 8012108:	b930      	cbnz	r0, 8012118 <lv_fs_seek+0x8c>
                            file_p->cache->file_position = tmp_position;
 801210a:	68a3      	ldr	r3, [r4, #8]
 801210c:	9a01      	ldr	r2, [sp, #4]
 801210e:	609a      	str	r2, [r3, #8]
 8012110:	e002      	b.n	8012118 <lv_fs_seek+0x8c>
        res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos, whence);
 8012112:	460a      	mov	r2, r1
 8012114:	6821      	ldr	r1, [r4, #0]
 8012116:	47a8      	blx	r5
}
 8012118:	b003      	add	sp, #12
 801211a:	bd30      	pop	{r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
 801211c:	200b      	movs	r0, #11
 801211e:	e7fb      	b.n	8012118 <lv_fs_seek+0x8c>
        return LV_FS_RES_NOT_IMP;
 8012120:	2009      	movs	r0, #9
 8012122:	e7f9      	b.n	8012118 <lv_fs_seek+0x8c>
        switch(whence) {
 8012124:	2000      	movs	r0, #0
 8012126:	e7f7      	b.n	8012118 <lv_fs_seek+0x8c>
    lv_fs_res_t res = LV_FS_RES_OK;
 8012128:	4618      	mov	r0, r3
 801212a:	e7f5      	b.n	8012118 <lv_fs_seek+0x8c>
 801212c:	2000      	movs	r0, #0
 801212e:	e7f3      	b.n	8012118 <lv_fs_seek+0x8c>

08012130 <lv_fs_get_drv>:
{
 8012130:	b510      	push	{r4, lr}
 8012132:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_fsdrv_ll), drv) {
 8012134:	4808      	ldr	r0, [pc, #32]	@ (8012158 <lv_fs_get_drv+0x28>)
 8012136:	f004 fa14 	bl	8016562 <_lv_ll_get_head>
 801213a:	4601      	mov	r1, r0
 801213c:	e003      	b.n	8012146 <lv_fs_get_drv+0x16>
 801213e:	4806      	ldr	r0, [pc, #24]	@ (8012158 <lv_fs_get_drv+0x28>)
 8012140:	f004 fa17 	bl	8016572 <_lv_ll_get_next>
 8012144:	4601      	mov	r1, r0
 8012146:	b121      	cbz	r1, 8012152 <lv_fs_get_drv+0x22>
        if((*drv)->letter == letter) {
 8012148:	680b      	ldr	r3, [r1, #0]
 801214a:	781a      	ldrb	r2, [r3, #0]
 801214c:	42a2      	cmp	r2, r4
 801214e:	d1f6      	bne.n	801213e <lv_fs_get_drv+0xe>
            return *drv;
 8012150:	4619      	mov	r1, r3
}
 8012152:	4608      	mov	r0, r1
 8012154:	bd10      	pop	{r4, pc}
 8012156:	bf00      	nop
 8012158:	20006848 	.word	0x20006848

0801215c <lv_fs_open>:
    if(path == NULL) {
 801215c:	2900      	cmp	r1, #0
 801215e:	d037      	beq.n	80121d0 <lv_fs_open+0x74>
{
 8012160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012164:	4604      	mov	r4, r0
 8012166:	4616      	mov	r6, r2
 8012168:	460f      	mov	r7, r1
    lv_fs_drv_t * drv = lv_fs_get_drv(letter);
 801216a:	7808      	ldrb	r0, [r1, #0]
 801216c:	f7ff ffe0 	bl	8012130 <lv_fs_get_drv>
    if(drv == NULL) {
 8012170:	4605      	mov	r5, r0
 8012172:	b378      	cbz	r0, 80121d4 <lv_fs_open+0x78>
    if(drv->ready_cb) {
 8012174:	6843      	ldr	r3, [r0, #4]
 8012176:	b10b      	cbz	r3, 801217c <lv_fs_open+0x20>
        if(drv->ready_cb(drv) == false) {
 8012178:	4798      	blx	r3
 801217a:	b368      	cbz	r0, 80121d8 <lv_fs_open+0x7c>
    if(drv->open_cb == NULL) {
 801217c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8012180:	f1b8 0f00 	cmp.w	r8, #0
 8012184:	d02a      	beq.n	80121dc <lv_fs_open+0x80>
    const char * real_path = lv_fs_get_real_path(path);
 8012186:	4638      	mov	r0, r7
 8012188:	f7ff fe8b 	bl	8011ea2 <lv_fs_get_real_path>
 801218c:	4601      	mov	r1, r0
    void * file_d = drv->open_cb(drv, real_path, mode);
 801218e:	4632      	mov	r2, r6
 8012190:	4628      	mov	r0, r5
 8012192:	47c0      	blx	r8
    if(file_d == NULL || file_d == (void *)(-1)) {
 8012194:	1e43      	subs	r3, r0, #1
 8012196:	f113 0f03 	cmn.w	r3, #3
 801219a:	d821      	bhi.n	80121e0 <lv_fs_open+0x84>
    file_p->drv = drv;
 801219c:	6065      	str	r5, [r4, #4]
    file_p->file_d = file_d;
 801219e:	6020      	str	r0, [r4, #0]
    if(drv->cache_size) {
 80121a0:	886b      	ldrh	r3, [r5, #2]
 80121a2:	b913      	cbnz	r3, 80121aa <lv_fs_open+0x4e>
    return LV_FS_RES_OK;
 80121a4:	2000      	movs	r0, #0
}
 80121a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        file_p->cache = lv_mem_alloc(sizeof(lv_fs_file_cache_t));
 80121aa:	2010      	movs	r0, #16
 80121ac:	f004 fbb4 	bl	8016918 <lv_mem_alloc>
 80121b0:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(file_p->cache);
 80121b2:	b160      	cbz	r0, 80121ce <lv_fs_open+0x72>
        lv_memset_00(file_p->cache, sizeof(lv_fs_file_cache_t));
 80121b4:	2110      	movs	r1, #16
 80121b6:	f004 fd85 	bl	8016cc4 <lv_memset_00>
        file_p->cache->start = UINT32_MAX;  /*Set an invalid range by default*/
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80121c0:	601a      	str	r2, [r3, #0]
        file_p->cache->end = UINT32_MAX - 1;
 80121c2:	68a3      	ldr	r3, [r4, #8]
 80121c4:	f06f 0201 	mvn.w	r2, #1
 80121c8:	605a      	str	r2, [r3, #4]
    return LV_FS_RES_OK;
 80121ca:	2000      	movs	r0, #0
 80121cc:	e7eb      	b.n	80121a6 <lv_fs_open+0x4a>
        LV_ASSERT_MALLOC(file_p->cache);
 80121ce:	e7fe      	b.n	80121ce <lv_fs_open+0x72>
        return LV_FS_RES_INV_PARAM;
 80121d0:	200b      	movs	r0, #11
}
 80121d2:	4770      	bx	lr
        return LV_FS_RES_NOT_EX;
 80121d4:	2003      	movs	r0, #3
 80121d6:	e7e6      	b.n	80121a6 <lv_fs_open+0x4a>
            return LV_FS_RES_HW_ERR;
 80121d8:	2001      	movs	r0, #1
 80121da:	e7e4      	b.n	80121a6 <lv_fs_open+0x4a>
        return LV_FS_RES_NOT_IMP;
 80121dc:	2009      	movs	r0, #9
 80121de:	e7e2      	b.n	80121a6 <lv_fs_open+0x4a>
        return LV_FS_RES_UNKNOWN;
 80121e0:	200c      	movs	r0, #12
 80121e2:	e7e0      	b.n	80121a6 <lv_fs_open+0x4a>

080121e4 <lv_fs_get_ext>:
{
 80121e4:	b510      	push	{r4, lr}
 80121e6:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
 80121e8:	f7ed ffd8 	bl	800019c <strlen>
 80121ec:	b158      	cbz	r0, 8012206 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
 80121ee:	5c23      	ldrb	r3, [r4, r0]
 80121f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80121f2:	d005      	beq.n	8012200 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
 80121f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80121f6:	d008      	beq.n	801220a <lv_fs_get_ext+0x26>
 80121f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80121fa:	d008      	beq.n	801220e <lv_fs_get_ext+0x2a>
    for(i = strlen(fn); i > 0; i--) {
 80121fc:	3801      	subs	r0, #1
 80121fe:	e7f5      	b.n	80121ec <lv_fs_get_ext+0x8>
            return &fn[i + 1];
 8012200:	1c43      	adds	r3, r0, #1
 8012202:	18e0      	adds	r0, r4, r3
 8012204:	e000      	b.n	8012208 <lv_fs_get_ext+0x24>
    return ""; /*Empty string if no '.' in the file name.*/
 8012206:	4803      	ldr	r0, [pc, #12]	@ (8012214 <lv_fs_get_ext+0x30>)
}
 8012208:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
 801220a:	4802      	ldr	r0, [pc, #8]	@ (8012214 <lv_fs_get_ext+0x30>)
 801220c:	e7fc      	b.n	8012208 <lv_fs_get_ext+0x24>
 801220e:	4801      	ldr	r0, [pc, #4]	@ (8012214 <lv_fs_get_ext+0x30>)
 8012210:	e7fa      	b.n	8012208 <lv_fs_get_ext+0x24>
 8012212:	bf00      	nop
 8012214:	08029930 	.word	0x08029930

08012218 <grid_align>:
 * @param pos_array write the positions of the tracks here
 * @return the total size of the grid
 */
static lv_coord_t grid_align(lv_coord_t cont_size,  bool auto_size, uint8_t align, lv_coord_t gap, uint32_t track_num,
                             lv_coord_t * size_array, lv_coord_t * pos_array, bool reverse)
{
 8012218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801221c:	4684      	mov	ip, r0
 801221e:	9d06      	ldr	r5, [sp, #24]
 8012220:	9e07      	ldr	r6, [sp, #28]
 8012222:	9c08      	ldr	r4, [sp, #32]
 8012224:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
    lv_coord_t grid_size = 0;
    uint32_t i;

    if(auto_size) {
 8012228:	b119      	cbz	r1, 8012232 <grid_align+0x1a>
        pos_array[0] = 0;
 801222a:	2200      	movs	r2, #0
 801222c:	8022      	strh	r2, [r4, #0]

        }
    }

    /*Set the position of all tracks from the start position, gaps and track sizes*/
    for(i = 0; i < track_num - 1; i++) {
 801222e:	2200      	movs	r2, #0
 8012230:	e06b      	b.n	801230a <grid_align+0xf2>
        if(align == LV_GRID_ALIGN_SPACE_AROUND || align == LV_GRID_ALIGN_SPACE_BETWEEN || align == LV_GRID_ALIGN_SPACE_EVENLY) {
 8012232:	1f11      	subs	r1, r2, #4
 8012234:	b2c9      	uxtb	r1, r1
 8012236:	2902      	cmp	r1, #2
 8012238:	d802      	bhi.n	8012240 <grid_align+0x28>
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 801223a:	2d01      	cmp	r5, #1
 801223c:	d00c      	beq.n	8012258 <grid_align+0x40>
            gap = 0;
 801223e:	2300      	movs	r3, #0
        for(i = 0; i < track_num; i++) {
 8012240:	2000      	movs	r0, #0
    lv_coord_t grid_size = 0;
 8012242:	4601      	mov	r1, r0
        for(i = 0; i < track_num; i++) {
 8012244:	42a8      	cmp	r0, r5
 8012246:	d20a      	bcs.n	801225e <grid_align+0x46>
            grid_size += size_array[i] + gap;
 8012248:	f836 e010 	ldrh.w	lr, [r6, r0, lsl #1]
 801224c:	449e      	add	lr, r3
 801224e:	fa11 f18e 	uxtah	r1, r1, lr
 8012252:	b209      	sxth	r1, r1
        for(i = 0; i < track_num; i++) {
 8012254:	3001      	adds	r0, #1
 8012256:	e7f5      	b.n	8012244 <grid_align+0x2c>
            gap = 0;
 8012258:	2300      	movs	r3, #0
            if(track_num == 1) align = LV_GRID_ALIGN_CENTER;
 801225a:	2201      	movs	r2, #1
 801225c:	e7f0      	b.n	8012240 <grid_align+0x28>
        grid_size -= gap;
 801225e:	b289      	uxth	r1, r1
 8012260:	b298      	uxth	r0, r3
 8012262:	eba1 0e00 	sub.w	lr, r1, r0
 8012266:	fa0f fe8e 	sxth.w	lr, lr
        switch(align) {
 801226a:	2a06      	cmp	r2, #6
 801226c:	d8df      	bhi.n	801222e <grid_align+0x16>
 801226e:	f20f 0808 	addw	r8, pc, #8
 8012272:	f858 f022 	ldr.w	pc, [r8, r2, lsl #2]
 8012276:	bf00      	nop
 8012278:	08012295 	.word	0x08012295
 801227c:	0801229b 	.word	0x0801229b
 8012280:	080122ab 	.word	0x080122ab
 8012284:	0801222f 	.word	0x0801222f
 8012288:	080122e3 	.word	0x080122e3
 801228c:	080122c9 	.word	0x080122c9
 8012290:	080122b3 	.word	0x080122b3
                pos_array[0] = 0;
 8012294:	2200      	movs	r2, #0
 8012296:	8022      	strh	r2, [r4, #0]
                break;
 8012298:	e7c9      	b.n	801222e <grid_align+0x16>
                pos_array[0] = (cont_size - grid_size) / 2;
 801229a:	ebac 0e0e 	sub.w	lr, ip, lr
 801229e:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 80122a2:	ea4f 026e 	mov.w	r2, lr, asr #1
 80122a6:	8022      	strh	r2, [r4, #0]
                break;
 80122a8:	e7c1      	b.n	801222e <grid_align+0x16>
                pos_array[0] = cont_size - grid_size;
 80122aa:	1a42      	subs	r2, r0, r1
 80122ac:	4462      	add	r2, ip
 80122ae:	8022      	strh	r2, [r4, #0]
                break;
 80122b0:	e7bd      	b.n	801222e <grid_align+0x16>
                pos_array[0] = 0;
 80122b2:	2300      	movs	r3, #0
 80122b4:	8023      	strh	r3, [r4, #0]
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num - 1);
 80122b6:	1a43      	subs	r3, r0, r1
 80122b8:	4463      	add	r3, ip
 80122ba:	b21b      	sxth	r3, r3
 80122bc:	1e6a      	subs	r2, r5, #1
 80122be:	b212      	sxth	r2, r2
 80122c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80122c4:	b21b      	sxth	r3, r3
                break;
 80122c6:	e7b2      	b.n	801222e <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num);
 80122c8:	1a42      	subs	r2, r0, r1
 80122ca:	4462      	add	r2, ip
 80122cc:	b212      	sxth	r2, r2
 80122ce:	b22b      	sxth	r3, r5
 80122d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80122d4:	b213      	sxth	r3, r2
                pos_array[0] = gap / 2;
 80122d6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80122da:	441a      	add	r2, r3
 80122dc:	1052      	asrs	r2, r2, #1
 80122de:	8022      	strh	r2, [r4, #0]
                break;
 80122e0:	e7a5      	b.n	801222e <grid_align+0x16>
                gap = (lv_coord_t)(cont_size - grid_size) / (lv_coord_t)(track_num + 1);
 80122e2:	1a43      	subs	r3, r0, r1
 80122e4:	4463      	add	r3, ip
 80122e6:	b21b      	sxth	r3, r3
 80122e8:	1c6a      	adds	r2, r5, #1
 80122ea:	b212      	sxth	r2, r2
 80122ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80122f0:	b21b      	sxth	r3, r3
                pos_array[0] = gap;
 80122f2:	8023      	strh	r3, [r4, #0]
                break;
 80122f4:	e79b      	b.n	801222e <grid_align+0x16>
        pos_array[i + 1] = pos_array[i] + size_array[i] + gap;
 80122f6:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 80122fa:	f836 0012 	ldrh.w	r0, [r6, r2, lsl #1]
 80122fe:	4401      	add	r1, r0
 8012300:	3201      	adds	r2, #1
 8012302:	fa13 f181 	uxtah	r1, r3, r1
 8012306:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
    for(i = 0; i < track_num - 1; i++) {
 801230a:	1e69      	subs	r1, r5, #1
 801230c:	4291      	cmp	r1, r2
 801230e:	d8f2      	bhi.n	80122f6 <grid_align+0xde>
    }

    lv_coord_t total_gird_size = pos_array[track_num - 1] + size_array[track_num - 1] - pos_array[0];
 8012310:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8012314:	3b01      	subs	r3, #1
 8012316:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 801231a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801231e:	4418      	add	r0, r3
 8012320:	b280      	uxth	r0, r0
 8012322:	8823      	ldrh	r3, [r4, #0]
 8012324:	1ac0      	subs	r0, r0, r3
 8012326:	b200      	sxth	r0, r0

    if(reverse) {
 8012328:	b90f      	cbnz	r7, 801232e <grid_align+0x116>

    }

    /*Return the full size of the grid*/
    return total_gird_size;
}
 801232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < track_num; i++) {
 801232e:	2200      	movs	r2, #0
 8012330:	42aa      	cmp	r2, r5
 8012332:	d2fa      	bcs.n	801232a <grid_align+0x112>
            pos_array[i] = cont_size - pos_array[i] - size_array[i];
 8012334:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 8012338:	ebac 0303 	sub.w	r3, ip, r3
 801233c:	b29b      	uxth	r3, r3
 801233e:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 8012342:	1a5b      	subs	r3, r3, r1
 8012344:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
        for(i = 0; i < track_num; i++) {
 8012348:	3201      	adds	r2, #1
 801234a:	e7f1      	b.n	8012330 <grid_align+0x118>

0801234c <count_tracks>:

static uint32_t count_tracks(const lv_coord_t * templ)
{
 801234c:	4601      	mov	r1, r0
    uint32_t i;
    for(i = 0; templ[i] != LV_GRID_TEMPLATE_LAST; i++);
 801234e:	2000      	movs	r0, #0
 8012350:	e000      	b.n	8012354 <count_tracks+0x8>
 8012352:	3001      	adds	r0, #1
 8012354:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
 8012358:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 801235c:	429a      	cmp	r2, r3
 801235e:	d1f8      	bne.n	8012352 <count_tracks+0x6>

    return i;
}
 8012360:	4770      	bx	lr
	...

08012364 <get_col_dsc>:
{
 8012364:	b508      	push	{r3, lr}
    return (const lv_coord_t *)v.ptr;
}

static inline const lv_coord_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_DSC_ARRAY);
 8012366:	4b03      	ldr	r3, [pc, #12]	@ (8012374 <get_col_dsc+0x10>)
 8012368:	881a      	ldrh	r2, [r3, #0]
 801236a:	2100      	movs	r1, #0
 801236c:	f00a f9c2 	bl	801c6f4 <lv_obj_get_style_prop>
}
 8012370:	bd08      	pop	{r3, pc}
 8012372:	bf00      	nop
 8012374:	2000688a 	.word	0x2000688a

08012378 <get_row_dsc>:
{
 8012378:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_DSC_ARRAY);
 801237a:	4b03      	ldr	r3, [pc, #12]	@ (8012388 <get_row_dsc+0x10>)
 801237c:	881a      	ldrh	r2, [r3, #0]
 801237e:	2100      	movs	r1, #0
 8012380:	f00a f9b8 	bl	801c6f4 <lv_obj_get_style_prop>
}
 8012384:	bd08      	pop	{r3, pc}
 8012386:	bf00      	nop
 8012388:	20006886 	.word	0x20006886

0801238c <get_row_span>:
{
 801238c:	b508      	push	{r3, lr}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_SPAN);
 801238e:	4b03      	ldr	r3, [pc, #12]	@ (801239c <get_row_span+0x10>)
 8012390:	881a      	ldrh	r2, [r3, #0]
 8012392:	2100      	movs	r1, #0
 8012394:	f00a f9ae 	bl	801c6f4 <lv_obj_get_style_prop>
}
 8012398:	b2c0      	uxtb	r0, r0
 801239a:	bd08      	pop	{r3, pc}
 801239c:	2000687a 	.word	0x2000687a

080123a0 <get_row_pos>:
{
 80123a0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_ROW_POS);
 80123a2:	4b03      	ldr	r3, [pc, #12]	@ (80123b0 <get_row_pos+0x10>)
 80123a4:	881a      	ldrh	r2, [r3, #0]
 80123a6:	2100      	movs	r1, #0
 80123a8:	f00a f9a4 	bl	801c6f4 <lv_obj_get_style_prop>
}
 80123ac:	b2c0      	uxtb	r0, r0
 80123ae:	bd08      	pop	{r3, pc}
 80123b0:	2000687c 	.word	0x2000687c

080123b4 <get_col_span>:
{
 80123b4:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_SPAN);
 80123b6:	4b03      	ldr	r3, [pc, #12]	@ (80123c4 <get_col_span+0x10>)
 80123b8:	881a      	ldrh	r2, [r3, #0]
 80123ba:	2100      	movs	r1, #0
 80123bc:	f00a f99a 	bl	801c6f4 <lv_obj_get_style_prop>
}
 80123c0:	b2c0      	uxtb	r0, r0
 80123c2:	bd08      	pop	{r3, pc}
 80123c4:	20006880 	.word	0x20006880

080123c8 <get_col_pos>:
{
 80123c8:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_COLUMN_POS);
 80123ca:	4b03      	ldr	r3, [pc, #12]	@ (80123d8 <get_col_pos+0x10>)
 80123cc:	881a      	ldrh	r2, [r3, #0]
 80123ce:	2100      	movs	r1, #0
 80123d0:	f00a f990 	bl	801c6f4 <lv_obj_get_style_prop>
}
 80123d4:	b2c0      	uxtb	r0, r0
 80123d6:	bd08      	pop	{r3, pc}
 80123d8:	20006882 	.word	0x20006882

080123dc <get_grid_col_align>:
{
 80123dc:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_COLUMN_ALIGN);
 80123de:	4b03      	ldr	r3, [pc, #12]	@ (80123ec <get_grid_col_align+0x10>)
 80123e0:	881a      	ldrh	r2, [r3, #0]
 80123e2:	2100      	movs	r1, #0
 80123e4:	f00a f986 	bl	801c6f4 <lv_obj_get_style_prop>
}
 80123e8:	b2c0      	uxtb	r0, r0
 80123ea:	bd08      	pop	{r3, pc}
 80123ec:	20006888 	.word	0x20006888

080123f0 <get_grid_row_align>:
{
 80123f0:	b508      	push	{r3, lr}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_ROW_ALIGN);
 80123f2:	4b03      	ldr	r3, [pc, #12]	@ (8012400 <get_grid_row_align+0x10>)
 80123f4:	881a      	ldrh	r2, [r3, #0]
 80123f6:	2100      	movs	r1, #0
 80123f8:	f00a f97c 	bl	801c6f4 <lv_obj_get_style_prop>
}
 80123fc:	b2c0      	uxtb	r0, r0
 80123fe:	bd08      	pop	{r3, pc}
 8012400:	20006884 	.word	0x20006884

08012404 <get_cell_col_align>:
{
 8012404:	b508      	push	{r3, lr}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_X_ALIGN);
 8012406:	4b03      	ldr	r3, [pc, #12]	@ (8012414 <get_cell_col_align+0x10>)
 8012408:	881a      	ldrh	r2, [r3, #0]
 801240a:	2100      	movs	r1, #0
 801240c:	f00a f972 	bl	801c6f4 <lv_obj_get_style_prop>
}
 8012410:	b2c0      	uxtb	r0, r0
 8012412:	bd08      	pop	{r3, pc}
 8012414:	2000687e 	.word	0x2000687e

08012418 <get_cell_row_align>:
{
 8012418:	b508      	push	{r3, lr}
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_GRID_CELL_Y_ALIGN);
 801241a:	4b03      	ldr	r3, [pc, #12]	@ (8012428 <get_cell_row_align+0x10>)
 801241c:	881a      	ldrh	r2, [r3, #0]
 801241e:	2100      	movs	r1, #0
 8012420:	f00a f968 	bl	801c6f4 <lv_obj_get_style_prop>
}
 8012424:	b2c0      	uxtb	r0, r0
 8012426:	bd08      	pop	{r3, pc}
 8012428:	20006878 	.word	0x20006878

0801242c <calc_rows>:
{
 801242c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012430:	4680      	mov	r8, r0
 8012432:	460c      	mov	r4, r1
    const lv_coord_t * row_templ = get_row_dsc(cont);
 8012434:	f7ff ffa0 	bl	8012378 <get_row_dsc>
 8012438:	4607      	mov	r7, r0
    c->row_num = count_tracks(row_templ);
 801243a:	f7ff ff87 	bl	801234c <count_tracks>
 801243e:	6160      	str	r0, [r4, #20]
    c->y = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8012440:	0040      	lsls	r0, r0, #1
 8012442:	f004 fabb 	bl	80169bc <lv_mem_buf_get>
 8012446:	6060      	str	r0, [r4, #4]
    c->h = lv_mem_buf_get(sizeof(lv_coord_t) * c->row_num);
 8012448:	6960      	ldr	r0, [r4, #20]
 801244a:	0040      	lsls	r0, r0, #1
 801244c:	f004 fab6 	bl	80169bc <lv_mem_buf_get>
 8012450:	60e0      	str	r0, [r4, #12]
    for(i = 0; i < c->row_num; i++) {
 8012452:	2600      	movs	r6, #0
 8012454:	e02a      	b.n	80124ac <calc_rows+0x80>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8012456:	3501      	adds	r5, #1
 8012458:	4640      	mov	r0, r8
 801245a:	f00a feca 	bl	801d1f2 <lv_obj_get_child_cnt>
 801245e:	42a8      	cmp	r0, r5
 8012460:	d91d      	bls.n	801249e <calc_rows+0x72>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 8012462:	4629      	mov	r1, r5
 8012464:	4640      	mov	r0, r8
 8012466:	f00a feaf 	bl	801d1c8 <lv_obj_get_child>
 801246a:	4681      	mov	r9, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801246c:	494b      	ldr	r1, [pc, #300]	@ (801259c <calc_rows+0x170>)
 801246e:	f006 f814 	bl	801849a <lv_obj_has_flag_any>
 8012472:	2800      	cmp	r0, #0
 8012474:	d1ef      	bne.n	8012456 <calc_rows+0x2a>
                uint32_t row_span = get_row_span(item);
 8012476:	4648      	mov	r0, r9
 8012478:	f7ff ff88 	bl	801238c <get_row_span>
                if(row_span != 1) continue;
 801247c:	2801      	cmp	r0, #1
 801247e:	d1ea      	bne.n	8012456 <calc_rows+0x2a>
                uint32_t row_pos = get_row_pos(item);
 8012480:	4648      	mov	r0, r9
 8012482:	f7ff ff8d 	bl	80123a0 <get_row_pos>
                if(row_pos != i) continue;
 8012486:	4286      	cmp	r6, r0
 8012488:	d1e5      	bne.n	8012456 <calc_rows+0x2a>
                size = LV_MAX(size, lv_obj_get_height(item));
 801248a:	4648      	mov	r0, r9
 801248c:	f007 f927 	bl	80196de <lv_obj_get_height>
 8012490:	4558      	cmp	r0, fp
 8012492:	dbe0      	blt.n	8012456 <calc_rows+0x2a>
 8012494:	4648      	mov	r0, r9
 8012496:	f007 f922 	bl	80196de <lv_obj_get_height>
 801249a:	4683      	mov	fp, r0
 801249c:	e7db      	b.n	8012456 <calc_rows+0x2a>
            if(size >= 0) c->h[i] = size;
 801249e:	f1bb 0f00 	cmp.w	fp, #0
 80124a2:	db12      	blt.n	80124ca <calc_rows+0x9e>
 80124a4:	68e3      	ldr	r3, [r4, #12]
 80124a6:	f823 b00a 	strh.w	fp, [r3, sl]
    for(i = 0; i < c->row_num; i++) {
 80124aa:	3601      	adds	r6, #1
 80124ac:	6963      	ldr	r3, [r4, #20]
 80124ae:	42b3      	cmp	r3, r6
 80124b0:	d910      	bls.n	80124d4 <calc_rows+0xa8>
        if(IS_CONTENT(row_templ[i])) {
 80124b2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80124b6:	f937 2016 	ldrsh.w	r2, [r7, r6, lsl #1]
 80124ba:	f641 739a 	movw	r3, #8090	@ 0x1f9a
 80124be:	429a      	cmp	r2, r3
 80124c0:	d1f3      	bne.n	80124aa <calc_rows+0x7e>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80124c2:	2500      	movs	r5, #0
        lv_coord_t size = LV_COORD_MIN;
 80124c4:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80125a0 <calc_rows+0x174>
 80124c8:	e7c6      	b.n	8012458 <calc_rows+0x2c>
            else c->h[i] = 0;
 80124ca:	68e3      	ldr	r3, [r4, #12]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f823 200a 	strh.w	r2, [r3, sl]
 80124d2:	e7ea      	b.n	80124aa <calc_rows+0x7e>
    lv_coord_t grid_h = 0;
 80124d4:	2600      	movs	r6, #0
    uint32_t row_fr_cnt = 0;
 80124d6:	4635      	mov	r5, r6
    for(i = 0; i < c->row_num; i++) {
 80124d8:	4632      	mov	r2, r6
 80124da:	e008      	b.n	80124ee <calc_rows+0xc2>
        else if(IS_CONTENT(x)) {
 80124dc:	f641 719a 	movw	r1, #8090	@ 0x1f9a
 80124e0:	428b      	cmp	r3, r1
 80124e2:	d013      	beq.n	801250c <calc_rows+0xe0>
            c->h[i] = x;
 80124e4:	68e1      	ldr	r1, [r4, #12]
 80124e6:	520b      	strh	r3, [r1, r0]
            grid_h += x;
 80124e8:	4433      	add	r3, r6
 80124ea:	b21e      	sxth	r6, r3
    for(i = 0; i < c->row_num; i++) {
 80124ec:	3201      	adds	r2, #1
 80124ee:	6963      	ldr	r3, [r4, #20]
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d910      	bls.n	8012516 <calc_rows+0xea>
        lv_coord_t x = row_templ[i];
 80124f4:	0050      	lsls	r0, r2, #1
 80124f6:	f937 3012 	ldrsh.w	r3, [r7, r2, lsl #1]
        if(IS_FR(x)) {
 80124fa:	f641 719a 	movw	r1, #8090	@ 0x1f9a
 80124fe:	428b      	cmp	r3, r1
 8012500:	ddec      	ble.n	80124dc <calc_rows+0xb0>
            row_fr_cnt += GET_FR(x);
 8012502:	442b      	add	r3, r5
 8012504:	f5a3 55fc 	sub.w	r5, r3, #8064	@ 0x1f80
 8012508:	3d1b      	subs	r5, #27
 801250a:	e7ef      	b.n	80124ec <calc_rows+0xc0>
            grid_h += c->h[i];
 801250c:	68e3      	ldr	r3, [r4, #12]
 801250e:	5a1b      	ldrh	r3, [r3, r0]
 8012510:	4433      	add	r3, r6
 8012512:	b21e      	sxth	r6, r3
 8012514:	e7ea      	b.n	80124ec <calc_rows+0xc0>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_row(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 8012516:	2214      	movs	r2, #20
 8012518:	2100      	movs	r1, #0
 801251a:	4640      	mov	r0, r8
 801251c:	f00a f8ea 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012520:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t cont_h = lv_obj_get_content_height(cont) - row_gap * (c->row_num - 1);
 8012524:	4640      	mov	r0, r8
 8012526:	f007 f90d 	bl	8019744 <lv_obj_get_content_height>
 801252a:	b281      	uxth	r1, r0
 801252c:	6963      	ldr	r3, [r4, #20]
 801252e:	3b01      	subs	r3, #1
 8012530:	fb19 f903 	smulbb	r9, r9, r3
 8012534:	eba1 0109 	sub.w	r1, r1, r9
 8012538:	b289      	uxth	r1, r1
    lv_coord_t free_h = cont_h - grid_h;
 801253a:	1b89      	subs	r1, r1, r6
 801253c:	b209      	sxth	r1, r1
    if(free_h < 0) free_h = 0;
 801253e:	2900      	cmp	r1, #0
 8012540:	db04      	blt.n	801254c <calc_rows+0x120>
    int32_t last_fr_x = 0;
 8012542:	2600      	movs	r6, #0
    int32_t last_fr_i = -1;
 8012544:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
    for(i = 0; i < c->row_num; i++) {
 8012548:	4633      	mov	r3, r6
 801254a:	e002      	b.n	8012552 <calc_rows+0x126>
    if(free_h < 0) free_h = 0;
 801254c:	2100      	movs	r1, #0
 801254e:	e7f8      	b.n	8012542 <calc_rows+0x116>
    for(i = 0; i < c->row_num; i++) {
 8012550:	3301      	adds	r3, #1
 8012552:	6962      	ldr	r2, [r4, #20]
 8012554:	429a      	cmp	r2, r3
 8012556:	d912      	bls.n	801257e <calc_rows+0x152>
        lv_coord_t x = row_templ[i];
 8012558:	f937 2013 	ldrsh.w	r2, [r7, r3, lsl #1]
        if(IS_FR(x)) {
 801255c:	f641 709a 	movw	r0, #8090	@ 0x1f9a
 8012560:	4282      	cmp	r2, r0
 8012562:	ddf5      	ble.n	8012550 <calc_rows+0x124>
            lv_coord_t f = GET_FR(x);
 8012564:	f5a2 52fc 	sub.w	r2, r2, #8064	@ 0x1f80
 8012568:	3a1b      	subs	r2, #27
 801256a:	b216      	sxth	r6, r2
            c->h[i] = (free_h * f) / row_fr_cnt;
 801256c:	fb06 f201 	mul.w	r2, r6, r1
 8012570:	fbb2 f2f5 	udiv	r2, r2, r5
 8012574:	68e0      	ldr	r0, [r4, #12]
 8012576:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
            last_fr_i = i;
 801257a:	469c      	mov	ip, r3
            last_fr_x = f;
 801257c:	e7e8      	b.n	8012550 <calc_rows+0x124>
    if(last_fr_i >= 0) {
 801257e:	f1bc 0f00 	cmp.w	ip, #0
 8012582:	db08      	blt.n	8012596 <calc_rows+0x16a>
        c->h[last_fr_i] = free_h - ((free_h * (row_fr_cnt - last_fr_x)) / row_fr_cnt);
 8012584:	1bab      	subs	r3, r5, r6
 8012586:	fb01 f303 	mul.w	r3, r1, r3
 801258a:	fbb3 f3f5 	udiv	r3, r3, r5
 801258e:	68e2      	ldr	r2, [r4, #12]
 8012590:	1ac9      	subs	r1, r1, r3
 8012592:	f822 101c 	strh.w	r1, [r2, ip, lsl #1]
}
 8012596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259a:	bf00      	nop
 801259c:	00060001 	.word	0x00060001
 80125a0:	ffffe001 	.word	0xffffe001

080125a4 <calc_cols>:
{
 80125a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a8:	b083      	sub	sp, #12
 80125aa:	4681      	mov	r9, r0
 80125ac:	460c      	mov	r4, r1
    const lv_coord_t * col_templ = get_col_dsc(cont);
 80125ae:	f7ff fed9 	bl	8012364 <get_col_dsc>
 80125b2:	4680      	mov	r8, r0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 80125b4:	4648      	mov	r0, r9
 80125b6:	f007 f8a5 	bl	8019704 <lv_obj_get_content_width>
 80125ba:	9001      	str	r0, [sp, #4]
    c->col_num = count_tracks(col_templ);
 80125bc:	4640      	mov	r0, r8
 80125be:	f7ff fec5 	bl	801234c <count_tracks>
 80125c2:	6120      	str	r0, [r4, #16]
    c->x = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80125c4:	0040      	lsls	r0, r0, #1
 80125c6:	f004 f9f9 	bl	80169bc <lv_mem_buf_get>
 80125ca:	6020      	str	r0, [r4, #0]
    c->w = lv_mem_buf_get(sizeof(lv_coord_t) * c->col_num);
 80125cc:	6920      	ldr	r0, [r4, #16]
 80125ce:	0040      	lsls	r0, r0, #1
 80125d0:	f004 f9f4 	bl	80169bc <lv_mem_buf_get>
 80125d4:	60a0      	str	r0, [r4, #8]
    for(i = 0; i < c->col_num; i++) {
 80125d6:	2600      	movs	r6, #0
 80125d8:	e02a      	b.n	8012630 <calc_cols+0x8c>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 80125da:	3501      	adds	r5, #1
 80125dc:	4648      	mov	r0, r9
 80125de:	f00a fe08 	bl	801d1f2 <lv_obj_get_child_cnt>
 80125e2:	42a8      	cmp	r0, r5
 80125e4:	d91d      	bls.n	8012622 <calc_cols+0x7e>
                lv_obj_t * item = lv_obj_get_child(cont, ci);
 80125e6:	4629      	mov	r1, r5
 80125e8:	4648      	mov	r0, r9
 80125ea:	f00a fded 	bl	801d1c8 <lv_obj_get_child>
 80125ee:	4607      	mov	r7, r0
                if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80125f0:	4948      	ldr	r1, [pc, #288]	@ (8012714 <calc_cols+0x170>)
 80125f2:	f005 ff52 	bl	801849a <lv_obj_has_flag_any>
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d1ef      	bne.n	80125da <calc_cols+0x36>
                uint32_t col_span = get_col_span(item);
 80125fa:	4638      	mov	r0, r7
 80125fc:	f7ff feda 	bl	80123b4 <get_col_span>
                if(col_span != 1) continue;
 8012600:	2801      	cmp	r0, #1
 8012602:	d1ea      	bne.n	80125da <calc_cols+0x36>
                uint32_t col_pos = get_col_pos(item);
 8012604:	4638      	mov	r0, r7
 8012606:	f7ff fedf 	bl	80123c8 <get_col_pos>
                if(col_pos != i) continue;
 801260a:	4286      	cmp	r6, r0
 801260c:	d1e5      	bne.n	80125da <calc_cols+0x36>
                size = LV_MAX(size, lv_obj_get_width(item));
 801260e:	4638      	mov	r0, r7
 8012610:	f007 f85e 	bl	80196d0 <lv_obj_get_width>
 8012614:	4558      	cmp	r0, fp
 8012616:	dbe0      	blt.n	80125da <calc_cols+0x36>
 8012618:	4638      	mov	r0, r7
 801261a:	f007 f859 	bl	80196d0 <lv_obj_get_width>
 801261e:	4683      	mov	fp, r0
 8012620:	e7db      	b.n	80125da <calc_cols+0x36>
            if(size >= 0) c->w[i] = size;
 8012622:	f1bb 0f00 	cmp.w	fp, #0
 8012626:	db12      	blt.n	801264e <calc_cols+0xaa>
 8012628:	68a3      	ldr	r3, [r4, #8]
 801262a:	f823 b00a 	strh.w	fp, [r3, sl]
    for(i = 0; i < c->col_num; i++) {
 801262e:	3601      	adds	r6, #1
 8012630:	6923      	ldr	r3, [r4, #16]
 8012632:	42b3      	cmp	r3, r6
 8012634:	d910      	bls.n	8012658 <calc_cols+0xb4>
        if(IS_CONTENT(col_templ[i])) {
 8012636:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801263a:	f938 2016 	ldrsh.w	r2, [r8, r6, lsl #1]
 801263e:	f641 739a 	movw	r3, #8090	@ 0x1f9a
 8012642:	429a      	cmp	r2, r3
 8012644:	d1f3      	bne.n	801262e <calc_cols+0x8a>
            for(ci = 0; ci < lv_obj_get_child_cnt(cont); ci++) {
 8012646:	2500      	movs	r5, #0
        lv_coord_t size = LV_COORD_MIN;
 8012648:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8012718 <calc_cols+0x174>
 801264c:	e7c6      	b.n	80125dc <calc_cols+0x38>
            else c->w[i] = 0;
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	2200      	movs	r2, #0
 8012652:	f823 200a 	strh.w	r2, [r3, sl]
 8012656:	e7ea      	b.n	801262e <calc_cols+0x8a>
    lv_coord_t grid_w = 0;
 8012658:	2600      	movs	r6, #0
    uint32_t col_fr_cnt = 0;
 801265a:	4635      	mov	r5, r6
    for(i = 0; i < c->col_num; i++) {
 801265c:	4632      	mov	r2, r6
 801265e:	e008      	b.n	8012672 <calc_cols+0xce>
        else if(IS_CONTENT(x)) {
 8012660:	f641 719a 	movw	r1, #8090	@ 0x1f9a
 8012664:	428b      	cmp	r3, r1
 8012666:	d013      	beq.n	8012690 <calc_cols+0xec>
            c->w[i] = x;
 8012668:	68a1      	ldr	r1, [r4, #8]
 801266a:	520b      	strh	r3, [r1, r0]
            grid_w += x;
 801266c:	4433      	add	r3, r6
 801266e:	b21e      	sxth	r6, r3
    for(i = 0; i < c->col_num; i++) {
 8012670:	3201      	adds	r2, #1
 8012672:	6923      	ldr	r3, [r4, #16]
 8012674:	4293      	cmp	r3, r2
 8012676:	d910      	bls.n	801269a <calc_cols+0xf6>
        lv_coord_t x = col_templ[i];
 8012678:	0050      	lsls	r0, r2, #1
 801267a:	f938 3012 	ldrsh.w	r3, [r8, r2, lsl #1]
        if(IS_FR(x)) {
 801267e:	f641 719a 	movw	r1, #8090	@ 0x1f9a
 8012682:	428b      	cmp	r3, r1
 8012684:	ddec      	ble.n	8012660 <calc_cols+0xbc>
            col_fr_cnt += GET_FR(x);
 8012686:	442b      	add	r3, r5
 8012688:	f5a3 55fc 	sub.w	r5, r3, #8064	@ 0x1f80
 801268c:	3d1b      	subs	r5, #27
 801268e:	e7ef      	b.n	8012670 <calc_cols+0xcc>
            grid_w += c->w[i];
 8012690:	68a3      	ldr	r3, [r4, #8]
 8012692:	5a1b      	ldrh	r3, [r3, r0]
 8012694:	4433      	add	r3, r6
 8012696:	b21e      	sxth	r6, r3
 8012698:	e7ea      	b.n	8012670 <calc_cols+0xcc>
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 801269a:	2215      	movs	r2, #21
 801269c:	2100      	movs	r1, #0
 801269e:	4648      	mov	r0, r9
 80126a0:	f00a f828 	bl	801c6f4 <lv_obj_get_style_prop>
    cont_w -= col_gap * (c->col_num - 1);
 80126a4:	6923      	ldr	r3, [r4, #16]
 80126a6:	3b01      	subs	r3, #1
 80126a8:	fb10 f003 	smulbb	r0, r0, r3
 80126ac:	9b01      	ldr	r3, [sp, #4]
 80126ae:	1a19      	subs	r1, r3, r0
 80126b0:	b289      	uxth	r1, r1
    lv_coord_t free_w = cont_w - grid_w;
 80126b2:	1b89      	subs	r1, r1, r6
 80126b4:	b209      	sxth	r1, r1
    if(free_w < 0) free_w = 0;
 80126b6:	2900      	cmp	r1, #0
 80126b8:	db04      	blt.n	80126c4 <calc_cols+0x120>
    int32_t last_fr_x = 0;
 80126ba:	2600      	movs	r6, #0
    int32_t last_fr_i = -1;
 80126bc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
    for(i = 0; i < c->col_num; i++) {
 80126c0:	4633      	mov	r3, r6
 80126c2:	e002      	b.n	80126ca <calc_cols+0x126>
    if(free_w < 0) free_w = 0;
 80126c4:	2100      	movs	r1, #0
 80126c6:	e7f8      	b.n	80126ba <calc_cols+0x116>
    for(i = 0; i < c->col_num; i++) {
 80126c8:	3301      	adds	r3, #1
 80126ca:	6922      	ldr	r2, [r4, #16]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d912      	bls.n	80126f6 <calc_cols+0x152>
        lv_coord_t x = col_templ[i];
 80126d0:	f938 2013 	ldrsh.w	r2, [r8, r3, lsl #1]
        if(IS_FR(x)) {
 80126d4:	f641 709a 	movw	r0, #8090	@ 0x1f9a
 80126d8:	4282      	cmp	r2, r0
 80126da:	ddf5      	ble.n	80126c8 <calc_cols+0x124>
            lv_coord_t f = GET_FR(x);
 80126dc:	f5a2 52fc 	sub.w	r2, r2, #8064	@ 0x1f80
 80126e0:	3a1b      	subs	r2, #27
 80126e2:	b216      	sxth	r6, r2
            c->w[i] = (free_w * f) / col_fr_cnt;
 80126e4:	fb06 f201 	mul.w	r2, r6, r1
 80126e8:	fbb2 f2f5 	udiv	r2, r2, r5
 80126ec:	68a0      	ldr	r0, [r4, #8]
 80126ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
            last_fr_i = i;
 80126f2:	461f      	mov	r7, r3
            last_fr_x = f;
 80126f4:	e7e8      	b.n	80126c8 <calc_cols+0x124>
    if(last_fr_i >= 0) {
 80126f6:	2f00      	cmp	r7, #0
 80126f8:	db08      	blt.n	801270c <calc_cols+0x168>
        c->w[last_fr_i] = free_w - ((free_w * (col_fr_cnt - last_fr_x)) / col_fr_cnt);
 80126fa:	1bab      	subs	r3, r5, r6
 80126fc:	fb01 f303 	mul.w	r3, r1, r3
 8012700:	fbb3 f3f5 	udiv	r3, r3, r5
 8012704:	68a2      	ldr	r2, [r4, #8]
 8012706:	1ac9      	subs	r1, r1, r3
 8012708:	f822 1017 	strh.w	r1, [r2, r7, lsl #1]
}
 801270c:	b003      	add	sp, #12
 801270e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012712:	bf00      	nop
 8012714:	00060001 	.word	0x00060001
 8012718:	ffffe001 	.word	0xffffe001

0801271c <calc>:
{
 801271c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012720:	b085      	sub	sp, #20
 8012722:	4604      	mov	r4, r0
 8012724:	460d      	mov	r5, r1
    if(lv_obj_get_child(cont, 0) == NULL) {
 8012726:	2100      	movs	r1, #0
 8012728:	f00a fd4e 	bl	801d1c8 <lv_obj_get_child>
 801272c:	2800      	cmp	r0, #0
 801272e:	d066      	beq.n	80127fe <calc+0xe2>
    calc_rows(cont, calc_out);
 8012730:	4629      	mov	r1, r5
 8012732:	4620      	mov	r0, r4
 8012734:	f7ff fe7a 	bl	801242c <calc_rows>
    calc_cols(cont, calc_out);
 8012738:	4629      	mov	r1, r5
 801273a:	4620      	mov	r0, r4
 801273c:	f7ff ff32 	bl	80125a4 <calc_cols>
 8012740:	2215      	movs	r2, #21
 8012742:	2100      	movs	r1, #0
 8012744:	4620      	mov	r0, r4
 8012746:	f009 ffd5 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801274a:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 801274e:	2214      	movs	r2, #20
 8012750:	2100      	movs	r1, #0
 8012752:	4620      	mov	r0, r4
 8012754:	f009 ffce 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012758:	b207      	sxth	r7, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801275a:	2216      	movs	r2, #22
 801275c:	2100      	movs	r1, #0
 801275e:	4620      	mov	r0, r4
 8012760:	f009 ffc8 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8012764:	b2c6      	uxtb	r6, r0
    bool rev = lv_obj_get_style_base_dir(cont, LV_PART_MAIN) == LV_BASE_DIR_RTL ? true : false;
 8012766:	2e01      	cmp	r6, #1
 8012768:	bf14      	ite	ne
 801276a:	2600      	movne	r6, #0
 801276c:	2601      	moveq	r6, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801276e:	2201      	movs	r2, #1
 8012770:	2100      	movs	r1, #0
 8012772:	4620      	mov	r0, r4
 8012774:	f009 ffbe 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012778:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801277c:	2204      	movs	r2, #4
 801277e:	2100      	movs	r1, #0
 8012780:	4620      	mov	r0, r4
 8012782:	f009 ffb7 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012786:	fa0f f880 	sxth.w	r8, r0
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 801278a:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801278e:	4599      	cmp	r9, r3
 8012790:	d03a      	beq.n	8012808 <calc+0xec>
 8012792:	f04f 0b00 	mov.w	fp, #0
    lv_coord_t cont_w = lv_obj_get_content_width(cont);
 8012796:	4620      	mov	r0, r4
 8012798:	f006 ffb4 	bl	8019704 <lv_obj_get_content_width>
 801279c:	4681      	mov	r9, r0
    calc_out->grid_w = grid_align(cont_w, auto_w, get_grid_col_align(cont), col_gap, calc_out->col_num, calc_out->w,
 801279e:	4620      	mov	r0, r4
 80127a0:	f7ff fe1c 	bl	80123dc <get_grid_col_align>
 80127a4:	4602      	mov	r2, r0
 80127a6:	9603      	str	r6, [sp, #12]
 80127a8:	682b      	ldr	r3, [r5, #0]
 80127aa:	9302      	str	r3, [sp, #8]
 80127ac:	68ab      	ldr	r3, [r5, #8]
 80127ae:	9301      	str	r3, [sp, #4]
 80127b0:	692b      	ldr	r3, [r5, #16]
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	4653      	mov	r3, sl
 80127b6:	4659      	mov	r1, fp
 80127b8:	4648      	mov	r0, r9
 80127ba:	f7ff fd2d 	bl	8012218 <grid_align>
 80127be:	8328      	strh	r0, [r5, #24]
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 80127c0:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 80127c4:	4598      	cmp	r8, r3
 80127c6:	d02a      	beq.n	801281e <calc+0x102>
 80127c8:	f04f 0800 	mov.w	r8, #0
    lv_coord_t cont_h = lv_obj_get_content_height(cont);
 80127cc:	4620      	mov	r0, r4
 80127ce:	f006 ffb9 	bl	8019744 <lv_obj_get_content_height>
 80127d2:	4606      	mov	r6, r0
    calc_out->grid_h = grid_align(cont_h, auto_h, get_grid_row_align(cont), row_gap, calc_out->row_num, calc_out->h,
 80127d4:	4620      	mov	r0, r4
 80127d6:	f7ff fe0b 	bl	80123f0 <get_grid_row_align>
 80127da:	4602      	mov	r2, r0
 80127dc:	2300      	movs	r3, #0
 80127de:	9303      	str	r3, [sp, #12]
 80127e0:	686b      	ldr	r3, [r5, #4]
 80127e2:	9302      	str	r3, [sp, #8]
 80127e4:	68eb      	ldr	r3, [r5, #12]
 80127e6:	9301      	str	r3, [sp, #4]
 80127e8:	696b      	ldr	r3, [r5, #20]
 80127ea:	9300      	str	r3, [sp, #0]
 80127ec:	463b      	mov	r3, r7
 80127ee:	4641      	mov	r1, r8
 80127f0:	4630      	mov	r0, r6
 80127f2:	f7ff fd11 	bl	8012218 <grid_align>
 80127f6:	8368      	strh	r0, [r5, #26]
}
 80127f8:	b005      	add	sp, #20
 80127fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_memset_00(calc_out, sizeof(_lv_grid_calc_t));
 80127fe:	211c      	movs	r1, #28
 8012800:	4628      	mov	r0, r5
 8012802:	f004 fa5f 	bl	8016cc4 <lv_memset_00>
        return;
 8012806:	e7f7      	b.n	80127f8 <calc+0xdc>
    bool auto_w = (w_set == LV_SIZE_CONTENT && !cont->w_layout) ? true : false;
 8012808:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 801280c:	f013 0f08 	tst.w	r3, #8
 8012810:	d002      	beq.n	8012818 <calc+0xfc>
 8012812:	f04f 0b00 	mov.w	fp, #0
 8012816:	e7be      	b.n	8012796 <calc+0x7a>
 8012818:	f04f 0b01 	mov.w	fp, #1
 801281c:	e7bb      	b.n	8012796 <calc+0x7a>
    bool auto_h = (h_set == LV_SIZE_CONTENT && !cont->h_layout) ? true : false;
 801281e:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012822:	f013 0f04 	tst.w	r3, #4
 8012826:	d002      	beq.n	801282e <calc+0x112>
 8012828:	f04f 0800 	mov.w	r8, #0
 801282c:	e7ce      	b.n	80127cc <calc+0xb0>
 801282e:	f04f 0801 	mov.w	r8, #1
 8012832:	e7cb      	b.n	80127cc <calc+0xb0>

08012834 <item_repos>:
{
 8012834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012838:	b089      	sub	sp, #36	@ 0x24
 801283a:	4604      	mov	r4, r0
 801283c:	460d      	mov	r5, r1
 801283e:	4616      	mov	r6, r2
    if(lv_obj_has_flag_any(item, LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) return;
 8012840:	49c4      	ldr	r1, [pc, #784]	@ (8012b54 <item_repos+0x320>)
 8012842:	f005 fe2a 	bl	801849a <lv_obj_has_flag_any>
 8012846:	b110      	cbz	r0, 801284e <item_repos+0x1a>
}
 8012848:	b009      	add	sp, #36	@ 0x24
 801284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t col_span = get_col_span(item);
 801284e:	4620      	mov	r0, r4
 8012850:	f7ff fdb0 	bl	80123b4 <get_col_span>
 8012854:	4607      	mov	r7, r0
    uint32_t row_span = get_row_span(item);
 8012856:	4620      	mov	r0, r4
 8012858:	f7ff fd98 	bl	801238c <get_row_span>
    if(row_span == 0 || col_span == 0) return;
 801285c:	4683      	mov	fp, r0
 801285e:	2800      	cmp	r0, #0
 8012860:	d0f2      	beq.n	8012848 <item_repos+0x14>
 8012862:	2f00      	cmp	r7, #0
 8012864:	d0f0      	beq.n	8012848 <item_repos+0x14>
    uint32_t col_pos = get_col_pos(item);
 8012866:	4620      	mov	r0, r4
 8012868:	f7ff fdae 	bl	80123c8 <get_col_pos>
 801286c:	4681      	mov	r9, r0
    uint32_t row_pos = get_row_pos(item);
 801286e:	4620      	mov	r0, r4
 8012870:	f7ff fd96 	bl	80123a0 <get_row_pos>
 8012874:	4680      	mov	r8, r0
    lv_grid_align_t col_align = get_cell_col_align(item);
 8012876:	4620      	mov	r0, r4
 8012878:	f7ff fdc4 	bl	8012404 <get_cell_col_align>
 801287c:	4682      	mov	sl, r0
    lv_grid_align_t row_align = get_cell_row_align(item);
 801287e:	4620      	mov	r0, r4
 8012880:	f7ff fdca 	bl	8012418 <get_cell_row_align>
 8012884:	9001      	str	r0, [sp, #4]
    lv_coord_t col_x1 = c->x[col_pos];
 8012886:	682b      	ldr	r3, [r5, #0]
 8012888:	f933 2019 	ldrsh.w	r2, [r3, r9, lsl #1]
    lv_coord_t col_x2 = c->x[col_pos + col_span - 1] + c->w[col_pos + col_span - 1];
 801288c:	444f      	add	r7, r9
 801288e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012892:	440f      	add	r7, r1
 8012894:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8012898:	68a8      	ldr	r0, [r5, #8]
 801289a:	f830 0017 	ldrh.w	r0, [r0, r7, lsl #1]
 801289e:	4403      	add	r3, r0
 80128a0:	b29b      	uxth	r3, r3
    lv_coord_t col_w = col_x2 - col_x1;
 80128a2:	1a9b      	subs	r3, r3, r2
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	9204      	str	r2, [sp, #16]
 80128a8:	b21b      	sxth	r3, r3
 80128aa:	9302      	str	r3, [sp, #8]
    lv_coord_t row_y1 = c->y[row_pos];
 80128ac:	686b      	ldr	r3, [r5, #4]
 80128ae:	f933 2018 	ldrsh.w	r2, [r3, r8, lsl #1]
    lv_coord_t row_y2 = c->y[row_pos + row_span - 1] + c->h[row_pos + row_span - 1];
 80128b2:	44c3      	add	fp, r8
 80128b4:	448b      	add	fp, r1
 80128b6:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 80128ba:	68e9      	ldr	r1, [r5, #12]
 80128bc:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
 80128c0:	440b      	add	r3, r1
 80128c2:	b29b      	uxth	r3, r3
    lv_coord_t row_h = row_y2 - row_y1;
 80128c4:	1a9b      	subs	r3, r3, r2
 80128c6:	b29a      	uxth	r2, r3
 80128c8:	9205      	str	r2, [sp, #20]
 80128ca:	b21b      	sxth	r3, r3
 80128cc:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80128ce:	2216      	movs	r2, #22
 80128d0:	2100      	movs	r1, #0
 80128d2:	4620      	mov	r0, r4
 80128d4:	f009 ff0e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80128d8:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(item, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80128da:	2801      	cmp	r0, #1
 80128dc:	f000 80c2 	beq.w	8012a64 <item_repos+0x230>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80128e0:	8b27      	ldrh	r7, [r4, #24]
 80128e2:	8aa3      	ldrh	r3, [r4, #20]
 80128e4:	1aff      	subs	r7, r7, r3
 80128e6:	b2bf      	uxth	r7, r7
 80128e8:	3701      	adds	r7, #1
 80128ea:	b23f      	sxth	r7, r7
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80128ec:	f8b4 b01a 	ldrh.w	fp, [r4, #26]
 80128f0:	8ae3      	ldrh	r3, [r4, #22]
 80128f2:	ebab 0b03 	sub.w	fp, fp, r3
 80128f6:	fa1f fb8b 	uxth.w	fp, fp
 80128fa:	f10b 0b01 	add.w	fp, fp, #1
 80128fe:	fa0f fb8b 	sxth.w	fp, fp
    switch(col_align) {
 8012902:	f1ba 0f02 	cmp.w	sl, #2
 8012906:	f000 80d7 	beq.w	8012ab8 <item_repos+0x284>
 801290a:	f1ba 0f03 	cmp.w	sl, #3
 801290e:	f000 80b6 	beq.w	8012a7e <item_repos+0x24a>
 8012912:	f1ba 0f01 	cmp.w	sl, #1
 8012916:	f000 80bd 	beq.w	8012a94 <item_repos+0x260>
            x = c->x[col_pos];
 801291a:	682b      	ldr	r3, [r5, #0]
 801291c:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
            item->w_layout = 0;
 8012920:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012924:	f023 0308 	bic.w	r3, r3, #8
 8012928:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
    switch(row_align) {
 801292c:	9b01      	ldr	r3, [sp, #4]
 801292e:	2b02      	cmp	r3, #2
 8012930:	f000 80f6 	beq.w	8012b20 <item_repos+0x2ec>
 8012934:	2b03      	cmp	r3, #3
 8012936:	f000 80d5 	beq.w	8012ae4 <item_repos+0x2b0>
 801293a:	2b01      	cmp	r3, #1
 801293c:	f000 80de 	beq.w	8012afc <item_repos+0x2c8>
            y = c->y[row_pos];
 8012940:	686b      	ldr	r3, [r5, #4]
 8012942:	f933 5018 	ldrsh.w	r5, [r3, r8, lsl #1]
            item->h_layout = 0;
 8012946:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 801294a:	f023 0304 	bic.w	r3, r3, #4
 801294e:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8012952:	4620      	mov	r0, r4
 8012954:	f006 febc 	bl	80196d0 <lv_obj_get_width>
 8012958:	42b8      	cmp	r0, r7
 801295a:	f000 80f4 	beq.w	8012b46 <item_repos+0x312>
    dest->x1 = src->x1;
 801295e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8012962:	f8ad 3018 	strh.w	r3, [sp, #24]
    dest->y1 = src->y1;
 8012966:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801296a:	f8ad 301a 	strh.w	r3, [sp, #26]
    dest->x2 = src->x2;
 801296e:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8012972:	f8ad 301c 	strh.w	r3, [sp, #28]
    dest->y2 = src->y2;
 8012976:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801297a:	f8ad 301e 	strh.w	r3, [sp, #30]
        lv_obj_invalidate(item);
 801297e:	4620      	mov	r0, r4
 8012980:	f007 fa91 	bl	8019ea6 <lv_obj_invalidate>
        lv_area_set_width(&item->coords, item_w);
 8012984:	f104 0314 	add.w	r3, r4, #20
 8012988:	4639      	mov	r1, r7
 801298a:	461f      	mov	r7, r3
 801298c:	4618      	mov	r0, r3
 801298e:	f7ee fff9 	bl	8001984 <lv_area_set_width>
        lv_area_set_height(&item->coords, item_h);
 8012992:	4659      	mov	r1, fp
 8012994:	4638      	mov	r0, r7
 8012996:	f7ee fffb 	bl	8001990 <lv_area_set_height>
        lv_obj_invalidate(item);
 801299a:	4620      	mov	r0, r4
 801299c:	f007 fa83 	bl	8019ea6 <lv_obj_invalidate>
        lv_event_send(item, LV_EVENT_SIZE_CHANGED, &old_coords);
 80129a0:	aa06      	add	r2, sp, #24
 80129a2:	2129      	movs	r1, #41	@ 0x29
 80129a4:	4620      	mov	r0, r4
 80129a6:	f7fe f98f 	bl	8010cc8 <lv_event_send>
        lv_event_send(lv_obj_get_parent(item), LV_EVENT_CHILD_CHANGED, item);
 80129aa:	4620      	mov	r0, r4
 80129ac:	f00a fbe2 	bl	801d174 <lv_obj_get_parent>
 80129b0:	4622      	mov	r2, r4
 80129b2:	2122      	movs	r1, #34	@ 0x22
 80129b4:	f7fe f988 	bl	8010cc8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 80129b8:	226b      	movs	r2, #107	@ 0x6b
 80129ba:	2100      	movs	r1, #0
 80129bc:	4620      	mov	r0, r4
 80129be:	f009 fe99 	bl	801c6f4 <lv_obj_get_style_prop>
 80129c2:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 80129c4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 80129c8:	226c      	movs	r2, #108	@ 0x6c
 80129ca:	2100      	movs	r1, #0
 80129cc:	4620      	mov	r0, r4
 80129ce:	f009 fe91 	bl	801c6f4 <lv_obj_get_style_prop>
 80129d2:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 80129d4:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(item);
 80129d8:	4620      	mov	r0, r4
 80129da:	f006 fe79 	bl	80196d0 <lv_obj_get_width>
 80129de:	9001      	str	r0, [sp, #4]
    lv_coord_t h = lv_obj_get_height(item);
 80129e0:	4620      	mov	r0, r4
 80129e2:	f006 fe7c 	bl	80196de <lv_obj_get_height>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 80129e6:	f408 48c0 	and.w	r8, r8, #24576	@ 0x6000
 80129ea:	f5b8 5f00 	cmp.w	r8, #8192	@ 0x2000
 80129ee:	f000 80b3 	beq.w	8012b58 <item_repos+0x324>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 80129f2:	f407 47c0 	and.w	r7, r7, #24576	@ 0x6000
 80129f6:	f5b7 5f00 	cmp.w	r7, #8192	@ 0x2000
 80129fa:	f000 80c5 	beq.w	8012b88 <item_repos+0x354>
    x += tr_x;
 80129fe:	eb09 070b 	add.w	r7, r9, fp
    y += tr_y;
 8012a02:	eb05 020a 	add.w	r2, r5, sl
    lv_coord_t diff_x = hint->grid_abs.x + x - item->coords.x1;
 8012a06:	8933      	ldrh	r3, [r6, #8]
 8012a08:	fa13 f787 	uxtah	r7, r3, r7
 8012a0c:	b2bf      	uxth	r7, r7
 8012a0e:	8aa3      	ldrh	r3, [r4, #20]
 8012a10:	1aff      	subs	r7, r7, r3
 8012a12:	fa1f f887 	uxth.w	r8, r7
 8012a16:	b23f      	sxth	r7, r7
    lv_coord_t diff_y = hint->grid_abs.y + y - item->coords.y1;
 8012a18:	8973      	ldrh	r3, [r6, #10]
 8012a1a:	fa13 f282 	uxtah	r2, r3, r2
 8012a1e:	b292      	uxth	r2, r2
 8012a20:	8ae3      	ldrh	r3, [r4, #22]
 8012a22:	1ad2      	subs	r2, r2, r3
 8012a24:	b296      	uxth	r6, r2
 8012a26:	b215      	sxth	r5, r2
    if(diff_x || diff_y) {
 8012a28:	b917      	cbnz	r7, 8012a30 <item_repos+0x1fc>
 8012a2a:	2d00      	cmp	r5, #0
 8012a2c:	f43f af0c 	beq.w	8012848 <item_repos+0x14>
        lv_obj_invalidate(item);
 8012a30:	4620      	mov	r0, r4
 8012a32:	f007 fa38 	bl	8019ea6 <lv_obj_invalidate>
        item->coords.x1 += diff_x;
 8012a36:	8aa3      	ldrh	r3, [r4, #20]
 8012a38:	4443      	add	r3, r8
 8012a3a:	82a3      	strh	r3, [r4, #20]
        item->coords.x2 += diff_x;
 8012a3c:	8b23      	ldrh	r3, [r4, #24]
 8012a3e:	4498      	add	r8, r3
 8012a40:	f8a4 8018 	strh.w	r8, [r4, #24]
        item->coords.y1 += diff_y;
 8012a44:	8ae3      	ldrh	r3, [r4, #22]
 8012a46:	4433      	add	r3, r6
 8012a48:	82e3      	strh	r3, [r4, #22]
        item->coords.y2 += diff_y;
 8012a4a:	8b63      	ldrh	r3, [r4, #26]
 8012a4c:	441e      	add	r6, r3
 8012a4e:	8366      	strh	r6, [r4, #26]
        lv_obj_invalidate(item);
 8012a50:	4620      	mov	r0, r4
 8012a52:	f007 fa28 	bl	8019ea6 <lv_obj_invalidate>
        lv_obj_move_children_by(item, diff_x, diff_y, false);
 8012a56:	2300      	movs	r3, #0
 8012a58:	462a      	mov	r2, r5
 8012a5a:	4639      	mov	r1, r7
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	f007 f88d 	bl	8019b7c <lv_obj_move_children_by>
 8012a62:	e6f1      	b.n	8012848 <item_repos+0x14>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8012a64:	f1ba 0f00 	cmp.w	sl, #0
 8012a68:	d006      	beq.n	8012a78 <item_repos+0x244>
        else if(col_align == LV_GRID_ALIGN_END) col_align = LV_GRID_ALIGN_START;
 8012a6a:	f1ba 0f02 	cmp.w	sl, #2
 8012a6e:	f47f af37 	bne.w	80128e0 <item_repos+0xac>
 8012a72:	f04f 0a00 	mov.w	sl, #0
 8012a76:	e733      	b.n	80128e0 <item_repos+0xac>
        if(col_align == LV_GRID_ALIGN_START) col_align = LV_GRID_ALIGN_END;
 8012a78:	f04f 0a02 	mov.w	sl, #2
 8012a7c:	e730      	b.n	80128e0 <item_repos+0xac>
            x = c->x[col_pos];
 8012a7e:	682b      	ldr	r3, [r5, #0]
 8012a80:	f933 9019 	ldrsh.w	r9, [r3, r9, lsl #1]
            item->w_layout = 1;
 8012a84:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012a88:	f043 0308 	orr.w	r3, r3, #8
 8012a8c:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            item_w = col_w;
 8012a90:	9f02      	ldr	r7, [sp, #8]
            break;
 8012a92:	e74b      	b.n	801292c <item_repos+0xf8>
            x = c->x[col_pos] + (col_w - item_w) / 2;
 8012a94:	682b      	ldr	r3, [r5, #0]
 8012a96:	f833 9019 	ldrh.w	r9, [r3, r9, lsl #1]
 8012a9a:	9b02      	ldr	r3, [sp, #8]
 8012a9c:	1bdb      	subs	r3, r3, r7
 8012a9e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012aa2:	eb09 0963 	add.w	r9, r9, r3, asr #1
 8012aa6:	fa0f f989 	sxth.w	r9, r9
            item->w_layout = 0;
 8012aaa:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012aae:	f023 0308 	bic.w	r3, r3, #8
 8012ab2:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            break;
 8012ab6:	e739      	b.n	801292c <item_repos+0xf8>
            x = c->x[col_pos] + col_w - lv_obj_get_width(item);
 8012ab8:	682b      	ldr	r3, [r5, #0]
 8012aba:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8012abe:	9a04      	ldr	r2, [sp, #16]
 8012ac0:	441a      	add	r2, r3
 8012ac2:	fa1f f982 	uxth.w	r9, r2
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f006 fe02 	bl	80196d0 <lv_obj_get_width>
 8012acc:	b280      	uxth	r0, r0
 8012ace:	eba9 0900 	sub.w	r9, r9, r0
 8012ad2:	fa0f f989 	sxth.w	r9, r9
            item->w_layout = 0;
 8012ad6:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012ada:	f023 0308 	bic.w	r3, r3, #8
 8012ade:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            break;
 8012ae2:	e723      	b.n	801292c <item_repos+0xf8>
            y = c->y[row_pos];
 8012ae4:	686b      	ldr	r3, [r5, #4]
 8012ae6:	f933 5018 	ldrsh.w	r5, [r3, r8, lsl #1]
            item->h_layout = 1;
 8012aea:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012aee:	f043 0304 	orr.w	r3, r3, #4
 8012af2:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            item_h = row_h;
 8012af6:	f8dd b00c 	ldr.w	fp, [sp, #12]
            break;
 8012afa:	e72a      	b.n	8012952 <item_repos+0x11e>
            y = c->y[row_pos] + (row_h - item_h) / 2;
 8012afc:	686b      	ldr	r3, [r5, #4]
 8012afe:	f833 5018 	ldrh.w	r5, [r3, r8, lsl #1]
 8012b02:	9b03      	ldr	r3, [sp, #12]
 8012b04:	eba3 030b 	sub.w	r3, r3, fp
 8012b08:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012b0c:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8012b10:	b22d      	sxth	r5, r5
            item->h_layout = 0;
 8012b12:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012b16:	f023 0304 	bic.w	r3, r3, #4
 8012b1a:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            break;
 8012b1e:	e718      	b.n	8012952 <item_repos+0x11e>
            y = c->y[row_pos] + row_h - lv_obj_get_height(item);
 8012b20:	686b      	ldr	r3, [r5, #4]
 8012b22:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
 8012b26:	9d05      	ldr	r5, [sp, #20]
 8012b28:	441d      	add	r5, r3
 8012b2a:	b2ad      	uxth	r5, r5
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	f006 fdd6 	bl	80196de <lv_obj_get_height>
 8012b32:	b280      	uxth	r0, r0
 8012b34:	1a2d      	subs	r5, r5, r0
 8012b36:	b22d      	sxth	r5, r5
            item->h_layout = 0;
 8012b38:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8012b3c:	f023 0304 	bic.w	r3, r3, #4
 8012b40:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
            break;
 8012b44:	e705      	b.n	8012952 <item_repos+0x11e>
    if(lv_obj_get_width(item) != item_w || lv_obj_get_height(item) != item_h) {
 8012b46:	4620      	mov	r0, r4
 8012b48:	f006 fdc9 	bl	80196de <lv_obj_get_height>
 8012b4c:	4558      	cmp	r0, fp
 8012b4e:	f47f af06 	bne.w	801295e <item_repos+0x12a>
 8012b52:	e731      	b.n	80129b8 <item_repos+0x184>
 8012b54:	00060001 	.word	0x00060001
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 8012b58:	f42b 43c0 	bic.w	r3, fp, #24576	@ 0x6000
 8012b5c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8012b60:	f73f af47 	bgt.w	80129f2 <item_repos+0x1be>
 8012b64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012b68:	dd01      	ble.n	8012b6e <item_repos+0x33a>
 8012b6a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8012b6e:	9a01      	ldr	r2, [sp, #4]
 8012b70:	fb03 f202 	mul.w	r2, r3, r2
 8012b74:	4613      	mov	r3, r2
 8012b76:	4a0f      	ldr	r2, [pc, #60]	@ (8012bb4 <item_repos+0x380>)
 8012b78:	fb82 1203 	smull	r1, r2, r2, r3
 8012b7c:	17db      	asrs	r3, r3, #31
 8012b7e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8012b82:	fa0f fb83 	sxth.w	fp, r3
 8012b86:	e734      	b.n	80129f2 <item_repos+0x1be>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 8012b88:	f42a 43c0 	bic.w	r3, sl, #24576	@ 0x6000
 8012b8c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8012b90:	f73f af35 	bgt.w	80129fe <item_repos+0x1ca>
 8012b94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012b98:	dd01      	ble.n	8012b9e <item_repos+0x36a>
 8012b9a:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8012b9e:	fb03 f000 	mul.w	r0, r3, r0
 8012ba2:	4b04      	ldr	r3, [pc, #16]	@ (8012bb4 <item_repos+0x380>)
 8012ba4:	fb83 2300 	smull	r2, r3, r3, r0
 8012ba8:	17c0      	asrs	r0, r0, #31
 8012baa:	ebc0 1063 	rsb	r0, r0, r3, asr #5
 8012bae:	fa0f fa80 	sxth.w	sl, r0
 8012bb2:	e724      	b.n	80129fe <item_repos+0x1ca>
 8012bb4:	51eb851f 	.word	0x51eb851f

08012bb8 <calc_free>:
{
 8012bb8:	b510      	push	{r4, lr}
 8012bba:	4604      	mov	r4, r0
    lv_mem_buf_release(calc->x);
 8012bbc:	6800      	ldr	r0, [r0, #0]
 8012bbe:	f003 ff5f 	bl	8016a80 <lv_mem_buf_release>
    lv_mem_buf_release(calc->y);
 8012bc2:	6860      	ldr	r0, [r4, #4]
 8012bc4:	f003 ff5c 	bl	8016a80 <lv_mem_buf_release>
    lv_mem_buf_release(calc->w);
 8012bc8:	68a0      	ldr	r0, [r4, #8]
 8012bca:	f003 ff59 	bl	8016a80 <lv_mem_buf_release>
    lv_mem_buf_release(calc->h);
 8012bce:	68e0      	ldr	r0, [r4, #12]
 8012bd0:	f003 ff56 	bl	8016a80 <lv_mem_buf_release>
}
 8012bd4:	bd10      	pop	{r4, pc}

08012bd6 <grid_update>:
{
 8012bd6:	b570      	push	{r4, r5, r6, lr}
 8012bd8:	b08a      	sub	sp, #40	@ 0x28
 8012bda:	4605      	mov	r5, r0
    const lv_coord_t * col_templ = get_col_dsc(cont);
 8012bdc:	f7ff fbc2 	bl	8012364 <get_col_dsc>
 8012be0:	4604      	mov	r4, r0
    const lv_coord_t * row_templ = get_row_dsc(cont);
 8012be2:	4628      	mov	r0, r5
 8012be4:	f7ff fbc8 	bl	8012378 <get_row_dsc>
    if(col_templ == NULL || row_templ == NULL) return;
 8012be8:	2c00      	cmp	r4, #0
 8012bea:	d05c      	beq.n	8012ca6 <grid_update+0xd0>
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d05a      	beq.n	8012ca6 <grid_update+0xd0>
    calc(cont, &c);
 8012bf0:	a903      	add	r1, sp, #12
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f7ff fd92 	bl	801271c <calc>
    lv_memset_00(&hint, sizeof(hint));
 8012bf8:	210c      	movs	r1, #12
 8012bfa:	4668      	mov	r0, sp
 8012bfc:	f004 f862 	bl	8016cc4 <lv_memset_00>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8012c00:	2232      	movs	r2, #50	@ 0x32
 8012c02:	2100      	movs	r1, #0
 8012c04:	4628      	mov	r0, r5
 8012c06:	f009 fd75 	bl	801c6f4 <lv_obj_get_style_prop>
 8012c0a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8012c0c:	2212      	movs	r2, #18
 8012c0e:	2100      	movs	r1, #0
 8012c10:	4628      	mov	r0, r5
 8012c12:	f009 fd6f 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(cont, LV_PART_MAIN) + border_widt;
 8012c16:	b2b6      	uxth	r6, r6
 8012c18:	fa16 f480 	uxtah	r4, r6, r0
 8012c1c:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8012c1e:	2210      	movs	r2, #16
 8012c20:	2100      	movs	r1, #0
 8012c22:	4628      	mov	r0, r5
 8012c24:	f009 fd66 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(cont, LV_PART_MAIN) + border_widt;
 8012c28:	fa16 f680 	uxtah	r6, r6, r0
 8012c2c:	b2b6      	uxth	r6, r6
    hint.grid_abs.x = pad_left + cont->coords.x1 - lv_obj_get_scroll_x(cont);
 8012c2e:	8aab      	ldrh	r3, [r5, #20]
 8012c30:	441c      	add	r4, r3
 8012c32:	b2a4      	uxth	r4, r4
 8012c34:	4628      	mov	r0, r5
 8012c36:	f008 f8d7 	bl	801ade8 <lv_obj_get_scroll_x>
 8012c3a:	b280      	uxth	r0, r0
 8012c3c:	1a24      	subs	r4, r4, r0
 8012c3e:	f8ad 4008 	strh.w	r4, [sp, #8]
    hint.grid_abs.y = pad_top + cont->coords.y1 - lv_obj_get_scroll_y(cont);
 8012c42:	8aeb      	ldrh	r3, [r5, #22]
 8012c44:	18f4      	adds	r4, r6, r3
 8012c46:	b2a4      	uxth	r4, r4
 8012c48:	4628      	mov	r0, r5
 8012c4a:	f008 f8d5 	bl	801adf8 <lv_obj_get_scroll_y>
 8012c4e:	b280      	uxth	r0, r0
 8012c50:	1a24      	subs	r4, r4, r0
 8012c52:	f8ad 400a 	strh.w	r4, [sp, #10]
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8012c56:	2400      	movs	r4, #0
 8012c58:	e007      	b.n	8012c6a <grid_update+0x94>
        lv_obj_t * item = cont->spec_attr->children[i];
 8012c5a:	681b      	ldr	r3, [r3, #0]
        item_repos(item, &c, &hint);
 8012c5c:	466a      	mov	r2, sp
 8012c5e:	a903      	add	r1, sp, #12
 8012c60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c64:	f7ff fde6 	bl	8012834 <item_repos>
    for(i = 0; i < cont->spec_attr->child_cnt; i++) {
 8012c68:	3401      	adds	r4, #1
 8012c6a:	68ab      	ldr	r3, [r5, #8]
 8012c6c:	685a      	ldr	r2, [r3, #4]
 8012c6e:	42a2      	cmp	r2, r4
 8012c70:	d8f3      	bhi.n	8012c5a <grid_update+0x84>
    calc_free(&c);
 8012c72:	a803      	add	r0, sp, #12
 8012c74:	f7ff ffa0 	bl	8012bb8 <calc_free>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8012c78:	2201      	movs	r2, #1
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f009 fd39 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012c82:	b204      	sxth	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8012c84:	2204      	movs	r2, #4
 8012c86:	2100      	movs	r1, #0
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f009 fd33 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8012c8e:	b200      	sxth	r0, r0
    if(w_set == LV_SIZE_CONTENT || h_set == LV_SIZE_CONTENT) {
 8012c90:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8012c94:	429c      	cmp	r4, r3
 8012c96:	d008      	beq.n	8012caa <grid_update+0xd4>
 8012c98:	4298      	cmp	r0, r3
 8012c9a:	d006      	beq.n	8012caa <grid_update+0xd4>
    lv_event_send(cont, LV_EVENT_LAYOUT_CHANGED, NULL);
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	212b      	movs	r1, #43	@ 0x2b
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	f7fe f811 	bl	8010cc8 <lv_event_send>
}
 8012ca6:	b00a      	add	sp, #40	@ 0x28
 8012ca8:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_refr_size(cont);
 8012caa:	4628      	mov	r0, r5
 8012cac:	f007 fbfc 	bl	801a4a8 <lv_obj_refr_size>
 8012cb0:	e7f4      	b.n	8012c9c <grid_update+0xc6>
	...

08012cb4 <lv_grid_init>:
{
 8012cb4:	b508      	push	{r3, lr}
    LV_LAYOUT_GRID = lv_layout_register(grid_update, NULL);
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	481b      	ldr	r0, [pc, #108]	@ (8012d28 <lv_grid_init+0x74>)
 8012cba:	f006 fc87 	bl	80195cc <lv_layout_register>
 8012cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8012d2c <lv_grid_init+0x78>)
 8012cc0:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012cc2:	2004      	movs	r0, #4
 8012cc4:	f00e f838 	bl	8020d38 <lv_style_register_prop>
 8012cc8:	4b19      	ldr	r3, [pc, #100]	@ (8012d30 <lv_grid_init+0x7c>)
 8012cca:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_DSC_ARRAY = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012ccc:	2004      	movs	r0, #4
 8012cce:	f00e f833 	bl	8020d38 <lv_style_register_prop>
 8012cd2:	4b18      	ldr	r3, [pc, #96]	@ (8012d34 <lv_grid_init+0x80>)
 8012cd4:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_COLUMN_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012cd6:	2004      	movs	r0, #4
 8012cd8:	f00e f82e 	bl	8020d38 <lv_style_register_prop>
 8012cdc:	4b16      	ldr	r3, [pc, #88]	@ (8012d38 <lv_grid_init+0x84>)
 8012cde:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_ROW_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012ce0:	2004      	movs	r0, #4
 8012ce2:	f00e f829 	bl	8020d38 <lv_style_register_prop>
 8012ce6:	4b15      	ldr	r3, [pc, #84]	@ (8012d3c <lv_grid_init+0x88>)
 8012ce8:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012cea:	2004      	movs	r0, #4
 8012cec:	f00e f824 	bl	8020d38 <lv_style_register_prop>
 8012cf0:	4b13      	ldr	r3, [pc, #76]	@ (8012d40 <lv_grid_init+0x8c>)
 8012cf2:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_ROW_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012cf4:	2004      	movs	r0, #4
 8012cf6:	f00e f81f 	bl	8020d38 <lv_style_register_prop>
 8012cfa:	4b12      	ldr	r3, [pc, #72]	@ (8012d44 <lv_grid_init+0x90>)
 8012cfc:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_SPAN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012cfe:	2004      	movs	r0, #4
 8012d00:	f00e f81a 	bl	8020d38 <lv_style_register_prop>
 8012d04:	4b10      	ldr	r3, [pc, #64]	@ (8012d48 <lv_grid_init+0x94>)
 8012d06:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_COLUMN_POS = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012d08:	2004      	movs	r0, #4
 8012d0a:	f00e f815 	bl	8020d38 <lv_style_register_prop>
 8012d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8012d4c <lv_grid_init+0x98>)
 8012d10:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_X_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012d12:	2004      	movs	r0, #4
 8012d14:	f00e f810 	bl	8020d38 <lv_style_register_prop>
 8012d18:	4b0d      	ldr	r3, [pc, #52]	@ (8012d50 <lv_grid_init+0x9c>)
 8012d1a:	8018      	strh	r0, [r3, #0]
    LV_STYLE_GRID_CELL_Y_ALIGN = lv_style_register_prop(LV_STYLE_PROP_LAYOUT_REFR);
 8012d1c:	2004      	movs	r0, #4
 8012d1e:	f00e f80b 	bl	8020d38 <lv_style_register_prop>
 8012d22:	4b0c      	ldr	r3, [pc, #48]	@ (8012d54 <lv_grid_init+0xa0>)
 8012d24:	8018      	strh	r0, [r3, #0]
}
 8012d26:	bd08      	pop	{r3, pc}
 8012d28:	08012bd7 	.word	0x08012bd7
 8012d2c:	2000688c 	.word	0x2000688c
 8012d30:	2000688a 	.word	0x2000688a
 8012d34:	20006886 	.word	0x20006886
 8012d38:	20006888 	.word	0x20006888
 8012d3c:	20006884 	.word	0x20006884
 8012d40:	2000687a 	.word	0x2000687a
 8012d44:	2000687c 	.word	0x2000687c
 8012d48:	20006880 	.word	0x20006880
 8012d4c:	20006882 	.word	0x20006882
 8012d50:	2000687e 	.word	0x2000687e
 8012d54:	20006878 	.word	0x20006878

08012d58 <get_indev>:
 * In the worst case simply return the latest indev
 * @param g     a group the find in the indevs
 * @return      the suggested indev
 */
static lv_indev_t * get_indev(const lv_group_t * g)
{
 8012d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d5a:	4605      	mov	r5, r0
    lv_indev_t * indev_encoder = NULL;
    lv_indev_t * indev_group = NULL;
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	f000 faeb 	bl	8013338 <lv_indev_get_next>
 8012d62:	4604      	mov	r4, r0
    lv_indev_t * indev_group = NULL;
 8012d64:	2600      	movs	r6, #0
    lv_indev_t * indev_encoder = NULL;
 8012d66:	4637      	mov	r7, r6
    while(indev) {
 8012d68:	e005      	b.n	8012d76 <get_indev+0x1e>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
        if(indev->group == g) {
            /*Prefer KEYPAD*/
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
            indev_group = indev;
 8012d6a:	4626      	mov	r6, r4
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8012d6c:	4627      	mov	r7, r4
        }
        indev = lv_indev_get_next(indev);
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f000 fae2 	bl	8013338 <lv_indev_get_next>
 8012d74:	4604      	mov	r4, r0
    while(indev) {
 8012d76:	b15c      	cbz	r4, 8012d90 <get_indev+0x38>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8012d78:	4620      	mov	r0, r4
 8012d7a:	f001 fcff 	bl	801477c <lv_indev_get_type>
        if(indev->group == g) {
 8012d7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8012d80:	42ab      	cmp	r3, r5
 8012d82:	d1f4      	bne.n	8012d6e <get_indev+0x16>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8012d84:	2802      	cmp	r0, #2
 8012d86:	d00e      	beq.n	8012da6 <get_indev+0x4e>
            if(indev_type == LV_INDEV_TYPE_ENCODER) indev_encoder = indev;
 8012d88:	2804      	cmp	r0, #4
 8012d8a:	d0ee      	beq.n	8012d6a <get_indev+0x12>
            indev_group = indev;
 8012d8c:	4626      	mov	r6, r4
 8012d8e:	e7ee      	b.n	8012d6e <get_indev+0x16>
    }

    if(indev_encoder) return indev_encoder;
 8012d90:	b10f      	cbz	r7, 8012d96 <get_indev+0x3e>
    if(indev_group) return indev_group;

    /*In lack of a better option use the first input device. (It can be NULL if there is no input device)*/
    return lv_indev_get_next(NULL);
}
 8012d92:	4638      	mov	r0, r7
 8012d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(indev_group) return indev_group;
 8012d96:	b10e      	cbz	r6, 8012d9c <get_indev+0x44>
 8012d98:	4637      	mov	r7, r6
 8012d9a:	e7fa      	b.n	8012d92 <get_indev+0x3a>
    return lv_indev_get_next(NULL);
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	f000 facb 	bl	8013338 <lv_indev_get_next>
 8012da2:	4607      	mov	r7, r0
 8012da4:	e7f5      	b.n	8012d92 <get_indev+0x3a>
            if(indev_type == LV_INDEV_TYPE_KEYPAD) return indev;
 8012da6:	4627      	mov	r7, r4
 8012da8:	e7f3      	b.n	8012d92 <get_indev+0x3a>

08012daa <focus_next_core>:
{
 8012daa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(group->frozen) return focus_changed;
 8012dae:	7f03      	ldrb	r3, [r0, #28]
 8012db0:	f013 0f01 	tst.w	r3, #1
 8012db4:	d16e      	bne.n	8012e94 <focus_next_core+0xea>
 8012db6:	4606      	mov	r6, r0
 8012db8:	468a      	mov	sl, r1
 8012dba:	4691      	mov	r9, r2
    lv_obj_t ** obj_next     = group->obj_focus;
 8012dbc:	68c5      	ldr	r5, [r0, #12]
    bool can_begin           = true;
 8012dbe:	f04f 0801 	mov.w	r8, #1
    lv_obj_t ** obj_sentinel = NULL;
 8012dc2:	2700      	movs	r7, #0
        if(obj_next == NULL) {
 8012dc4:	b1e5      	cbz	r5, 8012e00 <focus_next_core+0x56>
 8012dc6:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
 8012dc8:	b357      	cbz	r7, 8012e20 <focus_next_core+0x76>
        if(can_move) {
 8012dca:	b12b      	cbz	r3, 8012dd8 <focus_next_core+0x2e>
            obj_next = move(&group->obj_ll, obj_next);
 8012dcc:	4629      	mov	r1, r5
 8012dce:	4630      	mov	r0, r6
 8012dd0:	47c8      	blx	r9
 8012dd2:	4605      	mov	r5, r0
            if(obj_next == obj_sentinel) return focus_changed;
 8012dd4:	4287      	cmp	r7, r0
 8012dd6:	d068      	beq.n	8012eaa <focus_next_core+0x100>
        if(obj_next == NULL) continue;
 8012dd8:	2d00      	cmp	r5, #0
 8012dda:	d0f3      	beq.n	8012dc4 <focus_next_core+0x1a>
        if(lv_obj_get_state(*obj_next) & LV_STATE_DISABLED) continue;
 8012ddc:	6828      	ldr	r0, [r5, #0]
 8012dde:	f005 fb62 	bl	80184a6 <lv_obj_get_state>
 8012de2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8012de6:	d1ed      	bne.n	8012dc4 <focus_next_core+0x1a>
        lv_obj_t * parent = *obj_next;
 8012de8:	682c      	ldr	r4, [r5, #0]
        while(parent) {
 8012dea:	b31c      	cbz	r4, 8012e34 <focus_next_core+0x8a>
            if(lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) break;
 8012dec:	2101      	movs	r1, #1
 8012dee:	4620      	mov	r0, r4
 8012df0:	f005 fb4d 	bl	801848e <lv_obj_has_flag>
 8012df4:	b9c0      	cbnz	r0, 8012e28 <focus_next_core+0x7e>
            parent = lv_obj_get_parent(parent);
 8012df6:	4620      	mov	r0, r4
 8012df8:	f00a f9bc 	bl	801d174 <lv_obj_get_parent>
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	e7f4      	b.n	8012dea <focus_next_core+0x40>
            if(group->wrap || obj_sentinel == NULL) {
 8012e00:	7f33      	ldrb	r3, [r6, #28]
 8012e02:	f013 0f08 	tst.w	r3, #8
 8012e06:	d101      	bne.n	8012e0c <focus_next_core+0x62>
 8012e08:	2f00      	cmp	r7, #0
 8012e0a:	d148      	bne.n	8012e9e <focus_next_core+0xf4>
                if(!can_begin) return focus_changed;
 8012e0c:	f1b8 0f00 	cmp.w	r8, #0
 8012e10:	d042      	beq.n	8012e98 <focus_next_core+0xee>
                obj_next  = begin(&group->obj_ll);
 8012e12:	4630      	mov	r0, r6
 8012e14:	47d0      	blx	sl
 8012e16:	4605      	mov	r5, r0
                can_begin = false;
 8012e18:	f04f 0800 	mov.w	r8, #0
                can_move  = false;
 8012e1c:	4643      	mov	r3, r8
                can_begin = false;
 8012e1e:	e7d3      	b.n	8012dc8 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8012e20:	2d00      	cmp	r5, #0
 8012e22:	d03f      	beq.n	8012ea4 <focus_next_core+0xfa>
            obj_sentinel = obj_next;
 8012e24:	462f      	mov	r7, r5
 8012e26:	e7d0      	b.n	8012dca <focus_next_core+0x20>
        if(parent && lv_obj_has_flag(parent, LV_OBJ_FLAG_HIDDEN)) continue;
 8012e28:	2101      	movs	r1, #1
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f005 fb2f 	bl	801848e <lv_obj_has_flag>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d1c7      	bne.n	8012dc4 <focus_next_core+0x1a>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8012e34:	68f3      	ldr	r3, [r6, #12]
 8012e36:	42ab      	cmp	r3, r5
 8012e38:	d03a      	beq.n	8012eb0 <focus_next_core+0x106>
    if(group->obj_focus) {
 8012e3a:	b18b      	cbz	r3, 8012e60 <focus_next_core+0xb6>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, get_indev(group));
 8012e3c:	681c      	ldr	r4, [r3, #0]
 8012e3e:	4630      	mov	r0, r6
 8012e40:	f7ff ff8a 	bl	8012d58 <get_indev>
 8012e44:	4602      	mov	r2, r0
 8012e46:	210f      	movs	r1, #15
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f7fd ff3d 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return focus_changed;
 8012e4e:	2801      	cmp	r0, #1
 8012e50:	d002      	beq.n	8012e58 <focus_next_core+0xae>
 8012e52:	f04f 0800 	mov.w	r8, #0
 8012e56:	e01f      	b.n	8012e98 <focus_next_core+0xee>
        lv_obj_invalidate(*group->obj_focus);
 8012e58:	68f3      	ldr	r3, [r6, #12]
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	f007 f823 	bl	8019ea6 <lv_obj_invalidate>
    group->obj_focus = obj_next;
 8012e60:	60f5      	str	r5, [r6, #12]
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8012e62:	682c      	ldr	r4, [r5, #0]
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7ff ff77 	bl	8012d58 <get_indev>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	210e      	movs	r1, #14
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f7fd ff2a 	bl	8010cc8 <lv_event_send>
    if(res != LV_RES_OK) return focus_changed;
 8012e74:	2801      	cmp	r0, #1
 8012e76:	d002      	beq.n	8012e7e <focus_next_core+0xd4>
 8012e78:	f04f 0800 	mov.w	r8, #0
 8012e7c:	e00c      	b.n	8012e98 <focus_next_core+0xee>
    lv_obj_invalidate(*group->obj_focus);
 8012e7e:	68f3      	ldr	r3, [r6, #12]
 8012e80:	6818      	ldr	r0, [r3, #0]
 8012e82:	f007 f810 	bl	8019ea6 <lv_obj_invalidate>
    if(group->focus_cb) group->focus_cb(group);
 8012e86:	6933      	ldr	r3, [r6, #16]
 8012e88:	b1ab      	cbz	r3, 8012eb6 <focus_next_core+0x10c>
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	4798      	blx	r3
    return focus_changed;
 8012e8e:	f04f 0801 	mov.w	r8, #1
 8012e92:	e001      	b.n	8012e98 <focus_next_core+0xee>
    if(group->frozen) return focus_changed;
 8012e94:	f04f 0800 	mov.w	r8, #0
}
 8012e98:	4640      	mov	r0, r8
 8012e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                return focus_changed;
 8012e9e:	f04f 0800 	mov.w	r8, #0
 8012ea2:	e7f9      	b.n	8012e98 <focus_next_core+0xee>
            if(obj_sentinel == NULL) return focus_changed; /*Group is empty*/
 8012ea4:	f04f 0800 	mov.w	r8, #0
 8012ea8:	e7f6      	b.n	8012e98 <focus_next_core+0xee>
            if(obj_next == obj_sentinel) return focus_changed;
 8012eaa:	f04f 0800 	mov.w	r8, #0
 8012eae:	e7f3      	b.n	8012e98 <focus_next_core+0xee>
    if(obj_next == group->obj_focus) return focus_changed; /*There's only one visible object and it's already focused*/
 8012eb0:	f04f 0800 	mov.w	r8, #0
 8012eb4:	e7f0      	b.n	8012e98 <focus_next_core+0xee>
    return focus_changed;
 8012eb6:	f04f 0801 	mov.w	r8, #1
 8012eba:	e7ed      	b.n	8012e98 <focus_next_core+0xee>

08012ebc <_lv_group_init>:
{
 8012ebc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8012ebe:	2120      	movs	r1, #32
 8012ec0:	4801      	ldr	r0, [pc, #4]	@ (8012ec8 <_lv_group_init+0xc>)
 8012ec2:	f003 fb08 	bl	80164d6 <_lv_ll_init>
}
 8012ec6:	bd08      	pop	{r3, pc}
 8012ec8:	20006830 	.word	0x20006830

08012ecc <lv_group_get_default>:
}
 8012ecc:	4b01      	ldr	r3, [pc, #4]	@ (8012ed4 <lv_group_get_default+0x8>)
 8012ece:	6818      	ldr	r0, [r3, #0]
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	20006890 	.word	0x20006890

08012ed8 <lv_group_focus_next>:
{
 8012ed8:	b510      	push	{r4, lr}
 8012eda:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
 8012edc:	4a05      	ldr	r2, [pc, #20]	@ (8012ef4 <lv_group_focus_next+0x1c>)
 8012ede:	4906      	ldr	r1, [pc, #24]	@ (8012ef8 <lv_group_focus_next+0x20>)
 8012ee0:	f7ff ff63 	bl	8012daa <focus_next_core>
    if(group->edge_cb) {
 8012ee4:	6963      	ldr	r3, [r4, #20]
 8012ee6:	b11b      	cbz	r3, 8012ef0 <lv_group_focus_next+0x18>
        if(!focus_changed)
 8012ee8:	b910      	cbnz	r0, 8012ef0 <lv_group_focus_next+0x18>
            group->edge_cb(group, true);
 8012eea:	2101      	movs	r1, #1
 8012eec:	4620      	mov	r0, r4
 8012eee:	4798      	blx	r3
}
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	bf00      	nop
 8012ef4:	08016573 	.word	0x08016573
 8012ef8:	08016563 	.word	0x08016563

08012efc <lv_group_focus_prev>:
{
 8012efc:	b510      	push	{r4, lr}
 8012efe:	4604      	mov	r4, r0
    bool focus_changed = focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
 8012f00:	4a05      	ldr	r2, [pc, #20]	@ (8012f18 <lv_group_focus_prev+0x1c>)
 8012f02:	4906      	ldr	r1, [pc, #24]	@ (8012f1c <lv_group_focus_prev+0x20>)
 8012f04:	f7ff ff51 	bl	8012daa <focus_next_core>
    if(group->edge_cb) {
 8012f08:	6963      	ldr	r3, [r4, #20]
 8012f0a:	b11b      	cbz	r3, 8012f14 <lv_group_focus_prev+0x18>
        if(!focus_changed)
 8012f0c:	b910      	cbnz	r0, 8012f14 <lv_group_focus_prev+0x18>
            group->edge_cb(group, false);
 8012f0e:	2100      	movs	r1, #0
 8012f10:	4620      	mov	r0, r4
 8012f12:	4798      	blx	r3
}
 8012f14:	bd10      	pop	{r4, pc}
 8012f16:	bf00      	nop
 8012f18:	0801657b 	.word	0x0801657b
 8012f1c:	0801656b 	.word	0x0801656b

08012f20 <lv_group_refocus>:
{
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
 8012f24:	7f03      	ldrb	r3, [r0, #28]
 8012f26:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    g->wrap           = 1;
 8012f2a:	f043 0308 	orr.w	r3, r3, #8
 8012f2e:	7703      	strb	r3, [r0, #28]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	f013 0f04 	tst.w	r3, #4
 8012f36:	d106      	bne.n	8012f46 <lv_group_refocus+0x26>
        lv_group_focus_next(g);
 8012f38:	f7ff ffce 	bl	8012ed8 <lv_group_focus_next>
    g->wrap = temp_wrap;
 8012f3c:	7f23      	ldrb	r3, [r4, #28]
 8012f3e:	f365 03c3 	bfi	r3, r5, #3, #1
 8012f42:	7723      	strb	r3, [r4, #28]
}
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_prev(g);
 8012f46:	f7ff ffd9 	bl	8012efc <lv_group_focus_prev>
 8012f4a:	e7f7      	b.n	8012f3c <lv_group_refocus+0x1c>

08012f4c <lv_group_remove_obj>:
{
 8012f4c:	b570      	push	{r4, r5, r6, lr}
 8012f4e:	4606      	mov	r6, r0
    lv_group_t * g = lv_obj_get_group(obj);
 8012f50:	f005 fab1 	bl	80184b6 <lv_obj_get_group>
    if(g == NULL) return;
 8012f54:	2800      	cmp	r0, #0
 8012f56:	d049      	beq.n	8012fec <lv_group_remove_obj+0xa0>
 8012f58:	4605      	mov	r5, r0
    if(g->obj_focus && *g->obj_focus == obj) {
 8012f5a:	68c3      	ldr	r3, [r0, #12]
 8012f5c:	b113      	cbz	r3, 8012f64 <lv_group_remove_obj+0x18>
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	42b3      	cmp	r3, r6
 8012f62:	d013      	beq.n	8012f8c <lv_group_remove_obj+0x40>
    if(g->obj_focus && *g->obj_focus == obj) {
 8012f64:	68eb      	ldr	r3, [r5, #12]
 8012f66:	b113      	cbz	r3, 8012f6e <lv_group_remove_obj+0x22>
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	42b3      	cmp	r3, r6
 8012f6c:	d030      	beq.n	8012fd0 <lv_group_remove_obj+0x84>
    _LV_LL_READ(&g->obj_ll, i) {
 8012f6e:	4628      	mov	r0, r5
 8012f70:	f003 faf7 	bl	8016562 <_lv_ll_get_head>
 8012f74:	4604      	mov	r4, r0
 8012f76:	2c00      	cmp	r4, #0
 8012f78:	d038      	beq.n	8012fec <lv_group_remove_obj+0xa0>
        if(*i == obj) {
 8012f7a:	6823      	ldr	r3, [r4, #0]
 8012f7c:	42b3      	cmp	r3, r6
 8012f7e:	d02a      	beq.n	8012fd6 <lv_group_remove_obj+0x8a>
    _LV_LL_READ(&g->obj_ll, i) {
 8012f80:	4621      	mov	r1, r4
 8012f82:	4628      	mov	r0, r5
 8012f84:	f003 faf5 	bl	8016572 <_lv_ll_get_next>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	e7f4      	b.n	8012f76 <lv_group_remove_obj+0x2a>
        if(g->frozen) g->frozen = 0;
 8012f8c:	7f03      	ldrb	r3, [r0, #28]
 8012f8e:	f013 0f01 	tst.w	r3, #1
 8012f92:	d003      	beq.n	8012f9c <lv_group_remove_obj+0x50>
 8012f94:	7f03      	ldrb	r3, [r0, #28]
 8012f96:	f023 0301 	bic.w	r3, r3, #1
 8012f9a:	7703      	strb	r3, [r0, #28]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f003 fae0 	bl	8016562 <_lv_ll_get_head>
 8012fa2:	68eb      	ldr	r3, [r5, #12]
 8012fa4:	4283      	cmp	r3, r0
 8012fa6:	d003      	beq.n	8012fb0 <lv_group_remove_obj+0x64>
            lv_group_refocus(g);
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7ff ffb9 	bl	8012f20 <lv_group_refocus>
 8012fae:	e7d9      	b.n	8012f64 <lv_group_remove_obj+0x18>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	f003 fada 	bl	801656a <_lv_ll_get_tail>
 8012fb6:	68eb      	ldr	r3, [r5, #12]
 8012fb8:	4283      	cmp	r3, r0
 8012fba:	d1f5      	bne.n	8012fa8 <lv_group_remove_obj+0x5c>
            lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, get_indev(g));
 8012fbc:	681c      	ldr	r4, [r3, #0]
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	f7ff feca 	bl	8012d58 <get_indev>
 8012fc4:	4602      	mov	r2, r0
 8012fc6:	210f      	movs	r1, #15
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f7fd fe7d 	bl	8010cc8 <lv_event_send>
 8012fce:	e7c9      	b.n	8012f64 <lv_group_remove_obj+0x18>
        g->obj_focus = NULL;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60eb      	str	r3, [r5, #12]
 8012fd4:	e7cb      	b.n	8012f6e <lv_group_remove_obj+0x22>
            _lv_ll_remove(&g->obj_ll, i);
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f003 fb04 	bl	80165e6 <_lv_ll_remove>
            lv_mem_free(i);
 8012fde:	4620      	mov	r0, r4
 8012fe0:	f003 fcb8 	bl	8016954 <lv_mem_free>
            if(obj->spec_attr) obj->spec_attr->group_p = NULL;
 8012fe4:	68b3      	ldr	r3, [r6, #8]
 8012fe6:	b10b      	cbz	r3, 8012fec <lv_group_remove_obj+0xa0>
 8012fe8:	2200      	movs	r2, #0
 8012fea:	609a      	str	r2, [r3, #8]
}
 8012fec:	bd70      	pop	{r4, r5, r6, pc}

08012fee <lv_group_add_obj>:
    if(group == NULL) return;
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d039      	beq.n	8013066 <lv_group_add_obj+0x78>
{
 8012ff2:	b570      	push	{r4, r5, r6, lr}
 8012ff4:	460c      	mov	r4, r1
 8012ff6:	4605      	mov	r5, r0
    lv_group_remove_obj(obj);
 8012ff8:	4608      	mov	r0, r1
 8012ffa:	f7ff ffa7 	bl	8012f4c <lv_group_remove_obj>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 8012ffe:	4628      	mov	r0, r5
 8013000:	f003 faaf 	bl	8016562 <_lv_ll_get_head>
 8013004:	4601      	mov	r1, r0
 8013006:	b139      	cbz	r1, 8013018 <lv_group_add_obj+0x2a>
        if((*obj_i) == obj) {
 8013008:	680b      	ldr	r3, [r1, #0]
 801300a:	42a3      	cmp	r3, r4
 801300c:	d01e      	beq.n	801304c <lv_group_add_obj+0x5e>
    _LV_LL_READ(&group->obj_ll, obj_i) {
 801300e:	4628      	mov	r0, r5
 8013010:	f003 faaf 	bl	8016572 <_lv_ll_get_next>
 8013014:	4601      	mov	r1, r0
 8013016:	e7f6      	b.n	8013006 <lv_group_add_obj+0x18>
    lv_group_t * group_cur = lv_obj_get_group(obj);
 8013018:	4620      	mov	r0, r4
 801301a:	f005 fa4c 	bl	80184b6 <lv_obj_get_group>
    if(group_cur) {
 801301e:	b130      	cbz	r0, 801302e <lv_group_add_obj+0x40>
        if(obj->spec_attr->group_p && *(obj->spec_attr->group_p->obj_focus) == obj) {
 8013020:	68a3      	ldr	r3, [r4, #8]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	b11b      	cbz	r3, 801302e <lv_group_add_obj+0x40>
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	42a3      	cmp	r3, r4
 801302c:	d00f      	beq.n	801304e <lv_group_add_obj+0x60>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 801302e:	68a3      	ldr	r3, [r4, #8]
 8013030:	b183      	cbz	r3, 8013054 <lv_group_add_obj+0x66>
    obj->spec_attr->group_p = group;
 8013032:	68a3      	ldr	r3, [r4, #8]
 8013034:	609d      	str	r5, [r3, #8]
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
 8013036:	4628      	mov	r0, r5
 8013038:	f003 fa74 	bl	8016524 <_lv_ll_ins_tail>
    LV_ASSERT_MALLOC(next);
 801303c:	4606      	mov	r6, r0
 801303e:	b168      	cbz	r0, 801305c <lv_group_add_obj+0x6e>
    *next = obj;
 8013040:	6004      	str	r4, [r0, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
 8013042:	4628      	mov	r0, r5
 8013044:	f003 fa8d 	bl	8016562 <_lv_ll_get_head>
 8013048:	4286      	cmp	r6, r0
 801304a:	d008      	beq.n	801305e <lv_group_add_obj+0x70>
}
 801304c:	bd70      	pop	{r4, r5, r6, pc}
            lv_group_refocus(group_cur);
 801304e:	f7ff ff67 	bl	8012f20 <lv_group_refocus>
 8013052:	e7ec      	b.n	801302e <lv_group_add_obj+0x40>
    if(obj->spec_attr == NULL) lv_obj_allocate_spec_attr(obj);
 8013054:	4620      	mov	r0, r4
 8013056:	f005 fc9b 	bl	8018990 <lv_obj_allocate_spec_attr>
 801305a:	e7ea      	b.n	8013032 <lv_group_add_obj+0x44>
    LV_ASSERT_MALLOC(next);
 801305c:	e7fe      	b.n	801305c <lv_group_add_obj+0x6e>
        lv_group_refocus(group);
 801305e:	4628      	mov	r0, r5
 8013060:	f7ff ff5e 	bl	8012f20 <lv_group_refocus>
    LV_LOG_TRACE("finished");
 8013064:	e7f2      	b.n	801304c <lv_group_add_obj+0x5e>
 8013066:	4770      	bx	lr

08013068 <lv_group_get_focused>:
    if(!group) return NULL;
 8013068:	b118      	cbz	r0, 8013072 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
 801306a:	68c0      	ldr	r0, [r0, #12]
 801306c:	b108      	cbz	r0, 8013072 <lv_group_get_focused+0xa>
    return *group->obj_focus;
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	4770      	bx	lr
}
 8013072:	4770      	bx	lr

08013074 <lv_group_set_editing>:
    if(group == NULL) return;
 8013074:	b1f8      	cbz	r0, 80130b6 <lv_group_set_editing+0x42>
{
 8013076:	b570      	push	{r4, r5, r6, lr}
 8013078:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 801307a:	7f03      	ldrb	r3, [r0, #28]
 801307c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8013080:	428b      	cmp	r3, r1
 8013082:	d013      	beq.n	80130ac <lv_group_set_editing+0x38>
    group->editing     = en_val;
 8013084:	7f03      	ldrb	r3, [r0, #28]
 8013086:	f361 0341 	bfi	r3, r1, #1, #1
 801308a:	7703      	strb	r3, [r0, #28]
    lv_obj_t * focused = lv_group_get_focused(group);
 801308c:	f7ff ffec 	bl	8013068 <lv_group_get_focused>
    if(focused) {
 8013090:	4605      	mov	r5, r0
 8013092:	b158      	cbz	r0, 80130ac <lv_group_set_editing+0x38>
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, get_indev(group));
 8013094:	68e3      	ldr	r3, [r4, #12]
 8013096:	681e      	ldr	r6, [r3, #0]
 8013098:	4620      	mov	r0, r4
 801309a:	f7ff fe5d 	bl	8012d58 <get_indev>
 801309e:	4602      	mov	r2, r0
 80130a0:	210e      	movs	r1, #14
 80130a2:	4630      	mov	r0, r6
 80130a4:	f7fd fe10 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 80130a8:	2801      	cmp	r0, #1
 80130aa:	d000      	beq.n	80130ae <lv_group_set_editing+0x3a>
}
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_invalidate(focused);
 80130ae:	4628      	mov	r0, r5
 80130b0:	f006 fef9 	bl	8019ea6 <lv_obj_invalidate>
 80130b4:	e7fa      	b.n	80130ac <lv_group_set_editing+0x38>
 80130b6:	4770      	bx	lr

080130b8 <lv_group_get_editing>:
    if(!group) return false;
 80130b8:	b118      	cbz	r0, 80130c2 <lv_group_get_editing+0xa>
    return group->editing ? true : false;
 80130ba:	7f00      	ldrb	r0, [r0, #28]
 80130bc:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80130c0:	4770      	bx	lr
    if(!group) return false;
 80130c2:	2000      	movs	r0, #0
}
 80130c4:	4770      	bx	lr
	...

080130c8 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 80130c8:	b510      	push	{r4, lr}
 80130ca:	4604      	mov	r4, r0
    lv_memset_00(driver, sizeof(lv_disp_drv_t));
 80130cc:	2150      	movs	r1, #80	@ 0x50
 80130ce:	f003 fdf9 	bl	8016cc4 <lv_memset_00>

    driver->hor_res          = 320;
 80130d2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80130d6:	8023      	strh	r3, [r4, #0]
    driver->ver_res          = 240;
 80130d8:	23f0      	movs	r3, #240	@ 0xf0
 80130da:	8063      	strh	r3, [r4, #2]
    driver->physical_hor_res = -1;
 80130dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80130e0:	80a3      	strh	r3, [r4, #4]
    driver->physical_ver_res = -1;
 80130e2:	80e3      	strh	r3, [r4, #6]
    driver->offset_x         = 0;
 80130e4:	2300      	movs	r3, #0
 80130e6:	8123      	strh	r3, [r4, #8]
    driver->offset_y         = 0;
 80130e8:	8163      	strh	r3, [r4, #10]
    driver->antialiasing     = LV_COLOR_DEPTH > 8 ? 1 : 0;
 80130ea:	7c22      	ldrb	r2, [r4, #16]
 80130ec:	f042 0208 	orr.w	r2, r2, #8
 80130f0:	7422      	strb	r2, [r4, #16]
    driver->screen_transp    = 0;
 80130f2:	b2d2      	uxtb	r2, r2
 80130f4:	f363 1286 	bfi	r2, r3, #6, #1
 80130f8:	7422      	strb	r2, [r4, #16]
    driver->dpi              = LV_DPI_DEF;
 80130fa:	6923      	ldr	r3, [r4, #16]
 80130fc:	2282      	movs	r2, #130	@ 0x82
 80130fe:	f362 13d0 	bfi	r3, r2, #7, #10
 8013102:	6123      	str	r3, [r4, #16]
                    rgb565 = r | g | b
        That's 3 mask, 3 bitshifts and 2 or operations */
    r.full = (uint16_t)(((c & 0xF80000) >> 8) | ((c & 0xFC00) >> 5) | ((c & 0xFF) >> 3));
#else
    /* We want: rrrr rrrr GGGg gggg bbbb bbbb => gggb bbbb rrrr rGGG */
    r.full = (uint16_t)(((c & 0xF80000) >> 16) | ((c & 0xFC00) >> 13) | ((c & 0x1C00) << 3) | ((c & 0xF8) << 5));
 8013104:	f24e 0307 	movw	r3, #57351	@ 0xe007
    driver->color_chroma_key = LV_COLOR_CHROMA_KEY;
 8013108:	8723      	strh	r3, [r4, #56]	@ 0x38
#elif LV_USE_GPU_ARM2D
    driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
    driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
#else
    driver->draw_ctx_init = lv_draw_sw_init_ctx;
 801310a:	4b03      	ldr	r3, [pc, #12]	@ (8013118 <lv_disp_drv_init+0x50>)
 801310c:	6423      	str	r3, [r4, #64]	@ 0x40
    driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
 801310e:	6463      	str	r3, [r4, #68]	@ 0x44
    driver->draw_ctx_size = sizeof(lv_draw_sw_ctx_t);
 8013110:	2358      	movs	r3, #88	@ 0x58
 8013112:	64a3      	str	r3, [r4, #72]	@ 0x48
#endif

}
 8013114:	bd10      	pop	{r4, pc}
 8013116:	bf00      	nop
 8013118:	08009d6d 	.word	0x08009d6d

0801311c <lv_disp_draw_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_draw_buf_init(lv_disp_draw_buf_t * draw_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 801311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801311e:	4604      	mov	r4, r0
 8013120:	460d      	mov	r5, r1
 8013122:	4617      	mov	r7, r2
 8013124:	461e      	mov	r6, r3
    lv_memset_00(draw_buf, sizeof(lv_disp_draw_buf_t));
 8013126:	211c      	movs	r1, #28
 8013128:	f003 fdcc 	bl	8016cc4 <lv_memset_00>

    draw_buf->buf1    = buf1;
 801312c:	6025      	str	r5, [r4, #0]
    draw_buf->buf2    = buf2;
 801312e:	6067      	str	r7, [r4, #4]
    draw_buf->buf_act = draw_buf->buf1;
 8013130:	60a5      	str	r5, [r4, #8]
    draw_buf->size    = size_in_px_cnt;
 8013132:	60e6      	str	r6, [r4, #12]
}
 8013134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013138 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable. Only its pointer is saved!
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 8013138:	b570      	push	{r4, r5, r6, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 801313e:	484a      	ldr	r0, [pc, #296]	@ (8013268 <lv_disp_drv_register+0x130>)
 8013140:	f003 f9d1 	bl	80164e6 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(disp);
 8013144:	2800      	cmp	r0, #0
 8013146:	d07b      	beq.n	8013240 <lv_disp_drv_register+0x108>
 8013148:	4604      	mov	r4, r0
    if(!disp) {
        return NULL;
    }

    /*Create a draw context if not created yet*/
    if(driver->draw_ctx == NULL) {
 801314a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d078      	beq.n	8013242 <lv_disp_drv_register+0x10a>
        if(draw_ctx == NULL) return NULL;
        driver->draw_ctx_init(driver, draw_ctx);
        driver->draw_ctx = draw_ctx;
    }

    lv_memset_00(disp, sizeof(lv_disp_t));
 8013150:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8013154:	4620      	mov	r0, r4
 8013156:	f003 fdb5 	bl	8016cc4 <lv_memset_00>

    disp->driver = driver;
 801315a:	6025      	str	r5, [r4, #0]

    disp->inv_en_cnt = 1;
 801315c:	2301      	movs	r3, #1
 801315e:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154

    _lv_ll_init(&disp->sync_areas, sizeof(lv_area_t));
 8013162:	2108      	movs	r1, #8
 8013164:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 8013168:	f003 f9b5 	bl	80164d6 <_lv_ll_init>

    lv_disp_t * disp_def_tmp = disp_def;
 801316c:	4b3f      	ldr	r3, [pc, #252]	@ (801326c <lv_disp_drv_register+0x134>)
 801316e:	681e      	ldr	r6, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 8013170:	601c      	str	r4, [r3, #0]
                                        new display*/
    /*Create a refresh timer*/
    disp->refr_timer = lv_timer_create(_lv_disp_refr_timer, LV_DISP_DEF_REFR_PERIOD, disp);
 8013172:	4622      	mov	r2, r4
 8013174:	211e      	movs	r1, #30
 8013176:	483e      	ldr	r0, [pc, #248]	@ (8013270 <lv_disp_drv_register+0x138>)
 8013178:	f013 fb46 	bl	8026808 <lv_timer_create>
 801317c:	6060      	str	r0, [r4, #4]
    LV_ASSERT_MALLOC(disp->refr_timer);
 801317e:	2800      	cmp	r0, #0
 8013180:	d06b      	beq.n	801325a <lv_disp_drv_register+0x122>
    if(disp->refr_timer == NULL) {
        lv_mem_free(disp);
        return NULL;
    }

    if(driver->full_refresh && driver->draw_buf->size < (uint32_t)driver->hor_res * driver->ver_res) {
 8013182:	7c2b      	ldrb	r3, [r5, #16]
 8013184:	f013 0f02 	tst.w	r3, #2
 8013188:	d00d      	beq.n	80131a6 <lv_disp_drv_register+0x6e>
 801318a:	68eb      	ldr	r3, [r5, #12]
 801318c:	68da      	ldr	r2, [r3, #12]
 801318e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8013192:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8013196:	fb01 f303 	mul.w	r3, r1, r3
 801319a:	429a      	cmp	r2, r3
 801319c:	d203      	bcs.n	80131a6 <lv_disp_drv_register+0x6e>
        driver->full_refresh = 0;
 801319e:	7c2b      	ldrb	r3, [r5, #16]
 80131a0:	f023 0302 	bic.w	r3, r3, #2
 80131a4:	742b      	strb	r3, [r5, #16]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80131a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
        LV_LOG_WARN("full_refresh requires at least screen sized draw buffer(s)");
    }

    disp->bg_color = lv_color_white();
 80131aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
#if LV_COLOR_SCREEN_TRANSP
    disp->bg_opa = LV_OPA_TRANSP;
#else
    disp->bg_opa = LV_OPA_COVER;
 80131ac:	23ff      	movs	r3, #255	@ 0xff
 80131ae:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
#endif

#if LV_USE_THEME_DEFAULT
    if(lv_theme_default_is_inited() == false) {
 80131b2:	f013 f9fb 	bl	80265ac <lv_theme_default_is_inited>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d150      	bne.n	801325c <lv_disp_drv_register+0x124>
        disp->theme = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED),
 80131ba:	2005      	movs	r0, #5
 80131bc:	f7f3 fbdc 	bl	8006978 <lv_palette_main>
 80131c0:	4605      	mov	r5, r0
 80131c2:	2000      	movs	r0, #0
 80131c4:	f7f3 fbd8 	bl	8006978 <lv_palette_main>
 80131c8:	4602      	mov	r2, r0
 80131ca:	4b2a      	ldr	r3, [pc, #168]	@ (8013274 <lv_disp_drv_register+0x13c>)
 80131cc:	9300      	str	r3, [sp, #0]
 80131ce:	2300      	movs	r3, #0
 80131d0:	4629      	mov	r1, r5
 80131d2:	4620      	mov	r0, r4
 80131d4:	f013 f9f2 	bl	80265bc <lv_theme_default_init>
 80131d8:	60a0      	str	r0, [r4, #8]
    else {
        disp->theme = lv_theme_default_get();
    }
#endif

    disp->act_scr   = lv_obj_create(NULL); /*Create a default screen on the display*/
 80131da:	2000      	movs	r0, #0
 80131dc:	f005 f8f4 	bl	80183c8 <lv_obj_create>
 80131e0:	6120      	str	r0, [r4, #16]
    disp->top_layer = lv_obj_create(NULL); /*Create top layer on the display*/
 80131e2:	2000      	movs	r0, #0
 80131e4:	f005 f8f0 	bl	80183c8 <lv_obj_create>
 80131e8:	61e0      	str	r0, [r4, #28]
    disp->sys_layer = lv_obj_create(NULL); /*Create sys layer on the display*/
 80131ea:	2000      	movs	r0, #0
 80131ec:	f005 f8ec 	bl	80183c8 <lv_obj_create>
 80131f0:	6220      	str	r0, [r4, #32]
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80131f2:	4d21      	ldr	r5, [pc, #132]	@ (8013278 <lv_disp_drv_register+0x140>)
 80131f4:	462a      	mov	r2, r5
 80131f6:	2100      	movs	r1, #0
 80131f8:	69e0      	ldr	r0, [r4, #28]
 80131fa:	f009 fdeb 	bl	801cdd4 <lv_obj_remove_style>
 80131fe:	462a      	mov	r2, r5
 8013200:	2100      	movs	r1, #0
 8013202:	6a20      	ldr	r0, [r4, #32]
 8013204:	f009 fde6 	bl	801cdd4 <lv_obj_remove_style>
    lv_obj_remove_style_all(disp->top_layer);
    lv_obj_remove_style_all(disp->sys_layer);
    lv_obj_clear_flag(disp->top_layer, LV_OBJ_FLAG_CLICKABLE);
 8013208:	2102      	movs	r1, #2
 801320a:	69e0      	ldr	r0, [r4, #28]
 801320c:	f005 f8e8 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_clear_flag(disp->sys_layer, LV_OBJ_FLAG_CLICKABLE);
 8013210:	2102      	movs	r1, #2
 8013212:	6a20      	ldr	r0, [r4, #32]
 8013214:	f005 f8e4 	bl	80183e0 <lv_obj_clear_flag>

    lv_obj_set_scrollbar_mode(disp->top_layer, LV_SCROLLBAR_MODE_OFF);
 8013218:	2100      	movs	r1, #0
 801321a:	69e0      	ldr	r0, [r4, #28]
 801321c:	f007 fd8b 	bl	801ad36 <lv_obj_set_scrollbar_mode>
    lv_obj_set_scrollbar_mode(disp->sys_layer, LV_SCROLLBAR_MODE_OFF);
 8013220:	2100      	movs	r1, #0
 8013222:	6a20      	ldr	r0, [r4, #32]
 8013224:	f007 fd87 	bl	801ad36 <lv_obj_set_scrollbar_mode>

    lv_obj_invalidate(disp->act_scr);
 8013228:	6920      	ldr	r0, [r4, #16]
 801322a:	f006 fe3c 	bl	8019ea6 <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 801322e:	4b0f      	ldr	r3, [pc, #60]	@ (801326c <lv_disp_drv_register+0x134>)
 8013230:	601e      	str	r6, [r3, #0]
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8013232:	b1be      	cbz	r6, 8013264 <lv_disp_drv_register+0x12c>

    lv_timer_ready(disp->refr_timer); /*Be sure the screen will be refreshed immediately on start up*/
 8013234:	6860      	ldr	r0, [r4, #4]
 8013236:	f013 fbef 	bl	8026a18 <lv_timer_ready>

    return disp;
}
 801323a:	4620      	mov	r0, r4
 801323c:	b002      	add	sp, #8
 801323e:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(disp);
 8013240:	e7fe      	b.n	8013240 <lv_disp_drv_register+0x108>
        lv_draw_ctx_t * draw_ctx = lv_mem_alloc(driver->draw_ctx_size);
 8013242:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8013244:	f003 fb68 	bl	8016918 <lv_mem_alloc>
        LV_ASSERT_MALLOC(draw_ctx);
 8013248:	4606      	mov	r6, r0
 801324a:	b128      	cbz	r0, 8013258 <lv_disp_drv_register+0x120>
        driver->draw_ctx_init(driver, draw_ctx);
 801324c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 801324e:	4601      	mov	r1, r0
 8013250:	4628      	mov	r0, r5
 8013252:	4798      	blx	r3
        driver->draw_ctx = draw_ctx;
 8013254:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8013256:	e77b      	b.n	8013150 <lv_disp_drv_register+0x18>
        LV_ASSERT_MALLOC(draw_ctx);
 8013258:	e7fe      	b.n	8013258 <lv_disp_drv_register+0x120>
    LV_ASSERT_MALLOC(disp->refr_timer);
 801325a:	e7fe      	b.n	801325a <lv_disp_drv_register+0x122>
        disp->theme = lv_theme_default_get();
 801325c:	f013 fa06 	bl	802666c <lv_theme_default_get>
 8013260:	60a0      	str	r0, [r4, #8]
 8013262:	e7ba      	b.n	80131da <lv_disp_drv_register+0xa2>
    if(disp_def == NULL) disp_def = disp; /*Initialize the default display*/
 8013264:	601c      	str	r4, [r3, #0]
 8013266:	e7e5      	b.n	8013234 <lv_disp_drv_register+0xfc>
 8013268:	20006860 	.word	0x20006860
 801326c:	20006894 	.word	0x20006894
 8013270:	0801f099 	.word	0x0801f099
 8013274:	0802a2b8 	.word	0x0802a2b8
 8013278:	000fffff 	.word	0x000fffff

0801327c <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
 801327c:	4b01      	ldr	r3, [pc, #4]	@ (8013284 <lv_disp_get_default+0x8>)
 801327e:	6818      	ldr	r0, [r3, #0]
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	20006894 	.word	0x20006894

08013288 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 8013288:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 801328a:	4603      	mov	r3, r0
 801328c:	b150      	cbz	r0, 80132a4 <lv_disp_get_hor_res+0x1c>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 801328e:	681a      	ldr	r2, [r3, #0]
 8013290:	7c13      	ldrb	r3, [r2, #16]
 8013292:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8013296:	2b01      	cmp	r3, #1
 8013298:	d00b      	beq.n	80132b2 <lv_disp_get_hor_res+0x2a>
 801329a:	2b03      	cmp	r3, #3
 801329c:	d009      	beq.n	80132b2 <lv_disp_get_hor_res+0x2a>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->ver_res;
            default:
                return disp->driver->hor_res;
 801329e:	f9b2 0000 	ldrsh.w	r0, [r2]
 80132a2:	e008      	b.n	80132b6 <lv_disp_get_hor_res+0x2e>
    if(disp == NULL) disp = lv_disp_get_default();
 80132a4:	f7ff ffea 	bl	801327c <lv_disp_get_default>
    if(disp == NULL) {
 80132a8:	4603      	mov	r3, r0
 80132aa:	2800      	cmp	r0, #0
 80132ac:	d1ef      	bne.n	801328e <lv_disp_get_hor_res+0x6>
        return 0;
 80132ae:	2000      	movs	r0, #0
 80132b0:	e001      	b.n	80132b6 <lv_disp_get_hor_res+0x2e>
                return disp->driver->ver_res;
 80132b2:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
        }
    }
}
 80132b6:	bd08      	pop	{r3, pc}

080132b8 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 80132b8:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 80132ba:	4603      	mov	r3, r0
 80132bc:	b150      	cbz	r0, 80132d4 <lv_disp_get_ver_res+0x1c>

    if(disp == NULL) {
        return 0;
    }
    else {
        switch(disp->driver->rotated) {
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	7c13      	ldrb	r3, [r2, #16]
 80132c2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d00b      	beq.n	80132e2 <lv_disp_get_ver_res+0x2a>
 80132ca:	2b03      	cmp	r3, #3
 80132cc:	d009      	beq.n	80132e2 <lv_disp_get_ver_res+0x2a>
            case LV_DISP_ROT_90:
            case LV_DISP_ROT_270:
                return disp->driver->hor_res;
            default:
                return disp->driver->ver_res;
 80132ce:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80132d2:	e008      	b.n	80132e6 <lv_disp_get_ver_res+0x2e>
    if(disp == NULL) disp = lv_disp_get_default();
 80132d4:	f7ff ffd2 	bl	801327c <lv_disp_get_default>
    if(disp == NULL) {
 80132d8:	4603      	mov	r3, r0
 80132da:	2800      	cmp	r0, #0
 80132dc:	d1ef      	bne.n	80132be <lv_disp_get_ver_res+0x6>
        return 0;
 80132de:	2000      	movs	r0, #0
 80132e0:	e001      	b.n	80132e6 <lv_disp_get_ver_res+0x2e>
                return disp->driver->hor_res;
 80132e2:	f9b2 0000 	ldrsh.w	r0, [r2]
        }
    }
}
 80132e6:	bd08      	pop	{r3, pc}

080132e8 <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(const lv_disp_t * disp)
{
 80132e8:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
 80132ea:	4603      	mov	r3, r0
 80132ec:	b120      	cbz	r0, 80132f8 <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
    return disp->driver->dpi;
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	6918      	ldr	r0, [r3, #16]
 80132f2:	f3c0 10c9 	ubfx	r0, r0, #7, #10
}
 80132f6:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
 80132f8:	f7ff ffc0 	bl	801327c <lv_disp_get_default>
    if(disp == NULL) return LV_DPI_DEF;  /*Do not return 0 because it might be a divider*/
 80132fc:	4603      	mov	r3, r0
 80132fe:	2800      	cmp	r0, #0
 8013300:	d1f5      	bne.n	80132ee <lv_disp_get_dpi+0x6>
 8013302:	2082      	movs	r0, #130	@ 0x82
 8013304:	e7f7      	b.n	80132f6 <lv_disp_get_dpi+0xe>

08013306 <lv_disp_flush_ready>:
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
void LV_ATTRIBUTE_FLUSH_READY lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
    disp_drv->draw_buf->flushing = 0;
 8013306:	68c2      	ldr	r2, [r0, #12]
 8013308:	2300      	movs	r3, #0
 801330a:	6113      	str	r3, [r2, #16]
    disp_drv->draw_buf->flushing_last = 0;
 801330c:	68c2      	ldr	r2, [r0, #12]
 801330e:	6153      	str	r3, [r2, #20]
}
 8013310:	4770      	bx	lr
	...

08013314 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
 8013314:	b508      	push	{r3, lr}
    if(disp == NULL)
 8013316:	b120      	cbz	r0, 8013322 <lv_disp_get_next+0xe>
 8013318:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
 801331a:	4804      	ldr	r0, [pc, #16]	@ (801332c <lv_disp_get_next+0x18>)
 801331c:	f003 f929 	bl	8016572 <_lv_ll_get_next>
}
 8013320:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
 8013322:	4802      	ldr	r0, [pc, #8]	@ (801332c <lv_disp_get_next+0x18>)
 8013324:	f003 f91d 	bl	8016562 <_lv_ll_get_head>
 8013328:	e7fa      	b.n	8013320 <lv_disp_get_next+0xc>
 801332a:	bf00      	nop
 801332c:	20006860 	.word	0x20006860

08013330 <lv_disp_get_draw_buf>:
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_draw_buf_t * lv_disp_get_draw_buf(lv_disp_t * disp)
{
    return disp->driver->draw_buf;
 8013330:	6803      	ldr	r3, [r0, #0]
}
 8013332:	68d8      	ldr	r0, [r3, #12]
 8013334:	4770      	bx	lr
	...

08013338 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 8013338:	b508      	push	{r3, lr}
    if(indev == NULL)
 801333a:	b120      	cbz	r0, 8013346 <lv_indev_get_next+0xe>
 801333c:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 801333e:	4804      	ldr	r0, [pc, #16]	@ (8013350 <lv_indev_get_next+0x18>)
 8013340:	f003 f917 	bl	8016572 <_lv_ll_get_next>
}
 8013344:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 8013346:	4802      	ldr	r0, [pc, #8]	@ (8013350 <lv_indev_get_next+0x18>)
 8013348:	f003 f90b 	bl	8016562 <_lv_ll_get_head>
 801334c:	e7fa      	b.n	8013344 <lv_indev_get_next+0xc>
 801334e:	bf00      	nop
 8013350:	20006854 	.word	0x20006854

08013354 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
void LV_ATTRIBUTE_TICK_INC lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
 8013354:	4b03      	ldr	r3, [pc, #12]	@ (8013364 <lv_tick_inc+0x10>)
 8013356:	2200      	movs	r2, #0
 8013358:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 801335a:	4a03      	ldr	r2, [pc, #12]	@ (8013368 <lv_tick_inc+0x14>)
 801335c:	6813      	ldr	r3, [r2, #0]
 801335e:	4403      	add	r3, r0
 8013360:	6013      	str	r3, [r2, #0]
}
 8013362:	4770      	bx	lr
 8013364:	20006898 	.word	0x20006898
 8013368:	2000689c 	.word	0x2000689c

0801336c <lv_tick_get>:
     *This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     *If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     *until `tick_irq_flag` remains `1`.*/
    uint32_t result;
    do {
        tick_irq_flag = 1;
 801336c:	4b04      	ldr	r3, [pc, #16]	@ (8013380 <lv_tick_get+0x14>)
 801336e:	2201      	movs	r2, #1
 8013370:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
 8013372:	4a04      	ldr	r2, [pc, #16]	@ (8013384 <lv_tick_get+0x18>)
 8013374:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle*/
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d0f7      	beq.n	801336c <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
 801337c:	4770      	bx	lr
 801337e:	bf00      	nop
 8013380:	20006898 	.word	0x20006898
 8013384:	2000689c 	.word	0x2000689c

08013388 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 8013388:	b510      	push	{r4, lr}
 801338a:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
 801338c:	f7ff ffee 	bl	801336c <lv_tick_get>

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 8013390:	42a0      	cmp	r0, r4
 8013392:	d301      	bcc.n	8013398 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
 8013394:	1b00      	subs	r0, r0, r4
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
 8013396:	bd10      	pop	{r4, pc}
        prev_tick += act_time;
 8013398:	1b00      	subs	r0, r0, r4
    return prev_tick;
 801339a:	e7fc      	b.n	8013396 <lv_tick_elaps+0xe>

0801339c <lv_img_get_transformed_size>:
        img->src_type = LV_IMG_SRC_UNKNOWN;
    }
}

static lv_point_t lv_img_get_transformed_size(lv_obj_t * obj)
{
 801339c:	b500      	push	{lr}
 801339e:	b087      	sub	sp, #28
    lv_img_t * img = (lv_img_t *)obj;


    lv_area_t area_transform;
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
                                     img->angle, img->zoom, &img->pivot);
 80133a0:	f100 0332 	add.w	r3, r0, #50	@ 0x32
    _lv_img_buf_get_transformed_area(&area_transform, img->w, img->h,
 80133a4:	9301      	str	r3, [sp, #4]
 80133a6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	@ 0x30
 80133ae:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	@ 0x2e
 80133b2:	f9b0 102c 	ldrsh.w	r1, [r0, #44]	@ 0x2c
 80133b6:	a803      	add	r0, sp, #12
 80133b8:	f000 fcb2 	bl	8013d20 <_lv_img_buf_get_transformed_area>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80133bc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80133c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80133c4:	1ad2      	subs	r2, r2, r3
 80133c6:	b292      	uxth	r2, r2
 80133c8:	3201      	adds	r2, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80133ca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80133ce:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80133d2:	1a5b      	subs	r3, r3, r1
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	3301      	adds	r3, #1

    return (lv_point_t) {
 80133d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80133dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80133e0:	2000      	movs	r0, #0
 80133e2:	b293      	uxth	r3, r2
 80133e4:	f363 000f 	bfi	r0, r3, #0, #16
 80133e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80133ec:	f363 401f 	bfi	r0, r3, #16, #16
        lv_area_get_width(&area_transform), lv_area_get_height(&area_transform)
    };
}
 80133f0:	b007      	add	sp, #28
 80133f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080133f8 <draw_img>:
        draw_img(e);
    }
}

static void draw_img(lv_event_t * e)
{
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	b09b      	sub	sp, #108	@ 0x6c
 80133fe:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
 8013400:	f7fd fc90 	bl	8010d24 <lv_event_get_code>
 8013404:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8013406:	4630      	mov	r0, r6
 8013408:	f7fd fc88 	bl	8010d1c <lv_event_get_target>
 801340c:	4604      	mov	r4, r0
    lv_img_t * img = (lv_img_t *)obj;
    if(code == LV_EVENT_COVER_CHECK) {
 801340e:	2d12      	cmp	r5, #18
 8013410:	d006      	beq.n	8013420 <draw_img+0x28>
                info->res = LV_COVER_RES_NOT_COVER;
                return;
            }
        }
    }
    else if(code == LV_EVENT_DRAW_MAIN || code == LV_EVENT_DRAW_POST) {
 8013412:	2d15      	cmp	r5, #21
 8013414:	d070      	beq.n	80134f8 <draw_img+0x100>
 8013416:	2d18      	cmp	r5, #24
 8013418:	d06e      	beq.n	80134f8 <draw_img+0x100>
                LV_LOG_WARN("draw_img: image source type is unknown");
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
            }
        }
    }
}
 801341a:	b01b      	add	sp, #108	@ 0x6c
 801341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8013420:	4630      	mov	r0, r6
 8013422:	f7fd fc83 	bl	8010d2c <lv_event_get_param>
 8013426:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8013428:	7803      	ldrb	r3, [r0, #0]
 801342a:	2b02      	cmp	r3, #2
 801342c:	d0f5      	beq.n	801341a <draw_img+0x22>
        if(img->src_type == LV_IMG_SRC_UNKNOWN || img->src_type == LV_IMG_SRC_SYMBOL) {
 801342e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013432:	f013 0f02 	tst.w	r3, #2
 8013436:	d108      	bne.n	801344a <draw_img+0x52>
        if(img->cf != LV_IMG_CF_TRUE_COLOR && img->cf != LV_IMG_CF_RAW) {
 8013438:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 801343c:	2b10      	cmp	r3, #16
 801343e:	d007      	beq.n	8013450 <draw_img+0x58>
 8013440:	2b04      	cmp	r3, #4
 8013442:	d005      	beq.n	8013450 <draw_img+0x58>
            info->res = LV_COVER_RES_NOT_COVER;
 8013444:	2301      	movs	r3, #1
 8013446:	7003      	strb	r3, [r0, #0]
            return;
 8013448:	e7e7      	b.n	801341a <draw_img+0x22>
            info->res = LV_COVER_RES_NOT_COVER;
 801344a:	2301      	movs	r3, #1
 801344c:	7003      	strb	r3, [r0, #0]
            return;
 801344e:	e7e4      	b.n	801341a <draw_img+0x22>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8013450:	2246      	movs	r2, #70	@ 0x46
 8013452:	2100      	movs	r1, #0
 8013454:	4620      	mov	r0, r4
 8013456:	f009 f94d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801345a:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_img_opa(obj, LV_PART_MAIN) != LV_OPA_COVER) {
 801345c:	28ff      	cmp	r0, #255	@ 0xff
 801345e:	d002      	beq.n	8013466 <draw_img+0x6e>
            info->res = LV_COVER_RES_NOT_COVER;
 8013460:	2301      	movs	r3, #1
 8013462:	702b      	strb	r3, [r5, #0]
            return;
 8013464:	e7d9      	b.n	801341a <draw_img+0x22>
        if(img->angle != 0) {
 8013466:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013468:	b113      	cbz	r3, 8013470 <draw_img+0x78>
            info->res = LV_COVER_RES_NOT_COVER;
 801346a:	2301      	movs	r3, #1
 801346c:	702b      	strb	r3, [r5, #0]
            return;
 801346e:	e7d4      	b.n	801341a <draw_img+0x22>
        const lv_area_t * clip_area = lv_event_get_param(e);
 8013470:	4630      	mov	r0, r6
 8013472:	f7fd fc5b 	bl	8010d2c <lv_event_get_param>
 8013476:	4606      	mov	r6, r0
        if(img->zoom == LV_IMG_ZOOM_NONE) {
 8013478:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801347a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801347e:	d031      	beq.n	80134e4 <draw_img+0xec>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(obj), lv_obj_get_height(obj), 0, img->zoom, &img->pivot);
 8013480:	4620      	mov	r0, r4
 8013482:	f006 f925 	bl	80196d0 <lv_obj_get_width>
 8013486:	4607      	mov	r7, r0
 8013488:	4620      	mov	r0, r4
 801348a:	f006 f928 	bl	80196de <lv_obj_get_height>
 801348e:	4602      	mov	r2, r0
 8013490:	f104 0332 	add.w	r3, r4, #50	@ 0x32
 8013494:	9301      	str	r3, [sp, #4]
 8013496:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013498:	9300      	str	r3, [sp, #0]
 801349a:	2300      	movs	r3, #0
 801349c:	4639      	mov	r1, r7
 801349e:	a812      	add	r0, sp, #72	@ 0x48
 80134a0:	f000 fc3e 	bl	8013d20 <_lv_img_buf_get_transformed_area>
            a.x1 += obj->coords.x1;
 80134a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80134a8:	8aa2      	ldrh	r2, [r4, #20]
 80134aa:	4413      	add	r3, r2
 80134ac:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
            a.y1 += obj->coords.y1;
 80134b0:	f8bd 104a 	ldrh.w	r1, [sp, #74]	@ 0x4a
 80134b4:	8ae3      	ldrh	r3, [r4, #22]
 80134b6:	4419      	add	r1, r3
 80134b8:	f8ad 104a 	strh.w	r1, [sp, #74]	@ 0x4a
            a.x2 += obj->coords.x1;
 80134bc:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80134c0:	440a      	add	r2, r1
 80134c2:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
            a.y2 += obj->coords.y1;
 80134c6:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 80134ca:	4413      	add	r3, r2
 80134cc:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
            if(_lv_area_is_in(clip_area, &a, 0) == false) {
 80134d0:	2200      	movs	r2, #0
 80134d2:	a912      	add	r1, sp, #72	@ 0x48
 80134d4:	4630      	mov	r0, r6
 80134d6:	f7ee fbc1 	bl	8001c5c <_lv_area_is_in>
 80134da:	2800      	cmp	r0, #0
 80134dc:	d19d      	bne.n	801341a <draw_img+0x22>
                info->res = LV_COVER_RES_NOT_COVER;
 80134de:	2301      	movs	r3, #1
 80134e0:	702b      	strb	r3, [r5, #0]
                return;
 80134e2:	e79a      	b.n	801341a <draw_img+0x22>
            if(_lv_area_is_in(clip_area, &obj->coords, 0) == false) {
 80134e4:	2200      	movs	r2, #0
 80134e6:	f104 0114 	add.w	r1, r4, #20
 80134ea:	f7ee fbb7 	bl	8001c5c <_lv_area_is_in>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	d193      	bne.n	801341a <draw_img+0x22>
                info->res = LV_COVER_RES_NOT_COVER;
 80134f2:	2301      	movs	r3, #1
 80134f4:	702b      	strb	r3, [r5, #0]
                return;
 80134f6:	e790      	b.n	801341a <draw_img+0x22>
        lv_coord_t obj_w = lv_obj_get_width(obj);
 80134f8:	4620      	mov	r0, r4
 80134fa:	f006 f8e9 	bl	80196d0 <lv_obj_get_width>
 80134fe:	4681      	mov	r9, r0
        lv_coord_t obj_h = lv_obj_get_height(obj);
 8013500:	4620      	mov	r0, r4
 8013502:	f006 f8ec 	bl	80196de <lv_obj_get_height>
 8013506:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8013508:	2232      	movs	r2, #50	@ 0x32
 801350a:	2100      	movs	r1, #0
 801350c:	4620      	mov	r0, r4
 801350e:	f009 f8f1 	bl	801c6f4 <lv_obj_get_style_prop>
 8013512:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8013514:	2212      	movs	r2, #18
 8013516:	2100      	movs	r1, #0
 8013518:	4620      	mov	r0, r4
 801351a:	f009 f8eb 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t pleft = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 801351e:	fa1f f888 	uxth.w	r8, r8
 8013522:	fa18 f780 	uxtah	r7, r8, r0
 8013526:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8013528:	2213      	movs	r2, #19
 801352a:	2100      	movs	r1, #0
 801352c:	4620      	mov	r0, r4
 801352e:	f009 f8e1 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t pright = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 8013532:	fa18 f080 	uxtah	r0, r8, r0
 8013536:	b283      	uxth	r3, r0
 8013538:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801353a:	2210      	movs	r2, #16
 801353c:	2100      	movs	r1, #0
 801353e:	4620      	mov	r0, r4
 8013540:	f009 f8d8 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t ptop = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8013544:	fa18 f080 	uxtah	r0, r8, r0
 8013548:	b283      	uxth	r3, r0
 801354a:	9302      	str	r3, [sp, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801354c:	2211      	movs	r2, #17
 801354e:	2100      	movs	r1, #0
 8013550:	4620      	mov	r0, r4
 8013552:	f009 f8cf 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t pbottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8013556:	fa18 f080 	uxtah	r0, r8, r0
 801355a:	b281      	uxth	r1, r0
 801355c:	9104      	str	r1, [sp, #16]
        bg_pivot.x = img->pivot.x + pleft;
 801355e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013560:	443b      	add	r3, r7
 8013562:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_pivot.y = img->pivot.y + ptop;
 8013566:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013568:	9a02      	ldr	r2, [sp, #8]
 801356a:	4413      	add	r3, r2
 801356c:	f8ad 301a 	strh.w	r3, [sp, #26]
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8013570:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8013574:	f003 0303 	and.w	r3, r3, #3
 8013578:	2b01      	cmp	r3, #1
 801357a:	f000 80cc 	beq.w	8013716 <draw_img+0x31e>
            _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
 801357e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8013582:	aa06      	add	r2, sp, #24
 8013584:	9201      	str	r2, [sp, #4]
 8013586:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013588:	9200      	str	r2, [sp, #0]
 801358a:	4652      	mov	r2, sl
 801358c:	4649      	mov	r1, r9
 801358e:	a808      	add	r0, sp, #32
 8013590:	f000 fbc6 	bl	8013d20 <_lv_img_buf_get_transformed_area>
            bg_coords.x1 += obj->coords.x1;
 8013594:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013598:	8aa2      	ldrh	r2, [r4, #20]
 801359a:	4413      	add	r3, r2
 801359c:	f8ad 3020 	strh.w	r3, [sp, #32]
            bg_coords.y1 += obj->coords.y1;
 80135a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80135a4:	8ae3      	ldrh	r3, [r4, #22]
 80135a6:	4419      	add	r1, r3
 80135a8:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
            bg_coords.x2 += obj->coords.x1;
 80135ac:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80135b0:	440a      	add	r2, r1
 80135b2:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
            bg_coords.y2 += obj->coords.y1;
 80135b6:	f8bd 2026 	ldrh.w	r2, [sp, #38]	@ 0x26
 80135ba:	4413      	add	r3, r2
 80135bc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    dest->x1 = src->x1;
 80135c0:	f9b4 b014 	ldrsh.w	fp, [r4, #20]
 80135c4:	f8ad b028 	strh.w	fp, [sp, #40]	@ 0x28
    dest->y1 = src->y1;
 80135c8:	f9b4 a016 	ldrsh.w	sl, [r4, #22]
 80135cc:	f8ad a02a 	strh.w	sl, [sp, #42]	@ 0x2a
    dest->x2 = src->x2;
 80135d0:	f9b4 9018 	ldrsh.w	r9, [r4, #24]
 80135d4:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
    dest->y2 = src->y2;
 80135d8:	f9b4 801a 	ldrsh.w	r8, [r4, #26]
 80135dc:	f8ad 802e 	strh.w	r8, [sp, #46]	@ 0x2e
    dest->x1 = src->x1;
 80135e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80135e4:	82a3      	strh	r3, [r4, #20]
    dest->y1 = src->y1;
 80135e6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80135ea:	82e3      	strh	r3, [r4, #22]
    dest->x2 = src->x2;
 80135ec:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 80135f0:	8323      	strh	r3, [r4, #24]
    dest->y2 = src->y2;
 80135f2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	@ 0x26
 80135f6:	8363      	strh	r3, [r4, #26]
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 80135f8:	4631      	mov	r1, r6
 80135fa:	48b9      	ldr	r0, [pc, #740]	@ (80138e0 <draw_img+0x4e8>)
 80135fc:	f7fd faba 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8013600:	2801      	cmp	r0, #1
 8013602:	f47f af0a 	bne.w	801341a <draw_img+0x22>
    dest->x1 = src->x1;
 8013606:	f8a4 b014 	strh.w	fp, [r4, #20]
    dest->y1 = src->y1;
 801360a:	f8a4 a016 	strh.w	sl, [r4, #22]
    dest->x2 = src->x2;
 801360e:	f8a4 9018 	strh.w	r9, [r4, #24]
    dest->y2 = src->y2;
 8013612:	f8a4 801a 	strh.w	r8, [r4, #26]
        if(code == LV_EVENT_DRAW_MAIN) {
 8013616:	2d15      	cmp	r5, #21
 8013618:	f47f aeff 	bne.w	801341a <draw_img+0x22>
            if(img->h == 0 || img->w == 0) return;
 801361c:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	@ 0x2e
 8013620:	2b00      	cmp	r3, #0
 8013622:	f43f aefa 	beq.w	801341a <draw_img+0x22>
 8013626:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 801362a:	2b00      	cmp	r3, #0
 801362c:	f43f aef5 	beq.w	801341a <draw_img+0x22>
            if(img->zoom == 0) return;
 8013630:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013632:	2b00      	cmp	r3, #0
 8013634:	f43f aef1 	beq.w	801341a <draw_img+0x22>
            lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8013638:	4630      	mov	r0, r6
 801363a:	f7fd fbe7 	bl	8010e0c <lv_event_get_draw_ctx>
 801363e:	4605      	mov	r5, r0
    dest->x1 = src->x1;
 8013640:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 8013644:	f8ad 8030 	strh.w	r8, [sp, #48]	@ 0x30
    dest->y1 = src->y1;
 8013648:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801364c:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
    dest->x2 = src->x2;
 8013650:	f9b4 9018 	ldrsh.w	r9, [r4, #24]
 8013654:	f8ad 9034 	strh.w	r9, [sp, #52]	@ 0x34
    dest->y2 = src->y2;
 8013658:	f9b4 a01a 	ldrsh.w	sl, [r4, #26]
 801365c:	f8ad a036 	strh.w	sl, [sp, #54]	@ 0x36
            lv_point_t img_size_final = lv_img_get_transformed_size(obj);
 8013660:	4620      	mov	r0, r4
 8013662:	f7ff fe9b 	bl	801339c <lv_img_get_transformed_size>
 8013666:	9007      	str	r0, [sp, #28]
            if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8013668:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801366c:	f003 0303 	and.w	r3, r3, #3
 8013670:	2b01      	cmp	r3, #1
 8013672:	d055      	beq.n	8013720 <draw_img+0x328>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8013674:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8013678:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801367c:	1a9b      	subs	r3, r3, r2
 801367e:	b29b      	uxth	r3, r3
 8013680:	3301      	adds	r3, #1
 8013682:	b29b      	uxth	r3, r3
                img_max_area.x2 = img_max_area.x1 + lv_area_get_width(&bg_coords) - 1;
 8013684:	fa13 f388 	uxtah	r3, r3, r8
 8013688:	b29b      	uxth	r3, r3
 801368a:	3b01      	subs	r3, #1
 801368c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8013690:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8013694:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	b29b      	uxth	r3, r3
 801369c:	3301      	adds	r3, #1
 801369e:	b29b      	uxth	r3, r3
                img_max_area.y2 = img_max_area.y1 + lv_area_get_height(&bg_coords) - 1;
 80136a0:	fa13 f386 	uxtah	r3, r3, r6
 80136a4:	b29b      	uxth	r3, r3
 80136a6:	3b01      	subs	r3, #1
 80136a8:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
            img_max_area.x1 += pleft;
 80136ac:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80136b0:	443b      	add	r3, r7
 80136b2:	fa1f fa83 	uxth.w	sl, r3
 80136b6:	fa0f f983 	sxth.w	r9, r3
 80136ba:	f8ad 9030 	strh.w	r9, [sp, #48]	@ 0x30
            img_max_area.y1 += ptop;
 80136be:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80136c2:	9a02      	ldr	r2, [sp, #8]
 80136c4:	4413      	add	r3, r2
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	9205      	str	r2, [sp, #20]
 80136ca:	fa0f fb83 	sxth.w	fp, r3
 80136ce:	f8ad b032 	strh.w	fp, [sp, #50]	@ 0x32
            img_max_area.x2 -= pright;
 80136d2:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	1af6      	subs	r6, r6, r3
 80136da:	b236      	sxth	r6, r6
 80136dc:	f8ad 6034 	strh.w	r6, [sp, #52]	@ 0x34
            img_max_area.y2 -= pbottom;
 80136e0:	f8bd 8036 	ldrh.w	r8, [sp, #54]	@ 0x36
 80136e4:	9b04      	ldr	r3, [sp, #16]
 80136e6:	eba8 0803 	sub.w	r8, r8, r3
 80136ea:	fa0f f888 	sxth.w	r8, r8
 80136ee:	f8ad 8036 	strh.w	r8, [sp, #54]	@ 0x36
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_VARIABLE) {
 80136f2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80136f6:	f013 0f02 	tst.w	r3, #2
 80136fa:	d038      	beq.n	801376e <draw_img+0x376>
            else if(img->src_type == LV_IMG_SRC_SYMBOL) {
 80136fc:	f003 0303 	and.w	r3, r3, #3
 8013700:	2b02      	cmp	r3, #2
 8013702:	f000 80db 	beq.w	80138bc <draw_img+0x4c4>
                lv_draw_img(draw_ctx, NULL, &obj->coords, NULL);
 8013706:	2300      	movs	r3, #0
 8013708:	f104 0214 	add.w	r2, r4, #20
 801370c:	4619      	mov	r1, r3
 801370e:	4628      	mov	r0, r5
 8013710:	f7f4 fc00 	bl	8007f14 <lv_draw_img>
 8013714:	e681      	b.n	801341a <draw_img+0x22>
            lv_obj_get_coords(obj, &bg_coords);
 8013716:	a908      	add	r1, sp, #32
 8013718:	4620      	mov	r0, r4
 801371a:	f005 ff86 	bl	801962a <lv_obj_get_coords>
 801371e:	e74f      	b.n	80135c0 <draw_img+0x1c8>
                img_max_area.x1 -= ((img->w - img_size_final.x) + 1) / 2;
 8013720:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8013724:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8013728:	1a9b      	subs	r3, r3, r2
 801372a:	3301      	adds	r3, #1
 801372c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8013730:	105b      	asrs	r3, r3, #1
 8013732:	425b      	negs	r3, r3
 8013734:	b29b      	uxth	r3, r3
 8013736:	fa13 f888 	uxtah	r8, r3, r8
 801373a:	f8ad 8030 	strh.w	r8, [sp, #48]	@ 0x30
                img_max_area.x2 -= ((img->w - img_size_final.x) + 1) / 2;
 801373e:	fa13 f989 	uxtah	r9, r3, r9
 8013742:	f8ad 9034 	strh.w	r9, [sp, #52]	@ 0x34
                img_max_area.y1 -= ((img->h - img_size_final.y) + 1) / 2;
 8013746:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	@ 0x2e
 801374a:	f9bd 201e 	ldrsh.w	r2, [sp, #30]
 801374e:	1a9b      	subs	r3, r3, r2
 8013750:	3301      	adds	r3, #1
 8013752:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8013756:	105b      	asrs	r3, r3, #1
 8013758:	425b      	negs	r3, r3
 801375a:	b29b      	uxth	r3, r3
 801375c:	fa13 f686 	uxtah	r6, r3, r6
 8013760:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
                img_max_area.y2 -= ((img->h - img_size_final.y) + 1) / 2;
 8013764:	fa13 fa8a 	uxtah	sl, r3, sl
 8013768:	f8ad a036 	strh.w	sl, [sp, #54]	@ 0x36
 801376c:	e79e      	b.n	80136ac <draw_img+0x2b4>
                lv_draw_img_dsc_init(&img_dsc);
 801376e:	a812      	add	r0, sp, #72	@ 0x48
 8013770:	f7f4 fa42 	bl	8007bf8 <lv_draw_img_dsc_init>
                lv_obj_init_draw_img_dsc(obj, LV_PART_MAIN, &img_dsc);
 8013774:	aa12      	add	r2, sp, #72	@ 0x48
 8013776:	2100      	movs	r1, #0
 8013778:	4620      	mov	r0, r4
 801377a:	f005 fc46 	bl	801900a <lv_obj_init_draw_img_dsc>
                img_dsc.zoom = img->zoom;
 801377e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013780:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
                img_dsc.angle = img->angle;
 8013784:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 8013788:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
                img_dsc.pivot.x = img->pivot.x;
 801378c:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	@ 0x32
 8013790:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
                img_dsc.pivot.y = img->pivot.y;
 8013794:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8013798:	f8ad 304e 	strh.w	r3, [sp, #78]	@ 0x4e
                img_dsc.antialias = img->antialias;
 801379c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80137a0:	09db      	lsrs	r3, r3, #7
 80137a2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 80137a6:	f363 0200 	bfi	r2, r3, #0, #1
 80137aa:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
                img_clip_area.x1 = bg_coords.x1 + pleft;
 80137ae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80137b2:	441f      	add	r7, r3
 80137b4:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
                img_clip_area.y1 = bg_coords.y1 + ptop;
 80137b8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80137bc:	9a02      	ldr	r2, [sp, #8]
 80137be:	441a      	add	r2, r3
 80137c0:	f8ad 203a 	strh.w	r2, [sp, #58]	@ 0x3a
                img_clip_area.x2 = bg_coords.x2 - pright;
 80137c4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 80137c8:	9a03      	ldr	r2, [sp, #12]
 80137ca:	1a9b      	subs	r3, r3, r2
 80137cc:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
                img_clip_area.y2 = bg_coords.y2 - pbottom;
 80137d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 80137d4:	9a04      	ldr	r2, [sp, #16]
 80137d6:	1a9b      	subs	r3, r3, r2
 80137d8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
                const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 80137dc:	68ab      	ldr	r3, [r5, #8]
 80137de:	9302      	str	r3, [sp, #8]
                if(!_lv_area_intersect(&img_clip_area, draw_ctx->clip_area, &img_clip_area)) return;
 80137e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80137e2:	4619      	mov	r1, r3
 80137e4:	4610      	mov	r0, r2
 80137e6:	f7ee f905 	bl	80019f4 <_lv_area_intersect>
 80137ea:	2800      	cmp	r0, #0
 80137ec:	f43f ae15 	beq.w	801341a <draw_img+0x22>
                draw_ctx->clip_area = &img_clip_area;
 80137f0:	ab0e      	add	r3, sp, #56	@ 0x38
 80137f2:	60ab      	str	r3, [r5, #8]
                lv_coord_t offset_x = img->offset.x % img->w;
 80137f4:	f9b4 7028 	ldrsh.w	r7, [r4, #40]	@ 0x28
 80137f8:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 80137fc:	fb97 f2f3 	sdiv	r2, r7, r3
 8013800:	fb03 7712 	mls	r7, r3, r2, r7
                lv_coord_t offset_y = img->offset.y % img->h;
 8013804:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	@ 0x2a
 8013808:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	@ 0x2e
 801380c:	fb93 f1f2 	sdiv	r1, r3, r2
 8013810:	fb02 3311 	mls	r3, r2, r1, r3
                coords_tmp.y1 = img_max_area.y1 + offset_y;
 8013814:	9905      	ldr	r1, [sp, #20]
 8013816:	4419      	add	r1, r3
 8013818:	460b      	mov	r3, r1
 801381a:	b289      	uxth	r1, r1
 801381c:	b21b      	sxth	r3, r3
 801381e:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
                if(coords_tmp.y1 > img_max_area.y1) coords_tmp.y1 -= img->h;
 8013822:	459b      	cmp	fp, r3
 8013824:	da03      	bge.n	801382e <draw_img+0x436>
 8013826:	b293      	uxth	r3, r2
 8013828:	1ac9      	subs	r1, r1, r3
 801382a:	f8ad 1042 	strh.w	r1, [sp, #66]	@ 0x42
                coords_tmp.y2 = coords_tmp.y1 + img->h - 1;
 801382e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 8013832:	fa13 f382 	uxtah	r3, r3, r2
 8013836:	b29b      	uxth	r3, r3
 8013838:	3b01      	subs	r3, #1
 801383a:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 801383e:	e021      	b.n	8013884 <draw_img+0x48c>
                        lv_draw_img(draw_ctx, &img_dsc, &coords_tmp, img->src);
 8013840:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013842:	aa10      	add	r2, sp, #64	@ 0x40
 8013844:	a912      	add	r1, sp, #72	@ 0x48
 8013846:	4628      	mov	r0, r5
 8013848:	f7f4 fb64 	bl	8007f14 <lv_draw_img>
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 801384c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013850:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8013854:	441a      	add	r2, r3
 8013856:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801385a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 801385e:	4413      	add	r3, r2
 8013860:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8013864:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8013868:	429e      	cmp	r6, r3
 801386a:	dce9      	bgt.n	8013840 <draw_img+0x448>
                for(; coords_tmp.y1 < img_max_area.y2; coords_tmp.y1 += img_size_final.y, coords_tmp.y2 += img_size_final.y) {
 801386c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013870:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8013874:	441a      	add	r2, r3
 8013876:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801387a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	@ 0x46
 801387e:	4413      	add	r3, r2
 8013880:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 8013884:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8013888:	4598      	cmp	r8, r3
 801388a:	dd14      	ble.n	80138b6 <draw_img+0x4be>
                    coords_tmp.x1 = img_max_area.x1 + offset_x;
 801388c:	eb0a 0307 	add.w	r3, sl, r7
 8013890:	b29a      	uxth	r2, r3
 8013892:	b21b      	sxth	r3, r3
 8013894:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
                    if(coords_tmp.x1 > img_max_area.x1) coords_tmp.x1 -= img->w;
 8013898:	4599      	cmp	r9, r3
 801389a:	da03      	bge.n	80138a4 <draw_img+0x4ac>
 801389c:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 801389e:	1ad2      	subs	r2, r2, r3
 80138a0:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
                    coords_tmp.x2 = coords_tmp.x1 + img->w - 1;
 80138a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80138a8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80138aa:	4413      	add	r3, r2
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	3b01      	subs	r3, #1
 80138b0:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
                    for(; coords_tmp.x1 < img_max_area.x2; coords_tmp.x1 += img_size_final.x, coords_tmp.x2 += img_size_final.x) {
 80138b4:	e7d6      	b.n	8013864 <draw_img+0x46c>
                draw_ctx->clip_area = clip_area_ori;
 80138b6:	9b02      	ldr	r3, [sp, #8]
 80138b8:	60ab      	str	r3, [r5, #8]
 80138ba:	e5ae      	b.n	801341a <draw_img+0x22>
                lv_draw_label_dsc_init(&label_dsc);
 80138bc:	a812      	add	r0, sp, #72	@ 0x48
 80138be:	f7f4 fb73 	bl	8007fa8 <lv_draw_label_dsc_init>
                lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_dsc);
 80138c2:	aa12      	add	r2, sp, #72	@ 0x48
 80138c4:	2100      	movs	r1, #0
 80138c6:	4620      	mov	r0, r4
 80138c8:	f005 fb4e 	bl	8018f68 <lv_obj_init_draw_label_dsc>
                lv_draw_label(draw_ctx, &label_dsc, &obj->coords, img->src, NULL);
 80138cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80138ce:	2200      	movs	r2, #0
 80138d0:	9200      	str	r2, [sp, #0]
 80138d2:	f104 0214 	add.w	r2, r4, #20
 80138d6:	a912      	add	r1, sp, #72	@ 0x48
 80138d8:	4628      	mov	r0, r5
 80138da:	f7f4 fb95 	bl	8008008 <lv_draw_label>
 80138de:	e59c      	b.n	801341a <draw_img+0x22>
 80138e0:	0802d800 	.word	0x0802d800

080138e4 <lv_img_destructor>:
    if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 80138e4:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 80138e8:	f003 0303 	and.w	r3, r3, #3
 80138ec:	3b01      	subs	r3, #1
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	2b01      	cmp	r3, #1
 80138f2:	d900      	bls.n	80138f6 <lv_img_destructor+0x12>
 80138f4:	4770      	bx	lr
{
 80138f6:	b510      	push	{r4, lr}
 80138f8:	460c      	mov	r4, r1
        lv_mem_free((void *)img->src);
 80138fa:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80138fc:	f003 f82a 	bl	8016954 <lv_mem_free>
        img->src      = NULL;
 8013900:	2300      	movs	r3, #0
 8013902:	6263      	str	r3, [r4, #36]	@ 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8013904:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013908:	f043 0303 	orr.w	r3, r3, #3
 801390c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8013910:	bd10      	pop	{r4, pc}

08013912 <lv_img_constructor>:
{
 8013912:	b538      	push	{r3, r4, r5, lr}
 8013914:	460c      	mov	r4, r1
    img->src       = NULL;
 8013916:	2500      	movs	r5, #0
 8013918:	624d      	str	r5, [r1, #36]	@ 0x24
    img->src_type  = LV_IMG_SRC_UNKNOWN;
 801391a:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 801391e:	f043 0303 	orr.w	r3, r3, #3
 8013922:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
    img->cf        = LV_IMG_CF_UNKNOWN;
 8013926:	b2db      	uxtb	r3, r3
 8013928:	f365 0386 	bfi	r3, r5, #2, #5
 801392c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
    img->w         = lv_obj_get_width(obj);
 8013930:	4608      	mov	r0, r1
 8013932:	f005 fecd 	bl	80196d0 <lv_obj_get_width>
 8013936:	85a0      	strh	r0, [r4, #44]	@ 0x2c
    img->h         = lv_obj_get_height(obj);
 8013938:	4620      	mov	r0, r4
 801393a:	f005 fed0 	bl	80196de <lv_obj_get_height>
 801393e:	85e0      	strh	r0, [r4, #46]	@ 0x2e
    img->angle = 0;
 8013940:	8625      	strh	r5, [r4, #48]	@ 0x30
    img->zoom = LV_IMG_ZOOM_NONE;
 8013942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013946:	86e3      	strh	r3, [r4, #54]	@ 0x36
    img->antialias = LV_COLOR_DEPTH > 8 ? 1 : 0;
 8013948:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801394c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013950:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    img->offset.x  = 0;
 8013954:	8525      	strh	r5, [r4, #40]	@ 0x28
    img->offset.y  = 0;
 8013956:	8565      	strh	r5, [r4, #42]	@ 0x2a
    img->pivot.x = 0;
 8013958:	8665      	strh	r5, [r4, #50]	@ 0x32
    img->pivot.y = 0;
 801395a:	86a5      	strh	r5, [r4, #52]	@ 0x34
    img->obj_size_mode = LV_IMG_SIZE_MODE_VIRTUAL;
 801395c:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8013960:	f365 0301 	bfi	r3, r5, #0, #2
 8013964:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8013968:	2102      	movs	r1, #2
 801396a:	4620      	mov	r0, r4
 801396c:	f004 fd38 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_ADV_HITTEST);
 8013970:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8013974:	4620      	mov	r0, r4
 8013976:	f004 ffc3 	bl	8018900 <lv_obj_add_flag>
}
 801397a:	bd38      	pop	{r3, r4, r5, pc}

0801397c <lv_img_create>:
{
 801397c:	b510      	push	{r4, lr}
 801397e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8013980:	4803      	ldr	r0, [pc, #12]	@ (8013990 <lv_img_create+0x14>)
 8013982:	f005 f84f 	bl	8018a24 <lv_obj_class_create_obj>
 8013986:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8013988:	f005 f8eb 	bl	8018b62 <lv_obj_class_init_obj>
}
 801398c:	4620      	mov	r0, r4
 801398e:	bd10      	pop	{r4, pc}
 8013990:	0802d800 	.word	0x0802d800

08013994 <lv_img_set_src>:
{
 8013994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013998:	b086      	sub	sp, #24
 801399a:	4604      	mov	r4, r0
 801399c:	460e      	mov	r6, r1
    lv_obj_invalidate(obj);
 801399e:	f006 fa82 	bl	8019ea6 <lv_obj_invalidate>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80139a2:	4630      	mov	r0, r6
 80139a4:	f7f4 f970 	bl	8007c88 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_UNKNOWN) {
 80139a8:	2803      	cmp	r0, #3
 80139aa:	d040      	beq.n	8013a2e <lv_img_set_src+0x9a>
 80139ac:	4605      	mov	r5, r0
    lv_img_decoder_get_info(src, &header);
 80139ae:	a905      	add	r1, sp, #20
 80139b0:	4630      	mov	r0, r6
 80139b2:	f000 fdef 	bl	8014594 <lv_img_decoder_get_info>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80139b6:	2d00      	cmp	r5, #0
 80139b8:	d152      	bne.n	8013a60 <lv_img_set_src+0xcc>
        if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 80139ba:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80139be:	f003 0303 	and.w	r3, r3, #3
 80139c2:	3b01      	subs	r3, #1
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b01      	cmp	r3, #1
 80139c8:	d946      	bls.n	8013a58 <lv_img_set_src+0xc4>
        img->src = src;
 80139ca:	6266      	str	r6, [r4, #36]	@ 0x24
    if(src_type == LV_IMG_SRC_SYMBOL) {
 80139cc:	2d02      	cmp	r5, #2
 80139ce:	d06b      	beq.n	8013aa8 <lv_img_set_src+0x114>
    img->src_type = src_type;
 80139d0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80139d4:	f365 0301 	bfi	r3, r5, #0, #2
 80139d8:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    img->w        = header.w;
 80139dc:	9a05      	ldr	r2, [sp, #20]
 80139de:	f3c2 238a 	ubfx	r3, r2, #10, #11
 80139e2:	85a3      	strh	r3, [r4, #44]	@ 0x2c
    img->h        = header.h;
 80139e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80139e8:	f3c3 114a 	ubfx	r1, r3, #5, #11
 80139ec:	85e1      	strh	r1, [r4, #46]	@ 0x2e
    img->cf       = header.cf;
 80139ee:	f89d 0014 	ldrb.w	r0, [sp, #20]
 80139f2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80139f6:	f360 0186 	bfi	r1, r0, #2, #5
 80139fa:	f884 1038 	strb.w	r1, [r4, #56]	@ 0x38
    img->pivot.x = header.w / 2;
 80139fe:	f3c2 22c9 	ubfx	r2, r2, #11, #10
 8013a02:	8662      	strh	r2, [r4, #50]	@ 0x32
    img->pivot.y = header.h / 2;
 8013a04:	f3c3 1389 	ubfx	r3, r3, #6, #10
 8013a08:	86a3      	strh	r3, [r4, #52]	@ 0x34
    lv_obj_refresh_self_size(obj);
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f006 f89c 	bl	8019b48 <lv_obj_refresh_self_size>
    if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_size(obj);
 8013a10:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013a12:	b91b      	cbnz	r3, 8013a1c <lv_img_set_src+0x88>
 8013a14:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8013a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a1a:	d002      	beq.n	8013a22 <lv_img_set_src+0x8e>
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f005 fc65 	bl	80192ec <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 8013a22:	4620      	mov	r0, r4
 8013a24:	f006 fa3f 	bl	8019ea6 <lv_obj_invalidate>
}
 8013a28:	b006      	add	sp, #24
 8013a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(img->src_type == LV_IMG_SRC_SYMBOL || img->src_type == LV_IMG_SRC_FILE) {
 8013a2e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013a32:	f003 0303 	and.w	r3, r3, #3
 8013a36:	3b01      	subs	r3, #1
 8013a38:	b2db      	uxtb	r3, r3
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d908      	bls.n	8013a50 <lv_img_set_src+0xbc>
        img->src      = NULL;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	6263      	str	r3, [r4, #36]	@ 0x24
        img->src_type = LV_IMG_SRC_UNKNOWN;
 8013a42:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013a46:	f043 0303 	orr.w	r3, r3, #3
 8013a4a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
        return;
 8013a4e:	e7eb      	b.n	8013a28 <lv_img_set_src+0x94>
            lv_mem_free((void *)img->src);
 8013a50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013a52:	f002 ff7f 	bl	8016954 <lv_mem_free>
 8013a56:	e7f2      	b.n	8013a3e <lv_img_set_src+0xaa>
            lv_mem_free((void *)img->src);
 8013a58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8013a5a:	f002 ff7b 	bl	8016954 <lv_mem_free>
 8013a5e:	e7b4      	b.n	80139ca <lv_img_set_src+0x36>
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
 8013a60:	1e6b      	subs	r3, r5, #1
 8013a62:	b2db      	uxtb	r3, r3
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d8b3      	bhi.n	80139d0 <lv_img_set_src+0x3c>
        if(img->src != src) {
 8013a68:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8013a6a:	42b7      	cmp	r7, r6
 8013a6c:	d0ae      	beq.n	80139cc <lv_img_set_src+0x38>
            if(img->src_type == LV_IMG_SRC_FILE || img->src_type == LV_IMG_SRC_SYMBOL) {
 8013a6e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013a72:	f003 0303 	and.w	r3, r3, #3
 8013a76:	3b01      	subs	r3, #1
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b01      	cmp	r3, #1
 8013a7c:	d900      	bls.n	8013a80 <lv_img_set_src+0xec>
            const void * old_src = NULL;
 8013a7e:	2700      	movs	r7, #0
            char * new_str = lv_mem_alloc(strlen(src) + 1);
 8013a80:	4630      	mov	r0, r6
 8013a82:	f7ec fb8b 	bl	800019c <strlen>
 8013a86:	3001      	adds	r0, #1
 8013a88:	f002 ff46 	bl	8016918 <lv_mem_alloc>
            LV_ASSERT_MALLOC(new_str);
 8013a8c:	4680      	mov	r8, r0
 8013a8e:	b150      	cbz	r0, 8013aa6 <lv_img_set_src+0x112>
            strcpy(new_str, src);
 8013a90:	4631      	mov	r1, r6
 8013a92:	f015 fda1 	bl	80295d8 <strcpy>
            img->src = new_str;
 8013a96:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
            if(old_src) lv_mem_free((void *)old_src);
 8013a9a:	2f00      	cmp	r7, #0
 8013a9c:	d096      	beq.n	80139cc <lv_img_set_src+0x38>
 8013a9e:	4638      	mov	r0, r7
 8013aa0:	f002 ff58 	bl	8016954 <lv_mem_free>
 8013aa4:	e792      	b.n	80139cc <lv_img_set_src+0x38>
            LV_ASSERT_MALLOC(new_str);
 8013aa6:	e7fe      	b.n	8013aa6 <lv_img_set_src+0x112>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8013aa8:	2257      	movs	r2, #87	@ 0x57
 8013aaa:	2100      	movs	r1, #0
 8013aac:	4620      	mov	r0, r4
 8013aae:	f008 fe21 	bl	801c6f4 <lv_obj_get_style_prop>
 8013ab2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8013ab4:	2258      	movs	r2, #88	@ 0x58
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	4620      	mov	r0, r4
 8013aba:	f008 fe1b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013abe:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8013ac2:	2259      	movs	r2, #89	@ 0x59
 8013ac4:	2100      	movs	r1, #0
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f008 fe14 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8013acc:	b200      	sxth	r0, r0
        lv_txt_get_size(&size, src, font, letter_space, line_space, LV_COORD_MAX, LV_TEXT_FLAG_NONE);
 8013ace:	2300      	movs	r3, #0
 8013ad0:	9302      	str	r3, [sp, #8]
 8013ad2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	9000      	str	r0, [sp, #0]
 8013ada:	4643      	mov	r3, r8
 8013adc:	463a      	mov	r2, r7
 8013ade:	4631      	mov	r1, r6
 8013ae0:	a804      	add	r0, sp, #16
 8013ae2:	f013 ff12 	bl	802790a <lv_txt_get_size>
        header.w = size.x;
 8013ae6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013aea:	9b05      	ldr	r3, [sp, #20]
 8013aec:	f362 2394 	bfi	r3, r2, #10, #11
 8013af0:	9305      	str	r3, [sp, #20]
        header.h = size.y;
 8013af2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8013af6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013afa:	f362 134f 	bfi	r3, r2, #5, #11
 8013afe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b02:	e765      	b.n	80139d0 <lv_img_set_src+0x3c>

08013b04 <lv_img_event>:
{
 8013b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b08:	b084      	sub	sp, #16
 8013b0a:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 8013b0c:	4608      	mov	r0, r1
 8013b0e:	f7fd f909 	bl	8010d24 <lv_event_get_code>
 8013b12:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_POST) {
 8013b14:	2815      	cmp	r0, #21
 8013b16:	d001      	beq.n	8013b1c <lv_img_event+0x18>
 8013b18:	2818      	cmp	r0, #24
 8013b1a:	d124      	bne.n	8013b66 <lv_img_event+0x62>
    lv_obj_t * obj = lv_event_get_target(e);
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	f7fd f8fd 	bl	8010d1c <lv_event_get_target>
 8013b22:	4606      	mov	r6, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8013b24:	3c11      	subs	r4, #17
 8013b26:	2c1b      	cmp	r4, #27
 8013b28:	d823      	bhi.n	8013b72 <lv_img_event+0x6e>
 8013b2a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8013b2e:	0073      	.short	0x0073
 8013b30:	003200f2 	.word	0x003200f2
 8013b34:	00f20022 	.word	0x00f20022
 8013b38:	00220022 	.word	0x00220022
 8013b3c:	002200f2 	.word	0x002200f2
 8013b40:	00220022 	.word	0x00220022
 8013b44:	00220022 	.word	0x00220022
 8013b48:	00220022 	.word	0x00220022
 8013b4c:	00220022 	.word	0x00220022
 8013b50:	00220022 	.word	0x00220022
 8013b54:	00220022 	.word	0x00220022
 8013b58:	00220022 	.word	0x00220022
 8013b5c:	00220022 	.word	0x00220022
 8013b60:	00220025 	.word	0x00220025
 8013b64:	00d9      	.short	0x00d9
        lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8013b66:	4629      	mov	r1, r5
 8013b68:	486c      	ldr	r0, [pc, #432]	@ (8013d1c <lv_img_event+0x218>)
 8013b6a:	f7fd f803 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8013b6e:	2801      	cmp	r0, #1
 8013b70:	d0d4      	beq.n	8013b1c <lv_img_event+0x18>
}
 8013b72:	b004      	add	sp, #16
 8013b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(img->src_type == LV_IMG_SRC_SYMBOL) {
 8013b78:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8013b7c:	f003 0303 	and.w	r3, r3, #3
 8013b80:	2b02      	cmp	r3, #2
 8013b82:	d002      	beq.n	8013b8a <lv_img_event+0x86>
            lv_obj_refresh_ext_draw_size(obj);
 8013b84:	f005 fbb2 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 8013b88:	e7f3      	b.n	8013b72 <lv_img_event+0x6e>
            lv_img_set_src(obj, img->src);
 8013b8a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8013b8c:	f7ff ff02 	bl	8013994 <lv_img_set_src>
 8013b90:	e7ef      	b.n	8013b72 <lv_img_event+0x6e>
        lv_coord_t * s = lv_event_get_param(e);
 8013b92:	4628      	mov	r0, r5
 8013b94:	f7fd f8ca 	bl	8010d2c <lv_event_get_param>
 8013b98:	4605      	mov	r5, r0
        if(img->angle || img->zoom != LV_IMG_ZOOM_NONE) {
 8013b9a:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8013b9c:	b91b      	cbnz	r3, 8013ba6 <lv_img_event+0xa2>
 8013b9e:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8013ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ba4:	d0e5      	beq.n	8013b72 <lv_img_event+0x6e>
            lv_coord_t w = lv_obj_get_width(obj);
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	f005 fd92 	bl	80196d0 <lv_obj_get_width>
 8013bac:	4680      	mov	r8, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8013bae:	4630      	mov	r0, r6
 8013bb0:	f005 fd95 	bl	80196de <lv_obj_get_height>
 8013bb4:	4607      	mov	r7, r0
            _lv_img_buf_get_transformed_area(&a, w, h, img->angle, img->zoom, &img->pivot);
 8013bb6:	f106 0232 	add.w	r2, r6, #50	@ 0x32
 8013bba:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	@ 0x30
 8013bbe:	9201      	str	r2, [sp, #4]
 8013bc0:	8ef2      	ldrh	r2, [r6, #54]	@ 0x36
 8013bc2:	9200      	str	r2, [sp, #0]
 8013bc4:	4602      	mov	r2, r0
 8013bc6:	4641      	mov	r1, r8
 8013bc8:	a802      	add	r0, sp, #8
 8013bca:	f000 f8a9 	bl	8013d20 <_lv_img_buf_get_transformed_area>
            *s = LV_MAX(*s, -a.x1);
 8013bce:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8013bd2:	425b      	negs	r3, r3
 8013bd4:	f9b5 2000 	ldrsh.w	r2, [r5]
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	bfb8      	it	lt
 8013bdc:	4613      	movlt	r3, r2
 8013bde:	b21b      	sxth	r3, r3
 8013be0:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, -a.y1);
 8013be2:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8013be6:	4264      	negs	r4, r4
 8013be8:	429c      	cmp	r4, r3
 8013bea:	bfb8      	it	lt
 8013bec:	461c      	movlt	r4, r3
 8013bee:	b224      	sxth	r4, r4
 8013bf0:	802c      	strh	r4, [r5, #0]
            *s = LV_MAX(*s, a.x2 - w);
 8013bf2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013bf6:	eba3 0308 	sub.w	r3, r3, r8
 8013bfa:	42a3      	cmp	r3, r4
 8013bfc:	bfb8      	it	lt
 8013bfe:	4623      	movlt	r3, r4
 8013c00:	b21b      	sxth	r3, r3
 8013c02:	802b      	strh	r3, [r5, #0]
            *s = LV_MAX(*s, a.y2 - h);
 8013c04:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8013c08:	1bd2      	subs	r2, r2, r7
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	bfb8      	it	lt
 8013c0e:	4613      	movlt	r3, r2
 8013c10:	802b      	strh	r3, [r5, #0]
 8013c12:	e7ae      	b.n	8013b72 <lv_img_event+0x6e>
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8013c14:	4628      	mov	r0, r5
 8013c16:	f7fd f889 	bl	8010d2c <lv_event_get_param>
 8013c1a:	4604      	mov	r4, r0
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8013c1c:	f9b6 502c 	ldrsh.w	r5, [r6, #44]	@ 0x2c
 8013c20:	4630      	mov	r0, r6
 8013c22:	f005 fd55 	bl	80196d0 <lv_obj_get_width>
 8013c26:	4285      	cmp	r5, r0
 8013c28:	d00a      	beq.n	8013c40 <lv_img_event+0x13c>
            lv_obj_get_click_area(obj, &a);
 8013c2a:	a902      	add	r1, sp, #8
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f006 fb93 	bl	801a358 <lv_obj_get_click_area>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8013c32:	2200      	movs	r2, #0
 8013c34:	6821      	ldr	r1, [r4, #0]
 8013c36:	a802      	add	r0, sp, #8
 8013c38:	f7ed ff2a 	bl	8001a90 <_lv_area_is_point_on>
 8013c3c:	7120      	strb	r0, [r4, #4]
 8013c3e:	e798      	b.n	8013b72 <lv_img_event+0x6e>
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8013c40:	f9b6 502e 	ldrsh.w	r5, [r6, #46]	@ 0x2e
 8013c44:	4630      	mov	r0, r6
 8013c46:	f005 fd4a 	bl	80196de <lv_obj_get_height>
 8013c4a:	4285      	cmp	r5, r0
 8013c4c:	d1ed      	bne.n	8013c2a <lv_img_event+0x126>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8013c4e:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
        if(img->w == lv_obj_get_width(obj) && img->h == lv_obj_get_height(obj) &&
 8013c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c54:	d10a      	bne.n	8013c6c <lv_img_event+0x168>
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8013c56:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
 8013c58:	b943      	cbnz	r3, 8013c6c <lv_img_event+0x168>
 8013c5a:	f9b6 2032 	ldrsh.w	r2, [r6, #50]	@ 0x32
 8013c5e:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	@ 0x2c
 8013c62:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8013c66:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 8013c6a:	d02f      	beq.n	8013ccc <lv_img_event+0x1c8>
            lv_coord_t w = lv_obj_get_width(obj);
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f005 fd2f 	bl	80196d0 <lv_obj_get_width>
 8013c72:	4605      	mov	r5, r0
            lv_coord_t h = lv_obj_get_height(obj);
 8013c74:	4630      	mov	r0, r6
 8013c76:	f005 fd32 	bl	80196de <lv_obj_get_height>
 8013c7a:	4602      	mov	r2, r0
            _lv_img_buf_get_transformed_area(&coords, w, h, img->angle, img->zoom, &img->pivot);
 8013c7c:	f106 0132 	add.w	r1, r6, #50	@ 0x32
 8013c80:	f9b6 3030 	ldrsh.w	r3, [r6, #48]	@ 0x30
 8013c84:	9101      	str	r1, [sp, #4]
 8013c86:	8ef1      	ldrh	r1, [r6, #54]	@ 0x36
 8013c88:	9100      	str	r1, [sp, #0]
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	a802      	add	r0, sp, #8
 8013c8e:	f000 f847 	bl	8013d20 <_lv_img_buf_get_transformed_area>
            coords.x1 += obj->coords.x1;
 8013c92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013c96:	8ab2      	ldrh	r2, [r6, #20]
 8013c98:	4413      	add	r3, r2
 8013c9a:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += obj->coords.y1;
 8013c9e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8013ca2:	8af3      	ldrh	r3, [r6, #22]
 8013ca4:	4419      	add	r1, r3
 8013ca6:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += obj->coords.x1;
 8013caa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8013cae:	440a      	add	r2, r1
 8013cb0:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += obj->coords.y1;
 8013cb4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8013cb8:	4413      	add	r3, r2
 8013cba:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->res = _lv_area_is_point_on(&coords, info->point, 0);
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	6821      	ldr	r1, [r4, #0]
 8013cc2:	a802      	add	r0, sp, #8
 8013cc4:	f7ed fee4 	bl	8001a90 <_lv_area_is_point_on>
 8013cc8:	7120      	strb	r0, [r4, #4]
           (img->zoom != LV_IMG_ZOOM_NONE || img->angle != 0 || img->pivot.x != img->w / 2 || img->pivot.y != img->h / 2)) {
 8013cca:	e752      	b.n	8013b72 <lv_img_event+0x6e>
 8013ccc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8013cd0:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	@ 0x2e
 8013cd4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8013cd8:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 8013cdc:	d1c6      	bne.n	8013c6c <lv_img_event+0x168>
 8013cde:	e7a4      	b.n	8013c2a <lv_img_event+0x126>
        lv_point_t * p = lv_event_get_param(e);
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f7fd f823 	bl	8010d2c <lv_event_get_param>
 8013ce6:	4604      	mov	r4, r0
        if(img->obj_size_mode == LV_IMG_SIZE_MODE_REAL) {
 8013ce8:	f896 3039 	ldrb.w	r3, [r6, #57]	@ 0x39
 8013cec:	f003 0303 	and.w	r3, r3, #3
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d006      	beq.n	8013d02 <lv_img_event+0x1fe>
            p->x = img->w;
 8013cf4:	f9b6 302c 	ldrsh.w	r3, [r6, #44]	@ 0x2c
 8013cf8:	8003      	strh	r3, [r0, #0]
            p->y = img->h;
 8013cfa:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	@ 0x2e
 8013cfe:	8043      	strh	r3, [r0, #2]
 8013d00:	e737      	b.n	8013b72 <lv_img_event+0x6e>
            *p = lv_img_get_transformed_size(obj);
 8013d02:	4630      	mov	r0, r6
 8013d04:	f7ff fb4a 	bl	801339c <lv_img_get_transformed_size>
 8013d08:	8020      	strh	r0, [r4, #0]
 8013d0a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8013d0e:	8060      	strh	r0, [r4, #2]
 8013d10:	e72f      	b.n	8013b72 <lv_img_event+0x6e>
        draw_img(e);
 8013d12:	4628      	mov	r0, r5
 8013d14:	f7ff fb70 	bl	80133f8 <draw_img>
 8013d18:	e72b      	b.n	8013b72 <lv_img_event+0x6e>
 8013d1a:	bf00      	nop
 8013d1c:	0802d800 	.word	0x0802d800

08013d20 <_lv_img_buf_get_transformed_area>:
    }
}

void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
 8013d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d22:	b085      	sub	sp, #20
 8013d24:	4604      	mov	r4, r0
 8013d26:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8013d2a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
#if LV_DRAW_COMPLEX
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
 8013d2c:	461e      	mov	r6, r3
 8013d2e:	b913      	cbnz	r3, 8013d36 <_lv_img_buf_get_transformed_area+0x16>
 8013d30:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8013d34:	d06e      	beq.n	8013e14 <_lv_img_buf_get_transformed_area+0xf4>
        res->x2 = w - 1;
        res->y2 = h - 1;
        return;
    }

    lv_point_t p[4] = {
 8013d36:	2300      	movs	r3, #0
 8013d38:	f8ad 3000 	strh.w	r3, [sp]
 8013d3c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013d40:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013d44:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013d48:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013d4c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013d50:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013d54:	f8ad 200e 	strh.w	r2, [sp, #14]
        {0, 0},
        {w, 0},
        {0, h},
        {w, h},
    };
    lv_point_transform(&p[0], angle, zoom, pivot);
 8013d58:	463b      	mov	r3, r7
 8013d5a:	462a      	mov	r2, r5
 8013d5c:	4631      	mov	r1, r6
 8013d5e:	4668      	mov	r0, sp
 8013d60:	f7ee f8f2 	bl	8001f48 <lv_point_transform>
    lv_point_transform(&p[1], angle, zoom, pivot);
 8013d64:	463b      	mov	r3, r7
 8013d66:	462a      	mov	r2, r5
 8013d68:	4631      	mov	r1, r6
 8013d6a:	a801      	add	r0, sp, #4
 8013d6c:	f7ee f8ec 	bl	8001f48 <lv_point_transform>
    lv_point_transform(&p[2], angle, zoom, pivot);
 8013d70:	463b      	mov	r3, r7
 8013d72:	462a      	mov	r2, r5
 8013d74:	4631      	mov	r1, r6
 8013d76:	a802      	add	r0, sp, #8
 8013d78:	f7ee f8e6 	bl	8001f48 <lv_point_transform>
    lv_point_transform(&p[3], angle, zoom, pivot);
 8013d7c:	463b      	mov	r3, r7
 8013d7e:	462a      	mov	r2, r5
 8013d80:	4631      	mov	r1, r6
 8013d82:	a803      	add	r0, sp, #12
 8013d84:	f7ee f8e0 	bl	8001f48 <lv_point_transform>
    res->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x) - 2;
 8013d88:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8013d8c:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 8013d90:	461a      	mov	r2, r3
 8013d92:	42ab      	cmp	r3, r5
 8013d94:	bfa8      	it	ge
 8013d96:	462a      	movge	r2, r5
 8013d98:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8013d9c:	f9bd 0000 	ldrsh.w	r0, [sp]
 8013da0:	460e      	mov	r6, r1
 8013da2:	4281      	cmp	r1, r0
 8013da4:	bfa8      	it	ge
 8013da6:	4606      	movge	r6, r0
 8013da8:	42b2      	cmp	r2, r6
 8013daa:	bfa8      	it	ge
 8013dac:	4632      	movge	r2, r6
 8013dae:	b292      	uxth	r2, r2
 8013db0:	3a02      	subs	r2, #2
 8013db2:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x) + 2;
 8013db4:	42ab      	cmp	r3, r5
 8013db6:	bfb8      	it	lt
 8013db8:	462b      	movlt	r3, r5
 8013dba:	4281      	cmp	r1, r0
 8013dbc:	bfb8      	it	lt
 8013dbe:	4601      	movlt	r1, r0
 8013dc0:	428b      	cmp	r3, r1
 8013dc2:	bfb8      	it	lt
 8013dc4:	460b      	movlt	r3, r1
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	3302      	adds	r3, #2
 8013dca:	80a3      	strh	r3, [r4, #4]
    res->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y) - 2;
 8013dcc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013dd0:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	42ab      	cmp	r3, r5
 8013dd8:	bfa8      	it	ge
 8013dda:	462a      	movge	r2, r5
 8013ddc:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8013de0:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8013de4:	460e      	mov	r6, r1
 8013de6:	4281      	cmp	r1, r0
 8013de8:	bfa8      	it	ge
 8013dea:	4606      	movge	r6, r0
 8013dec:	42b2      	cmp	r2, r6
 8013dee:	bfa8      	it	ge
 8013df0:	4632      	movge	r2, r6
 8013df2:	b292      	uxth	r2, r2
 8013df4:	3a02      	subs	r2, #2
 8013df6:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y) + 2;
 8013df8:	42ab      	cmp	r3, r5
 8013dfa:	bfb8      	it	lt
 8013dfc:	462b      	movlt	r3, r5
 8013dfe:	4281      	cmp	r1, r0
 8013e00:	bfb8      	it	lt
 8013e02:	4601      	movlt	r1, r0
 8013e04:	428b      	cmp	r3, r1
 8013e06:	bfb8      	it	lt
 8013e08:	460b      	movlt	r3, r1
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	3302      	adds	r3, #2
 8013e0e:	80e3      	strh	r3, [r4, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
 8013e10:	b005      	add	sp, #20
 8013e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->x1 = 0;
 8013e14:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
 8013e16:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
 8013e18:	3901      	subs	r1, #1
 8013e1a:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
 8013e1c:	3a01      	subs	r2, #1
 8013e1e:	80c2      	strh	r2, [r0, #6]
        return;
 8013e20:	e7f6      	b.n	8013e10 <_lv_img_buf_get_transformed_area+0xf0>
	...

08013e24 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
_lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color, int32_t frame_id)
{
 8013e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e26:	4604      	mov	r4, r0
 8013e28:	460d      	mov	r5, r1
 8013e2a:	4616      	mov	r6, r2
    }
#else
    cached_src = &LV_GC_ROOT(_lv_img_cache_single);
#endif
    /*Open the image and measure the time to open*/
    uint32_t t_start  = lv_tick_get();
 8013e2c:	f7ff fa9e 	bl	801336c <lv_tick_get>
 8013e30:	4607      	mov	r7, r0
    lv_res_t open_res = lv_img_decoder_open(&cached_src->dec_dsc, src, color, frame_id);
 8013e32:	4633      	mov	r3, r6
 8013e34:	462a      	mov	r2, r5
 8013e36:	4621      	mov	r1, r4
 8013e38:	4810      	ldr	r0, [pc, #64]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e3a:	f000 fbd7 	bl	80145ec <lv_img_decoder_open>
    if(open_res == LV_RES_INV) {
 8013e3e:	b158      	cbz	r0, 8013e58 <_lv_img_cache_open+0x34>
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
        return NULL;
    }

    cached_src->life = 0;
 8013e40:	4b0e      	ldr	r3, [pc, #56]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e42:	2200      	movs	r2, #0
 8013e44:	629a      	str	r2, [r3, #40]	@ 0x28

    /*If `time_to_open` was not set in the open function set it here*/
    if(cached_src->dec_dsc.time_to_open == 0) {
 8013e46:	69db      	ldr	r3, [r3, #28]
 8013e48:	b183      	cbz	r3, 8013e6c <_lv_img_cache_open+0x48>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
 8013e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e4c:	69db      	ldr	r3, [r3, #28]
 8013e4e:	b99b      	cbnz	r3, 8013e78 <_lv_img_cache_open+0x54>
 8013e50:	480a      	ldr	r0, [pc, #40]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e52:	2301      	movs	r3, #1
 8013e54:	61c3      	str	r3, [r0, #28]

    return cached_src;
}
 8013e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_memset_00(cached_src, sizeof(_lv_img_cache_entry_t));
 8013e58:	4c08      	ldr	r4, [pc, #32]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e5a:	212c      	movs	r1, #44	@ 0x2c
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	f002 ff31 	bl	8016cc4 <lv_memset_00>
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its us*/
 8013e62:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8013e66:	62a3      	str	r3, [r4, #40]	@ 0x28
        return NULL;
 8013e68:	2000      	movs	r0, #0
 8013e6a:	e7f4      	b.n	8013e56 <_lv_img_cache_open+0x32>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
 8013e6c:	4638      	mov	r0, r7
 8013e6e:	f7ff fa8b 	bl	8013388 <lv_tick_elaps>
 8013e72:	4b02      	ldr	r3, [pc, #8]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e74:	61d8      	str	r0, [r3, #28]
 8013e76:	e7e8      	b.n	8013e4a <_lv_img_cache_open+0x26>
    return cached_src;
 8013e78:	4800      	ldr	r0, [pc, #0]	@ (8013e7c <_lv_img_cache_open+0x58>)
 8013e7a:	e7ec      	b.n	8013e56 <_lv_img_cache_open+0x32>
 8013e7c:	200067e8 	.word	0x200067e8

08013e80 <lv_img_cache_invalidate_src>:

            lv_memset_00(&cache[i], sizeof(_lv_img_cache_entry_t));
        }
    }
#endif
}
 8013e80:	4770      	bx	lr
	...

08013e84 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	460d      	mov	r5, r1
 8013e8a:	4614      	mov	r4, r2
    LV_UNUSED(decoder); /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 8013e8c:	4608      	mov	r0, r1
 8013e8e:	f7f3 fefb 	bl	8007c88 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 8013e92:	4606      	mov	r6, r0
 8013e94:	b9e8      	cbnz	r0, 8013ed2 <lv_img_decoder_built_in_info+0x4e>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
 8013e96:	782b      	ldrb	r3, [r5, #0]
 8013e98:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8013e9c:	3b04      	subs	r3, #4
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	2b10      	cmp	r3, #16
 8013ea2:	d813      	bhi.n	8013ecc <lv_img_decoder_built_in_info+0x48>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
 8013ea4:	682b      	ldr	r3, [r5, #0]
 8013ea6:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8013eaa:	6822      	ldr	r2, [r4, #0]
 8013eac:	f363 2294 	bfi	r2, r3, #10, #11
 8013eb0:	6022      	str	r2, [r4, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 8013eb2:	886b      	ldrh	r3, [r5, #2]
 8013eb4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8013eb8:	8862      	ldrh	r2, [r4, #2]
 8013eba:	f363 124f 	bfi	r2, r3, #5, #11
 8013ebe:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 8013ec0:	782a      	ldrb	r2, [r5, #0]
 8013ec2:	7823      	ldrb	r3, [r4, #0]
 8013ec4:	f362 0304 	bfi	r3, r2, #0, #5
 8013ec8:	7023      	strb	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
 8013eca:	2601      	movs	r6, #1
}
 8013ecc:	4630      	mov	r0, r6
 8013ece:	b004      	add	sp, #16
 8013ed0:	bd70      	pop	{r4, r5, r6, pc}
    else if(src_type == LV_IMG_SRC_FILE) {
 8013ed2:	2801      	cmp	r0, #1
 8013ed4:	d010      	beq.n	8013ef8 <lv_img_decoder_built_in_info+0x74>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 8013ed6:	2802      	cmp	r0, #2
 8013ed8:	d137      	bne.n	8013f4a <lv_img_decoder_built_in_info+0xc6>
        header->w = 1;
 8013eda:	6823      	ldr	r3, [r4, #0]
 8013edc:	2601      	movs	r6, #1
 8013ede:	f366 2394 	bfi	r3, r6, #10, #11
 8013ee2:	6023      	str	r3, [r4, #0]
        header->h = 1;
 8013ee4:	8863      	ldrh	r3, [r4, #2]
 8013ee6:	f366 134f 	bfi	r3, r6, #5, #11
 8013eea:	8063      	strh	r3, [r4, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 8013eec:	7823      	ldrb	r3, [r4, #0]
 8013eee:	220b      	movs	r2, #11
 8013ef0:	f362 0304 	bfi	r3, r2, #0, #5
 8013ef4:	7023      	strb	r3, [r4, #0]
 8013ef6:	e7e9      	b.n	8013ecc <lv_img_decoder_built_in_info+0x48>
        if(strcmp(lv_fs_get_ext(src), "bin")) return LV_RES_INV;
 8013ef8:	4628      	mov	r0, r5
 8013efa:	f7fe f973 	bl	80121e4 <lv_fs_get_ext>
 8013efe:	4914      	ldr	r1, [pc, #80]	@ (8013f50 <lv_img_decoder_built_in_info+0xcc>)
 8013f00:	f7ec f942 	bl	8000188 <strcmp>
 8013f04:	b108      	cbz	r0, 8013f0a <lv_img_decoder_built_in_info+0x86>
 8013f06:	2600      	movs	r6, #0
 8013f08:	e7e0      	b.n	8013ecc <lv_img_decoder_built_in_info+0x48>
        lv_fs_res_t res = lv_fs_open(&f, src, LV_FS_MODE_RD);
 8013f0a:	2202      	movs	r2, #2
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	a801      	add	r0, sp, #4
 8013f10:	f7fe f924 	bl	801215c <lv_fs_open>
        if(res == LV_FS_RES_OK) {
 8013f14:	b140      	cbz	r0, 8013f28 <lv_img_decoder_built_in_info+0xa4>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
 8013f16:	7823      	ldrb	r3, [r4, #0]
 8013f18:	f003 031f 	and.w	r3, r3, #31
 8013f1c:	331c      	adds	r3, #28
 8013f1e:	f003 031f 	and.w	r3, r3, #31
 8013f22:	2b10      	cmp	r3, #16
 8013f24:	d9d2      	bls.n	8013ecc <lv_img_decoder_built_in_info+0x48>
 8013f26:	e7ee      	b.n	8013f06 <lv_img_decoder_built_in_info+0x82>
            res = lv_fs_read(&f, header, sizeof(lv_img_header_t), &rn);
 8013f28:	466b      	mov	r3, sp
 8013f2a:	2204      	movs	r2, #4
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	eb0d 0002 	add.w	r0, sp, r2
 8013f32:	f7fe f886 	bl	8012042 <lv_fs_read>
 8013f36:	4605      	mov	r5, r0
            lv_fs_close(&f);
 8013f38:	a801      	add	r0, sp, #4
 8013f3a:	f7fe f863 	bl	8012004 <lv_fs_close>
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 8013f3e:	2d00      	cmp	r5, #0
 8013f40:	d1e1      	bne.n	8013f06 <lv_img_decoder_built_in_info+0x82>
 8013f42:	9b00      	ldr	r3, [sp, #0]
 8013f44:	2b04      	cmp	r3, #4
 8013f46:	d1de      	bne.n	8013f06 <lv_img_decoder_built_in_info+0x82>
 8013f48:	e7e5      	b.n	8013f16 <lv_img_decoder_built_in_info+0x92>
        return LV_RES_INV;
 8013f4a:	2600      	movs	r6, #0
 8013f4c:	e7be      	b.n	8013ecc <lv_img_decoder_built_in_info+0x48>
 8013f4e:	bf00      	nop
 8013f50:	08029cb4 	.word	0x08029cb4

08013f54 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 8013f54:	b538      	push	{r3, r4, r5, lr}
    LV_UNUSED(decoder); /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013f56:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
    if(user_data) {
 8013f58:	b185      	cbz	r5, 8013f7c <lv_img_decoder_built_in_close+0x28>
 8013f5a:	460c      	mov	r4, r1
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013f5c:	7c0b      	ldrb	r3, [r1, #16]
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d00d      	beq.n	8013f7e <lv_img_decoder_built_in_close+0x2a>
            lv_fs_close(&user_data->f);
        }
        if(user_data->palette) lv_mem_free(user_data->palette);
 8013f62:	68e8      	ldr	r0, [r5, #12]
 8013f64:	b108      	cbz	r0, 8013f6a <lv_img_decoder_built_in_close+0x16>
 8013f66:	f002 fcf5 	bl	8016954 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
 8013f6a:	6928      	ldr	r0, [r5, #16]
 8013f6c:	b108      	cbz	r0, 8013f72 <lv_img_decoder_built_in_close+0x1e>
 8013f6e:	f002 fcf1 	bl	8016954 <lv_mem_free>

        lv_mem_free(user_data);
 8013f72:	4628      	mov	r0, r5
 8013f74:	f002 fcee 	bl	8016954 <lv_mem_free>
        dsc->user_data = NULL;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	6263      	str	r3, [r4, #36]	@ 0x24
    }
}
 8013f7c:	bd38      	pop	{r3, r4, r5, pc}
            lv_fs_close(&user_data->f);
 8013f7e:	4628      	mov	r0, r5
 8013f80:	f7fe f840 	bl	8012004 <lv_fs_close>
 8013f84:	e7ed      	b.n	8013f62 <lv_img_decoder_built_in_close+0xe>
	...

08013f88 <lv_img_decoder_built_in_open>:
{
 8013f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f8c:	b084      	sub	sp, #16
 8013f8e:	4605      	mov	r5, r0
 8013f90:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 8013f92:	7c08      	ldrb	r0, [r1, #16]
 8013f94:	2801      	cmp	r0, #1
 8013f96:	d01f      	beq.n	8013fd8 <lv_img_decoder_built_in_open+0x50>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8013f98:	b920      	cbnz	r0, 8013fa4 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
 8013f9a:	684b      	ldr	r3, [r1, #4]
 8013f9c:	689b      	ldr	r3, [r3, #8]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	f000 8108 	beq.w	80141b4 <lv_img_decoder_built_in_open+0x22c>
    lv_img_cf_t cf = dsc->header.cf;
 8013fa4:	7d23      	ldrb	r3, [r4, #20]
 8013fa6:	f003 001f 	and.w	r0, r3, #31
    if(cf == LV_IMG_CF_ALPHA_8BIT || cf == LV_IMG_CF_RGB565A8) {
 8013faa:	1f03      	subs	r3, r0, #4
 8013fac:	2b10      	cmp	r3, #16
 8013fae:	f200 80fa 	bhi.w	80141a6 <lv_img_decoder_built_in_open+0x21e>
 8013fb2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013fb6:	006b      	.short	0x006b
 8013fb8:	006b006b 	.word	0x006b006b
 8013fbc:	00740074 	.word	0x00740074
 8013fc0:	00740074 	.word	0x00740074
 8013fc4:	00fe00fe 	.word	0x00fe00fe
 8013fc8:	003900fe 	.word	0x003900fe
 8013fcc:	00f800f8 	.word	0x00f800f8
 8013fd0:	00f800f8 	.word	0x00f800f8
 8013fd4:	003900f8 	.word	0x003900f8
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 8013fd8:	6848      	ldr	r0, [r1, #4]
 8013fda:	f7fe f903 	bl	80121e4 <lv_fs_get_ext>
 8013fde:	4979      	ldr	r1, [pc, #484]	@ (80141c4 <lv_img_decoder_built_in_open+0x23c>)
 8013fe0:	f7ec f8d2 	bl	8000188 <strcmp>
 8013fe4:	b108      	cbz	r0, 8013fea <lv_img_decoder_built_in_open+0x62>
 8013fe6:	2000      	movs	r0, #0
 8013fe8:	e0e4      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 8013fea:	2202      	movs	r2, #2
 8013fec:	6861      	ldr	r1, [r4, #4]
 8013fee:	a801      	add	r0, sp, #4
 8013ff0:	f7fe f8b4 	bl	801215c <lv_fs_open>
        if(res != LV_FS_RES_OK) {
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	d1f6      	bne.n	8013fe6 <lv_img_decoder_built_in_open+0x5e>
        if(dsc->user_data == NULL) {
 8013ff8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013ffa:	b11b      	cbz	r3, 8014004 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8013ffc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    const uint8_t * s8 = (const uint8_t *)src;
 8013ffe:	aa01      	add	r2, sp, #4
    while(len) {
 8014000:	230c      	movs	r3, #12
 8014002:	e00e      	b.n	8014022 <lv_img_decoder_built_in_open+0x9a>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 8014004:	2014      	movs	r0, #20
 8014006:	f002 fc87 	bl	8016918 <lv_mem_alloc>
 801400a:	6260      	str	r0, [r4, #36]	@ 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 801400c:	b118      	cbz	r0, 8014016 <lv_img_decoder_built_in_open+0x8e>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 801400e:	2114      	movs	r1, #20
 8014010:	f002 fe58 	bl	8016cc4 <lv_memset_00>
 8014014:	e7f2      	b.n	8013ffc <lv_img_decoder_built_in_open+0x74>
            LV_ASSERT_MALLOC(dsc->user_data);
 8014016:	e7fe      	b.n	8014016 <lv_img_decoder_built_in_open+0x8e>
        *d8 = *s8;
 8014018:	f812 0b01 	ldrb.w	r0, [r2], #1
 801401c:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
 8014020:	3b01      	subs	r3, #1
    while(len) {
 8014022:	2b00      	cmp	r3, #0
 8014024:	d1f8      	bne.n	8014018 <lv_img_decoder_built_in_open+0x90>
 8014026:	e7bd      	b.n	8013fa4 <lv_img_decoder_built_in_open+0x1c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 8014028:	7c23      	ldrb	r3, [r4, #16]
 801402a:	b31b      	cbz	r3, 8014074 <lv_img_decoder_built_in_open+0xec>
            uint32_t len = dsc->header.w * dsc->header.h;
 801402c:	6963      	ldr	r3, [r4, #20]
 801402e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8014032:	8ae2      	ldrh	r2, [r4, #22]
 8014034:	f3c2 124a 	ubfx	r2, r2, #5, #11
 8014038:	fb02 f303 	mul.w	r3, r2, r3
            len *= cf == LV_IMG_CF_RGB565A8 ? 3 : 1;
 801403c:	2814      	cmp	r0, #20
 801403e:	d01e      	beq.n	801407e <lv_img_decoder_built_in_open+0xf6>
 8014040:	2501      	movs	r5, #1
 8014042:	fb03 f505 	mul.w	r5, r3, r5
            uint8_t * fs_buf = lv_mem_alloc(len);
 8014046:	4628      	mov	r0, r5
 8014048:	f002 fc66 	bl	8016918 <lv_mem_alloc>
            if(fs_buf == NULL) return LV_RES_INV;
 801404c:	4606      	mov	r6, r0
 801404e:	2800      	cmp	r0, #0
 8014050:	f000 80b3 	beq.w	80141ba <lv_img_decoder_built_in_open+0x232>
            lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 8014054:	6a67      	ldr	r7, [r4, #36]	@ 0x24
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 8014056:	2200      	movs	r2, #0
 8014058:	2104      	movs	r1, #4
 801405a:	4638      	mov	r0, r7
 801405c:	f7fe f816 	bl	801208c <lv_fs_seek>
            lv_fs_res_t res = lv_fs_read(&user_data->f, fs_buf, len, NULL);
 8014060:	2300      	movs	r3, #0
 8014062:	462a      	mov	r2, r5
 8014064:	4631      	mov	r1, r6
 8014066:	4638      	mov	r0, r7
 8014068:	f7fd ffeb 	bl	8012042 <lv_fs_read>
            if(res != LV_FS_RES_OK) {
 801406c:	b948      	cbnz	r0, 8014082 <lv_img_decoder_built_in_open+0xfa>
            dsc->img_data = fs_buf;
 801406e:	61a6      	str	r6, [r4, #24]
            return LV_RES_OK;
 8014070:	2001      	movs	r0, #1
 8014072:	e09f      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014074:	6863      	ldr	r3, [r4, #4]
 8014076:	689b      	ldr	r3, [r3, #8]
 8014078:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 801407a:	2001      	movs	r0, #1
 801407c:	e09a      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
            len *= cf == LV_IMG_CF_RGB565A8 ? 3 : 1;
 801407e:	2503      	movs	r5, #3
 8014080:	e7df      	b.n	8014042 <lv_img_decoder_built_in_open+0xba>
                lv_mem_free(fs_buf);
 8014082:	4630      	mov	r0, r6
 8014084:	f002 fc66 	bl	8016954 <lv_mem_free>
                return LV_RES_INV;
 8014088:	2000      	movs	r0, #0
 801408a:	e093      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801408c:	7c23      	ldrb	r3, [r4, #16]
 801408e:	2b00      	cmp	r3, #0
 8014090:	f040 8095 	bne.w	80141be <lv_img_decoder_built_in_open+0x236>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 8014094:	6863      	ldr	r3, [r4, #4]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	61a3      	str	r3, [r4, #24]
            return LV_RES_OK;
 801409a:	2001      	movs	r0, #1
 801409c:	e08a      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
 801409e:	f7f3 fdc5 	bl	8007c2c <lv_img_cf_get_px_size>
 80140a2:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
 80140a4:	f04f 0901 	mov.w	r9, #1
 80140a8:	fa09 f900 	lsl.w	r9, r9, r0
        if(dsc->user_data == NULL) {
 80140ac:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80140ae:	b1cb      	cbz	r3, 80140e4 <lv_img_decoder_built_in_open+0x15c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80140b0:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 80140b4:	2002      	movs	r0, #2
 80140b6:	fa00 f00a 	lsl.w	r0, r0, sl
 80140ba:	f002 fc2d 	bl	8016918 <lv_mem_alloc>
 80140be:	f8c8 000c 	str.w	r0, [r8, #12]
        LV_ASSERT_MALLOC(user_data->palette);
 80140c2:	b1c8      	cbz	r0, 80140f8 <lv_img_decoder_built_in_open+0x170>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
 80140c4:	4648      	mov	r0, r9
 80140c6:	f002 fc27 	bl	8016918 <lv_mem_alloc>
 80140ca:	f8c8 0010 	str.w	r0, [r8, #16]
        LV_ASSERT_MALLOC(user_data->opa);
 80140ce:	b1a0      	cbz	r0, 80140fa <lv_img_decoder_built_in_open+0x172>
        if(user_data->palette == NULL || user_data->opa == NULL) {
 80140d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80140d4:	b193      	cbz	r3, 80140fc <lv_img_decoder_built_in_open+0x174>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80140d6:	7c23      	ldrb	r3, [r4, #16]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d015      	beq.n	8014108 <lv_img_decoder_built_in_open+0x180>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 80140dc:	6863      	ldr	r3, [r4, #4]
 80140de:	689f      	ldr	r7, [r3, #8]
            for(i = 0; i < palette_size; i++) {
 80140e0:	2300      	movs	r3, #0
 80140e2:	e05c      	b.n	801419e <lv_img_decoder_built_in_open+0x216>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 80140e4:	2014      	movs	r0, #20
 80140e6:	f002 fc17 	bl	8016918 <lv_mem_alloc>
 80140ea:	6260      	str	r0, [r4, #36]	@ 0x24
            LV_ASSERT_MALLOC(dsc->user_data);
 80140ec:	b118      	cbz	r0, 80140f6 <lv_img_decoder_built_in_open+0x16e>
            lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
 80140ee:	2114      	movs	r1, #20
 80140f0:	f002 fde8 	bl	8016cc4 <lv_memset_00>
 80140f4:	e7dc      	b.n	80140b0 <lv_img_decoder_built_in_open+0x128>
            LV_ASSERT_MALLOC(dsc->user_data);
 80140f6:	e7fe      	b.n	80140f6 <lv_img_decoder_built_in_open+0x16e>
        LV_ASSERT_MALLOC(user_data->palette);
 80140f8:	e7fe      	b.n	80140f8 <lv_img_decoder_built_in_open+0x170>
        LV_ASSERT_MALLOC(user_data->opa);
 80140fa:	e7fe      	b.n	80140fa <lv_img_decoder_built_in_open+0x172>
            lv_img_decoder_built_in_close(decoder, dsc);
 80140fc:	4621      	mov	r1, r4
 80140fe:	4628      	mov	r0, r5
 8014100:	f7ff ff28 	bl	8013f54 <lv_img_decoder_built_in_close>
            return LV_RES_INV;
 8014104:	2000      	movs	r0, #0
 8014106:	e055      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
            lv_fs_seek(&user_data->f, 4, LV_FS_SEEK_SET); /*Skip the header*/
 8014108:	2200      	movs	r2, #0
 801410a:	2104      	movs	r1, #4
 801410c:	4640      	mov	r0, r8
 801410e:	f7fd ffbd 	bl	801208c <lv_fs_seek>
            for(i = 0; i < palette_size; i++) {
 8014112:	2400      	movs	r4, #0
 8014114:	e023      	b.n	801415e <lv_img_decoder_built_in_open+0x1d6>
                lv_fs_read(&user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
 8014116:	2300      	movs	r3, #0
 8014118:	2204      	movs	r2, #4
 801411a:	eb0d 0102 	add.w	r1, sp, r2
 801411e:	4640      	mov	r0, r8
 8014120:	f7fd ff8f 	bl	8012042 <lv_fs_read>
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
 8014124:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8014128:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801412c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014130:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8014134:	095d      	lsrs	r5, r3, #5
 8014136:	08c0      	lsrs	r0, r0, #3
 8014138:	08d2      	lsrs	r2, r2, #3
 801413a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801413e:	f365 0702 	bfi	r7, r5, #0, #3
 8014142:	f360 07c7 	bfi	r7, r0, #3, #5
 8014146:	f362 270c 	bfi	r7, r2, #8, #5
 801414a:	f363 374f 	bfi	r7, r3, #13, #3
 801414e:	f821 7014 	strh.w	r7, [r1, r4, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
 8014152:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014156:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801415a:	551a      	strb	r2, [r3, r4]
            for(i = 0; i < palette_size; i++) {
 801415c:	3401      	adds	r4, #1
 801415e:	454c      	cmp	r4, r9
 8014160:	d3d9      	bcc.n	8014116 <lv_img_decoder_built_in_open+0x18e>
 8014162:	e01e      	b.n	80141a2 <lv_img_decoder_built_in_open+0x21a>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 8014164:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8014168:	788d      	ldrb	r5, [r1, #2]
 801416a:	784a      	ldrb	r2, [r1, #1]
 801416c:	f817 4023 	ldrb.w	r4, [r7, r3, lsl #2]
 8014170:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8014174:	ea4f 1c52 	mov.w	ip, r2, lsr #5
 8014178:	08ed      	lsrs	r5, r5, #3
 801417a:	08e4      	lsrs	r4, r4, #3
 801417c:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8014180:	f36c 0602 	bfi	r6, ip, #0, #3
 8014184:	f365 06c7 	bfi	r6, r5, #3, #5
 8014188:	f364 260c 	bfi	r6, r4, #8, #5
 801418c:	f362 364f 	bfi	r6, r2, #13, #3
 8014190:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
 8014194:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014198:	78c9      	ldrb	r1, [r1, #3]
 801419a:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
 801419c:	3301      	adds	r3, #1
 801419e:	454b      	cmp	r3, r9
 80141a0:	d3e0      	bcc.n	8014164 <lv_img_decoder_built_in_open+0x1dc>
        return LV_RES_OK;
 80141a2:	2001      	movs	r0, #1
 80141a4:	e006      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
        lv_img_decoder_built_in_close(decoder, dsc);
 80141a6:	4621      	mov	r1, r4
 80141a8:	4628      	mov	r0, r5
 80141aa:	f7ff fed3 	bl	8013f54 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
 80141ae:	2000      	movs	r0, #0
 80141b0:	e000      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
    lv_img_cf_t cf = dsc->header.cf;
 80141b2:	2001      	movs	r0, #1
}
 80141b4:	b004      	add	sp, #16
 80141b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if(fs_buf == NULL) return LV_RES_INV;
 80141ba:	2000      	movs	r0, #0
 80141bc:	e7fa      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
            return LV_RES_OK;
 80141be:	2001      	movs	r0, #1
 80141c0:	e7f8      	b.n	80141b4 <lv_img_decoder_built_in_open+0x22c>
 80141c2:	bf00      	nop
 80141c4:	08029cb4 	.word	0x08029cb4

080141c8 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 80141c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141cc:	b083      	sub	sp, #12
 80141ce:	4605      	mov	r5, r0
 80141d0:	460c      	mov	r4, r1
 80141d2:	4691      	mov	r9, r2
 80141d4:	461f      	mov	r7, r3
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80141d6:	f8d0 8024 	ldr.w	r8, [r0, #36]	@ 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80141da:	7d00      	ldrb	r0, [r0, #20]
 80141dc:	f000 001f 	and.w	r0, r0, #31
 80141e0:	f7f3 fd24 	bl	8007c2c <lv_img_cf_get_px_size>
 80141e4:	4606      	mov	r6, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 80141e6:	696b      	ldr	r3, [r5, #20]
 80141e8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 80141ec:	fb03 4109 	mla	r1, r3, r9, r4
 80141f0:	fb00 f101 	mul.w	r1, r0, r1
 80141f4:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(&user_data->f, pos, LV_FS_SEEK_SET);
 80141f6:	2200      	movs	r2, #0
 80141f8:	3104      	adds	r1, #4
 80141fa:	4640      	mov	r0, r8
 80141fc:	f7fd ff46 	bl	801208c <lv_fs_seek>
    if(res != LV_FS_RES_OK) {
 8014200:	b120      	cbz	r0, 801420c <lv_img_decoder_built_in_line_true_color+0x44>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 8014202:	2400      	movs	r4, #0
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
    }

    return LV_RES_OK;
}
 8014204:	4620      	mov	r0, r4
 8014206:	b003      	add	sp, #12
 8014208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801420c:	4604      	mov	r4, r0
    uint32_t btr = len * (px_size >> 3);
 801420e:	f3c6 06c7 	ubfx	r6, r6, #3, #8
 8014212:	fb06 f707 	mul.w	r7, r6, r7
    uint32_t br  = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	9301      	str	r3, [sp, #4]
    res = lv_fs_read(&user_data->f, buf, btr, &br);
 801421a:	ab01      	add	r3, sp, #4
 801421c:	463a      	mov	r2, r7
 801421e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014220:	4640      	mov	r0, r8
 8014222:	f7fd ff0e 	bl	8012042 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 8014226:	2800      	cmp	r0, #0
 8014228:	d1ec      	bne.n	8014204 <lv_img_decoder_built_in_line_true_color+0x3c>
 801422a:	9b01      	ldr	r3, [sp, #4]
 801422c:	42bb      	cmp	r3, r7
 801422e:	d1e9      	bne.n	8014204 <lv_img_decoder_built_in_line_true_color+0x3c>
    return LV_RES_OK;
 8014230:	2401      	movs	r4, #1
 8014232:	e7e7      	b.n	8014204 <lv_img_decoder_built_in_line_true_color+0x3c>

08014234 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 8014234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014238:	b08b      	sub	sp, #44	@ 0x2c
 801423a:	4607      	mov	r7, r0
 801423c:	460c      	mov	r4, r1
 801423e:	4692      	mov	sl, r2
 8014240:	461e      	mov	r6, r3
 8014242:	9d14      	ldr	r5, [sp, #80]	@ 0x50
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 8014244:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8014248:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 801424c:	f5a3 03ad 	sub.w	r3, r3, #5668864	@ 0x568000
 8014250:	f5a3 5328 	sub.w	r3, r3, #10752	@ 0x2a00
 8014254:	9308      	str	r3, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8014256:	4b59      	ldr	r3, [pc, #356]	@ (80143bc <lv_img_decoder_built_in_line_alpha+0x188>)
 8014258:	f10d 0c10 	add.w	ip, sp, #16
 801425c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801425e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
 8014262:	8938      	ldrh	r0, [r7, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 8014264:	2300      	movs	r3, #0
 8014266:	e008      	b.n	801427a <lv_img_decoder_built_in_line_alpha+0x46>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 8014268:	b282      	uxth	r2, r0
 801426a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801426e:	546a      	strb	r2, [r5, r1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 8014270:	3101      	adds	r1, #1
 8014272:	0a12      	lsrs	r2, r2, #8
 8014274:	546a      	strb	r2, [r5, r1]
    for(i = 0; i < len; i++) {
 8014276:	3301      	adds	r3, #1
 8014278:	b21b      	sxth	r3, r3
 801427a:	42b3      	cmp	r3, r6
 801427c:	dbf4      	blt.n	8014268 <lv_img_decoder_built_in_line_alpha+0x34>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
 801427e:	7d38      	ldrb	r0, [r7, #20]
 8014280:	f000 001f 	and.w	r0, r0, #31
 8014284:	f7f3 fcd2 	bl	8007c2c <lv_img_cf_get_px_size>
 8014288:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 801428a:	f04f 0801 	mov.w	r8, #1
 801428e:	fa08 f800 	lsl.w	r8, r8, r0
 8014292:	fa1f f888 	uxth.w	r8, r8
 8014296:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801429a:	fa1f f888 	uxth.w	r8, r8

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
 801429e:	7d3b      	ldrb	r3, [r7, #20]
 80142a0:	f003 031f 	and.w	r3, r3, #31
 80142a4:	3b0b      	subs	r3, #11
 80142a6:	2b03      	cmp	r3, #3
 80142a8:	d847      	bhi.n	801433a <lv_img_decoder_built_in_line_alpha+0x106>
 80142aa:	e8df f003 	tbb	[pc, r3]
 80142ae:	1e02      	.short	0x1e02
 80142b0:	3d2e      	.short	0x3d2e
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80142b8:	3007      	adds	r0, #7
 80142ba:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 80142bc:	10e3      	asrs	r3, r4, #3
 80142be:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 7 - (x & 0x7);
 80142c2:	43e4      	mvns	r4, r4
 80142c4:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
 80142c8:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
            ofs += w * y + x;  /*First pixel*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 80142cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ce:	9302      	str	r3, [sp, #8]
    uint8_t * fs_buf = lv_mem_buf_get(w);
 80142d0:	9003      	str	r0, [sp, #12]
 80142d2:	f002 fb73 	bl	80169bc <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 80142d6:	9001      	str	r0, [sp, #4]
 80142d8:	2800      	cmp	r0, #0
 80142da:	d06c      	beq.n	80143b6 <lv_img_decoder_built_in_line_alpha+0x182>

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 80142dc:	7c3b      	ldrb	r3, [r7, #16]
 80142de:	bbab      	cbnz	r3, 801434c <lv_img_decoder_built_in_line_alpha+0x118>
        const lv_img_dsc_t * img_dsc = dsc->src;
 80142e0:	687b      	ldr	r3, [r7, #4]

        data_tmp = img_dsc->data + ofs;
 80142e2:	6899      	ldr	r1, [r3, #8]
 80142e4:	4451      	add	r1, sl
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 80142e6:	2200      	movs	r2, #0
 80142e8:	e042      	b.n	8014370 <lv_img_decoder_built_in_line_alpha+0x13c>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	f3c3 208a 	ubfx	r0, r3, #10, #11
 80142f0:	3003      	adds	r0, #3
 80142f2:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 80142f4:	10a3      	asrs	r3, r4, #2
 80142f6:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 6 - (x & 0x3) * 2;
 80142fa:	b2a4      	uxth	r4, r4
 80142fc:	43e4      	mvns	r4, r4
 80142fe:	f004 0403 	and.w	r4, r4, #3
 8014302:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
 8014304:	f10d 0b20 	add.w	fp, sp, #32
            break;
 8014308:	e7e0      	b.n	80142cc <lv_img_decoder_built_in_line_alpha+0x98>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8014310:	3001      	adds	r0, #1
 8014312:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 8014314:	1063      	asrs	r3, r4, #1
 8014316:	fb0a 3a00 	mla	sl, sl, r0, r3
            pos = 4 - (x & 0x1) * 4;
 801431a:	f014 0f01 	tst.w	r4, #1
 801431e:	d111      	bne.n	8014344 <lv_img_decoder_built_in_line_alpha+0x110>
 8014320:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
 8014322:	f10d 0b10 	add.w	fp, sp, #16
 8014326:	e7d1      	b.n	80142cc <lv_img_decoder_built_in_line_alpha+0x98>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014328:	6978      	ldr	r0, [r7, #20]
 801432a:	f3c0 238a 	ubfx	r3, r0, #10, #11
 801432e:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 8014330:	fb0a 4a03 	mla	sl, sl, r3, r4
            pos = 0;
 8014334:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
 8014336:	46a3      	mov	fp, r4
            break;
 8014338:	e7c8      	b.n	80142cc <lv_img_decoder_built_in_line_alpha+0x98>
    switch(dsc->header.cf) {
 801433a:	2400      	movs	r4, #0
 801433c:	46a2      	mov	sl, r4
 801433e:	4620      	mov	r0, r4
 8014340:	46a3      	mov	fp, r4
 8014342:	e7c3      	b.n	80142cc <lv_img_decoder_built_in_line_alpha+0x98>
            pos = 4 - (x & 0x1) * 4;
 8014344:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
 8014346:	f10d 0b10 	add.w	fp, sp, #16
 801434a:	e7bf      	b.n	80142cc <lv_img_decoder_built_in_line_alpha+0x98>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 801434c:	2200      	movs	r2, #0
 801434e:	f10a 0104 	add.w	r1, sl, #4
 8014352:	9802      	ldr	r0, [sp, #8]
 8014354:	f7fd fe9a 	bl	801208c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 8014358:	2300      	movs	r3, #0
 801435a:	9a03      	ldr	r2, [sp, #12]
 801435c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014360:	4651      	mov	r1, sl
 8014362:	9802      	ldr	r0, [sp, #8]
 8014364:	f7fd fe6d 	bl	8012042 <lv_fs_read>
        data_tmp = fs_buf;
 8014368:	4651      	mov	r1, sl
 801436a:	e7bc      	b.n	80142e6 <lv_img_decoder_built_in_line_alpha+0xb2>
    }

    for(i = 0; i < len; i++) {
 801436c:	3201      	adds	r2, #1
 801436e:	b212      	sxth	r2, r2
 8014370:	42b2      	cmp	r2, r6
 8014372:	da19      	bge.n	80143a8 <lv_img_decoder_built_in_line_alpha+0x174>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 8014374:	780b      	ldrb	r3, [r1, #0]
 8014376:	4123      	asrs	r3, r4
 8014378:	ea03 0308 	and.w	r3, r3, r8
 801437c:	b2db      	uxtb	r3, r3

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 801437e:	7d38      	ldrb	r0, [r7, #20]
 8014380:	f000 001f 	and.w	r0, r0, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 8014384:	280e      	cmp	r0, #14
 8014386:	d001      	beq.n	801438c <lv_img_decoder_built_in_line_alpha+0x158>
 8014388:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801438c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8014390:	3002      	adds	r0, #2
 8014392:	542b      	strb	r3, [r5, r0]

        pos -= px_size;
 8014394:	eba4 0409 	sub.w	r4, r4, r9
 8014398:	b264      	sxtb	r4, r4
        if(pos < 0) {
 801439a:	2c00      	cmp	r4, #0
 801439c:	dae6      	bge.n	801436c <lv_img_decoder_built_in_line_alpha+0x138>
            pos = 8 - px_size;
 801439e:	f1c9 0408 	rsb	r4, r9, #8
 80143a2:	b264      	sxtb	r4, r4
            data_tmp++;
 80143a4:	3101      	adds	r1, #1
 80143a6:	e7e1      	b.n	801436c <lv_img_decoder_built_in_line_alpha+0x138>
        }
    }
    lv_mem_buf_release(fs_buf);
 80143a8:	9801      	ldr	r0, [sp, #4]
 80143aa:	f002 fb69 	bl	8016a80 <lv_mem_buf_release>
    return LV_RES_OK;
 80143ae:	2001      	movs	r0, #1
}
 80143b0:	b00b      	add	sp, #44	@ 0x2c
 80143b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 80143b6:	2000      	movs	r0, #0
 80143b8:	e7fa      	b.n	80143b0 <lv_img_decoder_built_in_line_alpha+0x17c>
 80143ba:	bf00      	nop
 80143bc:	080298c4 	.word	0x080298c4

080143c0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 80143c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c4:	b083      	sub	sp, #12
 80143c6:	4682      	mov	sl, r0
 80143c8:	460c      	mov	r4, r1
 80143ca:	4617      	mov	r7, r2
 80143cc:	4699      	mov	r9, r3
 80143ce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
 80143d0:	7d00      	ldrb	r0, [r0, #20]
 80143d2:	f000 001f 	and.w	r0, r0, #31
 80143d6:	f7f3 fc29 	bl	8007c2c <lv_img_cf_get_px_size>
 80143da:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 80143dc:	2601      	movs	r6, #1
 80143de:	4086      	lsls	r6, r0
 80143e0:	b2b6      	uxth	r6, r6
 80143e2:	3e01      	subs	r6, #1
 80143e4:	b2b6      	uxth	r6, r6

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
 80143e6:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80143ea:	f003 031f 	and.w	r3, r3, #31
 80143ee:	3b07      	subs	r3, #7
 80143f0:	2b03      	cmp	r3, #3
 80143f2:	d852      	bhi.n	801449a <lv_img_decoder_built_in_line_indexed+0xda>
 80143f4:	e8df f003 	tbb	[pc, r3]
 80143f8:	46352302 	.word	0x46352302
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w + 7) >> 3; /*E.g. w = 20 -> w = 2 + 1*/
 80143fc:	f8da 3014 	ldr.w	r3, [sl, #20]
 8014400:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8014404:	3007      	adds	r0, #7
 8014406:	10c0      	asrs	r0, r0, #3
            ofs += w * y + (x >> 3); /*First pixel*/
 8014408:	ea4f 0be4 	mov.w	fp, r4, asr #3
 801440c:	fb07 bb00 	mla	fp, r7, r0, fp
            ofs += 8;                /*Skip the palette*/
 8014410:	f10b 0b08 	add.w	fp, fp, #8
            pos = 7 - (x & 0x7);
 8014414:	43e4      	mvns	r4, r4
 8014416:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 801441a:	f8da 7024 	ldr.w	r7, [sl, #36]	@ 0x24

    uint8_t * fs_buf = lv_mem_buf_get(w);
 801441e:	9001      	str	r0, [sp, #4]
 8014420:	f002 facc 	bl	80169bc <lv_mem_buf_get>
    if(fs_buf == NULL) return LV_RES_INV;
 8014424:	9000      	str	r0, [sp, #0]
 8014426:	2800      	cmp	r0, #0
 8014428:	d078      	beq.n	801451c <lv_img_decoder_built_in_line_indexed+0x15c>
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 801442a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801442e:	bbdb      	cbnz	r3, 80144a8 <lv_img_decoder_built_in_line_indexed+0xe8>
        const lv_img_dsc_t * img_dsc = dsc->src;
 8014430:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
 8014434:	689b      	ldr	r3, [r3, #8]
 8014436:	eb03 0c0b 	add.w	ip, r3, fp
    }
    else {
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
 801443a:	2000      	movs	r0, #0
 801443c:	e046      	b.n	80144cc <lv_img_decoder_built_in_line_indexed+0x10c>
            w = (dsc->header.w + 3) >> 2; /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 801443e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8014442:	f3c3 208a 	ubfx	r0, r3, #10, #11
 8014446:	3003      	adds	r0, #3
 8014448:	1080      	asrs	r0, r0, #2
            ofs += w * y + (x >> 2); /*First pixel*/
 801444a:	ea4f 0ba4 	mov.w	fp, r4, asr #2
 801444e:	fb07 bb00 	mla	fp, r7, r0, fp
            ofs += 16;               /*Skip the palette*/
 8014452:	f10b 0b10 	add.w	fp, fp, #16
            pos = 6 - (x & 0x3) * 2;
 8014456:	b2a4      	uxth	r4, r4
 8014458:	43e4      	mvns	r4, r4
 801445a:	f004 0403 	and.w	r4, r4, #3
 801445e:	0064      	lsls	r4, r4, #1
            break;
 8014460:	e7db      	b.n	801441a <lv_img_decoder_built_in_line_indexed+0x5a>
            w = (dsc->header.w + 1) >> 1; /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 8014462:	f8da 3014 	ldr.w	r3, [sl, #20]
 8014466:	f3c3 208a 	ubfx	r0, r3, #10, #11
 801446a:	3001      	adds	r0, #1
 801446c:	1040      	asrs	r0, r0, #1
            ofs += w * y + (x >> 1); /*First pixel*/
 801446e:	ea4f 0b64 	mov.w	fp, r4, asr #1
 8014472:	fb07 bb00 	mla	fp, r7, r0, fp
            ofs += 64;               /*Skip the palette*/
 8014476:	f10b 0b40 	add.w	fp, fp, #64	@ 0x40
            pos = 4 - (x & 0x1) * 4;
 801447a:	f014 0f01 	tst.w	r4, #1
 801447e:	d111      	bne.n	80144a4 <lv_img_decoder_built_in_line_indexed+0xe4>
 8014480:	2404      	movs	r4, #4
 8014482:	e7ca      	b.n	801441a <lv_img_decoder_built_in_line_indexed+0x5a>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 8014484:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014488:	f3c0 238a 	ubfx	r3, r0, #10, #11
 801448c:	4618      	mov	r0, r3
            ofs += w * y + x;  /*First pixel*/
 801448e:	fb07 4403 	mla	r4, r7, r3, r4
            ofs += 1024;       /*Skip the palette*/
 8014492:	f504 6b80 	add.w	fp, r4, #1024	@ 0x400
            pos = 0;
 8014496:	2400      	movs	r4, #0
            break;
 8014498:	e7bf      	b.n	801441a <lv_img_decoder_built_in_line_indexed+0x5a>
    switch(dsc->header.cf) {
 801449a:	f04f 0b00 	mov.w	fp, #0
 801449e:	465c      	mov	r4, fp
 80144a0:	4658      	mov	r0, fp
 80144a2:	e7ba      	b.n	801441a <lv_img_decoder_built_in_line_indexed+0x5a>
            pos = 4 - (x & 0x1) * 4;
 80144a4:	2400      	movs	r4, #0
 80144a6:	e7b8      	b.n	801441a <lv_img_decoder_built_in_line_indexed+0x5a>
        lv_fs_seek(&user_data->f, ofs + 4, LV_FS_SEEK_SET); /*+4 to skip the header*/
 80144a8:	2200      	movs	r2, #0
 80144aa:	f10b 0104 	add.w	r1, fp, #4
 80144ae:	4638      	mov	r0, r7
 80144b0:	f7fd fdec 	bl	801208c <lv_fs_seek>
        lv_fs_read(&user_data->f, fs_buf, w, NULL);
 80144b4:	2300      	movs	r3, #0
 80144b6:	9a01      	ldr	r2, [sp, #4]
 80144b8:	f8dd a000 	ldr.w	sl, [sp]
 80144bc:	4651      	mov	r1, sl
 80144be:	4638      	mov	r0, r7
 80144c0:	f7fd fdbf 	bl	8012042 <lv_fs_read>
        data_tmp = fs_buf;
 80144c4:	46d4      	mov	ip, sl
 80144c6:	e7b8      	b.n	801443a <lv_img_decoder_built_in_line_indexed+0x7a>
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
 80144c8:	3001      	adds	r0, #1
 80144ca:	b200      	sxth	r0, r0
 80144cc:	4548      	cmp	r0, r9
 80144ce:	da1e      	bge.n	801450e <lv_img_decoder_built_in_line_indexed+0x14e>
        uint8_t val_act = (*data_tmp >> pos) & mask;
 80144d0:	f89c 3000 	ldrb.w	r3, [ip]
 80144d4:	4123      	asrs	r3, r4
 80144d6:	4033      	ands	r3, r6
 80144d8:	b2db      	uxtb	r3, r3

        lv_color_t color = user_data->palette[val_act];
 80144da:	68fa      	ldr	r2, [r7, #12]
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
 80144dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80144e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80144e4:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
 80144e6:	f102 0e01 	add.w	lr, r2, #1
 80144ea:	0a09      	lsrs	r1, r1, #8
 80144ec:	f805 100e 	strb.w	r1, [r5, lr]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
 80144f0:	6939      	ldr	r1, [r7, #16]
 80144f2:	3202      	adds	r2, #2
 80144f4:	5ccb      	ldrb	r3, [r1, r3]
 80144f6:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
 80144f8:	eba4 0408 	sub.w	r4, r4, r8
 80144fc:	b264      	sxtb	r4, r4
        if(pos < 0) {
 80144fe:	2c00      	cmp	r4, #0
 8014500:	dae2      	bge.n	80144c8 <lv_img_decoder_built_in_line_indexed+0x108>
            pos = 8 - px_size;
 8014502:	f1c8 0408 	rsb	r4, r8, #8
 8014506:	b264      	sxtb	r4, r4
            data_tmp++;
 8014508:	f10c 0c01 	add.w	ip, ip, #1
 801450c:	e7dc      	b.n	80144c8 <lv_img_decoder_built_in_line_indexed+0x108>
        }
    }
    lv_mem_buf_release(fs_buf);
 801450e:	9800      	ldr	r0, [sp, #0]
 8014510:	f002 fab6 	bl	8016a80 <lv_mem_buf_release>
    return LV_RES_OK;
 8014514:	2001      	movs	r0, #1
}
 8014516:	b003      	add	sp, #12
 8014518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(fs_buf == NULL) return LV_RES_INV;
 801451c:	2000      	movs	r0, #0
 801451e:	e7fa      	b.n	8014516 <lv_img_decoder_built_in_line_indexed+0x156>

08014520 <lv_img_decoder_built_in_read_line>:
{
 8014520:	b510      	push	{r4, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	4608      	mov	r0, r1
 8014526:	4611      	mov	r1, r2
 8014528:	461a      	mov	r2, r3
 801452a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 801452e:	f890 c014 	ldrb.w	ip, [r0, #20]
 8014532:	f00c 0e1e 	and.w	lr, ip, #30
 8014536:	f1be 0f04 	cmp.w	lr, #4
 801453a:	d014      	beq.n	8014566 <lv_img_decoder_built_in_read_line+0x46>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 801453c:	f00c 0c1f 	and.w	ip, ip, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 8014540:	f1bc 0f06 	cmp.w	ip, #6
 8014544:	d00f      	beq.n	8014566 <lv_img_decoder_built_in_read_line+0x46>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 8014546:	f1ac 0e0b 	sub.w	lr, ip, #11
 801454a:	fa5f fe8e 	uxtb.w	lr, lr
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 801454e:	f1be 0f03 	cmp.w	lr, #3
 8014552:	d915      	bls.n	8014580 <lv_img_decoder_built_in_read_line+0x60>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 8014554:	f1ac 0c07 	sub.w	ip, ip, #7
 8014558:	fa5f fc8c 	uxtb.w	ip, ip
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 801455c:	f1bc 0f03 	cmp.w	ip, #3
 8014560:	d913      	bls.n	801458a <lv_img_decoder_built_in_read_line+0x6a>
        return LV_RES_INV;
 8014562:	2000      	movs	r0, #0
 8014564:	e005      	b.n	8014572 <lv_img_decoder_built_in_read_line+0x52>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 8014566:	f890 c010 	ldrb.w	ip, [r0, #16]
 801456a:	f1bc 0f01 	cmp.w	ip, #1
 801456e:	d002      	beq.n	8014576 <lv_img_decoder_built_in_read_line+0x56>
    lv_res_t res = LV_RES_INV;
 8014570:	2000      	movs	r0, #0
}
 8014572:	b002      	add	sp, #8
 8014574:	bd10      	pop	{r4, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 8014576:	9c05      	ldr	r4, [sp, #20]
 8014578:	9400      	str	r4, [sp, #0]
 801457a:	f7ff fe25 	bl	80141c8 <lv_img_decoder_built_in_line_true_color>
 801457e:	e7f8      	b.n	8014572 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 8014580:	9c05      	ldr	r4, [sp, #20]
 8014582:	9400      	str	r4, [sp, #0]
 8014584:	f7ff fe56 	bl	8014234 <lv_img_decoder_built_in_line_alpha>
 8014588:	e7f3      	b.n	8014572 <lv_img_decoder_built_in_read_line+0x52>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 801458a:	9c05      	ldr	r4, [sp, #20]
 801458c:	9400      	str	r4, [sp, #0]
 801458e:	f7ff ff17 	bl	80143c0 <lv_img_decoder_built_in_line_indexed>
 8014592:	e7ee      	b.n	8014572 <lv_img_decoder_built_in_read_line+0x52>

08014594 <lv_img_decoder_get_info>:
{
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	4606      	mov	r6, r0
 8014598:	460f      	mov	r7, r1
    lv_memset_00(header, sizeof(lv_img_header_t));
 801459a:	2104      	movs	r1, #4
 801459c:	4638      	mov	r0, r7
 801459e:	f002 fb91 	bl	8016cc4 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 80145a2:	b1ee      	cbz	r6, 80145e0 <lv_img_decoder_get_info+0x4c>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 80145a4:	4630      	mov	r0, r6
 80145a6:	f7f3 fb6f 	bl	8007c88 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 80145aa:	4605      	mov	r5, r0
 80145ac:	b908      	cbnz	r0, 80145b2 <lv_img_decoder_get_info+0x1e>
        if(img_dsc->data == NULL) return LV_RES_INV;
 80145ae:	68b3      	ldr	r3, [r6, #8]
 80145b0:	b1bb      	cbz	r3, 80145e2 <lv_img_decoder_get_info+0x4e>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80145b2:	480d      	ldr	r0, [pc, #52]	@ (80145e8 <lv_img_decoder_get_info+0x54>)
 80145b4:	f001 ffd5 	bl	8016562 <_lv_ll_get_head>
 80145b8:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
 80145ba:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), d) {
 80145bc:	e004      	b.n	80145c8 <lv_img_decoder_get_info+0x34>
 80145be:	4621      	mov	r1, r4
 80145c0:	4809      	ldr	r0, [pc, #36]	@ (80145e8 <lv_img_decoder_get_info+0x54>)
 80145c2:	f001 ffd6 	bl	8016572 <_lv_ll_get_next>
 80145c6:	4604      	mov	r4, r0
 80145c8:	b15c      	cbz	r4, 80145e2 <lv_img_decoder_get_info+0x4e>
        if(d->info_cb) {
 80145ca:	6823      	ldr	r3, [r4, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d0f6      	beq.n	80145be <lv_img_decoder_get_info+0x2a>
            res = d->info_cb(d, src, header);
 80145d0:	463a      	mov	r2, r7
 80145d2:	4631      	mov	r1, r6
 80145d4:	4620      	mov	r0, r4
 80145d6:	4798      	blx	r3
 80145d8:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
 80145da:	2801      	cmp	r0, #1
 80145dc:	d1ef      	bne.n	80145be <lv_img_decoder_get_info+0x2a>
 80145de:	e000      	b.n	80145e2 <lv_img_decoder_get_info+0x4e>
    if(src == NULL) return LV_RES_INV;
 80145e0:	2500      	movs	r5, #0
}
 80145e2:	4628      	mov	r0, r5
 80145e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145e6:	bf00      	nop
 80145e8:	20006824 	.word	0x20006824

080145ec <lv_img_decoder_open>:
{
 80145ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f0:	4606      	mov	r6, r0
 80145f2:	4688      	mov	r8, r1
 80145f4:	4617      	mov	r7, r2
 80145f6:	461c      	mov	r4, r3
    lv_memset_00(dsc, sizeof(lv_img_decoder_dsc_t));
 80145f8:	2128      	movs	r1, #40	@ 0x28
 80145fa:	f002 fb63 	bl	8016cc4 <lv_memset_00>
    if(src == NULL) return LV_RES_INV;
 80145fe:	f1b8 0f00 	cmp.w	r8, #0
 8014602:	d053      	beq.n	80146ac <lv_img_decoder_open+0xc0>
    lv_img_src_t src_type = lv_img_src_get_type(src);
 8014604:	4640      	mov	r0, r8
 8014606:	f7f3 fb3f 	bl	8007c88 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
 801460a:	4605      	mov	r5, r0
 801460c:	b918      	cbnz	r0, 8014616 <lv_img_decoder_open+0x2a>
        if(img_dsc->data == NULL) return LV_RES_INV;
 801460e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d043      	beq.n	801469e <lv_img_decoder_open+0xb2>
    dsc->color    = color;
 8014616:	8137      	strh	r7, [r6, #8]
    dsc->src_type = src_type;
 8014618:	7435      	strb	r5, [r6, #16]
    dsc->frame_id = frame_id;
 801461a:	60f4      	str	r4, [r6, #12]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 801461c:	2d01      	cmp	r5, #1
 801461e:	d007      	beq.n	8014630 <lv_img_decoder_open+0x44>
        dsc->src = src;
 8014620:	f8c6 8004 	str.w	r8, [r6, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 8014624:	4822      	ldr	r0, [pc, #136]	@ (80146b0 <lv_img_decoder_open+0xc4>)
 8014626:	f001 ff9c 	bl	8016562 <_lv_ll_get_head>
 801462a:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
 801462c:	2500      	movs	r5, #0
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801462e:	e011      	b.n	8014654 <lv_img_decoder_open+0x68>
        size_t fnlen = strlen(src);
 8014630:	4640      	mov	r0, r8
 8014632:	f7eb fdb3 	bl	800019c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
 8014636:	3001      	adds	r0, #1
 8014638:	f002 f96e 	bl	8016918 <lv_mem_alloc>
 801463c:	6070      	str	r0, [r6, #4]
        LV_ASSERT_MALLOC(dsc->src);
 801463e:	b118      	cbz	r0, 8014648 <lv_img_decoder_open+0x5c>
        strcpy((char *)dsc->src, src);
 8014640:	4641      	mov	r1, r8
 8014642:	f014 ffc9 	bl	80295d8 <strcpy>
 8014646:	e7ed      	b.n	8014624 <lv_img_decoder_open+0x38>
        LV_ASSERT_MALLOC(dsc->src);
 8014648:	e7fe      	b.n	8014648 <lv_img_decoder_open+0x5c>
    _LV_LL_READ(&LV_GC_ROOT(_lv_img_decoder_ll), decoder) {
 801464a:	4621      	mov	r1, r4
 801464c:	4818      	ldr	r0, [pc, #96]	@ (80146b0 <lv_img_decoder_open+0xc4>)
 801464e:	f001 ff90 	bl	8016572 <_lv_ll_get_next>
 8014652:	4604      	mov	r4, r0
 8014654:	b304      	cbz	r4, 8014698 <lv_img_decoder_open+0xac>
        if(decoder->info_cb == NULL || decoder->open_cb == NULL) continue;
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d0f6      	beq.n	801464a <lv_img_decoder_open+0x5e>
 801465c:	6862      	ldr	r2, [r4, #4]
 801465e:	2a00      	cmp	r2, #0
 8014660:	d0f3      	beq.n	801464a <lv_img_decoder_open+0x5e>
        res = decoder->info_cb(decoder, src, &dsc->header);
 8014662:	f106 0714 	add.w	r7, r6, #20
 8014666:	463a      	mov	r2, r7
 8014668:	4641      	mov	r1, r8
 801466a:	4620      	mov	r0, r4
 801466c:	4798      	blx	r3
 801466e:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
 8014670:	2801      	cmp	r0, #1
 8014672:	d1ea      	bne.n	801464a <lv_img_decoder_open+0x5e>
        dsc->decoder = decoder;
 8014674:	6034      	str	r4, [r6, #0]
        res = decoder->open_cb(decoder, dsc);
 8014676:	6863      	ldr	r3, [r4, #4]
 8014678:	4631      	mov	r1, r6
 801467a:	4620      	mov	r0, r4
 801467c:	4798      	blx	r3
 801467e:	4605      	mov	r5, r0
        if(res == LV_RES_OK) return res;
 8014680:	2801      	cmp	r0, #1
 8014682:	d00c      	beq.n	801469e <lv_img_decoder_open+0xb2>
        lv_memset_00(&dsc->header, sizeof(lv_img_header_t));
 8014684:	2104      	movs	r1, #4
 8014686:	4638      	mov	r0, r7
 8014688:	f002 fb1c 	bl	8016cc4 <lv_memset_00>
        dsc->error_msg = NULL;
 801468c:	2300      	movs	r3, #0
 801468e:	6233      	str	r3, [r6, #32]
        dsc->img_data  = NULL;
 8014690:	61b3      	str	r3, [r6, #24]
        dsc->user_data = NULL;
 8014692:	6273      	str	r3, [r6, #36]	@ 0x24
        dsc->time_to_open = 0;
 8014694:	61f3      	str	r3, [r6, #28]
 8014696:	e7d8      	b.n	801464a <lv_img_decoder_open+0x5e>
    if(dsc->src_type == LV_IMG_SRC_FILE)
 8014698:	7c33      	ldrb	r3, [r6, #16]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d002      	beq.n	80146a4 <lv_img_decoder_open+0xb8>
}
 801469e:	4628      	mov	r0, r5
 80146a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_mem_free((void *)dsc->src);
 80146a4:	6870      	ldr	r0, [r6, #4]
 80146a6:	f002 f955 	bl	8016954 <lv_mem_free>
 80146aa:	e7f8      	b.n	801469e <lv_img_decoder_open+0xb2>
    if(src == NULL) return LV_RES_INV;
 80146ac:	2500      	movs	r5, #0
 80146ae:	e7f6      	b.n	801469e <lv_img_decoder_open+0xb2>
 80146b0:	20006824 	.word	0x20006824

080146b4 <lv_img_decoder_read_line>:
{
 80146b4:	b530      	push	{r4, r5, lr}
 80146b6:	b083      	sub	sp, #12
 80146b8:	4684      	mov	ip, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
 80146ba:	6800      	ldr	r0, [r0, #0]
 80146bc:	6884      	ldr	r4, [r0, #8]
 80146be:	b144      	cbz	r4, 80146d2 <lv_img_decoder_read_line+0x1e>
 80146c0:	9d06      	ldr	r5, [sp, #24]
 80146c2:	9501      	str	r5, [sp, #4]
 80146c4:	9300      	str	r3, [sp, #0]
 80146c6:	4613      	mov	r3, r2
 80146c8:	460a      	mov	r2, r1
 80146ca:	4661      	mov	r1, ip
 80146cc:	47a0      	blx	r4
}
 80146ce:	b003      	add	sp, #12
 80146d0:	bd30      	pop	{r4, r5, pc}
    lv_res_t res = LV_RES_INV;
 80146d2:	2000      	movs	r0, #0
 80146d4:	e7fb      	b.n	80146ce <lv_img_decoder_read_line+0x1a>

080146d6 <lv_img_decoder_close>:
{
 80146d6:	b510      	push	{r4, lr}
 80146d8:	4604      	mov	r4, r0
    if(dsc->decoder) {
 80146da:	6800      	ldr	r0, [r0, #0]
 80146dc:	b130      	cbz	r0, 80146ec <lv_img_decoder_close+0x16>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 80146de:	68c3      	ldr	r3, [r0, #12]
 80146e0:	b10b      	cbz	r3, 80146e6 <lv_img_decoder_close+0x10>
 80146e2:	4621      	mov	r1, r4
 80146e4:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 80146e6:	7c23      	ldrb	r3, [r4, #16]
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d000      	beq.n	80146ee <lv_img_decoder_close+0x18>
}
 80146ec:	bd10      	pop	{r4, pc}
            lv_mem_free((void *)dsc->src);
 80146ee:	6860      	ldr	r0, [r4, #4]
 80146f0:	f002 f930 	bl	8016954 <lv_mem_free>
            dsc->src = NULL;
 80146f4:	2300      	movs	r3, #0
 80146f6:	6063      	str	r3, [r4, #4]
}
 80146f8:	e7f8      	b.n	80146ec <lv_img_decoder_close+0x16>
	...

080146fc <lv_img_decoder_create>:
{
 80146fc:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_decoder_ll));
 80146fe:	4805      	ldr	r0, [pc, #20]	@ (8014714 <lv_img_decoder_create+0x18>)
 8014700:	f001 fef1 	bl	80164e6 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(decoder);
 8014704:	b128      	cbz	r0, 8014712 <lv_img_decoder_create+0x16>
 8014706:	4604      	mov	r4, r0
    lv_memset_00(decoder, sizeof(lv_img_decoder_t));
 8014708:	2114      	movs	r1, #20
 801470a:	f002 fadb 	bl	8016cc4 <lv_memset_00>
}
 801470e:	4620      	mov	r0, r4
 8014710:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 8014712:	e7fe      	b.n	8014712 <lv_img_decoder_create+0x16>
 8014714:	20006824 	.word	0x20006824

08014718 <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
 8014718:	6001      	str	r1, [r0, #0]
}
 801471a:	4770      	bx	lr

0801471c <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
 801471c:	6041      	str	r1, [r0, #4]
}
 801471e:	4770      	bx	lr

08014720 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
 8014720:	6081      	str	r1, [r0, #8]
}
 8014722:	4770      	bx	lr

08014724 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
 8014724:	60c1      	str	r1, [r0, #12]
}
 8014726:	4770      	bx	lr

08014728 <_lv_img_decoder_init>:
{
 8014728:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_decoder_ll), sizeof(lv_img_decoder_t));
 801472a:	2114      	movs	r1, #20
 801472c:	480b      	ldr	r0, [pc, #44]	@ (801475c <_lv_img_decoder_init+0x34>)
 801472e:	f001 fed2 	bl	80164d6 <_lv_ll_init>
    decoder = lv_img_decoder_create();
 8014732:	f7ff ffe3 	bl	80146fc <lv_img_decoder_create>
    LV_ASSERT_MALLOC(decoder);
 8014736:	b180      	cbz	r0, 801475a <_lv_img_decoder_init+0x32>
 8014738:	4604      	mov	r4, r0
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 801473a:	4909      	ldr	r1, [pc, #36]	@ (8014760 <_lv_img_decoder_init+0x38>)
 801473c:	f7ff ffec 	bl	8014718 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 8014740:	4908      	ldr	r1, [pc, #32]	@ (8014764 <_lv_img_decoder_init+0x3c>)
 8014742:	4620      	mov	r0, r4
 8014744:	f7ff ffea 	bl	801471c <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 8014748:	4907      	ldr	r1, [pc, #28]	@ (8014768 <_lv_img_decoder_init+0x40>)
 801474a:	4620      	mov	r0, r4
 801474c:	f7ff ffe8 	bl	8014720 <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 8014750:	4906      	ldr	r1, [pc, #24]	@ (801476c <_lv_img_decoder_init+0x44>)
 8014752:	4620      	mov	r0, r4
 8014754:	f7ff ffe6 	bl	8014724 <lv_img_decoder_set_close_cb>
}
 8014758:	bd10      	pop	{r4, pc}
    LV_ASSERT_MALLOC(decoder);
 801475a:	e7fe      	b.n	801475a <_lv_img_decoder_init+0x32>
 801475c:	20006824 	.word	0x20006824
 8014760:	08013e85 	.word	0x08013e85
 8014764:	08013f89 	.word	0x08013f89
 8014768:	08014521 	.word	0x08014521
 801476c:	08013f55 	.word	0x08013f55

08014770 <lv_indev_get_act>:
}

lv_indev_t * lv_indev_get_act(void)
{
    return indev_act;
}
 8014770:	4b01      	ldr	r3, [pc, #4]	@ (8014778 <lv_indev_get_act+0x8>)
 8014772:	6818      	ldr	r0, [r3, #0]
 8014774:	4770      	bx	lr
 8014776:	bf00      	nop
 8014778:	200068a4 	.word	0x200068a4

0801477c <lv_indev_get_type>:

lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 801477c:	b110      	cbz	r0, 8014784 <lv_indev_get_type+0x8>

    return indev->driver->type;
 801477e:	6803      	ldr	r3, [r0, #0]
 8014780:	7818      	ldrb	r0, [r3, #0]
 8014782:	4770      	bx	lr
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 8014784:	2000      	movs	r0, #0
}
 8014786:	4770      	bx	lr

08014788 <lv_indev_reset>:

void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
{
 8014788:	b510      	push	{r4, lr}
 801478a:	460c      	mov	r4, r1
    if(indev) {
 801478c:	b348      	cbz	r0, 80147e2 <lv_indev_reset+0x5a>
 801478e:	4602      	mov	r2, r0
        indev->proc.reset_query = 1;
 8014790:	7943      	ldrb	r3, [r0, #5]
 8014792:	f043 0302 	orr.w	r3, r3, #2
 8014796:	7143      	strb	r3, [r0, #5]
        if(indev_act == indev) indev_obj_act = NULL;
 8014798:	4b28      	ldr	r3, [pc, #160]	@ (801483c <lv_indev_reset+0xb4>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4283      	cmp	r3, r0
 801479e:	d006      	beq.n	80147ae <lv_indev_reset+0x26>
        if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_KEYPAD) {
 80147a0:	6813      	ldr	r3, [r2, #0]
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	3b01      	subs	r3, #1
 80147a6:	b2db      	uxtb	r3, r3
 80147a8:	2b01      	cmp	r3, #1
 80147aa:	d904      	bls.n	80147b6 <lv_indev_reset+0x2e>
            }
            i = lv_indev_get_next(i);
        }
        indev_obj_act = NULL;
    }
}
 80147ac:	bd10      	pop	{r4, pc}
        if(indev_act == indev) indev_obj_act = NULL;
 80147ae:	4b24      	ldr	r3, [pc, #144]	@ (8014840 <lv_indev_reset+0xb8>)
 80147b0:	2100      	movs	r1, #0
 80147b2:	6019      	str	r1, [r3, #0]
 80147b4:	e7f4      	b.n	80147a0 <lv_indev_reset+0x18>
            if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
 80147b6:	b134      	cbz	r4, 80147c6 <lv_indev_reset+0x3e>
 80147b8:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80147ba:	42a3      	cmp	r3, r4
 80147bc:	d00e      	beq.n	80147dc <lv_indev_reset+0x54>
            if(obj == NULL || indev->proc.types.pointer.act_obj == obj) {
 80147be:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80147c0:	42a3      	cmp	r3, r4
 80147c2:	d104      	bne.n	80147ce <lv_indev_reset+0x46>
 80147c4:	e001      	b.n	80147ca <lv_indev_reset+0x42>
                indev->proc.types.pointer.last_pressed = NULL;
 80147c6:	2300      	movs	r3, #0
 80147c8:	6353      	str	r3, [r2, #52]	@ 0x34
                indev->proc.types.pointer.act_obj = NULL;
 80147ca:	2300      	movs	r3, #0
 80147cc:	6293      	str	r3, [r2, #40]	@ 0x28
            if(obj == NULL || indev->proc.types.pointer.last_obj == obj) {
 80147ce:	b114      	cbz	r4, 80147d6 <lv_indev_reset+0x4e>
 80147d0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80147d2:	42a3      	cmp	r3, r4
 80147d4:	d1ea      	bne.n	80147ac <lv_indev_reset+0x24>
                indev->proc.types.pointer.last_obj = NULL;
 80147d6:	2300      	movs	r3, #0
 80147d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80147da:	e7e7      	b.n	80147ac <lv_indev_reset+0x24>
                indev->proc.types.pointer.last_pressed = NULL;
 80147dc:	2300      	movs	r3, #0
 80147de:	6353      	str	r3, [r2, #52]	@ 0x34
 80147e0:	e7ed      	b.n	80147be <lv_indev_reset+0x36>
        lv_indev_t * i = lv_indev_get_next(NULL);
 80147e2:	2000      	movs	r0, #0
 80147e4:	f7fe fda8 	bl	8013338 <lv_indev_get_next>
        while(i) {
 80147e8:	e006      	b.n	80147f8 <lv_indev_reset+0x70>
                    i->proc.types.pointer.last_pressed = NULL;
 80147ea:	2300      	movs	r3, #0
 80147ec:	6343      	str	r3, [r0, #52]	@ 0x34
                    i->proc.types.pointer.act_obj = NULL;
 80147ee:	6283      	str	r3, [r0, #40]	@ 0x28
                    i->proc.types.pointer.last_obj = NULL;
 80147f0:	2300      	movs	r3, #0
 80147f2:	62c3      	str	r3, [r0, #44]	@ 0x2c
            i = lv_indev_get_next(i);
 80147f4:	f7fe fda0 	bl	8013338 <lv_indev_get_next>
        while(i) {
 80147f8:	b1d8      	cbz	r0, 8014832 <lv_indev_reset+0xaa>
            i->proc.reset_query = 1;
 80147fa:	7943      	ldrb	r3, [r0, #5]
 80147fc:	f043 0302 	orr.w	r3, r3, #2
 8014800:	7143      	strb	r3, [r0, #5]
            if(i->driver->type == LV_INDEV_TYPE_POINTER || i->driver->type == LV_INDEV_TYPE_KEYPAD) {
 8014802:	6803      	ldr	r3, [r0, #0]
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	3b01      	subs	r3, #1
 8014808:	b2db      	uxtb	r3, r3
 801480a:	2b01      	cmp	r3, #1
 801480c:	d8f2      	bhi.n	80147f4 <lv_indev_reset+0x6c>
                if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
 801480e:	2c00      	cmp	r4, #0
 8014810:	d0eb      	beq.n	80147ea <lv_indev_reset+0x62>
 8014812:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014814:	42a3      	cmp	r3, r4
 8014816:	d006      	beq.n	8014826 <lv_indev_reset+0x9e>
                if(obj == NULL || i->proc.types.pointer.act_obj == obj) {
 8014818:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801481a:	42a3      	cmp	r3, r4
 801481c:	d006      	beq.n	801482c <lv_indev_reset+0xa4>
                if(obj == NULL || i->proc.types.pointer.last_obj == obj) {
 801481e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014820:	42a3      	cmp	r3, r4
 8014822:	d1e7      	bne.n	80147f4 <lv_indev_reset+0x6c>
 8014824:	e7e4      	b.n	80147f0 <lv_indev_reset+0x68>
                    i->proc.types.pointer.last_pressed = NULL;
 8014826:	2300      	movs	r3, #0
 8014828:	6343      	str	r3, [r0, #52]	@ 0x34
 801482a:	e7f5      	b.n	8014818 <lv_indev_reset+0x90>
                    i->proc.types.pointer.act_obj = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	6283      	str	r3, [r0, #40]	@ 0x28
 8014830:	e7f5      	b.n	801481e <lv_indev_reset+0x96>
        indev_obj_act = NULL;
 8014832:	4b03      	ldr	r3, [pc, #12]	@ (8014840 <lv_indev_reset+0xb8>)
 8014834:	2200      	movs	r2, #0
 8014836:	601a      	str	r2, [r3, #0]
}
 8014838:	e7b8      	b.n	80147ac <lv_indev_reset+0x24>
 801483a:	bf00      	nop
 801483c:	200068a4 	.word	0x200068a4
 8014840:	200068a0 	.word	0x200068a0

08014844 <lv_indev_reset_long_press>:

void lv_indev_reset_long_press(lv_indev_t * indev)
{
 8014844:	b510      	push	{r4, lr}
 8014846:	4604      	mov	r4, r0
    indev->proc.long_pr_sent         = 0;
 8014848:	7943      	ldrb	r3, [r0, #5]
 801484a:	f023 0301 	bic.w	r3, r3, #1
 801484e:	7143      	strb	r3, [r0, #5]
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 8014850:	f7fe fd8c 	bl	801336c <lv_tick_get>
 8014854:	64e0      	str	r0, [r4, #76]	@ 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8014856:	f7fe fd89 	bl	801336c <lv_tick_get>
 801485a:	64a0      	str	r0, [r4, #72]	@ 0x48
}
 801485c:	bd10      	pop	{r4, pc}

0801485e <lv_indev_get_point>:
    }
}

void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
    if(indev == NULL) {
 801485e:	4603      	mov	r3, r0
 8014860:	b150      	cbz	r0, 8014878 <lv_indev_get_point+0x1a>
        point->x = 0;
        point->y = 0;
        return;
    }
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) {
 8014862:	6802      	ldr	r2, [r0, #0]
 8014864:	7812      	ldrb	r2, [r2, #0]
 8014866:	2a01      	cmp	r2, #1
 8014868:	d00a      	beq.n	8014880 <lv_indev_get_point+0x22>
 801486a:	2a03      	cmp	r2, #3
 801486c:	d008      	beq.n	8014880 <lv_indev_get_point+0x22>
        point->x = -1;
 801486e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014872:	800b      	strh	r3, [r1, #0]
        point->y = -1;
 8014874:	804b      	strh	r3, [r1, #2]
 8014876:	4770      	bx	lr
        point->x = 0;
 8014878:	2300      	movs	r3, #0
 801487a:	800b      	strh	r3, [r1, #0]
        point->y = 0;
 801487c:	804b      	strh	r3, [r1, #2]
        return;
 801487e:	4770      	bx	lr
    }
    else {
        point->x = indev->proc.types.pointer.act_point.x;
 8014880:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8014884:	800a      	strh	r2, [r1, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 8014886:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801488a:	804b      	strh	r3, [r1, #2]
    }
}
 801488c:	4770      	bx	lr

0801488e <lv_indev_get_scroll_dir>:
        return indev->proc.types.keypad.last_key;
}

lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
{
    if(indev == NULL) return false;
 801488e:	4603      	mov	r3, r0
 8014890:	b150      	cbz	r0, 80148a8 <lv_indev_get_scroll_dir+0x1a>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 8014892:	6802      	ldr	r2, [r0, #0]
 8014894:	7812      	ldrb	r2, [r2, #0]
 8014896:	2a01      	cmp	r2, #1
 8014898:	d001      	beq.n	801489e <lv_indev_get_scroll_dir+0x10>
 801489a:	2a03      	cmp	r2, #3
 801489c:	d106      	bne.n	80148ac <lv_indev_get_scroll_dir+0x1e>
    return indev->proc.types.pointer.scroll_dir;
 801489e:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 80148a2:	f000 000f 	and.w	r0, r0, #15
 80148a6:	4770      	bx	lr
    if(indev == NULL) return false;
 80148a8:	2000      	movs	r0, #0
 80148aa:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return false;
 80148ac:	2000      	movs	r0, #0
}
 80148ae:	4770      	bx	lr

080148b0 <lv_indev_get_scroll_obj>:

lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
{
    if(indev == NULL) return NULL;
 80148b0:	4603      	mov	r3, r0
 80148b2:	b138      	cbz	r0, 80148c4 <lv_indev_get_scroll_obj+0x14>
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80148b4:	6802      	ldr	r2, [r0, #0]
 80148b6:	7812      	ldrb	r2, [r2, #0]
 80148b8:	2a01      	cmp	r2, #1
 80148ba:	d001      	beq.n	80148c0 <lv_indev_get_scroll_obj+0x10>
 80148bc:	2a03      	cmp	r2, #3
 80148be:	d102      	bne.n	80148c6 <lv_indev_get_scroll_obj+0x16>
    return indev->proc.types.pointer.scroll_obj;
 80148c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80148c2:	4770      	bx	lr
 80148c4:	4770      	bx	lr
    if(indev->driver->type != LV_INDEV_TYPE_POINTER && indev->driver->type != LV_INDEV_TYPE_BUTTON) return NULL;
 80148c6:	2000      	movs	r0, #0
}
 80148c8:	4770      	bx	lr

080148ca <lv_indev_get_vect>:

void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
    point->x = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	800b      	strh	r3, [r1, #0]
    point->y = 0;
 80148ce:	804b      	strh	r3, [r1, #2]

    if(indev == NULL) return;
 80148d0:	4603      	mov	r3, r0
 80148d2:	b158      	cbz	r0, 80148ec <lv_indev_get_vect+0x22>

    if(indev->driver->type == LV_INDEV_TYPE_POINTER || indev->driver->type == LV_INDEV_TYPE_BUTTON) {
 80148d4:	6802      	ldr	r2, [r0, #0]
 80148d6:	7812      	ldrb	r2, [r2, #0]
 80148d8:	2a01      	cmp	r2, #1
 80148da:	d001      	beq.n	80148e0 <lv_indev_get_vect+0x16>
 80148dc:	2a03      	cmp	r2, #3
 80148de:	d105      	bne.n	80148ec <lv_indev_get_vect+0x22>
        point->x = indev->proc.types.pointer.vect.x;
 80148e0:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80148e4:	800a      	strh	r2, [r1, #0]
        point->y = indev->proc.types.pointer.vect.y;
 80148e6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80148ea:	804b      	strh	r3, [r1, #2]
    }
}
 80148ec:	4770      	bx	lr

080148ee <lv_indev_wait_release>:

void lv_indev_wait_release(lv_indev_t * indev)
{
    if(indev == NULL)return;
 80148ee:	b118      	cbz	r0, 80148f8 <lv_indev_wait_release+0xa>
    indev->proc.wait_until_release = 1;
 80148f0:	7943      	ldrb	r3, [r0, #5]
 80148f2:	f043 0308 	orr.w	r3, r3, #8
 80148f6:	7143      	strb	r3, [r0, #5]
}
 80148f8:	4770      	bx	lr
	...

080148fc <lv_indev_get_obj_act>:

lv_obj_t * lv_indev_get_obj_act(void)
{
    return indev_obj_act;
}
 80148fc:	4b01      	ldr	r3, [pc, #4]	@ (8014904 <lv_indev_get_obj_act+0x8>)
 80148fe:	6818      	ldr	r0, [r3, #0]
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	200068a0 	.word	0x200068a0

08014908 <lv_indev_scroll_throw_predict>:
 * @param dir `LV_DIR_VER` or `LV_DIR_HOR`
 * @return the difference compared to the current position when the throw would be finished
 */
lv_coord_t lv_indev_scroll_throw_predict(lv_indev_t * indev, lv_dir_t dir)
{
    if(indev == NULL) return 0;
 8014908:	4602      	mov	r2, r0
 801490a:	b1e0      	cbz	r0, 8014946 <lv_indev_scroll_throw_predict+0x3e>
    lv_coord_t v;
    switch(dir) {
 801490c:	2903      	cmp	r1, #3
 801490e:	d007      	beq.n	8014920 <lv_indev_scroll_throw_predict+0x18>
 8014910:	290c      	cmp	r1, #12
 8014912:	d11a      	bne.n	801494a <lv_indev_scroll_throw_predict+0x42>
        case LV_DIR_VER:
            v = indev->proc.types.pointer.scroll_throw_vect_ori.y;
 8014914:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
            break;
        default:
            return 0;
    }

    lv_coord_t scroll_throw = indev->driver->scroll_throw;
 8014918:	6812      	ldr	r2, [r2, #0]
 801491a:	7e51      	ldrb	r1, [r2, #25]
    lv_coord_t sum = 0;
 801491c:	2000      	movs	r0, #0
    while(v) {
 801491e:	e00f      	b.n	8014940 <lv_indev_scroll_throw_predict+0x38>
            v = indev->proc.types.pointer.scroll_throw_vect_ori.x;
 8014920:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	@ 0x24
            break;
 8014924:	e7f8      	b.n	8014918 <lv_indev_scroll_throw_predict+0x10>
        sum += v;
 8014926:	4418      	add	r0, r3
 8014928:	b200      	sxth	r0, r0
        v = v * (100 - scroll_throw) / 100;
 801492a:	f1c1 0264 	rsb	r2, r1, #100	@ 0x64
 801492e:	fb02 f303 	mul.w	r3, r2, r3
 8014932:	4a07      	ldr	r2, [pc, #28]	@ (8014950 <lv_indev_scroll_throw_predict+0x48>)
 8014934:	fb82 c203 	smull	ip, r2, r2, r3
 8014938:	17db      	asrs	r3, r3, #31
 801493a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801493e:	b21b      	sxth	r3, r3
    while(v) {
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1f0      	bne.n	8014926 <lv_indev_scroll_throw_predict+0x1e>
 8014944:	4770      	bx	lr
    if(indev == NULL) return 0;
 8014946:	2000      	movs	r0, #0
 8014948:	4770      	bx	lr
    switch(dir) {
 801494a:	2000      	movs	r0, #0
    }

    return sum;
}
 801494c:	4770      	bx	lr
 801494e:	bf00      	nop
 8014950:	51eb851f 	.word	0x51eb851f

08014954 <lv_keyboard_update_ctrl_map>:
/**
 * Update the control map for the current mode
 * @param obj pointer to a keyboard object
 */
static void lv_keyboard_update_ctrl_map(lv_obj_t * obj)
{
 8014954:	b538      	push	{r3, r4, r5, lr}
 8014956:	4604      	mov	r4, r0
    lv_keyboard_t * keyboard = (lv_keyboard_t *)obj;

    if(keyboard->popovers) {
 8014958:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 801495c:	f013 0f01 	tst.w	r3, #1
 8014960:	d007      	beq.n	8014972 <lv_keyboard_update_ctrl_map+0x1e>
        /*Apply the current control map (already includes LV_BTNMATRIX_CTRL_POPOVER flags)*/
        lv_btnmatrix_set_ctrl_map(obj, kb_ctrl[keyboard->mode]);
 8014962:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8014966:	4b14      	ldr	r3, [pc, #80]	@ (80149b8 <lv_keyboard_update_ctrl_map+0x64>)
 8014968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801496c:	f7ee fda2 	bl	80034b4 <lv_btnmatrix_set_ctrl_map>

        /*Apply new control map and clean up*/
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
        lv_mem_free(ctrl_map);
    }
}
 8014970:	bd38      	pop	{r3, r4, r5, pc}
        lv_btnmatrix_ctrl_t * ctrl_map = lv_mem_alloc(btnm->btn_cnt * sizeof(lv_btnmatrix_ctrl_t));
 8014972:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
 8014974:	0040      	lsls	r0, r0, #1
 8014976:	f001 ffcf 	bl	8016918 <lv_mem_alloc>
 801497a:	4605      	mov	r5, r0
        lv_memcpy(ctrl_map, kb_ctrl[keyboard->mode], sizeof(lv_btnmatrix_ctrl_t) * btnm->btn_cnt);
 801497c:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8014980:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8014982:	0052      	lsls	r2, r2, #1
 8014984:	4b0c      	ldr	r3, [pc, #48]	@ (80149b8 <lv_keyboard_update_ctrl_map+0x64>)
 8014986:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801498a:	f002 f8ad 	bl	8016ae8 <lv_memcpy>
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801498e:	2300      	movs	r3, #0
 8014990:	e007      	b.n	80149a2 <lv_keyboard_update_ctrl_map+0x4e>
            ctrl_map[i] &= (~LV_BTNMATRIX_CTRL_POPOVER);
 8014992:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8014996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801499a:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
        for(uint16_t i = 0; i < btnm->btn_cnt; i++) {
 801499e:	3301      	adds	r3, #1
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80149a4:	429a      	cmp	r2, r3
 80149a6:	d8f4      	bhi.n	8014992 <lv_keyboard_update_ctrl_map+0x3e>
        lv_btnmatrix_set_ctrl_map(obj, ctrl_map);
 80149a8:	4629      	mov	r1, r5
 80149aa:	4620      	mov	r0, r4
 80149ac:	f7ee fd82 	bl	80034b4 <lv_btnmatrix_set_ctrl_map>
        lv_mem_free(ctrl_map);
 80149b0:	4628      	mov	r0, r5
 80149b2:	f001 ffcf 	bl	8016954 <lv_mem_free>
}
 80149b6:	e7db      	b.n	8014970 <lv_keyboard_update_ctrl_map+0x1c>
 80149b8:	20000024 	.word	0x20000024

080149bc <lv_keyboard_update_map>:
{
 80149bc:	b510      	push	{r4, lr}
 80149be:	4604      	mov	r4, r0
    lv_btnmatrix_set_map(obj, kb_map[keyboard->mode]);
 80149c0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80149c4:	4b04      	ldr	r3, [pc, #16]	@ (80149d8 <lv_keyboard_update_map+0x1c>)
 80149c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149ca:	f7ee fc65 	bl	8003298 <lv_btnmatrix_set_map>
    lv_keyboard_update_ctrl_map(obj);
 80149ce:	4620      	mov	r0, r4
 80149d0:	f7ff ffc0 	bl	8014954 <lv_keyboard_update_ctrl_map>
}
 80149d4:	bd10      	pop	{r4, pc}
 80149d6:	bf00      	nop
 80149d8:	20000048 	.word	0x20000048

080149dc <lv_keyboard_constructor>:
{
 80149dc:	b538      	push	{r3, r4, r5, lr}
 80149de:	460c      	mov	r4, r1
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICK_FOCUSABLE);
 80149e0:	2104      	movs	r1, #4
 80149e2:	4620      	mov	r0, r4
 80149e4:	f003 fcfc 	bl	80183e0 <lv_obj_clear_flag>
    keyboard->ta         = NULL;
 80149e8:	2500      	movs	r5, #0
 80149ea:	63a5      	str	r5, [r4, #56]	@ 0x38
    keyboard->mode       = LV_KEYBOARD_MODE_TEXT_LOWER;
 80149ec:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
    keyboard->popovers   = 0;
 80149f0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80149f4:	f365 0300 	bfi	r3, r5, #0, #1
 80149f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    lv_obj_align(obj, LV_ALIGN_BOTTOM_MID, 0, 0);
 80149fc:	462b      	mov	r3, r5
 80149fe:	462a      	mov	r2, r5
 8014a00:	2105      	movs	r1, #5
 8014a02:	4620      	mov	r0, r4
 8014a04:	f004 fe04 	bl	8019610 <lv_obj_align>
    lv_obj_add_event_cb(obj, lv_keyboard_def_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 8014a08:	462b      	mov	r3, r5
 8014a0a:	221c      	movs	r2, #28
 8014a0c:	4906      	ldr	r1, [pc, #24]	@ (8014a28 <lv_keyboard_constructor+0x4c>)
 8014a0e:	4620      	mov	r0, r4
 8014a10:	f7fc f9a4 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_set_style_base_dir(obj, LV_BASE_DIR_LTR, 0);
 8014a14:	462a      	mov	r2, r5
 8014a16:	4629      	mov	r1, r5
 8014a18:	4620      	mov	r0, r4
 8014a1a:	f008 fba4 	bl	801d166 <lv_obj_set_style_base_dir>
    lv_keyboard_update_map(obj);
 8014a1e:	4620      	mov	r0, r4
 8014a20:	f7ff ffcc 	bl	80149bc <lv_keyboard_update_map>
}
 8014a24:	bd38      	pop	{r3, r4, r5, pc}
 8014a26:	bf00      	nop
 8014a28:	08014a2d 	.word	0x08014a2d

08014a2c <lv_keyboard_def_event_cb>:
{
 8014a2c:	b570      	push	{r4, r5, r6, lr}
    lv_obj_t * obj = lv_event_get_target(e);
 8014a2e:	f7fc f975 	bl	8010d1c <lv_event_get_target>
 8014a32:	4604      	mov	r4, r0
    uint16_t btn_id   = lv_btnmatrix_get_selected_btn(obj);
 8014a34:	f7ee fdea 	bl	800360c <lv_btnmatrix_get_selected_btn>
    if(btn_id == LV_BTNMATRIX_BTN_NONE) return;
 8014a38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a3c:	4298      	cmp	r0, r3
 8014a3e:	d039      	beq.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
    const char * txt = lv_btnmatrix_get_btn_text(obj, lv_btnmatrix_get_selected_btn(obj));
 8014a40:	4620      	mov	r0, r4
 8014a42:	f7ee fde3 	bl	800360c <lv_btnmatrix_get_selected_btn>
 8014a46:	4601      	mov	r1, r0
 8014a48:	4620      	mov	r0, r4
 8014a4a:	f7ee fde1 	bl	8003610 <lv_btnmatrix_get_btn_text>
    if(txt == NULL) return;
 8014a4e:	4605      	mov	r5, r0
 8014a50:	b380      	cbz	r0, 8014ab4 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "abc") == 0) {
 8014a52:	496d      	ldr	r1, [pc, #436]	@ (8014c08 <lv_keyboard_def_event_cb+0x1dc>)
 8014a54:	f7eb fb98 	bl	8000188 <strcmp>
 8014a58:	b308      	cbz	r0, 8014a9e <lv_keyboard_def_event_cb+0x72>
    else if(strcmp(txt, "ABC") == 0) {
 8014a5a:	496c      	ldr	r1, [pc, #432]	@ (8014c0c <lv_keyboard_def_event_cb+0x1e0>)
 8014a5c:	4628      	mov	r0, r5
 8014a5e:	f7eb fb93 	bl	8000188 <strcmp>
 8014a62:	b340      	cbz	r0, 8014ab6 <lv_keyboard_def_event_cb+0x8a>
    else if(strcmp(txt, "1#") == 0) {
 8014a64:	496a      	ldr	r1, [pc, #424]	@ (8014c10 <lv_keyboard_def_event_cb+0x1e4>)
 8014a66:	4628      	mov	r0, r5
 8014a68:	f7eb fb8e 	bl	8000188 <strcmp>
 8014a6c:	b378      	cbz	r0, 8014ace <lv_keyboard_def_event_cb+0xa2>
    else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0 || strcmp(txt, LV_SYMBOL_KEYBOARD) == 0) {
 8014a6e:	4969      	ldr	r1, [pc, #420]	@ (8014c14 <lv_keyboard_def_event_cb+0x1e8>)
 8014a70:	4628      	mov	r0, r5
 8014a72:	f7eb fb89 	bl	8000188 <strcmp>
 8014a76:	b120      	cbz	r0, 8014a82 <lv_keyboard_def_event_cb+0x56>
 8014a78:	4967      	ldr	r1, [pc, #412]	@ (8014c18 <lv_keyboard_def_event_cb+0x1ec>)
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7eb fb84 	bl	8000188 <strcmp>
 8014a80:	bb88      	cbnz	r0, 8014ae6 <lv_keyboard_def_event_cb+0xba>
        lv_res_t res = lv_event_send(obj, LV_EVENT_CANCEL, NULL);
 8014a82:	2200      	movs	r2, #0
 8014a84:	2120      	movs	r1, #32
 8014a86:	4620      	mov	r0, r4
 8014a88:	f7fc f91e 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014a8c:	2801      	cmp	r0, #1
 8014a8e:	d111      	bne.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 8014a90:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014a92:	b178      	cbz	r0, 8014ab4 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_CANCEL, NULL);
 8014a94:	2200      	movs	r2, #0
 8014a96:	2120      	movs	r1, #32
 8014a98:	f7fc f916 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8014a9c:	e00a      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_LOWER;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_LOWER]);
 8014aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8014c1c <lv_keyboard_def_event_cb+0x1f0>)
 8014aa6:	6819      	ldr	r1, [r3, #0]
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	f7ee fbf5 	bl	8003298 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 8014aae:	4620      	mov	r0, r4
 8014ab0:	f7ff ff50 	bl	8014954 <lv_keyboard_update_ctrl_map>
}
 8014ab4:	bd70      	pop	{r4, r5, r6, pc}
        keyboard->mode = LV_KEYBOARD_MODE_TEXT_UPPER;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_TEXT_UPPER]);
 8014abc:	4b57      	ldr	r3, [pc, #348]	@ (8014c1c <lv_keyboard_def_event_cb+0x1f0>)
 8014abe:	6859      	ldr	r1, [r3, #4]
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f7ee fbe9 	bl	8003298 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	f7ff ff44 	bl	8014954 <lv_keyboard_update_ctrl_map>
        return;
 8014acc:	e7f2      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        keyboard->mode = LV_KEYBOARD_MODE_SPECIAL;
 8014ace:	2302      	movs	r3, #2
 8014ad0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        lv_btnmatrix_set_map(obj, kb_map[LV_KEYBOARD_MODE_SPECIAL]);
 8014ad4:	4b51      	ldr	r3, [pc, #324]	@ (8014c1c <lv_keyboard_def_event_cb+0x1f0>)
 8014ad6:	6899      	ldr	r1, [r3, #8]
 8014ad8:	4620      	mov	r0, r4
 8014ada:	f7ee fbdd 	bl	8003298 <lv_btnmatrix_set_map>
        lv_keyboard_update_ctrl_map(obj);
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f7ff ff38 	bl	8014954 <lv_keyboard_update_ctrl_map>
        return;
 8014ae4:	e7e6      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8014ae6:	494e      	ldr	r1, [pc, #312]	@ (8014c20 <lv_keyboard_def_event_cb+0x1f4>)
 8014ae8:	4628      	mov	r0, r5
 8014aea:	f7eb fb4d 	bl	8000188 <strcmp>
 8014aee:	b1d8      	cbz	r0, 8014b28 <lv_keyboard_def_event_cb+0xfc>
    if(keyboard->ta == NULL) return;
 8014af0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014af2:	2e00      	cmp	r6, #0
 8014af4:	d0de      	beq.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
    if(strcmp(txt, "Enter") == 0 || strcmp(txt, LV_SYMBOL_NEW_LINE) == 0) {
 8014af6:	494b      	ldr	r1, [pc, #300]	@ (8014c24 <lv_keyboard_def_event_cb+0x1f8>)
 8014af8:	4628      	mov	r0, r5
 8014afa:	f7eb fb45 	bl	8000188 <strcmp>
 8014afe:	b120      	cbz	r0, 8014b0a <lv_keyboard_def_event_cb+0xde>
 8014b00:	4949      	ldr	r1, [pc, #292]	@ (8014c28 <lv_keyboard_def_event_cb+0x1fc>)
 8014b02:	4628      	mov	r0, r5
 8014b04:	f7eb fb40 	bl	8000188 <strcmp>
 8014b08:	b9e8      	cbnz	r0, 8014b46 <lv_keyboard_def_event_cb+0x11a>
        lv_textarea_add_char(keyboard->ta, '\n');
 8014b0a:	210a      	movs	r1, #10
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f00e fcc3 	bl	8023498 <lv_textarea_add_char>
        if(lv_textarea_get_one_line(keyboard->ta)) {
 8014b12:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b14:	f00e fbff 	bl	8023316 <lv_textarea_get_one_line>
 8014b18:	2800      	cmp	r0, #0
 8014b1a:	d0cb      	beq.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
            lv_res_t res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	211f      	movs	r1, #31
 8014b20:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b22:	f7fc f8d1 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8014b26:	e7c5      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        lv_res_t res = lv_event_send(obj, LV_EVENT_READY, NULL);
 8014b28:	2200      	movs	r2, #0
 8014b2a:	211f      	movs	r1, #31
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	f7fc f8cb 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 8014b32:	2801      	cmp	r0, #1
 8014b34:	d1be      	bne.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        if(keyboard->ta) {
 8014b36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d0bb      	beq.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
            res = lv_event_send(keyboard->ta, LV_EVENT_READY, NULL);
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	211f      	movs	r1, #31
 8014b40:	f7fc f8c2 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8014b44:	e7b6      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0) {
 8014b46:	4939      	ldr	r1, [pc, #228]	@ (8014c2c <lv_keyboard_def_event_cb+0x200>)
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f7eb fb1d 	bl	8000188 <strcmp>
 8014b4e:	b348      	cbz	r0, 8014ba4 <lv_keyboard_def_event_cb+0x178>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0) {
 8014b50:	4937      	ldr	r1, [pc, #220]	@ (8014c30 <lv_keyboard_def_event_cb+0x204>)
 8014b52:	4628      	mov	r0, r5
 8014b54:	f7eb fb18 	bl	8000188 <strcmp>
 8014b58:	b340      	cbz	r0, 8014bac <lv_keyboard_def_event_cb+0x180>
    else if(strcmp(txt, LV_SYMBOL_BACKSPACE) == 0) {
 8014b5a:	4936      	ldr	r1, [pc, #216]	@ (8014c34 <lv_keyboard_def_event_cb+0x208>)
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f7eb fb13 	bl	8000188 <strcmp>
 8014b62:	b338      	cbz	r0, 8014bb4 <lv_keyboard_def_event_cb+0x188>
    else if(strcmp(txt, "+/-") == 0) {
 8014b64:	4934      	ldr	r1, [pc, #208]	@ (8014c38 <lv_keyboard_def_event_cb+0x20c>)
 8014b66:	4628      	mov	r0, r5
 8014b68:	f7eb fb0e 	bl	8000188 <strcmp>
 8014b6c:	2800      	cmp	r0, #0
 8014b6e:	d145      	bne.n	8014bfc <lv_keyboard_def_event_cb+0x1d0>
        uint16_t cur        = lv_textarea_get_cursor_pos(keyboard->ta);
 8014b70:	4630      	mov	r0, r6
 8014b72:	f00e f857 	bl	8022c24 <lv_textarea_get_cursor_pos>
 8014b76:	4605      	mov	r5, r0
        const char * ta_txt = lv_textarea_get_text(keyboard->ta);
 8014b78:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b7a:	f00e f819 	bl	8022bb0 <lv_textarea_get_text>
        if(ta_txt[0] == '-') {
 8014b7e:	7803      	ldrb	r3, [r0, #0]
 8014b80:	2b2d      	cmp	r3, #45	@ 0x2d
 8014b82:	d01b      	beq.n	8014bbc <lv_keyboard_def_event_cb+0x190>
        else if(ta_txt[0] == '+') {
 8014b84:	2b2b      	cmp	r3, #43	@ 0x2b
 8014b86:	d029      	beq.n	8014bdc <lv_keyboard_def_event_cb+0x1b0>
            lv_textarea_set_cursor_pos(keyboard->ta, 0);
 8014b88:	2100      	movs	r1, #0
 8014b8a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b8c:	f00e f998 	bl	8022ec0 <lv_textarea_set_cursor_pos>
            lv_textarea_add_char(keyboard->ta, '-');
 8014b90:	212d      	movs	r1, #45	@ 0x2d
 8014b92:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b94:	f00e fc80 	bl	8023498 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur + 1);
 8014b98:	b2a9      	uxth	r1, r5
 8014b9a:	3101      	adds	r1, #1
 8014b9c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014b9e:	f00e f98f 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8014ba2:	e787      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_left(keyboard->ta);
 8014ba4:	4630      	mov	r0, r6
 8014ba6:	f00e fdb8 	bl	802371a <lv_textarea_cursor_left>
 8014baa:	e783      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_cursor_right(keyboard->ta);
 8014bac:	4630      	mov	r0, r6
 8014bae:	f00e fdab 	bl	8023708 <lv_textarea_cursor_right>
 8014bb2:	e77f      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_del_char(keyboard->ta);
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f00e fcd9 	bl	802356c <lv_textarea_del_char>
 8014bba:	e77b      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8014bbc:	2101      	movs	r1, #1
 8014bbe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bc0:	f00e f97e 	bl	8022ec0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8014bc4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bc6:	f00e fcd1 	bl	802356c <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '+');
 8014bca:	212b      	movs	r1, #43	@ 0x2b
 8014bcc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bce:	f00e fc63 	bl	8023498 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 8014bd2:	b2a9      	uxth	r1, r5
 8014bd4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bd6:	f00e f973 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8014bda:	e76b      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
            lv_textarea_set_cursor_pos(keyboard->ta, 1);
 8014bdc:	2101      	movs	r1, #1
 8014bde:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014be0:	f00e f96e 	bl	8022ec0 <lv_textarea_set_cursor_pos>
            lv_textarea_del_char(keyboard->ta);
 8014be4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014be6:	f00e fcc1 	bl	802356c <lv_textarea_del_char>
            lv_textarea_add_char(keyboard->ta, '-');
 8014bea:	212d      	movs	r1, #45	@ 0x2d
 8014bec:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bee:	f00e fc53 	bl	8023498 <lv_textarea_add_char>
            lv_textarea_set_cursor_pos(keyboard->ta, cur);
 8014bf2:	b2a9      	uxth	r1, r5
 8014bf4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014bf6:	f00e f963 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8014bfa:	e75b      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
        lv_textarea_add_text(keyboard->ta, txt);
 8014bfc:	4629      	mov	r1, r5
 8014bfe:	4630      	mov	r0, r6
 8014c00:	f00e fbae 	bl	8023360 <lv_textarea_add_text>
 8014c04:	e756      	b.n	8014ab4 <lv_keyboard_def_event_cb+0x88>
 8014c06:	bf00      	nop
 8014c08:	08029cb8 	.word	0x08029cb8
 8014c0c:	08029cbc 	.word	0x08029cbc
 8014c10:	08029cc0 	.word	0x08029cc0
 8014c14:	08029cc4 	.word	0x08029cc4
 8014c18:	08029cc8 	.word	0x08029cc8
 8014c1c:	20000048 	.word	0x20000048
 8014c20:	08029ccc 	.word	0x08029ccc
 8014c24:	08029cd0 	.word	0x08029cd0
 8014c28:	08029cd8 	.word	0x08029cd8
 8014c2c:	08029974 	.word	0x08029974
 8014c30:	08029978 	.word	0x08029978
 8014c34:	08029cdc 	.word	0x08029cdc
 8014c38:	08029ce0 	.word	0x08029ce0

08014c3c <lv_label_get_dot_tmp>:
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * obj)
{
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc) {
 8014c3c:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014c40:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8014c44:	d001      	beq.n	8014c4a <lv_label_get_dot_tmp+0xe>
        return label->dot.tmp_ptr;
 8014c46:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8014c48:	4770      	bx	lr
    }
    else {
        return label->dot.tmp;
 8014c4a:	3028      	adds	r0, #40	@ 0x28
    }
}
 8014c4c:	4770      	bx	lr

08014c4e <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * obj)
{
 8014c4e:	b510      	push	{r4, lr}
 8014c50:	4604      	mov	r4, r0
    lv_label_t * label = (lv_label_t *)obj;
    if(label->dot_tmp_alloc && label->dot.tmp_ptr) {
 8014c52:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014c56:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8014c5a:	d003      	beq.n	8014c64 <lv_label_dot_tmp_free+0x16>
 8014c5c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8014c5e:	b108      	cbz	r0, 8014c64 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(label->dot.tmp_ptr);
 8014c60:	f001 fe78 	bl	8016954 <lv_mem_free>
    }
    label->dot_tmp_alloc = false;
 8014c64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014c6c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    label->dot.tmp_ptr   = NULL;
 8014c70:	2300      	movs	r3, #0
 8014c72:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8014c74:	bd10      	pop	{r4, pc}
	...

08014c78 <lv_label_revert_dots>:
    if(label->long_mode != LV_LABEL_LONG_DOT) return;
 8014c78:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8014c7c:	f003 0307 	and.w	r3, r3, #7
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d122      	bne.n	8014cca <lv_label_revert_dots+0x52>
{
 8014c84:	b570      	push	{r4, r5, r6, lr}
 8014c86:	4604      	mov	r4, r0
    if(label->dot_end == LV_LABEL_DOT_END_INV) return;
 8014c88:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014c8a:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 8014c8e:	d01b      	beq.n	8014cc8 <lv_label_revert_dots+0x50>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(label->text, letter_i);
 8014c90:	4b0e      	ldr	r3, [pc, #56]	@ (8014ccc <lv_label_revert_dots+0x54>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	3903      	subs	r1, #3
 8014c96:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014c98:	4798      	blx	r3
 8014c9a:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(obj);
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	f7ff ffcd 	bl	8014c3c <lv_label_get_dot_tmp>
    uint8_t i      = 0;
 8014ca2:	2300      	movs	r3, #0
    while(label->text[byte_i + i] != '\0') {
 8014ca4:	e003      	b.n	8014cae <lv_label_revert_dots+0x36>
        label->text[byte_i + i] = dot_tmp[i];
 8014ca6:	5cc5      	ldrb	r5, [r0, r3]
 8014ca8:	548d      	strb	r5, [r1, r2]
        i++;
 8014caa:	3301      	adds	r3, #1
 8014cac:	b2db      	uxtb	r3, r3
    while(label->text[byte_i + i] != '\0') {
 8014cae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014cb0:	199a      	adds	r2, r3, r6
 8014cb2:	5c8d      	ldrb	r5, [r1, r2]
 8014cb4:	2d00      	cmp	r5, #0
 8014cb6:	d1f6      	bne.n	8014ca6 <lv_label_revert_dots+0x2e>
    label->text[byte_i + i] = dot_tmp[i];
 8014cb8:	5cc3      	ldrb	r3, [r0, r3]
 8014cba:	548b      	strb	r3, [r1, r2]
    lv_label_dot_tmp_free(obj);
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	f7ff ffc6 	bl	8014c4e <lv_label_dot_tmp_free>
    label->dot_end = LV_LABEL_DOT_END_INV;
 8014cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014cc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8014cc8:	bd70      	pop	{r4, r5, r6, pc}
 8014cca:	4770      	bx	lr
 8014ccc:	2000007c 	.word	0x2000007c

08014cd0 <lv_label_destructor>:
{
 8014cd0:	b510      	push	{r4, lr}
 8014cd2:	460c      	mov	r4, r1
    lv_label_dot_tmp_free(obj);
 8014cd4:	4608      	mov	r0, r1
 8014cd6:	f7ff ffba 	bl	8014c4e <lv_label_dot_tmp_free>
    if(!label->static_txt) lv_mem_free(label->text);
 8014cda:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014cde:	f013 0f08 	tst.w	r3, #8
 8014ce2:	d002      	beq.n	8014cea <lv_label_destructor+0x1a>
    label->text = NULL;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8014ce8:	bd10      	pop	{r4, pc}
    if(!label->static_txt) lv_mem_free(label->text);
 8014cea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8014cec:	f001 fe32 	bl	8016954 <lv_mem_free>
 8014cf0:	e7f8      	b.n	8014ce4 <lv_label_destructor+0x14>

08014cf2 <set_ofs_y_anim>:
    label->offset.x    = v;
    lv_obj_invalidate(obj);
}

static void set_ofs_y_anim(void * obj, int32_t v)
{
 8014cf2:	b508      	push	{r3, lr}
    lv_label_t * label = (lv_label_t *)obj;
    label->offset.y    = v;
 8014cf4:	f8a0 1046 	strh.w	r1, [r0, #70]	@ 0x46
    lv_obj_invalidate(obj);
 8014cf8:	f005 f8d5 	bl	8019ea6 <lv_obj_invalidate>
}
 8014cfc:	bd08      	pop	{r3, pc}

08014cfe <set_ofs_x_anim>:
{
 8014cfe:	b508      	push	{r3, lr}
    label->offset.x    = v;
 8014d00:	f8a0 1044 	strh.w	r1, [r0, #68]	@ 0x44
    lv_obj_invalidate(obj);
 8014d04:	f005 f8cf 	bl	8019ea6 <lv_obj_invalidate>
}
 8014d08:	bd08      	pop	{r3, pc}

08014d0a <lv_label_set_dot_tmp>:
{
 8014d0a:	b570      	push	{r4, r5, r6, lr}
 8014d0c:	4604      	mov	r4, r0
 8014d0e:	460e      	mov	r6, r1
 8014d10:	4615      	mov	r5, r2
    lv_label_dot_tmp_free(obj); /*Deallocate any existing space*/
 8014d12:	f7ff ff9c 	bl	8014c4e <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8014d16:	2d04      	cmp	r5, #4
 8014d18:	d913      	bls.n	8014d42 <lv_label_set_dot_tmp+0x38>
        label->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8014d1a:	1c68      	adds	r0, r5, #1
 8014d1c:	f001 fdfc 	bl	8016918 <lv_mem_alloc>
 8014d20:	62a0      	str	r0, [r4, #40]	@ 0x28
        if(label->dot.tmp_ptr == NULL) {
 8014d22:	b1e0      	cbz	r0, 8014d5e <lv_label_set_dot_tmp+0x54>
        lv_memcpy(label->dot.tmp_ptr, data, len);
 8014d24:	462a      	mov	r2, r5
 8014d26:	4631      	mov	r1, r6
 8014d28:	f001 fede 	bl	8016ae8 <lv_memcpy>
        label->dot.tmp_ptr[len] = '\0';
 8014d2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8014d2e:	2200      	movs	r2, #0
 8014d30:	555a      	strb	r2, [r3, r5]
        label->dot_tmp_alloc    = true;
 8014d32:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d3a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    return true;
 8014d3e:	2001      	movs	r0, #1
 8014d40:	e00c      	b.n	8014d5c <lv_label_set_dot_tmp+0x52>
        label->dot_tmp_alloc = false;
 8014d42:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014d46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014d4a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
        lv_memcpy(label->dot.tmp, data, len);
 8014d4e:	462a      	mov	r2, r5
 8014d50:	4631      	mov	r1, r6
 8014d52:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014d56:	f001 fec7 	bl	8016ae8 <lv_memcpy>
    return true;
 8014d5a:	2001      	movs	r0, #1
}
 8014d5c:	bd70      	pop	{r4, r5, r6, pc}
            return false;
 8014d5e:	2000      	movs	r0, #0
 8014d60:	e7fc      	b.n	8014d5c <lv_label_set_dot_tmp+0x52>

08014d62 <lv_obj_get_style_text_color_filtered>:
{
 8014d62:	b538      	push	{r3, r4, r5, lr}
 8014d64:	4604      	mov	r4, r0
 8014d66:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8014d68:	2255      	movs	r2, #85	@ 0x55
 8014d6a:	f007 fcc3 	bl	801c6f4 <lv_obj_get_style_prop>
 8014d6e:	4602      	mov	r2, r0
 8014d70:	4629      	mov	r1, r5
 8014d72:	4620      	mov	r0, r4
 8014d74:	f007 fdd8 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8014d78:	bd38      	pop	{r3, r4, r5, pc}
	...

08014d7c <lv_label_create>:
{
 8014d7c:	b510      	push	{r4, lr}
 8014d7e:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 8014d80:	4803      	ldr	r0, [pc, #12]	@ (8014d90 <lv_label_create+0x14>)
 8014d82:	f003 fe4f 	bl	8018a24 <lv_obj_class_create_obj>
 8014d86:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8014d88:	f003 feeb 	bl	8018b62 <lv_obj_class_init_obj>
}
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	bd10      	pop	{r4, pc}
 8014d90:	0802dbb0 	.word	0x0802dbb0

08014d94 <lv_label_set_text_sel_start>:
{
 8014d94:	b508      	push	{r3, lr}
    label->sel_start   = index;
 8014d96:	63c1      	str	r1, [r0, #60]	@ 0x3c
    lv_obj_invalidate(obj);
 8014d98:	f005 f885 	bl	8019ea6 <lv_obj_invalidate>
}
 8014d9c:	bd08      	pop	{r3, pc}

08014d9e <lv_label_set_text_sel_end>:
{
 8014d9e:	b508      	push	{r3, lr}
    label->sel_end     = index;
 8014da0:	6401      	str	r1, [r0, #64]	@ 0x40
    lv_obj_invalidate(obj);
 8014da2:	f005 f880 	bl	8019ea6 <lv_obj_invalidate>
}
 8014da6:	bd08      	pop	{r3, pc}

08014da8 <lv_label_get_text>:
}
 8014da8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8014daa:	4770      	bx	lr

08014dac <lv_label_get_recolor>:
    return label->recolor == 0 ? false : true;
 8014dac:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
}
 8014db0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8014db4:	4770      	bx	lr
	...

08014db8 <lv_label_get_letter_pos>:
{
 8014db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dbc:	b08d      	sub	sp, #52	@ 0x34
 8014dbe:	9106      	str	r1, [sp, #24]
    LV_ASSERT_NULL(pos);
 8014dc0:	9205      	str	r2, [sp, #20]
 8014dc2:	b1ba      	cbz	r2, 8014df4 <lv_label_get_letter_pos+0x3c>
 8014dc4:	4604      	mov	r4, r0
    const char * txt         = lv_label_get_text(obj);
 8014dc6:	f7ff ffef 	bl	8014da8 <lv_label_get_text>
 8014dca:	4606      	mov	r6, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, txt);
 8014dcc:	4602      	mov	r2, r0
 8014dce:	2100      	movs	r1, #0
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f008 f90f 	bl	801cff4 <lv_obj_calculate_style_text_align>
 8014dd6:	9007      	str	r0, [sp, #28]
    if(txt[0] == '\0') {
 8014dd8:	7833      	ldrb	r3, [r6, #0]
 8014dda:	b9db      	cbnz	r3, 8014e14 <lv_label_get_letter_pos+0x5c>
        pos->y = 0;
 8014ddc:	9a05      	ldr	r2, [sp, #20]
 8014dde:	8053      	strh	r3, [r2, #2]
        switch(align) {
 8014de0:	2802      	cmp	r0, #2
 8014de2:	d00e      	beq.n	8014e02 <lv_label_get_letter_pos+0x4a>
 8014de4:	2803      	cmp	r0, #3
 8014de6:	d006      	beq.n	8014df6 <lv_label_get_letter_pos+0x3e>
 8014de8:	2801      	cmp	r0, #1
 8014dea:	f040 80a4 	bne.w	8014f36 <lv_label_get_letter_pos+0x17e>
                pos->x = 0;
 8014dee:	2300      	movs	r3, #0
 8014df0:	8013      	strh	r3, [r2, #0]
                break;
 8014df2:	e0a0      	b.n	8014f36 <lv_label_get_letter_pos+0x17e>
    LV_ASSERT_NULL(pos);
 8014df4:	e7fe      	b.n	8014df4 <lv_label_get_letter_pos+0x3c>
                pos->x = lv_obj_get_content_width(obj);
 8014df6:	4620      	mov	r0, r4
 8014df8:	f004 fc84 	bl	8019704 <lv_obj_get_content_width>
 8014dfc:	9b05      	ldr	r3, [sp, #20]
 8014dfe:	8018      	strh	r0, [r3, #0]
                break;
 8014e00:	e099      	b.n	8014f36 <lv_label_get_letter_pos+0x17e>
                pos->x = lv_obj_get_content_width(obj) / 2;
 8014e02:	4620      	mov	r0, r4
 8014e04:	f004 fc7e 	bl	8019704 <lv_obj_get_content_width>
 8014e08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014e0c:	1043      	asrs	r3, r0, #1
 8014e0e:	9a05      	ldr	r2, [sp, #20]
 8014e10:	8013      	strh	r3, [r2, #0]
                break;
 8014e12:	e090      	b.n	8014f36 <lv_label_get_letter_pos+0x17e>
    lv_obj_get_content_coords(obj, &txt_coords);
 8014e14:	a90a      	add	r1, sp, #40	@ 0x28
 8014e16:	4620      	mov	r0, r4
 8014e18:	f004 fcb4 	bl	8019784 <lv_obj_get_content_coords>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8014e1c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	@ 0x2c
 8014e20:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8014e24:	eba8 0803 	sub.w	r8, r8, r3
 8014e28:	fa1f f888 	uxth.w	r8, r8
 8014e2c:	f108 0801 	add.w	r8, r8, #1
 8014e30:	fa0f f388 	sxth.w	r3, r8
 8014e34:	9304      	str	r3, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8014e36:	2257      	movs	r2, #87	@ 0x57
 8014e38:	2100      	movs	r1, #0
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	f007 fc5a 	bl	801c6f4 <lv_obj_get_style_prop>
 8014e40:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8014e42:	2259      	movs	r2, #89	@ 0x59
 8014e44:	2100      	movs	r1, #0
 8014e46:	4620      	mov	r0, r4
 8014e48:	f007 fc54 	bl	801c6f4 <lv_obj_get_style_prop>
 8014e4c:	9008      	str	r0, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8014e4e:	2258      	movs	r2, #88	@ 0x58
 8014e50:	2100      	movs	r1, #0
 8014e52:	4620      	mov	r0, r4
 8014e54:	f007 fc4e 	bl	801c6f4 <lv_obj_get_style_prop>
 8014e58:	9009      	str	r0, [sp, #36]	@ 0x24
    return (lv_coord_t)v.num;
 8014e5a:	b203      	sxth	r3, r0
 8014e5c:	9303      	str	r3, [sp, #12]
 8014e5e:	f9b9 b008 	ldrsh.w	fp, [r9, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8014e62:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014e66:	f013 0a10 	ands.w	sl, r3, #16
 8014e6a:	d001      	beq.n	8014e70 <lv_label_get_letter_pos+0xb8>
 8014e6c:	f04f 0a01 	mov.w	sl, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8014e70:	f013 0f20 	tst.w	r3, #32
 8014e74:	d001      	beq.n	8014e7a <lv_label_get_letter_pos+0xc2>
 8014e76:	f04a 0a02 	orr.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	4620      	mov	r0, r4
 8014e80:	f007 fc38 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8014e84:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8014e86:	f242 72d1 	movw	r2, #10193	@ 0x27d1
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d022      	beq.n	8014ed4 <lv_label_get_letter_pos+0x11c>
    uint32_t byte_id = _lv_txt_encoded_get_byte_id(txt, char_id);
 8014e8e:	4b4d      	ldr	r3, [pc, #308]	@ (8014fc4 <lv_label_get_letter_pos+0x20c>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	9906      	ldr	r1, [sp, #24]
 8014e94:	4630      	mov	r0, r6
 8014e96:	4798      	blx	r3
 8014e98:	4680      	mov	r8, r0
    lv_coord_t y             = 0;
 8014e9a:	2400      	movs	r4, #0
    uint32_t line_start      = 0;
 8014e9c:	4627      	mov	r7, r4
 8014e9e:	4655      	mov	r5, sl
 8014ea0:	f8dd a020 	ldr.w	sl, [sp, #32]
    while(txt[new_line_start] != '\0') {
 8014ea4:	19f0      	adds	r0, r6, r7
 8014ea6:	5df3      	ldrb	r3, [r6, r7]
 8014ea8:	b1e3      	cbz	r3, 8014ee4 <lv_label_get_letter_pos+0x12c>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8014eaa:	9501      	str	r5, [sp, #4]
 8014eac:	2300      	movs	r3, #0
 8014eae:	9300      	str	r3, [sp, #0]
 8014eb0:	9b04      	ldr	r3, [sp, #16]
 8014eb2:	9a03      	ldr	r2, [sp, #12]
 8014eb4:	4649      	mov	r1, r9
 8014eb6:	f012 fbd3 	bl	8027660 <_lv_txt_get_next_line>
 8014eba:	4438      	add	r0, r7
        if(byte_id < new_line_start || txt[new_line_start] == '\0')
 8014ebc:	4580      	cmp	r8, r0
 8014ebe:	d33d      	bcc.n	8014f3c <lv_label_get_letter_pos+0x184>
 8014ec0:	5c33      	ldrb	r3, [r6, r0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d03d      	beq.n	8014f42 <lv_label_get_letter_pos+0x18a>
        y += letter_height + line_space;
 8014ec6:	eb0b 030a 	add.w	r3, fp, sl
 8014eca:	fa14 f383 	uxtah	r3, r4, r3
 8014ece:	b21c      	sxth	r4, r3
        line_start = new_line_start;
 8014ed0:	4607      	mov	r7, r0
 8014ed2:	e7e7      	b.n	8014ea4 <lv_label_get_letter_pos+0xec>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8014ed4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8014ed8:	f013 0f08 	tst.w	r3, #8
 8014edc:	d1d7      	bne.n	8014e8e <lv_label_get_letter_pos+0xd6>
 8014ede:	f04a 0a04 	orr.w	sl, sl, #4
 8014ee2:	e7d4      	b.n	8014e8e <lv_label_get_letter_pos+0xd6>
 8014ee4:	46aa      	mov	sl, r5
 8014ee6:	463d      	mov	r5, r7
    if(byte_id > 0) {
 8014ee8:	f1b8 0f00 	cmp.w	r8, #0
 8014eec:	d007      	beq.n	8014efe <lv_label_get_letter_pos+0x146>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 8014eee:	eb06 0308 	add.w	r3, r6, r8
 8014ef2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014ef6:	2b0a      	cmp	r3, #10
 8014ef8:	d026      	beq.n	8014f48 <lv_label_get_letter_pos+0x190>
 8014efa:	2b0d      	cmp	r3, #13
 8014efc:	d024      	beq.n	8014f48 <lv_label_get_letter_pos+0x190>
    bidi_txt = &txt[line_start];
 8014efe:	443e      	add	r6, r7
    lv_coord_t x = lv_txt_get_width(bidi_txt, visual_byte_pos, font, letter_space, flag);
 8014f00:	f8cd a000 	str.w	sl, [sp]
 8014f04:	9b03      	ldr	r3, [sp, #12]
 8014f06:	464a      	mov	r2, r9
 8014f08:	eba8 0107 	sub.w	r1, r8, r7
 8014f0c:	4630      	mov	r0, r6
 8014f0e:	f012 fcad 	bl	802786c <lv_txt_get_width>
 8014f12:	4680      	mov	r8, r0
    if(char_id != line_start) x += letter_space;
 8014f14:	9b06      	ldr	r3, [sp, #24]
 8014f16:	429f      	cmp	r7, r3
 8014f18:	d003      	beq.n	8014f22 <lv_label_get_letter_pos+0x16a>
 8014f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f1c:	4403      	add	r3, r0
 8014f1e:	fa0f f883 	sxth.w	r8, r3
    if(align == LV_TEXT_ALIGN_CENTER) {
 8014f22:	9b07      	ldr	r3, [sp, #28]
 8014f24:	2b02      	cmp	r3, #2
 8014f26:	d01a      	beq.n	8014f5e <lv_label_get_letter_pos+0x1a6>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 8014f28:	9b07      	ldr	r3, [sp, #28]
 8014f2a:	2b03      	cmp	r3, #3
 8014f2c:	d034      	beq.n	8014f98 <lv_label_get_letter_pos+0x1e0>
    pos->x = x;
 8014f2e:	9b05      	ldr	r3, [sp, #20]
 8014f30:	f8a3 8000 	strh.w	r8, [r3]
    pos->y = y;
 8014f34:	805c      	strh	r4, [r3, #2]
}
 8014f36:	b00d      	add	sp, #52	@ 0x34
 8014f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f3c:	46aa      	mov	sl, r5
 8014f3e:	4605      	mov	r5, r0
 8014f40:	e7d2      	b.n	8014ee8 <lv_label_get_letter_pos+0x130>
 8014f42:	46aa      	mov	sl, r5
 8014f44:	4605      	mov	r5, r0
 8014f46:	e7cf      	b.n	8014ee8 <lv_label_get_letter_pos+0x130>
        if((txt[byte_id - 1] == '\n' || txt[byte_id - 1] == '\r') && txt[byte_id] == '\0') {
 8014f48:	f816 3008 	ldrb.w	r3, [r6, r8]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d1d6      	bne.n	8014efe <lv_label_get_letter_pos+0x146>
            y += letter_height + line_space;
 8014f50:	9b08      	ldr	r3, [sp, #32]
 8014f52:	445b      	add	r3, fp
 8014f54:	fa14 f383 	uxtah	r3, r4, r3
 8014f58:	b21c      	sxth	r4, r3
            line_start = byte_id;
 8014f5a:	4647      	mov	r7, r8
 8014f5c:	e7cf      	b.n	8014efe <lv_label_get_letter_pos+0x146>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8014f5e:	f8cd a000 	str.w	sl, [sp]
 8014f62:	9b03      	ldr	r3, [sp, #12]
 8014f64:	464a      	mov	r2, r9
 8014f66:	1be9      	subs	r1, r5, r7
 8014f68:	4630      	mov	r0, r6
 8014f6a:	f012 fc7f 	bl	802786c <lv_txt_get_width>
 8014f6e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014f72:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8014f76:	1a9b      	subs	r3, r3, r2
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	3301      	adds	r3, #1
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8014f7c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8014f80:	fa02 f283 	sxtah	r2, r2, r3
 8014f84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8014f88:	f340 034f 	sbfx	r3, r0, #1, #16
 8014f8c:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8014f90:	4443      	add	r3, r8
 8014f92:	fa0f f883 	sxth.w	r8, r3
 8014f96:	e7ca      	b.n	8014f2e <lv_label_get_letter_pos+0x176>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8014f98:	f8cd a000 	str.w	sl, [sp]
 8014f9c:	9b03      	ldr	r3, [sp, #12]
 8014f9e:	464a      	mov	r2, r9
 8014fa0:	1be9      	subs	r1, r5, r7
 8014fa2:	4630      	mov	r0, r6
 8014fa4:	f012 fc62 	bl	802786c <lv_txt_get_width>
 8014fa8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014fac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8014fb0:	1a9b      	subs	r3, r3, r2
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 8014fb8:	1a1b      	subs	r3, r3, r0
 8014fba:	4443      	add	r3, r8
 8014fbc:	fa0f f883 	sxth.w	r8, r3
 8014fc0:	e7b5      	b.n	8014f2e <lv_label_get_letter_pos+0x176>
 8014fc2:	bf00      	nop
 8014fc4:	2000007c 	.word	0x2000007c

08014fc8 <lv_label_get_letter_on>:
    LV_ASSERT_NULL(pos_in);
 8014fc8:	2900      	cmp	r1, #0
 8014fca:	d07a      	beq.n	80150c2 <lv_label_get_letter_on+0xfa>
{
 8014fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fd0:	b091      	sub	sp, #68	@ 0x44
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	460e      	mov	r6, r1
    pos.x = pos_in->x - lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 8014fd6:	880d      	ldrh	r5, [r1, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8014fd8:	2212      	movs	r2, #18
 8014fda:	2100      	movs	r1, #0
 8014fdc:	f007 fb8a 	bl	801c6f4 <lv_obj_get_style_prop>
 8014fe0:	b283      	uxth	r3, r0
 8014fe2:	1aed      	subs	r5, r5, r3
 8014fe4:	b22b      	sxth	r3, r5
 8014fe6:	9305      	str	r3, [sp, #20]
 8014fe8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    pos.y = pos_in->y - lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8014fec:	8875      	ldrh	r5, [r6, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8014fee:	2210      	movs	r2, #16
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f007 fb7e 	bl	801c6f4 <lv_obj_get_style_prop>
 8014ff8:	b283      	uxth	r3, r0
 8014ffa:	1aed      	subs	r5, r5, r3
 8014ffc:	b22b      	sxth	r3, r5
 8014ffe:	461e      	mov	r6, r3
 8015000:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    lv_obj_get_content_coords(obj, &txt_coords);
 8015004:	a90d      	add	r1, sp, #52	@ 0x34
 8015006:	4620      	mov	r0, r4
 8015008:	f004 fbbc 	bl	8019784 <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff fecb 	bl	8014da8 <lv_label_get_text>
 8015012:	4607      	mov	r7, r0
 8015014:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015018:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801501c:	1a9b      	subs	r3, r3, r2
 801501e:	b29b      	uxth	r3, r3
 8015020:	3301      	adds	r3, #1
 8015022:	b21b      	sxth	r3, r3
 8015024:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015026:	2257      	movs	r2, #87	@ 0x57
 8015028:	2100      	movs	r1, #0
 801502a:	4620      	mov	r0, r4
 801502c:	f007 fb62 	bl	801c6f4 <lv_obj_get_style_prop>
 8015030:	4682      	mov	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015032:	2259      	movs	r2, #89	@ 0x59
 8015034:	2100      	movs	r1, #0
 8015036:	4620      	mov	r0, r4
 8015038:	f007 fb5c 	bl	801c6f4 <lv_obj_get_style_prop>
 801503c:	9004      	str	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801503e:	2258      	movs	r2, #88	@ 0x58
 8015040:	2100      	movs	r1, #0
 8015042:	4620      	mov	r0, r4
 8015044:	f007 fb56 	bl	801c6f4 <lv_obj_get_style_prop>
 8015048:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 801504a:	b203      	sxth	r3, r0
 801504c:	9302      	str	r3, [sp, #8]
 801504e:	f9ba 9008 	ldrsh.w	r9, [sl, #8]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015052:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015056:	f013 0b10 	ands.w	fp, r3, #16
 801505a:	d001      	beq.n	8015060 <lv_label_get_letter_on+0x98>
 801505c:	f04f 0b01 	mov.w	fp, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015060:	f013 0f20 	tst.w	r3, #32
 8015064:	d001      	beq.n	801506a <lv_label_get_letter_on+0xa2>
 8015066:	f04b 0b02 	orr.w	fp, fp, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801506a:	2201      	movs	r2, #1
 801506c:	2100      	movs	r1, #0
 801506e:	4620      	mov	r0, r4
 8015070:	f007 fb40 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015074:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015076:	f242 72d1 	movw	r2, #10193	@ 0x27d1
 801507a:	4293      	cmp	r3, r2
 801507c:	d022      	beq.n	80150c4 <lv_label_get_letter_on+0xfc>
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801507e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015080:	2100      	movs	r1, #0
 8015082:	4620      	mov	r0, r4
 8015084:	f007 ffb6 	bl	801cff4 <lv_obj_calculate_style_text_align>
 8015088:	9007      	str	r0, [sp, #28]
    lv_coord_t y             = 0;
 801508a:	2400      	movs	r4, #0
    uint32_t line_start      = 0;
 801508c:	4625      	mov	r5, r4
    while(txt[line_start] != '\0') {
 801508e:	eb07 0805 	add.w	r8, r7, r5
 8015092:	5d7b      	ldrb	r3, [r7, r5]
 8015094:	b35b      	cbz	r3, 80150ee <lv_label_get_letter_on+0x126>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8015096:	f8cd b004 	str.w	fp, [sp, #4]
 801509a:	2300      	movs	r3, #0
 801509c:	9300      	str	r3, [sp, #0]
 801509e:	9b03      	ldr	r3, [sp, #12]
 80150a0:	9a02      	ldr	r2, [sp, #8]
 80150a2:	4651      	mov	r1, sl
 80150a4:	4640      	mov	r0, r8
 80150a6:	f012 fadb 	bl	8027660 <_lv_txt_get_next_line>
 80150aa:	4428      	add	r0, r5
        if(pos.y <= y + letter_height) {
 80150ac:	eb04 0309 	add.w	r3, r4, r9
 80150b0:	429e      	cmp	r6, r3
 80150b2:	dd0f      	ble.n	80150d4 <lv_label_get_letter_on+0x10c>
        y += letter_height + line_space;
 80150b4:	9b04      	ldr	r3, [sp, #16]
 80150b6:	444b      	add	r3, r9
 80150b8:	fa14 f383 	uxtah	r3, r4, r3
 80150bc:	b21c      	sxth	r4, r3
        line_start = new_line_start;
 80150be:	4605      	mov	r5, r0
 80150c0:	e7e5      	b.n	801508e <lv_label_get_letter_on+0xc6>
    LV_ASSERT_NULL(pos_in);
 80150c2:	e7fe      	b.n	80150c2 <lv_label_get_letter_on+0xfa>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80150c4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80150c8:	f013 0f08 	tst.w	r3, #8
 80150cc:	d1d7      	bne.n	801507e <lv_label_get_letter_on+0xb6>
 80150ce:	f04b 0b04 	orr.w	fp, fp, #4
 80150d2:	e7d4      	b.n	801507e <lv_label_get_letter_on+0xb6>
            uint32_t tmp = new_line_start;
 80150d4:	4606      	mov	r6, r0
 80150d6:	900a      	str	r0, [sp, #40]	@ 0x28
            letter = _lv_txt_encoded_prev(txt, &tmp);
 80150d8:	4b44      	ldr	r3, [pc, #272]	@ (80151ec <lv_label_get_letter_on+0x224>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	a90a      	add	r1, sp, #40	@ 0x28
 80150de:	4638      	mov	r0, r7
 80150e0:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
 80150e2:	280a      	cmp	r0, #10
 80150e4:	d004      	beq.n	80150f0 <lv_label_get_letter_on+0x128>
 80150e6:	5dbb      	ldrb	r3, [r7, r6]
 80150e8:	b913      	cbnz	r3, 80150f0 <lv_label_get_letter_on+0x128>
 80150ea:	3601      	adds	r6, #1
            break;
 80150ec:	e000      	b.n	80150f0 <lv_label_get_letter_on+0x128>
 80150ee:	462e      	mov	r6, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 80150f0:	9b07      	ldr	r3, [sp, #28]
 80150f2:	2b02      	cmp	r3, #2
 80150f4:	d017      	beq.n	8015126 <lv_label_get_letter_on+0x15e>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80150f6:	9b07      	ldr	r3, [sp, #28]
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	d02f      	beq.n	801515c <lv_label_get_letter_on+0x194>
    lv_coord_t x = 0;
 80150fc:	2400      	movs	r4, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80150fe:	2300      	movs	r3, #0
 8015100:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
    uint32_t i = 0;
 8015104:	930b      	str	r3, [sp, #44]	@ 0x2c
    if(new_line_start > 0) {
 8015106:	2e00      	cmp	r6, #0
 8015108:	d16d      	bne.n	80151e6 <lv_label_get_letter_on+0x21e>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
 801510a:	4e39      	ldr	r6, [pc, #228]	@ (80151f0 <lv_label_get_letter_on+0x228>)
 801510c:	6833      	ldr	r3, [r6, #0]
 801510e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015110:	4640      	mov	r0, r8
 8015112:	4798      	blx	r3
 8015114:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
 8015116:	6833      	ldr	r3, [r6, #0]
 8015118:	4629      	mov	r1, r5
 801511a:	4638      	mov	r0, r7
 801511c:	4798      	blx	r3
}
 801511e:	4420      	add	r0, r4
 8015120:	b011      	add	sp, #68	@ 0x44
 8015122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 8015126:	f8cd b000 	str.w	fp, [sp]
 801512a:	9b02      	ldr	r3, [sp, #8]
 801512c:	4652      	mov	r2, sl
 801512e:	1b71      	subs	r1, r6, r5
 8015130:	4640      	mov	r0, r8
 8015132:	f012 fb9b 	bl	802786c <lv_txt_get_width>
 8015136:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801513a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801513e:	1a9b      	subs	r3, r3, r2
 8015140:	b29b      	uxth	r3, r3
 8015142:	3301      	adds	r3, #1
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8015144:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8015148:	fa02 f383 	sxtah	r3, r2, r3
 801514c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015150:	f340 044f 	sbfx	r4, r0, #1, #16
 8015154:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 8015158:	b224      	sxth	r4, r4
 801515a:	e7d0      	b.n	80150fe <lv_label_get_letter_on+0x136>
        line_w = lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
 801515c:	f8cd b000 	str.w	fp, [sp]
 8015160:	9b02      	ldr	r3, [sp, #8]
 8015162:	4652      	mov	r2, sl
 8015164:	1b71      	subs	r1, r6, r5
 8015166:	4640      	mov	r0, r8
 8015168:	f012 fb80 	bl	802786c <lv_txt_get_width>
 801516c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015170:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8015174:	1a9b      	subs	r3, r3, r2
 8015176:	b29b      	uxth	r3, r3
 8015178:	3301      	adds	r3, #1
 801517a:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 801517c:	1a1b      	subs	r3, r3, r0
 801517e:	b21c      	sxth	r4, r3
 8015180:	e7bd      	b.n	80150fe <lv_label_get_letter_on+0x136>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
 8015182:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015184:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015186:	4650      	mov	r0, sl
 8015188:	f7fc fd28 	bl	8011bdc <lv_font_get_glyph_width>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
 801518c:	fa04 f380 	sxtah	r3, r4, r0
 8015190:	9a05      	ldr	r2, [sp, #20]
 8015192:	429a      	cmp	r2, r3
 8015194:	db24      	blt.n	80151e0 <lv_label_get_letter_on+0x218>
 8015196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015198:	195a      	adds	r2, r3, r5
 801519a:	42b2      	cmp	r2, r6
 801519c:	d020      	beq.n	80151e0 <lv_label_get_letter_on+0x218>
 801519e:	eb05 0209 	add.w	r2, r5, r9
 80151a2:	5cba      	ldrb	r2, [r7, r2]
 80151a4:	b1e2      	cbz	r2, 80151e0 <lv_label_get_letter_on+0x218>
            x += gw;
 80151a6:	4420      	add	r0, r4
            x += letter_space;
 80151a8:	9a06      	ldr	r2, [sp, #24]
 80151aa:	fa12 f080 	uxtah	r0, r2, r0
 80151ae:	b204      	sxth	r4, r0
            i_act = i;
 80151b0:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
 80151b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80151b4:	442b      	add	r3, r5
 80151b6:	42b3      	cmp	r3, r6
 80151b8:	d2a7      	bcs.n	801510a <lv_label_get_letter_on+0x142>
            _lv_txt_encoded_letter_next_2(bidi_txt, &letter, &letter_next, &i);
 80151ba:	ab0b      	add	r3, sp, #44	@ 0x2c
 80151bc:	aa0a      	add	r2, sp, #40	@ 0x28
 80151be:	a909      	add	r1, sp, #36	@ 0x24
 80151c0:	4640      	mov	r0, r8
 80151c2:	f012 fb3d 	bl	8027840 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80151c6:	f01b 0f01 	tst.w	fp, #1
 80151ca:	d0da      	beq.n	8015182 <lv_label_get_letter_on+0x1ba>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
 80151cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80151ce:	f818 1003 	ldrb.w	r1, [r8, r3]
 80151d2:	f10d 0033 	add.w	r0, sp, #51	@ 0x33
 80151d6:	f012 f967 	bl	80274a8 <_lv_txt_is_cmd>
 80151da:	2800      	cmp	r0, #0
 80151dc:	d0d1      	beq.n	8015182 <lv_label_get_letter_on+0x1ba>
 80151de:	e7e8      	b.n	80151b2 <lv_label_get_letter_on+0x1ea>
                i = i_act;
 80151e0:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
                break;
 80151e4:	e791      	b.n	801510a <lv_label_get_letter_on+0x142>
    uint32_t i_act = i;
 80151e6:	f04f 0900 	mov.w	r9, #0
 80151ea:	e7e2      	b.n	80151b2 <lv_label_get_letter_on+0x1ea>
 80151ec:	20000080 	.word	0x20000080
 80151f0:	20000078 	.word	0x20000078

080151f4 <lv_label_refr_text>:
    if(label->text == NULL) return;
 80151f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	f000 826d 	beq.w	80156d6 <lv_label_refr_text+0x4e2>
{
 80151fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015200:	b09a      	sub	sp, #104	@ 0x68
 8015202:	4604      	mov	r4, r0
    label->hint.line_start = -1; /*The hint is invalid if the text changes*/
 8015204:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015208:	6303      	str	r3, [r0, #48]	@ 0x30
    lv_obj_get_content_coords(obj, &txt_coords);
 801520a:	a918      	add	r1, sp, #96	@ 0x60
 801520c:	f004 faba 	bl	8019784 <lv_obj_get_content_coords>
 8015210:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8015214:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8015218:	1aed      	subs	r5, r5, r3
 801521a:	b2ad      	uxth	r5, r5
 801521c:	3501      	adds	r5, #1
 801521e:	b22d      	sxth	r5, r5
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015220:	2257      	movs	r2, #87	@ 0x57
 8015222:	2100      	movs	r1, #0
 8015224:	4620      	mov	r0, r4
 8015226:	f007 fa65 	bl	801c6f4 <lv_obj_get_style_prop>
 801522a:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801522c:	2259      	movs	r2, #89	@ 0x59
 801522e:	2100      	movs	r1, #0
 8015230:	4620      	mov	r0, r4
 8015232:	f007 fa5f 	bl	801c6f4 <lv_obj_get_style_prop>
 8015236:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 8015238:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801523c:	2258      	movs	r2, #88	@ 0x58
 801523e:	2100      	movs	r1, #0
 8015240:	4620      	mov	r0, r4
 8015242:	f007 fa57 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015246:	b207      	sxth	r7, r0
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015248:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801524c:	f013 0a10 	ands.w	sl, r3, #16
 8015250:	d001      	beq.n	8015256 <lv_label_refr_text+0x62>
 8015252:	f04f 0a01 	mov.w	sl, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015256:	f013 0f20 	tst.w	r3, #32
 801525a:	d001      	beq.n	8015260 <lv_label_refr_text+0x6c>
 801525c:	f04a 0a02 	orr.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015260:	2201      	movs	r2, #1
 8015262:	2100      	movs	r1, #0
 8015264:	4620      	mov	r0, r4
 8015266:	f007 fa45 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801526a:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801526c:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8015270:	4298      	cmp	r0, r3
 8015272:	d01f      	beq.n	80152b4 <lv_label_refr_text+0xc0>
    lv_txt_get_size(&size, label->text, font, letter_space, line_space, max_w, flag);
 8015274:	f8cd a008 	str.w	sl, [sp, #8]
 8015278:	9501      	str	r5, [sp, #4]
 801527a:	f8cd 9000 	str.w	r9, [sp]
 801527e:	463b      	mov	r3, r7
 8015280:	4632      	mov	r2, r6
 8015282:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015284:	a817      	add	r0, sp, #92	@ 0x5c
 8015286:	f012 fb40 	bl	802790a <lv_txt_get_size>
    lv_obj_refresh_self_size(obj);
 801528a:	4620      	mov	r0, r4
 801528c:	f004 fc5c 	bl	8019b48 <lv_obj_refresh_self_size>
    if(label->long_mode == LV_LABEL_LONG_SCROLL) {
 8015290:	f894 1048 	ldrb.w	r1, [r4, #72]	@ 0x48
 8015294:	f001 0107 	and.w	r1, r1, #7
 8015298:	2902      	cmp	r1, #2
 801529a:	d013      	beq.n	80152c4 <lv_label_refr_text+0xd0>
    else if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 801529c:	2903      	cmp	r1, #3
 801529e:	f000 80c2 	beq.w	8015426 <lv_label_refr_text+0x232>
    else if(label->long_mode == LV_LABEL_LONG_DOT) {
 80152a2:	2901      	cmp	r1, #1
 80152a4:	f000 8166 	beq.w	8015574 <lv_label_refr_text+0x380>
    lv_obj_invalidate(obj);
 80152a8:	4620      	mov	r0, r4
 80152aa:	f004 fdfc 	bl	8019ea6 <lv_obj_invalidate>
}
 80152ae:	b01a      	add	sp, #104	@ 0x68
 80152b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80152b4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80152b8:	f013 0f08 	tst.w	r3, #8
 80152bc:	d1da      	bne.n	8015274 <lv_label_refr_text+0x80>
 80152be:	f04a 0a04 	orr.w	sl, sl, #4
 80152c2:	e7d7      	b.n	8015274 <lv_label_refr_text+0x80>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 80152c4:	2266      	movs	r2, #102	@ 0x66
 80152c6:	2100      	movs	r1, #0
 80152c8:	4620      	mov	r0, r4
 80152ca:	f007 fa13 	bl	801c6f4 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 80152ce:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80152d0:	2d00      	cmp	r5, #0
 80152d2:	d05c      	beq.n	801538e <lv_label_refr_text+0x19a>
        lv_anim_init(&a);
 80152d4:	a806      	add	r0, sp, #24
 80152d6:	f7eb fa3d 	bl	8000754 <lv_anim_init>
    a->var = var;
 80152da:	9406      	str	r4, [sp, #24]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 80152dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80152e0:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
    a->playback_delay = delay;
 80152e4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80152e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param delay     delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
{
    a->repeat_delay = delay;
 80152ea:	9315      	str	r3, [sp, #84]	@ 0x54
        if(size.x > lv_area_get_width(&txt_coords)) {
 80152ec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 80152f0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80152f4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80152f8:	1a5b      	subs	r3, r3, r1
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	3301      	adds	r3, #1
 80152fe:	b21b      	sxth	r3, r3
 8015300:	429a      	cmp	r2, r3
 8015302:	dd54      	ble.n	80153ae <lv_label_refr_text+0x1ba>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
 8015304:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 8015306:	2200      	movs	r2, #0
 8015308:	920e      	str	r2, [sp, #56]	@ 0x38
    a->current_value = start;
 801530a:	920f      	str	r2, [sp, #60]	@ 0x3c
    a->end_value = end;
 801530c:	9310      	str	r3, [sp, #64]	@ 0x40
    a->exec_cb = exec_cb;
 801530e:	49aa      	ldr	r1, [pc, #680]	@ (80155b8 <lv_label_refr_text+0x3c4>)
 8015310:	9107      	str	r1, [sp, #28]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015312:	4620      	mov	r0, r4
 8015314:	f7eb fab0 	bl	8000878 <lv_anim_get>
            if(anim_cur) {
 8015318:	2800      	cmp	r0, #0
 801531a:	d045      	beq.n	80153a8 <lv_label_refr_text+0x1b4>
                act_time = anim_cur->act_time;
 801531c:	6b02      	ldr	r2, [r0, #48]	@ 0x30
                playback_now = anim_cur->playback_now;
 801531e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8015322:	f3c3 0340 	ubfx	r3, r3, #1, #1
            if(act_time < a.time) {
 8015326:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015328:	4291      	cmp	r1, r2
 801532a:	dd10      	ble.n	801534e <lv_label_refr_text+0x15a>
                a.act_time = act_time;      /*To keep the old position*/
 801532c:	9212      	str	r2, [sp, #72]	@ 0x48
                a.early_apply = 0;
 801532e:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8015332:	f022 0201 	bic.w	r2, r2, #1
 8015336:	f88d 205a 	strb.w	r2, [sp, #90]	@ 0x5a
                if(playback_now) {
 801533a:	b143      	cbz	r3, 801534e <lv_label_refr_text+0x15a>
                    a.playback_now = 1;
 801533c:	b2d3      	uxtb	r3, r2
 801533e:	f043 0302 	orr.w	r3, r3, #2
 8015342:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
                    tmp      = a.start_value;
 8015346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
                    a.start_value = a.end_value;
 8015348:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801534a:	920e      	str	r2, [sp, #56]	@ 0x38
                    a.end_value   = tmp;
 801534c:	9310      	str	r3, [sp, #64]	@ 0x40
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801534e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015350:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015352:	4628      	mov	r0, r5
 8015354:	f7eb faaa 	bl	80008ac <lv_anim_speed_to_time>
    a->time = duration;
 8015358:	9011      	str	r0, [sp, #68]	@ 0x44
    a->playback_time = time;
 801535a:	9014      	str	r0, [sp, #80]	@ 0x50
            lv_anim_start(&a);
 801535c:	a806      	add	r0, sp, #24
 801535e:	f7eb fa45 	bl	80007ec <lv_anim_start>
            hor_anim = true;
 8015362:	2701      	movs	r7, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015364:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015368:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801536c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	@ 0x62
 8015370:	1a5b      	subs	r3, r3, r1
 8015372:	b29b      	uxth	r3, r3
 8015374:	3301      	adds	r3, #1
 8015376:	b21b      	sxth	r3, r3
 8015378:	429a      	cmp	r2, r3
 801537a:	dd00      	ble.n	801537e <lv_label_refr_text+0x18a>
 801537c:	b1ff      	cbz	r7, 80153be <lv_label_refr_text+0x1ca>
            lv_anim_del(obj, set_ofs_y_anim);
 801537e:	498f      	ldr	r1, [pc, #572]	@ (80155bc <lv_label_refr_text+0x3c8>)
 8015380:	4620      	mov	r0, r4
 8015382:	f7eb fa01 	bl	8000788 <lv_anim_del>
            label->offset.y = 0;
 8015386:	2300      	movs	r3, #0
 8015388:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 801538c:	e78c      	b.n	80152a8 <lv_label_refr_text+0xb4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801538e:	4620      	mov	r0, r4
 8015390:	f007 fefc 	bl	801d18c <lv_obj_get_disp>
 8015394:	f7fd ffa8 	bl	80132e8 <lv_disp_get_dpi>
 8015398:	f1a5 35aa 	sub.w	r5, r5, #2863311530	@ 0xaaaaaaaa
 801539c:	fb85 3500 	smull	r3, r5, r5, r0
 80153a0:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 80153a4:	b2ad      	uxth	r5, r5
 80153a6:	e795      	b.n	80152d4 <lv_label_refr_text+0xe0>
            bool playback_now = false;
 80153a8:	2300      	movs	r3, #0
            int32_t act_time = 0;
 80153aa:	461a      	mov	r2, r3
 80153ac:	e7bb      	b.n	8015326 <lv_label_refr_text+0x132>
            lv_anim_del(obj, set_ofs_x_anim);
 80153ae:	4982      	ldr	r1, [pc, #520]	@ (80155b8 <lv_label_refr_text+0x3c4>)
 80153b0:	4620      	mov	r0, r4
 80153b2:	f7eb f9e9 	bl	8000788 <lv_anim_del>
            label->offset.x = 0;
 80153b6:	2700      	movs	r7, #0
 80153b8:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
 80153bc:	e7d2      	b.n	8015364 <lv_label_refr_text+0x170>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
 80153be:	1a9b      	subs	r3, r3, r2
 80153c0:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 80153c4:	1a9b      	subs	r3, r3, r2
    a->start_value = start;
 80153c6:	2200      	movs	r2, #0
 80153c8:	920e      	str	r2, [sp, #56]	@ 0x38
    a->current_value = start;
 80153ca:	920f      	str	r2, [sp, #60]	@ 0x3c
    a->end_value = end;
 80153cc:	9310      	str	r3, [sp, #64]	@ 0x40
    a->exec_cb = exec_cb;
 80153ce:	497b      	ldr	r1, [pc, #492]	@ (80155bc <lv_label_refr_text+0x3c8>)
 80153d0:	9107      	str	r1, [sp, #28]
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 80153d2:	4620      	mov	r0, r4
 80153d4:	f7eb fa50 	bl	8000878 <lv_anim_get>
            if(anim_cur) {
 80153d8:	b318      	cbz	r0, 8015422 <lv_label_refr_text+0x22e>
                act_time = anim_cur->act_time;
 80153da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
                playback_now = anim_cur->playback_now;
 80153dc:	f890 7042 	ldrb.w	r7, [r0, #66]	@ 0x42
 80153e0:	f3c7 0740 	ubfx	r7, r7, #1, #1
            if(act_time < a.time) {
 80153e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80153e6:	429a      	cmp	r2, r3
 80153e8:	dd10      	ble.n	801540c <lv_label_refr_text+0x218>
                a.act_time = act_time;      /*To keep the old position*/
 80153ea:	9312      	str	r3, [sp, #72]	@ 0x48
                a.early_apply = 0;
 80153ec:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 80153f0:	f023 0301 	bic.w	r3, r3, #1
 80153f4:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
                if(playback_now) {
 80153f8:	b147      	cbz	r7, 801540c <lv_label_refr_text+0x218>
                    a.playback_now = 1;
 80153fa:	b2db      	uxtb	r3, r3
 80153fc:	f043 0302 	orr.w	r3, r3, #2
 8015400:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
                    tmp      = a.start_value;
 8015404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
                    a.start_value = a.end_value;
 8015406:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015408:	920e      	str	r2, [sp, #56]	@ 0x38
                    a.end_value   = tmp;
 801540a:	9310      	str	r3, [sp, #64]	@ 0x40
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801540c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801540e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015410:	4628      	mov	r0, r5
 8015412:	f7eb fa4b 	bl	80008ac <lv_anim_speed_to_time>
    a->time = duration;
 8015416:	9011      	str	r0, [sp, #68]	@ 0x44
    a->playback_time = time;
 8015418:	9014      	str	r0, [sp, #80]	@ 0x50
            lv_anim_start(&a);
 801541a:	a806      	add	r0, sp, #24
 801541c:	f7eb f9e6 	bl	80007ec <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015420:	e742      	b.n	80152a8 <lv_label_refr_text+0xb4>
            int32_t act_time = 0;
 8015422:	2300      	movs	r3, #0
 8015424:	e7de      	b.n	80153e4 <lv_label_refr_text+0x1f0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM);
 8015426:	2264      	movs	r2, #100	@ 0x64
 8015428:	2100      	movs	r1, #0
 801542a:	4620      	mov	r0, r4
 801542c:	f007 f962 	bl	801c6f4 <lv_obj_get_style_prop>
 8015430:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_SPEED);
 8015432:	2266      	movs	r2, #102	@ 0x66
 8015434:	2100      	movs	r1, #0
 8015436:	4620      	mov	r0, r4
 8015438:	f007 f95c 	bl	801c6f4 <lv_obj_get_style_prop>
        uint16_t anim_speed = lv_obj_get_style_anim_speed(obj, LV_PART_MAIN);
 801543c:	b285      	uxth	r5, r0
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 801543e:	2d00      	cmp	r5, #0
 8015440:	d04d      	beq.n	80154de <lv_label_refr_text+0x2ea>
        lv_anim_init(&a);
 8015442:	a806      	add	r0, sp, #24
 8015444:	f7eb f986 	bl	8000754 <lv_anim_init>
    a->var = var;
 8015448:	9406      	str	r4, [sp, #24]
    a->repeat_cnt = cnt;
 801544a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801544e:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015452:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015456:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801545a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801545e:	1a5b      	subs	r3, r3, r1
 8015460:	b29b      	uxth	r3, r3
 8015462:	3301      	adds	r3, #1
 8015464:	b21b      	sxth	r3, r3
 8015466:	429a      	cmp	r2, r3
 8015468:	dd53      	ble.n	8015512 <lv_label_refr_text+0x31e>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
 801546a:	2220      	movs	r2, #32
 801546c:	4611      	mov	r1, r2
 801546e:	4630      	mov	r0, r6
 8015470:	f7fc fbb4 	bl	8011bdc <lv_font_get_glyph_width>
 8015474:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 8015478:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801547c:	1ac2      	subs	r2, r0, r3
    a->start_value = start;
 801547e:	2100      	movs	r1, #0
 8015480:	910e      	str	r1, [sp, #56]	@ 0x38
    a->current_value = start;
 8015482:	910f      	str	r1, [sp, #60]	@ 0x3c
    a->end_value = end;
 8015484:	9210      	str	r2, [sp, #64]	@ 0x40
    a->exec_cb = exec_cb;
 8015486:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 80155b8 <lv_label_refr_text+0x3c4>
 801548a:	f8cd 801c 	str.w	r8, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 801548e:	4628      	mov	r0, r5
 8015490:	f7eb fa0c 	bl	80008ac <lv_anim_speed_to_time>
    a->time = duration;
 8015494:	9011      	str	r0, [sp, #68]	@ 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_x_anim);
 8015496:	4641      	mov	r1, r8
 8015498:	4620      	mov	r0, r4
 801549a:	f7eb f9ed 	bl	8000878 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801549e:	b358      	cbz	r0, 80154f8 <lv_label_refr_text+0x304>
 80154a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
            if(anim_template) {
 80154a2:	b35f      	cbz	r7, 80154fc <lv_label_refr_text+0x308>
                a.act_time = anim_template->act_time;
 80154a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a6:	9312      	str	r3, [sp, #72]	@ 0x48
                a.repeat_delay = anim_template->repeat_delay;
 80154a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154aa:	9315      	str	r3, [sp, #84]	@ 0x54
            lv_anim_start(&a);
 80154ac:	a806      	add	r0, sp, #24
 80154ae:	f7eb f99d 	bl	80007ec <lv_anim_start>
            hor_anim = true;
 80154b2:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 80154b4:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80154b8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80154bc:	f8bd 0062 	ldrh.w	r0, [sp, #98]	@ 0x62
 80154c0:	1a1b      	subs	r3, r3, r0
 80154c2:	b29b      	uxth	r3, r3
 80154c4:	3301      	adds	r3, #1
 80154c6:	b21b      	sxth	r3, r3
 80154c8:	429a      	cmp	r2, r3
 80154ca:	dd00      	ble.n	80154ce <lv_label_refr_text+0x2da>
 80154cc:	b349      	cbz	r1, 8015522 <lv_label_refr_text+0x32e>
            lv_anim_del(obj, set_ofs_y_anim);
 80154ce:	493b      	ldr	r1, [pc, #236]	@ (80155bc <lv_label_refr_text+0x3c8>)
 80154d0:	4620      	mov	r0, r4
 80154d2:	f7eb f959 	bl	8000788 <lv_anim_del>
            label->offset.y = 0;
 80154d6:	2300      	movs	r3, #0
 80154d8:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
 80154dc:	e6e4      	b.n	80152a8 <lv_label_refr_text+0xb4>
        if(anim_speed == 0) anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80154de:	4620      	mov	r0, r4
 80154e0:	f007 fe54 	bl	801d18c <lv_obj_get_disp>
 80154e4:	f7fd ff00 	bl	80132e8 <lv_disp_get_dpi>
 80154e8:	f1a5 35aa 	sub.w	r5, r5, #2863311530	@ 0xaaaaaaaa
 80154ec:	fb85 3500 	smull	r3, r5, r5, r0
 80154f0:	eba5 75e0 	sub.w	r5, r5, r0, asr #31
 80154f4:	b2ad      	uxth	r5, r5
 80154f6:	e7a4      	b.n	8015442 <lv_label_refr_text+0x24e>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 80154f8:	2300      	movs	r3, #0
 80154fa:	e7d2      	b.n	80154a2 <lv_label_refr_text+0x2ae>
            else if(act_time < a.time) {
 80154fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80154fe:	429a      	cmp	r2, r3
 8015500:	ddd4      	ble.n	80154ac <lv_label_refr_text+0x2b8>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015502:	9312      	str	r3, [sp, #72]	@ 0x48
                a.early_apply = 0;
 8015504:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8015508:	f023 0301 	bic.w	r3, r3, #1
 801550c:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
 8015510:	e7cc      	b.n	80154ac <lv_label_refr_text+0x2b8>
            lv_anim_del(obj, set_ofs_x_anim);
 8015512:	4929      	ldr	r1, [pc, #164]	@ (80155b8 <lv_label_refr_text+0x3c4>)
 8015514:	4620      	mov	r0, r4
 8015516:	f7eb f937 	bl	8000788 <lv_anim_del>
            label->offset.x = 0;
 801551a:	2100      	movs	r1, #0
 801551c:	f8a4 1044 	strh.w	r1, [r4, #68]	@ 0x44
 8015520:	e7c8      	b.n	80154b4 <lv_label_refr_text+0x2c0>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
 8015522:	4252      	negs	r2, r2
 8015524:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8015528:	1ad2      	subs	r2, r2, r3
    a->start_value = start;
 801552a:	910e      	str	r1, [sp, #56]	@ 0x38
    a->current_value = start;
 801552c:	910f      	str	r1, [sp, #60]	@ 0x3c
    a->end_value = end;
 801552e:	9210      	str	r2, [sp, #64]	@ 0x40
    a->exec_cb = exec_cb;
 8015530:	4e22      	ldr	r6, [pc, #136]	@ (80155bc <lv_label_refr_text+0x3c8>)
 8015532:	9607      	str	r6, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(anim_speed, a.start_value, a.end_value));
 8015534:	4628      	mov	r0, r5
 8015536:	f7eb f9b9 	bl	80008ac <lv_anim_speed_to_time>
    a->time = duration;
 801553a:	9011      	str	r0, [sp, #68]	@ 0x44
            lv_anim_t * anim_cur = lv_anim_get(obj, set_ofs_y_anim);
 801553c:	4631      	mov	r1, r6
 801553e:	4620      	mov	r0, r4
 8015540:	f7eb f99a 	bl	8000878 <lv_anim_get>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 8015544:	b148      	cbz	r0, 801555a <lv_label_refr_text+0x366>
 8015546:	6b03      	ldr	r3, [r0, #48]	@ 0x30
            if(anim_template) {
 8015548:	b14f      	cbz	r7, 801555e <lv_label_refr_text+0x36a>
                a.act_time = anim_template->act_time;
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	9312      	str	r3, [sp, #72]	@ 0x48
                a.repeat_delay = anim_template->repeat_delay;
 801554e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015550:	9315      	str	r3, [sp, #84]	@ 0x54
            lv_anim_start(&a);
 8015552:	a806      	add	r0, sp, #24
 8015554:	f7eb f94a 	bl	80007ec <lv_anim_start>
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
 8015558:	e6a6      	b.n	80152a8 <lv_label_refr_text+0xb4>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
 801555a:	2300      	movs	r3, #0
 801555c:	e7f4      	b.n	8015548 <lv_label_refr_text+0x354>
            else if(act_time < a.time) {
 801555e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015560:	429a      	cmp	r2, r3
 8015562:	ddf6      	ble.n	8015552 <lv_label_refr_text+0x35e>
                a.act_time = act_time;      /*To keep the old position when the label text is updated mid-scrolling*/
 8015564:	9312      	str	r3, [sp, #72]	@ 0x48
                a.early_apply = 0;
 8015566:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801556a:	f023 0301 	bic.w	r3, r3, #1
 801556e:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
 8015572:	e7ee      	b.n	8015552 <lv_label_refr_text+0x35e>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
 8015574:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	@ 0x5e
 8015578:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 801557c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	@ 0x62
 8015580:	1a5b      	subs	r3, r3, r1
 8015582:	b29b      	uxth	r3, r3
 8015584:	3301      	adds	r3, #1
 8015586:	b21b      	sxth	r3, r3
 8015588:	429a      	cmp	r2, r3
 801558a:	dc03      	bgt.n	8015594 <lv_label_refr_text+0x3a0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 801558c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015592:	e689      	b.n	80152a8 <lv_label_refr_text+0xb4>
 8015594:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
        else if(size.y <= lv_font_get_line_height(font)) { /*No dots are required for one-line texts*/
 8015598:	429a      	cmp	r2, r3
 801559a:	dc03      	bgt.n	80155a4 <lv_label_refr_text+0x3b0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 801559c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80155a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80155a2:	e681      	b.n	80152a8 <lv_label_refr_text+0xb4>
        else if(_lv_txt_get_encoded_length(label->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
 80155a4:	4b06      	ldr	r3, [pc, #24]	@ (80155c0 <lv_label_refr_text+0x3cc>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80155aa:	4798      	blx	r3
 80155ac:	2803      	cmp	r0, #3
 80155ae:	d809      	bhi.n	80155c4 <lv_label_refr_text+0x3d0>
            label->dot_end = LV_LABEL_DOT_END_INV;
 80155b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80155b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80155b6:	e677      	b.n	80152a8 <lv_label_refr_text+0xb4>
 80155b8:	08014cff 	.word	0x08014cff
 80155bc:	08014cf3 	.word	0x08014cf3
 80155c0:	20000074 	.word	0x20000074
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80155c4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80155c8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80155cc:	1aed      	subs	r5, r5, r3
 80155ce:	b2ad      	uxth	r5, r5
 80155d0:	3501      	adds	r5, #1
 80155d2:	b2ad      	uxth	r5, r5
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
 80155d4:	222e      	movs	r2, #46	@ 0x2e
 80155d6:	4611      	mov	r1, r2
 80155d8:	4630      	mov	r0, r6
 80155da:	f7fc faff 	bl	8011bdc <lv_font_get_glyph_width>
 80155de:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
 80155e0:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
 80155e4:	443d      	add	r5, r7
 80155e6:	f8ad 5014 	strh.w	r5, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80155ea:	f8bd 3066 	ldrh.w	r3, [sp, #102]	@ 0x66
 80155ee:	f8bd 2062 	ldrh.w	r2, [sp, #98]	@ 0x62
 80155f2:	1a9b      	subs	r3, r3, r2
 80155f4:	b29b      	uxth	r3, r3
 80155f6:	3301      	adds	r3, #1
 80155f8:	b29a      	uxth	r2, r3
 80155fa:	b21b      	sxth	r3, r3
            p.y = lv_area_get_height(&txt_coords);
 80155fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015600:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
 8015604:	4489      	add	r9, r1
            y_overed = p.y %
 8015606:	fb93 f0f9 	sdiv	r0, r3, r9
 801560a:	fb09 3310 	mls	r3, r9, r0, r3
 801560e:	b218      	sxth	r0, r3
            if(y_overed >= lv_font_get_line_height(font)) {
 8015610:	4288      	cmp	r0, r1
 8015612:	db22      	blt.n	801565a <lv_label_refr_text+0x466>
                p.y -= y_overed;
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	b29b      	uxth	r3, r3
 8015618:	f8ad 3016 	strh.w	r3, [sp, #22]
                p.y += lv_font_get_line_height(font);
 801561c:	fa13 f181 	uxtah	r1, r3, r1
 8015620:	f8ad 1016 	strh.w	r1, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(obj, &p);
 8015624:	a905      	add	r1, sp, #20
 8015626:	4620      	mov	r0, r4
 8015628:	f7ff fcce 	bl	8014fc8 <lv_label_get_letter_on>
 801562c:	4605      	mov	r5, r0
            size_t txt_len = strlen(label->text);
 801562e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8015630:	4630      	mov	r0, r6
 8015632:	f7ea fdb3 	bl	800019c <strlen>
 8015636:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(label->text, letter_id);
 8015638:	4b27      	ldr	r3, [pc, #156]	@ (80156d8 <lv_label_refr_text+0x4e4>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4629      	mov	r1, r5
 801563e:	4630      	mov	r0, r6
 8015640:	4798      	blx	r3
 8015642:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
 8015644:	9e06      	ldr	r6, [sp, #24]
 8015646:	1cf7      	adds	r7, r6, #3
 8015648:	4547      	cmp	r7, r8
 801564a:	d90f      	bls.n	801566c <lv_label_refr_text+0x478>
                _lv_txt_encoded_prev(label->text, &byte_id);
 801564c:	4b23      	ldr	r3, [pc, #140]	@ (80156dc <lv_label_refr_text+0x4e8>)
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	a906      	add	r1, sp, #24
 8015652:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015654:	4798      	blx	r3
                letter_id--;
 8015656:	3d01      	subs	r5, #1
 8015658:	e7f4      	b.n	8015644 <lv_label_refr_text+0x450>
                p.y -= y_overed;
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	b29b      	uxth	r3, r3
 801565e:	f8ad 3016 	strh.w	r3, [sp, #22]
                p.y -= line_space;
 8015662:	eba3 0308 	sub.w	r3, r3, r8
 8015666:	f8ad 3016 	strh.w	r3, [sp, #22]
 801566a:	e7db      	b.n	8015624 <lv_label_refr_text+0x430>
            uint8_t len = 0;
 801566c:	f04f 0a00 	mov.w	sl, #0
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015670:	46d1      	mov	r9, sl
 8015672:	f1b9 0f03 	cmp.w	r9, #3
 8015676:	d816      	bhi.n	80156a6 <lv_label_refr_text+0x4b2>
                len += _lv_txt_encoded_size(&label->text[byte_id]);
 8015678:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801567a:	4b19      	ldr	r3, [pc, #100]	@ (80156e0 <lv_label_refr_text+0x4ec>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	9a06      	ldr	r2, [sp, #24]
 8015680:	4410      	add	r0, r2
 8015682:	4798      	blx	r3
 8015684:	4450      	add	r0, sl
 8015686:	fa5f fa80 	uxtb.w	sl, r0
                _lv_txt_encoded_next(label->text, &byte_id);
 801568a:	4b16      	ldr	r3, [pc, #88]	@ (80156e4 <lv_label_refr_text+0x4f0>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	a906      	add	r1, sp, #24
 8015690:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015692:	4798      	blx	r3
                if(len > LV_LABEL_DOT_NUM || byte_id > txt_len) {
 8015694:	f1ba 0f03 	cmp.w	sl, #3
 8015698:	d805      	bhi.n	80156a6 <lv_label_refr_text+0x4b2>
 801569a:	9b06      	ldr	r3, [sp, #24]
 801569c:	4543      	cmp	r3, r8
 801569e:	d802      	bhi.n	80156a6 <lv_label_refr_text+0x4b2>
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 80156a0:	f109 0901 	add.w	r9, r9, #1
 80156a4:	e7e5      	b.n	8015672 <lv_label_refr_text+0x47e>
            if(lv_label_set_dot_tmp(obj, &label->text[byte_id_ori], len)) {
 80156a6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80156a8:	4652      	mov	r2, sl
 80156aa:	4431      	add	r1, r6
 80156ac:	4620      	mov	r0, r4
 80156ae:	f7ff fb2c 	bl	8014d0a <lv_label_set_dot_tmp>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	f43f adf8 	beq.w	80152a8 <lv_label_refr_text+0xb4>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80156b8:	2300      	movs	r3, #0
 80156ba:	e004      	b.n	80156c6 <lv_label_refr_text+0x4d2>
                    label->text[byte_id_ori + i] = '.';
 80156bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80156be:	18f2      	adds	r2, r6, r3
 80156c0:	202e      	movs	r0, #46	@ 0x2e
 80156c2:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 80156c4:	3301      	adds	r3, #1
 80156c6:	2b02      	cmp	r3, #2
 80156c8:	d9f8      	bls.n	80156bc <lv_label_refr_text+0x4c8>
                label->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 80156ca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80156cc:	2200      	movs	r2, #0
 80156ce:	55da      	strb	r2, [r3, r7]
                label->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 80156d0:	3503      	adds	r5, #3
 80156d2:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80156d4:	e5e8      	b.n	80152a8 <lv_label_refr_text+0xb4>
 80156d6:	4770      	bx	lr
 80156d8:	2000007c 	.word	0x2000007c
 80156dc:	20000080 	.word	0x20000080
 80156e0:	2000008c 	.word	0x2000008c
 80156e4:	20000084 	.word	0x20000084

080156e8 <lv_label_set_text>:
{
 80156e8:	b570      	push	{r4, r5, r6, lr}
 80156ea:	4604      	mov	r4, r0
 80156ec:	460d      	mov	r5, r1
    lv_obj_invalidate(obj);
 80156ee:	f004 fbda 	bl	8019ea6 <lv_obj_invalidate>
    if(text == NULL) text = label->text;
 80156f2:	b1ed      	cbz	r5, 8015730 <lv_label_set_text+0x48>
    if(label->text == text && label->static_txt == 0) {
 80156f4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80156f6:	42ae      	cmp	r6, r5
 80156f8:	d01c      	beq.n	8015734 <lv_label_set_text+0x4c>
        if(label->text != NULL && label->static_txt == 0) {
 80156fa:	b126      	cbz	r6, 8015706 <lv_label_set_text+0x1e>
 80156fc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015700:	f013 0f08 	tst.w	r3, #8
 8015704:	d026      	beq.n	8015754 <lv_label_set_text+0x6c>
        size_t len = strlen(text) + 1;
 8015706:	4628      	mov	r0, r5
 8015708:	f7ea fd48 	bl	800019c <strlen>
        label->text = lv_mem_alloc(len);
 801570c:	3001      	adds	r0, #1
 801570e:	f001 f903 	bl	8016918 <lv_mem_alloc>
 8015712:	6260      	str	r0, [r4, #36]	@ 0x24
        LV_ASSERT_MALLOC(label->text);
 8015714:	b320      	cbz	r0, 8015760 <lv_label_set_text+0x78>
        strcpy(label->text, text);
 8015716:	4629      	mov	r1, r5
 8015718:	f013 ff5e 	bl	80295d8 <strcpy>
        label->static_txt = 0;
 801571c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015720:	f023 0308 	bic.w	r3, r3, #8
 8015724:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    lv_label_refr_text(obj);
 8015728:	4620      	mov	r0, r4
 801572a:	f7ff fd63 	bl	80151f4 <lv_label_refr_text>
}
 801572e:	bd70      	pop	{r4, r5, r6, pc}
    if(text == NULL) text = label->text;
 8015730:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8015732:	e7df      	b.n	80156f4 <lv_label_set_text+0xc>
    if(label->text == text && label->static_txt == 0) {
 8015734:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015738:	f013 0f08 	tst.w	r3, #8
 801573c:	d1dd      	bne.n	80156fa <lv_label_set_text+0x12>
        label->text = lv_mem_realloc(label->text, strlen(label->text) + 1);
 801573e:	4630      	mov	r0, r6
 8015740:	f7ea fd2c 	bl	800019c <strlen>
 8015744:	1c41      	adds	r1, r0, #1
 8015746:	4630      	mov	r0, r6
 8015748:	f001 f920 	bl	801698c <lv_mem_realloc>
 801574c:	6260      	str	r0, [r4, #36]	@ 0x24
        LV_ASSERT_MALLOC(label->text);
 801574e:	2800      	cmp	r0, #0
 8015750:	d1ea      	bne.n	8015728 <lv_label_set_text+0x40>
 8015752:	e7fe      	b.n	8015752 <lv_label_set_text+0x6a>
            lv_mem_free(label->text);
 8015754:	4630      	mov	r0, r6
 8015756:	f001 f8fd 	bl	8016954 <lv_mem_free>
            label->text = NULL;
 801575a:	2300      	movs	r3, #0
 801575c:	6263      	str	r3, [r4, #36]	@ 0x24
 801575e:	e7d2      	b.n	8015706 <lv_label_set_text+0x1e>
        LV_ASSERT_MALLOC(label->text);
 8015760:	e7fe      	b.n	8015760 <lv_label_set_text+0x78>

08015762 <lv_label_set_text_fmt>:
{
 8015762:	b40e      	push	{r1, r2, r3}
 8015764:	b530      	push	{r4, r5, lr}
 8015766:	b082      	sub	sp, #8
 8015768:	9d05      	ldr	r5, [sp, #20]
    LV_ASSERT_NULL(fmt);
 801576a:	b1ed      	cbz	r5, 80157a8 <lv_label_set_text_fmt+0x46>
 801576c:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 801576e:	f004 fb9a 	bl	8019ea6 <lv_obj_invalidate>
    if(label->text != NULL && label->static_txt == 0) {
 8015772:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015774:	b120      	cbz	r0, 8015780 <lv_label_set_text_fmt+0x1e>
 8015776:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801577a:	f013 0f08 	tst.w	r3, #8
 801577e:	d014      	beq.n	80157aa <lv_label_set_text_fmt+0x48>
    va_start(args, fmt);
 8015780:	a906      	add	r1, sp, #24
 8015782:	9101      	str	r1, [sp, #4]
    label->text = _lv_txt_set_text_vfmt(fmt, args);
 8015784:	4628      	mov	r0, r5
 8015786:	f012 f83b 	bl	8027800 <_lv_txt_set_text_vfmt>
 801578a:	6260      	str	r0, [r4, #36]	@ 0x24
    label->static_txt = 0; /*Now the text is dynamically allocated*/
 801578c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015790:	f023 0308 	bic.w	r3, r3, #8
 8015794:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    lv_label_refr_text(obj);
 8015798:	4620      	mov	r0, r4
 801579a:	f7ff fd2b 	bl	80151f4 <lv_label_refr_text>
}
 801579e:	b002      	add	sp, #8
 80157a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157a4:	b003      	add	sp, #12
 80157a6:	4770      	bx	lr
    LV_ASSERT_NULL(fmt);
 80157a8:	e7fe      	b.n	80157a8 <lv_label_set_text_fmt+0x46>
        lv_mem_free(label->text);
 80157aa:	f001 f8d3 	bl	8016954 <lv_mem_free>
        label->text = NULL;
 80157ae:	2300      	movs	r3, #0
 80157b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80157b2:	e7e5      	b.n	8015780 <lv_label_set_text_fmt+0x1e>

080157b4 <lv_label_set_text_static>:
{
 80157b4:	b538      	push	{r3, r4, r5, lr}
 80157b6:	4604      	mov	r4, r0
 80157b8:	460d      	mov	r5, r1
    if(label->static_txt == 0 && label->text != NULL) {
 80157ba:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 80157be:	f013 0f08 	tst.w	r3, #8
 80157c2:	d105      	bne.n	80157d0 <lv_label_set_text_static+0x1c>
 80157c4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80157c6:	b118      	cbz	r0, 80157d0 <lv_label_set_text_static+0x1c>
        lv_mem_free(label->text);
 80157c8:	f001 f8c4 	bl	8016954 <lv_mem_free>
        label->text = NULL;
 80157cc:	2300      	movs	r3, #0
 80157ce:	6263      	str	r3, [r4, #36]	@ 0x24
    if(text != NULL) {
 80157d0:	b135      	cbz	r5, 80157e0 <lv_label_set_text_static+0x2c>
        label->static_txt = 1;
 80157d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80157d6:	f043 0308 	orr.w	r3, r3, #8
 80157da:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
        label->text       = (char *)text;
 80157de:	6265      	str	r5, [r4, #36]	@ 0x24
    lv_label_refr_text(obj);
 80157e0:	4620      	mov	r0, r4
 80157e2:	f7ff fd07 	bl	80151f4 <lv_label_refr_text>
}
 80157e6:	bd38      	pop	{r3, r4, r5, pc}

080157e8 <lv_label_set_long_mode>:
{
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	4604      	mov	r4, r0
 80157ec:	460d      	mov	r5, r1
    lv_anim_del(obj, set_ofs_x_anim);
 80157ee:	491a      	ldr	r1, [pc, #104]	@ (8015858 <lv_label_set_long_mode+0x70>)
 80157f0:	f7ea ffca 	bl	8000788 <lv_anim_del>
    lv_anim_del(obj, set_ofs_y_anim);
 80157f4:	4919      	ldr	r1, [pc, #100]	@ (801585c <lv_label_set_long_mode+0x74>)
 80157f6:	4620      	mov	r0, r4
 80157f8:	f7ea ffc6 	bl	8000788 <lv_anim_del>
    label->offset.x = 0;
 80157fc:	2300      	movs	r3, #0
 80157fe:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
    label->offset.y = 0;
 8015802:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    if(long_mode == LV_LABEL_LONG_SCROLL || long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || long_mode == LV_LABEL_LONG_CLIP)
 8015806:	1eab      	subs	r3, r5, #2
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2b02      	cmp	r3, #2
 801580c:	d815      	bhi.n	801583a <lv_label_set_long_mode+0x52>
        label->expand = 1;
 801580e:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015812:	f043 0320 	orr.w	r3, r3, #32
 8015816:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 801581a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801581e:	f003 0307 	and.w	r3, r3, #7
 8015822:	2b01      	cmp	r3, #1
 8015824:	d010      	beq.n	8015848 <lv_label_set_long_mode+0x60>
    label->long_mode = long_mode;
 8015826:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801582a:	f365 0302 	bfi	r3, r5, #0, #3
 801582e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
    lv_label_refr_text(obj);
 8015832:	4620      	mov	r0, r4
 8015834:	f7ff fcde 	bl	80151f4 <lv_label_refr_text>
}
 8015838:	bd38      	pop	{r3, r4, r5, pc}
        label->expand = 0;
 801583a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801583e:	f023 0320 	bic.w	r3, r3, #32
 8015842:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
 8015846:	e7e8      	b.n	801581a <lv_label_set_long_mode+0x32>
    if(label->long_mode == LV_LABEL_LONG_DOT && label->dot_end != LV_LABEL_DOT_END_INV) {
 8015848:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801584a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801584e:	d0ea      	beq.n	8015826 <lv_label_set_long_mode+0x3e>
        lv_label_revert_dots(obj);
 8015850:	4620      	mov	r0, r4
 8015852:	f7ff fa11 	bl	8014c78 <lv_label_revert_dots>
 8015856:	e7e6      	b.n	8015826 <lv_label_set_long_mode+0x3e>
 8015858:	08014cff 	.word	0x08014cff
 801585c:	08014cf3 	.word	0x08014cf3

08015860 <lv_label_constructor>:
{
 8015860:	b538      	push	{r3, r4, r5, lr}
 8015862:	460c      	mov	r4, r1
    label->text       = NULL;
 8015864:	2500      	movs	r5, #0
 8015866:	624d      	str	r5, [r1, #36]	@ 0x24
    label->static_txt = 0;
 8015868:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 801586c:	f365 03c3 	bfi	r3, r5, #3, #1
 8015870:	f881 3048 	strb.w	r3, [r1, #72]	@ 0x48
    label->recolor    = 0;
 8015874:	b2db      	uxtb	r3, r3
 8015876:	f365 1304 	bfi	r3, r5, #4, #1
 801587a:	f881 3048 	strb.w	r3, [r1, #72]	@ 0x48
    label->dot_end    = LV_LABEL_DOT_END_INV;
 801587e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015882:	62cb      	str	r3, [r1, #44]	@ 0x2c
    label->long_mode  = LV_LABEL_LONG_WRAP;
 8015884:	f891 2048 	ldrb.w	r2, [r1, #72]	@ 0x48
 8015888:	f365 0202 	bfi	r2, r5, #0, #3
 801588c:	f881 2048 	strb.w	r2, [r1, #72]	@ 0x48
    label->offset.x = 0;
 8015890:	f8a1 5044 	strh.w	r5, [r1, #68]	@ 0x44
    label->offset.y = 0;
 8015894:	f8a1 5046 	strh.w	r5, [r1, #70]	@ 0x46
    label->hint.line_start = -1;
 8015898:	630b      	str	r3, [r1, #48]	@ 0x30
    label->hint.coord_y    = 0;
 801589a:	638d      	str	r5, [r1, #56]	@ 0x38
    label->hint.y          = 0;
 801589c:	634d      	str	r5, [r1, #52]	@ 0x34
    label->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 801589e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80158a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    label->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 80158a4:	640b      	str	r3, [r1, #64]	@ 0x40
    label->dot.tmp_ptr   = NULL;
 80158a6:	628d      	str	r5, [r1, #40]	@ 0x28
    label->dot_tmp_alloc = 0;
 80158a8:	b2d3      	uxtb	r3, r2
 80158aa:	f365 1386 	bfi	r3, r5, #6, #1
 80158ae:	f881 3048 	strb.w	r3, [r1, #72]	@ 0x48
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80158b2:	2102      	movs	r1, #2
 80158b4:	4620      	mov	r0, r4
 80158b6:	f002 fd93 	bl	80183e0 <lv_obj_clear_flag>
    lv_label_set_long_mode(obj, LV_LABEL_LONG_WRAP);
 80158ba:	4629      	mov	r1, r5
 80158bc:	4620      	mov	r0, r4
 80158be:	f7ff ff93 	bl	80157e8 <lv_label_set_long_mode>
    lv_label_set_text(obj, "Text");
 80158c2:	4902      	ldr	r1, [pc, #8]	@ (80158cc <lv_label_constructor+0x6c>)
 80158c4:	4620      	mov	r0, r4
 80158c6:	f7ff ff0f 	bl	80156e8 <lv_label_set_text>
}
 80158ca:	bd38      	pop	{r3, r4, r5, pc}
 80158cc:	08029e38 	.word	0x08029e38

080158d0 <lv_label_is_char_under_pos>:
    LV_ASSERT_NULL(pos);
 80158d0:	2900      	cmp	r1, #0
 80158d2:	d066      	beq.n	80159a2 <lv_label_is_char_under_pos+0xd2>
{
 80158d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d8:	b08f      	sub	sp, #60	@ 0x3c
 80158da:	4604      	mov	r4, r0
 80158dc:	468b      	mov	fp, r1
    lv_obj_get_content_coords(obj, &txt_coords);
 80158de:	a90c      	add	r1, sp, #48	@ 0x30
 80158e0:	f003 ff50 	bl	8019784 <lv_obj_get_content_coords>
    const char * txt         = lv_label_get_text(obj);
 80158e4:	4620      	mov	r0, r4
 80158e6:	f7ff fa5f 	bl	8014da8 <lv_label_get_text>
 80158ea:	4607      	mov	r7, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80158ec:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 80158f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80158f4:	1a9b      	subs	r3, r3, r2
 80158f6:	b29b      	uxth	r3, r3
 80158f8:	3301      	adds	r3, #1
 80158fa:	b21b      	sxth	r3, r3
 80158fc:	9305      	str	r3, [sp, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80158fe:	2257      	movs	r2, #87	@ 0x57
 8015900:	2100      	movs	r1, #0
 8015902:	4620      	mov	r0, r4
 8015904:	f006 fef6 	bl	801c6f4 <lv_obj_get_style_prop>
 8015908:	4605      	mov	r5, r0
 801590a:	9003      	str	r0, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801590c:	2259      	movs	r2, #89	@ 0x59
 801590e:	2100      	movs	r1, #0
 8015910:	4620      	mov	r0, r4
 8015912:	f006 feef 	bl	801c6f4 <lv_obj_get_style_prop>
 8015916:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015918:	2258      	movs	r2, #88	@ 0x58
 801591a:	2100      	movs	r1, #0
 801591c:	4620      	mov	r0, r4
 801591e:	f006 fee9 	bl	801c6f4 <lv_obj_get_style_prop>
 8015922:	9006      	str	r0, [sp, #24]
    return (lv_coord_t)v.num;
 8015924:	b203      	sxth	r3, r0
 8015926:	9304      	str	r3, [sp, #16]
 8015928:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
    lv_text_align_t align = lv_obj_calculate_style_text_align(obj, LV_PART_MAIN, label->text);
 801592c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801592e:	2100      	movs	r1, #0
 8015930:	4620      	mov	r0, r4
 8015932:	f007 fb5f 	bl	801cff4 <lv_obj_calculate_style_text_align>
 8015936:	9007      	str	r0, [sp, #28]
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015938:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801593c:	f013 0a10 	ands.w	sl, r3, #16
 8015940:	d001      	beq.n	8015946 <lv_label_is_char_under_pos+0x76>
 8015942:	f04f 0a01 	mov.w	sl, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015946:	f013 0f20 	tst.w	r3, #32
 801594a:	d001      	beq.n	8015950 <lv_label_is_char_under_pos+0x80>
 801594c:	f04a 0a02 	orr.w	sl, sl, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015950:	2201      	movs	r2, #1
 8015952:	2100      	movs	r1, #0
 8015954:	4620      	mov	r0, r4
 8015956:	f006 fecd 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801595a:	b203      	sxth	r3, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 801595c:	f242 72d1 	movw	r2, #10193	@ 0x27d1
 8015960:	4293      	cmp	r3, r2
 8015962:	d01f      	beq.n	80159a4 <lv_label_is_char_under_pos+0xd4>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015964:	2400      	movs	r4, #0
 8015966:	4625      	mov	r5, r4
 8015968:	4656      	mov	r6, sl
 801596a:	46c2      	mov	sl, r8
    while(txt[line_start] != '\0') {
 801596c:	eb07 0805 	add.w	r8, r7, r5
 8015970:	5d7b      	ldrb	r3, [r7, r5]
 8015972:	b1fb      	cbz	r3, 80159b4 <lv_label_is_char_under_pos+0xe4>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, NULL, flag);
 8015974:	9601      	str	r6, [sp, #4]
 8015976:	2300      	movs	r3, #0
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	9b05      	ldr	r3, [sp, #20]
 801597c:	9a04      	ldr	r2, [sp, #16]
 801597e:	9903      	ldr	r1, [sp, #12]
 8015980:	4640      	mov	r0, r8
 8015982:	f011 fe6d 	bl	8027660 <_lv_txt_get_next_line>
 8015986:	4428      	add	r0, r5
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8015988:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 801598c:	eb04 0309 	add.w	r3, r4, r9
 8015990:	429a      	cmp	r2, r3
 8015992:	dd34      	ble.n	80159fe <lv_label_is_char_under_pos+0x12e>
        y += letter_height + line_space;
 8015994:	eb09 030a 	add.w	r3, r9, sl
 8015998:	fa14 f383 	uxtah	r3, r4, r3
 801599c:	b21c      	sxth	r4, r3
        line_start = new_line_start;
 801599e:	4605      	mov	r5, r0
 80159a0:	e7e4      	b.n	801596c <lv_label_is_char_under_pos+0x9c>
    LV_ASSERT_NULL(pos);
 80159a2:	e7fe      	b.n	80159a2 <lv_label_is_char_under_pos+0xd2>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 80159a4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80159a8:	f013 0f08 	tst.w	r3, #8
 80159ac:	d1da      	bne.n	8015964 <lv_label_is_char_under_pos+0x94>
 80159ae:	f04a 0a04 	orr.w	sl, sl, #4
 80159b2:	e7d7      	b.n	8015964 <lv_label_is_char_under_pos+0x94>
 80159b4:	46b2      	mov	sl, r6
 80159b6:	462e      	mov	r6, r5
    if(align == LV_TEXT_ALIGN_CENTER) {
 80159b8:	9b07      	ldr	r3, [sp, #28]
 80159ba:	2b02      	cmp	r3, #2
 80159bc:	d022      	beq.n	8015a04 <lv_label_is_char_under_pos+0x134>
    else if(align == LV_TEXT_ALIGN_RIGHT) {
 80159be:	9b07      	ldr	r3, [sp, #28]
 80159c0:	2b03      	cmp	r3, #3
 80159c2:	d03a      	beq.n	8015a3a <lv_label_is_char_under_pos+0x16a>
    lv_coord_t x      = 0;
 80159c4:	2400      	movs	r4, #0
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 80159c6:	2300      	movs	r3, #0
 80159c8:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
    uint32_t i           = line_start;
 80159cc:	950a      	str	r5, [sp, #40]	@ 0x28
    uint32_t letter      = '\0';
 80159ce:	9309      	str	r3, [sp, #36]	@ 0x24
    uint32_t letter_next = '\0';
 80159d0:	9308      	str	r3, [sp, #32]
    if(new_line_start > 0) {
 80159d2:	2e00      	cmp	r6, #0
 80159d4:	d16e      	bne.n	8015ab4 <lv_label_is_char_under_pos+0x1e4>
    lv_coord_t last_x = 0;
 80159d6:	4698      	mov	r8, r3
    int32_t max_diff = lv_font_get_glyph_width(font, letter, letter_next) + letter_space + 1;
 80159d8:	9a08      	ldr	r2, [sp, #32]
 80159da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80159dc:	9803      	ldr	r0, [sp, #12]
 80159de:	f7fc f8fd 	bl	8011bdc <lv_font_get_glyph_width>
 80159e2:	9c04      	ldr	r4, [sp, #16]
 80159e4:	1903      	adds	r3, r0, r4
 80159e6:	1c5a      	adds	r2, r3, #1
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 80159e8:	f9bb 1000 	ldrsh.w	r1, [fp]
 80159ec:	eba8 0304 	sub.w	r3, r8, r4
 80159f0:	4299      	cmp	r1, r3
 80159f2:	db62      	blt.n	8015aba <lv_label_is_char_under_pos+0x1ea>
 80159f4:	4490      	add	r8, r2
 80159f6:	4541      	cmp	r1, r8
 80159f8:	dd63      	ble.n	8015ac2 <lv_label_is_char_under_pos+0x1f2>
 80159fa:	2000      	movs	r0, #0
 80159fc:	e05e      	b.n	8015abc <lv_label_is_char_under_pos+0x1ec>
 80159fe:	46b2      	mov	sl, r6
 8015a00:	4606      	mov	r6, r0
 8015a02:	e7d9      	b.n	80159b8 <lv_label_is_char_under_pos+0xe8>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8015a04:	f8cd a000 	str.w	sl, [sp]
 8015a08:	9b04      	ldr	r3, [sp, #16]
 8015a0a:	9a03      	ldr	r2, [sp, #12]
 8015a0c:	1b71      	subs	r1, r6, r5
 8015a0e:	4640      	mov	r0, r8
 8015a10:	f011 ff2c 	bl	802786c <lv_txt_get_width>
 8015a14:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8015a18:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015a1c:	1a9b      	subs	r3, r3, r2
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	3301      	adds	r3, #1
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
 8015a22:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8015a26:	fa02 f383 	sxtah	r3, r2, r3
 8015a2a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8015a2e:	f340 044f 	sbfx	r4, r0, #1, #16
 8015a32:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 8015a36:	b224      	sxth	r4, r4
 8015a38:	e7c5      	b.n	80159c6 <lv_label_is_char_under_pos+0xf6>
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, letter_space, flag);
 8015a3a:	f8cd a000 	str.w	sl, [sp]
 8015a3e:	9b04      	ldr	r3, [sp, #16]
 8015a40:	9a03      	ldr	r2, [sp, #12]
 8015a42:	1b71      	subs	r1, r6, r5
 8015a44:	4640      	mov	r0, r8
 8015a46:	f011 ff11 	bl	802786c <lv_txt_get_width>
 8015a4a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8015a4e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8015a52:	1a9b      	subs	r3, r3, r2
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	3301      	adds	r3, #1
 8015a58:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
 8015a5a:	1a1b      	subs	r3, r3, r0
 8015a5c:	b21c      	sxth	r4, r3
 8015a5e:	e7b2      	b.n	80159c6 <lv_label_is_char_under_pos+0xf6>
            x += lv_font_get_glyph_width(font, letter, letter_next);
 8015a60:	9a08      	ldr	r2, [sp, #32]
 8015a62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015a64:	9803      	ldr	r0, [sp, #12]
 8015a66:	f7fc f8b9 	bl	8011bdc <lv_font_get_glyph_width>
 8015a6a:	4420      	add	r0, r4
 8015a6c:	b283      	uxth	r3, r0
 8015a6e:	b200      	sxth	r0, r0
            if(pos->x < x) {
 8015a70:	f9bb 2000 	ldrsh.w	r2, [fp]
 8015a74:	4282      	cmp	r2, r0
 8015a76:	db1a      	blt.n	8015aae <lv_label_is_char_under_pos+0x1de>
            x += letter_space;
 8015a78:	9a06      	ldr	r2, [sp, #24]
 8015a7a:	4413      	add	r3, r2
            i_current = i;
 8015a7c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
            last_x = x;
 8015a7e:	46a0      	mov	r8, r4
            x += letter_space;
 8015a80:	b21c      	sxth	r4, r3
        while(i <= new_line_start - 1) {
 8015a82:	1e73      	subs	r3, r6, #1
 8015a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a86:	4293      	cmp	r3, r2
 8015a88:	d3a6      	bcc.n	80159d8 <lv_label_is_char_under_pos+0x108>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 8015a8a:	ab0a      	add	r3, sp, #40	@ 0x28
 8015a8c:	aa08      	add	r2, sp, #32
 8015a8e:	a909      	add	r1, sp, #36	@ 0x24
 8015a90:	4638      	mov	r0, r7
 8015a92:	f011 fed5 	bl	8027840 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 8015a96:	f01a 0f01 	tst.w	sl, #1
 8015a9a:	d0e1      	beq.n	8015a60 <lv_label_is_char_under_pos+0x190>
                if(_lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 8015a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a9e:	5cf9      	ldrb	r1, [r7, r3]
 8015aa0:	f10d 002f 	add.w	r0, sp, #47	@ 0x2f
 8015aa4:	f011 fd00 	bl	80274a8 <_lv_txt_is_cmd>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d0d9      	beq.n	8015a60 <lv_label_is_char_under_pos+0x190>
 8015aac:	e7e9      	b.n	8015a82 <lv_label_is_char_under_pos+0x1b2>
                i = i_current;
 8015aae:	950a      	str	r5, [sp, #40]	@ 0x28
            last_x = x;
 8015ab0:	46a0      	mov	r8, r4
                break;
 8015ab2:	e791      	b.n	80159d8 <lv_label_is_char_under_pos+0x108>
    lv_coord_t last_x = 0;
 8015ab4:	f04f 0800 	mov.w	r8, #0
 8015ab8:	e7e3      	b.n	8015a82 <lv_label_is_char_under_pos+0x1b2>
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8015aba:	2000      	movs	r0, #0
}
 8015abc:	b00f      	add	sp, #60	@ 0x3c
 8015abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (pos->x >= (last_x - letter_space) && pos->x <= (last_x + max_diff));
 8015ac2:	2001      	movs	r0, #1
 8015ac4:	e7fa      	b.n	8015abc <lv_label_is_char_under_pos+0x1ec>

08015ac6 <lv_label_get_text_selection_start>:
}
 8015ac6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8015ac8:	4770      	bx	lr

08015aca <lv_label_get_text_selection_end>:
}
 8015aca:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8015acc:	4770      	bx	lr

08015ace <draw_main>:
{
 8015ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad2:	b092      	sub	sp, #72	@ 0x48
 8015ad4:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015ad6:	f7fb f921 	bl	8010d1c <lv_event_get_target>
 8015ada:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8015adc:	4628      	mov	r0, r5
 8015ade:	f7fb f995 	bl	8010e0c <lv_event_get_draw_ctx>
 8015ae2:	4605      	mov	r5, r0
    lv_obj_get_content_coords(obj, &txt_coords);
 8015ae4:	a910      	add	r1, sp, #64	@ 0x40
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f003 fe4c 	bl	8019784 <lv_obj_get_content_coords>
    if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015aec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015af0:	f013 0610 	ands.w	r6, r3, #16
 8015af4:	d000      	beq.n	8015af8 <draw_main+0x2a>
 8015af6:	2601      	movs	r6, #1
    if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015af8:	f013 0f20 	tst.w	r3, #32
 8015afc:	d001      	beq.n	8015b02 <draw_main+0x34>
 8015afe:	f046 0602 	orr.w	r6, r6, #2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015b02:	2201      	movs	r2, #1
 8015b04:	2100      	movs	r1, #0
 8015b06:	4620      	mov	r0, r4
 8015b08:	f006 fdf4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015b0c:	b200      	sxth	r0, r0
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015b0e:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8015b12:	4298      	cmp	r0, r3
 8015b14:	d041      	beq.n	8015b9a <draw_main+0xcc>
    lv_draw_label_dsc_init(&label_draw_dsc);
 8015b16:	a808      	add	r0, sp, #32
 8015b18:	f7f2 fa46 	bl	8007fa8 <lv_draw_label_dsc_init>
    label_draw_dsc.ofs_x = label->offset.x;
 8015b1c:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8015b20:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    label_draw_dsc.ofs_y = label->offset.y;
 8015b24:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8015b28:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
    label_draw_dsc.flag = flag;
 8015b2c:	f88d 603d 	strb.w	r6, [sp, #61]	@ 0x3d
    lv_obj_init_draw_label_dsc(obj, LV_PART_MAIN, &label_draw_dsc);
 8015b30:	aa08      	add	r2, sp, #32
 8015b32:	2100      	movs	r1, #0
 8015b34:	4620      	mov	r0, r4
 8015b36:	f003 fa17 	bl	8018f68 <lv_obj_init_draw_label_dsc>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 8015b3a:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8015b3e:	b913      	cbnz	r3, 8015b46 <draw_main+0x78>
 8015b40:	2301      	movs	r3, #1
 8015b42:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
    label_draw_dsc.sel_start = lv_label_get_text_selection_start(obj);
 8015b46:	4620      	mov	r0, r4
 8015b48:	f7ff ffbd 	bl	8015ac6 <lv_label_get_text_selection_start>
 8015b4c:	4607      	mov	r7, r0
 8015b4e:	9009      	str	r0, [sp, #36]	@ 0x24
    label_draw_dsc.sel_end = lv_label_get_text_selection_end(obj);
 8015b50:	4620      	mov	r0, r4
 8015b52:	f7ff ffba 	bl	8015aca <lv_label_get_text_selection_end>
 8015b56:	900a      	str	r0, [sp, #40]	@ 0x28
    if(label_draw_dsc.sel_start != LV_DRAW_LABEL_NO_TXT_SEL && label_draw_dsc.sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8015b58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b5c:	429f      	cmp	r7, r3
 8015b5e:	d001      	beq.n	8015b64 <draw_main+0x96>
 8015b60:	4298      	cmp	r0, r3
 8015b62:	d122      	bne.n	8015baa <draw_main+0xdc>
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8015b64:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015b68:	f003 0306 	and.w	r3, r3, #6
 8015b6c:	2b02      	cmp	r3, #2
 8015b6e:	d02c      	beq.n	8015bca <draw_main+0xfc>
    lv_draw_label_hint_t * hint = &label->hint;
 8015b70:	f104 0730 	add.w	r7, r4, #48	@ 0x30
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR || lv_area_get_height(&txt_coords) < LV_LABEL_HINT_HEIGHT_LIMIT)
 8015b74:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015b78:	f003 0307 	and.w	r3, r3, #7
 8015b7c:	2b03      	cmp	r3, #3
 8015b7e:	d048      	beq.n	8015c12 <draw_main+0x144>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015b80:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8015b84:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8015b88:	1a9b      	subs	r3, r3, r2
 8015b8a:	b29b      	uxth	r3, r3
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	b21b      	sxth	r3, r3
 8015b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015b94:	da3e      	bge.n	8015c14 <draw_main+0x146>
        hint = NULL;
 8015b96:	2700      	movs	r7, #0
 8015b98:	e03c      	b.n	8015c14 <draw_main+0x146>
    if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) flag |= LV_TEXT_FLAG_FIT;
 8015b9a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8015b9e:	f013 0f08 	tst.w	r3, #8
 8015ba2:	d1b8      	bne.n	8015b16 <draw_main+0x48>
 8015ba4:	f046 0604 	orr.w	r6, r6, #4
 8015ba8:	e7b5      	b.n	8015b16 <draw_main+0x48>
        label_draw_dsc.sel_color = lv_obj_get_style_text_color_filtered(obj, LV_PART_SELECTED);
 8015baa:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f7ff f8d7 	bl	8014d62 <lv_obj_get_style_text_color_filtered>
 8015bb4:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8015bb8:	2220      	movs	r2, #32
 8015bba:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	f006 fd98 	bl	801c6f4 <lv_obj_get_style_prop>
        label_draw_dsc.sel_bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SELECTED);
 8015bc4:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8015bc8:	e7cc      	b.n	8015b64 <draw_main+0x96>
       (label_draw_dsc.align == LV_TEXT_ALIGN_CENTER || label_draw_dsc.align == LV_TEXT_ALIGN_RIGHT)) {
 8015bca:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8015bce:	3b02      	subs	r3, #2
 8015bd0:	b2db      	uxtb	r3, r3
    if((label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) &&
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	d8cc      	bhi.n	8015b70 <draw_main+0xa2>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8015bd6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015bd8:	9602      	str	r6, [sp, #8]
 8015bda:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8015bde:	9301      	str	r3, [sp, #4]
 8015be0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015be4:	9300      	str	r3, [sp, #0]
 8015be6:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8015bea:	9a08      	ldr	r2, [sp, #32]
 8015bec:	a805      	add	r0, sp, #20
 8015bee:	f011 fe8c 	bl	802790a <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015bf2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8015bf6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015bfa:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8015bfe:	1a5b      	subs	r3, r3, r1
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	3301      	adds	r3, #1
 8015c04:	b21b      	sxth	r3, r3
 8015c06:	429a      	cmp	r2, r3
 8015c08:	ddb2      	ble.n	8015b70 <draw_main+0xa2>
            label_draw_dsc.align = LV_TEXT_ALIGN_LEFT;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8015c10:	e7ae      	b.n	8015b70 <draw_main+0xa2>
        hint = NULL;
 8015c12:	2700      	movs	r7, #0
    bool is_common = _lv_area_intersect(&txt_clip, &txt_coords, draw_ctx->clip_area);
 8015c14:	68aa      	ldr	r2, [r5, #8]
 8015c16:	a910      	add	r1, sp, #64	@ 0x40
 8015c18:	a806      	add	r0, sp, #24
 8015c1a:	f7eb feeb 	bl	80019f4 <_lv_area_intersect>
    if(!is_common) return;
 8015c1e:	b1e8      	cbz	r0, 8015c5c <draw_main+0x18e>
    if(label->long_mode == LV_LABEL_LONG_WRAP) {
 8015c20:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015c24:	f013 0f07 	tst.w	r3, #7
 8015c28:	d01b      	beq.n	8015c62 <draw_main+0x194>
    if(label->long_mode == LV_LABEL_LONG_SCROLL || label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015c2a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015c2e:	f003 0306 	and.w	r3, r3, #6
 8015c32:	2b02      	cmp	r3, #2
 8015c34:	d023      	beq.n	8015c7e <draw_main+0x1b0>
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8015c36:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015c38:	9700      	str	r7, [sp, #0]
 8015c3a:	aa10      	add	r2, sp, #64	@ 0x40
 8015c3c:	a908      	add	r1, sp, #32
 8015c3e:	4628      	mov	r0, r5
 8015c40:	f7f2 f9e2 	bl	8008008 <lv_draw_label>
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015c44:	f8d5 8008 	ldr.w	r8, [r5, #8]
    draw_ctx->clip_area = &txt_clip;
 8015c48:	ab06      	add	r3, sp, #24
 8015c4a:	60ab      	str	r3, [r5, #8]
    if(label->long_mode == LV_LABEL_LONG_SCROLL_CIRCULAR) {
 8015c4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8015c50:	f003 0307 	and.w	r3, r3, #7
 8015c54:	2b03      	cmp	r3, #3
 8015c56:	d020      	beq.n	8015c9a <draw_main+0x1cc>
    draw_ctx->clip_area = clip_area_ori;
 8015c58:	f8c5 8008 	str.w	r8, [r5, #8]
}
 8015c5c:	b012      	add	sp, #72	@ 0x48
 8015c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_coord_t s = lv_obj_get_scroll_top(obj);
 8015c62:	4620      	mov	r0, r4
 8015c64:	f005 f8d0 	bl	801ae08 <lv_obj_get_scroll_top>
        lv_area_move(&txt_coords, 0, -s);
 8015c68:	4242      	negs	r2, r0
 8015c6a:	b212      	sxth	r2, r2
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	a810      	add	r0, sp, #64	@ 0x40
 8015c70:	f7eb feb1 	bl	80019d6 <lv_area_move>
        txt_coords.y2 = obj->coords.y2;
 8015c74:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8015c78:	f8ad 3046 	strh.w	r3, [sp, #70]	@ 0x46
 8015c7c:	e7d5      	b.n	8015c2a <draw_main+0x15c>
        const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8015c7e:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &txt_clip;
 8015c82:	ab06      	add	r3, sp, #24
 8015c84:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8015c86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015c88:	9700      	str	r7, [sp, #0]
 8015c8a:	aa10      	add	r2, sp, #64	@ 0x40
 8015c8c:	a908      	add	r1, sp, #32
 8015c8e:	4628      	mov	r0, r5
 8015c90:	f7f2 f9ba 	bl	8008008 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori;
 8015c94:	f8c5 8008 	str.w	r8, [r5, #8]
 8015c98:	e7d4      	b.n	8015c44 <draw_main+0x176>
        lv_txt_get_size(&size, label->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
 8015c9a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015c9c:	9602      	str	r6, [sp, #8]
 8015c9e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8015ca2:	9301      	str	r3, [sp, #4]
 8015ca4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015ca8:	9300      	str	r3, [sp, #0]
 8015caa:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8015cae:	9a08      	ldr	r2, [sp, #32]
 8015cb0:	a805      	add	r0, sp, #20
 8015cb2:	f011 fe2a 	bl	802790a <lv_txt_get_size>
        if(size.x > lv_area_get_width(&txt_coords)) {
 8015cb6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015cba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015cbe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8015cc2:	1a5b      	subs	r3, r3, r1
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	3301      	adds	r3, #1
 8015cc8:	b21b      	sxth	r3, r3
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	dc23      	bgt.n	8015d16 <draw_main+0x248>
        if(size.y > lv_area_get_height(&txt_coords)) {
 8015cce:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8015cd2:	f8bd 3046 	ldrh.w	r3, [sp, #70]	@ 0x46
 8015cd6:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8015cda:	1a5b      	subs	r3, r3, r1
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	3301      	adds	r3, #1
 8015ce0:	b21b      	sxth	r3, r3
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	ddb8      	ble.n	8015c58 <draw_main+0x18a>
            label_draw_dsc.ofs_x = label->offset.x;
 8015ce6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8015cea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
            label_draw_dsc.ofs_y = label->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
 8015cee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8015cf2:	fa13 f282 	uxtah	r2, r3, r2
 8015cf6:	9b08      	ldr	r3, [sp, #32]
 8015cf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	fa13 f282 	uxtah	r2, r3, r2
 8015d02:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8015d06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015d08:	9700      	str	r7, [sp, #0]
 8015d0a:	aa10      	add	r2, sp, #64	@ 0x40
 8015d0c:	a908      	add	r1, sp, #32
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7f2 f97a 	bl	8008008 <lv_draw_label>
 8015d14:	e7a0      	b.n	8015c58 <draw_main+0x18a>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8015d16:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8015d1a:	fa13 f282 	uxtah	r2, r3, r2
 8015d1e:	b296      	uxth	r6, r2
                                   lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015d20:	2220      	movs	r2, #32
 8015d22:	4611      	mov	r1, r2
 8015d24:	9808      	ldr	r0, [sp, #32]
 8015d26:	f7fb ff59 	bl	8011bdc <lv_font_get_glyph_width>
            label_draw_dsc.ofs_x = label->offset.x + size.x +
 8015d2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015d2e:	4406      	add	r6, r0
 8015d30:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
            label_draw_dsc.ofs_y = label->offset.y;
 8015d34:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 8015d38:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
            lv_draw_label(draw_ctx, &label_draw_dsc, &txt_coords, label->text, hint);
 8015d3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015d3e:	9700      	str	r7, [sp, #0]
 8015d40:	aa10      	add	r2, sp, #64	@ 0x40
 8015d42:	a908      	add	r1, sp, #32
 8015d44:	4628      	mov	r0, r5
 8015d46:	f7f2 f95f 	bl	8008008 <lv_draw_label>
 8015d4a:	e7c0      	b.n	8015cce <draw_main+0x200>

08015d4c <lv_label_event>:
{
 8015d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d50:	b087      	sub	sp, #28
 8015d52:	460e      	mov	r6, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8015d54:	485f      	ldr	r0, [pc, #380]	@ (8015ed4 <lv_label_event+0x188>)
 8015d56:	f7fa ff0d 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8015d5a:	2801      	cmp	r0, #1
 8015d5c:	d002      	beq.n	8015d64 <lv_label_event+0x18>
}
 8015d5e:	b007      	add	sp, #28
 8015d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d64:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 8015d66:	4630      	mov	r0, r6
 8015d68:	f7fa ffdc 	bl	8010d24 <lv_event_get_code>
 8015d6c:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f7fa ffd4 	bl	8010d1c <lv_event_get_target>
 8015d74:	4607      	mov	r7, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8015d76:	f1a5 0313 	sub.w	r3, r5, #19
 8015d7a:	2b19      	cmp	r3, #25
 8015d7c:	d8ef      	bhi.n	8015d5e <lv_label_event+0x12>
 8015d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8015d84 <lv_label_event+0x38>)
 8015d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d84:	08015df9 	.word	0x08015df9
 8015d88:	08015d5f 	.word	0x08015d5f
 8015d8c:	08015ecd 	.word	0x08015ecd
 8015d90:	08015d5f 	.word	0x08015d5f
 8015d94:	08015d5f 	.word	0x08015d5f
 8015d98:	08015d5f 	.word	0x08015d5f
 8015d9c:	08015d5f 	.word	0x08015d5f
 8015da0:	08015d5f 	.word	0x08015d5f
 8015da4:	08015d5f 	.word	0x08015d5f
 8015da8:	08015d5f 	.word	0x08015d5f
 8015dac:	08015d5f 	.word	0x08015d5f
 8015db0:	08015d5f 	.word	0x08015d5f
 8015db4:	08015d5f 	.word	0x08015d5f
 8015db8:	08015d5f 	.word	0x08015d5f
 8015dbc:	08015d5f 	.word	0x08015d5f
 8015dc0:	08015d5f 	.word	0x08015d5f
 8015dc4:	08015d5f 	.word	0x08015d5f
 8015dc8:	08015d5f 	.word	0x08015d5f
 8015dcc:	08015d5f 	.word	0x08015d5f
 8015dd0:	08015d5f 	.word	0x08015d5f
 8015dd4:	08015d5f 	.word	0x08015d5f
 8015dd8:	08015d5f 	.word	0x08015d5f
 8015ddc:	08015e17 	.word	0x08015e17
 8015de0:	08015ded 	.word	0x08015ded
 8015de4:	08015d5f 	.word	0x08015d5f
 8015de8:	08015e23 	.word	0x08015e23
        lv_label_revert_dots(obj);
 8015dec:	f7fe ff44 	bl	8014c78 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8015df0:	4638      	mov	r0, r7
 8015df2:	f7ff f9ff 	bl	80151f4 <lv_label_refr_text>
 8015df6:	e7b2      	b.n	8015d5e <lv_label_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8015df8:	2257      	movs	r2, #87	@ 0x57
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	f006 fc7a 	bl	801c6f4 <lv_obj_get_style_prop>
 8015e00:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
        lv_event_set_ext_draw_size(e, font_h / 4);
 8015e04:	2900      	cmp	r1, #0
 8015e06:	db04      	blt.n	8015e12 <lv_label_event+0xc6>
 8015e08:	1089      	asrs	r1, r1, #2
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	f7fb f810 	bl	8010e30 <lv_event_set_ext_draw_size>
 8015e10:	e7a5      	b.n	8015d5e <lv_label_event+0x12>
 8015e12:	3103      	adds	r1, #3
 8015e14:	e7f8      	b.n	8015e08 <lv_label_event+0xbc>
        lv_label_revert_dots(obj);
 8015e16:	f7fe ff2f 	bl	8014c78 <lv_label_revert_dots>
        lv_label_refr_text(obj);
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	f7ff f9ea 	bl	80151f4 <lv_label_refr_text>
 8015e20:	e79d      	b.n	8015d5e <lv_label_event+0x12>
 8015e22:	2257      	movs	r2, #87	@ 0x57
 8015e24:	2100      	movs	r1, #0
 8015e26:	f006 fc65 	bl	801c6f4 <lv_obj_get_style_prop>
 8015e2a:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8015e2c:	2258      	movs	r2, #88	@ 0x58
 8015e2e:	2100      	movs	r1, #0
 8015e30:	4638      	mov	r0, r7
 8015e32:	f006 fc5f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015e36:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8015e3a:	2259      	movs	r2, #89	@ 0x59
 8015e3c:	2100      	movs	r1, #0
 8015e3e:	4638      	mov	r0, r7
 8015e40:	f006 fc58 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015e44:	fa0f f980 	sxth.w	r9, r0
        if(label->recolor != 0) flag |= LV_TEXT_FLAG_RECOLOR;
 8015e48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8015e4c:	f013 0210 	ands.w	r2, r3, #16
 8015e50:	d100      	bne.n	8015e54 <lv_label_event+0x108>
        lv_text_flag_t flag = LV_TEXT_FLAG_NONE;
 8015e52:	4614      	mov	r4, r2
        if(label->expand != 0) flag |= LV_TEXT_FLAG_EXPAND;
 8015e54:	f013 0f20 	tst.w	r3, #32
 8015e58:	d002      	beq.n	8015e60 <lv_label_event+0x114>
 8015e5a:	f044 0402 	orr.w	r4, r4, #2
 8015e5e:	b2e4      	uxtb	r4, r4
        lv_coord_t w = lv_obj_get_content_width(obj);
 8015e60:	4638      	mov	r0, r7
 8015e62:	f003 fc4f 	bl	8019704 <lv_obj_get_content_width>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8015e66:	2201      	movs	r2, #1
 8015e68:	2100      	movs	r1, #0
 8015e6a:	4638      	mov	r0, r7
 8015e6c:	f006 fc42 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8015e70:	b200      	sxth	r0, r0
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015e72:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8015e76:	4298      	cmp	r0, r3
 8015e78:	d104      	bne.n	8015e84 <lv_label_event+0x138>
 8015e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015e7e:	f013 0f08 	tst.w	r3, #8
 8015e82:	d020      	beq.n	8015ec6 <lv_label_event+0x17a>
        else w = lv_obj_get_content_width(obj);
 8015e84:	4638      	mov	r0, r7
 8015e86:	f003 fc3d 	bl	8019704 <lv_obj_get_content_width>
        lv_txt_get_size(&size, label->text, font, letter_space, line_space, w, flag);
 8015e8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015e8c:	9402      	str	r4, [sp, #8]
 8015e8e:	9001      	str	r0, [sp, #4]
 8015e90:	f8cd 9000 	str.w	r9, [sp]
 8015e94:	4643      	mov	r3, r8
 8015e96:	462a      	mov	r2, r5
 8015e98:	a805      	add	r0, sp, #20
 8015e9a:	f011 fd36 	bl	802790a <lv_txt_get_size>
        lv_point_t * self_size = lv_event_get_param(e);
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	f7fa ff44 	bl	8010d2c <lv_event_get_param>
        self_size->x = LV_MAX(self_size->x, size.x);
 8015ea4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015ea8:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015eac:	4293      	cmp	r3, r2
 8015eae:	bfb8      	it	lt
 8015eb0:	4613      	movlt	r3, r2
 8015eb2:	8003      	strh	r3, [r0, #0]
        self_size->y = LV_MAX(self_size->y, size.y);
 8015eb4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015eb8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	bfb8      	it	lt
 8015ec0:	4613      	movlt	r3, r2
 8015ec2:	8043      	strh	r3, [r0, #2]
 8015ec4:	e74b      	b.n	8015d5e <lv_label_event+0x12>
        if(lv_obj_get_style_width(obj, LV_PART_MAIN) == LV_SIZE_CONTENT && !obj->w_layout) w = LV_COORD_MAX;
 8015ec6:	f641 70ff 	movw	r0, #8191	@ 0x1fff
 8015eca:	e7de      	b.n	8015e8a <lv_label_event+0x13e>
        draw_main(e);
 8015ecc:	4630      	mov	r0, r6
 8015ece:	f7ff fdfe 	bl	8015ace <draw_main>
 8015ed2:	e744      	b.n	8015d5e <lv_label_event+0x12>
 8015ed4:	0802dbb0 	.word	0x0802dbb0

08015ed8 <lv_label_ins_text>:
    LV_ASSERT_NULL(txt);
 8015ed8:	b15a      	cbz	r2, 8015ef2 <lv_label_ins_text+0x1a>
{
 8015eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ede:	4604      	mov	r4, r0
 8015ee0:	460e      	mov	r6, r1
 8015ee2:	4617      	mov	r7, r2
    if(label->static_txt != 0) return;
 8015ee4:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8015ee8:	f013 0f08 	tst.w	r3, #8
 8015eec:	d002      	beq.n	8015ef4 <lv_label_ins_text+0x1c>
}
 8015eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_NULL(txt);
 8015ef2:	e7fe      	b.n	8015ef2 <lv_label_ins_text+0x1a>
    lv_obj_invalidate(obj);
 8015ef4:	f003 ffd7 	bl	8019ea6 <lv_obj_invalidate>
    size_t old_len = strlen(label->text);
 8015ef8:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8015efc:	4640      	mov	r0, r8
 8015efe:	f7ea f94d 	bl	800019c <strlen>
 8015f02:	4605      	mov	r5, r0
    size_t ins_len = strlen(txt);
 8015f04:	4638      	mov	r0, r7
 8015f06:	f7ea f949 	bl	800019c <strlen>
    size_t new_len = ins_len + old_len;
 8015f0a:	4405      	add	r5, r0
    label->text        = lv_mem_realloc(label->text, new_len + 1);
 8015f0c:	1c69      	adds	r1, r5, #1
 8015f0e:	4640      	mov	r0, r8
 8015f10:	f000 fd3c 	bl	801698c <lv_mem_realloc>
 8015f14:	6260      	str	r0, [r4, #36]	@ 0x24
    LV_ASSERT_MALLOC(label->text);
 8015f16:	b168      	cbz	r0, 8015f34 <lv_label_ins_text+0x5c>
    if(pos == LV_LABEL_POS_LAST) {
 8015f18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015f1c:	429e      	cmp	r6, r3
 8015f1e:	d00a      	beq.n	8015f36 <lv_label_ins_text+0x5e>
    _lv_txt_ins(label->text, pos, txt);
 8015f20:	463a      	mov	r2, r7
 8015f22:	4631      	mov	r1, r6
 8015f24:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015f26:	f011 fc1f 	bl	8027768 <_lv_txt_ins>
    lv_label_set_text(obj, NULL);
 8015f2a:	2100      	movs	r1, #0
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	f7ff fbdb 	bl	80156e8 <lv_label_set_text>
 8015f32:	e7dc      	b.n	8015eee <lv_label_ins_text+0x16>
    LV_ASSERT_MALLOC(label->text);
 8015f34:	e7fe      	b.n	8015f34 <lv_label_ins_text+0x5c>
        pos = _lv_txt_get_encoded_length(label->text);
 8015f36:	4b02      	ldr	r3, [pc, #8]	@ (8015f40 <lv_label_ins_text+0x68>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	4798      	blx	r3
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	e7ef      	b.n	8015f20 <lv_label_ins_text+0x48>
 8015f40:	20000074 	.word	0x20000074

08015f44 <lv_color_to32>:
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
 8015f44:	f3c0 03c4 	ubfx	r3, r0, #3, #5
 8015f48:	eb03 1243 	add.w	r2, r3, r3, lsl #5
 8015f4c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015f50:	3307      	adds	r3, #7
 8015f52:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8015f56:	2200      	movs	r2, #0
 8015f58:	f363 4217 	bfi	r2, r3, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
 8015f5c:	f000 0107 	and.w	r1, r0, #7
 8015f60:	f3c0 3342 	ubfx	r3, r0, #13, #3
 8015f64:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8015f68:	eb03 11c3 	add.w	r1, r3, r3, lsl #7
 8015f6c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015f70:	3303      	adds	r3, #3
 8015f72:	f3c3 1387 	ubfx	r3, r3, #6, #8
 8015f76:	f363 220f 	bfi	r2, r3, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
 8015f7a:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8015f7e:	eb00 1340 	add.w	r3, r0, r0, lsl #5
 8015f82:	ebc0 03c3 	rsb	r3, r0, r3, lsl #3
 8015f86:	3307      	adds	r3, #7
 8015f88:	f3c3 1347 	ubfx	r3, r3, #5, #8
 8015f8c:	f363 0207 	bfi	r2, r3, #0, #8
    LV_COLOR_SET_A32(ret, 0xFF);
    return ret.full;
#elif LV_COLOR_DEPTH == 32
    return color.full;
#endif
}
 8015f90:	f042 407f 	orr.w	r0, r2, #4278190080	@ 0xff000000
 8015f94:	4770      	bx	lr
	...

08015f98 <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 8015f98:	b283      	uxth	r3, r0
 8015f9a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8015f9e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 8015fa2:	b28b      	uxth	r3, r1
 8015fa4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015fa8:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8015fac:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8015fae:	040b      	lsls	r3, r1, #16
 8015fb0:	fa13 f181 	uxtah	r1, r3, r1
 8015fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8015fe0 <lv_color_mix+0x48>)
 8015fb6:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 8015fb8:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8015fbc:	fa1c f080 	uxtah	r0, ip, r0
 8015fc0:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8015fc2:	1a40      	subs	r0, r0, r1
 8015fc4:	08d2      	lsrs	r2, r2, #3
 8015fc6:	fb00 f202 	mul.w	r2, r0, r2
 8015fca:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 8015fce:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 8015fd0:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 8015fd4:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 8015fd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 8015fda:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8015fde:	4770      	bx	lr
 8015fe0:	07e0f81f 	.word	0x07e0f81f

08015fe4 <lv_led_event>:
    led->color = lv_theme_get_color_primary(obj);
    led->bright = LV_LED_BRIGHT_MAX;
}

static void lv_led_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8015fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fe6:	b0a1      	sub	sp, #132	@ 0x84
 8015fe8:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /* Call the ancestor's event handler */
    lv_event_code_t code = lv_event_get_code(e);
 8015fea:	4608      	mov	r0, r1
 8015fec:	f7fa fe9a 	bl	8010d24 <lv_event_get_code>
 8015ff0:	4605      	mov	r5, r0
    if(code != LV_EVENT_DRAW_MAIN && code != LV_EVENT_DRAW_MAIN_END) {
 8015ff2:	f1a0 0315 	sub.w	r3, r0, #21
 8015ff6:	b2db      	uxtb	r3, r3
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	d905      	bls.n	8016008 <lv_led_event+0x24>
        res = lv_obj_event_base(MY_CLASS, e);
 8015ffc:	4621      	mov	r1, r4
 8015ffe:	48c2      	ldr	r0, [pc, #776]	@ (8016308 <lv_led_event+0x324>)
 8016000:	f7fa fdb8 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 8016004:	2801      	cmp	r0, #1
 8016006:	d105      	bne.n	8016014 <lv_led_event+0x30>
    }

    lv_obj_t * obj = lv_event_get_target(e);
 8016008:	4620      	mov	r0, r4
 801600a:	f7fa fe87 	bl	8010d1c <lv_event_get_target>
 801600e:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8016010:	2d15      	cmp	r5, #21
 8016012:	d001      	beq.n	8016018 <lv_led_event+0x34>

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
    }
}
 8016014:	b021      	add	sp, #132	@ 0x84
 8016016:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_draw_rect_dsc_init(&rect_dsc);
 8016018:	4668      	mov	r0, sp
 801601a:	f7f3 fe19 	bl	8009c50 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &rect_dsc);
 801601e:	466a      	mov	r2, sp
 8016020:	2100      	movs	r1, #0
 8016022:	4630      	mov	r0, r6
 8016024:	f002 fe4e 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016028:	f04f 0500 	mov.w	r5, #0
 801602c:	f025 0507 	bic.w	r5, r5, #7
 8016030:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 8016034:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 8016038:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 801603c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8016040:	f7ff ff80 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8016044:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8016048:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801604c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016050:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016054:	b2c0      	uxtb	r0, r0
 8016056:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.bg_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.bg_color));
 801605a:	8cb7      	ldrh	r7, [r6, #36]	@ 0x24
 801605c:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8016060:	4629      	mov	r1, r5
 8016062:	4638      	mov	r0, r7
 8016064:	f7ff ff98 	bl	8015f98 <lv_color_mix>
 8016068:	f8ad 0004 	strh.w	r0, [sp, #4]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801606c:	f04f 0500 	mov.w	r5, #0
 8016070:	f025 0507 	bic.w	r5, r5, #7
 8016074:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 8016078:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 801607c:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 8016080:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016084:	f7ff ff5e 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8016088:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801608c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016090:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016094:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016098:	b2c0      	uxtb	r0, r0
 801609a:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.bg_grad.stops[0].color = lv_color_mix(led->color, lv_color_black(),
 801609e:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80160a2:	4629      	mov	r1, r5
 80160a4:	4638      	mov	r0, r7
 80160a6:	f7ff ff77 	bl	8015f98 <lv_color_mix>
 80160aa:	f8ad 0006 	strh.w	r0, [sp, #6]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80160ae:	f04f 0500 	mov.w	r5, #0
 80160b2:	f025 0507 	bic.w	r5, r5, #7
 80160b6:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 80160ba:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 80160be:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 80160c2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 80160c6:	f7ff ff3d 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 80160ca:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80160ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80160d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80160d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80160da:	b2c0      	uxtb	r0, r0
 80160dc:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.bg_grad.stops[1].color = lv_color_mix(led->color, lv_color_black(),
 80160e0:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80160e4:	4629      	mov	r1, r5
 80160e6:	4638      	mov	r0, r7
 80160e8:	f7ff ff56 	bl	8015f98 <lv_color_mix>
 80160ec:	f8ad 000a 	strh.w	r0, [sp, #10]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80160f0:	f04f 0500 	mov.w	r5, #0
 80160f4:	f025 0507 	bic.w	r5, r5, #7
 80160f8:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 80160fc:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 8016100:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 8016104:	f8bd 002c 	ldrh.w	r0, [sp, #44]	@ 0x2c
 8016108:	f7ff ff1c 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801610c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8016110:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016114:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8016118:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801611c:	b2c0      	uxtb	r0, r0
 801611e:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.shadow_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.shadow_color));
 8016122:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 8016126:	4629      	mov	r1, r5
 8016128:	4638      	mov	r0, r7
 801612a:	f7ff ff35 	bl	8015f98 <lv_color_mix>
 801612e:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016132:	f04f 0500 	mov.w	r5, #0
 8016136:	f025 0507 	bic.w	r5, r5, #7
 801613a:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 801613e:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 8016142:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 8016146:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801614a:	f7ff fefb 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 801614e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8016152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016156:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801615a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801615e:	b2c0      	uxtb	r0, r0
 8016160:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.border_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.border_color));
 8016164:	8cb7      	ldrh	r7, [r6, #36]	@ 0x24
 8016166:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 801616a:	4629      	mov	r1, r5
 801616c:	4638      	mov	r0, r7
 801616e:	f7ff ff13 	bl	8015f98 <lv_color_mix>
 8016172:	f8ad 001e 	strh.w	r0, [sp, #30]
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8016176:	f04f 0500 	mov.w	r5, #0
 801617a:	f025 0507 	bic.w	r5, r5, #7
 801617e:	f025 05f8 	bic.w	r5, r5, #248	@ 0xf8
 8016182:	f425 55f8 	bic.w	r5, r5, #7936	@ 0x1f00
 8016186:	f425 4560 	bic.w	r5, r5, #57344	@ 0xe000
    c32.full        = lv_color_to32(color);
 801618a:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 801618e:	f7ff fed9 	bl	8015f44 <lv_color_to32>
    uint16_t bright = (uint16_t)(3u * LV_COLOR_GET_R32(c32) + LV_COLOR_GET_B32(c32) + 4u * LV_COLOR_GET_G32(c32));
 8016192:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8016196:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801619a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801619e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80161a2:	b2c0      	uxtb	r0, r0
 80161a4:	fa10 f282 	uxtah	r2, r0, r2
        rect_dsc.outline_color = lv_color_mix(led->color, lv_color_black(), lv_color_brightness(rect_dsc.outline_color));
 80161a8:	f3c2 02c7 	ubfx	r2, r2, #3, #8
 80161ac:	4629      	mov	r1, r5
 80161ae:	4638      	mov	r0, r7
 80161b0:	f7ff fef2 	bl	8015f98 <lv_color_mix>
 80161b4:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 80161b8:	f04f 0100 	mov.w	r1, #0
 80161bc:	f021 0107 	bic.w	r1, r1, #7
 80161c0:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 80161c4:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 80161c8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.bg_color = lv_color_mix(rect_dsc.bg_color, lv_color_black(), led->bright);
 80161cc:	f896 5026 	ldrb.w	r5, [r6, #38]	@ 0x26
 80161d0:	462a      	mov	r2, r5
 80161d2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80161d6:	f7ff fedf 	bl	8015f98 <lv_color_mix>
 80161da:	f8ad 0004 	strh.w	r0, [sp, #4]
 80161de:	f04f 0100 	mov.w	r1, #0
 80161e2:	f021 0107 	bic.w	r1, r1, #7
 80161e6:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 80161ea:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 80161ee:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.bg_grad.stops[0].color   = lv_color_mix(rect_dsc.bg_grad.stops[0].color, lv_color_black(), led->bright);
 80161f2:	462a      	mov	r2, r5
 80161f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80161f8:	f7ff fece 	bl	8015f98 <lv_color_mix>
 80161fc:	f8ad 0006 	strh.w	r0, [sp, #6]
 8016200:	f04f 0100 	mov.w	r1, #0
 8016204:	f021 0107 	bic.w	r1, r1, #7
 8016208:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 801620c:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 8016210:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.bg_grad.stops[1].color   = lv_color_mix(rect_dsc.bg_grad.stops[1].color, lv_color_black(), led->bright);
 8016214:	462a      	mov	r2, r5
 8016216:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 801621a:	f7ff febd 	bl	8015f98 <lv_color_mix>
 801621e:	f8ad 000a 	strh.w	r0, [sp, #10]
 8016222:	f04f 0100 	mov.w	r1, #0
 8016226:	f021 0107 	bic.w	r1, r1, #7
 801622a:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 801622e:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 8016232:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.border_color = lv_color_mix(rect_dsc.border_color, lv_color_black(), led->bright);
 8016236:	462a      	mov	r2, r5
 8016238:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 801623c:	f7ff feac 	bl	8015f98 <lv_color_mix>
 8016240:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016244:	f04f 0100 	mov.w	r1, #0
 8016248:	f021 0107 	bic.w	r1, r1, #7
 801624c:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 8016250:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 8016254:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.shadow_color = lv_color_mix(rect_dsc.shadow_color, lv_color_black(), led->bright);
 8016258:	462a      	mov	r2, r5
 801625a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	@ 0x2c
 801625e:	f7ff fe9b 	bl	8015f98 <lv_color_mix>
 8016262:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8016266:	f04f 0100 	mov.w	r1, #0
 801626a:	f021 0107 	bic.w	r1, r1, #7
 801626e:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 8016272:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 8016276:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        rect_dsc.outline_color = lv_color_mix(rect_dsc.outline_color, lv_color_black(), led->bright);
 801627a:	f896 5026 	ldrb.w	r5, [r6, #38]	@ 0x26
 801627e:	462a      	mov	r2, r5
 8016280:	f8bd 0024 	ldrh.w	r0, [sp, #36]	@ 0x24
 8016284:	f7ff fe88 	bl	8015f98 <lv_color_mix>
 8016288:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
        rect_dsc.shadow_width = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_width) /
 801628c:	3d50      	subs	r5, #80	@ 0x50
 801628e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8016292:	fb03 f505 	mul.w	r5, r3, r5
 8016296:	4a1d      	ldr	r2, [pc, #116]	@ (801630c <lv_led_event+0x328>)
 8016298:	fb82 1305 	smull	r1, r3, r2, r5
 801629c:	17ed      	asrs	r5, r5, #31
 801629e:	ebc5 15a3 	rsb	r5, r5, r3, asr #6
 80162a2:	f8ad 502e 	strh.w	r5, [sp, #46]	@ 0x2e
        rect_dsc.shadow_spread = ((led->bright - LV_LED_BRIGHT_MIN) * rect_dsc.shadow_spread) /
 80162a6:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 80162aa:	3b50      	subs	r3, #80	@ 0x50
 80162ac:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	@ 0x34
 80162b0:	fb01 f303 	mul.w	r3, r1, r3
 80162b4:	fb82 1203 	smull	r1, r2, r2, r3
 80162b8:	17db      	asrs	r3, r3, #31
 80162ba:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80162be:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80162c2:	4620      	mov	r0, r4
 80162c4:	f7fa fda2 	bl	8010e0c <lv_event_get_draw_ctx>
 80162c8:	4604      	mov	r4, r0
        lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80162ca:	4601      	mov	r1, r0
 80162cc:	a80e      	add	r0, sp, #56	@ 0x38
 80162ce:	f002 fffe 	bl	80192ce <lv_obj_draw_dsc_init>
        part_draw_dsc.draw_area = &obj->coords;
 80162d2:	f106 0514 	add.w	r5, r6, #20
 80162d6:	9511      	str	r5, [sp, #68]	@ 0x44
        part_draw_dsc.class_p = MY_CLASS;
 80162d8:	4b0b      	ldr	r3, [pc, #44]	@ (8016308 <lv_led_event+0x324>)
 80162da:	930f      	str	r3, [sp, #60]	@ 0x3c
        part_draw_dsc.type = LV_LED_DRAW_PART_RECTANGLE;
 80162dc:	2300      	movs	r3, #0
 80162de:	9310      	str	r3, [sp, #64]	@ 0x40
        part_draw_dsc.rect_dsc = &rect_dsc;
 80162e0:	f8cd d048 	str.w	sp, [sp, #72]	@ 0x48
        part_draw_dsc.part = LV_PART_MAIN;
 80162e4:	931b      	str	r3, [sp, #108]	@ 0x6c
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80162e6:	aa0e      	add	r2, sp, #56	@ 0x38
 80162e8:	211a      	movs	r1, #26
 80162ea:	4630      	mov	r0, r6
 80162ec:	f7fa fcec 	bl	8010cc8 <lv_event_send>
        lv_draw_rect(draw_ctx, &rect_dsc, &obj->coords);
 80162f0:	462a      	mov	r2, r5
 80162f2:	4669      	mov	r1, sp
 80162f4:	4620      	mov	r0, r4
 80162f6:	f7f3 fced 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 80162fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80162fc:	211b      	movs	r1, #27
 80162fe:	4630      	mov	r0, r6
 8016300:	f7fa fce2 	bl	8010cc8 <lv_event_send>
 8016304:	e686      	b.n	8016014 <lv_led_event+0x30>
 8016306:	bf00      	nop
 8016308:	0802dbcc 	.word	0x0802dbcc
 801630c:	5d9f7391 	.word	0x5d9f7391

08016310 <lv_led_constructor>:
{
 8016310:	b510      	push	{r4, lr}
 8016312:	460c      	mov	r4, r1
    led->color = lv_theme_get_color_primary(obj);
 8016314:	4608      	mov	r0, r1
 8016316:	f00d fb43 	bl	80239a0 <lv_theme_get_color_primary>
 801631a:	84a0      	strh	r0, [r4, #36]	@ 0x24
    led->bright = LV_LED_BRIGHT_MAX;
 801631c:	23ff      	movs	r3, #255	@ 0xff
 801631e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
}
 8016322:	bd10      	pop	{r4, pc}

08016324 <lv_line_event>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_line_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 8016324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016328:	b089      	sub	sp, #36	@ 0x24
 801632a:	460c      	mov	r4, r1
    LV_UNUSED(class_p);

    lv_res_t res;

    /*Call the ancestor's event handler*/
    res = lv_obj_event_base(MY_CLASS, e);
 801632c:	485c      	ldr	r0, [pc, #368]	@ (80164a0 <lv_line_event+0x17c>)
 801632e:	f7fa fc21 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8016332:	2801      	cmp	r0, #1
 8016334:	d002      	beq.n	801633c <lv_line_event+0x18>
            }
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
        }
    }
}
 8016336:	b009      	add	sp, #36	@ 0x24
 8016338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801633c:	4620      	mov	r0, r4
 801633e:	f7fa fcf1 	bl	8010d24 <lv_event_get_code>
 8016342:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8016344:	4620      	mov	r0, r4
 8016346:	f7fa fce9 	bl	8010d1c <lv_event_get_target>
 801634a:	4605      	mov	r5, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801634c:	2e13      	cmp	r6, #19
 801634e:	d02f      	beq.n	80163b0 <lv_line_event+0x8c>
    else if(code == LV_EVENT_GET_SELF_SIZE) {
 8016350:	2e2c      	cmp	r6, #44	@ 0x2c
 8016352:	d03b      	beq.n	80163cc <lv_line_event+0xa8>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8016354:	2e15      	cmp	r6, #21
 8016356:	d1ee      	bne.n	8016336 <lv_line_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8016358:	4620      	mov	r0, r4
 801635a:	f7fa fd57 	bl	8010e0c <lv_event_get_draw_ctx>
 801635e:	4680      	mov	r8, r0
        if(line->point_num == 0 || line->point_array == NULL) return;
 8016360:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 8016362:	2b00      	cmp	r3, #0
 8016364:	d0e7      	beq.n	8016336 <lv_line_event+0x12>
 8016366:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016368:	2b00      	cmp	r3, #0
 801636a:	d0e4      	beq.n	8016336 <lv_line_event+0x12>
        lv_obj_get_coords(obj, &area);
 801636c:	a903      	add	r1, sp, #12
 801636e:	4628      	mov	r0, r5
 8016370:	f003 f95b 	bl	801962a <lv_obj_get_coords>
        lv_coord_t x_ofs = area.x1 - lv_obj_get_scroll_x(obj);
 8016374:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8016378:	4628      	mov	r0, r5
 801637a:	f004 fd35 	bl	801ade8 <lv_obj_get_scroll_x>
 801637e:	b280      	uxth	r0, r0
 8016380:	1a36      	subs	r6, r6, r0
 8016382:	b2b6      	uxth	r6, r6
        lv_coord_t y_ofs = area.y1 - lv_obj_get_scroll_y(obj);
 8016384:	f8bd 700e 	ldrh.w	r7, [sp, #14]
 8016388:	4628      	mov	r0, r5
 801638a:	f004 fd35 	bl	801adf8 <lv_obj_get_scroll_y>
 801638e:	b280      	uxth	r0, r0
 8016390:	1a3f      	subs	r7, r7, r0
 8016392:	b2bf      	uxth	r7, r7
        lv_coord_t h = lv_obj_get_height(obj);
 8016394:	4628      	mov	r0, r5
 8016396:	f003 f9a2 	bl	80196de <lv_obj_get_height>
 801639a:	4681      	mov	r9, r0
        lv_draw_line_dsc_init(&line_dsc);
 801639c:	a805      	add	r0, sp, #20
 801639e:	f7f2 f980 	bl	80086a2 <lv_draw_line_dsc_init>
        lv_obj_init_draw_line_dsc(obj, LV_PART_MAIN, &line_dsc);
 80163a2:	aa05      	add	r2, sp, #20
 80163a4:	2100      	movs	r1, #0
 80163a6:	4628      	mov	r0, r5
 80163a8:	f002 fe83 	bl	80190b2 <lv_obj_init_draw_line_dsc>
        for(i = 0; i < line->point_num - 1; i++) {
 80163ac:	2400      	movs	r4, #0
 80163ae:	e054      	b.n	801645a <lv_line_event+0x136>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80163b0:	2249      	movs	r2, #73	@ 0x49
 80163b2:	2100      	movs	r1, #0
 80163b4:	f006 f99e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80163b8:	b205      	sxth	r5, r0
        lv_coord_t * s = lv_event_get_param(e);
 80163ba:	4620      	mov	r0, r4
 80163bc:	f7fa fcb6 	bl	8010d2c <lv_event_get_param>
        if(*s < line_width) *s = line_width;
 80163c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80163c4:	42ab      	cmp	r3, r5
 80163c6:	dab6      	bge.n	8016336 <lv_line_event+0x12>
 80163c8:	8005      	strh	r5, [r0, #0]
 80163ca:	e7b4      	b.n	8016336 <lv_line_event+0x12>
        if(line->point_num == 0 || line->point_array == NULL) return;
 80163cc:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d0b1      	beq.n	8016336 <lv_line_event+0x12>
 80163d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d0ae      	beq.n	8016336 <lv_line_event+0x12>
        lv_point_t * p = lv_event_get_param(e);
 80163d8:	4620      	mov	r0, r4
 80163da:	f7fa fca7 	bl	8010d2c <lv_event_get_param>
 80163de:	4607      	mov	r7, r0
        for(i = 0; i < line->point_num; i++) {
 80163e0:	2300      	movs	r3, #0
        lv_coord_t h = 0;
 80163e2:	461e      	mov	r6, r3
        lv_coord_t w = 0;
 80163e4:	461c      	mov	r4, r3
        for(i = 0; i < line->point_num; i++) {
 80163e6:	e00e      	b.n	8016406 <lv_line_event+0xe2>
            w = LV_MAX(line->point_array[i].x, w);
 80163e8:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80163ea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80163ee:	f932 2023 	ldrsh.w	r2, [r2, r3, lsl #2]
 80163f2:	4294      	cmp	r4, r2
 80163f4:	bfb8      	it	lt
 80163f6:	4614      	movlt	r4, r2
            h = LV_MAX(line->point_array[i].y, h);
 80163f8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80163fc:	4296      	cmp	r6, r2
 80163fe:	bfb8      	it	lt
 8016400:	4616      	movlt	r6, r2
        for(i = 0; i < line->point_num; i++) {
 8016402:	3301      	adds	r3, #1
 8016404:	b29b      	uxth	r3, r3
 8016406:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8016408:	429a      	cmp	r2, r3
 801640a:	d8ed      	bhi.n	80163e8 <lv_line_event+0xc4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 801640c:	2249      	movs	r2, #73	@ 0x49
 801640e:	2100      	movs	r1, #0
 8016410:	4628      	mov	r0, r5
 8016412:	f006 f96f 	bl	801c6f4 <lv_obj_get_style_prop>
        w += line_width;
 8016416:	b280      	uxth	r0, r0
 8016418:	4404      	add	r4, r0
        h += line_width;
 801641a:	4430      	add	r0, r6
        p->x = w;
 801641c:	803c      	strh	r4, [r7, #0]
        p->y = h;
 801641e:	8078      	strh	r0, [r7, #2]
 8016420:	e789      	b.n	8016336 <lv_line_event+0x12>
                p1.y = h - line->point_array[i].y + y_ofs;
 8016422:	fa1f f389 	uxth.w	r3, r9
 8016426:	884a      	ldrh	r2, [r1, #2]
 8016428:	1a9a      	subs	r2, r3, r2
 801642a:	fa17 f282 	uxtah	r2, r7, r2
 801642e:	f8ad 2006 	strh.w	r2, [sp, #6]
                p2.y = h - line->point_array[i + 1].y + y_ofs;
 8016432:	8842      	ldrh	r2, [r0, #2]
 8016434:	1a9b      	subs	r3, r3, r2
 8016436:	fa17 f383 	uxtah	r3, r7, r3
 801643a:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_line(draw_ctx, &line_dsc, &p1, &p2);
 801643e:	ab02      	add	r3, sp, #8
 8016440:	aa01      	add	r2, sp, #4
 8016442:	a905      	add	r1, sp, #20
 8016444:	4640      	mov	r0, r8
 8016446:	f7f2 f941 	bl	80086cc <lv_draw_line>
            line_dsc.round_start = 0;   /*Draw the rounding only on the end points after the first line*/
 801644a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801644e:	f023 0304 	bic.w	r3, r3, #4
 8016452:	f88d 301d 	strb.w	r3, [sp, #29]
        for(i = 0; i < line->point_num - 1; i++) {
 8016456:	3401      	adds	r4, #1
 8016458:	b2a4      	uxth	r4, r4
 801645a:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 801645c:	3b01      	subs	r3, #1
 801645e:	429c      	cmp	r4, r3
 8016460:	f6bf af69 	bge.w	8016336 <lv_line_event+0x12>
            p1.x = line->point_array[i].x + x_ofs;
 8016464:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016466:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 801646a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 801646e:	4432      	add	r2, r6
 8016470:	f8ad 2004 	strh.w	r2, [sp, #4]
            p2.x = line->point_array[i + 1].x + x_ofs;
 8016474:	1c62      	adds	r2, r4, #1
 8016476:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801647a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 801647e:	4433      	add	r3, r6
 8016480:	f8ad 3008 	strh.w	r3, [sp, #8]
            if(line->y_inv == 0) {
 8016484:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 8016488:	f013 0f01 	tst.w	r3, #1
 801648c:	d1c9      	bne.n	8016422 <lv_line_event+0xfe>
                p1.y = line->point_array[i].y + y_ofs;
 801648e:	884b      	ldrh	r3, [r1, #2]
 8016490:	443b      	add	r3, r7
 8016492:	f8ad 3006 	strh.w	r3, [sp, #6]
                p2.y = line->point_array[i + 1].y + y_ofs;
 8016496:	8843      	ldrh	r3, [r0, #2]
 8016498:	443b      	add	r3, r7
 801649a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801649e:	e7ce      	b.n	801643e <lv_line_event+0x11a>
 80164a0:	0802dbe8 	.word	0x0802dbe8

080164a4 <lv_line_constructor>:
{
 80164a4:	b508      	push	{r3, lr}
 80164a6:	4608      	mov	r0, r1
    line->point_num   = 0;
 80164a8:	2300      	movs	r3, #0
 80164aa:	850b      	strh	r3, [r1, #40]	@ 0x28
    line->point_array = NULL;
 80164ac:	624b      	str	r3, [r1, #36]	@ 0x24
    line->y_inv       = 0;
 80164ae:	f891 202a 	ldrb.w	r2, [r1, #42]	@ 0x2a
 80164b2:	f363 0200 	bfi	r2, r3, #0, #1
 80164b6:	f881 202a 	strb.w	r2, [r1, #42]	@ 0x2a
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 80164ba:	2102      	movs	r1, #2
 80164bc:	f001 ff90 	bl	80183e0 <lv_obj_clear_flag>
}
 80164c0:	bd08      	pop	{r3, pc}

080164c2 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 80164c2:	460b      	mov	r3, r1
 80164c4:	b109      	cbz	r1, 80164ca <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_PREV_P_OFFSET(ll_p);
 80164c6:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
 80164c8:	505a      	str	r2, [r3, r1]
}
 80164ca:	4770      	bx	lr

080164cc <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 80164cc:	b111      	cbz	r1, 80164d4 <node_set_next+0x8>
    uint8_t * act8 = (uint8_t *)act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
 80164ce:	6803      	ldr	r3, [r0, #0]
 80164d0:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
 80164d2:	50ca      	str	r2, [r1, r3]
}
 80164d4:	4770      	bx	lr

080164d6 <_lv_ll_init>:
    ll_p->head = NULL;
 80164d6:	2300      	movs	r3, #0
 80164d8:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
 80164da:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
 80164dc:	3103      	adds	r1, #3
 80164de:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
 80164e2:	6001      	str	r1, [r0, #0]
}
 80164e4:	4770      	bx	lr

080164e6 <_lv_ll_ins_head>:
{
 80164e6:	b538      	push	{r3, r4, r5, lr}
 80164e8:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 80164ea:	6800      	ldr	r0, [r0, #0]
 80164ec:	3008      	adds	r0, #8
 80164ee:	f000 fa13 	bl	8016918 <lv_mem_alloc>
    if(n_new != NULL) {
 80164f2:	4605      	mov	r5, r0
 80164f4:	b190      	cbz	r0, 801651c <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 80164f6:	2200      	movs	r2, #0
 80164f8:	4601      	mov	r1, r0
 80164fa:	4620      	mov	r0, r4
 80164fc:	f7ff ffe1 	bl	80164c2 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 8016500:	6862      	ldr	r2, [r4, #4]
 8016502:	4629      	mov	r1, r5
 8016504:	4620      	mov	r0, r4
 8016506:	f7ff ffe1 	bl	80164cc <node_set_next>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 801650a:	6861      	ldr	r1, [r4, #4]
 801650c:	b119      	cbz	r1, 8016516 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
 801650e:	462a      	mov	r2, r5
 8016510:	4620      	mov	r0, r4
 8016512:	f7ff ffd6 	bl	80164c2 <node_set_prev>
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 8016516:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 8016518:	68a3      	ldr	r3, [r4, #8]
 801651a:	b10b      	cbz	r3, 8016520 <_lv_ll_ins_head+0x3a>
}
 801651c:	4628      	mov	r0, r5
 801651e:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
 8016520:	60a5      	str	r5, [r4, #8]
    return n_new;
 8016522:	e7fb      	b.n	801651c <_lv_ll_ins_head+0x36>

08016524 <_lv_ll_ins_tail>:
{
 8016524:	b538      	push	{r3, r4, r5, lr}
 8016526:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8016528:	6800      	ldr	r0, [r0, #0]
 801652a:	3008      	adds	r0, #8
 801652c:	f000 f9f4 	bl	8016918 <lv_mem_alloc>
    if(n_new != NULL) {
 8016530:	4605      	mov	r5, r0
 8016532:	b190      	cbz	r0, 801655a <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 8016534:	2200      	movs	r2, #0
 8016536:	4601      	mov	r1, r0
 8016538:	4620      	mov	r0, r4
 801653a:	f7ff ffc7 	bl	80164cc <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
 801653e:	68a2      	ldr	r2, [r4, #8]
 8016540:	4629      	mov	r1, r5
 8016542:	4620      	mov	r0, r4
 8016544:	f7ff ffbd 	bl	80164c2 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 8016548:	68a1      	ldr	r1, [r4, #8]
 801654a:	b119      	cbz	r1, 8016554 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
 801654c:	462a      	mov	r2, r5
 801654e:	4620      	mov	r0, r4
 8016550:	f7ff ffbc 	bl	80164cc <node_set_next>
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 8016554:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 8016556:	6863      	ldr	r3, [r4, #4]
 8016558:	b10b      	cbz	r3, 801655e <_lv_ll_ins_tail+0x3a>
}
 801655a:	4628      	mov	r0, r5
 801655c:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
 801655e:	6065      	str	r5, [r4, #4]
    return n_new;
 8016560:	e7fb      	b.n	801655a <_lv_ll_ins_tail+0x36>

08016562 <_lv_ll_get_head>:
    if(ll_p == NULL) return NULL;
 8016562:	b108      	cbz	r0, 8016568 <_lv_ll_get_head+0x6>
    return ll_p->head;
 8016564:	6840      	ldr	r0, [r0, #4]
 8016566:	4770      	bx	lr
}
 8016568:	4770      	bx	lr

0801656a <_lv_ll_get_tail>:
    if(ll_p == NULL) return NULL;
 801656a:	b108      	cbz	r0, 8016570 <_lv_ll_get_tail+0x6>
    return ll_p->tail;
 801656c:	6880      	ldr	r0, [r0, #8]
 801656e:	4770      	bx	lr
}
 8016570:	4770      	bx	lr

08016572 <_lv_ll_get_next>:
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
 8016572:	6803      	ldr	r3, [r0, #0]
 8016574:	3304      	adds	r3, #4
}
 8016576:	58c8      	ldr	r0, [r1, r3]
 8016578:	4770      	bx	lr

0801657a <_lv_ll_get_prev>:
    n_act_d += LL_PREV_P_OFFSET(ll_p);
 801657a:	6803      	ldr	r3, [r0, #0]
}
 801657c:	58c8      	ldr	r0, [r1, r3]
 801657e:	4770      	bx	lr

08016580 <_lv_ll_ins_prev>:
{
 8016580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(NULL == ll_p || NULL == n_act) return NULL;
 8016582:	4607      	mov	r7, r0
 8016584:	b358      	cbz	r0, 80165de <_lv_ll_ins_prev+0x5e>
 8016586:	460c      	mov	r4, r1
 8016588:	b359      	cbz	r1, 80165e2 <_lv_ll_ins_prev+0x62>
    if(_lv_ll_get_head(ll_p) == n_act) {
 801658a:	f7ff ffea 	bl	8016562 <_lv_ll_get_head>
 801658e:	4284      	cmp	r4, r0
 8016590:	d020      	beq.n	80165d4 <_lv_ll_ins_prev+0x54>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 8016592:	6838      	ldr	r0, [r7, #0]
 8016594:	3008      	adds	r0, #8
 8016596:	f000 f9bf 	bl	8016918 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
 801659a:	4605      	mov	r5, r0
 801659c:	b1c0      	cbz	r0, 80165d0 <_lv_ll_ins_prev+0x50>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
 801659e:	4621      	mov	r1, r4
 80165a0:	4638      	mov	r0, r7
 80165a2:	f7ff ffea 	bl	801657a <_lv_ll_get_prev>
 80165a6:	4606      	mov	r6, r0
        node_set_next(ll_p, n_prev, n_new);
 80165a8:	462a      	mov	r2, r5
 80165aa:	4601      	mov	r1, r0
 80165ac:	4638      	mov	r0, r7
 80165ae:	f7ff ff8d 	bl	80164cc <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 80165b2:	4632      	mov	r2, r6
 80165b4:	4629      	mov	r1, r5
 80165b6:	4638      	mov	r0, r7
 80165b8:	f7ff ff83 	bl	80164c2 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 80165bc:	462a      	mov	r2, r5
 80165be:	4621      	mov	r1, r4
 80165c0:	4638      	mov	r0, r7
 80165c2:	f7ff ff7e 	bl	80164c2 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 80165c6:	4622      	mov	r2, r4
 80165c8:	4629      	mov	r1, r5
 80165ca:	4638      	mov	r0, r7
 80165cc:	f7ff ff7e 	bl	80164cc <node_set_next>
}
 80165d0:	4628      	mov	r0, r5
 80165d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = _lv_ll_ins_head(ll_p);
 80165d4:	4638      	mov	r0, r7
 80165d6:	f7ff ff86 	bl	80164e6 <_lv_ll_ins_head>
 80165da:	4605      	mov	r5, r0
        if(n_new == NULL) return NULL;
 80165dc:	e7f8      	b.n	80165d0 <_lv_ll_ins_prev+0x50>
    if(NULL == ll_p || NULL == n_act) return NULL;
 80165de:	4605      	mov	r5, r0
 80165e0:	e7f6      	b.n	80165d0 <_lv_ll_ins_prev+0x50>
 80165e2:	460d      	mov	r5, r1
 80165e4:	e7f4      	b.n	80165d0 <_lv_ll_ins_prev+0x50>

080165e6 <_lv_ll_remove>:
    if(ll_p == NULL) return;
 80165e6:	2800      	cmp	r0, #0
 80165e8:	d03e      	beq.n	8016668 <_lv_ll_remove+0x82>
{
 80165ea:	b570      	push	{r4, r5, r6, lr}
 80165ec:	460c      	mov	r4, r1
 80165ee:	4605      	mov	r5, r0
    if(_lv_ll_get_head(ll_p) == node_p) {
 80165f0:	f7ff ffb7 	bl	8016562 <_lv_ll_get_head>
 80165f4:	4284      	cmp	r4, r0
 80165f6:	d019      	beq.n	801662c <_lv_ll_remove+0x46>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
 80165f8:	4628      	mov	r0, r5
 80165fa:	f7ff ffb6 	bl	801656a <_lv_ll_get_tail>
 80165fe:	4284      	cmp	r4, r0
 8016600:	d023      	beq.n	801664a <_lv_ll_remove+0x64>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
 8016602:	4621      	mov	r1, r4
 8016604:	4628      	mov	r0, r5
 8016606:	f7ff ffb8 	bl	801657a <_lv_ll_get_prev>
 801660a:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
 801660c:	4621      	mov	r1, r4
 801660e:	4628      	mov	r0, r5
 8016610:	f7ff ffaf 	bl	8016572 <_lv_ll_get_next>
 8016614:	4604      	mov	r4, r0
        node_set_next(ll_p, n_prev, n_next);
 8016616:	4602      	mov	r2, r0
 8016618:	4631      	mov	r1, r6
 801661a:	4628      	mov	r0, r5
 801661c:	f7ff ff56 	bl	80164cc <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 8016620:	4632      	mov	r2, r6
 8016622:	4621      	mov	r1, r4
 8016624:	4628      	mov	r0, r5
 8016626:	f7ff ff4c 	bl	80164c2 <node_set_prev>
}
 801662a:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
 801662c:	4621      	mov	r1, r4
 801662e:	4628      	mov	r0, r5
 8016630:	f7ff ff9f 	bl	8016572 <_lv_ll_get_next>
 8016634:	4601      	mov	r1, r0
 8016636:	6068      	str	r0, [r5, #4]
        if(ll_p->head == NULL) {
 8016638:	b120      	cbz	r0, 8016644 <_lv_ll_remove+0x5e>
            node_set_prev(ll_p, ll_p->head, NULL);
 801663a:	2200      	movs	r2, #0
 801663c:	4628      	mov	r0, r5
 801663e:	f7ff ff40 	bl	80164c2 <node_set_prev>
 8016642:	e7f2      	b.n	801662a <_lv_ll_remove+0x44>
            ll_p->tail = NULL;
 8016644:	2300      	movs	r3, #0
 8016646:	60ab      	str	r3, [r5, #8]
 8016648:	e7ef      	b.n	801662a <_lv_ll_remove+0x44>
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
 801664a:	4621      	mov	r1, r4
 801664c:	4628      	mov	r0, r5
 801664e:	f7ff ff94 	bl	801657a <_lv_ll_get_prev>
 8016652:	4601      	mov	r1, r0
 8016654:	60a8      	str	r0, [r5, #8]
        if(ll_p->tail == NULL) {
 8016656:	b120      	cbz	r0, 8016662 <_lv_ll_remove+0x7c>
            node_set_next(ll_p, ll_p->tail, NULL);
 8016658:	2200      	movs	r2, #0
 801665a:	4628      	mov	r0, r5
 801665c:	f7ff ff36 	bl	80164cc <node_set_next>
 8016660:	e7e3      	b.n	801662a <_lv_ll_remove+0x44>
            ll_p->head = NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	606b      	str	r3, [r5, #4]
 8016666:	e7e0      	b.n	801662a <_lv_ll_remove+0x44>
 8016668:	4770      	bx	lr

0801666a <_lv_ll_clear>:
{
 801666a:	b570      	push	{r4, r5, r6, lr}
 801666c:	4606      	mov	r6, r0
    i      = _lv_ll_get_head(ll_p);
 801666e:	f7ff ff78 	bl	8016562 <_lv_ll_get_head>
 8016672:	4604      	mov	r4, r0
    while(i != NULL) {
 8016674:	e00c      	b.n	8016690 <_lv_ll_clear+0x26>
        i_next = _lv_ll_get_next(ll_p, i);
 8016676:	4621      	mov	r1, r4
 8016678:	4630      	mov	r0, r6
 801667a:	f7ff ff7a 	bl	8016572 <_lv_ll_get_next>
 801667e:	4605      	mov	r5, r0
        _lv_ll_remove(ll_p, i);
 8016680:	4621      	mov	r1, r4
 8016682:	4630      	mov	r0, r6
 8016684:	f7ff ffaf 	bl	80165e6 <_lv_ll_remove>
        lv_mem_free(i);
 8016688:	4620      	mov	r0, r4
 801668a:	f000 f963 	bl	8016954 <lv_mem_free>
        i = i_next;
 801668e:	462c      	mov	r4, r5
    while(i != NULL) {
 8016690:	2c00      	cmp	r4, #0
 8016692:	d1f0      	bne.n	8016676 <_lv_ll_clear+0xc>
}
 8016694:	bd70      	pop	{r4, r5, r6, pc}

08016696 <_lv_ll_get_len>:
{
 8016696:	b538      	push	{r3, r4, r5, lr}
 8016698:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 801669a:	f7ff ff62 	bl	8016562 <_lv_ll_get_head>
 801669e:	4601      	mov	r1, r0
    uint32_t len = 0;
 80166a0:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 80166a2:	e004      	b.n	80166ae <_lv_ll_get_len+0x18>
        len++;
 80166a4:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
 80166a6:	4628      	mov	r0, r5
 80166a8:	f7ff ff63 	bl	8016572 <_lv_ll_get_next>
 80166ac:	4601      	mov	r1, r0
 80166ae:	2900      	cmp	r1, #0
 80166b0:	d1f8      	bne.n	80166a4 <_lv_ll_get_len+0xe>
}
 80166b2:	4620      	mov	r0, r4
 80166b4:	bd38      	pop	{r3, r4, r5, pc}

080166b6 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
 80166b6:	b138      	cbz	r0, 80166c8 <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80166b8:	6842      	ldr	r2, [r0, #4]
 80166ba:	b10a      	cbz	r2, 80166c0 <_lv_ll_is_empty+0xa>
    return false;
 80166bc:	2000      	movs	r0, #0
 80166be:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80166c0:	6883      	ldr	r3, [r0, #8]
 80166c2:	b11b      	cbz	r3, 80166cc <_lv_ll_is_empty+0x16>
    return false;
 80166c4:	2000      	movs	r0, #0
 80166c6:	4770      	bx	lr
    if(ll_p == NULL) return true;
 80166c8:	2001      	movs	r0, #1
 80166ca:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 80166cc:	2001      	movs	r0, #1
}
 80166ce:	4770      	bx	lr

080166d0 <lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
int16_t LV_ATTRIBUTE_FAST_MEM lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
 80166d0:	4b1c      	ldr	r3, [pc, #112]	@ (8016744 <lv_trigo_sin+0x74>)
 80166d2:	fb83 2300 	smull	r2, r3, r3, r0
 80166d6:	4403      	add	r3, r0
 80166d8:	17c2      	asrs	r2, r0, #31
 80166da:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 80166de:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80166e2:	fb02 0013 	mls	r0, r2, r3, r0
 80166e6:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
 80166e8:	2800      	cmp	r0, #0
 80166ea:	db05      	blt.n	80166f8 <lv_trigo_sin+0x28>

    if(angle < 90) {
 80166ec:	2859      	cmp	r0, #89	@ 0x59
 80166ee:	dc06      	bgt.n	80166fe <lv_trigo_sin+0x2e>
        ret = sin0_90_table[angle];
 80166f0:	4b15      	ldr	r3, [pc, #84]	@ (8016748 <lv_trigo_sin+0x78>)
 80166f2:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 80166f6:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
 80166f8:	4410      	add	r0, r2
 80166fa:	b200      	sxth	r0, r0
 80166fc:	e7f6      	b.n	80166ec <lv_trigo_sin+0x1c>
    }
    else if(angle >= 90 && angle < 180) {
 80166fe:	b280      	uxth	r0, r0
 8016700:	f1a0 035a 	sub.w	r3, r0, #90	@ 0x5a
 8016704:	b29b      	uxth	r3, r3
 8016706:	2b59      	cmp	r3, #89	@ 0x59
 8016708:	d806      	bhi.n	8016718 <lv_trigo_sin+0x48>
        angle = 180 - angle;
 801670a:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 801670e:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
 8016710:	4b0d      	ldr	r3, [pc, #52]	@ (8016748 <lv_trigo_sin+0x78>)
 8016712:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
 8016716:	4770      	bx	lr
    }
    else if(angle >= 180 && angle < 270) {
 8016718:	f1a0 03b4 	sub.w	r3, r0, #180	@ 0xb4
 801671c:	b29b      	uxth	r3, r3
 801671e:	2b59      	cmp	r3, #89	@ 0x59
 8016720:	d806      	bhi.n	8016730 <lv_trigo_sin+0x60>
        angle = angle - 180;
 8016722:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
 8016724:	4a08      	ldr	r2, [pc, #32]	@ (8016748 <lv_trigo_sin+0x78>)
 8016726:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 801672a:	4240      	negs	r0, r0
 801672c:	b200      	sxth	r0, r0
 801672e:	4770      	bx	lr
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
 8016730:	f5c0 70b4 	rsb	r0, r0, #360	@ 0x168
 8016734:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
 8016736:	4b04      	ldr	r3, [pc, #16]	@ (8016748 <lv_trigo_sin+0x78>)
 8016738:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801673c:	4240      	negs	r0, r0
 801673e:	b200      	sxth	r0, r0
    }

    return ret;
}
 8016740:	4770      	bx	lr
 8016742:	bf00      	nop
 8016744:	b60b60b7 	.word	0xb60b60b7
 8016748:	0802dc58 	.word	0x0802dc58

0801674c <lv_bezier3>:
 * @param u2 control value 2 in range of [0..LV_BEZIER_VAL_MAX]
 * @param u3 end values in range of [0..LV_BEZIER_VAL_MAX]
 * @return the value calculated from the given parameters in range of [0..LV_BEZIER_VAL_MAX]
 */
uint32_t lv_bezier3(uint32_t t, uint32_t u0, uint32_t u1, uint32_t u2, uint32_t u3)
{
 801674c:	b570      	push	{r4, r5, r6, lr}
    uint32_t t_rem  = 1024 - t;
 801674e:	f5c0 6c80 	rsb	ip, r0, #1024	@ 0x400
    uint32_t t_rem2 = (t_rem * t_rem) >> 10;
 8016752:	fb0c f40c 	mul.w	r4, ip, ip
 8016756:	0aa4      	lsrs	r4, r4, #10
    uint32_t t_rem3 = (t_rem2 * t_rem) >> 10;
 8016758:	fb04 f60c 	mul.w	r6, r4, ip
 801675c:	0ab6      	lsrs	r6, r6, #10
    uint32_t t2     = (t * t) >> 10;
 801675e:	fb00 fe00 	mul.w	lr, r0, r0
 8016762:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
    uint32_t t3     = (t2 * t) >> 10;
 8016766:	fb0e f500 	mul.w	r5, lr, r0
 801676a:	0aad      	lsrs	r5, r5, #10

    uint32_t v1 = (t_rem3 * u0) >> 10;
 801676c:	fb01 f606 	mul.w	r6, r1, r6
    uint32_t v2 = (3 * t_rem2 * t * u1) >> 20;
 8016770:	fb04 f000 	mul.w	r0, r4, r0
 8016774:	fb00 f202 	mul.w	r2, r0, r2
 8016778:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801677c:	0d12      	lsrs	r2, r2, #20
    uint32_t v3 = (3 * t_rem * t2 * u2) >> 20;
 801677e:	fb0e fc0c 	mul.w	ip, lr, ip
 8016782:	fb03 fc0c 	mul.w	ip, r3, ip
 8016786:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    uint32_t v4 = (t3 * u3) >> 10;
 801678a:	9b04      	ldr	r3, [sp, #16]
 801678c:	fb03 f005 	mul.w	r0, r3, r5

    return v1 + v2 + v3 + v4;
 8016790:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8016794:	eb02 521c 	add.w	r2, r2, ip, lsr #20
}
 8016798:	eb02 2090 	add.w	r0, r2, r0, lsr #10
 801679c:	bd70      	pop	{r4, r5, r6, pc}

0801679e <lv_atan2>:
    unsigned int ux;
    unsigned int uy;

    // Save the sign flags then remove signs and get XY as unsigned ints
    negflag = 0;
    if(x < 0) {
 801679e:	2800      	cmp	r0, #0
 80167a0:	db15      	blt.n	80167ce <lv_atan2+0x30>
    negflag = 0;
 80167a2:	2300      	movs	r3, #0
        negflag += 0x01;    // x flag bit
        x = (0 - x);        // is now +
    }
    ux = x;                // copy to unsigned var before multiply
    if(y < 0) {
 80167a4:	2900      	cmp	r1, #0
 80167a6:	db15      	blt.n	80167d4 <lv_atan2+0x36>
        y = (0 - y);        // is now +
    }
    uy = y;                // copy to unsigned var before multiply

    // 1. Calc the scaled "degrees"
    if(ux > uy) {
 80167a8:	4288      	cmp	r0, r1
 80167aa:	d917      	bls.n	80167dc <lv_atan2+0x3e>
        degree = (uy * 45) / ux;   // degree result will be 0-45 range
 80167ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80167b0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80167b4:	fbb1 f1f0 	udiv	r1, r1, r0
        negflag += 0x10;    // octant flag bit
 80167b8:	3310      	adds	r3, #16
 80167ba:	b2db      	uxtb	r3, r3
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
    }

    // 2. Compensate for the 4 degree error curve
    comp = 0;
    tempdegree = degree;    // use an unsigned char for speed!
 80167bc:	b2ca      	uxtb	r2, r1
    if(tempdegree > 22) {    // if top half of range
 80167be:	2a16      	cmp	r2, #22
 80167c0:	d91d      	bls.n	80167fe <lv_atan2+0x60>
        if(tempdegree <= 44) comp++;
 80167c2:	2a2c      	cmp	r2, #44	@ 0x2c
 80167c4:	d811      	bhi.n	80167ea <lv_atan2+0x4c>
        if(tempdegree <= 41) comp++;
 80167c6:	2a29      	cmp	r2, #41	@ 0x29
 80167c8:	d823      	bhi.n	8016812 <lv_atan2+0x74>
 80167ca:	2002      	movs	r0, #2
 80167cc:	e00e      	b.n	80167ec <lv_atan2+0x4e>
        x = (0 - x);        // is now +
 80167ce:	4240      	negs	r0, r0
        negflag += 0x01;    // x flag bit
 80167d0:	2301      	movs	r3, #1
 80167d2:	e7e7      	b.n	80167a4 <lv_atan2+0x6>
        negflag += 0x02;    // y flag bit
 80167d4:	3302      	adds	r3, #2
 80167d6:	b2db      	uxtb	r3, r3
        y = (0 - y);        // is now +
 80167d8:	4249      	negs	r1, r1
 80167da:	e7e5      	b.n	80167a8 <lv_atan2+0xa>
        degree = (ux * 45) / uy;   // degree result will be 0-45 range
 80167dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80167e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 80167e4:	fbb0 f1f1 	udiv	r1, r0, r1
 80167e8:	e7e8      	b.n	80167bc <lv_atan2+0x1e>
    comp = 0;
 80167ea:	2000      	movs	r0, #0
        if(tempdegree <= 37) comp++;
 80167ec:	2a25      	cmp	r2, #37	@ 0x25
 80167ee:	d813      	bhi.n	8016818 <lv_atan2+0x7a>
 80167f0:	3001      	adds	r0, #1
 80167f2:	b2c0      	uxtb	r0, r0
        if(tempdegree <= 32) comp++;  // max is 4 degrees compensated
 80167f4:	2a20      	cmp	r2, #32
 80167f6:	d80f      	bhi.n	8016818 <lv_atan2+0x7a>
 80167f8:	3001      	adds	r0, #1
 80167fa:	b2c0      	uxtb	r0, r0
 80167fc:	e00c      	b.n	8016818 <lv_atan2+0x7a>
    }
    else {   // else is lower half of range
        if(tempdegree >= 2) comp++;
 80167fe:	2a01      	cmp	r2, #1
 8016800:	d909      	bls.n	8016816 <lv_atan2+0x78>
        if(tempdegree >= 6) comp++;
 8016802:	2a05      	cmp	r2, #5
 8016804:	d917      	bls.n	8016836 <lv_atan2+0x98>
        if(tempdegree >= 10) comp++;
 8016806:	2a09      	cmp	r2, #9
 8016808:	d917      	bls.n	801683a <lv_atan2+0x9c>
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801680a:	2a0e      	cmp	r2, #14
 801680c:	d817      	bhi.n	801683e <lv_atan2+0xa0>
 801680e:	2003      	movs	r0, #3
 8016810:	e002      	b.n	8016818 <lv_atan2+0x7a>
 8016812:	2001      	movs	r0, #1
 8016814:	e000      	b.n	8016818 <lv_atan2+0x7a>
    comp = 0;
 8016816:	2000      	movs	r0, #0
    }
    degree += comp;   // degree is now accurate to +/- 1 degree!
 8016818:	4408      	add	r0, r1

    // Invert degree if it was X>Y octant, makes 0-45 into 90-45
    if(negflag & 0x10) degree = (90 - degree);
 801681a:	f013 0f10 	tst.w	r3, #16
 801681e:	d001      	beq.n	8016824 <lv_atan2+0x86>
 8016820:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a

    // 3. Degree is now 0-90 range for this quadrant,
    // need to invert it for whichever quadrant it was in
    if(negflag & 0x02) { // if -Y
 8016824:	f013 0f02 	tst.w	r3, #2
 8016828:	d00e      	beq.n	8016848 <lv_atan2+0xaa>
        if(negflag & 0x01)   // if -Y -X
 801682a:	f013 0f01 	tst.w	r3, #1
 801682e:	d008      	beq.n	8016842 <lv_atan2+0xa4>
            degree = (180 + degree);
 8016830:	30b4      	adds	r0, #180	@ 0xb4
    else {   // else is +Y
        if(negflag & 0x01)   // if +Y -X
            degree = (360 - degree);
    }
    return degree;
}
 8016832:	b280      	uxth	r0, r0
 8016834:	4770      	bx	lr
 8016836:	2001      	movs	r0, #1
 8016838:	e7ee      	b.n	8016818 <lv_atan2+0x7a>
 801683a:	2002      	movs	r0, #2
 801683c:	e7ec      	b.n	8016818 <lv_atan2+0x7a>
        if(tempdegree >= 15) comp++;  // max is 4 degrees compensated
 801683e:	2004      	movs	r0, #4
 8016840:	e7ea      	b.n	8016818 <lv_atan2+0x7a>
            degree = (180 - degree);
 8016842:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8016846:	e7f4      	b.n	8016832 <lv_atan2+0x94>
        if(negflag & 0x01)   // if +Y -X
 8016848:	f013 0f01 	tst.w	r3, #1
 801684c:	d0f1      	beq.n	8016832 <lv_atan2+0x94>
            degree = (360 - degree);
 801684e:	f5c0 70b4 	rsb	r0, r0, #360	@ 0x168
 8016852:	e7ee      	b.n	8016832 <lv_atan2+0x94>

08016854 <lv_pow>:
 * @param base
 * @param power
 * @return base raised to the power exponent
 */
int64_t lv_pow(int64_t base, int8_t exp)
{
 8016854:	4603      	mov	r3, r0
 8016856:	468c      	mov	ip, r1
    int64_t result = 1;
 8016858:	2001      	movs	r0, #1
 801685a:	2100      	movs	r1, #0
    while(exp) {
 801685c:	b1b2      	cbz	r2, 801688c <lv_pow+0x38>
{
 801685e:	b500      	push	{lr}
 8016860:	e007      	b.n	8016872 <lv_pow+0x1e>
        if(exp & 1)
            result *= base;
        exp >>= 1;
 8016862:	1052      	asrs	r2, r2, #1
        base *= base;
 8016864:	fb03 fe0c 	mul.w	lr, r3, ip
 8016868:	fba3 3c03 	umull	r3, ip, r3, r3
 801686c:	eb0c 0c4e 	add.w	ip, ip, lr, lsl #1
    while(exp) {
 8016870:	b152      	cbz	r2, 8016888 <lv_pow+0x34>
        if(exp & 1)
 8016872:	f012 0f01 	tst.w	r2, #1
 8016876:	d0f4      	beq.n	8016862 <lv_pow+0xe>
            result *= base;
 8016878:	fb00 fe0c 	mul.w	lr, r0, ip
 801687c:	fb03 ee01 	mla	lr, r3, r1, lr
 8016880:	fba0 0103 	umull	r0, r1, r0, r3
 8016884:	4471      	add	r1, lr
 8016886:	e7ec      	b.n	8016862 <lv_pow+0xe>
    }

    return result;
}
 8016888:	f85d fb04 	ldr.w	pc, [sp], #4
 801688c:	4770      	bx	lr

0801688e <lv_map>:
 * @param min_out max output range
 * @param max_out max output range
 * @return the mapped number
 */
int32_t lv_map(int32_t x, int32_t min_in, int32_t max_in, int32_t min_out, int32_t max_out)
{
 801688e:	b410      	push	{r4}
    if(max_in >= min_in && x >= max_in) return max_out;
 8016890:	428a      	cmp	r2, r1
 8016892:	db01      	blt.n	8016898 <lv_map+0xa>
 8016894:	4282      	cmp	r2, r0
 8016896:	dd18      	ble.n	80168ca <lv_map+0x3c>
    if(max_in >= min_in && x <= min_in) return min_out;
 8016898:	428a      	cmp	r2, r1
 801689a:	db01      	blt.n	80168a0 <lv_map+0x12>
 801689c:	4281      	cmp	r1, r0
 801689e:	da16      	bge.n	80168ce <lv_map+0x40>

    if(max_in <= min_in && x <= max_in) return max_out;
 80168a0:	428a      	cmp	r2, r1
 80168a2:	dc01      	bgt.n	80168a8 <lv_map+0x1a>
 80168a4:	4282      	cmp	r2, r0
 80168a6:	da14      	bge.n	80168d2 <lv_map+0x44>
    if(max_in <= min_in && x >= min_in) return min_out;
 80168a8:	428a      	cmp	r2, r1
 80168aa:	dc01      	bgt.n	80168b0 <lv_map+0x22>
 80168ac:	4281      	cmp	r1, r0
 80168ae:	dd12      	ble.n	80168d6 <lv_map+0x48>
     *   ((x - min_in) * delta_out) / delta in) + min_out
     * To avoid rounding error reorder the operations:
     *   (x - min_in) * (delta_out / delta_min) + min_out
     */

    int32_t delta_in = max_in - min_in;
 80168b0:	1a52      	subs	r2, r2, r1
    int32_t delta_out = max_out - min_out;
 80168b2:	9c01      	ldr	r4, [sp, #4]
 80168b4:	eba4 0c03 	sub.w	ip, r4, r3

    return ((x - min_in) * delta_out) / delta_in + min_out;
 80168b8:	1a41      	subs	r1, r0, r1
 80168ba:	fb0c f101 	mul.w	r1, ip, r1
 80168be:	fb91 f2f2 	sdiv	r2, r1, r2
 80168c2:	18d0      	adds	r0, r2, r3
}
 80168c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168c8:	4770      	bx	lr
    if(max_in >= min_in && x >= max_in) return max_out;
 80168ca:	9801      	ldr	r0, [sp, #4]
 80168cc:	e7fa      	b.n	80168c4 <lv_map+0x36>
    if(max_in >= min_in && x <= min_in) return min_out;
 80168ce:	4618      	mov	r0, r3
 80168d0:	e7f8      	b.n	80168c4 <lv_map+0x36>
    if(max_in <= min_in && x <= max_in) return max_out;
 80168d2:	9801      	ldr	r0, [sp, #4]
 80168d4:	e7f6      	b.n	80168c4 <lv_map+0x36>
    if(max_in <= min_in && x >= min_in) return min_out;
 80168d6:	4618      	mov	r0, r3
 80168d8:	e7f4      	b.n	80168c4 <lv_map+0x36>

080168da <lv_mem_walker>:
static void lv_mem_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(ptr);

    lv_mem_monitor_t * mon_p = user;
    if(used) {
 80168da:	b11a      	cbz	r2, 80168e4 <lv_mem_walker+0xa>
        mon_p->used_cnt++;
 80168dc:	691a      	ldr	r2, [r3, #16]
 80168de:	3201      	adds	r2, #1
 80168e0:	611a      	str	r2, [r3, #16]
 80168e2:	4770      	bx	lr
    }
    else {
        mon_p->free_cnt++;
 80168e4:	685a      	ldr	r2, [r3, #4]
 80168e6:	3201      	adds	r2, #1
 80168e8:	605a      	str	r2, [r3, #4]
        mon_p->free_size += size;
 80168ea:	689a      	ldr	r2, [r3, #8]
 80168ec:	440a      	add	r2, r1
 80168ee:	609a      	str	r2, [r3, #8]
        if(size > mon_p->free_biggest_size)
 80168f0:	68da      	ldr	r2, [r3, #12]
 80168f2:	428a      	cmp	r2, r1
 80168f4:	d200      	bcs.n	80168f8 <lv_mem_walker+0x1e>
            mon_p->free_biggest_size = size;
 80168f6:	60d9      	str	r1, [r3, #12]
    }
}
 80168f8:	4770      	bx	lr
	...

080168fc <lv_mem_init>:
{
 80168fc:	b508      	push	{r3, lr}
    tlsf = lv_tlsf_create_with_pool((void *)work_mem_int, LV_MEM_SIZE);
 80168fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8016902:	4803      	ldr	r0, [pc, #12]	@ (8016910 <lv_mem_init+0x14>)
 8016904:	f010 fbba 	bl	802707c <lv_tlsf_create_with_pool>
 8016908:	4b02      	ldr	r3, [pc, #8]	@ (8016914 <lv_mem_init+0x18>)
 801690a:	6018      	str	r0, [r3, #0]
}
 801690c:	bd08      	pop	{r3, pc}
 801690e:	bf00      	nop
 8016910:	200068a8 	.word	0x200068a8
 8016914:	200088b0 	.word	0x200088b0

08016918 <lv_mem_alloc>:
    if(size == 0) {
 8016918:	b908      	cbnz	r0, 801691e <lv_mem_alloc+0x6>
        return &zero_mem;
 801691a:	480a      	ldr	r0, [pc, #40]	@ (8016944 <lv_mem_alloc+0x2c>)
}
 801691c:	4770      	bx	lr
{
 801691e:	b510      	push	{r4, lr}
 8016920:	4604      	mov	r4, r0
    void * alloc = lv_tlsf_malloc(tlsf, size);
 8016922:	4601      	mov	r1, r0
 8016924:	4b08      	ldr	r3, [pc, #32]	@ (8016948 <lv_mem_alloc+0x30>)
 8016926:	6818      	ldr	r0, [r3, #0]
 8016928:	f010 fbbd 	bl	80270a6 <lv_tlsf_malloc>
    if(alloc) {
 801692c:	b148      	cbz	r0, 8016942 <lv_mem_alloc+0x2a>
        cur_used += size;
 801692e:	4b07      	ldr	r3, [pc, #28]	@ (801694c <lv_mem_alloc+0x34>)
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	4414      	add	r4, r2
 8016934:	601c      	str	r4, [r3, #0]
        max_used = LV_MAX(cur_used, max_used);
 8016936:	4b06      	ldr	r3, [pc, #24]	@ (8016950 <lv_mem_alloc+0x38>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	4294      	cmp	r4, r2
 801693c:	bf38      	it	cc
 801693e:	4614      	movcc	r4, r2
 8016940:	601c      	str	r4, [r3, #0]
}
 8016942:	bd10      	pop	{r4, pc}
 8016944:	2000006c 	.word	0x2000006c
 8016948:	200088b0 	.word	0x200088b0
 801694c:	200088ac 	.word	0x200088ac
 8016950:	200088a8 	.word	0x200088a8

08016954 <lv_mem_free>:
{
 8016954:	b508      	push	{r3, lr}
    if(data == &zero_mem) return;
 8016956:	4b0a      	ldr	r3, [pc, #40]	@ (8016980 <lv_mem_free+0x2c>)
 8016958:	4298      	cmp	r0, r3
 801695a:	d00c      	beq.n	8016976 <lv_mem_free+0x22>
 801695c:	4601      	mov	r1, r0
    if(data == NULL) return;
 801695e:	b150      	cbz	r0, 8016976 <lv_mem_free+0x22>
    size_t size = lv_tlsf_free(tlsf, data);
 8016960:	4b08      	ldr	r3, [pc, #32]	@ (8016984 <lv_mem_free+0x30>)
 8016962:	6818      	ldr	r0, [r3, #0]
 8016964:	f010 fbb0 	bl	80270c8 <lv_tlsf_free>
    if(cur_used > size) cur_used -= size;
 8016968:	4b07      	ldr	r3, [pc, #28]	@ (8016988 <lv_mem_free+0x34>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	4283      	cmp	r3, r0
 801696e:	d903      	bls.n	8016978 <lv_mem_free+0x24>
 8016970:	1a1b      	subs	r3, r3, r0
 8016972:	4a05      	ldr	r2, [pc, #20]	@ (8016988 <lv_mem_free+0x34>)
 8016974:	6013      	str	r3, [r2, #0]
}
 8016976:	bd08      	pop	{r3, pc}
    else cur_used = 0;
 8016978:	4b03      	ldr	r3, [pc, #12]	@ (8016988 <lv_mem_free+0x34>)
 801697a:	2200      	movs	r2, #0
 801697c:	601a      	str	r2, [r3, #0]
 801697e:	e7fa      	b.n	8016976 <lv_mem_free+0x22>
 8016980:	2000006c 	.word	0x2000006c
 8016984:	200088b0 	.word	0x200088b0
 8016988:	200088ac 	.word	0x200088ac

0801698c <lv_mem_realloc>:
{
 801698c:	b508      	push	{r3, lr}
    if(new_size == 0) {
 801698e:	b149      	cbz	r1, 80169a4 <lv_mem_realloc+0x18>
 8016990:	460a      	mov	r2, r1
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 8016992:	4b08      	ldr	r3, [pc, #32]	@ (80169b4 <lv_mem_realloc+0x28>)
 8016994:	4298      	cmp	r0, r3
 8016996:	d009      	beq.n	80169ac <lv_mem_realloc+0x20>
    void * new_p = lv_tlsf_realloc(tlsf, data_p, new_size);
 8016998:	4601      	mov	r1, r0
 801699a:	4b07      	ldr	r3, [pc, #28]	@ (80169b8 <lv_mem_realloc+0x2c>)
 801699c:	6818      	ldr	r0, [r3, #0]
 801699e:	f010 fbb2 	bl	8027106 <lv_tlsf_realloc>
}
 80169a2:	bd08      	pop	{r3, pc}
        lv_mem_free(data_p);
 80169a4:	f7ff ffd6 	bl	8016954 <lv_mem_free>
        return &zero_mem;
 80169a8:	4802      	ldr	r0, [pc, #8]	@ (80169b4 <lv_mem_realloc+0x28>)
 80169aa:	e7fa      	b.n	80169a2 <lv_mem_realloc+0x16>
    if(data_p == &zero_mem) return lv_mem_alloc(new_size);
 80169ac:	4608      	mov	r0, r1
 80169ae:	f7ff ffb3 	bl	8016918 <lv_mem_alloc>
 80169b2:	e7f6      	b.n	80169a2 <lv_mem_realloc+0x16>
 80169b4:	2000006c 	.word	0x2000006c
 80169b8:	200088b0 	.word	0x200088b0

080169bc <lv_mem_buf_get>:
    if(size == 0) return NULL;
 80169bc:	2800      	cmp	r0, #0
 80169be:	d05b      	beq.n	8016a78 <lv_mem_buf_get+0xbc>
{
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4604      	mov	r4, r0
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80169c4:	2300      	movs	r3, #0
    int8_t i_guess = -1;
 80169c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80169ca:	e00c      	b.n	80169e6 <lv_mem_buf_get+0x2a>
                LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 80169cc:	4a2b      	ldr	r2, [pc, #172]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 80169ce:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80169d2:	7983      	ldrb	r3, [r0, #6]
 80169d4:	f043 0301 	orr.w	r3, r3, #1
 80169d8:	7183      	strb	r3, [r0, #6]
                return LV_GC_ROOT(lv_mem_buf[i]).p;
 80169da:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 80169de:	e036      	b.n	8016a4e <lv_mem_buf_get+0x92>
                i_guess = i;
 80169e0:	b258      	sxtb	r0, r3
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 80169e2:	3301      	adds	r3, #1
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	2b0f      	cmp	r3, #15
 80169e8:	d818      	bhi.n	8016a1c <lv_mem_buf_get+0x60>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0 && LV_GC_ROOT(lv_mem_buf[i]).size >= size) {
 80169ea:	4619      	mov	r1, r3
 80169ec:	4a23      	ldr	r2, [pc, #140]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 80169ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80169f2:	7992      	ldrb	r2, [r2, #6]
 80169f4:	f012 0f01 	tst.w	r2, #1
 80169f8:	d1f3      	bne.n	80169e2 <lv_mem_buf_get+0x26>
 80169fa:	4a20      	ldr	r2, [pc, #128]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 80169fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016a00:	8892      	ldrh	r2, [r2, #4]
 8016a02:	42a2      	cmp	r2, r4
 8016a04:	d3ed      	bcc.n	80169e2 <lv_mem_buf_get+0x26>
            if(LV_GC_ROOT(lv_mem_buf[i]).size == size) {
 8016a06:	d0e1      	beq.n	80169cc <lv_mem_buf_get+0x10>
            else if(i_guess < 0) {
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	dbe9      	blt.n	80169e0 <lv_mem_buf_get+0x24>
            else if(LV_GC_ROOT(lv_mem_buf[i]).size < LV_GC_ROOT(lv_mem_buf[i_guess]).size) {
 8016a0c:	491b      	ldr	r1, [pc, #108]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 8016a0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016a12:	8889      	ldrh	r1, [r1, #4]
 8016a14:	428a      	cmp	r2, r1
 8016a16:	d2e4      	bcs.n	80169e2 <lv_mem_buf_get+0x26>
                i_guess = i;
 8016a18:	b258      	sxtb	r0, r3
 8016a1a:	e7e2      	b.n	80169e2 <lv_mem_buf_get+0x26>
    if(i_guess >= 0) {
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	da0d      	bge.n	8016a3c <lv_mem_buf_get+0x80>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8016a20:	2300      	movs	r3, #0
 8016a22:	2b0f      	cmp	r3, #15
 8016a24:	d827      	bhi.n	8016a76 <lv_mem_buf_get+0xba>
        if(LV_GC_ROOT(lv_mem_buf[i]).used == 0) {
 8016a26:	461d      	mov	r5, r3
 8016a28:	4a14      	ldr	r2, [pc, #80]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 8016a2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016a2e:	7992      	ldrb	r2, [r2, #6]
 8016a30:	f012 0f01 	tst.w	r2, #1
 8016a34:	d00c      	beq.n	8016a50 <lv_mem_buf_get+0x94>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8016a36:	3301      	adds	r3, #1
 8016a38:	b2db      	uxtb	r3, r3
 8016a3a:	e7f2      	b.n	8016a22 <lv_mem_buf_get+0x66>
        LV_GC_ROOT(lv_mem_buf[i_guess]).used = 1;
 8016a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 8016a3e:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8016a42:	798b      	ldrb	r3, [r1, #6]
 8016a44:	f043 0301 	orr.w	r3, r3, #1
 8016a48:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(lv_mem_buf[i_guess]).p;
 8016a4a:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
}
 8016a4e:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(lv_mem_buf[i]).p, size);
 8016a50:	4621      	mov	r1, r4
 8016a52:	4a0a      	ldr	r2, [pc, #40]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 8016a54:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016a58:	f7ff ff98 	bl	801698c <lv_mem_realloc>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8016a5c:	b150      	cbz	r0, 8016a74 <lv_mem_buf_get+0xb8>
            LV_GC_ROOT(lv_mem_buf[i]).used = 1;
 8016a5e:	4907      	ldr	r1, [pc, #28]	@ (8016a7c <lv_mem_buf_get+0xc0>)
 8016a60:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8016a64:	799a      	ldrb	r2, [r3, #6]
 8016a66:	f042 0201 	orr.w	r2, r2, #1
 8016a6a:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = size;
 8016a6c:	809c      	strh	r4, [r3, #4]
            LV_GC_ROOT(lv_mem_buf[i]).p    = buf;
 8016a6e:	f841 0035 	str.w	r0, [r1, r5, lsl #3]
            return LV_GC_ROOT(lv_mem_buf[i]).p;
 8016a72:	e7ec      	b.n	8016a4e <lv_mem_buf_get+0x92>
            LV_ASSERT_MSG(buf != NULL, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)");
 8016a74:	e7fe      	b.n	8016a74 <lv_mem_buf_get+0xb8>
    LV_ASSERT_MSG(false, "No more buffers. Increase LV_MEM_BUF_MAX_NUM.");
 8016a76:	e7fe      	b.n	8016a76 <lv_mem_buf_get+0xba>
    if(size == 0) return NULL;
 8016a78:	2000      	movs	r0, #0
}
 8016a7a:	4770      	bx	lr
 8016a7c:	20006764 	.word	0x20006764

08016a80 <lv_mem_buf_release>:
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8016a80:	2300      	movs	r3, #0
 8016a82:	2b0f      	cmp	r3, #15
 8016a84:	d80f      	bhi.n	8016aa6 <lv_mem_buf_release+0x26>
        if(LV_GC_ROOT(lv_mem_buf[i]).p == p) {
 8016a86:	4a08      	ldr	r2, [pc, #32]	@ (8016aa8 <lv_mem_buf_release+0x28>)
 8016a88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a8c:	4282      	cmp	r2, r0
 8016a8e:	d002      	beq.n	8016a96 <lv_mem_buf_release+0x16>
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8016a90:	3301      	adds	r3, #1
 8016a92:	b2db      	uxtb	r3, r3
 8016a94:	e7f5      	b.n	8016a82 <lv_mem_buf_release+0x2>
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8016a96:	4a04      	ldr	r2, [pc, #16]	@ (8016aa8 <lv_mem_buf_release+0x28>)
 8016a98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016a9c:	799a      	ldrb	r2, [r3, #6]
 8016a9e:	f022 0201 	bic.w	r2, r2, #1
 8016aa2:	719a      	strb	r2, [r3, #6]
            return;
 8016aa4:	4770      	bx	lr
}
 8016aa6:	4770      	bx	lr
 8016aa8:	20006764 	.word	0x20006764

08016aac <lv_mem_buf_free_all>:
{
 8016aac:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
 8016aae:	2400      	movs	r4, #0
 8016ab0:	e001      	b.n	8016ab6 <lv_mem_buf_free_all+0xa>
 8016ab2:	3401      	adds	r4, #1
 8016ab4:	b2e4      	uxtb	r4, r4
 8016ab6:	2c0f      	cmp	r4, #15
 8016ab8:	d812      	bhi.n	8016ae0 <lv_mem_buf_free_all+0x34>
        if(LV_GC_ROOT(lv_mem_buf[i]).p) {
 8016aba:	4b0a      	ldr	r3, [pc, #40]	@ (8016ae4 <lv_mem_buf_free_all+0x38>)
 8016abc:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	d0f6      	beq.n	8016ab2 <lv_mem_buf_free_all+0x6>
            lv_mem_free(LV_GC_ROOT(lv_mem_buf[i]).p);
 8016ac4:	f7ff ff46 	bl	8016954 <lv_mem_free>
            LV_GC_ROOT(lv_mem_buf[i]).p = NULL;
 8016ac8:	4b06      	ldr	r3, [pc, #24]	@ (8016ae4 <lv_mem_buf_free_all+0x38>)
 8016aca:	2200      	movs	r2, #0
 8016acc:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(lv_mem_buf[i]).used = 0;
 8016ad0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016ad4:	7999      	ldrb	r1, [r3, #6]
 8016ad6:	f362 0100 	bfi	r1, r2, #0, #1
 8016ada:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(lv_mem_buf[i]).size = 0;
 8016adc:	809a      	strh	r2, [r3, #4]
 8016ade:	e7e8      	b.n	8016ab2 <lv_mem_buf_free_all+0x6>
}
 8016ae0:	bd10      	pop	{r4, pc}
 8016ae2:	bf00      	nop
 8016ae4:	20006764 	.word	0x20006764

08016ae8 <lv_memcpy>:
{
 8016ae8:	b410      	push	{r4}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
 8016aea:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
 8016aee:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
 8016af2:	429c      	cmp	r4, r3
 8016af4:	d14b      	bne.n	8016b8e <lv_memcpy+0xa6>
    if(d_align) {
 8016af6:	2c00      	cmp	r4, #0
 8016af8:	d075      	beq.n	8016be6 <lv_memcpy+0xfe>
        d_align = ALIGN_MASK + 1 - d_align;
 8016afa:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
 8016afe:	4603      	mov	r3, r0
        while(d_align && len) {
 8016b00:	e057      	b.n	8016bb2 <lv_memcpy+0xca>
            REPEAT8(COPY8);
 8016b02:	780c      	ldrb	r4, [r1, #0]
 8016b04:	701c      	strb	r4, [r3, #0]
 8016b06:	784c      	ldrb	r4, [r1, #1]
 8016b08:	705c      	strb	r4, [r3, #1]
 8016b0a:	788c      	ldrb	r4, [r1, #2]
 8016b0c:	709c      	strb	r4, [r3, #2]
 8016b0e:	78cc      	ldrb	r4, [r1, #3]
 8016b10:	70dc      	strb	r4, [r3, #3]
 8016b12:	790c      	ldrb	r4, [r1, #4]
 8016b14:	711c      	strb	r4, [r3, #4]
 8016b16:	794c      	ldrb	r4, [r1, #5]
 8016b18:	715c      	strb	r4, [r3, #5]
 8016b1a:	798c      	ldrb	r4, [r1, #6]
 8016b1c:	719c      	strb	r4, [r3, #6]
 8016b1e:	79cc      	ldrb	r4, [r1, #7]
 8016b20:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
 8016b22:	7a0c      	ldrb	r4, [r1, #8]
 8016b24:	721c      	strb	r4, [r3, #8]
 8016b26:	7a4c      	ldrb	r4, [r1, #9]
 8016b28:	725c      	strb	r4, [r3, #9]
 8016b2a:	7a8c      	ldrb	r4, [r1, #10]
 8016b2c:	729c      	strb	r4, [r3, #10]
 8016b2e:	7acc      	ldrb	r4, [r1, #11]
 8016b30:	72dc      	strb	r4, [r3, #11]
 8016b32:	7b0c      	ldrb	r4, [r1, #12]
 8016b34:	731c      	strb	r4, [r3, #12]
 8016b36:	7b4c      	ldrb	r4, [r1, #13]
 8016b38:	735c      	strb	r4, [r3, #13]
 8016b3a:	7b8c      	ldrb	r4, [r1, #14]
 8016b3c:	739c      	strb	r4, [r3, #14]
 8016b3e:	7bcc      	ldrb	r4, [r1, #15]
 8016b40:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
 8016b42:	7c0c      	ldrb	r4, [r1, #16]
 8016b44:	741c      	strb	r4, [r3, #16]
 8016b46:	7c4c      	ldrb	r4, [r1, #17]
 8016b48:	745c      	strb	r4, [r3, #17]
 8016b4a:	7c8c      	ldrb	r4, [r1, #18]
 8016b4c:	749c      	strb	r4, [r3, #18]
 8016b4e:	7ccc      	ldrb	r4, [r1, #19]
 8016b50:	74dc      	strb	r4, [r3, #19]
 8016b52:	7d0c      	ldrb	r4, [r1, #20]
 8016b54:	751c      	strb	r4, [r3, #20]
 8016b56:	7d4c      	ldrb	r4, [r1, #21]
 8016b58:	755c      	strb	r4, [r3, #21]
 8016b5a:	7d8c      	ldrb	r4, [r1, #22]
 8016b5c:	759c      	strb	r4, [r3, #22]
 8016b5e:	7dcc      	ldrb	r4, [r1, #23]
 8016b60:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
 8016b62:	7e0c      	ldrb	r4, [r1, #24]
 8016b64:	761c      	strb	r4, [r3, #24]
 8016b66:	7e4c      	ldrb	r4, [r1, #25]
 8016b68:	765c      	strb	r4, [r3, #25]
 8016b6a:	7e8c      	ldrb	r4, [r1, #26]
 8016b6c:	769c      	strb	r4, [r3, #26]
 8016b6e:	7ecc      	ldrb	r4, [r1, #27]
 8016b70:	76dc      	strb	r4, [r3, #27]
 8016b72:	7f0c      	ldrb	r4, [r1, #28]
 8016b74:	771c      	strb	r4, [r3, #28]
 8016b76:	7f4c      	ldrb	r4, [r1, #29]
 8016b78:	775c      	strb	r4, [r3, #29]
 8016b7a:	7f8c      	ldrb	r4, [r1, #30]
 8016b7c:	779c      	strb	r4, [r3, #30]
 8016b7e:	7fcc      	ldrb	r4, [r1, #31]
 8016b80:	77dc      	strb	r4, [r3, #31]
 8016b82:	3320      	adds	r3, #32
 8016b84:	3120      	adds	r1, #32
            len -= 32;
 8016b86:	3a20      	subs	r2, #32
        while(len > 32) {
 8016b88:	2a20      	cmp	r2, #32
 8016b8a:	d8ba      	bhi.n	8016b02 <lv_memcpy+0x1a>
 8016b8c:	e006      	b.n	8016b9c <lv_memcpy+0xb4>
    uint8_t * d8 = dst;
 8016b8e:	4603      	mov	r3, r0
 8016b90:	e7fa      	b.n	8016b88 <lv_memcpy+0xa0>
            COPY8
 8016b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b96:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
 8016b9a:	3a01      	subs	r2, #1
        while(len) {
 8016b9c:	2a00      	cmp	r2, #0
 8016b9e:	d1f8      	bne.n	8016b92 <lv_memcpy+0xaa>
}
 8016ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ba4:	4770      	bx	lr
            COPY8;
 8016ba6:	f811 cb01 	ldrb.w	ip, [r1], #1
 8016baa:	f803 cb01 	strb.w	ip, [r3], #1
            d_align--;
 8016bae:	3c01      	subs	r4, #1
            len--;
 8016bb0:	3a01      	subs	r2, #1
        while(d_align && len) {
 8016bb2:	b1ac      	cbz	r4, 8016be0 <lv_memcpy+0xf8>
 8016bb4:	2a00      	cmp	r2, #0
 8016bb6:	d1f6      	bne.n	8016ba6 <lv_memcpy+0xbe>
 8016bb8:	e012      	b.n	8016be0 <lv_memcpy+0xf8>
        REPEAT8(COPY32)
 8016bba:	680c      	ldr	r4, [r1, #0]
 8016bbc:	601c      	str	r4, [r3, #0]
 8016bbe:	684c      	ldr	r4, [r1, #4]
 8016bc0:	605c      	str	r4, [r3, #4]
 8016bc2:	688c      	ldr	r4, [r1, #8]
 8016bc4:	609c      	str	r4, [r3, #8]
 8016bc6:	68cc      	ldr	r4, [r1, #12]
 8016bc8:	60dc      	str	r4, [r3, #12]
 8016bca:	690c      	ldr	r4, [r1, #16]
 8016bcc:	611c      	str	r4, [r3, #16]
 8016bce:	694c      	ldr	r4, [r1, #20]
 8016bd0:	615c      	str	r4, [r3, #20]
 8016bd2:	698c      	ldr	r4, [r1, #24]
 8016bd4:	619c      	str	r4, [r3, #24]
 8016bd6:	69cc      	ldr	r4, [r1, #28]
 8016bd8:	61dc      	str	r4, [r3, #28]
 8016bda:	3320      	adds	r3, #32
 8016bdc:	3120      	adds	r1, #32
        len -= 32;
 8016bde:	3a20      	subs	r2, #32
    while(len > 32) {
 8016be0:	2a20      	cmp	r2, #32
 8016be2:	d8ea      	bhi.n	8016bba <lv_memcpy+0xd2>
 8016be4:	e006      	b.n	8016bf4 <lv_memcpy+0x10c>
    uint8_t * d8 = dst;
 8016be6:	4603      	mov	r3, r0
 8016be8:	e7fa      	b.n	8016be0 <lv_memcpy+0xf8>
        COPY32;
 8016bea:	f851 4b04 	ldr.w	r4, [r1], #4
 8016bee:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
 8016bf2:	3a04      	subs	r2, #4
    while(len > 4) {
 8016bf4:	2a04      	cmp	r2, #4
 8016bf6:	d8f8      	bhi.n	8016bea <lv_memcpy+0x102>
    while(len) {
 8016bf8:	2a00      	cmp	r2, #0
 8016bfa:	d0d1      	beq.n	8016ba0 <lv_memcpy+0xb8>
        COPY8
 8016bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c00:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
 8016c04:	3a01      	subs	r2, #1
 8016c06:	e7f7      	b.n	8016bf8 <lv_memcpy+0x110>

08016c08 <lv_memset>:
    if(d_align) {
 8016c08:	f010 0303 	ands.w	r3, r0, #3
 8016c0c:	d009      	beq.n	8016c22 <lv_memset+0x1a>
        d_align = ALIGN_MASK + 1 - d_align;
 8016c0e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8016c12:	e003      	b.n	8016c1c <lv_memset+0x14>
            SET8(v);
 8016c14:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
 8016c18:	3a01      	subs	r2, #1
            d_align--;
 8016c1a:	3b01      	subs	r3, #1
        while(d_align && len) {
 8016c1c:	b10b      	cbz	r3, 8016c22 <lv_memset+0x1a>
 8016c1e:	2a00      	cmp	r2, #0
 8016c20:	d1f8      	bne.n	8016c14 <lv_memset+0xc>
    uint32_t v32 = (uint32_t)v + ((uint32_t)v << 8) + ((uint32_t)v << 16) + ((uint32_t)v << 24);
 8016c22:	eb01 2301 	add.w	r3, r1, r1, lsl #8
 8016c26:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8016c2a:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
 8016c2e:	e009      	b.n	8016c44 <lv_memset+0x3c>
        REPEAT8(SET32(v32));
 8016c30:	6003      	str	r3, [r0, #0]
 8016c32:	6043      	str	r3, [r0, #4]
 8016c34:	6083      	str	r3, [r0, #8]
 8016c36:	60c3      	str	r3, [r0, #12]
 8016c38:	6103      	str	r3, [r0, #16]
 8016c3a:	6143      	str	r3, [r0, #20]
 8016c3c:	6183      	str	r3, [r0, #24]
 8016c3e:	61c3      	str	r3, [r0, #28]
 8016c40:	3020      	adds	r0, #32
        len -= 32;
 8016c42:	3a20      	subs	r2, #32
    while(len > 32) {
 8016c44:	2a20      	cmp	r2, #32
 8016c46:	d8f3      	bhi.n	8016c30 <lv_memset+0x28>
 8016c48:	e002      	b.n	8016c50 <lv_memset+0x48>
        SET32(v32);
 8016c4a:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8016c4e:	3a04      	subs	r2, #4
    while(len > 4) {
 8016c50:	2a04      	cmp	r2, #4
 8016c52:	d8fa      	bhi.n	8016c4a <lv_memset+0x42>
    while(len) {
 8016c54:	b11a      	cbz	r2, 8016c5e <lv_memset+0x56>
        SET8(v);
 8016c56:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
 8016c5a:	3a01      	subs	r2, #1
 8016c5c:	e7fa      	b.n	8016c54 <lv_memset+0x4c>
}
 8016c5e:	4770      	bx	lr

08016c60 <lv_mem_monitor>:
{
 8016c60:	b510      	push	{r4, lr}
 8016c62:	4604      	mov	r4, r0
    lv_memset(mon_p, 0, sizeof(lv_mem_monitor_t));
 8016c64:	221c      	movs	r2, #28
 8016c66:	2100      	movs	r1, #0
 8016c68:	f7ff ffce 	bl	8016c08 <lv_memset>
    lv_tlsf_walk_pool(lv_tlsf_get_pool(tlsf), lv_mem_walker, mon_p);
 8016c6c:	4b12      	ldr	r3, [pc, #72]	@ (8016cb8 <lv_mem_monitor+0x58>)
 8016c6e:	6818      	ldr	r0, [r3, #0]
 8016c70:	f010 fa13 	bl	802709a <lv_tlsf_get_pool>
 8016c74:	4622      	mov	r2, r4
 8016c76:	4911      	ldr	r1, [pc, #68]	@ (8016cbc <lv_mem_monitor+0x5c>)
 8016c78:	f010 f988 	bl	8026f8c <lv_tlsf_walk_pool>
    mon_p->total_size = LV_MEM_SIZE;
 8016c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8016c80:	6023      	str	r3, [r4, #0]
    mon_p->used_pct = 100 - (100U * mon_p->free_size) / mon_p->total_size;
 8016c82:	68a2      	ldr	r2, [r4, #8]
 8016c84:	2364      	movs	r3, #100	@ 0x64
 8016c86:	fb02 f303 	mul.w	r3, r2, r3
 8016c8a:	0b5b      	lsrs	r3, r3, #13
 8016c8c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8016c90:	7623      	strb	r3, [r4, #24]
    if(mon_p->free_size > 0) {
 8016c92:	b16a      	cbz	r2, 8016cb0 <lv_mem_monitor+0x50>
        mon_p->frag_pct = mon_p->free_biggest_size * 100U / mon_p->free_size;
 8016c94:	68e3      	ldr	r3, [r4, #12]
 8016c96:	2164      	movs	r1, #100	@ 0x64
 8016c98:	fb01 f303 	mul.w	r3, r1, r3
 8016c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ca0:	b2db      	uxtb	r3, r3
 8016ca2:	7663      	strb	r3, [r4, #25]
        mon_p->frag_pct = 100 - mon_p->frag_pct;
 8016ca4:	1acb      	subs	r3, r1, r3
 8016ca6:	7663      	strb	r3, [r4, #25]
    mon_p->max_used = max_used;
 8016ca8:	4b05      	ldr	r3, [pc, #20]	@ (8016cc0 <lv_mem_monitor+0x60>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	6163      	str	r3, [r4, #20]
}
 8016cae:	bd10      	pop	{r4, pc}
        mon_p->frag_pct = 0; /*no fragmentation if all the RAM is used*/
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	7663      	strb	r3, [r4, #25]
 8016cb4:	e7f8      	b.n	8016ca8 <lv_mem_monitor+0x48>
 8016cb6:	bf00      	nop
 8016cb8:	200088b0 	.word	0x200088b0
 8016cbc:	080168db 	.word	0x080168db
 8016cc0:	200088a8 	.word	0x200088a8

08016cc4 <lv_memset_00>:
    if(d_align) {
 8016cc4:	f010 0303 	ands.w	r3, r0, #3
 8016cc8:	d016      	beq.n	8016cf8 <lv_memset_00+0x34>
        d_align = ALIGN_MASK + 1 - d_align;
 8016cca:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8016cce:	e004      	b.n	8016cda <lv_memset_00+0x16>
            SET8(0);
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 8016cd6:	3901      	subs	r1, #1
            d_align--;
 8016cd8:	3b01      	subs	r3, #1
        while(d_align && len) {
 8016cda:	b16b      	cbz	r3, 8016cf8 <lv_memset_00+0x34>
 8016cdc:	2900      	cmp	r1, #0
 8016cde:	d1f7      	bne.n	8016cd0 <lv_memset_00+0xc>
 8016ce0:	e00a      	b.n	8016cf8 <lv_memset_00+0x34>
        REPEAT8(SET32(0));
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	6003      	str	r3, [r0, #0]
 8016ce6:	6043      	str	r3, [r0, #4]
 8016ce8:	6083      	str	r3, [r0, #8]
 8016cea:	60c3      	str	r3, [r0, #12]
 8016cec:	6103      	str	r3, [r0, #16]
 8016cee:	6143      	str	r3, [r0, #20]
 8016cf0:	6183      	str	r3, [r0, #24]
 8016cf2:	61c3      	str	r3, [r0, #28]
 8016cf4:	3020      	adds	r0, #32
        len -= 32;
 8016cf6:	3920      	subs	r1, #32
    while(len > 32) {
 8016cf8:	2920      	cmp	r1, #32
 8016cfa:	d8f2      	bhi.n	8016ce2 <lv_memset_00+0x1e>
 8016cfc:	e003      	b.n	8016d06 <lv_memset_00+0x42>
        SET32(0);
 8016cfe:	2300      	movs	r3, #0
 8016d00:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8016d04:	3904      	subs	r1, #4
    while(len > 4) {
 8016d06:	2904      	cmp	r1, #4
 8016d08:	d8f9      	bhi.n	8016cfe <lv_memset_00+0x3a>
    while(len) {
 8016d0a:	b121      	cbz	r1, 8016d16 <lv_memset_00+0x52>
        SET8(0);
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
 8016d12:	3901      	subs	r1, #1
 8016d14:	e7f9      	b.n	8016d0a <lv_memset_00+0x46>
}
 8016d16:	4770      	bx	lr

08016d18 <lv_memset_ff>:
    if(d_align) {
 8016d18:	f010 0303 	ands.w	r3, r0, #3
 8016d1c:	d017      	beq.n	8016d4e <lv_memset_ff+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
 8016d1e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
 8016d22:	e004      	b.n	8016d2e <lv_memset_ff+0x16>
            SET8(0xFF);
 8016d24:	22ff      	movs	r2, #255	@ 0xff
 8016d26:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
 8016d2a:	3901      	subs	r1, #1
            d_align--;
 8016d2c:	3b01      	subs	r3, #1
        while(d_align && len) {
 8016d2e:	b173      	cbz	r3, 8016d4e <lv_memset_ff+0x36>
 8016d30:	2900      	cmp	r1, #0
 8016d32:	d1f7      	bne.n	8016d24 <lv_memset_ff+0xc>
 8016d34:	e00b      	b.n	8016d4e <lv_memset_ff+0x36>
        REPEAT8(SET32(0xFFFFFFFF));
 8016d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d3a:	6003      	str	r3, [r0, #0]
 8016d3c:	6043      	str	r3, [r0, #4]
 8016d3e:	6083      	str	r3, [r0, #8]
 8016d40:	60c3      	str	r3, [r0, #12]
 8016d42:	6103      	str	r3, [r0, #16]
 8016d44:	6143      	str	r3, [r0, #20]
 8016d46:	6183      	str	r3, [r0, #24]
 8016d48:	61c3      	str	r3, [r0, #28]
 8016d4a:	3020      	adds	r0, #32
        len -= 32;
 8016d4c:	3920      	subs	r1, #32
    while(len > 32) {
 8016d4e:	2920      	cmp	r1, #32
 8016d50:	d8f1      	bhi.n	8016d36 <lv_memset_ff+0x1e>
 8016d52:	e004      	b.n	8016d5e <lv_memset_ff+0x46>
        SET32(0xFFFFFFFF);
 8016d54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d58:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
 8016d5c:	3904      	subs	r1, #4
    while(len > 4) {
 8016d5e:	2904      	cmp	r1, #4
 8016d60:	d8f8      	bhi.n	8016d54 <lv_memset_ff+0x3c>
    while(len) {
 8016d62:	b121      	cbz	r1, 8016d6e <lv_memset_ff+0x56>
        SET8(0xFF);
 8016d64:	23ff      	movs	r3, #255	@ 0xff
 8016d66:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
 8016d6a:	3901      	subs	r1, #1
 8016d6c:	e7f9      	b.n	8016d62 <lv_memset_ff+0x4a>
}
 8016d6e:	4770      	bx	lr

08016d70 <lv_menu_destructor>:

    LV_TRACE_OBJ_CREATE("finished");
}

static void lv_menu_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016d70:	b508      	push	{r3, lr}
    LV_TRACE_OBJ_CREATE("begin");

    lv_menu_t * menu = (lv_menu_t *)obj;
    lv_ll_t * history_ll = &(menu->history_ll);

    _lv_ll_clear(history_ll);
 8016d72:	f101 0054 	add.w	r0, r1, #84	@ 0x54
 8016d76:	f7ff fc78 	bl	801666a <_lv_ll_clear>

    LV_TRACE_OBJ_CREATE("finished");
}
 8016d7a:	bd08      	pop	{r3, pc}

08016d7c <lv_menu_section_constructor>:
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
}

static void lv_menu_section_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8016d7c:	b510      	push	{r4, lr}
 8016d7e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8016d80:	2101      	movs	r1, #1
 8016d82:	4620      	mov	r0, r4
 8016d84:	f7fa fe6c 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8016d88:	2102      	movs	r1, #2
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f001 fb28 	bl	80183e0 <lv_obj_clear_flag>
}
 8016d90:	bd10      	pop	{r4, pc}

08016d92 <lv_menu_cont_constructor>:
{
 8016d92:	b510      	push	{r4, lr}
 8016d94:	460c      	mov	r4, r1
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8016d96:	2100      	movs	r1, #0
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f7fa fe61 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8016d9e:	2302      	movs	r3, #2
 8016da0:	461a      	mov	r2, r3
 8016da2:	2100      	movs	r1, #0
 8016da4:	4620      	mov	r0, r4
 8016da6:	f7fa fe87 	bl	8011ab8 <lv_obj_set_flex_align>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8016daa:	2102      	movs	r1, #2
 8016dac:	4620      	mov	r0, r4
 8016dae:	f001 fb17 	bl	80183e0 <lv_obj_clear_flag>
}
 8016db2:	bd10      	pop	{r4, pc}

08016db4 <lv_menu_constructor>:
{
 8016db4:	b570      	push	{r4, r5, r6, lr}
 8016db6:	460c      	mov	r4, r1
    lv_obj_set_layout(obj, LV_LAYOUT_FLEX);
 8016db8:	4b4c      	ldr	r3, [pc, #304]	@ (8016eec <lv_menu_constructor+0x138>)
 8016dba:	8819      	ldrh	r1, [r3, #0]
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	f002 fbfb 	bl	80195b8 <lv_obj_set_layout>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	f7fa fe4b 	bl	8011a60 <lv_obj_set_flex_flow>
    menu->mode_header = LV_MENU_HEADER_TOP_FIXED;
 8016dca:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8016dce:	f023 0306 	bic.w	r3, r3, #6
 8016dd2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
    menu->mode_root_back_btn = LV_MENU_ROOT_BACK_BTN_DISABLED;
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	f023 0308 	bic.w	r3, r3, #8
 8016ddc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
    menu->cur_depth = 0;
 8016de0:	2500      	movs	r5, #0
 8016de2:	f884 5060 	strb.w	r5, [r4, #96]	@ 0x60
    menu->prev_depth = 0;
 8016de6:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
    menu->sidebar_generated = false;
 8016dea:	b2db      	uxtb	r3, r3
 8016dec:	f365 0300 	bfi	r3, r5, #0, #1
 8016df0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
    _lv_ll_init(&(menu->history_ll), sizeof(lv_menu_history_t));
 8016df4:	2104      	movs	r1, #4
 8016df6:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8016dfa:	f7ff fb6c 	bl	80164d6 <_lv_ll_init>
    menu->storage = lv_obj_create(obj);
 8016dfe:	4620      	mov	r0, r4
 8016e00:	f001 fae2 	bl	80183c8 <lv_obj_create>
 8016e04:	6260      	str	r0, [r4, #36]	@ 0x24
    lv_obj_add_flag(menu->storage, LV_OBJ_FLAG_HIDDEN);
 8016e06:	2101      	movs	r1, #1
 8016e08:	f001 fd7a 	bl	8018900 <lv_obj_add_flag>
    menu->sidebar = NULL;
 8016e0c:	63e5      	str	r5, [r4, #60]	@ 0x3c
    menu->sidebar_header = NULL;
 8016e0e:	6465      	str	r5, [r4, #68]	@ 0x44
    menu->sidebar_header_back_btn = NULL;
 8016e10:	64a5      	str	r5, [r4, #72]	@ 0x48
    menu->sidebar_header_title = NULL;
 8016e12:	64e5      	str	r5, [r4, #76]	@ 0x4c
    menu->sidebar_page = NULL;
 8016e14:	6425      	str	r5, [r4, #64]	@ 0x40
    lv_obj_t * main_cont = lv_obj_class_create_obj(&lv_menu_main_cont_class, obj);
 8016e16:	4621      	mov	r1, r4
 8016e18:	4835      	ldr	r0, [pc, #212]	@ (8016ef0 <lv_menu_constructor+0x13c>)
 8016e1a:	f001 fe03 	bl	8018a24 <lv_obj_class_create_obj>
 8016e1e:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_cont);
 8016e20:	f001 fe9f 	bl	8018b62 <lv_obj_class_init_obj>
    lv_obj_set_height(main_cont, LV_PCT(100));
 8016e24:	f242 0164 	movw	r1, #8292	@ 0x2064
 8016e28:	4630      	mov	r0, r6
 8016e2a:	f002 fb74 	bl	8019516 <lv_obj_set_height>
    lv_obj_set_flex_grow(main_cont, 1);
 8016e2e:	2101      	movs	r1, #1
 8016e30:	4630      	mov	r0, r6
 8016e32:	f7fa fe65 	bl	8011b00 <lv_obj_set_flex_grow>
    lv_obj_set_flex_flow(main_cont, LV_FLEX_FLOW_COLUMN);
 8016e36:	2101      	movs	r1, #1
 8016e38:	4630      	mov	r0, r6
 8016e3a:	f7fa fe11 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_add_flag(main_cont, LV_OBJ_FLAG_EVENT_BUBBLE);
 8016e3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016e42:	4630      	mov	r0, r6
 8016e44:	f001 fd5c 	bl	8018900 <lv_obj_add_flag>
    lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_CLICKABLE);
 8016e48:	2102      	movs	r1, #2
 8016e4a:	4630      	mov	r0, r6
 8016e4c:	f001 fac8 	bl	80183e0 <lv_obj_clear_flag>
    menu->main = main_cont;
 8016e50:	62a6      	str	r6, [r4, #40]	@ 0x28
    lv_obj_t * main_header = lv_obj_class_create_obj(&lv_menu_main_header_cont_class, main_cont);
 8016e52:	4631      	mov	r1, r6
 8016e54:	4827      	ldr	r0, [pc, #156]	@ (8016ef4 <lv_menu_constructor+0x140>)
 8016e56:	f001 fde5 	bl	8018a24 <lv_obj_class_create_obj>
 8016e5a:	4606      	mov	r6, r0
    lv_obj_class_init_obj(main_header);
 8016e5c:	f001 fe81 	bl	8018b62 <lv_obj_class_init_obj>
    lv_obj_set_size(main_header, LV_PCT(100), LV_SIZE_CONTENT);
 8016e60:	f242 72d1 	movw	r2, #10193	@ 0x27d1
 8016e64:	f242 0164 	movw	r1, #8292	@ 0x2064
 8016e68:	4630      	mov	r0, r6
 8016e6a:	f002 fb6b 	bl	8019544 <lv_obj_set_size>
    lv_obj_set_flex_flow(main_header, LV_FLEX_FLOW_ROW);
 8016e6e:	4629      	mov	r1, r5
 8016e70:	4630      	mov	r0, r6
 8016e72:	f7fa fdf5 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(main_header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8016e76:	2302      	movs	r3, #2
 8016e78:	461a      	mov	r2, r3
 8016e7a:	4629      	mov	r1, r5
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	f7fa fe1b 	bl	8011ab8 <lv_obj_set_flex_align>
    lv_obj_clear_flag(main_header, LV_OBJ_FLAG_CLICKABLE);
 8016e82:	2102      	movs	r1, #2
 8016e84:	4630      	mov	r0, r6
 8016e86:	f001 faab 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_add_flag(main_header, LV_OBJ_FLAG_EVENT_BUBBLE);
 8016e8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016e8e:	4630      	mov	r0, r6
 8016e90:	f001 fd36 	bl	8018900 <lv_obj_add_flag>
    menu->main_header = main_header;
 8016e94:	6326      	str	r6, [r4, #48]	@ 0x30
    lv_obj_t * main_header_back_btn = lv_btn_create(menu->main_header);
 8016e96:	4630      	mov	r0, r6
 8016e98:	f7eb fdb8 	bl	8002a0c <lv_btn_create>
 8016e9c:	4606      	mov	r6, r0
    lv_obj_add_event_cb(main_header_back_btn, lv_menu_back_event_cb, LV_EVENT_CLICKED, menu);
 8016e9e:	4623      	mov	r3, r4
 8016ea0:	2207      	movs	r2, #7
 8016ea2:	4915      	ldr	r1, [pc, #84]	@ (8016ef8 <lv_menu_constructor+0x144>)
 8016ea4:	f7f9 ff5a 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_add_flag(main_header_back_btn, LV_OBJ_FLAG_EVENT_BUBBLE);
 8016ea8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016eac:	4630      	mov	r0, r6
 8016eae:	f001 fd27 	bl	8018900 <lv_obj_add_flag>
    lv_obj_set_flex_flow(main_header_back_btn, LV_FLEX_FLOW_ROW);
 8016eb2:	4629      	mov	r1, r5
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	f7fa fdd3 	bl	8011a60 <lv_obj_set_flex_flow>
    menu->main_header_back_btn = main_header_back_btn;
 8016eba:	6366      	str	r6, [r4, #52]	@ 0x34
    lv_obj_t * main_header_back_icon = lv_img_create(menu->main_header_back_btn);
 8016ebc:	4630      	mov	r0, r6
 8016ebe:	f7fc fd5d 	bl	801397c <lv_img_create>
    lv_img_set_src(main_header_back_icon, LV_SYMBOL_LEFT);
 8016ec2:	490e      	ldr	r1, [pc, #56]	@ (8016efc <lv_menu_constructor+0x148>)
 8016ec4:	f7fc fd66 	bl	8013994 <lv_img_set_src>
    lv_obj_t * main_header_title = lv_label_create(menu->main_header);
 8016ec8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016eca:	f7fd ff57 	bl	8014d7c <lv_label_create>
 8016ece:	4606      	mov	r6, r0
    lv_obj_add_flag(main_header_title, LV_OBJ_FLAG_HIDDEN);
 8016ed0:	2101      	movs	r1, #1
 8016ed2:	f001 fd15 	bl	8018900 <lv_obj_add_flag>
    menu->main_header_title = main_header_title;
 8016ed6:	63a6      	str	r6, [r4, #56]	@ 0x38
    menu->main_page = NULL;
 8016ed8:	62e5      	str	r5, [r4, #44]	@ 0x2c
    menu->selected_tab = NULL;
 8016eda:	6525      	str	r5, [r4, #80]	@ 0x50
    lv_obj_add_event_cb(obj, lv_menu_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, menu);
 8016edc:	4623      	mov	r3, r4
 8016ede:	221c      	movs	r2, #28
 8016ee0:	4907      	ldr	r1, [pc, #28]	@ (8016f00 <lv_menu_constructor+0x14c>)
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	f7f9 ff3a 	bl	8010d5c <lv_obj_add_event_cb>
}
 8016ee8:	bd70      	pop	{r4, r5, r6, pc}
 8016eea:	bf00      	nop
 8016eec:	2000665e 	.word	0x2000665e
 8016ef0:	0802dd48 	.word	0x0802dd48
 8016ef4:	0802dd2c 	.word	0x0802dd2c
 8016ef8:	0801715b 	.word	0x0801715b
 8016efc:	08029974 	.word	0x08029974
 8016f00:	08016fcd 	.word	0x08016fcd

08016f04 <lv_menu_page_destructor>:
    if(page->title != NULL) {
 8016f04:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8016f06:	b130      	cbz	r0, 8016f16 <lv_menu_page_destructor+0x12>
{
 8016f08:	b510      	push	{r4, lr}
 8016f0a:	460c      	mov	r4, r1
        lv_mem_free(page->title);
 8016f0c:	f7ff fd22 	bl	8016954 <lv_mem_free>
        page->title = NULL;
 8016f10:	2300      	movs	r3, #0
 8016f12:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8016f14:	bd10      	pop	{r4, pc}
 8016f16:	4770      	bx	lr

08016f18 <lv_menu_page_constructor>:
{
 8016f18:	b510      	push	{r4, lr}
 8016f1a:	460c      	mov	r4, r1
    lv_menu_t * menu = (lv_menu_t *)lv_obj_get_parent(obj);
 8016f1c:	4608      	mov	r0, r1
 8016f1e:	f006 f929 	bl	801d174 <lv_obj_get_parent>
    lv_obj_set_parent(obj, ((lv_menu_t *)menu)->storage);
 8016f22:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8016f24:	4620      	mov	r0, r4
 8016f26:	f006 fa3a 	bl	801d39e <lv_obj_set_parent>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8016f2a:	2101      	movs	r1, #1
 8016f2c:	4620      	mov	r0, r4
 8016f2e:	f7fa fd97 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(obj, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8016f32:	2302      	movs	r3, #2
 8016f34:	461a      	mov	r2, r3
 8016f36:	2100      	movs	r1, #0
 8016f38:	4620      	mov	r0, r4
 8016f3a:	f7fa fdbd 	bl	8011ab8 <lv_obj_set_flex_align>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_EVENT_BUBBLE);
 8016f3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8016f42:	4620      	mov	r0, r4
 8016f44:	f001 fcdc 	bl	8018900 <lv_obj_add_flag>
}
 8016f48:	bd10      	pop	{r4, pc}

08016f4a <lv_menu_refr_main_header_mode>:
        lv_obj_clear_flag(menu->sidebar_header, LV_OBJ_FLAG_HIDDEN);
    }
}

static void lv_menu_refr_main_header_mode(lv_obj_t * obj)
{
 8016f4a:	b510      	push	{r4, lr}
 8016f4c:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_menu_t * menu = (lv_menu_t *)obj;

    if(menu->main_header == NULL || menu->main_page == NULL) return;
 8016f4e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016f50:	b310      	cbz	r0, 8016f98 <lv_menu_refr_main_header_mode+0x4e>
 8016f52:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016f54:	b303      	cbz	r3, 8016f98 <lv_menu_refr_main_header_mode+0x4e>

    switch(menu->mode_header) {
 8016f56:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8016f5a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8016f5e:	2b01      	cmp	r3, #1
 8016f60:	d01b      	beq.n	8016f9a <lv_menu_refr_main_header_mode+0x50>
 8016f62:	2b02      	cmp	r3, #2
 8016f64:	d021      	beq.n	8016faa <lv_menu_refr_main_header_mode+0x60>
 8016f66:	b933      	cbnz	r3, 8016f76 <lv_menu_refr_main_header_mode+0x2c>
        case LV_MENU_HEADER_TOP_FIXED:
            /* Content should fill the remaining space */
            lv_obj_move_to_index(menu->main_header, 0);
 8016f68:	2100      	movs	r1, #0
 8016f6a:	f006 fa81 	bl	801d470 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 8016f6e:	2101      	movs	r1, #1
 8016f70:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016f72:	f7fa fdc5 	bl	8011b00 <lv_obj_set_flex_grow>
            lv_obj_move_to_index(menu->main_header, 1);
            lv_obj_set_flex_grow(menu->main_page, 1);
            break;
    }

    lv_obj_refr_size(menu->main_header);
 8016f76:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016f78:	f003 fa96 	bl	801a4a8 <lv_obj_refr_size>
    lv_obj_refr_size(menu->main_page);
 8016f7c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016f7e:	f003 fa93 	bl	801a4a8 <lv_obj_refr_size>
    lv_obj_update_layout(menu->main_header);
 8016f82:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016f84:	f003 fc8a 	bl	801a89c <lv_obj_update_layout>

    if(lv_obj_get_content_height(menu->main_header) == 0) {
 8016f88:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016f8a:	f002 fbdb 	bl	8019744 <lv_obj_get_content_height>
 8016f8e:	b9a0      	cbnz	r0, 8016fba <lv_menu_refr_main_header_mode+0x70>
        lv_obj_add_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8016f90:	2101      	movs	r1, #1
 8016f92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016f94:	f001 fcb4 	bl	8018900 <lv_obj_add_flag>
    }
    else {
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
    }
}
 8016f98:	bd10      	pop	{r4, pc}
            lv_obj_move_to_index(menu->main_header, 0);
 8016f9a:	2100      	movs	r1, #0
 8016f9c:	f006 fa68 	bl	801d470 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 0);
 8016fa0:	2100      	movs	r1, #0
 8016fa2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016fa4:	f7fa fdac 	bl	8011b00 <lv_obj_set_flex_grow>
            break;
 8016fa8:	e7e5      	b.n	8016f76 <lv_menu_refr_main_header_mode+0x2c>
            lv_obj_move_to_index(menu->main_header, 1);
 8016faa:	2101      	movs	r1, #1
 8016fac:	f006 fa60 	bl	801d470 <lv_obj_move_to_index>
            lv_obj_set_flex_grow(menu->main_page, 1);
 8016fb0:	2101      	movs	r1, #1
 8016fb2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016fb4:	f7fa fda4 	bl	8011b00 <lv_obj_set_flex_grow>
            break;
 8016fb8:	e7dd      	b.n	8016f76 <lv_menu_refr_main_header_mode+0x2c>
        lv_obj_clear_flag(menu->main_header, LV_OBJ_FLAG_HIDDEN);
 8016fba:	2101      	movs	r1, #1
 8016fbc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016fbe:	f001 fa0f 	bl	80183e0 <lv_obj_clear_flag>
 8016fc2:	e7e9      	b.n	8016f98 <lv_menu_refr_main_header_mode+0x4e>

08016fc4 <lv_menu_get_cur_main_page>:
}
 8016fc4:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8016fc6:	4770      	bx	lr

08016fc8 <lv_menu_get_cur_sidebar_page>:
}
 8016fc8:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8016fca:	4770      	bx	lr

08016fcc <lv_menu_value_changed_event_cb>:
        }
    }
}

static void lv_menu_value_changed_event_cb(lv_event_t * e)
{
 8016fcc:	b510      	push	{r4, lr}
    lv_obj_t * obj = lv_event_get_user_data(e);
 8016fce:	f7f9 feaf 	bl	8010d30 <lv_event_get_user_data>
 8016fd2:	4604      	mov	r4, r0
    lv_menu_t * menu = (lv_menu_t *)obj;

    lv_menu_page_t * main_page = (lv_menu_page_t *)lv_menu_get_cur_main_page(obj);
 8016fd4:	f7ff fff6 	bl	8016fc4 <lv_menu_get_cur_main_page>
    if(main_page != NULL && menu->main_header_title != NULL) {
 8016fd8:	b150      	cbz	r0, 8016ff0 <lv_menu_value_changed_event_cb+0x24>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016fde:	b138      	cbz	r0, 8016ff0 <lv_menu_value_changed_event_cb+0x24>
        if(main_page->title != NULL) {
 8016fe0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016fe2:	b1a9      	cbz	r1, 8017010 <lv_menu_value_changed_event_cb+0x44>
            lv_label_set_text(menu->main_header_title, main_page->title);
 8016fe4:	f7fe fb80 	bl	80156e8 <lv_label_set_text>
            lv_obj_clear_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 8016fe8:	2101      	movs	r1, #1
 8016fea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016fec:	f001 f9f8 	bl	80183e0 <lv_obj_clear_flag>
        else {
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }

    lv_menu_page_t * sidebar_page = (lv_menu_page_t *)lv_menu_get_cur_sidebar_page(obj);
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f7ff ffe9 	bl	8016fc8 <lv_menu_get_cur_sidebar_page>
    if(sidebar_page != NULL && menu->sidebar_header_title != NULL) {
 8016ff6:	4603      	mov	r3, r0
 8016ff8:	b148      	cbz	r0, 801700e <lv_menu_value_changed_event_cb+0x42>
 8016ffa:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8016ffc:	b138      	cbz	r0, 801700e <lv_menu_value_changed_event_cb+0x42>
        if(sidebar_page->title != NULL) {
 8016ffe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8017000:	b151      	cbz	r1, 8017018 <lv_menu_value_changed_event_cb+0x4c>
            lv_label_set_text(menu->sidebar_header_title, sidebar_page->title);
 8017002:	f7fe fb71 	bl	80156e8 <lv_label_set_text>
            lv_obj_clear_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8017006:	2101      	movs	r1, #1
 8017008:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 801700a:	f001 f9e9 	bl	80183e0 <lv_obj_clear_flag>
        }
        else {
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
        }
    }
}
 801700e:	bd10      	pop	{r4, pc}
            lv_obj_add_flag(menu->main_header_title, LV_OBJ_FLAG_HIDDEN);
 8017010:	2101      	movs	r1, #1
 8017012:	f001 fc75 	bl	8018900 <lv_obj_add_flag>
 8017016:	e7eb      	b.n	8016ff0 <lv_menu_value_changed_event_cb+0x24>
            lv_obj_add_flag(menu->sidebar_header_title, LV_OBJ_FLAG_HIDDEN);
 8017018:	2101      	movs	r1, #1
 801701a:	f001 fc71 	bl	8018900 <lv_obj_add_flag>
}
 801701e:	e7f6      	b.n	801700e <lv_menu_value_changed_event_cb+0x42>

08017020 <lv_menu_back_btn_is_root>:
    if(obj == ((lv_menu_t *)menu)->sidebar_header_back_btn) {
 8017020:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8017022:	428b      	cmp	r3, r1
 8017024:	d00a      	beq.n	801703c <lv_menu_back_btn_is_root+0x1c>
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 8017026:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017028:	428b      	cmp	r3, r1
 801702a:	d001      	beq.n	8017030 <lv_menu_back_btn_is_root+0x10>
    return false;
 801702c:	2000      	movs	r0, #0
 801702e:	4770      	bx	lr
    if(obj == ((lv_menu_t *)menu)->main_header_back_btn && ((lv_menu_t *)menu)->prev_depth <= 1) {
 8017030:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8017034:	2b01      	cmp	r3, #1
 8017036:	d903      	bls.n	8017040 <lv_menu_back_btn_is_root+0x20>
    return false;
 8017038:	2000      	movs	r0, #0
 801703a:	4770      	bx	lr
        return true;
 801703c:	2001      	movs	r0, #1
 801703e:	4770      	bx	lr
        return true;
 8017040:	2001      	movs	r0, #1
}
 8017042:	4770      	bx	lr

08017044 <lv_menu_clear_history>:
{
 8017044:	b510      	push	{r4, lr}
 8017046:	4604      	mov	r4, r0
    _lv_ll_clear(history_ll);
 8017048:	3054      	adds	r0, #84	@ 0x54
 801704a:	f7ff fb0e 	bl	801666a <_lv_ll_clear>
    menu->cur_depth = 0;
 801704e:	2300      	movs	r3, #0
 8017050:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
}
 8017054:	bd10      	pop	{r4, pc}

08017056 <lv_menu_set_page>:
{
 8017056:	b538      	push	{r3, r4, r5, lr}
 8017058:	4604      	mov	r4, r0
    if(menu->main_page == page) {
 801705a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801705c:	4288      	cmp	r0, r1
 801705e:	d045      	beq.n	80170ec <lv_menu_set_page+0x96>
 8017060:	460d      	mov	r5, r1
    if(menu->main_page != NULL) {
 8017062:	b110      	cbz	r0, 801706a <lv_menu_set_page+0x14>
        lv_obj_set_parent(menu->main_page, menu->storage);
 8017064:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017066:	f006 f99a 	bl	801d39e <lv_obj_set_parent>
    if(page != NULL) {
 801706a:	2d00      	cmp	r5, #0
 801706c:	d040      	beq.n	80170f0 <lv_menu_set_page+0x9a>
        lv_menu_history_t * new_node = _lv_ll_ins_head(history_ll);
 801706e:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 8017072:	f7ff fa38 	bl	80164e6 <_lv_ll_ins_head>
        LV_ASSERT_MALLOC(new_node);
 8017076:	2800      	cmp	r0, #0
 8017078:	d039      	beq.n	80170ee <lv_menu_set_page+0x98>
        new_node->page = page;
 801707a:	6005      	str	r5, [r0, #0]
        menu->cur_depth++;
 801707c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017080:	3301      	adds	r3, #1
 8017082:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
        lv_obj_set_parent(page, menu->main);
 8017086:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8017088:	4628      	mov	r0, r5
 801708a:	f006 f988 	bl	801d39e <lv_obj_set_parent>
    menu->main_page = page;
 801708e:	62e5      	str	r5, [r4, #44]	@ 0x2c
    if(menu->selected_tab != NULL) {
 8017090:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8017092:	b120      	cbz	r0, 801709e <lv_menu_set_page+0x48>
        if(menu->sidebar_page != NULL) {
 8017094:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017096:	b37b      	cbz	r3, 80170f8 <lv_menu_set_page+0xa2>
            lv_obj_add_state(menu->selected_tab, LV_STATE_CHECKED);
 8017098:	2101      	movs	r1, #1
 801709a:	f001 f9e0 	bl	801845e <lv_obj_add_state>
    if(menu->sidebar_page != NULL) {
 801709e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d03f      	beq.n	8017124 <lv_menu_set_page+0xce>
        if(menu->sidebar_generated) {
 80170a4:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 80170a8:	f013 0f01 	tst.w	r3, #1
 80170ac:	d00a      	beq.n	80170c4 <lv_menu_set_page+0x6e>
            if(menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 80170ae:	f013 0f08 	tst.w	r3, #8
 80170b2:	d025      	beq.n	8017100 <lv_menu_set_page+0xaa>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 80170b4:	2101      	movs	r1, #1
 80170b6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80170b8:	f001 f992 	bl	80183e0 <lv_obj_clear_flag>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 80170bc:	2102      	movs	r1, #2
 80170be:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80170c0:	f001 fc1e 	bl	8018900 <lv_obj_add_flag>
        if(menu->cur_depth >= 2) {
 80170c4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d922      	bls.n	8017112 <lv_menu_set_page+0xbc>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 80170cc:	2101      	movs	r1, #1
 80170ce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80170d0:	f001 f986 	bl	80183e0 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 80170d4:	2102      	movs	r1, #2
 80170d6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80170d8:	f001 fc12 	bl	8018900 <lv_obj_add_flag>
    lv_event_send((lv_obj_t *)menu, LV_EVENT_VALUE_CHANGED, NULL);
 80170dc:	2200      	movs	r2, #0
 80170de:	211c      	movs	r1, #28
 80170e0:	4620      	mov	r0, r4
 80170e2:	f7f9 fdf1 	bl	8010cc8 <lv_event_send>
    lv_menu_refr_main_header_mode(obj);
 80170e6:	4620      	mov	r0, r4
 80170e8:	f7ff ff2f 	bl	8016f4a <lv_menu_refr_main_header_mode>
}
 80170ec:	bd38      	pop	{r3, r4, r5, pc}
        LV_ASSERT_MALLOC(new_node);
 80170ee:	e7fe      	b.n	80170ee <lv_menu_set_page+0x98>
        lv_menu_clear_history(obj);
 80170f0:	4620      	mov	r0, r4
 80170f2:	f7ff ffa7 	bl	8017044 <lv_menu_clear_history>
 80170f6:	e7ca      	b.n	801708e <lv_menu_set_page+0x38>
            lv_obj_clear_state(menu->selected_tab, LV_STATE_CHECKED);
 80170f8:	2101      	movs	r1, #1
 80170fa:	f001 f9bc 	bl	8018476 <lv_obj_clear_state>
 80170fe:	e7ce      	b.n	801709e <lv_menu_set_page+0x48>
                lv_obj_add_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8017100:	2101      	movs	r1, #1
 8017102:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8017104:	f001 fbfc 	bl	8018900 <lv_obj_add_flag>
                lv_obj_clear_flag(menu->sidebar_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8017108:	2102      	movs	r1, #2
 801710a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 801710c:	f001 f968 	bl	80183e0 <lv_obj_clear_flag>
 8017110:	e7d8      	b.n	80170c4 <lv_menu_set_page+0x6e>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8017112:	2101      	movs	r1, #1
 8017114:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017116:	f001 fbf3 	bl	8018900 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801711a:	2102      	movs	r1, #2
 801711c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801711e:	f001 f95f 	bl	80183e0 <lv_obj_clear_flag>
 8017122:	e7db      	b.n	80170dc <lv_menu_set_page+0x86>
        if(menu->cur_depth >= 2 || menu->mode_root_back_btn == LV_MENU_ROOT_BACK_BTN_ENABLED) {
 8017124:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017128:	2b01      	cmp	r3, #1
 801712a:	d804      	bhi.n	8017136 <lv_menu_set_page+0xe0>
 801712c:	f894 3062 	ldrb.w	r3, [r4, #98]	@ 0x62
 8017130:	f013 0f08 	tst.w	r3, #8
 8017134:	d008      	beq.n	8017148 <lv_menu_set_page+0xf2>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8017136:	2101      	movs	r1, #1
 8017138:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801713a:	f001 f951 	bl	80183e0 <lv_obj_clear_flag>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 801713e:	2102      	movs	r1, #2
 8017140:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017142:	f001 fbdd 	bl	8018900 <lv_obj_add_flag>
 8017146:	e7c9      	b.n	80170dc <lv_menu_set_page+0x86>
            lv_obj_add_flag(menu->main_header_back_btn, LV_OBJ_FLAG_HIDDEN);
 8017148:	2101      	movs	r1, #1
 801714a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801714c:	f001 fbd8 	bl	8018900 <lv_obj_add_flag>
            lv_obj_clear_flag(menu->main_header_back_btn, LV_OBJ_FLAG_CLICKABLE);
 8017150:	2102      	movs	r1, #2
 8017152:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8017154:	f001 f944 	bl	80183e0 <lv_obj_clear_flag>
 8017158:	e7c0      	b.n	80170dc <lv_menu_set_page+0x86>

0801715a <lv_menu_back_event_cb>:
{
 801715a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801715c:	4604      	mov	r4, r0
    lv_event_code_t code = lv_event_get_code(e);
 801715e:	f7f9 fde1 	bl	8010d24 <lv_event_get_code>
    if(code == LV_EVENT_CLICKED) {
 8017162:	2807      	cmp	r0, #7
 8017164:	d000      	beq.n	8017168 <lv_menu_back_event_cb+0xe>
}
 8017166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * obj = lv_event_get_target(e);
 8017168:	4620      	mov	r0, r4
 801716a:	f7f9 fdd7 	bl	8010d1c <lv_event_get_target>
 801716e:	4605      	mov	r5, r0
        lv_menu_t * menu = (lv_menu_t *)lv_event_get_user_data(e);
 8017170:	4620      	mov	r0, r4
 8017172:	f7f9 fddd 	bl	8010d30 <lv_event_get_user_data>
 8017176:	4604      	mov	r4, r0
        if(!(obj == menu->main_header_back_btn || obj == menu->sidebar_header_back_btn)) return;
 8017178:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801717a:	42ab      	cmp	r3, r5
 801717c:	d002      	beq.n	8017184 <lv_menu_back_event_cb+0x2a>
 801717e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8017180:	42ab      	cmp	r3, r5
 8017182:	d1f0      	bne.n	8017166 <lv_menu_back_event_cb+0xc>
        menu->prev_depth = menu->cur_depth; /* Save the previous value for user event handler */
 8017184:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017188:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
        if(lv_menu_back_btn_is_root((lv_obj_t *)menu, obj)) return;
 801718c:	4629      	mov	r1, r5
 801718e:	4620      	mov	r0, r4
 8017190:	f7ff ff46 	bl	8017020 <lv_menu_back_btn_is_root>
 8017194:	2800      	cmp	r0, #0
 8017196:	d1e6      	bne.n	8017166 <lv_menu_back_event_cb+0xc>
        lv_ll_t * history_ll = &(menu->history_ll);
 8017198:	f104 0654 	add.w	r6, r4, #84	@ 0x54
        lv_menu_history_t * act_hist = _lv_ll_get_head(history_ll);
 801719c:	4630      	mov	r0, r6
 801719e:	f7ff f9e0 	bl	8016562 <_lv_ll_get_head>
 80171a2:	4605      	mov	r5, r0
        lv_menu_history_t * prev_hist = _lv_ll_get_next(history_ll, act_hist);
 80171a4:	4601      	mov	r1, r0
 80171a6:	4630      	mov	r0, r6
 80171a8:	f7ff f9e3 	bl	8016572 <_lv_ll_get_next>
        if(prev_hist != NULL) {
 80171ac:	4607      	mov	r7, r0
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d0d9      	beq.n	8017166 <lv_menu_back_event_cb+0xc>
            _lv_ll_remove(history_ll, act_hist);
 80171b2:	4629      	mov	r1, r5
 80171b4:	4630      	mov	r0, r6
 80171b6:	f7ff fa16 	bl	80165e6 <_lv_ll_remove>
            lv_mem_free(act_hist);
 80171ba:	4628      	mov	r0, r5
 80171bc:	f7ff fbca 	bl	8016954 <lv_mem_free>
            menu->cur_depth--;
 80171c0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80171c4:	3b01      	subs	r3, #1
 80171c6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
            _lv_ll_remove(history_ll, prev_hist);
 80171ca:	4639      	mov	r1, r7
 80171cc:	4630      	mov	r0, r6
 80171ce:	f7ff fa0a 	bl	80165e6 <_lv_ll_remove>
            menu->cur_depth--;
 80171d2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80171d6:	3b01      	subs	r3, #1
 80171d8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
            lv_menu_set_page(&(menu->obj), prev_hist->page);
 80171dc:	6839      	ldr	r1, [r7, #0]
 80171de:	4620      	mov	r0, r4
 80171e0:	f7ff ff39 	bl	8017056 <lv_menu_set_page>
            lv_mem_free(prev_hist);
 80171e4:	4638      	mov	r0, r7
 80171e6:	f7ff fbb5 	bl	8016954 <lv_mem_free>
 80171ea:	e7bc      	b.n	8017166 <lv_menu_back_event_cb+0xc>

080171ec <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 80171ec:	b283      	uxth	r3, r0
 80171ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80171f2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 80171f6:	b28b      	uxth	r3, r1
 80171f8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80171fc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 8017200:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 8017202:	040b      	lsls	r3, r1, #16
 8017204:	fa13 f181 	uxtah	r1, r3, r1
 8017208:	4b0a      	ldr	r3, [pc, #40]	@ (8017234 <lv_color_mix+0x48>)
 801720a:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801720c:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 8017210:	fa1c f080 	uxtah	r0, ip, r0
 8017214:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 8017216:	1a40      	subs	r0, r0, r1
 8017218:	08d2      	lsrs	r2, r2, #3
 801721a:	fb00 f202 	mul.w	r2, r0, r2
 801721e:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 8017222:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 8017224:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 8017228:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 801722a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 801722e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8017232:	4770      	bx	lr
 8017234:	07e0f81f 	.word	0x07e0f81f

08017238 <draw_arcs>:
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
    }
}

static void draw_arcs(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	b09d      	sub	sp, #116	@ 0x74
 801723e:	4680      	mov	r8, r0
 8017240:	468b      	mov	fp, r1
 8017242:	4615      	mov	r5, r2
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_draw_arc_dsc_t arc_dsc;
    lv_draw_arc_dsc_init(&arc_dsc);
 8017244:	ac18      	add	r4, sp, #96	@ 0x60
 8017246:	4620      	mov	r0, r4
 8017248:	f7f0 fa34 	bl	80076b4 <lv_draw_arc_dsc_init>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_arc_rounded(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 801724c:	2251      	movs	r2, #81	@ 0x51
 801724e:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8017252:	4640      	mov	r0, r8
 8017254:	f005 fa4e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (bool)v.num;
 8017258:	3800      	subs	r0, #0
 801725a:	bf18      	it	ne
 801725c:	2001      	movne	r0, #1
    arc_dsc.rounded = lv_obj_get_style_arc_rounded(obj, LV_PART_ITEMS);
 801725e:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 8017262:	f360 0382 	bfi	r3, r0, #2, #1
 8017266:	f88d 306d 	strb.w	r3, [sp, #109]	@ 0x6d
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801726a:	88af      	ldrh	r7, [r5, #4]
 801726c:	882b      	ldrh	r3, [r5, #0]
 801726e:	1aff      	subs	r7, r7, r3
 8017270:	b2bf      	uxth	r7, r7
 8017272:	3701      	adds	r7, #1

    lv_coord_t r_out = lv_area_get_width(scale_area) / 2 ;
 8017274:	f3c7 32c0 	ubfx	r2, r7, #15, #1
 8017278:	fa02 f787 	sxtah	r7, r2, r7
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_out;
 801727c:	f3c7 074f 	ubfx	r7, r7, #1, #16
 8017280:	443b      	add	r3, r7
 8017282:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
    scale_center.y = scale_area->y1 + r_out;
 8017286:	886b      	ldrh	r3, [r5, #2]
 8017288:	443b      	add	r3, r7
 801728a:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e

    lv_opa_t opa_main = lv_obj_get_style_opa_recursive(obj, LV_PART_MAIN);
 801728e:	2100      	movs	r1, #0
 8017290:	4640      	mov	r0, r8
 8017292:	f005 febf 	bl	801d014 <lv_obj_get_style_opa_recursive>
 8017296:	9003      	str	r0, [sp, #12]
    lv_meter_indicator_t * indic;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8017298:	4659      	mov	r1, fp
 801729a:	a805      	add	r0, sp, #20
 801729c:	f002 f817 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.arc_dsc = &arc_dsc;
 80172a0:	940d      	str	r4, [sp, #52]	@ 0x34
    part_draw_dsc.part = LV_PART_INDICATOR;
 80172a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80172a6:	9312      	str	r3, [sp, #72]	@ 0x48
    part_draw_dsc.class_p = MY_CLASS;
 80172a8:	4b32      	ldr	r3, [pc, #200]	@ (8017374 <draw_arcs+0x13c>)
 80172aa:	9306      	str	r3, [sp, #24]
    part_draw_dsc.type = LV_METER_DRAW_PART_ARC;
 80172ac:	2300      	movs	r3, #0
 80172ae:	9307      	str	r3, [sp, #28]

    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 80172b0:	f108 0a30 	add.w	sl, r8, #48	@ 0x30
 80172b4:	4650      	mov	r0, sl
 80172b6:	f7ff f958 	bl	801656a <_lv_ll_get_tail>
 80172ba:	4604      	mov	r4, r0
 80172bc:	e042      	b.n	8017344 <draw_arcs+0x10c>
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;

        arc_dsc.color = indic->type_data.arc.color;
        arc_dsc.width = indic->type_data.arc.width;
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80172be:	9b03      	ldr	r3, [sp, #12]
 80172c0:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c

        lv_meter_scale_t * scale = indic->scale;
 80172c4:	6826      	ldr	r6, [r4, #0]

        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 80172c6:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
                                     scale->rotation + scale->angle_range);
 80172ca:	8bf5      	ldrh	r5, [r6, #30]
 80172cc:	441d      	add	r5, r3
        int32_t start_angle = lv_map(indic->start_value, scale->min, scale->max, scale->rotation,
 80172ce:	69b2      	ldr	r2, [r6, #24]
 80172d0:	6971      	ldr	r1, [r6, #20]
 80172d2:	68a0      	ldr	r0, [r4, #8]
 80172d4:	9500      	str	r5, [sp, #0]
 80172d6:	f7ff fada 	bl	801688e <lv_map>
 80172da:	4605      	mov	r5, r0
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 80172dc:	f9b6 3020 	ldrsh.w	r3, [r6, #32]
                                   scale->rotation + scale->angle_range);
 80172e0:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 80172e4:	449c      	add	ip, r3
        int32_t end_angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation,
 80172e6:	69b2      	ldr	r2, [r6, #24]
 80172e8:	6971      	ldr	r1, [r6, #20]
 80172ea:	68e0      	ldr	r0, [r4, #12]
 80172ec:	f8cd c000 	str.w	ip, [sp]
 80172f0:	f7ff facd 	bl	801688e <lv_map>

        arc_dsc.start_angle = start_angle;
 80172f4:	b2ad      	uxth	r5, r5
 80172f6:	f8ad 5064 	strh.w	r5, [sp, #100]	@ 0x64
        arc_dsc.end_angle = end_angle;
 80172fa:	b286      	uxth	r6, r0
 80172fc:	f8ad 6066 	strh.w	r6, [sp, #102]	@ 0x66
        part_draw_dsc.radius = r_out + indic->type_data.arc.r_mod;
 8017300:	8b63      	ldrh	r3, [r4, #26]
 8017302:	443b      	add	r3, r7
 8017304:	f8ad 3050 	strh.w	r3, [sp, #80]	@ 0x50
        part_draw_dsc.sub_part_ptr = indic;
 8017308:	9416      	str	r4, [sp, #88]	@ 0x58
        part_draw_dsc.p1 = &scale_center;
 801730a:	f10d 095c 	add.w	r9, sp, #92	@ 0x5c
 801730e:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38

        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017312:	aa05      	add	r2, sp, #20
 8017314:	211a      	movs	r1, #26
 8017316:	4640      	mov	r0, r8
 8017318:	f7f9 fcd6 	bl	8010cc8 <lv_event_send>
        lv_draw_arc(draw_ctx, &arc_dsc, &scale_center, part_draw_dsc.radius, start_angle, end_angle);
 801731c:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 8017320:	9601      	str	r6, [sp, #4]
 8017322:	9500      	str	r5, [sp, #0]
 8017324:	b29b      	uxth	r3, r3
 8017326:	464a      	mov	r2, r9
 8017328:	a918      	add	r1, sp, #96	@ 0x60
 801732a:	4658      	mov	r0, fp
 801732c:	f7f0 f9d7 	bl	80076de <lv_draw_arc>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017330:	aa05      	add	r2, sp, #20
 8017332:	211b      	movs	r1, #27
 8017334:	4640      	mov	r0, r8
 8017336:	f7f9 fcc7 	bl	8010cc8 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801733a:	4621      	mov	r1, r4
 801733c:	4650      	mov	r0, sl
 801733e:	f7ff f91c 	bl	801657a <_lv_ll_get_prev>
 8017342:	4604      	mov	r4, r0
 8017344:	b194      	cbz	r4, 801736c <draw_arcs+0x134>
        if(indic->type != LV_METER_INDICATOR_TYPE_ARC) continue;
 8017346:	7923      	ldrb	r3, [r4, #4]
 8017348:	2b03      	cmp	r3, #3
 801734a:	d1f6      	bne.n	801733a <draw_arcs+0x102>
        arc_dsc.color = indic->type_data.arc.color;
 801734c:	8b23      	ldrh	r3, [r4, #24]
 801734e:	f8ad 3060 	strh.w	r3, [sp, #96]	@ 0x60
        arc_dsc.width = indic->type_data.arc.width;
 8017352:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8017356:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
        arc_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 801735a:	7963      	ldrb	r3, [r4, #5]
 801735c:	2bfd      	cmp	r3, #253	@ 0xfd
 801735e:	d8ae      	bhi.n	80172be <draw_arcs+0x86>
 8017360:	9a03      	ldr	r2, [sp, #12]
 8017362:	fb02 f303 	mul.w	r3, r2, r3
 8017366:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801736a:	e7a9      	b.n	80172c0 <draw_arcs+0x88>
    }
}
 801736c:	b01d      	add	sp, #116	@ 0x74
 801736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017372:	bf00      	nop
 8017374:	0802de0c 	.word	0x0802de0c

08017378 <draw_ticks_and_labels>:

static void draw_ticks_and_labels(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
 8017378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	b0d7      	sub	sp, #348	@ 0x15c
 801737e:	9004      	str	r0, [sp, #16]
 8017380:	9108      	str	r1, [sp, #32]
 8017382:	4610      	mov	r0, r2
 8017384:	8893      	ldrh	r3, [r2, #4]
 8017386:	8811      	ldrh	r1, [r2, #0]
 8017388:	1a5b      	subs	r3, r3, r1
 801738a:	b29b      	uxth	r3, r3
 801738c:	3301      	adds	r3, #1
    lv_meter_t * meter    = (lv_meter_t *)obj;

    lv_point_t p_center;
    lv_coord_t r_edge = LV_MIN(lv_area_get_width(scale_area) / 2, lv_area_get_height(scale_area) / 2);
 801738e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8017392:	fa02 f383 	sxtah	r3, r2, r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8017396:	88c2      	ldrh	r2, [r0, #6]
 8017398:	8840      	ldrh	r0, [r0, #2]
 801739a:	1a12      	subs	r2, r2, r0
 801739c:	b292      	uxth	r2, r2
 801739e:	3201      	adds	r2, #1
 80173a0:	f3c2 35c0 	ubfx	r5, r2, #15, #1
 80173a4:	fa05 f282 	sxtah	r2, r5, r2
 80173a8:	1052      	asrs	r2, r2, #1
 80173aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80173ac:	ebb2 0f63 	cmp.w	r2, r3, asr #1
 80173b0:	dd01      	ble.n	80173b6 <draw_ticks_and_labels+0x3e>
 80173b2:	105c      	asrs	r4, r3, #1
 80173b4:	940b      	str	r4, [sp, #44]	@ 0x2c
    p_center.x = scale_area->x1 + r_edge;
 80173b6:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80173ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80173bc:	4419      	add	r1, r3
 80173be:	f8ad 1154 	strh.w	r1, [sp, #340]	@ 0x154
    p_center.y = scale_area->y1 + r_edge;
 80173c2:	4418      	add	r0, r3
 80173c4:	f8ad 0156 	strh.w	r0, [sp, #342]	@ 0x156

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 80173c8:	ac52      	add	r4, sp, #328	@ 0x148
 80173ca:	4620      	mov	r0, r4
 80173cc:	f7f1 f969 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_TICKS, &line_dsc);
 80173d0:	4622      	mov	r2, r4
 80173d2:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 80173d6:	9d04      	ldr	r5, [sp, #16]
 80173d8:	4628      	mov	r0, r5
 80173da:	f001 fe6a 	bl	80190b2 <lv_obj_init_draw_line_dsc>
    line_dsc.raw_end = 1;
 80173de:	f89d 3151 	ldrb.w	r3, [sp, #337]	@ 0x151
 80173e2:	f043 0310 	orr.w	r3, r3, #16
 80173e6:	f88d 3151 	strb.w	r3, [sp, #337]	@ 0x151

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
 80173ea:	a84a      	add	r0, sp, #296	@ 0x128
 80173ec:	f7f0 fddc 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_TICKS, &label_dsc);
 80173f0:	aa4a      	add	r2, sp, #296	@ 0x128
 80173f2:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
 80173f6:	4628      	mov	r0, r5
 80173f8:	f001 fdb6 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    lv_draw_mask_radius_param_t inner_minor_mask;
    lv_draw_mask_radius_param_t inner_major_mask;
    lv_draw_mask_radius_param_t outer_mask;

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 80173fc:	9908      	ldr	r1, [sp, #32]
 80173fe:	a826      	add	r0, sp, #152	@ 0x98
 8017400:	f001 ff65 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8017404:	4bae      	ldr	r3, [pc, #696]	@ (80176c0 <draw_ticks_and_labels+0x348>)
 8017406:	9327      	str	r3, [sp, #156]	@ 0x9c
    part_draw_dsc.part = LV_PART_TICKS;
 8017408:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 801740c:	9333      	str	r3, [sp, #204]	@ 0xcc
    part_draw_dsc.type = LV_METER_DRAW_PART_TICK;
 801740e:	2303      	movs	r3, #3
 8017410:	9328      	str	r3, [sp, #160]	@ 0xa0
    part_draw_dsc.line_dsc = &line_dsc;
 8017412:	942c      	str	r4, [sp, #176]	@ 0xb0

    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 8017414:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8017418:	4630      	mov	r0, r6
 801741a:	f7ff f8a6 	bl	801656a <_lv_ll_get_tail>
 801741e:	960d      	str	r6, [sp, #52]	@ 0x34
 8017420:	4683      	mov	fp, r0
 8017422:	e162      	b.n	80176ea <draw_ticks_and_labels+0x372>
        for(i = 0; i < scale->tick_cnt; i++) {
            minor_cnt++;
            bool major = false;
            if(minor_cnt == scale->tick_major_nth) {
                minor_cnt = 0;
                major = true;
 8017424:	f04f 0a01 	mov.w	sl, #1
                minor_cnt = 0;
 8017428:	f04f 0800 	mov.w	r8, #0
 801742c:	e10e      	b.n	801764c <draw_ticks_and_labels+0x2d4>
            }

            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
            part_draw_dsc.value = value_of_line;

            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 801742e:	f8bb 3000 	ldrh.w	r3, [fp]
 8017432:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017436:	e11f      	b.n	8017678 <draw_ticks_and_labels+0x300>
            lv_color_t line_color_ori = line_color;

            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8017438:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
 801743c:	9305      	str	r3, [sp, #20]
 801743e:	e126      	b.n	801768e <draw_ticks_and_labels+0x316>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
                    line_width += indic->type_data.scale_lines.width_mod;

                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
                        line_color = indic->type_data.scale_lines.color_start;
 8017440:	8a63      	ldrh	r3, [r4, #18]
 8017442:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017446:	e010      	b.n	801746a <draw_ticks_and_labels+0xf2>
                        lv_opa_t ratio;
                        if(indic->type_data.scale_lines.local_grad) {
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
                        }
                        else {
                            ratio = lv_map(value_of_line, scale->min, scale->max, LV_OPA_TRANSP, LV_OPA_COVER);
 8017448:	f8db 2018 	ldr.w	r2, [fp, #24]
 801744c:	f8db 1014 	ldr.w	r1, [fp, #20]
 8017450:	23ff      	movs	r3, #255	@ 0xff
 8017452:	9300      	str	r3, [sp, #0]
 8017454:	2300      	movs	r3, #0
 8017456:	4628      	mov	r0, r5
 8017458:	f7ff fa19 	bl	801688e <lv_map>
 801745c:	b2c2      	uxtb	r2, r0
                        }
                        line_color = lv_color_mix(indic->type_data.scale_lines.color_end, indic->type_data.scale_lines.color_start, ratio);
 801745e:	8a61      	ldrh	r1, [r4, #18]
 8017460:	8aa0      	ldrh	r0, [r4, #20]
 8017462:	f7ff fec3 	bl	80171ec <lv_color_mix>
 8017466:	f8ad 001c 	strh.w	r0, [sp, #28]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801746a:	4621      	mov	r1, r4
 801746c:	4630      	mov	r0, r6
 801746e:	f7ff f884 	bl	801657a <_lv_ll_get_prev>
 8017472:	4604      	mov	r4, r0
 8017474:	b1dc      	cbz	r4, 80174ae <draw_ticks_and_labels+0x136>
                if(indic->type != LV_METER_INDICATOR_TYPE_SCALE_LINES) continue;
 8017476:	7923      	ldrb	r3, [r4, #4]
 8017478:	2b02      	cmp	r3, #2
 801747a:	d1f6      	bne.n	801746a <draw_ticks_and_labels+0xf2>
                if(value_of_line >= indic->start_value && value_of_line <= indic->end_value) {
 801747c:	68a1      	ldr	r1, [r4, #8]
 801747e:	42a9      	cmp	r1, r5
 8017480:	dcf3      	bgt.n	801746a <draw_ticks_and_labels+0xf2>
 8017482:	68e2      	ldr	r2, [r4, #12]
 8017484:	42aa      	cmp	r2, r5
 8017486:	dbf0      	blt.n	801746a <draw_ticks_and_labels+0xf2>
                    line_width += indic->type_data.scale_lines.width_mod;
 8017488:	8a23      	ldrh	r3, [r4, #16]
 801748a:	443b      	add	r3, r7
 801748c:	b21f      	sxth	r7, r3
                    if(indic->type_data.scale_lines.color_start.full == indic->type_data.scale_lines.color_end.full) {
 801748e:	8a60      	ldrh	r0, [r4, #18]
 8017490:	8aa3      	ldrh	r3, [r4, #20]
 8017492:	4298      	cmp	r0, r3
 8017494:	d0d4      	beq.n	8017440 <draw_ticks_and_labels+0xc8>
                        if(indic->type_data.scale_lines.local_grad) {
 8017496:	7da3      	ldrb	r3, [r4, #22]
 8017498:	f013 0f01 	tst.w	r3, #1
 801749c:	d0d4      	beq.n	8017448 <draw_ticks_and_labels+0xd0>
                            ratio = lv_map(value_of_line, indic->start_value, indic->end_value, LV_OPA_TRANSP, LV_OPA_COVER);
 801749e:	23ff      	movs	r3, #255	@ 0xff
 80174a0:	9300      	str	r3, [sp, #0]
 80174a2:	2300      	movs	r3, #0
 80174a4:	4628      	mov	r0, r5
 80174a6:	f7ff f9f2 	bl	801688e <lv_map>
 80174aa:	b2c2      	uxtb	r2, r0
 80174ac:	e7d7      	b.n	801745e <draw_ticks_and_labels+0xe6>
                    }
                }
            }

            int32_t angle_upscale = ((i * scale->angle_range) * 10) / (scale->tick_cnt - 1) +  + scale->rotation * 10;
 80174ae:	f8bb 301e 	ldrh.w	r3, [fp, #30]
 80174b2:	9a06      	ldr	r2, [sp, #24]
 80174b4:	fb03 f202 	mul.w	r2, r3, r2
 80174b8:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 80174bc:	0064      	lsls	r4, r4, #1
 80174be:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80174c2:	3b01      	subs	r3, #1
 80174c4:	fb94 f4f3 	sdiv	r4, r4, r3
 80174c8:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
 80174cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80174d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1

            line_dsc.color = line_color;
 80174d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80174d8:	f8ad 3148 	strh.w	r3, [sp, #328]	@ 0x148
            line_dsc.width = line_width;
 80174dc:	f8ad 714a 	strh.w	r7, [sp, #330]	@ 0x14a

            /*Draw a little bit longer lines to be sure the mask will clip them correctly
             *and to get a better precision*/
            lv_point_t p_outer;
            p_outer.x = p_center.x + r_out + LV_MAX(LV_DPI_DEF, r_out);
 80174e0:	f8bd 3154 	ldrh.w	r3, [sp, #340]	@ 0x154
 80174e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80174e6:	4413      	add	r3, r2
 80174e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80174ea:	2a82      	cmp	r2, #130	@ 0x82
 80174ec:	bfb8      	it	lt
 80174ee:	2282      	movlt	r2, #130	@ 0x82
 80174f0:	b292      	uxth	r2, r2
 80174f2:	fa12 f383 	uxtah	r3, r2, r3
 80174f6:	ae0f      	add	r6, sp, #60	@ 0x3c
 80174f8:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
            p_outer.y = p_center.y;
 80174fc:	f9bd 3156 	ldrsh.w	r3, [sp, #342]	@ 0x156
 8017500:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
            lv_point_transform(&p_outer, angle_upscale, 256, &p_center);
 8017504:	af55      	add	r7, sp, #340	@ 0x154
 8017506:	463b      	mov	r3, r7
 8017508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801750c:	4621      	mov	r1, r4
 801750e:	4630      	mov	r0, r6
 8017510:	f7ea fd1a 	bl	8001f48 <lv_point_transform>

            part_draw_dsc.p1 = &p_center;
 8017514:	972f      	str	r7, [sp, #188]	@ 0xbc
            part_draw_dsc.p2 = &p_outer;
 8017516:	9630      	str	r6, [sp, #192]	@ 0xc0
            part_draw_dsc.id = i;
 8017518:	f8cd 90d0 	str.w	r9, [sp, #208]	@ 0xd0
            part_draw_dsc.label_dsc = &label_dsc;
 801751c:	ab4a      	add	r3, sp, #296	@ 0x128
 801751e:	932b      	str	r3, [sp, #172]	@ 0xac

            /*Draw the text*/
            if(major) {
 8017520:	f1ba 0f00 	cmp.w	sl, #0
 8017524:	f000 80bc 	beq.w	80176a0 <draw_ticks_and_labels+0x328>
                lv_draw_mask_remove_id(outer_mask_id);
 8017528:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801752a:	f7f2 f903 	bl	8009734 <lv_draw_mask_remove_id>
                uint32_t r_text = r_in_major - scale->label_gap;
 801752e:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 8017532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017534:	1a9a      	subs	r2, r3, r2
                lv_point_t p;
                p.x = p_center.x + r_text;
 8017536:	f8bd 3154 	ldrh.w	r3, [sp, #340]	@ 0x154
 801753a:	4413      	add	r3, r2
 801753c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
                p.y = p_center.y;
 8017540:	f9bd 3156 	ldrsh.w	r3, [sp, #342]	@ 0x156
 8017544:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
                lv_point_transform(&p, angle_upscale, 256, &p_center);
 8017548:	463b      	mov	r3, r7
 801754a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801754e:	4621      	mov	r1, r4
 8017550:	a810      	add	r0, sp, #64	@ 0x40
 8017552:	f7ea fcf9 	bl	8001f48 <lv_point_transform>

                lv_draw_label_dsc_t label_dsc_tmp;
                lv_memcpy(&label_dsc_tmp, &label_dsc, sizeof(label_dsc_tmp));
 8017556:	ac1e      	add	r4, sp, #120	@ 0x78
 8017558:	2220      	movs	r2, #32
 801755a:	a94a      	add	r1, sp, #296	@ 0x128
 801755c:	4620      	mov	r0, r4
 801755e:	f7ff fac3 	bl	8016ae8 <lv_memcpy>

                part_draw_dsc.label_dsc = &label_dsc_tmp;
 8017562:	942b      	str	r4, [sp, #172]	@ 0xac
                char buf[16];

                lv_snprintf(buf, sizeof(buf), "%" LV_PRId32, value_of_line);
 8017564:	ac1a      	add	r4, sp, #104	@ 0x68
 8017566:	462b      	mov	r3, r5
 8017568:	4a56      	ldr	r2, [pc, #344]	@ (80176c4 <draw_ticks_and_labels+0x34c>)
 801756a:	2110      	movs	r1, #16
 801756c:	4620      	mov	r0, r4
 801756e:	f006 fc49 	bl	801de04 <lv_snprintf>
                part_draw_dsc.text = buf;
 8017572:	9431      	str	r4, [sp, #196]	@ 0xc4

                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017574:	aa26      	add	r2, sp, #152	@ 0x98
 8017576:	211a      	movs	r1, #26
 8017578:	9804      	ldr	r0, [sp, #16]
 801757a:	f7f9 fba5 	bl	8010cc8 <lv_event_send>

                lv_point_t label_size;
                lv_txt_get_size(&label_size, part_draw_dsc.text, label_dsc_tmp.font, label_dsc_tmp.letter_space,
 801757e:	2400      	movs	r4, #0
 8017580:	9402      	str	r4, [sp, #8]
 8017582:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8017586:	9301      	str	r3, [sp, #4]
 8017588:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	@ 0x8a
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8017592:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8017594:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8017596:	a811      	add	r0, sp, #68	@ 0x44
 8017598:	f010 f9b7 	bl	802790a <lv_txt_get_size>
                                label_dsc_tmp.line_space,
                                LV_COORD_MAX, LV_TEXT_FLAG_NONE);

                lv_area_t label_cord;
                label_cord.x1 = p.x - label_size.x / 2;
 801759c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80175a0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 80175a4:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
 80175a8:	eba2 0263 	sub.w	r2, r2, r3, asr #1
 80175ac:	f8ad 2060 	strh.w	r2, [sp, #96]	@ 0x60
                label_cord.y1 = p.y - label_size.y / 2;
 80175b0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 80175b4:	f9bd 0046 	ldrsh.w	r0, [sp, #70]	@ 0x46
 80175b8:	eb00 75d0 	add.w	r5, r0, r0, lsr #31
 80175bc:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80175c0:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
                label_cord.x2 = label_cord.x1 + label_size.x;
 80175c4:	b289      	uxth	r1, r1
 80175c6:	fa11 f282 	uxtah	r2, r1, r2
 80175ca:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
                label_cord.y2 = label_cord.y1 + label_size.y;
 80175ce:	b282      	uxth	r2, r0
 80175d0:	fa12 f383 	uxtah	r3, r2, r3
 80175d4:	f8ad 3066 	strh.w	r3, [sp, #102]	@ 0x66

                lv_draw_label(draw_ctx, part_draw_dsc.label_dsc, &label_cord, part_draw_dsc.text, NULL);
 80175d8:	9400      	str	r4, [sp, #0]
 80175da:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80175dc:	aa18      	add	r2, sp, #96	@ 0x60
 80175de:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80175e0:	9808      	ldr	r0, [sp, #32]
 80175e2:	f7f0 fd11 	bl	8008008 <lv_draw_label>

                outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80175e6:	4621      	mov	r1, r4
 80175e8:	a838      	add	r0, sp, #224	@ 0xe0
 80175ea:	f7f2 f85f 	bl	80096ac <lv_draw_mask_add>
 80175ee:	9009      	str	r0, [sp, #36]	@ 0x24
                part_draw_dsc.label_dsc = NULL;
                part_draw_dsc.text = NULL;
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
            }

            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 80175f0:	f1ba 0f00 	cmp.w	sl, #0
 80175f4:	d05d      	beq.n	80176b2 <draw_ticks_and_labels+0x33a>
 80175f6:	a83e      	add	r0, sp, #248	@ 0xf8
 80175f8:	2100      	movs	r1, #0
 80175fa:	f7f2 f857 	bl	80096ac <lv_draw_mask_add>
 80175fe:	4604      	mov	r4, r0
            lv_draw_line(draw_ctx, &line_dsc, &p_outer, &p_center);
 8017600:	ab55      	add	r3, sp, #340	@ 0x154
 8017602:	aa0f      	add	r2, sp, #60	@ 0x3c
 8017604:	a952      	add	r1, sp, #328	@ 0x148
 8017606:	9808      	ldr	r0, [sp, #32]
 8017608:	f7f1 f860 	bl	80086cc <lv_draw_line>
            lv_draw_mask_remove_id(inner_act_mask_id);
 801760c:	4620      	mov	r0, r4
 801760e:	f7f2 f891 	bl	8009734 <lv_draw_mask_remove_id>
            lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, &part_draw_dsc);
 8017612:	aa26      	add	r2, sp, #152	@ 0x98
 8017614:	2116      	movs	r1, #22
 8017616:	9804      	ldr	r0, [sp, #16]
 8017618:	f7f9 fb56 	bl	8010cc8 <lv_event_send>

            line_dsc.color = line_color_ori;
 801761c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8017620:	f8ad 3148 	strh.w	r3, [sp, #328]	@ 0x148
            line_dsc.width = line_width_ori;
 8017624:	9b05      	ldr	r3, [sp, #20]
 8017626:	f8ad 314a 	strh.w	r3, [sp, #330]	@ 0x14a
        for(i = 0; i < scale->tick_cnt; i++) {
 801762a:	f109 0901 	add.w	r9, r9, #1
 801762e:	fa1f f989 	uxth.w	r9, r9
 8017632:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8017636:	454a      	cmp	r2, r9
 8017638:	d946      	bls.n	80176c8 <draw_ticks_and_labels+0x350>
            minor_cnt++;
 801763a:	f108 0801 	add.w	r8, r8, #1
            if(minor_cnt == scale->tick_major_nth) {
 801763e:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8017642:	4543      	cmp	r3, r8
 8017644:	f43f aeee 	beq.w	8017424 <draw_ticks_and_labels+0xac>
            bool major = false;
 8017648:	f04f 0a00 	mov.w	sl, #0
            int32_t value_of_line = lv_map(i, 0, scale->tick_cnt - 1, scale->min, scale->max);
 801764c:	f8cd 9018 	str.w	r9, [sp, #24]
 8017650:	f8db 3014 	ldr.w	r3, [fp, #20]
 8017654:	f8db 1018 	ldr.w	r1, [fp, #24]
 8017658:	9100      	str	r1, [sp, #0]
 801765a:	3a01      	subs	r2, #1
 801765c:	2100      	movs	r1, #0
 801765e:	4648      	mov	r0, r9
 8017660:	f7ff f915 	bl	801688e <lv_map>
 8017664:	4605      	mov	r5, r0
            part_draw_dsc.value = value_of_line;
 8017666:	9036      	str	r0, [sp, #216]	@ 0xd8
            lv_color_t line_color = major ? scale->tick_major_color : scale->tick_color;
 8017668:	f1ba 0f00 	cmp.w	sl, #0
 801766c:	f43f aedf 	beq.w	801742e <draw_ticks_and_labels+0xb6>
 8017670:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8017674:	f8ad 301c 	strh.w	r3, [sp, #28]
            lv_color_t line_color_ori = line_color;
 8017678:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801767c:	f8ad 301e 	strh.w	r3, [sp, #30]
            lv_coord_t line_width_ori = major ? scale->tick_major_width : scale->tick_width;
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	f43f aed8 	beq.w	8017438 <draw_ticks_and_labels+0xc0>
 8017688:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 801768c:	9305      	str	r3, [sp, #20]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801768e:	9b04      	ldr	r3, [sp, #16]
 8017690:	f103 0630 	add.w	r6, r3, #48	@ 0x30
 8017694:	4630      	mov	r0, r6
 8017696:	f7fe ff68 	bl	801656a <_lv_ll_get_tail>
 801769a:	4604      	mov	r4, r0
            lv_coord_t line_width = line_width_ori;
 801769c:	9f05      	ldr	r7, [sp, #20]
            _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801769e:	e6e9      	b.n	8017474 <draw_ticks_and_labels+0xfc>
                part_draw_dsc.label_dsc = NULL;
 80176a0:	2300      	movs	r3, #0
 80176a2:	932b      	str	r3, [sp, #172]	@ 0xac
                part_draw_dsc.text = NULL;
 80176a4:	9331      	str	r3, [sp, #196]	@ 0xc4
                lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80176a6:	aa26      	add	r2, sp, #152	@ 0x98
 80176a8:	211a      	movs	r1, #26
 80176aa:	9804      	ldr	r0, [sp, #16]
 80176ac:	f7f9 fb0c 	bl	8010cc8 <lv_event_send>
 80176b0:	e79e      	b.n	80175f0 <draw_ticks_and_labels+0x278>
            inner_act_mask_id = lv_draw_mask_add(major ? &inner_major_mask : &inner_minor_mask, NULL);
 80176b2:	a844      	add	r0, sp, #272	@ 0x110
 80176b4:	e7a0      	b.n	80175f8 <draw_ticks_and_labels+0x280>
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80176b6:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 80176ba:	f04f 0900 	mov.w	r9, #0
 80176be:	e7b8      	b.n	8017632 <draw_ticks_and_labels+0x2ba>
 80176c0:	0802de0c 	.word	0x0802de0c
 80176c4:	08029c7c 	.word	0x08029c7c

        }
        lv_draw_mask_free_param(&inner_minor_mask);
 80176c8:	a844      	add	r0, sp, #272	@ 0x110
 80176ca:	f7f2 f85f 	bl	800978c <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&inner_major_mask);
 80176ce:	a83e      	add	r0, sp, #248	@ 0xf8
 80176d0:	f7f2 f85c 	bl	800978c <lv_draw_mask_free_param>
        lv_draw_mask_free_param(&outer_mask);
 80176d4:	a838      	add	r0, sp, #224	@ 0xe0
 80176d6:	f7f2 f859 	bl	800978c <lv_draw_mask_free_param>
        lv_draw_mask_remove_id(outer_mask_id);
 80176da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176dc:	f7f2 f82a 	bl	8009734 <lv_draw_mask_remove_id>
    _LV_LL_READ_BACK(&meter->scale_ll, scale) {
 80176e0:	4659      	mov	r1, fp
 80176e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80176e4:	f7fe ff49 	bl	801657a <_lv_ll_get_prev>
 80176e8:	4683      	mov	fp, r0
 80176ea:	f1bb 0f00 	cmp.w	fp, #0
 80176ee:	d06a      	beq.n	80177c6 <draw_ticks_and_labels+0x44e>
        part_draw_dsc.sub_part_ptr = scale;
 80176f0:	f8cd b0dc 	str.w	fp, [sp, #220]	@ 0xdc
        lv_coord_t r_in_minor = r_out - scale->tick_length;
 80176f4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80176f8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80176fa:	1af2      	subs	r2, r6, r3
 80176fc:	b292      	uxth	r2, r2
        lv_coord_t r_in_major = r_out - scale->tick_major_length;
 80176fe:	f8bb 400c 	ldrh.w	r4, [fp, #12]
 8017702:	1b31      	subs	r1, r6, r4
 8017704:	b28d      	uxth	r5, r1
 8017706:	b209      	sxth	r1, r1
 8017708:	910c      	str	r1, [sp, #48]	@ 0x30
        area_inner_minor.x1 = p_center.x - r_in_minor;
 801770a:	f8bd 1154 	ldrh.w	r1, [sp, #340]	@ 0x154
 801770e:	1b9b      	subs	r3, r3, r6
 8017710:	b29b      	uxth	r3, r3
 8017712:	18c8      	adds	r0, r1, r3
 8017714:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
        area_inner_minor.y1 = p_center.y - r_in_minor;
 8017718:	f8bd 0156 	ldrh.w	r0, [sp, #342]	@ 0x156
 801771c:	4403      	add	r3, r0
 801771e:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
        area_inner_minor.x2 = p_center.x + r_in_minor;
 8017722:	4411      	add	r1, r2
 8017724:	f8ad 104c 	strh.w	r1, [sp, #76]	@ 0x4c
        area_inner_minor.y2 = p_center.y + r_in_minor;
 8017728:	4402      	add	r2, r0
 801772a:	f8ad 204e 	strh.w	r2, [sp, #78]	@ 0x4e
        lv_draw_mask_radius_init(&inner_minor_mask, &area_inner_minor, LV_RADIUS_CIRCLE, true);
 801772e:	2301      	movs	r3, #1
 8017730:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017734:	a912      	add	r1, sp, #72	@ 0x48
 8017736:	a844      	add	r0, sp, #272	@ 0x110
 8017738:	f7f2 f9de 	bl	8009af8 <lv_draw_mask_radius_init>
        area_inner_major.x1 = p_center.x - r_in_major;
 801773c:	f8bd 2154 	ldrh.w	r2, [sp, #340]	@ 0x154
 8017740:	1ba3      	subs	r3, r4, r6
 8017742:	b29b      	uxth	r3, r3
 8017744:	1899      	adds	r1, r3, r2
 8017746:	f8ad 1050 	strh.w	r1, [sp, #80]	@ 0x50
        area_inner_major.y1 = p_center.y - r_in_major;
 801774a:	f8bd 1156 	ldrh.w	r1, [sp, #342]	@ 0x156
 801774e:	440b      	add	r3, r1
 8017750:	f8ad 3052 	strh.w	r3, [sp, #82]	@ 0x52
        area_inner_major.x2 = p_center.x + r_in_major - 1;
 8017754:	18ab      	adds	r3, r5, r2
 8017756:	b29b      	uxth	r3, r3
 8017758:	3b01      	subs	r3, #1
 801775a:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
        area_inner_major.y2 = p_center.y + r_in_major - 1;
 801775e:	186b      	adds	r3, r5, r1
 8017760:	b29b      	uxth	r3, r3
 8017762:	3b01      	subs	r3, #1
 8017764:	f8ad 3056 	strh.w	r3, [sp, #86]	@ 0x56
        lv_draw_mask_radius_init(&inner_major_mask, &area_inner_major, LV_RADIUS_CIRCLE, true);
 8017768:	2301      	movs	r3, #1
 801776a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801776e:	a914      	add	r1, sp, #80	@ 0x50
 8017770:	a83e      	add	r0, sp, #248	@ 0xf8
 8017772:	f7f2 f9c1 	bl	8009af8 <lv_draw_mask_radius_init>
        area_outer.x1 = p_center.x - r_out;
 8017776:	f8bd 2154 	ldrh.w	r2, [sp, #340]	@ 0x154
 801777a:	1b93      	subs	r3, r2, r6
 801777c:	f8ad 3058 	strh.w	r3, [sp, #88]	@ 0x58
        area_outer.y1 = p_center.y - r_out;
 8017780:	f8bd 3156 	ldrh.w	r3, [sp, #342]	@ 0x156
 8017784:	1b99      	subs	r1, r3, r6
 8017786:	f8ad 105a 	strh.w	r1, [sp, #90]	@ 0x5a
        area_outer.x2 = p_center.x + r_out - 1;
 801778a:	4432      	add	r2, r6
 801778c:	b292      	uxth	r2, r2
 801778e:	3a01      	subs	r2, #1
 8017790:	f8ad 205c 	strh.w	r2, [sp, #92]	@ 0x5c
        area_outer.y2 = p_center.y + r_out - 1;
 8017794:	4433      	add	r3, r6
 8017796:	b29b      	uxth	r3, r3
 8017798:	3b01      	subs	r3, #1
 801779a:	f8ad 305e 	strh.w	r3, [sp, #94]	@ 0x5e
        lv_draw_mask_radius_init(&outer_mask, &area_outer, LV_RADIUS_CIRCLE, false);
 801779e:	2300      	movs	r3, #0
 80177a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80177a4:	a916      	add	r1, sp, #88	@ 0x58
 80177a6:	a838      	add	r0, sp, #224	@ 0xe0
 80177a8:	f7f2 f9a6 	bl	8009af8 <lv_draw_mask_radius_init>
        int16_t outer_mask_id = lv_draw_mask_add(&outer_mask, NULL);
 80177ac:	2100      	movs	r1, #0
 80177ae:	a838      	add	r0, sp, #224	@ 0xe0
 80177b0:	f7f1 ff7c 	bl	80096ac <lv_draw_mask_add>
 80177b4:	9009      	str	r0, [sp, #36]	@ 0x24
        uint32_t minor_cnt = scale->tick_major_nth ? scale->tick_major_nth - 1 : 0xFFFF;
 80177b6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f43f af7b 	beq.w	80176b6 <draw_ticks_and_labels+0x33e>
 80177c0:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 80177c4:	e779      	b.n	80176ba <draw_ticks_and_labels+0x342>
    }
}
 80177c6:	b057      	add	sp, #348	@ 0x15c
 80177c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177cc <draw_needles>:


static void draw_needles(lv_obj_t * obj, lv_draw_ctx_t * draw_ctx, const lv_area_t * scale_area)
{
 80177cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177d0:	b0a5      	sub	sp, #148	@ 0x94
 80177d2:	4607      	mov	r7, r0
 80177d4:	468a      	mov	sl, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80177d6:	8896      	ldrh	r6, [r2, #4]
 80177d8:	8813      	ldrh	r3, [r2, #0]
 80177da:	1af6      	subs	r6, r6, r3
 80177dc:	b2b6      	uxth	r6, r6
 80177de:	3601      	adds	r6, #1
    lv_meter_t * meter = (lv_meter_t *)obj;

    lv_coord_t r_edge = lv_area_get_width(scale_area) / 2;
 80177e0:	f3c6 31c0 	ubfx	r1, r6, #15, #1
 80177e4:	fa01 f686 	sxtah	r6, r1, r6
    lv_point_t scale_center;
    scale_center.x = scale_area->x1 + r_edge;
 80177e8:	f3c6 064f 	ubfx	r6, r6, #1, #16
 80177ec:	4433      	add	r3, r6
 80177ee:	f8ad 308c 	strh.w	r3, [sp, #140]	@ 0x8c
    scale_center.y = scale_area->y1 + r_edge;
 80177f2:	8853      	ldrh	r3, [r2, #2]
 80177f4:	4433      	add	r3, r6
 80177f6:	f8ad 308e 	strh.w	r3, [sp, #142]	@ 0x8e

    lv_draw_line_dsc_t line_dsc;
    lv_draw_line_dsc_init(&line_dsc);
 80177fa:	a820      	add	r0, sp, #128	@ 0x80
 80177fc:	f7f0 ff51 	bl	80086a2 <lv_draw_line_dsc_init>
    lv_obj_init_draw_line_dsc(obj, LV_PART_ITEMS, &line_dsc);
 8017800:	aa20      	add	r2, sp, #128	@ 0x80
 8017802:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8017806:	4638      	mov	r0, r7
 8017808:	f001 fc53 	bl	80190b2 <lv_obj_init_draw_line_dsc>

    lv_draw_img_dsc_t img_dsc;
    lv_draw_img_dsc_init(&img_dsc);
 801780c:	a81a      	add	r0, sp, #104	@ 0x68
 801780e:	f7f0 f9f3 	bl	8007bf8 <lv_draw_img_dsc_init>
    lv_obj_init_draw_img_dsc(obj, LV_PART_ITEMS, &img_dsc);
 8017812:	aa1a      	add	r2, sp, #104	@ 0x68
 8017814:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8017818:	4638      	mov	r0, r7
 801781a:	f001 fbf6 	bl	801900a <lv_obj_init_draw_img_dsc>
    lv_opa_t opa_main = lv_obj_get_style_opa_recursive(obj, LV_PART_MAIN);
 801781e:	2100      	movs	r1, #0
 8017820:	4638      	mov	r0, r7
 8017822:	f005 fbf7 	bl	801d014 <lv_obj_get_style_opa_recursive>
 8017826:	4683      	mov	fp, r0

    lv_obj_draw_part_dsc_t part_draw_dsc;
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8017828:	4651      	mov	r1, sl
 801782a:	a808      	add	r0, sp, #32
 801782c:	f001 fd4f 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.class_p = MY_CLASS;
 8017830:	4b75      	ldr	r3, [pc, #468]	@ (8017a08 <draw_needles+0x23c>)
 8017832:	9309      	str	r3, [sp, #36]	@ 0x24
    part_draw_dsc.p1 = &scale_center;
 8017834:	ab23      	add	r3, sp, #140	@ 0x8c
 8017836:	9311      	str	r3, [sp, #68]	@ 0x44
    part_draw_dsc.part = LV_PART_INDICATOR;
 8017838:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801783c:	9315      	str	r3, [sp, #84]	@ 0x54

    lv_meter_indicator_t * indic;
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 801783e:	f107 0930 	add.w	r9, r7, #48	@ 0x30
 8017842:	4648      	mov	r0, r9
 8017844:	f7fe fe91 	bl	801656a <_lv_ll_get_tail>
 8017848:	4604      	mov	r4, r0
 801784a:	e081      	b.n	8017950 <draw_needles+0x184>
        lv_meter_scale_t * scale = indic->scale;
        part_draw_dsc.sub_part_ptr = indic;

        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801784c:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8017850:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
 8017854:	449c      	add	ip, r3
 8017856:	69aa      	ldr	r2, [r5, #24]
 8017858:	6969      	ldr	r1, [r5, #20]
 801785a:	68e0      	ldr	r0, [r4, #12]
 801785c:	f8cd c000 	str.w	ip, [sp]
 8017860:	f7ff f815 	bl	801688e <lv_map>
            lv_coord_t r_out = r_edge + scale->r_mod + indic->type_data.needle_line.r_mod;
 8017864:	8bad      	ldrh	r5, [r5, #28]
 8017866:	4435      	add	r5, r6
 8017868:	8a63      	ldrh	r3, [r4, #18]
 801786a:	fa13 f585 	uxtah	r5, r3, r5
 801786e:	b22d      	sxth	r5, r5
            lv_point_t p_end;
            p_end.y = (lv_trigo_sin(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.y;
 8017870:	9003      	str	r0, [sp, #12]
 8017872:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8017876:	f7fe ff2b 	bl	80166d0 <lv_trigo_sin>
 801787a:	fb05 f000 	mul.w	r0, r5, r0
 801787e:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8017a0c <draw_needles+0x240>
 8017882:	fb88 2300 	smull	r2, r3, r8, r0
 8017886:	4403      	add	r3, r0
 8017888:	17c0      	asrs	r0, r0, #31
 801788a:	ebc0 30a3 	rsb	r0, r0, r3, asr #14
 801788e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	@ 0x8e
 8017892:	4403      	add	r3, r0
 8017894:	f8ad 301a 	strh.w	r3, [sp, #26]
 */
int16_t /* LV_ATTRIBUTE_FAST_MEM */ lv_trigo_sin(int16_t angle);

static inline int16_t LV_ATTRIBUTE_FAST_MEM lv_trigo_cos(int16_t angle)
{
    return lv_trigo_sin(angle + 90);
 8017898:	9803      	ldr	r0, [sp, #12]
 801789a:	305a      	adds	r0, #90	@ 0x5a
 801789c:	b200      	sxth	r0, r0
 801789e:	f7fe ff17 	bl	80166d0 <lv_trigo_sin>
            p_end.x = (lv_trigo_cos(angle) * (r_out)) / LV_TRIGO_SIN_MAX + scale_center.x;
 80178a2:	fb00 f505 	mul.w	r5, r0, r5
 80178a6:	fb88 3805 	smull	r3, r8, r8, r5
 80178aa:	44a8      	add	r8, r5
 80178ac:	17ed      	asrs	r5, r5, #31
 80178ae:	ebc5 35a8 	rsb	r5, r5, r8, asr #14
 80178b2:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 80178b6:	442b      	add	r3, r5
 80178b8:	f8ad 3018 	strh.w	r3, [sp, #24]
            line_dsc.color = indic->type_data.needle_line.color;
 80178bc:	8aa3      	ldrh	r3, [r4, #20]
 80178be:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
            line_dsc.width = indic->type_data.needle_line.width;
 80178c2:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80178c6:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80178ca:	7963      	ldrb	r3, [r4, #5]
 80178cc:	2bfd      	cmp	r3, #253	@ 0xfd
 80178ce:	d820      	bhi.n	8017912 <draw_needles+0x146>
 80178d0:	fb03 f30b 	mul.w	r3, r3, fp
 80178d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80178d8:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88

            part_draw_dsc.type = LV_METER_DRAW_PART_NEEDLE_LINE;
 80178dc:	2301      	movs	r3, #1
 80178de:	930a      	str	r3, [sp, #40]	@ 0x28
            part_draw_dsc.line_dsc = &line_dsc;
 80178e0:	ad20      	add	r5, sp, #128	@ 0x80
 80178e2:	950e      	str	r5, [sp, #56]	@ 0x38
            part_draw_dsc.p2 = &p_end;
 80178e4:	f10d 0818 	add.w	r8, sp, #24
 80178e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
            part_draw_dsc.p1 = &scale_center;
 80178ec:	ab23      	add	r3, sp, #140	@ 0x8c
 80178ee:	9311      	str	r3, [sp, #68]	@ 0x44
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 80178f0:	aa08      	add	r2, sp, #32
 80178f2:	211a      	movs	r1, #26
 80178f4:	4638      	mov	r0, r7
 80178f6:	f7f9 f9e7 	bl	8010cc8 <lv_event_send>
            lv_draw_line(draw_ctx, &line_dsc, part_draw_dsc.p1, &p_end);
 80178fa:	4643      	mov	r3, r8
 80178fc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80178fe:	4629      	mov	r1, r5
 8017900:	4650      	mov	r0, sl
 8017902:	f7f0 fee3 	bl	80086cc <lv_draw_line>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8017906:	aa08      	add	r2, sp, #32
 8017908:	211b      	movs	r1, #27
 801790a:	4638      	mov	r0, r7
 801790c:	f7f9 f9dc 	bl	8010cc8 <lv_event_send>
 8017910:	e019      	b.n	8017946 <draw_needles+0x17a>
            line_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8017912:	465b      	mov	r3, fp
 8017914:	e7e0      	b.n	80178d8 <draw_needles+0x10c>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
            a.x2 = a.x1 + info.w - 1;
            a.y2 = a.y1 + info.h - 1;

            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 8017916:	465b      	mov	r3, fp
 8017918:	e063      	b.n	80179e2 <draw_needles+0x216>
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
            angle = angle * 10;
            if(angle > 3600) angle -= 3600;
            img_dsc.angle = angle;
 801791a:	f8ad 3068 	strh.w	r3, [sp, #104]	@ 0x68

            part_draw_dsc.type = LV_METER_DRAW_PART_NEEDLE_IMG;
 801791e:	2302      	movs	r3, #2
 8017920:	930a      	str	r3, [sp, #40]	@ 0x28
            part_draw_dsc.img_dsc = &img_dsc;
 8017922:	ad1a      	add	r5, sp, #104	@ 0x68
 8017924:	950f      	str	r5, [sp, #60]	@ 0x3c

            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8017926:	aa08      	add	r2, sp, #32
 8017928:	211a      	movs	r1, #26
 801792a:	4638      	mov	r0, r7
 801792c:	f7f9 f9cc 	bl	8010cc8 <lv_event_send>
            lv_draw_img(draw_ctx, &img_dsc, &a, indic->type_data.needle_img.src);
 8017930:	6923      	ldr	r3, [r4, #16]
 8017932:	aa06      	add	r2, sp, #24
 8017934:	4629      	mov	r1, r5
 8017936:	4650      	mov	r0, sl
 8017938:	f7f0 faec 	bl	8007f14 <lv_draw_img>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 801793c:	aa08      	add	r2, sp, #32
 801793e:	211b      	movs	r1, #27
 8017940:	4638      	mov	r0, r7
 8017942:	f7f9 f9c1 	bl	8010cc8 <lv_event_send>
    _LV_LL_READ_BACK(&meter->indicator_ll, indic) {
 8017946:	4621      	mov	r1, r4
 8017948:	4648      	mov	r0, r9
 801794a:	f7fe fe16 	bl	801657a <_lv_ll_get_prev>
 801794e:	4604      	mov	r4, r0
 8017950:	2c00      	cmp	r4, #0
 8017952:	d056      	beq.n	8017a02 <draw_needles+0x236>
        lv_meter_scale_t * scale = indic->scale;
 8017954:	6825      	ldr	r5, [r4, #0]
        part_draw_dsc.sub_part_ptr = indic;
 8017956:	9419      	str	r4, [sp, #100]	@ 0x64
        if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_LINE) {
 8017958:	7923      	ldrb	r3, [r4, #4]
 801795a:	2b01      	cmp	r3, #1
 801795c:	f43f af76 	beq.w	801784c <draw_needles+0x80>
        else if(indic->type == LV_METER_INDICATOR_TYPE_NEEDLE_IMG) {
 8017960:	2b00      	cmp	r3, #0
 8017962:	d1f0      	bne.n	8017946 <draw_needles+0x17a>
            if(indic->type_data.needle_img.src == NULL) continue;
 8017964:	6923      	ldr	r3, [r4, #16]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d0ed      	beq.n	8017946 <draw_needles+0x17a>
            int32_t angle = lv_map(indic->end_value, scale->min, scale->max, scale->rotation, scale->rotation + scale->angle_range);
 801796a:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 801796e:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
 8017972:	449c      	add	ip, r3
 8017974:	69aa      	ldr	r2, [r5, #24]
 8017976:	6969      	ldr	r1, [r5, #20]
 8017978:	68e0      	ldr	r0, [r4, #12]
 801797a:	f8cd c000 	str.w	ip, [sp]
 801797e:	f7fe ff86 	bl	801688e <lv_map>
 8017982:	4605      	mov	r5, r0
            lv_img_decoder_get_info(indic->type_data.needle_img.src, &info);
 8017984:	a905      	add	r1, sp, #20
 8017986:	6920      	ldr	r0, [r4, #16]
 8017988:	f7fc fe04 	bl	8014594 <lv_img_decoder_get_info>
            a.x1 = scale_center.x - indic->type_data.needle_img.pivot.x;
 801798c:	f8bd 208c 	ldrh.w	r2, [sp, #140]	@ 0x8c
 8017990:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8017994:	fa1f f38c 	uxth.w	r3, ip
 8017998:	1ad2      	subs	r2, r2, r3
 801799a:	f8ad 2018 	strh.w	r2, [sp, #24]
            a.y1 = scale_center.y - indic->type_data.needle_img.pivot.y;
 801799e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	@ 0x8e
 80179a2:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80179a6:	b281      	uxth	r1, r0
 80179a8:	1a5b      	subs	r3, r3, r1
 80179aa:	f8ad 301a 	strh.w	r3, [sp, #26]
            a.x2 = a.x1 + info.w - 1;
 80179ae:	9905      	ldr	r1, [sp, #20]
 80179b0:	f3c1 218a 	ubfx	r1, r1, #10, #11
 80179b4:	fa11 f282 	uxtah	r2, r1, r2
 80179b8:	b292      	uxth	r2, r2
 80179ba:	3a01      	subs	r2, #1
 80179bc:	f8ad 201c 	strh.w	r2, [sp, #28]
            a.y2 = a.y1 + info.h - 1;
 80179c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80179c4:	f3c2 124a 	ubfx	r2, r2, #5, #11
 80179c8:	fa12 f383 	uxtah	r3, r2, r3
 80179cc:	b29b      	uxth	r3, r3
 80179ce:	3b01      	subs	r3, #1
 80179d0:	f8ad 301e 	strh.w	r3, [sp, #30]
            img_dsc.opa = indic->opa > LV_OPA_MAX ? opa_main : (opa_main * indic->opa) >> 8;
 80179d4:	7963      	ldrb	r3, [r4, #5]
 80179d6:	2bfd      	cmp	r3, #253	@ 0xfd
 80179d8:	d89d      	bhi.n	8017916 <draw_needles+0x14a>
 80179da:	fb03 f30b 	mul.w	r3, r3, fp
 80179de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80179e2:	f88d 3073 	strb.w	r3, [sp, #115]	@ 0x73
            img_dsc.pivot.x = indic->type_data.needle_img.pivot.x;
 80179e6:	f8ad c06c 	strh.w	ip, [sp, #108]	@ 0x6c
            img_dsc.pivot.y = indic->type_data.needle_img.pivot.y;
 80179ea:	f8ad 006e 	strh.w	r0, [sp, #110]	@ 0x6e
            angle = angle * 10;
 80179ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80179f2:	006d      	lsls	r5, r5, #1
 80179f4:	462b      	mov	r3, r5
            if(angle > 3600) angle -= 3600;
 80179f6:	f5b5 6f61 	cmp.w	r5, #3600	@ 0xe10
 80179fa:	dd8e      	ble.n	801791a <draw_needles+0x14e>
 80179fc:	f5a5 6361 	sub.w	r3, r5, #3600	@ 0xe10
 8017a00:	e78b      	b.n	801791a <draw_needles+0x14e>
        }
    }
}
 8017a02:	b025      	add	sp, #148	@ 0x94
 8017a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a08:	0802de0c 	.word	0x0802de0c
 8017a0c:	80010003 	.word	0x80010003

08017a10 <lv_meter_event>:
{
 8017a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a14:	b094      	sub	sp, #80	@ 0x50
 8017a16:	460c      	mov	r4, r1
    lv_res_t res = lv_obj_event_base(MY_CLASS, e);
 8017a18:	483a      	ldr	r0, [pc, #232]	@ (8017b04 <lv_meter_event+0xf4>)
 8017a1a:	f7f9 f8ab 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8017a1e:	2801      	cmp	r0, #1
 8017a20:	d002      	beq.n	8017a28 <lv_meter_event+0x18>
}
 8017a22:	b014      	add	sp, #80	@ 0x50
 8017a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f7f9 f97b 	bl	8010d24 <lv_event_get_code>
 8017a2e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017a30:	4620      	mov	r0, r4
 8017a32:	f7f9 f973 	bl	8010d1c <lv_event_get_target>
 8017a36:	4605      	mov	r5, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 8017a38:	2e15      	cmp	r6, #21
 8017a3a:	d1f2      	bne.n	8017a22 <lv_meter_event+0x12>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	f7f9 f9e5 	bl	8010e0c <lv_event_get_draw_ctx>
 8017a42:	4604      	mov	r4, r0
        lv_obj_get_content_coords(obj, &scale_area);
 8017a44:	a902      	add	r1, sp, #8
 8017a46:	4628      	mov	r0, r5
 8017a48:	f001 fe9c 	bl	8019784 <lv_obj_get_content_coords>
        draw_arcs(obj, draw_ctx, &scale_area);
 8017a4c:	aa02      	add	r2, sp, #8
 8017a4e:	4621      	mov	r1, r4
 8017a50:	4628      	mov	r0, r5
 8017a52:	f7ff fbf1 	bl	8017238 <draw_arcs>
        draw_ticks_and_labels(obj, draw_ctx, &scale_area);
 8017a56:	aa02      	add	r2, sp, #8
 8017a58:	4621      	mov	r1, r4
 8017a5a:	4628      	mov	r0, r5
 8017a5c:	f7ff fc8c 	bl	8017378 <draw_ticks_and_labels>
        draw_needles(obj, draw_ctx, &scale_area);
 8017a60:	aa02      	add	r2, sp, #8
 8017a62:	4621      	mov	r1, r4
 8017a64:	4628      	mov	r0, r5
 8017a66:	f7ff feb1 	bl	80177cc <draw_needles>
 8017a6a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017a6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017a72:	1a9b      	subs	r3, r3, r2
 8017a74:	b29b      	uxth	r3, r3
 8017a76:	3301      	adds	r3, #1
        lv_coord_t r_edge = lv_area_get_width(&scale_area) / 2;
 8017a78:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 8017a7c:	fa01 f383 	sxtah	r3, r1, r3
        scale_center.x = scale_area.x1 + r_edge;
 8017a80:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8017a84:	441a      	add	r2, r3
 8017a86:	b297      	uxth	r7, r2
 8017a88:	f8ad 2004 	strh.w	r2, [sp, #4]
        scale_center.y = scale_area.y1 + r_edge;
 8017a8c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017a90:	4413      	add	r3, r2
 8017a92:	fa1f f883 	uxth.w	r8, r3
 8017a96:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_draw_rect_dsc_init(&mid_dsc);
 8017a9a:	a806      	add	r0, sp, #24
 8017a9c:	f7f2 f8d8 	bl	8009c50 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &mid_dsc);
 8017aa0:	aa06      	add	r2, sp, #24
 8017aa2:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	f001 f90c 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8017aac:	2201      	movs	r2, #1
 8017aae:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	f004 fe1e 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t w = lv_obj_get_style_width(obj, LV_PART_INDICATOR) / 2;
 8017ab8:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8017abc:	fa03 f080 	sxtah	r0, r3, r0
 8017ac0:	1046      	asrs	r6, r0, #1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8017ac2:	2204      	movs	r2, #4
 8017ac4:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8017ac8:	4628      	mov	r0, r5
 8017aca:	f004 fe13 	bl	801c6f4 <lv_obj_get_style_prop>
        lv_coord_t h = lv_obj_get_style_height(obj, LV_PART_INDICATOR) / 2;
 8017ace:	f3c0 33c0 	ubfx	r3, r0, #15, #1
 8017ad2:	fa03 f080 	sxtah	r0, r3, r0
        nm_cord.x1 = scale_center.x - w;
 8017ad6:	b2b3      	uxth	r3, r6
 8017ad8:	1afa      	subs	r2, r7, r3
 8017ada:	f8ad 2010 	strh.w	r2, [sp, #16]
        nm_cord.y1 = scale_center.y - h;
 8017ade:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8017ae2:	eba8 0200 	sub.w	r2, r8, r0
 8017ae6:	f8ad 2012 	strh.w	r2, [sp, #18]
        nm_cord.x2 = scale_center.x + w;
 8017aea:	441f      	add	r7, r3
 8017aec:	f8ad 7014 	strh.w	r7, [sp, #20]
        nm_cord.y2 = scale_center.y + h;
 8017af0:	4480      	add	r8, r0
 8017af2:	f8ad 8016 	strh.w	r8, [sp, #22]
        lv_draw_rect(draw_ctx, &mid_dsc, &nm_cord);
 8017af6:	aa04      	add	r2, sp, #16
 8017af8:	a906      	add	r1, sp, #24
 8017afa:	4620      	mov	r0, r4
 8017afc:	f7f2 f8ea 	bl	8009cd4 <lv_draw_rect>
 8017b00:	e78f      	b.n	8017a22 <lv_meter_event+0x12>
 8017b02:	bf00      	nop
 8017b04:	0802de0c 	.word	0x0802de0c

08017b08 <lv_meter_destructor>:
{
 8017b08:	b510      	push	{r4, lr}
 8017b0a:	460c      	mov	r4, r1
    _lv_ll_clear(&meter->indicator_ll);
 8017b0c:	f101 0030 	add.w	r0, r1, #48	@ 0x30
 8017b10:	f7fe fdab 	bl	801666a <_lv_ll_clear>
    _lv_ll_clear(&meter->scale_ll);
 8017b14:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8017b18:	f7fe fda7 	bl	801666a <_lv_ll_clear>
}
 8017b1c:	bd10      	pop	{r4, pc}

08017b1e <lv_meter_constructor>:
{
 8017b1e:	b510      	push	{r4, lr}
 8017b20:	460c      	mov	r4, r1
    _lv_ll_init(&meter->scale_ll, sizeof(lv_meter_scale_t));
 8017b22:	2124      	movs	r1, #36	@ 0x24
 8017b24:	1860      	adds	r0, r4, r1
 8017b26:	f7fe fcd6 	bl	80164d6 <_lv_ll_init>
    _lv_ll_init(&meter->indicator_ll, sizeof(lv_meter_indicator_t));
 8017b2a:	211c      	movs	r1, #28
 8017b2c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8017b30:	f7fe fcd1 	bl	80164d6 <_lv_ll_init>
}
 8017b34:	bd10      	pop	{r4, pc}

08017b36 <scrollbar_init_draw_dsc>:
 * @param obj pointer to an object
 * @param dsc the draw descriptor to initialize
 * @return LV_RES_OK: the scrollbar is visible; LV_RES_INV: the scrollbar is not visible
 */
static lv_res_t scrollbar_init_draw_dsc(lv_obj_t * obj, lv_draw_rect_dsc_t * dsc)
{
 8017b36:	b538      	push	{r3, r4, r5, lr}
 8017b38:	4605      	mov	r5, r0
 8017b3a:	460c      	mov	r4, r1
    lv_draw_rect_dsc_init(dsc);
 8017b3c:	4608      	mov	r0, r1
 8017b3e:	f7f2 f887 	bl	8009c50 <lv_draw_rect_dsc_init>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_bg_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8017b42:	2221      	movs	r2, #33	@ 0x21
 8017b44:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017b48:	4628      	mov	r0, r5
 8017b4a:	f004 fdd3 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8017b4e:	b2c0      	uxtb	r0, r0
    dsc->bg_opa = lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR);
 8017b50:	70e0      	strb	r0, [r4, #3]
    if(dsc->bg_opa > LV_OPA_MIN) {
 8017b52:	2802      	cmp	r0, #2
 8017b54:	d83b      	bhi.n	8017bce <scrollbar_init_draw_dsc+0x98>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_border_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8017b56:	2231      	movs	r2, #49	@ 0x31
 8017b58:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017b5c:	4628      	mov	r0, r5
 8017b5e:	f004 fdc9 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8017b62:	b2c0      	uxtb	r0, r0
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
    }

    dsc->border_opa = lv_obj_get_style_border_opa(obj, LV_PART_SCROLLBAR);
 8017b64:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
    if(dsc->border_opa > LV_OPA_MIN) {
 8017b68:	2802      	cmp	r0, #2
 8017b6a:	d838      	bhi.n	8017bde <scrollbar_init_draw_dsc+0xa8>
    return v.color;
}

static inline lv_opa_t lv_obj_get_style_shadow_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8017b6c:	2245      	movs	r2, #69	@ 0x45
 8017b6e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017b72:	4628      	mov	r0, r5
 8017b74:	f004 fdbe 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8017b78:	b2c0      	uxtb	r0, r0
            dsc->border_opa = LV_OPA_TRANSP;
        }
    }

#if LV_DRAW_COMPLEX
    dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, LV_PART_SCROLLBAR);
 8017b7a:	f884 0036 	strb.w	r0, [r4, #54]	@ 0x36
    if(dsc->shadow_opa > LV_OPA_MIN) {
 8017b7e:	2802      	cmp	r0, #2
 8017b80:	d843      	bhi.n	8017c0a <scrollbar_init_draw_dsc+0xd4>
        else {
            dsc->shadow_opa = LV_OPA_TRANSP;
        }
    }

    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, LV_PART_SCROLLBAR);
 8017b82:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017b86:	4628      	mov	r0, r5
 8017b88:	f005 fa44 	bl	801d014 <lv_obj_get_style_opa_recursive>
    if(opa < LV_OPA_MAX) {
 8017b8c:	28fc      	cmp	r0, #252	@ 0xfc
 8017b8e:	d80d      	bhi.n	8017bac <scrollbar_init_draw_dsc+0x76>
        dsc->bg_opa = (dsc->bg_opa * opa) >> 8;
 8017b90:	78e3      	ldrb	r3, [r4, #3]
 8017b92:	fb00 f303 	mul.w	r3, r0, r3
 8017b96:	121b      	asrs	r3, r3, #8
 8017b98:	70e3      	strb	r3, [r4, #3]
        dsc->border_opa = (dsc->bg_opa * opa) >> 8;
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	fb00 f303 	mul.w	r3, r0, r3
 8017ba0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017ba4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
        dsc->shadow_opa = (dsc->bg_opa * opa) >> 8;
 8017ba8:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
    }

    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP || dsc->shadow_opa != LV_OPA_TRANSP) {
 8017bac:	78e3      	ldrb	r3, [r4, #3]
 8017bae:	b92b      	cbnz	r3, 8017bbc <scrollbar_init_draw_dsc+0x86>
 8017bb0:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8017bb4:	b913      	cbnz	r3, 8017bbc <scrollbar_init_draw_dsc+0x86>
 8017bb6:	f894 0036 	ldrb.w	r0, [r4, #54]	@ 0x36
 8017bba:	b138      	cbz	r0, 8017bcc <scrollbar_init_draw_dsc+0x96>
    return (lv_text_align_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_radius(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8017bbc:	220b      	movs	r2, #11
 8017bbe:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017bc2:	4628      	mov	r0, r5
 8017bc4:	f004 fd96 	bl	801c6f4 <lv_obj_get_style_prop>
        dsc->radius = lv_obj_get_style_radius(obj, LV_PART_SCROLLBAR);
 8017bc8:	8020      	strh	r0, [r4, #0]
        return LV_RES_OK;
 8017bca:	2001      	movs	r0, #1
    }
#else
    if(dsc->bg_opa != LV_OPA_TRANSP || dsc->border_opa != LV_OPA_TRANSP) return LV_RES_OK;
    else return LV_RES_INV;
#endif
}
 8017bcc:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR);
 8017bce:	2220      	movs	r2, #32
 8017bd0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017bd4:	4628      	mov	r0, r5
 8017bd6:	f004 fd8d 	bl	801c6f4 <lv_obj_get_style_prop>
        dsc->bg_color = lv_obj_get_style_bg_color(obj, LV_PART_SCROLLBAR);
 8017bda:	80a0      	strh	r0, [r4, #4]
 8017bdc:	e7bb      	b.n	8017b56 <scrollbar_init_draw_dsc+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8017bde:	2232      	movs	r2, #50	@ 0x32
 8017be0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017be4:	4628      	mov	r0, r5
 8017be6:	f004 fd85 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017bea:	b200      	sxth	r0, r0
        dsc->border_width = lv_obj_get_style_border_width(obj, LV_PART_SCROLLBAR);
 8017bec:	8420      	strh	r0, [r4, #32]
        if(dsc->border_width > 0) {
 8017bee:	2800      	cmp	r0, #0
 8017bf0:	dc03      	bgt.n	8017bfa <scrollbar_init_draw_dsc+0xc4>
            dsc->border_opa = LV_OPA_TRANSP;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8017bf8:	e7b8      	b.n	8017b6c <scrollbar_init_draw_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR);
 8017bfa:	2230      	movs	r2, #48	@ 0x30
 8017bfc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017c00:	4628      	mov	r0, r5
 8017c02:	f004 fd77 	bl	801c6f4 <lv_obj_get_style_prop>
            dsc->border_color = lv_obj_get_style_border_color(obj, LV_PART_SCROLLBAR);
 8017c06:	83e0      	strh	r0, [r4, #30]
 8017c08:	e7b0      	b.n	8017b6c <scrollbar_init_draw_dsc+0x36>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8017c0a:	2240      	movs	r2, #64	@ 0x40
 8017c0c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017c10:	4628      	mov	r0, r5
 8017c12:	f004 fd6f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017c16:	b200      	sxth	r0, r0
        dsc->shadow_width = lv_obj_get_style_shadow_width(obj, LV_PART_SCROLLBAR);
 8017c18:	85e0      	strh	r0, [r4, #46]	@ 0x2e
        if(dsc->shadow_width > 0) {
 8017c1a:	2800      	cmp	r0, #0
 8017c1c:	dc03      	bgt.n	8017c26 <scrollbar_init_draw_dsc+0xf0>
            dsc->shadow_opa = LV_OPA_TRANSP;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
 8017c24:	e7ad      	b.n	8017b82 <scrollbar_init_draw_dsc+0x4c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8017c26:	2243      	movs	r2, #67	@ 0x43
 8017c28:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f004 fd61 	bl	801c6f4 <lv_obj_get_style_prop>
            dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, LV_PART_SCROLLBAR);
 8017c32:	86a0      	strh	r0, [r4, #52]	@ 0x34
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR);
 8017c34:	2244      	movs	r2, #68	@ 0x44
 8017c36:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	f004 fd5a 	bl	801c6f4 <lv_obj_get_style_prop>
            dsc->shadow_color = lv_obj_get_style_shadow_color(obj, LV_PART_SCROLLBAR);
 8017c40:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8017c42:	e79e      	b.n	8017b82 <scrollbar_init_draw_dsc+0x4c>

08017c44 <draw_scrollbar>:
{
 8017c44:	b570      	push	{r4, r5, r6, lr}
 8017c46:	b0a4      	sub	sp, #144	@ 0x90
 8017c48:	4604      	mov	r4, r0
 8017c4a:	460d      	mov	r5, r1
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8017c4c:	aa20      	add	r2, sp, #128	@ 0x80
 8017c4e:	a922      	add	r1, sp, #136	@ 0x88
 8017c50:	f003 fd8c 	bl	801b76c <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 8017c54:	a822      	add	r0, sp, #136	@ 0x88
 8017c56:	f7e9 fea1 	bl	800199c <lv_area_get_size>
 8017c5a:	b918      	cbnz	r0, 8017c64 <draw_scrollbar+0x20>
 8017c5c:	a820      	add	r0, sp, #128	@ 0x80
 8017c5e:	f7e9 fe9d 	bl	800199c <lv_area_get_size>
 8017c62:	b128      	cbz	r0, 8017c70 <draw_scrollbar+0x2c>
    lv_res_t sb_res = scrollbar_init_draw_dsc(obj, &draw_dsc);
 8017c64:	a912      	add	r1, sp, #72	@ 0x48
 8017c66:	4620      	mov	r0, r4
 8017c68:	f7ff ff65 	bl	8017b36 <scrollbar_init_draw_dsc>
    if(sb_res != LV_RES_OK) return;
 8017c6c:	2801      	cmp	r0, #1
 8017c6e:	d001      	beq.n	8017c74 <draw_scrollbar+0x30>
}
 8017c70:	b024      	add	sp, #144	@ 0x90
 8017c72:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8017c74:	4629      	mov	r1, r5
 8017c76:	4668      	mov	r0, sp
 8017c78:	f001 fb29 	bl	80192ce <lv_obj_draw_dsc_init>
    part_dsc.class_p = MY_CLASS;
 8017c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8017cec <draw_scrollbar+0xa8>)
 8017c7e:	9301      	str	r3, [sp, #4]
    part_dsc.type = LV_OBJ_DRAW_PART_SCROLLBAR;
 8017c80:	2302      	movs	r3, #2
 8017c82:	9302      	str	r3, [sp, #8]
    part_dsc.rect_dsc = &draw_dsc;
 8017c84:	ab12      	add	r3, sp, #72	@ 0x48
 8017c86:	9304      	str	r3, [sp, #16]
    part_dsc.part = LV_PART_SCROLLBAR;
 8017c88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017c8c:	930d      	str	r3, [sp, #52]	@ 0x34
    if(lv_area_get_size(&hor_area) > 0) {
 8017c8e:	a822      	add	r0, sp, #136	@ 0x88
 8017c90:	f7e9 fe84 	bl	800199c <lv_area_get_size>
 8017c94:	b9b8      	cbnz	r0, 8017cc6 <draw_scrollbar+0x82>
    if(lv_area_get_size(&ver_area) > 0) {
 8017c96:	a820      	add	r0, sp, #128	@ 0x80
 8017c98:	f7e9 fe80 	bl	800199c <lv_area_get_size>
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	d0e7      	beq.n	8017c70 <draw_scrollbar+0x2c>
        part_dsc.draw_area = &ver_area;
 8017ca0:	ae20      	add	r6, sp, #128	@ 0x80
 8017ca2:	9603      	str	r6, [sp, #12]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8017ca4:	466a      	mov	r2, sp
 8017ca6:	211a      	movs	r1, #26
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f7f9 f80d 	bl	8010cc8 <lv_event_send>
        part_dsc.draw_area = &ver_area;
 8017cae:	9603      	str	r6, [sp, #12]
        lv_draw_rect(draw_ctx, &draw_dsc, &ver_area);
 8017cb0:	4632      	mov	r2, r6
 8017cb2:	a912      	add	r1, sp, #72	@ 0x48
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	f7f2 f80d 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8017cba:	466a      	mov	r2, sp
 8017cbc:	211b      	movs	r1, #27
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f7f9 f802 	bl	8010cc8 <lv_event_send>
 8017cc4:	e7d4      	b.n	8017c70 <draw_scrollbar+0x2c>
        part_dsc.draw_area = &hor_area;
 8017cc6:	ae22      	add	r6, sp, #136	@ 0x88
 8017cc8:	9603      	str	r6, [sp, #12]
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8017cca:	466a      	mov	r2, sp
 8017ccc:	211a      	movs	r1, #26
 8017cce:	4620      	mov	r0, r4
 8017cd0:	f7f8 fffa 	bl	8010cc8 <lv_event_send>
        lv_draw_rect(draw_ctx, &draw_dsc, &hor_area);
 8017cd4:	4632      	mov	r2, r6
 8017cd6:	a912      	add	r1, sp, #72	@ 0x48
 8017cd8:	4628      	mov	r0, r5
 8017cda:	f7f1 fffb 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8017cde:	466a      	mov	r2, sp
 8017ce0:	211b      	movs	r1, #27
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f7f8 fff0 	bl	8010cc8 <lv_event_send>
 8017ce8:	e7d5      	b.n	8017c96 <draw_scrollbar+0x52>
 8017cea:	bf00      	nop
 8017cec:	0802de60 	.word	0x0802de60

08017cf0 <lv_obj_draw>:
{
 8017cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf4:	b0a2      	sub	sp, #136	@ 0x88
 8017cf6:	4606      	mov	r6, r0
    lv_event_code_t code = lv_event_get_code(e);
 8017cf8:	f7f9 f814 	bl	8010d24 <lv_event_get_code>
 8017cfc:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8017cfe:	4630      	mov	r0, r6
 8017d00:	f7f9 f80c 	bl	8010d1c <lv_event_get_target>
 8017d04:	4604      	mov	r4, r0
    if(code == LV_EVENT_COVER_CHECK) {
 8017d06:	2d12      	cmp	r5, #18
 8017d08:	d007      	beq.n	8017d1a <lv_obj_draw+0x2a>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8017d0a:	2d15      	cmp	r5, #21
 8017d0c:	d06a      	beq.n	8017de4 <lv_obj_draw+0xf4>
    else if(code == LV_EVENT_DRAW_POST) {
 8017d0e:	2d18      	cmp	r5, #24
 8017d10:	f000 8100 	beq.w	8017f14 <lv_obj_draw+0x224>
}
 8017d14:	b022      	add	sp, #136	@ 0x88
 8017d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_cover_check_info_t * info = lv_event_get_param(e);
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f7f9 f806 	bl	8010d2c <lv_event_get_param>
 8017d20:	4605      	mov	r5, r0
        if(info->res == LV_COVER_RES_MASKED) return;
 8017d22:	7803      	ldrb	r3, [r0, #0]
 8017d24:	2b02      	cmp	r3, #2
 8017d26:	d0f5      	beq.n	8017d14 <lv_obj_draw+0x24>
    return (lv_coord_t)v.num;
}

static inline bool lv_obj_get_style_clip_corner(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8017d28:	2217      	movs	r2, #23
 8017d2a:	2100      	movs	r1, #0
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f004 fce1 	bl	801c6f4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8017d32:	b110      	cbz	r0, 8017d3a <lv_obj_draw+0x4a>
            info->res = LV_COVER_RES_MASKED;
 8017d34:	2302      	movs	r3, #2
 8017d36:	702b      	strb	r3, [r5, #0]
            return;
 8017d38:	e7ec      	b.n	8017d14 <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8017d3a:	220b      	movs	r2, #11
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f004 fcd8 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8017d44:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8017d46:	2269      	movs	r2, #105	@ 0x69
 8017d48:	2100      	movs	r1, #0
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	f004 fcd2 	bl	801c6f4 <lv_obj_get_style_prop>
 8017d50:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017d52:	226a      	movs	r2, #106	@ 0x6a
 8017d54:	2100      	movs	r1, #0
 8017d56:	4620      	mov	r0, r4
 8017d58:	f004 fccc 	bl	801c6f4 <lv_obj_get_style_prop>
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    dest->x1 = src->x1;
 8017d5c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8017d60:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
    dest->y1 = src->y1;
 8017d64:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8017d68:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
    dest->x2 = src->x2;
 8017d6c:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 8017d70:	f8ad c044 	strh.w	ip, [sp, #68]	@ 0x44
    dest->y2 = src->y2;
 8017d74:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 8017d78:	f8ad 2046 	strh.w	r2, [sp, #70]	@ 0x46
        coords.x1 -= w;
 8017d7c:	b289      	uxth	r1, r1
 8017d7e:	b2b6      	uxth	r6, r6
 8017d80:	1b89      	subs	r1, r1, r6
 8017d82:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
        coords.x2 += w;
 8017d86:	fa16 fc8c 	uxtah	ip, r6, ip
 8017d8a:	f8ad c044 	strh.w	ip, [sp, #68]	@ 0x44
        coords.y1 -= h;
 8017d8e:	b29b      	uxth	r3, r3
 8017d90:	b280      	uxth	r0, r0
 8017d92:	1a1b      	subs	r3, r3, r0
 8017d94:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
        coords.y2 += h;
 8017d98:	fa10 f282 	uxtah	r2, r0, r2
 8017d9c:	f8ad 2046 	strh.w	r2, [sp, #70]	@ 0x46
        if(_lv_area_is_in(info->area, &coords, r) == false) {
 8017da0:	463a      	mov	r2, r7
 8017da2:	a910      	add	r1, sp, #64	@ 0x40
 8017da4:	6868      	ldr	r0, [r5, #4]
 8017da6:	f7e9 ff59 	bl	8001c5c <_lv_area_is_in>
 8017daa:	b910      	cbnz	r0, 8017db2 <lv_obj_draw+0xc2>
            info->res = LV_COVER_RES_NOT_COVER;
 8017dac:	2301      	movs	r3, #1
 8017dae:	702b      	strb	r3, [r5, #0]
            return;
 8017db0:	e7b0      	b.n	8017d14 <lv_obj_draw+0x24>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8017db2:	2221      	movs	r2, #33	@ 0x21
 8017db4:	2100      	movs	r1, #0
 8017db6:	4620      	mov	r0, r4
 8017db8:	f004 fc9c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8017dbc:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8017dbe:	28fc      	cmp	r0, #252	@ 0xfc
 8017dc0:	d802      	bhi.n	8017dc8 <lv_obj_draw+0xd8>
            info->res = LV_COVER_RES_NOT_COVER;
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	702b      	strb	r3, [r5, #0]
            return;
 8017dc6:	e7a5      	b.n	8017d14 <lv_obj_draw+0x24>
    return (bool)v.num;
}

static inline lv_opa_t lv_obj_get_style_opa(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 8017dc8:	2260      	movs	r2, #96	@ 0x60
 8017dca:	2100      	movs	r1, #0
 8017dcc:	4620      	mov	r0, r4
 8017dce:	f004 fc91 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8017dd2:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_opa(obj, LV_PART_MAIN) < LV_OPA_MAX) {
 8017dd4:	2bfc      	cmp	r3, #252	@ 0xfc
 8017dd6:	d902      	bls.n	8017dde <lv_obj_draw+0xee>
        info->res = LV_COVER_RES_COVER;
 8017dd8:	2300      	movs	r3, #0
 8017dda:	702b      	strb	r3, [r5, #0]
 8017ddc:	e79a      	b.n	8017d14 <lv_obj_draw+0x24>
            info->res = LV_COVER_RES_NOT_COVER;
 8017dde:	2301      	movs	r3, #1
 8017de0:	702b      	strb	r3, [r5, #0]
            return;
 8017de2:	e797      	b.n	8017d14 <lv_obj_draw+0x24>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017de4:	4630      	mov	r0, r6
 8017de6:	f7f9 f811 	bl	8010e0c <lv_event_get_draw_ctx>
 8017dea:	4606      	mov	r6, r0
        lv_draw_rect_dsc_init(&draw_dsc);
 8017dec:	a802      	add	r0, sp, #8
 8017dee:	f7f1 ff2f 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8017df2:	2234      	movs	r2, #52	@ 0x34
 8017df4:	2100      	movs	r1, #0
 8017df6:	4620      	mov	r0, r4
 8017df8:	f004 fc7c 	bl	801c6f4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8017dfc:	b128      	cbz	r0, 8017e0a <lv_obj_draw+0x11a>
            draw_dsc.border_post = 1;
 8017dfe:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8017e02:	f043 0301 	orr.w	r3, r3, #1
 8017e06:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
        lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8017e0a:	af02      	add	r7, sp, #8
 8017e0c:	463a      	mov	r2, r7
 8017e0e:	2100      	movs	r1, #0
 8017e10:	4620      	mov	r0, r4
 8017e12:	f000 ff57 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8017e16:	2269      	movs	r2, #105	@ 0x69
 8017e18:	2100      	movs	r1, #0
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f004 fc6a 	bl	801c6f4 <lv_obj_get_style_prop>
 8017e20:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017e22:	226a      	movs	r2, #106	@ 0x6a
 8017e24:	2100      	movs	r1, #0
 8017e26:	4620      	mov	r0, r4
 8017e28:	f004 fc64 	bl	801c6f4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8017e2c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8017e30:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 8017e34:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8017e38:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8017e3c:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 8017e40:	f8ad c004 	strh.w	ip, [sp, #4]
    dest->y2 = src->y2;
 8017e44:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8017e48:	f8ad 1006 	strh.w	r1, [sp, #6]
        coords.x1 -= w;
 8017e4c:	b292      	uxth	r2, r2
 8017e4e:	b2ad      	uxth	r5, r5
 8017e50:	1b52      	subs	r2, r2, r5
 8017e52:	f8ad 2000 	strh.w	r2, [sp]
        coords.x2 += w;
 8017e56:	fa15 fc8c 	uxtah	ip, r5, ip
 8017e5a:	f8ad c004 	strh.w	ip, [sp, #4]
        coords.y1 -= h;
 8017e5e:	b29b      	uxth	r3, r3
 8017e60:	b280      	uxth	r0, r0
 8017e62:	1a1b      	subs	r3, r3, r0
 8017e64:	f8ad 3002 	strh.w	r3, [sp, #2]
        coords.y2 += h;
 8017e68:	fa10 f181 	uxtah	r1, r0, r1
 8017e6c:	f8ad 1006 	strh.w	r1, [sp, #6]
        lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8017e70:	4631      	mov	r1, r6
 8017e72:	a810      	add	r0, sp, #64	@ 0x40
 8017e74:	f001 fa2b 	bl	80192ce <lv_obj_draw_dsc_init>
        part_dsc.class_p = MY_CLASS;
 8017e78:	4b67      	ldr	r3, [pc, #412]	@ (8018018 <lv_obj_draw+0x328>)
 8017e7a:	9311      	str	r3, [sp, #68]	@ 0x44
        part_dsc.type = LV_OBJ_DRAW_PART_RECTANGLE;
 8017e7c:	2500      	movs	r5, #0
 8017e7e:	9512      	str	r5, [sp, #72]	@ 0x48
        part_dsc.rect_dsc = &draw_dsc;
 8017e80:	9714      	str	r7, [sp, #80]	@ 0x50
        part_dsc.draw_area = &coords;
 8017e82:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
        part_dsc.part = LV_PART_MAIN;
 8017e86:	951d      	str	r5, [sp, #116]	@ 0x74
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8017e88:	aa10      	add	r2, sp, #64	@ 0x40
 8017e8a:	211a      	movs	r1, #26
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	f7f8 ff1b 	bl	8010cc8 <lv_event_send>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_CLIP_CORNER);
 8017e92:	2217      	movs	r2, #23
 8017e94:	4629      	mov	r1, r5
 8017e96:	4620      	mov	r0, r4
 8017e98:	f004 fc2c 	bl	801c6f4 <lv_obj_get_style_prop>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8017e9c:	b120      	cbz	r0, 8017ea8 <lv_obj_draw+0x1b8>
 8017e9e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017ea2:	b99b      	cbnz	r3, 8017ecc <lv_obj_draw+0x1dc>
 8017ea4:	462b      	mov	r3, r5
 8017ea6:	e000      	b.n	8017eaa <lv_obj_draw+0x1ba>
 8017ea8:	2300      	movs	r3, #0
        const void * bg_img_src = draw_dsc.bg_img_src;
 8017eaa:	9f06      	ldr	r7, [sp, #24]
        if(clip_corner) {
 8017eac:	461d      	mov	r5, r3
 8017eae:	b10b      	cbz	r3, 8017eb4 <lv_obj_draw+0x1c4>
            draw_dsc.bg_img_src = NULL;
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	9306      	str	r3, [sp, #24]
        lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8017eb4:	466a      	mov	r2, sp
 8017eb6:	a902      	add	r1, sp, #8
 8017eb8:	4630      	mov	r0, r6
 8017eba:	f7f1 ff0b 	bl	8009cd4 <lv_draw_rect>
        if(clip_corner) {
 8017ebe:	b93d      	cbnz	r5, 8017ed0 <lv_obj_draw+0x1e0>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8017ec0:	aa10      	add	r2, sp, #64	@ 0x40
 8017ec2:	211b      	movs	r1, #27
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	f7f8 feff 	bl	8010cc8 <lv_event_send>
 8017eca:	e723      	b.n	8017d14 <lv_obj_draw+0x24>
        bool clip_corner = (lv_obj_get_style_clip_corner(obj, LV_PART_MAIN) && draw_dsc.radius != 0) ? true : false;
 8017ecc:	2301      	movs	r3, #1
 8017ece:	e7ec      	b.n	8017eaa <lv_obj_draw+0x1ba>
            lv_draw_mask_radius_param_t * mp = lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
 8017ed0:	2018      	movs	r0, #24
 8017ed2:	f7fe fd73 	bl	80169bc <lv_mem_buf_get>
 8017ed6:	4605      	mov	r5, r0
            lv_draw_mask_radius_init(mp, &obj->coords, draw_dsc.radius, false);
 8017ed8:	2300      	movs	r3, #0
 8017eda:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8017ede:	f104 0114 	add.w	r1, r4, #20
 8017ee2:	f7f1 fe09 	bl	8009af8 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
 8017ee6:	f504 7190 	add.w	r1, r4, #288	@ 0x120
 8017eea:	4628      	mov	r0, r5
 8017eec:	f7f1 fbde 	bl	80096ac <lv_draw_mask_add>
            if(bg_img_src) {
 8017ef0:	2f00      	cmp	r7, #0
 8017ef2:	d0e5      	beq.n	8017ec0 <lv_obj_draw+0x1d0>
                draw_dsc.bg_opa = LV_OPA_TRANSP;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	f88d 300b 	strb.w	r3, [sp, #11]
                draw_dsc.border_opa = LV_OPA_TRANSP;
 8017efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
                draw_dsc.outline_opa = LV_OPA_TRANSP;
 8017efe:	f88d 3032 	strb.w	r3, [sp, #50]	@ 0x32
                draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8017f02:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
                draw_dsc.bg_img_src = bg_img_src;
 8017f06:	9706      	str	r7, [sp, #24]
                lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8017f08:	466a      	mov	r2, sp
 8017f0a:	a902      	add	r1, sp, #8
 8017f0c:	4630      	mov	r0, r6
 8017f0e:	f7f1 fee1 	bl	8009cd4 <lv_draw_rect>
 8017f12:	e7d5      	b.n	8017ec0 <lv_obj_draw+0x1d0>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8017f14:	4630      	mov	r0, r6
 8017f16:	f7f8 ff79 	bl	8010e0c <lv_event_get_draw_ctx>
 8017f1a:	4605      	mov	r5, r0
        draw_scrollbar(obj, draw_ctx);
 8017f1c:	4601      	mov	r1, r0
 8017f1e:	4620      	mov	r0, r4
 8017f20:	f7ff fe90 	bl	8017c44 <draw_scrollbar>
 8017f24:	2217      	movs	r2, #23
 8017f26:	2100      	movs	r1, #0
 8017f28:	4620      	mov	r0, r4
 8017f2a:	f004 fbe3 	bl	801c6f4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_clip_corner(obj, LV_PART_MAIN)) {
 8017f2e:	2800      	cmp	r0, #0
 8017f30:	d164      	bne.n	8017ffc <lv_obj_draw+0x30c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_POST);
 8017f32:	2234      	movs	r2, #52	@ 0x34
 8017f34:	2100      	movs	r1, #0
 8017f36:	4620      	mov	r0, r4
 8017f38:	f004 fbdc 	bl	801c6f4 <lv_obj_get_style_prop>
        if(lv_obj_get_style_border_post(obj, LV_PART_MAIN)) {
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	f43f aee9 	beq.w	8017d14 <lv_obj_draw+0x24>
            lv_draw_rect_dsc_init(&draw_dsc);
 8017f42:	f10d 0808 	add.w	r8, sp, #8
 8017f46:	4640      	mov	r0, r8
 8017f48:	f7f1 fe82 	bl	8009c50 <lv_draw_rect_dsc_init>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
 8017f4c:	2600      	movs	r6, #0
 8017f4e:	f88d 600b 	strb.w	r6, [sp, #11]
            draw_dsc.bg_img_opa = LV_OPA_TRANSP;
 8017f52:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
            draw_dsc.outline_opa = LV_OPA_TRANSP;
 8017f56:	f88d 6032 	strb.w	r6, [sp, #50]	@ 0x32
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
 8017f5a:	f88d 603e 	strb.w	r6, [sp, #62]	@ 0x3e
            lv_obj_init_draw_rect_dsc(obj, LV_PART_MAIN, &draw_dsc);
 8017f5e:	4642      	mov	r2, r8
 8017f60:	4631      	mov	r1, r6
 8017f62:	4620      	mov	r0, r4
 8017f64:	f000 feae 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8017f68:	2269      	movs	r2, #105	@ 0x69
 8017f6a:	4631      	mov	r1, r6
 8017f6c:	4620      	mov	r0, r4
 8017f6e:	f004 fbc1 	bl	801c6f4 <lv_obj_get_style_prop>
 8017f72:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8017f74:	226a      	movs	r2, #106	@ 0x6a
 8017f76:	4631      	mov	r1, r6
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f004 fbbb 	bl	801c6f4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8017f7e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8017f82:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 8017f86:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8017f8a:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8017f8e:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 8017f92:	f8ad c004 	strh.w	ip, [sp, #4]
    dest->y2 = src->y2;
 8017f96:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8017f9a:	f8ad 1006 	strh.w	r1, [sp, #6]
            coords.x1 -= w;
 8017f9e:	b292      	uxth	r2, r2
 8017fa0:	b2bf      	uxth	r7, r7
 8017fa2:	1bd2      	subs	r2, r2, r7
 8017fa4:	f8ad 2000 	strh.w	r2, [sp]
            coords.x2 += w;
 8017fa8:	fa17 fc8c 	uxtah	ip, r7, ip
 8017fac:	f8ad c004 	strh.w	ip, [sp, #4]
            coords.y1 -= h;
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	b280      	uxth	r0, r0
 8017fb4:	1a1b      	subs	r3, r3, r0
 8017fb6:	f8ad 3002 	strh.w	r3, [sp, #2]
            coords.y2 += h;
 8017fba:	fa10 f181 	uxtah	r1, r0, r1
 8017fbe:	f8ad 1006 	strh.w	r1, [sp, #6]
            lv_obj_draw_dsc_init(&part_dsc, draw_ctx);
 8017fc2:	4629      	mov	r1, r5
 8017fc4:	a810      	add	r0, sp, #64	@ 0x40
 8017fc6:	f001 f982 	bl	80192ce <lv_obj_draw_dsc_init>
            part_dsc.class_p = MY_CLASS;
 8017fca:	4b13      	ldr	r3, [pc, #76]	@ (8018018 <lv_obj_draw+0x328>)
 8017fcc:	9311      	str	r3, [sp, #68]	@ 0x44
            part_dsc.type = LV_OBJ_DRAW_PART_BORDER_POST;
 8017fce:	2301      	movs	r3, #1
 8017fd0:	9312      	str	r3, [sp, #72]	@ 0x48
            part_dsc.rect_dsc = &draw_dsc;
 8017fd2:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
            part_dsc.draw_area = &coords;
 8017fd6:	f8cd d04c 	str.w	sp, [sp, #76]	@ 0x4c
            part_dsc.part = LV_PART_MAIN;
 8017fda:	961d      	str	r6, [sp, #116]	@ 0x74
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_dsc);
 8017fdc:	aa10      	add	r2, sp, #64	@ 0x40
 8017fde:	211a      	movs	r1, #26
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f7f8 fe71 	bl	8010cc8 <lv_event_send>
            lv_draw_rect(draw_ctx, &draw_dsc, &coords);
 8017fe6:	466a      	mov	r2, sp
 8017fe8:	4641      	mov	r1, r8
 8017fea:	4628      	mov	r0, r5
 8017fec:	f7f1 fe72 	bl	8009cd4 <lv_draw_rect>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_dsc);
 8017ff0:	aa10      	add	r2, sp, #64	@ 0x40
 8017ff2:	211b      	movs	r1, #27
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f7f8 fe67 	bl	8010cc8 <lv_event_send>
 8017ffa:	e68b      	b.n	8017d14 <lv_obj_draw+0x24>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
 8017ffc:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8018000:	f7f1 fbaa 	bl	8009758 <lv_draw_mask_remove_custom>
            if(param) {
 8018004:	4606      	mov	r6, r0
 8018006:	2800      	cmp	r0, #0
 8018008:	d093      	beq.n	8017f32 <lv_obj_draw+0x242>
                lv_draw_mask_free_param(param);
 801800a:	f7f1 fbbf 	bl	800978c <lv_draw_mask_free_param>
                lv_mem_buf_release(param);
 801800e:	4630      	mov	r0, r6
 8018010:	f7fe fd36 	bl	8016a80 <lv_mem_buf_release>
 8018014:	e78d      	b.n	8017f32 <lv_obj_draw+0x242>
 8018016:	bf00      	nop
 8018018:	0802de60 	.word	0x0802de60

0801801c <lv_obj_constructor>:
{
 801801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018020:	460c      	mov	r4, r1
    lv_obj_t * parent = obj->parent;
 8018022:	684d      	ldr	r5, [r1, #4]
    if(parent) {
 8018024:	b325      	cbz	r5, 8018070 <lv_obj_constructor+0x54>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 8018026:	4628      	mov	r0, r5
 8018028:	f002 ff4e 	bl	801aec8 <lv_obj_get_scroll_left>
 801802c:	4606      	mov	r6, r0
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801802e:	4628      	mov	r0, r5
 8018030:	f002 feea 	bl	801ae08 <lv_obj_get_scroll_top>
 8018034:	4607      	mov	r7, r0
        obj->coords.y1 = parent->coords.y1 + lv_obj_get_style_pad_top(parent, LV_PART_MAIN) - st;
 8018036:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801803a:	2210      	movs	r2, #16
 801803c:	2100      	movs	r1, #0
 801803e:	4628      	mov	r0, r5
 8018040:	f004 fb58 	bl	801c6f4 <lv_obj_get_style_prop>
 8018044:	fa18 f380 	uxtah	r3, r8, r0
 8018048:	b29b      	uxth	r3, r3
 801804a:	1bdb      	subs	r3, r3, r7
 801804c:	b29a      	uxth	r2, r3
 801804e:	82e3      	strh	r3, [r4, #22]
        obj->coords.y2 = obj->coords.y1 - 1;
 8018050:	1e53      	subs	r3, r2, #1
 8018052:	8363      	strh	r3, [r4, #26]
        obj->coords.x1  = parent->coords.x1 + lv_obj_get_style_pad_left(parent, LV_PART_MAIN) - sl;
 8018054:	8aaf      	ldrh	r7, [r5, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8018056:	2212      	movs	r2, #18
 8018058:	2100      	movs	r1, #0
 801805a:	4628      	mov	r0, r5
 801805c:	f004 fb4a 	bl	801c6f4 <lv_obj_get_style_prop>
 8018060:	fa17 f380 	uxtah	r3, r7, r0
 8018064:	b29b      	uxth	r3, r3
 8018066:	1b98      	subs	r0, r3, r6
 8018068:	b283      	uxth	r3, r0
 801806a:	82a0      	strh	r0, [r4, #20]
        obj->coords.x2  = obj->coords.x1 - 1;
 801806c:	3b01      	subs	r3, #1
 801806e:	8323      	strh	r3, [r4, #24]
    obj->flags = LV_OBJ_FLAG_CLICKABLE;
 8018070:	2302      	movs	r3, #2
 8018072:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SNAPPABLE;
 8018074:	f241 0302 	movw	r3, #4098	@ 0x1002
 8018078:	61e3      	str	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_PRESS_LOCK;
 801807a:	b12d      	cbz	r5, 8018088 <lv_obj_constructor+0x6c>
 801807c:	f243 0302 	movw	r3, #12290	@ 0x3002
 8018080:	61e3      	str	r3, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_SCROLL_CHAIN;
 8018082:	f243 3302 	movw	r3, #13058	@ 0x3302
 8018086:	61e3      	str	r3, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_CLICK_FOCUSABLE;
 8018088:	69e3      	ldr	r3, [r4, #28]
 801808a:	f043 0204 	orr.w	r2, r3, #4
 801808e:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLLABLE;
 8018090:	f043 0214 	orr.w	r2, r3, #20
 8018094:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_ELASTIC;
 8018096:	f043 0234 	orr.w	r2, r3, #52	@ 0x34
 801809a:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_MOMENTUM;
 801809c:	f043 0274 	orr.w	r2, r3, #116	@ 0x74
 80180a0:	61e2      	str	r2, [r4, #28]
    obj->flags |= LV_OBJ_FLAG_SCROLL_WITH_ARROW;
 80180a2:	f443 6207 	orr.w	r2, r3, #2160	@ 0x870
 80180a6:	f042 0204 	orr.w	r2, r2, #4
 80180aa:	61e2      	str	r2, [r4, #28]
    if(parent) obj->flags |= LV_OBJ_FLAG_GESTURE_BUBBLE;
 80180ac:	b125      	cbz	r5, 80180b8 <lv_obj_constructor+0x9c>
 80180ae:	f443 4308 	orr.w	r3, r3, #34816	@ 0x8800
 80180b2:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 80180b6:	61e3      	str	r3, [r4, #28]
}
 80180b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080180bc <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 80180bc:	b538      	push	{r3, r4, r5, lr}
 80180be:	4684      	mov	ip, r0
 80180c0:	4614      	mov	r4, r2
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 80180c2:	8883      	ldrh	r3, [r0, #4]
 80180c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80180c8:	4293      	cmp	r3, r2
 80180ca:	d019      	beq.n	8018100 <lv_style_get_prop_inlined+0x44>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 80180cc:	79c0      	ldrb	r0, [r0, #7]
 80180ce:	b348      	cbz	r0, 8018124 <lv_style_get_prop_inlined+0x68>

    if(style->prop_cnt > 1) {
 80180d0:	2801      	cmp	r0, #1
 80180d2:	d942      	bls.n	801815a <lv_style_get_prop_inlined+0x9e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80180d4:	f8dc 5000 	ldr.w	r5, [ip]
 80180d8:	4686      	mov	lr, r0
 80180da:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 80180de:	2300      	movs	r3, #0
 80180e0:	e026      	b.n	8018130 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 80180e2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80180e6:	d14d      	bne.n	8018184 <lv_style_get_prop_inlined+0xc8>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80180e8:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80180ec:	d104      	bne.n	80180f8 <lv_style_get_prop_inlined+0x3c>
 80180ee:	f8de 3004 	ldr.w	r3, [lr, #4]
 80180f2:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 80180f4:	2001      	movs	r0, #1
 80180f6:	e015      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 80180f8:	f008 fed8 	bl	8020eac <lv_style_prop_get_default>
 80180fc:	6020      	str	r0, [r4, #0]
 80180fe:	e7f9      	b.n	80180f4 <lv_style_get_prop_inlined+0x38>
        for(i = 0; i < style->prop_cnt; i++) {
 8018100:	2300      	movs	r3, #0
 8018102:	f89c 2007 	ldrb.w	r2, [ip, #7]
 8018106:	429a      	cmp	r2, r3
 8018108:	d90b      	bls.n	8018122 <lv_style_get_prop_inlined+0x66>
            const_prop = style->v_p.const_props + i;
 801810a:	f8dc 0000 	ldr.w	r0, [ip]
 801810e:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8018112:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8018116:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 801811a:	4281      	cmp	r1, r0
 801811c:	d0e1      	beq.n	80180e2 <lv_style_get_prop_inlined+0x26>
        for(i = 0; i < style->prop_cnt; i++) {
 801811e:	3301      	adds	r3, #1
 8018120:	e7ef      	b.n	8018102 <lv_style_get_prop_inlined+0x46>
        return LV_STYLE_RES_NOT_FOUND;
 8018122:	2000      	movs	r0, #0
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
    }
    return LV_STYLE_RES_NOT_FOUND;
}
 8018124:	bd38      	pop	{r3, r4, r5, pc}
                    *value = lv_style_prop_get_default(prop_id);
 8018126:	f008 fec1 	bl	8020eac <lv_style_prop_get_default>
 801812a:	6020      	str	r0, [r4, #0]
 801812c:	e011      	b.n	8018152 <lv_style_get_prop_inlined+0x96>
        for(i = 0; i < style->prop_cnt; i++) {
 801812e:	3301      	adds	r3, #1
 8018130:	459e      	cmp	lr, r3
 8018132:	d910      	bls.n	8018156 <lv_style_get_prop_inlined+0x9a>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8018134:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
 8018138:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 801813c:	4281      	cmp	r1, r0
 801813e:	d1f6      	bne.n	801812e <lv_style_get_prop_inlined+0x72>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8018140:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8018144:	d120      	bne.n	8018188 <lv_style_get_prop_inlined+0xcc>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8018146:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 801814a:	d1ec      	bne.n	8018126 <lv_style_get_prop_inlined+0x6a>
                    *value = values[i];
 801814c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018150:	6023      	str	r3, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8018152:	2001      	movs	r0, #1
 8018154:	e7e6      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
    return LV_STYLE_RES_NOT_FOUND;
 8018156:	2000      	movs	r0, #0
 8018158:	e7e4      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 801815a:	f3c3 000d 	ubfx	r0, r3, #0, #14
 801815e:	4281      	cmp	r1, r0
 8018160:	d001      	beq.n	8018166 <lv_style_get_prop_inlined+0xaa>
    return LV_STYLE_RES_NOT_FOUND;
 8018162:	2000      	movs	r0, #0
 8018164:	e7de      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8018166:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 801816a:	d10f      	bne.n	801818c <lv_style_get_prop_inlined+0xd0>
                                                                                             style->prop1)) : style->v_p.value1;
 801816c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8018170:	d104      	bne.n	801817c <lv_style_get_prop_inlined+0xc0>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8018172:	f8dc 3000 	ldr.w	r3, [ip]
 8018176:	6023      	str	r3, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8018178:	2001      	movs	r0, #1
 801817a:	e7d3      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 801817c:	f008 fe96 	bl	8020eac <lv_style_prop_get_default>
 8018180:	6020      	str	r0, [r4, #0]
 8018182:	e7f9      	b.n	8018178 <lv_style_get_prop_inlined+0xbc>
                    return LV_STYLE_RES_INHERIT;
 8018184:	2002      	movs	r0, #2
 8018186:	e7cd      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
                    return LV_STYLE_RES_INHERIT;
 8018188:	2002      	movs	r0, #2
 801818a:	e7cb      	b.n	8018124 <lv_style_get_prop_inlined+0x68>
            return LV_STYLE_RES_INHERIT;
 801818c:	2002      	movs	r0, #2
 801818e:	e7c9      	b.n	8018124 <lv_style_get_prop_inlined+0x68>

08018190 <lv_obj_set_state>:
 * If specified in the styles, transition animations will be started from the previous state to the current.
 * @param obj       pointer to an object
 * @param state     the new state
 */
static void lv_obj_set_state(lv_obj_t * obj, lv_state_t new_state)
{
 8018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	b08f      	sub	sp, #60	@ 0x3c
 8018196:	9105      	str	r1, [sp, #20]
    if(obj->state == new_state) return;
 8018198:	8c07      	ldrh	r7, [r0, #32]
 801819a:	428f      	cmp	r7, r1
 801819c:	d008      	beq.n	80181b0 <lv_obj_set_state+0x20>
 801819e:	4604      	mov	r4, r0

    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_state_t prev_state = obj->state;
    obj->state = new_state;
 80181a0:	460d      	mov	r5, r1
 80181a2:	8401      	strh	r1, [r0, #32]

    _lv_style_state_cmp_t cmp_res = _lv_obj_style_state_compare(obj, prev_state, new_state);
 80181a4:	460a      	mov	r2, r1
 80181a6:	4639      	mov	r1, r7
 80181a8:	f004 f8d8 	bl	801c35c <_lv_obj_style_state_compare>
    /*If there is no difference in styles there is nothing else to do*/
    if(cmp_res == _LV_STYLE_STATE_CMP_SAME) return;
 80181ac:	4606      	mov	r6, r0
 80181ae:	b910      	cbnz	r0, 80181b6 <lv_obj_set_state+0x26>
    }
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
        lv_obj_invalidate(obj);
        lv_obj_refresh_ext_draw_size(obj);
    }
}
 80181b0:	b00f      	add	sp, #60	@ 0x3c
 80181b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    _lv_obj_style_transition_dsc_t * ts = lv_mem_buf_get(sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80181b6:	f44f 7020 	mov.w	r0, #640	@ 0x280
 80181ba:	f7fe fbff 	bl	80169bc <lv_mem_buf_get>
 80181be:	4683      	mov	fp, r0
    lv_memset_00(ts, sizeof(_lv_obj_style_transition_dsc_t) * STYLE_TRANSITION_MAX);
 80181c0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80181c4:	f7fe fd7e 	bl	8016cc4 <lv_memset_00>
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80181c8:	f04f 0900 	mov.w	r9, #0
    uint32_t tsi = 0;
 80181cc:	46ca      	mov	sl, r9
 80181ce:	9707      	str	r7, [sp, #28]
 80181d0:	9608      	str	r6, [sp, #32]
 80181d2:	4627      	mov	r7, r4
 80181d4:	464c      	mov	r4, r9
 80181d6:	46a9      	mov	r9, r5
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 80181d8:	e054      	b.n	8018284 <lv_obj_set_state+0xf4>
            for(t = 0; t < tsi; t++) {
 80181da:	3401      	adds	r4, #1
 80181dc:	42a7      	cmp	r7, r4
 80181de:	d918      	bls.n	8018212 <lv_obj_set_state+0x82>
                lv_style_selector_t selector = ts[t].selector;
 80181e0:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 80181e4:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80181e8:	686e      	ldr	r6, [r5, #4]
                lv_state_t state_ts = lv_obj_style_get_selector_state(selector);
 80181ea:	4630      	mov	r0, r6
 80181ec:	f004 f8b4 	bl	801c358 <lv_obj_style_get_selector_state>
 80181f0:	9002      	str	r0, [sp, #8]
                lv_part_t part_ts = lv_obj_style_get_selector_part(selector);
 80181f2:	4630      	mov	r0, r6
 80181f4:	f004 f9e6 	bl	801c5c4 <lv_obj_style_get_selector_part>
                if(ts[t].prop == tr->props[j] && part_ts == part_act && state_ts >= state_act) break;
 80181f8:	892a      	ldrh	r2, [r5, #8]
 80181fa:	f8d8 3000 	ldr.w	r3, [r8]
 80181fe:	f833 3009 	ldrh.w	r3, [r3, r9]
 8018202:	429a      	cmp	r2, r3
 8018204:	d1e9      	bne.n	80181da <lv_obj_set_state+0x4a>
 8018206:	4582      	cmp	sl, r0
 8018208:	d1e7      	bne.n	80181da <lv_obj_set_state+0x4a>
 801820a:	9b03      	ldr	r3, [sp, #12]
 801820c:	9a02      	ldr	r2, [sp, #8]
 801820e:	4293      	cmp	r3, r2
 8018210:	d8e3      	bhi.n	80181da <lv_obj_set_state+0x4a>
            if(t == tsi) {
 8018212:	9d04      	ldr	r5, [sp, #16]
 8018214:	42a7      	cmp	r7, r4
 8018216:	d00c      	beq.n	8018232 <lv_obj_set_state+0xa2>
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 8018218:	3501      	adds	r5, #1
 801821a:	f8d8 3000 	ldr.w	r3, [r8]
 801821e:	ea4f 0945 	mov.w	r9, r5, lsl #1
 8018222:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8018226:	b33b      	cbz	r3, 8018278 <lv_obj_set_state+0xe8>
 8018228:	2f1f      	cmp	r7, #31
 801822a:	d81f      	bhi.n	801826c <lv_obj_set_state+0xdc>
            for(t = 0; t < tsi; t++) {
 801822c:	2400      	movs	r4, #0
 801822e:	9504      	str	r5, [sp, #16]
 8018230:	e7d4      	b.n	80181dc <lv_obj_set_state+0x4c>
                ts[tsi].time = tr->time;
 8018232:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8018236:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 801823a:	eb0b 0380 	add.w	r3, fp, r0, lsl #2
 801823e:	f82b 1020 	strh.w	r1, [fp, r0, lsl #2]
                ts[tsi].delay = tr->delay;
 8018242:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8018246:	8059      	strh	r1, [r3, #2]
                ts[tsi].path_cb = tr->path_xcb;
 8018248:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801824c:	60d9      	str	r1, [r3, #12]
                ts[tsi].prop = tr->props[j];
 801824e:	f8d8 1000 	ldr.w	r1, [r8]
 8018252:	f831 1009 	ldrh.w	r1, [r1, r9]
 8018256:	8119      	strh	r1, [r3, #8]
                ts[tsi].user_data = tr->user_data;
 8018258:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801825c:	6119      	str	r1, [r3, #16]
                ts[tsi].selector = obj_style->selector;
 801825e:	9a06      	ldr	r2, [sp, #24]
 8018260:	6851      	ldr	r1, [r2, #4]
 8018262:	f3c1 0117 	ubfx	r1, r1, #0, #24
 8018266:	6059      	str	r1, [r3, #4]
                tsi++;
 8018268:	3701      	adds	r7, #1
 801826a:	e7d5      	b.n	8018218 <lv_obj_set_state+0x88>
 801826c:	46ba      	mov	sl, r7
 801826e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018270:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018272:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8018276:	e004      	b.n	8018282 <lv_obj_set_state+0xf2>
 8018278:	46ba      	mov	sl, r7
 801827a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801827c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801827e:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
    for(i = 0; i < obj->style_cnt && tsi < STYLE_TRANSITION_MAX; i++) {
 8018282:	3401      	adds	r4, #1
 8018284:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018286:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801828a:	42a3      	cmp	r3, r4
 801828c:	d95c      	bls.n	8018348 <lv_obj_set_state+0x1b8>
 801828e:	f1ba 0f1f 	cmp.w	sl, #31
 8018292:	d82f      	bhi.n	80182f4 <lv_obj_set_state+0x164>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 8018294:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8018298:	00e6      	lsls	r6, r4, #3
 801829a:	eb08 05c4 	add.w	r5, r8, r4, lsl #3
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801829e:	6868      	ldr	r0, [r5, #4]
 80182a0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80182a4:	f004 f858 	bl	801c358 <lv_obj_style_get_selector_state>
 80182a8:	9003      	str	r0, [sp, #12]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	4433      	add	r3, r6
 80182ae:	6858      	ldr	r0, [r3, #4]
 80182b0:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80182b4:	f004 f986 	bl	801c5c4 <lv_obj_style_get_selector_part>
 80182b8:	9002      	str	r0, [sp, #8]
        if(state_act & (~new_state)) continue; /*Skip unrelated styles*/
 80182ba:	9b03      	ldr	r3, [sp, #12]
 80182bc:	ea33 0309 	bics.w	r3, r3, r9
 80182c0:	d1df      	bne.n	8018282 <lv_obj_set_state+0xf2>
        if(obj_style->is_trans) continue;
 80182c2:	79eb      	ldrb	r3, [r5, #7]
 80182c4:	f013 0f02 	tst.w	r3, #2
 80182c8:	d1db      	bne.n	8018282 <lv_obj_set_state+0xf2>
        if(lv_style_get_prop_inlined(obj_style->style, LV_STYLE_TRANSITION, &v) != LV_STYLE_RES_FOUND) continue;
 80182ca:	aa0d      	add	r2, sp, #52	@ 0x34
 80182cc:	2167      	movs	r1, #103	@ 0x67
 80182ce:	f858 0006 	ldr.w	r0, [r8, r6]
 80182d2:	f7ff fef3 	bl	80180bc <lv_style_get_prop_inlined>
 80182d6:	2801      	cmp	r0, #1
 80182d8:	d1d3      	bne.n	8018282 <lv_obj_set_state+0xf2>
        const lv_style_transition_dsc_t * tr = v.ptr;
 80182da:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
        for(j = 0; tr->props[j] != 0 && tsi < STYLE_TRANSITION_MAX; j++) {
 80182de:	2600      	movs	r6, #0
 80182e0:	9409      	str	r4, [sp, #36]	@ 0x24
 80182e2:	9506      	str	r5, [sp, #24]
 80182e4:	4635      	mov	r5, r6
 80182e6:	970a      	str	r7, [sp, #40]	@ 0x28
 80182e8:	4657      	mov	r7, sl
 80182ea:	f8dd a008 	ldr.w	sl, [sp, #8]
 80182ee:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80182f2:	e792      	b.n	801821a <lv_obj_set_state+0x8a>
 80182f4:	9e08      	ldr	r6, [sp, #32]
 80182f6:	463c      	mov	r4, r7
 80182f8:	9f07      	ldr	r7, [sp, #28]
 80182fa:	2500      	movs	r5, #0
 80182fc:	46b8      	mov	r8, r7
 80182fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018302:	e00e      	b.n	8018322 <lv_obj_set_state+0x192>
        lv_part_t part_act = lv_obj_style_get_selector_part(ts[i].selector);
 8018304:	eb05 0785 	add.w	r7, r5, r5, lsl #2
 8018308:	eb0b 0787 	add.w	r7, fp, r7, lsl #2
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f004 f959 	bl	801c5c4 <lv_obj_style_get_selector_part>
 8018312:	4601      	mov	r1, r0
        _lv_obj_style_create_transition(obj, part_act, prev_state, new_state, &ts[i]);
 8018314:	9700      	str	r7, [sp, #0]
 8018316:	464b      	mov	r3, r9
 8018318:	4642      	mov	r2, r8
 801831a:	4620      	mov	r0, r4
 801831c:	f004 fa60 	bl	801c7e0 <_lv_obj_style_create_transition>
    for(i = 0; i < tsi; i++) {
 8018320:	3501      	adds	r5, #1
 8018322:	45aa      	cmp	sl, r5
 8018324:	d8ee      	bhi.n	8018304 <lv_obj_set_state+0x174>
    lv_mem_buf_release(ts);
 8018326:	4658      	mov	r0, fp
 8018328:	f7fe fbaa 	bl	8016a80 <lv_mem_buf_release>
    if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_REDRAW) {
 801832c:	2e01      	cmp	r6, #1
 801832e:	d013      	beq.n	8018358 <lv_obj_set_state+0x1c8>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_LAYOUT) {
 8018330:	2e03      	cmp	r6, #3
 8018332:	d015      	beq.n	8018360 <lv_obj_set_state+0x1d0>
    else if(cmp_res == _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD) {
 8018334:	2e02      	cmp	r6, #2
 8018336:	f47f af3b 	bne.w	80181b0 <lv_obj_set_state+0x20>
        lv_obj_invalidate(obj);
 801833a:	4620      	mov	r0, r4
 801833c:	f001 fdb3 	bl	8019ea6 <lv_obj_invalidate>
        lv_obj_refresh_ext_draw_size(obj);
 8018340:	4620      	mov	r0, r4
 8018342:	f000 ffd3 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 8018346:	e733      	b.n	80181b0 <lv_obj_set_state+0x20>
 8018348:	9e08      	ldr	r6, [sp, #32]
 801834a:	463c      	mov	r4, r7
 801834c:	9f07      	ldr	r7, [sp, #28]
 801834e:	2500      	movs	r5, #0
 8018350:	46b8      	mov	r8, r7
 8018352:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018356:	e7e4      	b.n	8018322 <lv_obj_set_state+0x192>
        lv_obj_invalidate(obj);
 8018358:	4620      	mov	r0, r4
 801835a:	f001 fda4 	bl	8019ea6 <lv_obj_invalidate>
 801835e:	e727      	b.n	80181b0 <lv_obj_set_state+0x20>
        lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8018360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018364:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8018368:	4620      	mov	r0, r4
 801836a:	f004 fafb 	bl	801c964 <lv_obj_refresh_style>
 801836e:	e71f      	b.n	80181b0 <lv_obj_set_state+0x20>

08018370 <lv_init>:
{
 8018370:	b508      	push	{r3, lr}
    if(lv_initialized) {
 8018372:	4b12      	ldr	r3, [pc, #72]	@ (80183bc <lv_init+0x4c>)
 8018374:	781b      	ldrb	r3, [r3, #0]
 8018376:	b103      	cbz	r3, 801837a <lv_init+0xa>
}
 8018378:	bd08      	pop	{r3, pc}
    lv_mem_init();
 801837a:	f7fe fabf 	bl	80168fc <lv_mem_init>
    _lv_timer_core_init();
 801837e:	f00e fb5b 	bl	8026a38 <_lv_timer_core_init>
    _lv_fs_init();
 8018382:	f7f9 fe37 	bl	8011ff4 <_lv_fs_init>
    _lv_anim_core_init();
 8018386:	f7e8 f9cb 	bl	8000720 <_lv_anim_core_init>
    _lv_group_init();
 801838a:	f7fa fd97 	bl	8012ebc <_lv_group_init>
    lv_draw_init();
 801838e:	f7ef f98b 	bl	80076a8 <lv_draw_init>
    _lv_obj_style_init();
 8018392:	f003 ffb1 	bl	801c2f8 <_lv_obj_style_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8018396:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 801839a:	4809      	ldr	r0, [pc, #36]	@ (80183c0 <lv_init+0x50>)
 801839c:	f7fe f89b 	bl	80164d6 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 80183a0:	215c      	movs	r1, #92	@ 0x5c
 80183a2:	4808      	ldr	r0, [pc, #32]	@ (80183c4 <lv_init+0x54>)
 80183a4:	f7fe f897 	bl	80164d6 <_lv_ll_init>
    _lv_refr_init();
 80183a8:	f006 f9d8 	bl	801e75c <_lv_refr_init>
    _lv_img_decoder_init();
 80183ac:	f7fc f9bc 	bl	8014728 <_lv_img_decoder_init>
    lv_extra_init();
 80183b0:	f7f8 fd4d 	bl	8010e4e <lv_extra_init>
    lv_initialized = true;
 80183b4:	4b01      	ldr	r3, [pc, #4]	@ (80183bc <lv_init+0x4c>)
 80183b6:	2201      	movs	r2, #1
 80183b8:	701a      	strb	r2, [r3, #0]
    LV_LOG_TRACE("finished");
 80183ba:	e7dd      	b.n	8018378 <lv_init+0x8>
 80183bc:	200088b8 	.word	0x200088b8
 80183c0:	20006860 	.word	0x20006860
 80183c4:	20006854 	.word	0x20006854

080183c8 <lv_obj_create>:
{
 80183c8:	b510      	push	{r4, lr}
 80183ca:	4601      	mov	r1, r0
    lv_obj_t * obj = lv_obj_class_create_obj(MY_CLASS, parent);
 80183cc:	4803      	ldr	r0, [pc, #12]	@ (80183dc <lv_obj_create+0x14>)
 80183ce:	f000 fb29 	bl	8018a24 <lv_obj_class_create_obj>
 80183d2:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 80183d4:	f000 fbc5 	bl	8018b62 <lv_obj_class_init_obj>
}
 80183d8:	4620      	mov	r0, r4
 80183da:	bd10      	pop	{r4, pc}
 80183dc:	0802de60 	.word	0x0802de60

080183e0 <lv_obj_clear_flag>:
{
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	b084      	sub	sp, #16
 80183e4:	4604      	mov	r4, r0
 80183e6:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 80183e8:	f001 f8b6 	bl	8019558 <lv_obj_is_layout_positioned>
 80183ec:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 80183ee:	f015 0f10 	tst.w	r5, #16
 80183f2:	d115      	bne.n	8018420 <lv_obj_clear_flag+0x40>
    obj->flags &= (~f);
 80183f4:	69e3      	ldr	r3, [r4, #28]
 80183f6:	ea23 0305 	bic.w	r3, r3, r5
 80183fa:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 80183fc:	f015 0f01 	tst.w	r5, #1
 8018400:	d11c      	bne.n	801843c <lv_obj_clear_flag+0x5c>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8018402:	4620      	mov	r0, r4
 8018404:	f001 f8a8 	bl	8019558 <lv_obj_is_layout_positioned>
 8018408:	42b0      	cmp	r0, r6
 801840a:	d102      	bne.n	8018412 <lv_obj_clear_flag+0x32>
 801840c:	f015 7fc0 	tst.w	r5, #25165824	@ 0x1800000
 8018410:	d004      	beq.n	801841c <lv_obj_clear_flag+0x3c>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8018412:	4620      	mov	r0, r4
 8018414:	f004 feae 	bl	801d174 <lv_obj_get_parent>
 8018418:	f001 f8b8 	bl	801958c <lv_obj_mark_layout_as_dirty>
}
 801841c:	b004      	add	sp, #16
 801841e:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8018420:	aa02      	add	r2, sp, #8
 8018422:	4669      	mov	r1, sp
 8018424:	4620      	mov	r0, r4
 8018426:	f003 f9a1 	bl	801b76c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801842a:	4669      	mov	r1, sp
 801842c:	4620      	mov	r0, r4
 801842e:	f001 fd12 	bl	8019e56 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8018432:	a902      	add	r1, sp, #8
 8018434:	4620      	mov	r0, r4
 8018436:	f001 fd0e 	bl	8019e56 <lv_obj_invalidate_area>
 801843a:	e7db      	b.n	80183f4 <lv_obj_clear_flag+0x14>
        lv_obj_invalidate(obj);
 801843c:	4620      	mov	r0, r4
 801843e:	f001 fd32 	bl	8019ea6 <lv_obj_invalidate>
        if(lv_obj_is_layout_positioned(obj)) {
 8018442:	4620      	mov	r0, r4
 8018444:	f001 f888 	bl	8019558 <lv_obj_is_layout_positioned>
 8018448:	2800      	cmp	r0, #0
 801844a:	d0da      	beq.n	8018402 <lv_obj_clear_flag+0x22>
            lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 801844c:	4620      	mov	r0, r4
 801844e:	f004 fe91 	bl	801d174 <lv_obj_get_parent>
 8018452:	f001 f89b 	bl	801958c <lv_obj_mark_layout_as_dirty>
            lv_obj_mark_layout_as_dirty(obj);
 8018456:	4620      	mov	r0, r4
 8018458:	f001 f898 	bl	801958c <lv_obj_mark_layout_as_dirty>
 801845c:	e7d1      	b.n	8018402 <lv_obj_clear_flag+0x22>

0801845e <lv_obj_add_state>:
{
 801845e:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state | state;
 8018460:	8c03      	ldrh	r3, [r0, #32]
 8018462:	ea43 0201 	orr.w	r2, r3, r1
    if(obj->state != new_state) {
 8018466:	ea31 0303 	bics.w	r3, r1, r3
 801846a:	d100      	bne.n	801846e <lv_obj_add_state+0x10>
}
 801846c:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 801846e:	4611      	mov	r1, r2
 8018470:	f7ff fe8e 	bl	8018190 <lv_obj_set_state>
}
 8018474:	e7fa      	b.n	801846c <lv_obj_add_state+0xe>

08018476 <lv_obj_clear_state>:
{
 8018476:	b508      	push	{r3, lr}
    lv_state_t new_state = obj->state & (~state);
 8018478:	8c02      	ldrh	r2, [r0, #32]
 801847a:	43cb      	mvns	r3, r1
 801847c:	b21b      	sxth	r3, r3
 801847e:	ea02 0103 	and.w	r1, r2, r3
    if(obj->state != new_state) {
 8018482:	439a      	bics	r2, r3
 8018484:	d100      	bne.n	8018488 <lv_obj_clear_state+0x12>
}
 8018486:	bd08      	pop	{r3, pc}
        lv_obj_set_state(obj, new_state);
 8018488:	f7ff fe82 	bl	8018190 <lv_obj_set_state>
}
 801848c:	e7fb      	b.n	8018486 <lv_obj_clear_state+0x10>

0801848e <lv_obj_has_flag>:
    return (obj->flags & f)  == f ? true : false;
 801848e:	69c3      	ldr	r3, [r0, #28]
 8018490:	4399      	bics	r1, r3
}
 8018492:	bf0c      	ite	eq
 8018494:	2001      	moveq	r0, #1
 8018496:	2000      	movne	r0, #0
 8018498:	4770      	bx	lr

0801849a <lv_obj_has_flag_any>:
    return (obj->flags & f) ? true : false;
 801849a:	69c3      	ldr	r3, [r0, #28]
 801849c:	420b      	tst	r3, r1
}
 801849e:	bf14      	ite	ne
 80184a0:	2001      	movne	r0, #1
 80184a2:	2000      	moveq	r0, #0
 80184a4:	4770      	bx	lr

080184a6 <lv_obj_get_state>:
}
 80184a6:	8c00      	ldrh	r0, [r0, #32]
 80184a8:	4770      	bx	lr

080184aa <lv_obj_has_state>:
    return obj->state & state ? true : false;
 80184aa:	8c03      	ldrh	r3, [r0, #32]
 80184ac:	420b      	tst	r3, r1
}
 80184ae:	bf14      	ite	ne
 80184b0:	2001      	movne	r0, #1
 80184b2:	2000      	moveq	r0, #0
 80184b4:	4770      	bx	lr

080184b6 <lv_obj_get_group>:
    if(obj->spec_attr) return obj->spec_attr->group_p;
 80184b6:	6880      	ldr	r0, [r0, #8]
 80184b8:	b100      	cbz	r0, 80184bc <lv_obj_get_group+0x6>
 80184ba:	6880      	ldr	r0, [r0, #8]
}
 80184bc:	4770      	bx	lr

080184be <lv_obj_event>:
{
 80184be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184c0:	b085      	sub	sp, #20
 80184c2:	460e      	mov	r6, r1
    lv_event_code_t code = lv_event_get_code(e);
 80184c4:	4608      	mov	r0, r1
 80184c6:	f7f8 fc2d 	bl	8010d24 <lv_event_get_code>
 80184ca:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_current_target(e);
 80184cc:	4630      	mov	r0, r6
 80184ce:	f7f8 fc27 	bl	8010d20 <lv_event_get_current_target>
 80184d2:	4605      	mov	r5, r0
    if(code == LV_EVENT_PRESSED) {
 80184d4:	1e63      	subs	r3, r4, #1
 80184d6:	2b29      	cmp	r3, #41	@ 0x29
 80184d8:	d82e      	bhi.n	8018538 <lv_obj_event+0x7a>
 80184da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80184de:	002a      	.short	0x002a
 80184e0:	0054002d 	.word	0x0054002d
 80184e4:	002d002d 	.word	0x002d002d
 80184e8:	002d002d 	.word	0x002d002d
 80184ec:	0164002f 	.word	0x0164002f
 80184f0:	002d0168 	.word	0x002d0168
 80184f4:	0067002d 	.word	0x0067002d
 80184f8:	017f0133 	.word	0x017f0133
 80184fc:	002d002d 	.word	0x002d002d
 8018500:	01d001d8 	.word	0x01d001d8
 8018504:	01d8002d 	.word	0x01d8002d
 8018508:	002d002d 	.word	0x002d002d
 801850c:	002d01d8 	.word	0x002d01d8
 8018510:	002d002d 	.word	0x002d002d
 8018514:	002d002d 	.word	0x002d002d
 8018518:	002d002d 	.word	0x002d002d
 801851c:	002d002d 	.word	0x002d002d
 8018520:	002d01a3 	.word	0x002d01a3
 8018524:	002d01c7 	.word	0x002d01c7
 8018528:	002d002d 	.word	0x002d002d
 801852c:	0183002d 	.word	0x0183002d
 8018530:	0058      	.short	0x0058
        lv_obj_add_state(obj, LV_STATE_PRESSED);
 8018532:	2120      	movs	r1, #32
 8018534:	f7ff ff93 	bl	801845e <lv_obj_add_state>
}
 8018538:	b005      	add	sp, #20
 801853a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 801853c:	2120      	movs	r1, #32
 801853e:	f7ff ff9a 	bl	8018476 <lv_obj_clear_state>
        lv_indev_t * indev = lv_event_get_indev(e);
 8018542:	4630      	mov	r0, r6
 8018544:	f7f8 fc57 	bl	8010df6 <lv_event_get_indev>
        if(lv_indev_get_scroll_obj(indev) == NULL && lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 8018548:	f7fc f9b2 	bl	80148b0 <lv_indev_get_scroll_obj>
 801854c:	2800      	cmp	r0, #0
 801854e:	d1f3      	bne.n	8018538 <lv_obj_event+0x7a>
 8018550:	2108      	movs	r1, #8
 8018552:	4628      	mov	r0, r5
 8018554:	f7ff ff9b 	bl	801848e <lv_obj_has_flag>
 8018558:	2800      	cmp	r0, #0
 801855a:	d0ed      	beq.n	8018538 <lv_obj_event+0x7a>
            if(!(lv_obj_get_state(obj) & LV_STATE_CHECKED)) lv_obj_add_state(obj, LV_STATE_CHECKED);
 801855c:	4628      	mov	r0, r5
 801855e:	f7ff ffa2 	bl	80184a6 <lv_obj_get_state>
 8018562:	f010 0f01 	tst.w	r0, #1
 8018566:	d109      	bne.n	801857c <lv_obj_event+0xbe>
 8018568:	2101      	movs	r1, #1
 801856a:	4628      	mov	r0, r5
 801856c:	f7ff ff77 	bl	801845e <lv_obj_add_state>
            lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018570:	2200      	movs	r2, #0
 8018572:	211c      	movs	r1, #28
 8018574:	4628      	mov	r0, r5
 8018576:	f7f8 fba7 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801857a:	e7dd      	b.n	8018538 <lv_obj_event+0x7a>
            else lv_obj_clear_state(obj, LV_STATE_CHECKED);
 801857c:	2101      	movs	r1, #1
 801857e:	4628      	mov	r0, r5
 8018580:	f7ff ff79 	bl	8018476 <lv_obj_clear_state>
 8018584:	e7f4      	b.n	8018570 <lv_obj_event+0xb2>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
 8018586:	2120      	movs	r1, #32
 8018588:	f7ff ff75 	bl	8018476 <lv_obj_clear_state>
 801858c:	e7d4      	b.n	8018538 <lv_obj_event+0x7a>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801858e:	f004 fe30 	bl	801d1f2 <lv_obj_get_child_cnt>
 8018592:	4606      	mov	r6, r0
        for(uint32_t i = 0; i < child_cnt; i++) {
 8018594:	2400      	movs	r4, #0
 8018596:	e006      	b.n	80185a6 <lv_obj_event+0xe8>
            lv_obj_t * child = obj->spec_attr->children[i];
 8018598:	68ab      	ldr	r3, [r5, #8]
 801859a:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 801859c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80185a0:	f000 fff4 	bl	801958c <lv_obj_mark_layout_as_dirty>
        for(uint32_t i = 0; i < child_cnt; i++) {
 80185a4:	3401      	adds	r4, #1
 80185a6:	42b4      	cmp	r4, r6
 80185a8:	d3f6      	bcc.n	8018598 <lv_obj_event+0xda>
 80185aa:	e7c5      	b.n	8018538 <lv_obj_event+0x7a>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_CHECKABLE)) {
 80185ac:	2108      	movs	r1, #8
 80185ae:	f7ff ff6e 	bl	801848e <lv_obj_has_flag>
 80185b2:	b9f0      	cbnz	r0, 80185f2 <lv_obj_event+0x134>
        else if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE | LV_OBJ_FLAG_SCROLL_WITH_ARROW) && !lv_obj_is_editable(obj)) {
 80185b4:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80185b8:	4628      	mov	r0, r5
 80185ba:	f7ff ff68 	bl	801848e <lv_obj_has_flag>
 80185be:	2800      	cmp	r0, #0
 80185c0:	d0ba      	beq.n	8018538 <lv_obj_event+0x7a>
 80185c2:	4628      	mov	r0, r5
 80185c4:	f000 faa7 	bl	8018b16 <lv_obj_is_editable>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d1b5      	bne.n	8018538 <lv_obj_event+0x7a>
            lv_coord_t sl = lv_obj_get_scroll_left(obj);
 80185cc:	4628      	mov	r0, r5
 80185ce:	f002 fc7b 	bl	801aec8 <lv_obj_get_scroll_left>
 80185d2:	4607      	mov	r7, r0
            lv_coord_t sr = lv_obj_get_scroll_right(obj);
 80185d4:	4628      	mov	r0, r5
 80185d6:	f002 fce9 	bl	801afac <lv_obj_get_scroll_right>
 80185da:	4604      	mov	r4, r0
            char c = *((char *)lv_event_get_param(e));
 80185dc:	4630      	mov	r0, r6
 80185de:	f7f8 fba5 	bl	8010d2c <lv_event_get_param>
 80185e2:	7803      	ldrb	r3, [r0, #0]
            if(c == LV_KEY_DOWN) {
 80185e4:	3b11      	subs	r3, #17
 80185e6:	2b03      	cmp	r3, #3
 80185e8:	d8a6      	bhi.n	8018538 <lv_obj_event+0x7a>
 80185ea:	e8df f003 	tbb	[pc, r3]
 80185ee:	1f33      	.short	0x1f33
 80185f0:	7947      	.short	0x7947
            char c = *((char *)lv_event_get_param(e));
 80185f2:	4630      	mov	r0, r6
 80185f4:	f7f8 fb9a 	bl	8010d2c <lv_event_get_param>
 80185f8:	7804      	ldrb	r4, [r0, #0]
            if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 80185fa:	f1a4 0311 	sub.w	r3, r4, #17
 80185fe:	2b03      	cmp	r3, #3
 8018600:	d807      	bhi.n	8018612 <lv_obj_event+0x154>
 8018602:	e8df f003 	tbb	[pc, r3]
 8018606:	0e02      	.short	0x0e02
 8018608:	0e02      	.short	0x0e02
                lv_obj_add_state(obj, LV_STATE_CHECKED);
 801860a:	2101      	movs	r1, #1
 801860c:	4628      	mov	r0, r5
 801860e:	f7ff ff26 	bl	801845e <lv_obj_add_state>
            if(c != LV_KEY_ENTER) {
 8018612:	2c0a      	cmp	r4, #10
 8018614:	d090      	beq.n	8018538 <lv_obj_event+0x7a>
                lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8018616:	2200      	movs	r2, #0
 8018618:	211c      	movs	r1, #28
 801861a:	4628      	mov	r0, r5
 801861c:	f7f8 fb54 	bl	8010cc8 <lv_event_send>
                if(res != LV_RES_OK) return;
 8018620:	e78a      	b.n	8018538 <lv_obj_event+0x7a>
                lv_obj_clear_state(obj, LV_STATE_CHECKED);
 8018622:	2101      	movs	r1, #1
 8018624:	4628      	mov	r0, r5
 8018626:	f7ff ff26 	bl	8018476 <lv_obj_clear_state>
 801862a:	e7f2      	b.n	8018612 <lv_obj_event+0x154>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 801862c:	4628      	mov	r0, r5
 801862e:	f002 fbe3 	bl	801adf8 <lv_obj_get_scroll_y>
 8018632:	b284      	uxth	r4, r0
 8018634:	4628      	mov	r0, r5
 8018636:	f001 f852 	bl	80196de <lv_obj_get_height>
 801863a:	4602      	mov	r2, r0
 801863c:	2800      	cmp	r0, #0
 801863e:	db07      	blt.n	8018650 <lv_obj_event+0x192>
 8018640:	eb04 01a2 	add.w	r1, r4, r2, asr #2
 8018644:	2200      	movs	r2, #0
 8018646:	b209      	sxth	r1, r1
 8018648:	4628      	mov	r0, r5
 801864a:	f002 fe9d 	bl	801b388 <lv_obj_scroll_to_y>
 801864e:	e773      	b.n	8018538 <lv_obj_event+0x7a>
 8018650:	1cc2      	adds	r2, r0, #3
 8018652:	e7f5      	b.n	8018640 <lv_obj_event+0x182>
                lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8018654:	4628      	mov	r0, r5
 8018656:	f002 fbcf 	bl	801adf8 <lv_obj_get_scroll_y>
 801865a:	b284      	uxth	r4, r0
 801865c:	4628      	mov	r0, r5
 801865e:	f001 f83e 	bl	80196de <lv_obj_get_height>
 8018662:	4602      	mov	r2, r0
 8018664:	2800      	cmp	r0, #0
 8018666:	db07      	blt.n	8018678 <lv_obj_event+0x1ba>
 8018668:	eba4 01a2 	sub.w	r1, r4, r2, asr #2
 801866c:	2200      	movs	r2, #0
 801866e:	b209      	sxth	r1, r1
 8018670:	4628      	mov	r0, r5
 8018672:	f002 fe89 	bl	801b388 <lv_obj_scroll_to_y>
 8018676:	e75f      	b.n	8018538 <lv_obj_event+0x7a>
 8018678:	1cc2      	adds	r2, r0, #3
 801867a:	e7f5      	b.n	8018668 <lv_obj_event+0x1aa>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 801867c:	4628      	mov	r0, r5
 801867e:	f002 fb9b 	bl	801adb8 <lv_obj_get_scroll_dir>
 8018682:	f010 0f03 	tst.w	r0, #3
 8018686:	d015      	beq.n	80186b4 <lv_obj_event+0x1f6>
 8018688:	2f00      	cmp	r7, #0
 801868a:	dc01      	bgt.n	8018690 <lv_obj_event+0x1d2>
 801868c:	2c00      	cmp	r4, #0
 801868e:	dd11      	ble.n	80186b4 <lv_obj_event+0x1f6>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 8018690:	4628      	mov	r0, r5
 8018692:	f002 fba9 	bl	801ade8 <lv_obj_get_scroll_x>
 8018696:	b284      	uxth	r4, r0
 8018698:	4628      	mov	r0, r5
 801869a:	f001 f819 	bl	80196d0 <lv_obj_get_width>
 801869e:	4602      	mov	r2, r0
 80186a0:	2800      	cmp	r0, #0
 80186a2:	db1b      	blt.n	80186dc <lv_obj_event+0x21e>
 80186a4:	eb04 01a2 	add.w	r1, r4, r2, asr #2
 80186a8:	2200      	movs	r2, #0
 80186aa:	b209      	sxth	r1, r1
 80186ac:	4628      	mov	r0, r5
 80186ae:	f002 fe57 	bl	801b360 <lv_obj_scroll_to_x>
 80186b2:	e741      	b.n	8018538 <lv_obj_event+0x7a>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) + lv_obj_get_height(obj) / 4, anim_enable);
 80186b4:	4628      	mov	r0, r5
 80186b6:	f002 fb9f 	bl	801adf8 <lv_obj_get_scroll_y>
 80186ba:	b284      	uxth	r4, r0
 80186bc:	4628      	mov	r0, r5
 80186be:	f001 f80e 	bl	80196de <lv_obj_get_height>
 80186c2:	4602      	mov	r2, r0
 80186c4:	2800      	cmp	r0, #0
 80186c6:	db07      	blt.n	80186d8 <lv_obj_event+0x21a>
 80186c8:	eb04 01a2 	add.w	r1, r4, r2, asr #2
 80186cc:	2200      	movs	r2, #0
 80186ce:	b209      	sxth	r1, r1
 80186d0:	4628      	mov	r0, r5
 80186d2:	f002 fe59 	bl	801b388 <lv_obj_scroll_to_y>
 80186d6:	e72f      	b.n	8018538 <lv_obj_event+0x7a>
 80186d8:	1cc2      	adds	r2, r0, #3
 80186da:	e7f5      	b.n	80186c8 <lv_obj_event+0x20a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) + lv_obj_get_width(obj) / 4, anim_enable);
 80186dc:	1cc2      	adds	r2, r0, #3
 80186de:	e7e1      	b.n	80186a4 <lv_obj_event+0x1e6>
                if(!((lv_obj_get_scroll_dir(obj) & LV_DIR_HOR) && (sl > 0 || sr > 0)))
 80186e0:	4628      	mov	r0, r5
 80186e2:	f002 fb69 	bl	801adb8 <lv_obj_get_scroll_dir>
 80186e6:	f010 0f03 	tst.w	r0, #3
 80186ea:	d015      	beq.n	8018718 <lv_obj_event+0x25a>
 80186ec:	2f00      	cmp	r7, #0
 80186ee:	dc01      	bgt.n	80186f4 <lv_obj_event+0x236>
 80186f0:	2c00      	cmp	r4, #0
 80186f2:	dd11      	ble.n	8018718 <lv_obj_event+0x25a>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 80186f4:	4628      	mov	r0, r5
 80186f6:	f002 fb77 	bl	801ade8 <lv_obj_get_scroll_x>
 80186fa:	b284      	uxth	r4, r0
 80186fc:	4628      	mov	r0, r5
 80186fe:	f000 ffe7 	bl	80196d0 <lv_obj_get_width>
 8018702:	4602      	mov	r2, r0
 8018704:	2800      	cmp	r0, #0
 8018706:	db1b      	blt.n	8018740 <lv_obj_event+0x282>
 8018708:	eba4 01a2 	sub.w	r1, r4, r2, asr #2
 801870c:	2200      	movs	r2, #0
 801870e:	b209      	sxth	r1, r1
 8018710:	4628      	mov	r0, r5
 8018712:	f002 fe25 	bl	801b360 <lv_obj_scroll_to_x>
 8018716:	e70f      	b.n	8018538 <lv_obj_event+0x7a>
                    lv_obj_scroll_to_y(obj, lv_obj_get_scroll_y(obj) - lv_obj_get_height(obj) / 4, anim_enable);
 8018718:	4628      	mov	r0, r5
 801871a:	f002 fb6d 	bl	801adf8 <lv_obj_get_scroll_y>
 801871e:	b284      	uxth	r4, r0
 8018720:	4628      	mov	r0, r5
 8018722:	f000 ffdc 	bl	80196de <lv_obj_get_height>
 8018726:	4602      	mov	r2, r0
 8018728:	2800      	cmp	r0, #0
 801872a:	db07      	blt.n	801873c <lv_obj_event+0x27e>
 801872c:	eba4 01a2 	sub.w	r1, r4, r2, asr #2
 8018730:	2200      	movs	r2, #0
 8018732:	b209      	sxth	r1, r1
 8018734:	4628      	mov	r0, r5
 8018736:	f002 fe27 	bl	801b388 <lv_obj_scroll_to_y>
 801873a:	e6fd      	b.n	8018538 <lv_obj_event+0x7a>
 801873c:	1cc2      	adds	r2, r0, #3
 801873e:	e7f5      	b.n	801872c <lv_obj_event+0x26e>
                    lv_obj_scroll_to_x(obj, lv_obj_get_scroll_x(obj) - lv_obj_get_width(obj) / 4, anim_enable);
 8018740:	1cc2      	adds	r2, r0, #3
 8018742:	e7e1      	b.n	8018708 <lv_obj_event+0x24a>
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS)) {
 8018744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018748:	f7ff fea1 	bl	801848e <lv_obj_has_flag>
 801874c:	b9b0      	cbnz	r0, 801877c <lv_obj_event+0x2be>
        editing = lv_group_get_editing(lv_obj_get_group(obj));
 801874e:	4628      	mov	r0, r5
 8018750:	f7ff feb1 	bl	80184b6 <lv_obj_get_group>
 8018754:	f7fa fcb0 	bl	80130b8 <lv_group_get_editing>
 8018758:	4604      	mov	r4, r0
        lv_indev_t * indev = lv_indev_get_act();
 801875a:	f7fc f809 	bl	8014770 <lv_indev_get_act>
        if(indev == NULL) indev = lv_event_get_indev(e);
 801875e:	b190      	cbz	r0, 8018786 <lv_obj_event+0x2c8>
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8018760:	f7fc f80c 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 8018764:	2802      	cmp	r0, #2
 8018766:	d012      	beq.n	801878e <lv_obj_event+0x2d0>
 8018768:	2804      	cmp	r0, #4
 801876a:	d012      	beq.n	8018792 <lv_obj_event+0x2d4>
        lv_state_t state = LV_STATE_FOCUSED;
 801876c:	2102      	movs	r1, #2
        if(editing) {
 801876e:	b194      	cbz	r4, 8018796 <lv_obj_event+0x2d8>
            lv_obj_add_state(obj, state);
 8018770:	f041 0108 	orr.w	r1, r1, #8
 8018774:	4628      	mov	r0, r5
 8018776:	f7ff fe72 	bl	801845e <lv_obj_add_state>
 801877a:	e6dd      	b.n	8018538 <lv_obj_event+0x7a>
            lv_obj_scroll_to_view_recursive(obj, LV_ANIM_ON);
 801877c:	2101      	movs	r1, #1
 801877e:	4628      	mov	r0, r5
 8018780:	f002 ffd4 	bl	801b72c <lv_obj_scroll_to_view_recursive>
 8018784:	e7e3      	b.n	801874e <lv_obj_event+0x290>
        if(indev == NULL) indev = lv_event_get_indev(e);
 8018786:	4630      	mov	r0, r6
 8018788:	f7f8 fb35 	bl	8010df6 <lv_event_get_indev>
 801878c:	e7e8      	b.n	8018760 <lv_obj_event+0x2a2>
        if(indev_type == LV_INDEV_TYPE_KEYPAD || indev_type == LV_INDEV_TYPE_ENCODER) state |= LV_STATE_FOCUS_KEY;
 801878e:	2106      	movs	r1, #6
 8018790:	e7ed      	b.n	801876e <lv_obj_event+0x2b0>
 8018792:	2106      	movs	r1, #6
 8018794:	e7eb      	b.n	801876e <lv_obj_event+0x2b0>
            lv_obj_add_state(obj, state);
 8018796:	4628      	mov	r0, r5
 8018798:	f7ff fe61 	bl	801845e <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
 801879c:	2108      	movs	r1, #8
 801879e:	4628      	mov	r0, r5
 80187a0:	f7ff fe69 	bl	8018476 <lv_obj_clear_state>
 80187a4:	e6c8      	b.n	8018538 <lv_obj_event+0x7a>
        lv_obj_add_state(obj, LV_STATE_SCROLLED);
 80187a6:	2140      	movs	r1, #64	@ 0x40
 80187a8:	f7ff fe59 	bl	801845e <lv_obj_add_state>
 80187ac:	e6c4      	b.n	8018538 <lv_obj_event+0x7a>
        lv_obj_clear_state(obj, LV_STATE_SCROLLED);
 80187ae:	2140      	movs	r1, #64	@ 0x40
 80187b0:	f7ff fe61 	bl	8018476 <lv_obj_clear_state>
        if(lv_obj_get_scrollbar_mode(obj) == LV_SCROLLBAR_MODE_ACTIVE) {
 80187b4:	4628      	mov	r0, r5
 80187b6:	f002 faf7 	bl	801ada8 <lv_obj_get_scrollbar_mode>
 80187ba:	2802      	cmp	r0, #2
 80187bc:	f47f aebc 	bne.w	8018538 <lv_obj_event+0x7a>
            lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 80187c0:	aa02      	add	r2, sp, #8
 80187c2:	4669      	mov	r1, sp
 80187c4:	4628      	mov	r0, r5
 80187c6:	f002 ffd1 	bl	801b76c <lv_obj_get_scrollbar_area>
            lv_obj_invalidate_area(obj, &hor_area);
 80187ca:	4669      	mov	r1, sp
 80187cc:	4628      	mov	r0, r5
 80187ce:	f001 fb42 	bl	8019e56 <lv_obj_invalidate_area>
            lv_obj_invalidate_area(obj, &ver_area);
 80187d2:	a902      	add	r1, sp, #8
 80187d4:	4628      	mov	r0, r5
 80187d6:	f001 fb3e 	bl	8019e56 <lv_obj_invalidate_area>
 80187da:	e6ad      	b.n	8018538 <lv_obj_event+0x7a>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED | LV_STATE_FOCUS_KEY);
 80187dc:	210e      	movs	r1, #14
 80187de:	f7ff fe4a 	bl	8018476 <lv_obj_clear_state>
 80187e2:	e6a9      	b.n	8018538 <lv_obj_event+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 80187e4:	2209      	movs	r2, #9
 80187e6:	2100      	movs	r1, #0
 80187e8:	f003 ff84 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 80187ec:	b2c4      	uxtb	r4, r0
    return (lv_blend_mode_t)v.num;
}

static inline uint16_t lv_obj_get_style_layout(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 80187ee:	220a      	movs	r2, #10
 80187f0:	2100      	movs	r1, #0
 80187f2:	4628      	mov	r0, r5
 80187f4:	f003 ff7e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 80187f8:	b280      	uxth	r0, r0
        if(layout || align) {
 80187fa:	b900      	cbnz	r0, 80187fe <lv_obj_event+0x340>
 80187fc:	b114      	cbz	r4, 8018804 <lv_obj_event+0x346>
            lv_obj_mark_layout_as_dirty(obj);
 80187fe:	4628      	mov	r0, r5
 8018800:	f000 fec4 	bl	801958c <lv_obj_mark_layout_as_dirty>
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8018804:	4628      	mov	r0, r5
 8018806:	f004 fcf4 	bl	801d1f2 <lv_obj_get_child_cnt>
 801880a:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 801880c:	2400      	movs	r4, #0
 801880e:	e006      	b.n	801881e <lv_obj_event+0x360>
            lv_obj_t * child = obj->spec_attr->children[i];
 8018810:	68ab      	ldr	r3, [r5, #8]
 8018812:	681b      	ldr	r3, [r3, #0]
            lv_obj_mark_layout_as_dirty(child);
 8018814:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018818:	f000 feb8 	bl	801958c <lv_obj_mark_layout_as_dirty>
        for(i = 0; i < child_cnt; i++) {
 801881c:	3401      	adds	r4, #1
 801881e:	42b4      	cmp	r4, r6
 8018820:	d3f6      	bcc.n	8018810 <lv_obj_event+0x352>
 8018822:	e689      	b.n	8018538 <lv_obj_event+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8018824:	2201      	movs	r2, #1
 8018826:	2100      	movs	r1, #0
 8018828:	f003 ff64 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801882c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801882e:	2204      	movs	r2, #4
 8018830:	2100      	movs	r1, #0
 8018832:	4628      	mov	r0, r5
 8018834:	f003 ff5e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018838:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801883a:	2209      	movs	r2, #9
 801883c:	2100      	movs	r1, #0
 801883e:	4628      	mov	r0, r5
 8018840:	f003 ff58 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_align_t)v.num;
 8018844:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8018846:	220a      	movs	r2, #10
 8018848:	2100      	movs	r1, #0
 801884a:	4628      	mov	r0, r5
 801884c:	f003 ff52 	bl	801c6f4 <lv_obj_get_style_prop>
    return (uint16_t)v.num;
 8018850:	b280      	uxth	r0, r0
        if(layout || align || w == LV_SIZE_CONTENT || h == LV_SIZE_CONTENT) {
 8018852:	b938      	cbnz	r0, 8018864 <lv_obj_event+0x3a6>
 8018854:	b934      	cbnz	r4, 8018864 <lv_obj_event+0x3a6>
 8018856:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801885a:	429f      	cmp	r7, r3
 801885c:	d002      	beq.n	8018864 <lv_obj_event+0x3a6>
 801885e:	429e      	cmp	r6, r3
 8018860:	f47f ae6a 	bne.w	8018538 <lv_obj_event+0x7a>
            lv_obj_mark_layout_as_dirty(obj);
 8018864:	4628      	mov	r0, r5
 8018866:	f000 fe91 	bl	801958c <lv_obj_mark_layout_as_dirty>
 801886a:	e665      	b.n	8018538 <lv_obj_event+0x7a>
        obj->readjust_scroll_after_layout = 1;
 801886c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8018870:	f043 0302 	orr.w	r3, r3, #2
 8018874:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
        lv_obj_mark_layout_as_dirty(obj);
 8018878:	f000 fe88 	bl	801958c <lv_obj_mark_layout_as_dirty>
 801887c:	e65c      	b.n	8018538 <lv_obj_event+0x7a>
        lv_coord_t d = lv_obj_calculate_ext_draw_size(obj, LV_PART_MAIN);
 801887e:	2100      	movs	r1, #0
 8018880:	f000 fcb9 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 8018884:	4601      	mov	r1, r0
        lv_event_set_ext_draw_size(e, d);
 8018886:	4630      	mov	r0, r6
 8018888:	f7f8 fad2 	bl	8010e30 <lv_event_set_ext_draw_size>
 801888c:	e654      	b.n	8018538 <lv_obj_event+0x7a>
        lv_obj_draw(e);
 801888e:	4630      	mov	r0, r6
 8018890:	f7ff fa2e 	bl	8017cf0 <lv_obj_draw>
 8018894:	e650      	b.n	8018538 <lv_obj_event+0x7a>
	...

08018898 <lv_obj_destructor>:
{
 8018898:	b510      	push	{r4, lr}
 801889a:	460c      	mov	r4, r1
    _lv_event_mark_deleted(obj);
 801889c:	4608      	mov	r0, r1
 801889e:	f7f8 fa49 	bl	8010d34 <_lv_event_mark_deleted>
    lv_obj_enable_style_refresh(false); /*No need to refresh the style because the object will be deleted*/
 80188a2:	2000      	movs	r0, #0
 80188a4:	f003 fd30 	bl	801c308 <lv_obj_enable_style_refresh>
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 80188a8:	4a14      	ldr	r2, [pc, #80]	@ (80188fc <lv_obj_destructor+0x64>)
 80188aa:	2100      	movs	r1, #0
 80188ac:	4620      	mov	r0, r4
 80188ae:	f004 fa91 	bl	801cdd4 <lv_obj_remove_style>
    lv_obj_enable_style_refresh(true);
 80188b2:	2001      	movs	r0, #1
 80188b4:	f003 fd28 	bl	801c308 <lv_obj_enable_style_refresh>
    lv_anim_del(obj, NULL);
 80188b8:	2100      	movs	r1, #0
 80188ba:	4620      	mov	r0, r4
 80188bc:	f7e7 ff64 	bl	8000788 <lv_anim_del>
    lv_group_t * group = lv_obj_get_group(obj);
 80188c0:	4620      	mov	r0, r4
 80188c2:	f7ff fdf8 	bl	80184b6 <lv_obj_get_group>
    if(group) lv_group_remove_obj(obj);
 80188c6:	b110      	cbz	r0, 80188ce <lv_obj_destructor+0x36>
 80188c8:	4620      	mov	r0, r4
 80188ca:	f7fa fb3f 	bl	8012f4c <lv_group_remove_obj>
    if(obj->spec_attr) {
 80188ce:	68a3      	ldr	r3, [r4, #8]
 80188d0:	b19b      	cbz	r3, 80188fa <lv_obj_destructor+0x62>
        if(obj->spec_attr->children) {
 80188d2:	6818      	ldr	r0, [r3, #0]
 80188d4:	b120      	cbz	r0, 80188e0 <lv_obj_destructor+0x48>
            lv_mem_free(obj->spec_attr->children);
 80188d6:	f7fe f83d 	bl	8016954 <lv_mem_free>
            obj->spec_attr->children = NULL;
 80188da:	68a3      	ldr	r3, [r4, #8]
 80188dc:	2200      	movs	r2, #0
 80188de:	601a      	str	r2, [r3, #0]
        if(obj->spec_attr->event_dsc) {
 80188e0:	68a3      	ldr	r3, [r4, #8]
 80188e2:	68d8      	ldr	r0, [r3, #12]
 80188e4:	b120      	cbz	r0, 80188f0 <lv_obj_destructor+0x58>
            lv_mem_free(obj->spec_attr->event_dsc);
 80188e6:	f7fe f835 	bl	8016954 <lv_mem_free>
            obj->spec_attr->event_dsc = NULL;
 80188ea:	68a3      	ldr	r3, [r4, #8]
 80188ec:	2200      	movs	r2, #0
 80188ee:	60da      	str	r2, [r3, #12]
        lv_mem_free(obj->spec_attr);
 80188f0:	68a0      	ldr	r0, [r4, #8]
 80188f2:	f7fe f82f 	bl	8016954 <lv_mem_free>
        obj->spec_attr = NULL;
 80188f6:	2300      	movs	r3, #0
 80188f8:	60a3      	str	r3, [r4, #8]
}
 80188fa:	bd10      	pop	{r4, pc}
 80188fc:	000fffff 	.word	0x000fffff

08018900 <lv_obj_add_flag>:
{
 8018900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018902:	b085      	sub	sp, #20
 8018904:	4604      	mov	r4, r0
 8018906:	460d      	mov	r5, r1
    bool was_on_layout = lv_obj_is_layout_positioned(obj);
 8018908:	f000 fe26 	bl	8019558 <lv_obj_is_layout_positioned>
 801890c:	4606      	mov	r6, r0
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801890e:	f015 0701 	ands.w	r7, r5, #1
 8018912:	d12a      	bne.n	801896a <lv_obj_add_flag+0x6a>
    obj->flags |= f;
 8018914:	69e3      	ldr	r3, [r4, #28]
 8018916:	432b      	orrs	r3, r5
 8018918:	61e3      	str	r3, [r4, #28]
    if(f & LV_OBJ_FLAG_HIDDEN) {
 801891a:	b18f      	cbz	r7, 8018940 <lv_obj_add_flag+0x40>
        if(lv_obj_has_state(obj, LV_STATE_FOCUSED)) {
 801891c:	2102      	movs	r1, #2
 801891e:	4620      	mov	r0, r4
 8018920:	f7ff fdc3 	bl	80184aa <lv_obj_has_state>
 8018924:	b160      	cbz	r0, 8018940 <lv_obj_add_flag+0x40>
            lv_group_t * group = lv_obj_get_group(obj);
 8018926:	4620      	mov	r0, r4
 8018928:	f7ff fdc5 	bl	80184b6 <lv_obj_get_group>
            if(group != NULL) {
 801892c:	4607      	mov	r7, r0
 801892e:	b138      	cbz	r0, 8018940 <lv_obj_add_flag+0x40>
                lv_group_focus_next(group);
 8018930:	f7fa fad2 	bl	8012ed8 <lv_group_focus_next>
                lv_obj_t * next_obj = lv_group_get_focused(group);
 8018934:	4638      	mov	r0, r7
 8018936:	f7fa fb97 	bl	8013068 <lv_group_get_focused>
                if(next_obj != NULL) {
 801893a:	b108      	cbz	r0, 8018940 <lv_obj_add_flag+0x40>
                    lv_obj_invalidate(next_obj);
 801893c:	f001 fab3 	bl	8019ea6 <lv_obj_invalidate>
    if((was_on_layout != lv_obj_is_layout_positioned(obj)) || (f & (LV_OBJ_FLAG_LAYOUT_1 |  LV_OBJ_FLAG_LAYOUT_2))) {
 8018940:	4620      	mov	r0, r4
 8018942:	f000 fe09 	bl	8019558 <lv_obj_is_layout_positioned>
 8018946:	42b0      	cmp	r0, r6
 8018948:	d102      	bne.n	8018950 <lv_obj_add_flag+0x50>
 801894a:	f015 7fc0 	tst.w	r5, #25165824	@ 0x1800000
 801894e:	d007      	beq.n	8018960 <lv_obj_add_flag+0x60>
        lv_obj_mark_layout_as_dirty(lv_obj_get_parent(obj));
 8018950:	4620      	mov	r0, r4
 8018952:	f004 fc0f 	bl	801d174 <lv_obj_get_parent>
 8018956:	f000 fe19 	bl	801958c <lv_obj_mark_layout_as_dirty>
        lv_obj_mark_layout_as_dirty(obj);
 801895a:	4620      	mov	r0, r4
 801895c:	f000 fe16 	bl	801958c <lv_obj_mark_layout_as_dirty>
    if(f & LV_OBJ_FLAG_SCROLLABLE) {
 8018960:	f015 0f10 	tst.w	r5, #16
 8018964:	d105      	bne.n	8018972 <lv_obj_add_flag+0x72>
}
 8018966:	b005      	add	sp, #20
 8018968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(f & LV_OBJ_FLAG_HIDDEN) lv_obj_invalidate(obj);
 801896a:	4620      	mov	r0, r4
 801896c:	f001 fa9b 	bl	8019ea6 <lv_obj_invalidate>
 8018970:	e7d0      	b.n	8018914 <lv_obj_add_flag+0x14>
        lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 8018972:	aa02      	add	r2, sp, #8
 8018974:	4669      	mov	r1, sp
 8018976:	4620      	mov	r0, r4
 8018978:	f002 fef8 	bl	801b76c <lv_obj_get_scrollbar_area>
        lv_obj_invalidate_area(obj, &hor_area);
 801897c:	4669      	mov	r1, sp
 801897e:	4620      	mov	r0, r4
 8018980:	f001 fa69 	bl	8019e56 <lv_obj_invalidate_area>
        lv_obj_invalidate_area(obj, &ver_area);
 8018984:	a902      	add	r1, sp, #8
 8018986:	4620      	mov	r0, r4
 8018988:	f001 fa65 	bl	8019e56 <lv_obj_invalidate_area>
}
 801898c:	e7eb      	b.n	8018966 <lv_obj_add_flag+0x66>
	...

08018990 <lv_obj_allocate_spec_attr>:
    if(obj->spec_attr == NULL) {
 8018990:	6883      	ldr	r3, [r0, #8]
 8018992:	b103      	cbz	r3, 8018996 <lv_obj_allocate_spec_attr+0x6>
 8018994:	4770      	bx	lr
{
 8018996:	b510      	push	{r4, lr}
 8018998:	4604      	mov	r4, r0
        x++;
 801899a:	4a0c      	ldr	r2, [pc, #48]	@ (80189cc <lv_obj_allocate_spec_attr+0x3c>)
 801899c:	6813      	ldr	r3, [r2, #0]
 801899e:	3301      	adds	r3, #1
 80189a0:	6013      	str	r3, [r2, #0]
        obj->spec_attr = lv_mem_alloc(sizeof(_lv_obj_spec_attr_t));
 80189a2:	201c      	movs	r0, #28
 80189a4:	f7fd ffb8 	bl	8016918 <lv_mem_alloc>
 80189a8:	60a0      	str	r0, [r4, #8]
        LV_ASSERT_MALLOC(obj->spec_attr);
 80189aa:	b168      	cbz	r0, 80189c8 <lv_obj_allocate_spec_attr+0x38>
        lv_memset_00(obj->spec_attr, sizeof(_lv_obj_spec_attr_t));
 80189ac:	211c      	movs	r1, #28
 80189ae:	f7fe f989 	bl	8016cc4 <lv_memset_00>
        obj->spec_attr->scroll_dir = LV_DIR_ALL;
 80189b2:	68a2      	ldr	r2, [r4, #8]
 80189b4:	7e53      	ldrb	r3, [r2, #25]
 80189b6:	f043 030f 	orr.w	r3, r3, #15
 80189ba:	7653      	strb	r3, [r2, #25]
        obj->spec_attr->scrollbar_mode = LV_SCROLLBAR_MODE_AUTO;
 80189bc:	68a2      	ldr	r2, [r4, #8]
 80189be:	7e13      	ldrb	r3, [r2, #24]
 80189c0:	f043 0303 	orr.w	r3, r3, #3
 80189c4:	7613      	strb	r3, [r2, #24]
}
 80189c6:	bd10      	pop	{r4, pc}
        LV_ASSERT_MALLOC(obj->spec_attr);
 80189c8:	e7fe      	b.n	80189c8 <lv_obj_allocate_spec_attr+0x38>
 80189ca:	bf00      	nop
 80189cc:	200088b4 	.word	0x200088b4

080189d0 <lv_obj_check_type>:
    if(obj == NULL) return false;
 80189d0:	b128      	cbz	r0, 80189de <lv_obj_check_type+0xe>
    return obj->class_p == class_p ? true : false;
 80189d2:	6800      	ldr	r0, [r0, #0]
 80189d4:	4288      	cmp	r0, r1
 80189d6:	bf14      	ite	ne
 80189d8:	2000      	movne	r0, #0
 80189da:	2001      	moveq	r0, #1
 80189dc:	4770      	bx	lr
    if(obj == NULL) return false;
 80189de:	2000      	movs	r0, #0
}
 80189e0:	4770      	bx	lr

080189e2 <lv_obj_construct>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_obj_construct(lv_obj_t * obj)
{
 80189e2:	b538      	push	{r3, r4, r5, lr}
 80189e4:	4604      	mov	r4, r0
    const lv_obj_class_t * original_class_p = obj->class_p;
 80189e6:	6805      	ldr	r5, [r0, #0]

    if(obj->class_p->base_class) {
 80189e8:	682b      	ldr	r3, [r5, #0]
 80189ea:	b113      	cbz	r3, 80189f2 <lv_obj_construct+0x10>
        /*Don't let the descendant methods run during constructing the ancestor type*/
        obj->class_p = obj->class_p->base_class;
 80189ec:	6003      	str	r3, [r0, #0]

        /*Construct the base first*/
        lv_obj_construct(obj);
 80189ee:	f7ff fff8 	bl	80189e2 <lv_obj_construct>
    }

    /*Restore the original class*/
    obj->class_p = original_class_p;
 80189f2:	6025      	str	r5, [r4, #0]

    if(obj->class_p->constructor_cb) obj->class_p->constructor_cb(obj->class_p, obj);
 80189f4:	686b      	ldr	r3, [r5, #4]
 80189f6:	b113      	cbz	r3, 80189fe <lv_obj_construct+0x1c>
 80189f8:	4621      	mov	r1, r4
 80189fa:	4628      	mov	r0, r5
 80189fc:	4798      	blx	r3
}
 80189fe:	bd38      	pop	{r3, r4, r5, pc}

08018a00 <get_instance_size>:

static uint32_t get_instance_size(const lv_obj_class_t * class_p)
{
    /*Find a base in which instance size is set*/
    const lv_obj_class_t * base = class_p;
    while(base && base->instance_size == 0) base = base->base_class;
 8018a00:	e000      	b.n	8018a04 <get_instance_size+0x4>
 8018a02:	6800      	ldr	r0, [r0, #0]
 8018a04:	b120      	cbz	r0, 8018a10 <get_instance_size+0x10>
 8018a06:	6982      	ldr	r2, [r0, #24]
 8018a08:	4b05      	ldr	r3, [pc, #20]	@ (8018a20 <get_instance_size+0x20>)
 8018a0a:	4013      	ands	r3, r2
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d0f8      	beq.n	8018a02 <get_instance_size+0x2>

    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8018a10:	b118      	cbz	r0, 8018a1a <get_instance_size+0x1a>

    return base->instance_size;
 8018a12:	6980      	ldr	r0, [r0, #24]
 8018a14:	f3c0 100f 	ubfx	r0, r0, #4, #16
 8018a18:	4770      	bx	lr
    if(base == NULL) return 0;  /*Never happens: set at least in `lv_obj` class*/
 8018a1a:	2000      	movs	r0, #0
}
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	000ffff0 	.word	0x000ffff0

08018a24 <lv_obj_class_create_obj>:
{
 8018a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a26:	4605      	mov	r5, r0
 8018a28:	460c      	mov	r4, r1
    uint32_t s = get_instance_size(class_p);
 8018a2a:	f7ff ffe9 	bl	8018a00 <get_instance_size>
 8018a2e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_mem_alloc(s);
 8018a30:	f7fd ff72 	bl	8016918 <lv_mem_alloc>
    if(obj == NULL) return NULL;
 8018a34:	4607      	mov	r7, r0
 8018a36:	b1f0      	cbz	r0, 8018a76 <lv_obj_class_create_obj+0x52>
    lv_memset_00(obj, s);
 8018a38:	4631      	mov	r1, r6
 8018a3a:	f7fe f943 	bl	8016cc4 <lv_memset_00>
    obj->class_p = class_p;
 8018a3e:	603d      	str	r5, [r7, #0]
    obj->parent = parent;
 8018a40:	607c      	str	r4, [r7, #4]
    if(parent == NULL) {
 8018a42:	b1d4      	cbz	r4, 8018a7a <lv_obj_class_create_obj+0x56>
        if(parent->spec_attr == NULL) {
 8018a44:	68a3      	ldr	r3, [r4, #8]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d047      	beq.n	8018ada <lv_obj_class_create_obj+0xb6>
        if(parent->spec_attr->children == NULL) {
 8018a4a:	68a5      	ldr	r5, [r4, #8]
 8018a4c:	682b      	ldr	r3, [r5, #0]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d047      	beq.n	8018ae2 <lv_obj_class_create_obj+0xbe>
            parent->spec_attr->child_cnt++;
 8018a52:	686b      	ldr	r3, [r5, #4]
 8018a54:	3301      	adds	r3, #1
 8018a56:	606b      	str	r3, [r5, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8018a58:	68a5      	ldr	r5, [r4, #8]
                                                         sizeof(lv_obj_t *) * parent->spec_attr->child_cnt);
 8018a5a:	6869      	ldr	r1, [r5, #4]
            parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 8018a5c:	0089      	lsls	r1, r1, #2
 8018a5e:	6828      	ldr	r0, [r5, #0]
 8018a60:	f7fd ff94 	bl	801698c <lv_mem_realloc>
 8018a64:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[parent->spec_attr->child_cnt - 1] = obj;
 8018a66:	68a3      	ldr	r3, [r4, #8]
 8018a68:	681a      	ldr	r2, [r3, #0]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018a70:	3b01      	subs	r3, #1
 8018a72:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
}
 8018a76:	4638      	mov	r0, r7
 8018a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_disp_t * disp = lv_disp_get_default();
 8018a7a:	f7fa fbff 	bl	801327c <lv_disp_get_default>
        if(!disp) {
 8018a7e:	4604      	mov	r4, r0
 8018a80:	b1f0      	cbz	r0, 8018ac0 <lv_obj_class_create_obj+0x9c>
        if(disp->screens == NULL) {
 8018a82:	68c0      	ldr	r0, [r0, #12]
 8018a84:	b308      	cbz	r0, 8018aca <lv_obj_class_create_obj+0xa6>
            disp->screen_cnt++;
 8018a86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8018a88:	3101      	adds	r1, #1
 8018a8a:	6261      	str	r1, [r4, #36]	@ 0x24
            disp->screens = lv_mem_realloc(disp->screens, sizeof(lv_obj_t *) * disp->screen_cnt);
 8018a8c:	0089      	lsls	r1, r1, #2
 8018a8e:	f7fd ff7d 	bl	801698c <lv_mem_realloc>
 8018a92:	60e0      	str	r0, [r4, #12]
            disp->screens[disp->screen_cnt - 1] = obj;
 8018a94:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018a96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018a9a:	3b01      	subs	r3, #1
 8018a9c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        obj->coords.x1 = 0;
 8018aa0:	2400      	movs	r4, #0
 8018aa2:	82bc      	strh	r4, [r7, #20]
        obj->coords.y1 = 0;
 8018aa4:	82fc      	strh	r4, [r7, #22]
        obj->coords.x2 = lv_disp_get_hor_res(NULL) - 1;
 8018aa6:	4620      	mov	r0, r4
 8018aa8:	f7fa fbee 	bl	8013288 <lv_disp_get_hor_res>
 8018aac:	b280      	uxth	r0, r0
 8018aae:	3801      	subs	r0, #1
 8018ab0:	8338      	strh	r0, [r7, #24]
        obj->coords.y2 = lv_disp_get_ver_res(NULL) - 1;
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f7fa fc00 	bl	80132b8 <lv_disp_get_ver_res>
 8018ab8:	b280      	uxth	r0, r0
 8018aba:	3801      	subs	r0, #1
 8018abc:	8378      	strh	r0, [r7, #26]
 8018abe:	e7da      	b.n	8018a76 <lv_obj_class_create_obj+0x52>
            lv_mem_free(obj);
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	f7fd ff47 	bl	8016954 <lv_mem_free>
            return NULL;
 8018ac6:	4627      	mov	r7, r4
 8018ac8:	e7d5      	b.n	8018a76 <lv_obj_class_create_obj+0x52>
            disp->screens = lv_mem_alloc(sizeof(lv_obj_t *));
 8018aca:	2004      	movs	r0, #4
 8018acc:	f7fd ff24 	bl	8016918 <lv_mem_alloc>
 8018ad0:	60e0      	str	r0, [r4, #12]
            disp->screens[0] = obj;
 8018ad2:	6007      	str	r7, [r0, #0]
            disp->screen_cnt = 1;
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	6263      	str	r3, [r4, #36]	@ 0x24
 8018ad8:	e7e2      	b.n	8018aa0 <lv_obj_class_create_obj+0x7c>
            lv_obj_allocate_spec_attr(parent);
 8018ada:	4620      	mov	r0, r4
 8018adc:	f7ff ff58 	bl	8018990 <lv_obj_allocate_spec_attr>
 8018ae0:	e7b3      	b.n	8018a4a <lv_obj_class_create_obj+0x26>
            parent->spec_attr->children = lv_mem_alloc(sizeof(lv_obj_t *));
 8018ae2:	2004      	movs	r0, #4
 8018ae4:	f7fd ff18 	bl	8016918 <lv_mem_alloc>
 8018ae8:	6028      	str	r0, [r5, #0]
            parent->spec_attr->children[0] = obj;
 8018aea:	68a3      	ldr	r3, [r4, #8]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	601f      	str	r7, [r3, #0]
            parent->spec_attr->child_cnt = 1;
 8018af0:	68a3      	ldr	r3, [r4, #8]
 8018af2:	2201      	movs	r2, #1
 8018af4:	605a      	str	r2, [r3, #4]
 8018af6:	e7be      	b.n	8018a76 <lv_obj_class_create_obj+0x52>

08018af8 <_lv_obj_destruct>:
{
 8018af8:	b510      	push	{r4, lr}
 8018afa:	4604      	mov	r4, r0
    if(obj->class_p->destructor_cb) obj->class_p->destructor_cb(obj->class_p, obj);
 8018afc:	6800      	ldr	r0, [r0, #0]
 8018afe:	6883      	ldr	r3, [r0, #8]
 8018b00:	b10b      	cbz	r3, 8018b06 <_lv_obj_destruct+0xe>
 8018b02:	4621      	mov	r1, r4
 8018b04:	4798      	blx	r3
    if(obj->class_p->base_class) {
 8018b06:	6823      	ldr	r3, [r4, #0]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	b11b      	cbz	r3, 8018b14 <_lv_obj_destruct+0x1c>
        obj->class_p = obj->class_p->base_class;
 8018b0c:	6023      	str	r3, [r4, #0]
        _lv_obj_destruct(obj);
 8018b0e:	4620      	mov	r0, r4
 8018b10:	f7ff fff2 	bl	8018af8 <_lv_obj_destruct>
}
 8018b14:	bd10      	pop	{r4, pc}

08018b16 <lv_obj_is_editable>:
    const lv_obj_class_t * class_p = obj->class_p;
 8018b16:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->editable == LV_OBJ_CLASS_EDITABLE_INHERIT) class_p = class_p->base_class;
 8018b18:	e000      	b.n	8018b1c <lv_obj_is_editable+0x6>
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	b11b      	cbz	r3, 8018b26 <lv_obj_is_editable+0x10>
 8018b1e:	7e1a      	ldrb	r2, [r3, #24]
 8018b20:	f012 0f03 	tst.w	r2, #3
 8018b24:	d0f9      	beq.n	8018b1a <lv_obj_is_editable+0x4>
    if(class_p == NULL) return false;
 8018b26:	b13b      	cbz	r3, 8018b38 <lv_obj_is_editable+0x22>
    return class_p->editable == LV_OBJ_CLASS_EDITABLE_TRUE ? true : false;
 8018b28:	7e18      	ldrb	r0, [r3, #24]
 8018b2a:	f000 0003 	and.w	r0, r0, #3
 8018b2e:	2801      	cmp	r0, #1
 8018b30:	bf14      	ite	ne
 8018b32:	2000      	movne	r0, #0
 8018b34:	2001      	moveq	r0, #1
 8018b36:	4770      	bx	lr
    if(class_p == NULL) return false;
 8018b38:	2000      	movs	r0, #0
}
 8018b3a:	4770      	bx	lr

08018b3c <lv_obj_is_group_def>:
    const lv_obj_class_t * class_p = obj->class_p;
 8018b3c:	6803      	ldr	r3, [r0, #0]
    while(class_p && class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_INHERIT) class_p = class_p->base_class;
 8018b3e:	e000      	b.n	8018b42 <lv_obj_is_group_def+0x6>
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	b11b      	cbz	r3, 8018b4c <lv_obj_is_group_def+0x10>
 8018b44:	7e1a      	ldrb	r2, [r3, #24]
 8018b46:	f012 0f0c 	tst.w	r2, #12
 8018b4a:	d0f9      	beq.n	8018b40 <lv_obj_is_group_def+0x4>
    if(class_p == NULL) return false;
 8018b4c:	b13b      	cbz	r3, 8018b5e <lv_obj_is_group_def+0x22>
    return class_p->group_def == LV_OBJ_CLASS_GROUP_DEF_TRUE ? true : false;
 8018b4e:	7e18      	ldrb	r0, [r3, #24]
 8018b50:	f000 000c 	and.w	r0, r0, #12
 8018b54:	2804      	cmp	r0, #4
 8018b56:	bf14      	ite	ne
 8018b58:	2000      	movne	r0, #0
 8018b5a:	2001      	moveq	r0, #1
 8018b5c:	4770      	bx	lr
    if(class_p == NULL) return false;
 8018b5e:	2000      	movs	r0, #0
}
 8018b60:	4770      	bx	lr

08018b62 <lv_obj_class_init_obj>:
{
 8018b62:	b538      	push	{r3, r4, r5, lr}
 8018b64:	4604      	mov	r4, r0
    lv_obj_mark_layout_as_dirty(obj);
 8018b66:	f000 fd11 	bl	801958c <lv_obj_mark_layout_as_dirty>
    lv_obj_enable_style_refresh(false);
 8018b6a:	2000      	movs	r0, #0
 8018b6c:	f003 fbcc 	bl	801c308 <lv_obj_enable_style_refresh>
    lv_theme_apply(obj);
 8018b70:	4620      	mov	r0, r4
 8018b72:	f00a ff03 	bl	802397c <lv_theme_apply>
    lv_obj_construct(obj);
 8018b76:	4620      	mov	r0, r4
 8018b78:	f7ff ff33 	bl	80189e2 <lv_obj_construct>
    lv_obj_enable_style_refresh(true);
 8018b7c:	2001      	movs	r0, #1
 8018b7e:	f003 fbc3 	bl	801c308 <lv_obj_enable_style_refresh>
    lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 8018b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b86:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8018b8a:	4620      	mov	r0, r4
 8018b8c:	f003 feea 	bl	801c964 <lv_obj_refresh_style>
    lv_obj_refresh_self_size(obj);
 8018b90:	4620      	mov	r0, r4
 8018b92:	f000 ffd9 	bl	8019b48 <lv_obj_refresh_self_size>
    lv_group_t * def_group = lv_group_get_default();
 8018b96:	f7fa f999 	bl	8012ecc <lv_group_get_default>
    if(def_group && lv_obj_is_group_def(obj)) {
 8018b9a:	b120      	cbz	r0, 8018ba6 <lv_obj_class_init_obj+0x44>
 8018b9c:	4605      	mov	r5, r0
 8018b9e:	4620      	mov	r0, r4
 8018ba0:	f7ff ffcc 	bl	8018b3c <lv_obj_is_group_def>
 8018ba4:	b988      	cbnz	r0, 8018bca <lv_obj_class_init_obj+0x68>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	f004 fae4 	bl	801d174 <lv_obj_get_parent>
    if(parent) {
 8018bac:	4605      	mov	r5, r0
 8018bae:	b158      	cbz	r0, 8018bc8 <lv_obj_class_init_obj+0x66>
        lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 8018bb0:	4622      	mov	r2, r4
 8018bb2:	2122      	movs	r1, #34	@ 0x22
 8018bb4:	f7f8 f888 	bl	8010cc8 <lv_event_send>
        lv_event_send(parent, LV_EVENT_CHILD_CREATED, obj);
 8018bb8:	4622      	mov	r2, r4
 8018bba:	2123      	movs	r1, #35	@ 0x23
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	f7f8 f883 	bl	8010cc8 <lv_event_send>
        lv_obj_invalidate(obj);
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f001 f96f 	bl	8019ea6 <lv_obj_invalidate>
}
 8018bc8:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_add_obj(def_group, obj);
 8018bca:	4621      	mov	r1, r4
 8018bcc:	4628      	mov	r0, r5
 8018bce:	f7fa fa0e 	bl	8012fee <lv_group_add_obj>
 8018bd2:	e7e8      	b.n	8018ba6 <lv_obj_class_init_obj+0x44>

08018bd4 <lv_obj_get_style_bg_color_filtered>:
{
 8018bd4:	b538      	push	{r3, r4, r5, lr}
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_COLOR));
 8018bda:	2220      	movs	r2, #32
 8018bdc:	f003 fd8a 	bl	801c6f4 <lv_obj_get_style_prop>
 8018be0:	4602      	mov	r2, r0
 8018be2:	4629      	mov	r1, r5
 8018be4:	4620      	mov	r0, r4
 8018be6:	f003 fe9f 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018bea:	bd38      	pop	{r3, r4, r5, pc}

08018bec <lv_obj_get_style_bg_grad_color_filtered>:
{
 8018bec:	b538      	push	{r3, r4, r5, lr}
 8018bee:	4604      	mov	r4, r0
 8018bf0:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_COLOR));
 8018bf2:	2222      	movs	r2, #34	@ 0x22
 8018bf4:	f003 fd7e 	bl	801c6f4 <lv_obj_get_style_prop>
 8018bf8:	4602      	mov	r2, r0
 8018bfa:	4629      	mov	r1, r5
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	f003 fe93 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c02:	bd38      	pop	{r3, r4, r5, pc}

08018c04 <lv_obj_get_style_border_color_filtered>:
{
 8018c04:	b538      	push	{r3, r4, r5, lr}
 8018c06:	4604      	mov	r4, r0
 8018c08:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_COLOR));
 8018c0a:	2230      	movs	r2, #48	@ 0x30
 8018c0c:	f003 fd72 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c10:	4602      	mov	r2, r0
 8018c12:	4629      	mov	r1, r5
 8018c14:	4620      	mov	r0, r4
 8018c16:	f003 fe87 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c1a:	bd38      	pop	{r3, r4, r5, pc}

08018c1c <lv_obj_get_style_outline_color_filtered>:
{
 8018c1c:	b538      	push	{r3, r4, r5, lr}
 8018c1e:	4604      	mov	r4, r0
 8018c20:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_COLOR));
 8018c22:	2236      	movs	r2, #54	@ 0x36
 8018c24:	f003 fd66 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c28:	4602      	mov	r2, r0
 8018c2a:	4629      	mov	r1, r5
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f003 fe7b 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c32:	bd38      	pop	{r3, r4, r5, pc}

08018c34 <lv_obj_get_style_text_color_filtered>:
{
 8018c34:	b538      	push	{r3, r4, r5, lr}
 8018c36:	4604      	mov	r4, r0
 8018c38:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR));
 8018c3a:	2255      	movs	r2, #85	@ 0x55
 8018c3c:	f003 fd5a 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c40:	4602      	mov	r2, r0
 8018c42:	4629      	mov	r1, r5
 8018c44:	4620      	mov	r0, r4
 8018c46:	f003 fe6f 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c4a:	bd38      	pop	{r3, r4, r5, pc}

08018c4c <lv_obj_get_style_bg_img_recolor_filtered>:
{
 8018c4c:	b538      	push	{r3, r4, r5, lr}
 8018c4e:	4604      	mov	r4, r0
 8018c50:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR));
 8018c52:	222a      	movs	r2, #42	@ 0x2a
 8018c54:	f003 fd4e 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c58:	4602      	mov	r2, r0
 8018c5a:	4629      	mov	r1, r5
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	f003 fe63 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c62:	bd38      	pop	{r3, r4, r5, pc}

08018c64 <lv_obj_get_style_shadow_color_filtered>:
{
 8018c64:	b538      	push	{r3, r4, r5, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_COLOR));
 8018c6a:	2244      	movs	r2, #68	@ 0x44
 8018c6c:	f003 fd42 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c70:	4602      	mov	r2, r0
 8018c72:	4629      	mov	r1, r5
 8018c74:	4620      	mov	r0, r4
 8018c76:	f003 fe57 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c7a:	bd38      	pop	{r3, r4, r5, pc}

08018c7c <lv_obj_get_style_img_recolor_filtered>:
{
 8018c7c:	b538      	push	{r3, r4, r5, lr}
 8018c7e:	4604      	mov	r4, r0
 8018c80:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR));
 8018c82:	2247      	movs	r2, #71	@ 0x47
 8018c84:	f003 fd36 	bl	801c6f4 <lv_obj_get_style_prop>
 8018c88:	4602      	mov	r2, r0
 8018c8a:	4629      	mov	r1, r5
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f003 fe4b 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018c92:	bd38      	pop	{r3, r4, r5, pc}

08018c94 <lv_obj_get_style_line_color_filtered>:
{
 8018c94:	b538      	push	{r3, r4, r5, lr}
 8018c96:	4604      	mov	r4, r0
 8018c98:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_COLOR));
 8018c9a:	224d      	movs	r2, #77	@ 0x4d
 8018c9c:	f003 fd2a 	bl	801c6f4 <lv_obj_get_style_prop>
 8018ca0:	4602      	mov	r2, r0
 8018ca2:	4629      	mov	r1, r5
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	f003 fe3f 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018caa:	bd38      	pop	{r3, r4, r5, pc}

08018cac <lv_obj_get_style_arc_color_filtered>:
{
 8018cac:	b538      	push	{r3, r4, r5, lr}
 8018cae:	4604      	mov	r4, r0
 8018cb0:	460d      	mov	r5, r1
    lv_style_value_t v = _lv_obj_style_apply_color_filter(obj, part, lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_COLOR));
 8018cb2:	2252      	movs	r2, #82	@ 0x52
 8018cb4:	f003 fd1e 	bl	801c6f4 <lv_obj_get_style_prop>
 8018cb8:	4602      	mov	r2, r0
 8018cba:	4629      	mov	r1, r5
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	f003 fe33 	bl	801c928 <_lv_obj_style_apply_color_filter>
}
 8018cc2:	bd38      	pop	{r3, r4, r5, pc}

08018cc4 <lv_obj_init_draw_rect_dsc>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
{
 8018cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cc6:	4607      	mov	r7, r0
 8018cc8:	460d      	mov	r5, r1
 8018cca:	4614      	mov	r4, r2
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 8018ccc:	f004 f9a2 	bl	801d014 <lv_obj_get_style_opa_recursive>
 8018cd0:	4606      	mov	r6, r0
    if(part != LV_PART_MAIN) {
 8018cd2:	b18d      	cbz	r5, 8018cf8 <lv_obj_init_draw_rect_dsc+0x34>
        if(opa <= LV_OPA_MIN) {
 8018cd4:	2802      	cmp	r0, #2
 8018cd6:	d809      	bhi.n	8018cec <lv_obj_init_draw_rect_dsc+0x28>
            draw_dsc->bg_opa = LV_OPA_TRANSP;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	70e3      	strb	r3, [r4, #3]
            draw_dsc->bg_img_opa = LV_OPA_TRANSP;
 8018cdc:	76a3      	strb	r3, [r4, #26]
            draw_dsc->border_opa = LV_OPA_TRANSP;
 8018cde:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
            draw_dsc->outline_opa = LV_OPA_TRANSP;
 8018ce2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
            draw_dsc->shadow_opa = LV_OPA_TRANSP;
 8018ce6:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
        draw_dsc->bg_img_opa = (opa * draw_dsc->bg_img_opa) >> 8;
        draw_dsc->border_opa = (opa * draw_dsc->border_opa) >> 8;
        draw_dsc->outline_opa = (opa * draw_dsc->outline_opa) >> 8;
        draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
    }
}
 8018cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8018cec:	2268      	movs	r2, #104	@ 0x68
 8018cee:	4629      	mov	r1, r5
 8018cf0:	4638      	mov	r0, r7
 8018cf2:	f003 fcff 	bl	801c6f4 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8018cf6:	70a0      	strb	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_RADIUS);
 8018cf8:	220b      	movs	r2, #11
 8018cfa:	4629      	mov	r1, r5
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	f003 fcf9 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
 8018d02:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
 8018d04:	78e3      	ldrb	r3, [r4, #3]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d144      	bne.n	8018d94 <lv_obj_init_draw_rect_dsc+0xd0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8018d0a:	2232      	movs	r2, #50	@ 0x32
 8018d0c:	4629      	mov	r1, r5
 8018d0e:	4638      	mov	r0, r7
 8018d10:	f003 fcf0 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018d14:	b200      	sxth	r0, r0
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
 8018d16:	8420      	strh	r0, [r4, #32]
    if(draw_dsc->border_width) {
 8018d18:	b120      	cbz	r0, 8018d24 <lv_obj_init_draw_rect_dsc+0x60>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
 8018d1a:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f040 8084 	bne.w	8018e2c <lv_obj_init_draw_rect_dsc+0x168>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8018d24:	2235      	movs	r2, #53	@ 0x35
 8018d26:	4629      	mov	r1, r5
 8018d28:	4638      	mov	r0, r7
 8018d2a:	f003 fce3 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018d2e:	b200      	sxth	r0, r0
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
 8018d30:	84e0      	strh	r0, [r4, #38]	@ 0x26
    if(draw_dsc->outline_width) {
 8018d32:	b120      	cbz	r0, 8018d3e <lv_obj_init_draw_rect_dsc+0x7a>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
 8018d34:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	f040 8093 	bne.w	8018e64 <lv_obj_init_draw_rect_dsc+0x1a0>
    if(draw_dsc->bg_img_opa != LV_OPA_TRANSP) {
 8018d3e:	7ea3      	ldrb	r3, [r4, #26]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f040 80a6 	bne.w	8018e92 <lv_obj_init_draw_rect_dsc+0x1ce>
    if(draw_dsc->shadow_opa) {
 8018d46:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	f040 80da 	bne.w	8018f04 <lv_obj_init_draw_rect_dsc+0x240>
    if(opa < LV_OPA_MAX) {
 8018d50:	2efc      	cmp	r6, #252	@ 0xfc
 8018d52:	d8ca      	bhi.n	8018cea <lv_obj_init_draw_rect_dsc+0x26>
        draw_dsc->bg_opa = (opa * draw_dsc->bg_opa) >> 8;
 8018d54:	78e3      	ldrb	r3, [r4, #3]
 8018d56:	fb06 f303 	mul.w	r3, r6, r3
 8018d5a:	121b      	asrs	r3, r3, #8
 8018d5c:	70e3      	strb	r3, [r4, #3]
        draw_dsc->bg_img_opa = (opa * draw_dsc->bg_img_opa) >> 8;
 8018d5e:	7ea3      	ldrb	r3, [r4, #26]
 8018d60:	fb06 f303 	mul.w	r3, r6, r3
 8018d64:	121b      	asrs	r3, r3, #8
 8018d66:	76a3      	strb	r3, [r4, #26]
        draw_dsc->border_opa = (opa * draw_dsc->border_opa) >> 8;
 8018d68:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8018d6c:	fb06 f303 	mul.w	r3, r6, r3
 8018d70:	121b      	asrs	r3, r3, #8
 8018d72:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
        draw_dsc->outline_opa = (opa * draw_dsc->outline_opa) >> 8;
 8018d76:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8018d7a:	fb06 f303 	mul.w	r3, r6, r3
 8018d7e:	121b      	asrs	r3, r3, #8
 8018d80:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
        draw_dsc->shadow_opa = (opa * draw_dsc->shadow_opa) >> 8;
 8018d84:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8018d88:	fb03 f606 	mul.w	r6, r3, r6
 8018d8c:	1236      	asrs	r6, r6, #8
 8018d8e:	f884 6036 	strb.w	r6, [r4, #54]	@ 0x36
 8018d92:	e7aa      	b.n	8018cea <lv_obj_init_draw_rect_dsc+0x26>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 8018d94:	2221      	movs	r2, #33	@ 0x21
 8018d96:	4629      	mov	r1, r5
 8018d98:	4638      	mov	r0, r7
 8018d9a:	f003 fcab 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018d9e:	b2c0      	uxtb	r0, r0
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
 8018da0:	70e0      	strb	r0, [r4, #3]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
 8018da2:	2802      	cmp	r0, #2
 8018da4:	d9b1      	bls.n	8018d0a <lv_obj_init_draw_rect_dsc+0x46>
            draw_dsc->bg_color = lv_obj_get_style_bg_color_filtered(obj, part);
 8018da6:	4629      	mov	r1, r5
 8018da8:	4638      	mov	r0, r7
 8018daa:	f7ff ff13 	bl	8018bd4 <lv_obj_get_style_bg_color_filtered>
 8018dae:	80a0      	strh	r0, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD);
 8018db0:	2226      	movs	r2, #38	@ 0x26
 8018db2:	4629      	mov	r1, r5
 8018db4:	4638      	mov	r0, r7
 8018db6:	f003 fc9d 	bl	801c6f4 <lv_obj_get_style_prop>
            if(grad && grad->dir != LV_GRAD_DIR_NONE) {
 8018dba:	4601      	mov	r1, r0
 8018dbc:	b118      	cbz	r0, 8018dc6 <lv_obj_init_draw_rect_dsc+0x102>
 8018dbe:	7a43      	ldrb	r3, [r0, #9]
 8018dc0:	f013 0f07 	tst.w	r3, #7
 8018dc4:	d116      	bne.n	8018df4 <lv_obj_init_draw_rect_dsc+0x130>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_DIR);
 8018dc6:	2223      	movs	r2, #35	@ 0x23
 8018dc8:	4629      	mov	r1, r5
 8018dca:	4638      	mov	r0, r7
 8018dcc:	f003 fc92 	bl	801c6f4 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dir = lv_obj_get_style_bg_grad_dir(obj, part);
 8018dd0:	7be3      	ldrb	r3, [r4, #15]
 8018dd2:	f360 0302 	bfi	r3, r0, #0, #3
 8018dd6:	73e3      	strb	r3, [r4, #15]
                if(draw_dsc->bg_grad.dir != LV_GRAD_DIR_NONE) {
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	f013 0f07 	tst.w	r3, #7
 8018dde:	d10e      	bne.n	8018dfe <lv_obj_init_draw_rect_dsc+0x13a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_DITHER_MODE);
 8018de0:	2227      	movs	r2, #39	@ 0x27
 8018de2:	4629      	mov	r1, r5
 8018de4:	4638      	mov	r0, r7
 8018de6:	f003 fc85 	bl	801c6f4 <lv_obj_get_style_prop>
                draw_dsc->bg_grad.dither = lv_obj_get_style_bg_dither_mode(obj, part);
 8018dea:	7be3      	ldrb	r3, [r4, #15]
 8018dec:	f360 03c5 	bfi	r3, r0, #3, #3
 8018df0:	73e3      	strb	r3, [r4, #15]
 8018df2:	e78a      	b.n	8018d0a <lv_obj_init_draw_rect_dsc+0x46>
                lv_memcpy(&draw_dsc->bg_grad, grad, sizeof(*grad));
 8018df4:	220a      	movs	r2, #10
 8018df6:	1da0      	adds	r0, r4, #6
 8018df8:	f7fd fe76 	bl	8016ae8 <lv_memcpy>
 8018dfc:	e785      	b.n	8018d0a <lv_obj_init_draw_rect_dsc+0x46>
                    draw_dsc->bg_grad.stops[0].color = lv_obj_get_style_bg_color_filtered(obj, part);
 8018dfe:	4629      	mov	r1, r5
 8018e00:	4638      	mov	r0, r7
 8018e02:	f7ff fee7 	bl	8018bd4 <lv_obj_get_style_bg_color_filtered>
 8018e06:	80e0      	strh	r0, [r4, #6]
                    draw_dsc->bg_grad.stops[1].color = lv_obj_get_style_bg_grad_color_filtered(obj, part);
 8018e08:	4629      	mov	r1, r5
 8018e0a:	4638      	mov	r0, r7
 8018e0c:	f7ff feee 	bl	8018bec <lv_obj_get_style_bg_grad_color_filtered>
 8018e10:	8160      	strh	r0, [r4, #10]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_MAIN_STOP);
 8018e12:	2224      	movs	r2, #36	@ 0x24
 8018e14:	4629      	mov	r1, r5
 8018e16:	4638      	mov	r0, r7
 8018e18:	f003 fc6c 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[0].frac = lv_obj_get_style_bg_main_stop(obj, part);
 8018e1c:	7220      	strb	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_GRAD_STOP);
 8018e1e:	2225      	movs	r2, #37	@ 0x25
 8018e20:	4629      	mov	r1, r5
 8018e22:	4638      	mov	r0, r7
 8018e24:	f003 fc66 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->bg_grad.stops[1].frac = lv_obj_get_style_bg_grad_stop(obj, part);
 8018e28:	7320      	strb	r0, [r4, #12]
 8018e2a:	e7d9      	b.n	8018de0 <lv_obj_init_draw_rect_dsc+0x11c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 8018e2c:	2231      	movs	r2, #49	@ 0x31
 8018e2e:	4629      	mov	r1, r5
 8018e30:	4638      	mov	r0, r7
 8018e32:	f003 fc5f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018e36:	b2c0      	uxtb	r0, r0
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
 8018e38:	f884 0022 	strb.w	r0, [r4, #34]	@ 0x22
            if(draw_dsc->border_opa > LV_OPA_MIN) {
 8018e3c:	2802      	cmp	r0, #2
 8018e3e:	f67f af71 	bls.w	8018d24 <lv_obj_init_draw_rect_dsc+0x60>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_SIDE);
 8018e42:	2233      	movs	r2, #51	@ 0x33
 8018e44:	4629      	mov	r1, r5
 8018e46:	4638      	mov	r0, r7
 8018e48:	f003 fc54 	bl	801c6f4 <lv_obj_get_style_prop>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
 8018e4c:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8018e50:	f360 0345 	bfi	r3, r0, #1, #5
 8018e54:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
                draw_dsc->border_color = lv_obj_get_style_border_color_filtered(obj, part);
 8018e58:	4629      	mov	r1, r5
 8018e5a:	4638      	mov	r0, r7
 8018e5c:	f7ff fed2 	bl	8018c04 <lv_obj_get_style_border_color_filtered>
 8018e60:	83e0      	strh	r0, [r4, #30]
 8018e62:	e75f      	b.n	8018d24 <lv_obj_init_draw_rect_dsc+0x60>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 8018e64:	2237      	movs	r2, #55	@ 0x37
 8018e66:	4629      	mov	r1, r5
 8018e68:	4638      	mov	r0, r7
 8018e6a:	f003 fc43 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018e6e:	b2c0      	uxtb	r0, r0
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
 8018e70:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
 8018e74:	2802      	cmp	r0, #2
 8018e76:	f67f af62 	bls.w	8018d3e <lv_obj_init_draw_rect_dsc+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 8018e7a:	2238      	movs	r2, #56	@ 0x38
 8018e7c:	4629      	mov	r1, r5
 8018e7e:	4638      	mov	r0, r7
 8018e80:	f003 fc38 	bl	801c6f4 <lv_obj_get_style_prop>
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
 8018e84:	8520      	strh	r0, [r4, #40]	@ 0x28
                draw_dsc->outline_color = lv_obj_get_style_outline_color_filtered(obj, part);
 8018e86:	4629      	mov	r1, r5
 8018e88:	4638      	mov	r0, r7
 8018e8a:	f7ff fec7 	bl	8018c1c <lv_obj_get_style_outline_color_filtered>
 8018e8e:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8018e90:	e755      	b.n	8018d3e <lv_obj_init_draw_rect_dsc+0x7a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_SRC);
 8018e92:	2228      	movs	r2, #40	@ 0x28
 8018e94:	4629      	mov	r1, r5
 8018e96:	4638      	mov	r0, r7
 8018e98:	f003 fc2c 	bl	801c6f4 <lv_obj_get_style_prop>
        draw_dsc->bg_img_src = lv_obj_get_style_bg_img_src(obj, part);
 8018e9c:	6120      	str	r0, [r4, #16]
        if(draw_dsc->bg_img_src) {
 8018e9e:	2800      	cmp	r0, #0
 8018ea0:	f43f af51 	beq.w	8018d46 <lv_obj_init_draw_rect_dsc+0x82>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_OPA);
 8018ea4:	2229      	movs	r2, #41	@ 0x29
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	4638      	mov	r0, r7
 8018eaa:	f003 fc23 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018eae:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_img_opa = lv_obj_get_style_bg_img_opa(obj, part);
 8018eb0:	76a0      	strb	r0, [r4, #26]
            if(draw_dsc->bg_img_opa > LV_OPA_MIN) {
 8018eb2:	2802      	cmp	r0, #2
 8018eb4:	f67f af47 	bls.w	8018d46 <lv_obj_init_draw_rect_dsc+0x82>
                if(lv_img_src_get_type(draw_dsc->bg_img_src) == LV_IMG_SRC_SYMBOL) {
 8018eb8:	6920      	ldr	r0, [r4, #16]
 8018eba:	f7ee fee5 	bl	8007c88 <lv_img_src_get_type>
 8018ebe:	2802      	cmp	r0, #2
 8018ec0:	d014      	beq.n	8018eec <lv_obj_init_draw_rect_dsc+0x228>
                    draw_dsc->bg_img_recolor = lv_obj_get_style_bg_img_recolor_filtered(obj, part);
 8018ec2:	4629      	mov	r1, r5
 8018ec4:	4638      	mov	r0, r7
 8018ec6:	f7ff fec1 	bl	8018c4c <lv_obj_get_style_bg_img_recolor_filtered>
 8018eca:	8320      	strh	r0, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_RECOLOR_OPA);
 8018ecc:	222b      	movs	r2, #43	@ 0x2b
 8018ece:	4629      	mov	r1, r5
 8018ed0:	4638      	mov	r0, r7
 8018ed2:	f003 fc0f 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_recolor_opa = lv_obj_get_style_bg_img_recolor_opa(obj, part);
 8018ed6:	76e0      	strb	r0, [r4, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_IMG_TILED);
 8018ed8:	222c      	movs	r2, #44	@ 0x2c
 8018eda:	4629      	mov	r1, r5
 8018edc:	4638      	mov	r0, r7
 8018ede:	f003 fc09 	bl	801c6f4 <lv_obj_get_style_prop>
    return (bool)v.num;
 8018ee2:	3800      	subs	r0, #0
 8018ee4:	bf18      	it	ne
 8018ee6:	2001      	movne	r0, #1
                    draw_dsc->bg_img_tiled = lv_obj_get_style_bg_img_tiled(obj, part);
 8018ee8:	7720      	strb	r0, [r4, #28]
 8018eea:	e72c      	b.n	8018d46 <lv_obj_init_draw_rect_dsc+0x82>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8018eec:	2257      	movs	r2, #87	@ 0x57
 8018eee:	4629      	mov	r1, r5
 8018ef0:	4638      	mov	r0, r7
 8018ef2:	f003 fbff 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->bg_img_symbol_font = lv_obj_get_style_text_font(obj, part);
 8018ef6:	6160      	str	r0, [r4, #20]
                    draw_dsc->bg_img_recolor = lv_obj_get_style_text_color_filtered(obj, part);
 8018ef8:	4629      	mov	r1, r5
 8018efa:	4638      	mov	r0, r7
 8018efc:	f7ff fe9a 	bl	8018c34 <lv_obj_get_style_text_color_filtered>
 8018f00:	8320      	strh	r0, [r4, #24]
 8018f02:	e720      	b.n	8018d46 <lv_obj_init_draw_rect_dsc+0x82>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 8018f04:	2240      	movs	r2, #64	@ 0x40
 8018f06:	4629      	mov	r1, r5
 8018f08:	4638      	mov	r0, r7
 8018f0a:	f003 fbf3 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8018f0e:	b200      	sxth	r0, r0
        draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
 8018f10:	85e0      	strh	r0, [r4, #46]	@ 0x2e
        if(draw_dsc->shadow_width) {
 8018f12:	2800      	cmp	r0, #0
 8018f14:	f43f af1c 	beq.w	8018d50 <lv_obj_init_draw_rect_dsc+0x8c>
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8018f18:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8018f1c:	2b02      	cmp	r3, #2
 8018f1e:	f67f af17 	bls.w	8018d50 <lv_obj_init_draw_rect_dsc+0x8c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8018f22:	2245      	movs	r2, #69	@ 0x45
 8018f24:	4629      	mov	r1, r5
 8018f26:	4638      	mov	r0, r7
 8018f28:	f003 fbe4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018f2c:	b2c0      	uxtb	r0, r0
                draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
 8018f2e:	f884 0036 	strb.w	r0, [r4, #54]	@ 0x36
                if(draw_dsc->shadow_opa > LV_OPA_MIN) {
 8018f32:	2802      	cmp	r0, #2
 8018f34:	f67f af0c 	bls.w	8018d50 <lv_obj_init_draw_rect_dsc+0x8c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 8018f38:	2241      	movs	r2, #65	@ 0x41
 8018f3a:	4629      	mov	r1, r5
 8018f3c:	4638      	mov	r0, r7
 8018f3e:	f003 fbd9 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
 8018f42:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 8018f44:	2242      	movs	r2, #66	@ 0x42
 8018f46:	4629      	mov	r1, r5
 8018f48:	4638      	mov	r0, r7
 8018f4a:	f003 fbd3 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
 8018f4e:	8660      	strh	r0, [r4, #50]	@ 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 8018f50:	2243      	movs	r2, #67	@ 0x43
 8018f52:	4629      	mov	r1, r5
 8018f54:	4638      	mov	r0, r7
 8018f56:	f003 fbcd 	bl	801c6f4 <lv_obj_get_style_prop>
                    draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
 8018f5a:	86a0      	strh	r0, [r4, #52]	@ 0x34
                    draw_dsc->shadow_color = lv_obj_get_style_shadow_color_filtered(obj, part);
 8018f5c:	4629      	mov	r1, r5
 8018f5e:	4638      	mov	r0, r7
 8018f60:	f7ff fe80 	bl	8018c64 <lv_obj_get_style_shadow_color_filtered>
 8018f64:	85a0      	strh	r0, [r4, #44]	@ 0x2c
 8018f66:	e6f3      	b.n	8018d50 <lv_obj_init_draw_rect_dsc+0x8c>

08018f68 <lv_obj_init_draw_label_dsc>:

void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
{
 8018f68:	b570      	push	{r4, r5, r6, lr}
 8018f6a:	4606      	mov	r6, r0
 8018f6c:	460d      	mov	r5, r1
 8018f6e:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_OPA);
 8018f70:	2256      	movs	r2, #86	@ 0x56
 8018f72:	f003 fbbf 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8018f76:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
 8018f78:	76a3      	strb	r3, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8018f7a:	2b02      	cmp	r3, #2
 8018f7c:	d800      	bhi.n	8018f80 <lv_obj_init_draw_label_dsc+0x18>
#if LV_USE_BIDI
    draw_dsc->bidi_dir = lv_obj_get_style_base_dir(obj, LV_PART_MAIN);
#endif

    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
}
 8018f7e:	bd70      	pop	{r4, r5, r6, pc}
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 8018f80:	4629      	mov	r1, r5
 8018f82:	4630      	mov	r0, r6
 8018f84:	f004 f846 	bl	801d014 <lv_obj_get_style_opa_recursive>
    if(opa <= LV_OPA_MIN) {
 8018f88:	2802      	cmp	r0, #2
 8018f8a:	d931      	bls.n	8018ff0 <lv_obj_init_draw_label_dsc+0x88>
    if(opa < LV_OPA_MAX) {
 8018f8c:	28fc      	cmp	r0, #252	@ 0xfc
 8018f8e:	d804      	bhi.n	8018f9a <lv_obj_init_draw_label_dsc+0x32>
        draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8018f90:	7ea3      	ldrb	r3, [r4, #26]
 8018f92:	fb03 f000 	mul.w	r0, r3, r0
 8018f96:	1200      	asrs	r0, r0, #8
 8018f98:	76a0      	strb	r0, [r4, #26]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 8018f9a:	7ea3      	ldrb	r3, [r4, #26]
 8018f9c:	2b02      	cmp	r3, #2
 8018f9e:	d9ee      	bls.n	8018f7e <lv_obj_init_draw_label_dsc+0x16>
    draw_dsc->color = lv_obj_get_style_text_color_filtered(obj, part);
 8018fa0:	4629      	mov	r1, r5
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f7ff fe46 	bl	8018c34 <lv_obj_get_style_text_color_filtered>
 8018fa8:	81a0      	strh	r0, [r4, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 8018faa:	2258      	movs	r2, #88	@ 0x58
 8018fac:	4629      	mov	r1, r5
 8018fae:	4630      	mov	r0, r6
 8018fb0:	f003 fba0 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
 8018fb4:	82a0      	strh	r0, [r4, #20]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8018fb6:	2259      	movs	r2, #89	@ 0x59
 8018fb8:	4629      	mov	r1, r5
 8018fba:	4630      	mov	r0, r6
 8018fbc:	f003 fb9a 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
 8018fc0:	8260      	strh	r0, [r4, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_DECOR);
 8018fc2:	225a      	movs	r2, #90	@ 0x5a
 8018fc4:	4629      	mov	r1, r5
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f003 fb94 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
 8018fcc:	7fa3      	ldrb	r3, [r4, #30]
 8018fce:	f360 0302 	bfi	r3, r0, #0, #3
 8018fd2:	77a3      	strb	r3, [r4, #30]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8018fd4:	b97d      	cbnz	r5, 8018ff6 <lv_obj_init_draw_label_dsc+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8018fd6:	2257      	movs	r2, #87	@ 0x57
 8018fd8:	4629      	mov	r1, r5
 8018fda:	4630      	mov	r0, r6
 8018fdc:	f003 fb8a 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
 8018fe0:	6020      	str	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 8018fe2:	225b      	movs	r2, #91	@ 0x5b
 8018fe4:	4629      	mov	r1, r5
 8018fe6:	4630      	mov	r0, r6
 8018fe8:	f003 fb84 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->align = lv_obj_get_style_text_align(obj, part);
 8018fec:	7720      	strb	r0, [r4, #28]
 8018fee:	e7c6      	b.n	8018f7e <lv_obj_init_draw_label_dsc+0x16>
        draw_dsc->opa = LV_OPA_TRANSP;
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	76a3      	strb	r3, [r4, #26]
        return;
 8018ff4:	e7c3      	b.n	8018f7e <lv_obj_init_draw_label_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 8018ff6:	2268      	movs	r2, #104	@ 0x68
 8018ff8:	4629      	mov	r1, r5
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	f003 fb7a 	bl	801c6f4 <lv_obj_get_style_prop>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8019000:	7fa3      	ldrb	r3, [r4, #30]
 8019002:	f360 03c5 	bfi	r3, r0, #3, #3
 8019006:	77a3      	strb	r3, [r4, #30]
 8019008:	e7e5      	b.n	8018fd6 <lv_obj_init_draw_label_dsc+0x6e>

0801900a <lv_obj_init_draw_img_dsc>:

void lv_obj_init_draw_img_dsc(lv_obj_t * obj, uint32_t part, lv_draw_img_dsc_t * draw_dsc)
{
 801900a:	b570      	push	{r4, r5, r6, lr}
 801900c:	4605      	mov	r5, r0
 801900e:	460e      	mov	r6, r1
 8019010:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_OPA);
 8019012:	2246      	movs	r2, #70	@ 0x46
 8019014:	f003 fb6e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8019018:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_img_opa(obj, part);
 801901a:	72e3      	strb	r3, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801901c:	2b02      	cmp	r3, #2
 801901e:	d800      	bhi.n	8019022 <lv_obj_init_draw_img_dsc+0x18>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
    }
#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8019020:	bd70      	pop	{r4, r5, r6, pc}
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 8019022:	4631      	mov	r1, r6
 8019024:	4628      	mov	r0, r5
 8019026:	f003 fff5 	bl	801d014 <lv_obj_get_style_opa_recursive>
    if(opa <= LV_OPA_MIN) {
 801902a:	2802      	cmp	r0, #2
 801902c:	d938      	bls.n	80190a0 <lv_obj_init_draw_img_dsc+0x96>
    if(opa < LV_OPA_MAX) {
 801902e:	28fc      	cmp	r0, #252	@ 0xfc
 8019030:	d804      	bhi.n	801903c <lv_obj_init_draw_img_dsc+0x32>
        draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 8019032:	7ae3      	ldrb	r3, [r4, #11]
 8019034:	fb03 f000 	mul.w	r0, r3, r0
 8019038:	1200      	asrs	r0, r0, #8
 801903a:	72e0      	strb	r0, [r4, #11]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 801903c:	7ae3      	ldrb	r3, [r4, #11]
 801903e:	2b02      	cmp	r3, #2
 8019040:	d9ee      	bls.n	8019020 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
 8019042:	2300      	movs	r3, #0
 8019044:	8023      	strh	r3, [r4, #0]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
 8019046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801904a:	8063      	strh	r3, [r4, #2]
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801904c:	8b2b      	ldrh	r3, [r5, #24]
 801904e:	8aaa      	ldrh	r2, [r5, #20]
 8019050:	1a9b      	subs	r3, r3, r2
 8019052:	b29b      	uxth	r3, r3
 8019054:	3301      	adds	r3, #1
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
 8019056:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 801905a:	fa02 f383 	sxtah	r3, r2, r3
 801905e:	105b      	asrs	r3, r3, #1
 8019060:	80a3      	strh	r3, [r4, #4]
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019062:	8b6b      	ldrh	r3, [r5, #26]
 8019064:	8aea      	ldrh	r2, [r5, #22]
 8019066:	1a9b      	subs	r3, r3, r2
 8019068:	b29b      	uxth	r3, r3
 801906a:	3301      	adds	r3, #1
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
 801906c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8019070:	fa02 f383 	sxtah	r3, r2, r3
 8019074:	105b      	asrs	r3, r3, #1
 8019076:	80e3      	strh	r3, [r4, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_IMG_RECOLOR_OPA);
 8019078:	2248      	movs	r2, #72	@ 0x48
 801907a:	4631      	mov	r1, r6
 801907c:	4628      	mov	r0, r5
 801907e:	f003 fb39 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8019082:	b2c0      	uxtb	r0, r0
    draw_dsc->recolor_opa = lv_obj_get_style_img_recolor_opa(obj, part);
 8019084:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
 8019086:	b970      	cbnz	r0, 80190a6 <lv_obj_init_draw_img_dsc+0x9c>
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8019088:	2e00      	cmp	r6, #0
 801908a:	d0c9      	beq.n	8019020 <lv_obj_init_draw_img_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801908c:	2268      	movs	r2, #104	@ 0x68
 801908e:	4631      	mov	r1, r6
 8019090:	4628      	mov	r0, r5
 8019092:	f003 fb2f 	bl	801c6f4 <lv_obj_get_style_prop>
 8019096:	7b23      	ldrb	r3, [r4, #12]
 8019098:	f360 0303 	bfi	r3, r0, #0, #4
 801909c:	7323      	strb	r3, [r4, #12]
 801909e:	e7bf      	b.n	8019020 <lv_obj_init_draw_img_dsc+0x16>
        draw_dsc->opa = LV_OPA_TRANSP;
 80190a0:	2300      	movs	r3, #0
 80190a2:	72e3      	strb	r3, [r4, #11]
        return;
 80190a4:	e7bc      	b.n	8019020 <lv_obj_init_draw_img_dsc+0x16>
        draw_dsc->recolor = lv_obj_get_style_img_recolor_filtered(obj, part);
 80190a6:	4631      	mov	r1, r6
 80190a8:	4628      	mov	r0, r5
 80190aa:	f7ff fde7 	bl	8018c7c <lv_obj_get_style_img_recolor_filtered>
 80190ae:	8120      	strh	r0, [r4, #8]
 80190b0:	e7ea      	b.n	8019088 <lv_obj_init_draw_img_dsc+0x7e>

080190b2 <lv_obj_init_draw_line_dsc>:

void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
{
 80190b2:	b570      	push	{r4, r5, r6, lr}
 80190b4:	4606      	mov	r6, r0
 80190b6:	460d      	mov	r5, r1
 80190b8:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_OPA);
 80190ba:	224e      	movs	r2, #78	@ 0x4e
 80190bc:	f003 fb1a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80190c0:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
 80190c2:	7223      	strb	r3, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 80190c4:	2b02      	cmp	r3, #2
 80190c6:	d800      	bhi.n	80190ca <lv_obj_init_draw_line_dsc+0x18>
    draw_dsc->round_end = draw_dsc->round_start;

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 80190c8:	bd70      	pop	{r4, r5, r6, pc}
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 80190ca:	4629      	mov	r1, r5
 80190cc:	4630      	mov	r0, r6
 80190ce:	f003 ffa1 	bl	801d014 <lv_obj_get_style_opa_recursive>
    if(opa <= LV_OPA_MIN) {
 80190d2:	2802      	cmp	r0, #2
 80190d4:	d93b      	bls.n	801914e <lv_obj_init_draw_line_dsc+0x9c>
    if(opa < LV_OPA_MAX) {
 80190d6:	28fc      	cmp	r0, #252	@ 0xfc
 80190d8:	d804      	bhi.n	80190e4 <lv_obj_init_draw_line_dsc+0x32>
        draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 80190da:	7a23      	ldrb	r3, [r4, #8]
 80190dc:	fb03 f000 	mul.w	r0, r3, r0
 80190e0:	1200      	asrs	r0, r0, #8
 80190e2:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80190e4:	7a23      	ldrb	r3, [r4, #8]
 80190e6:	2b02      	cmp	r3, #2
 80190e8:	d9ee      	bls.n	80190c8 <lv_obj_init_draw_line_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_WIDTH);
 80190ea:	2249      	movs	r2, #73	@ 0x49
 80190ec:	4629      	mov	r1, r5
 80190ee:	4630      	mov	r0, r6
 80190f0:	f003 fb00 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80190f4:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
 80190f6:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 80190f8:	2800      	cmp	r0, #0
 80190fa:	d0e5      	beq.n	80190c8 <lv_obj_init_draw_line_dsc+0x16>
    draw_dsc->color = lv_obj_get_style_line_color_filtered(obj, part);
 80190fc:	4629      	mov	r1, r5
 80190fe:	4630      	mov	r0, r6
 8019100:	f7ff fdc8 	bl	8018c94 <lv_obj_get_style_line_color_filtered>
 8019104:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_WIDTH);
 8019106:	224a      	movs	r2, #74	@ 0x4a
 8019108:	4629      	mov	r1, r5
 801910a:	4630      	mov	r0, r6
 801910c:	f003 faf2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019110:	b200      	sxth	r0, r0
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
 8019112:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
 8019114:	b9f0      	cbnz	r0, 8019154 <lv_obj_init_draw_line_dsc+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_ROUNDED);
 8019116:	224c      	movs	r2, #76	@ 0x4c
 8019118:	4629      	mov	r1, r5
 801911a:	4630      	mov	r0, r6
 801911c:	f003 faea 	bl	801c6f4 <lv_obj_get_style_prop>
    return (bool)v.num;
 8019120:	3800      	subs	r0, #0
 8019122:	bf18      	it	ne
 8019124:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
 8019126:	7a63      	ldrb	r3, [r4, #9]
 8019128:	f360 0382 	bfi	r3, r0, #2, #1
 801912c:	7263      	strb	r3, [r4, #9]
    draw_dsc->round_end = draw_dsc->round_start;
 801912e:	b2db      	uxtb	r3, r3
 8019130:	f360 03c3 	bfi	r3, r0, #3, #1
 8019134:	7263      	strb	r3, [r4, #9]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 8019136:	2d00      	cmp	r5, #0
 8019138:	d0c6      	beq.n	80190c8 <lv_obj_init_draw_line_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801913a:	2268      	movs	r2, #104	@ 0x68
 801913c:	4629      	mov	r1, r5
 801913e:	4630      	mov	r0, r6
 8019140:	f003 fad8 	bl	801c6f4 <lv_obj_get_style_prop>
 8019144:	7a63      	ldrb	r3, [r4, #9]
 8019146:	f360 0301 	bfi	r3, r0, #0, #2
 801914a:	7263      	strb	r3, [r4, #9]
 801914c:	e7bc      	b.n	80190c8 <lv_obj_init_draw_line_dsc+0x16>
        draw_dsc->opa = LV_OPA_TRANSP;
 801914e:	2300      	movs	r3, #0
 8019150:	7223      	strb	r3, [r4, #8]
        return;
 8019152:	e7b9      	b.n	80190c8 <lv_obj_init_draw_line_dsc+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LINE_DASH_GAP);
 8019154:	224b      	movs	r2, #75	@ 0x4b
 8019156:	4629      	mov	r1, r5
 8019158:	4630      	mov	r0, r6
 801915a:	f003 facb 	bl	801c6f4 <lv_obj_get_style_prop>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
 801915e:	80e0      	strh	r0, [r4, #6]
 8019160:	e7d9      	b.n	8019116 <lv_obj_init_draw_line_dsc+0x64>

08019162 <lv_obj_init_draw_arc_dsc>:

void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
{
 8019162:	b570      	push	{r4, r5, r6, lr}
 8019164:	4606      	mov	r6, r0
 8019166:	460d      	mov	r5, r1
 8019168:	4614      	mov	r4, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_WIDTH);
 801916a:	2250      	movs	r2, #80	@ 0x50
 801916c:	f003 fac2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019170:	b200      	sxth	r0, r0
    draw_dsc->width = lv_obj_get_style_arc_width(obj, part);
 8019172:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
 8019174:	b900      	cbnz	r0, 8019178 <lv_obj_init_draw_arc_dsc+0x16>
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);

#if LV_DRAW_COMPLEX
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
#endif
}
 8019176:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_OPA);
 8019178:	2253      	movs	r2, #83	@ 0x53
 801917a:	4629      	mov	r1, r5
 801917c:	4630      	mov	r0, r6
 801917e:	f003 fab9 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 8019182:	b2c3      	uxtb	r3, r0
    draw_dsc->opa = lv_obj_get_style_arc_opa(obj, part);
 8019184:	7323      	strb	r3, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
 8019186:	2b02      	cmp	r3, #2
 8019188:	d9f5      	bls.n	8019176 <lv_obj_init_draw_arc_dsc+0x14>
    lv_opa_t opa = lv_obj_get_style_opa_recursive(obj, part);
 801918a:	4629      	mov	r1, r5
 801918c:	4630      	mov	r0, r6
 801918e:	f003 ff41 	bl	801d014 <lv_obj_get_style_opa_recursive>
    if(opa <= LV_OPA_MIN) {
 8019192:	2802      	cmp	r0, #2
 8019194:	d92c      	bls.n	80191f0 <lv_obj_init_draw_arc_dsc+0x8e>
    if(opa < LV_OPA_MAX) {
 8019196:	28fc      	cmp	r0, #252	@ 0xfc
 8019198:	d804      	bhi.n	80191a4 <lv_obj_init_draw_arc_dsc+0x42>
        draw_dsc->opa = (opa * draw_dsc->opa) >> 8;
 801919a:	7b23      	ldrb	r3, [r4, #12]
 801919c:	fb03 f000 	mul.w	r0, r3, r0
 80191a0:	1200      	asrs	r0, r0, #8
 80191a2:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
 80191a4:	7b23      	ldrb	r3, [r4, #12]
 80191a6:	2b02      	cmp	r3, #2
 80191a8:	d9e5      	bls.n	8019176 <lv_obj_init_draw_arc_dsc+0x14>
    draw_dsc->color = lv_obj_get_style_arc_color_filtered(obj, part);
 80191aa:	4629      	mov	r1, r5
 80191ac:	4630      	mov	r0, r6
 80191ae:	f7ff fd7d 	bl	8018cac <lv_obj_get_style_arc_color_filtered>
 80191b2:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_IMG_SRC);
 80191b4:	2254      	movs	r2, #84	@ 0x54
 80191b6:	4629      	mov	r1, r5
 80191b8:	4630      	mov	r0, r6
 80191ba:	f003 fa9b 	bl	801c6f4 <lv_obj_get_style_prop>
    draw_dsc->img_src = lv_obj_get_style_arc_img_src(obj, part);
 80191be:	60a0      	str	r0, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ARC_ROUNDED);
 80191c0:	2251      	movs	r2, #81	@ 0x51
 80191c2:	4629      	mov	r1, r5
 80191c4:	4630      	mov	r0, r6
 80191c6:	f003 fa95 	bl	801c6f4 <lv_obj_get_style_prop>
    return (bool)v.num;
 80191ca:	3800      	subs	r0, #0
 80191cc:	bf18      	it	ne
 80191ce:	2001      	movne	r0, #1
    draw_dsc->rounded = lv_obj_get_style_arc_rounded(obj, part);
 80191d0:	7b63      	ldrb	r3, [r4, #13]
 80191d2:	f360 0382 	bfi	r3, r0, #2, #1
 80191d6:	7363      	strb	r3, [r4, #13]
    if(part != LV_PART_MAIN) draw_dsc->blend_mode = lv_obj_get_style_blend_mode(obj, part);
 80191d8:	2d00      	cmp	r5, #0
 80191da:	d0cc      	beq.n	8019176 <lv_obj_init_draw_arc_dsc+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 80191dc:	2268      	movs	r2, #104	@ 0x68
 80191de:	4629      	mov	r1, r5
 80191e0:	4630      	mov	r0, r6
 80191e2:	f003 fa87 	bl	801c6f4 <lv_obj_get_style_prop>
 80191e6:	7b63      	ldrb	r3, [r4, #13]
 80191e8:	f360 0301 	bfi	r3, r0, #0, #2
 80191ec:	7363      	strb	r3, [r4, #13]
 80191ee:	e7c2      	b.n	8019176 <lv_obj_init_draw_arc_dsc+0x14>
        draw_dsc->opa = LV_OPA_TRANSP;
 80191f0:	2300      	movs	r3, #0
 80191f2:	7323      	strb	r3, [r4, #12]
        return;
 80191f4:	e7bf      	b.n	8019176 <lv_obj_init_draw_arc_dsc+0x14>

080191f6 <lv_obj_calculate_ext_draw_size>:

lv_coord_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
{
 80191f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191f8:	4605      	mov	r5, r0
 80191fa:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_WIDTH);
 80191fc:	2240      	movs	r2, #64	@ 0x40
 80191fe:	f003 fa79 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019202:	b204      	sxth	r4, r0
    lv_coord_t s = 0;

    lv_coord_t sh_width = lv_obj_get_style_shadow_width(obj, part);
    if(sh_width) {
 8019204:	b9e4      	cbnz	r4, 8019240 <lv_obj_calculate_ext_draw_size+0x4a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_WIDTH);
 8019206:	2235      	movs	r2, #53	@ 0x35
 8019208:	4631      	mov	r1, r6
 801920a:	4628      	mov	r0, r5
 801920c:	f003 fa72 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019210:	b207      	sxth	r7, r0
            s = LV_MAX(s, sh_width);
        }
    }

    lv_coord_t outline_width = lv_obj_get_style_outline_width(obj, part);
    if(outline_width) {
 8019212:	2f00      	cmp	r7, #0
 8019214:	d147      	bne.n	80192a6 <lv_obj_calculate_ext_draw_size+0xb0>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 8019216:	2269      	movs	r2, #105	@ 0x69
 8019218:	4631      	mov	r1, r6
 801921a:	4628      	mov	r0, r5
 801921c:	f003 fa6a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019220:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 8019222:	226a      	movs	r2, #106	@ 0x6a
 8019224:	4631      	mov	r1, r6
 8019226:	4628      	mov	r0, r5
 8019228:	f003 fa64 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801922c:	b200      	sxth	r0, r0
        }
    }

    lv_coord_t w = lv_obj_get_style_transform_width(obj, part);
    lv_coord_t h = lv_obj_get_style_transform_height(obj, part);
    lv_coord_t wh = LV_MAX(w, h);
 801922e:	42b8      	cmp	r0, r7
 8019230:	bfb8      	it	lt
 8019232:	4638      	movlt	r0, r7
    if(wh > 0) s += wh;
 8019234:	2800      	cmp	r0, #0
 8019236:	dd01      	ble.n	801923c <lv_obj_calculate_ext_draw_size+0x46>
 8019238:	4420      	add	r0, r4
 801923a:	b204      	sxth	r4, r0

    return s;
}
 801923c:	4620      	mov	r0, r4
 801923e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OPA);
 8019240:	2245      	movs	r2, #69	@ 0x45
 8019242:	4631      	mov	r1, r6
 8019244:	4628      	mov	r0, r5
 8019246:	f003 fa55 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801924a:	b2c0      	uxtb	r0, r0
        if(sh_opa > LV_OPA_MIN) {
 801924c:	2802      	cmp	r0, #2
 801924e:	d801      	bhi.n	8019254 <lv_obj_calculate_ext_draw_size+0x5e>
    lv_coord_t s = 0;
 8019250:	2400      	movs	r4, #0
 8019252:	e7d8      	b.n	8019206 <lv_obj_calculate_ext_draw_size+0x10>
            sh_width = sh_width / 2 + 1;    /*The blur adds only half width*/
 8019254:	eb04 77d4 	add.w	r7, r4, r4, lsr #31
 8019258:	107f      	asrs	r7, r7, #1
 801925a:	3701      	adds	r7, #1
 801925c:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_SPREAD);
 801925e:	2243      	movs	r2, #67	@ 0x43
 8019260:	4631      	mov	r1, r6
 8019262:	4628      	mov	r0, r5
 8019264:	f003 fa46 	bl	801c6f4 <lv_obj_get_style_prop>
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
 8019268:	fa17 f480 	uxtah	r4, r7, r0
 801926c:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_X);
 801926e:	2241      	movs	r2, #65	@ 0x41
 8019270:	4631      	mov	r1, r6
 8019272:	4628      	mov	r0, r5
 8019274:	f003 fa3e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019278:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_SHADOW_OFS_Y);
 801927a:	2242      	movs	r2, #66	@ 0x42
 801927c:	4631      	mov	r1, r6
 801927e:	4628      	mov	r0, r5
 8019280:	f003 fa38 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019284:	b203      	sxth	r3, r0
            sh_width += LV_MAX(LV_ABS(sh_ofs_x), LV_ABS(sh_ofs_y));
 8019286:	2b00      	cmp	r3, #0
 8019288:	bfb8      	it	lt
 801928a:	425b      	neglt	r3, r3
 801928c:	b29b      	uxth	r3, r3
 801928e:	2f00      	cmp	r7, #0
 8019290:	bfb8      	it	lt
 8019292:	427f      	neglt	r7, r7
 8019294:	b2bf      	uxth	r7, r7
 8019296:	42bb      	cmp	r3, r7
 8019298:	bf2c      	ite	cs
 801929a:	18e4      	addcs	r4, r4, r3
 801929c:	19e4      	addcc	r4, r4, r7
 801929e:	b224      	sxth	r4, r4
            s = LV_MAX(s, sh_width);
 80192a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80192a4:	e7af      	b.n	8019206 <lv_obj_calculate_ext_draw_size+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_OPA);
 80192a6:	2237      	movs	r2, #55	@ 0x37
 80192a8:	4631      	mov	r1, r6
 80192aa:	4628      	mov	r0, r5
 80192ac:	f003 fa22 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 80192b0:	b2c0      	uxtb	r0, r0
        if(outline_opa > LV_OPA_MIN) {
 80192b2:	2802      	cmp	r0, #2
 80192b4:	d9af      	bls.n	8019216 <lv_obj_calculate_ext_draw_size+0x20>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OUTLINE_PAD);
 80192b6:	2238      	movs	r2, #56	@ 0x38
 80192b8:	4631      	mov	r1, r6
 80192ba:	4628      	mov	r0, r5
 80192bc:	f003 fa1a 	bl	801c6f4 <lv_obj_get_style_prop>
            s = LV_MAX(s, outline_pad + outline_width);
 80192c0:	fa07 f080 	sxtah	r0, r7, r0
 80192c4:	42a0      	cmp	r0, r4
 80192c6:	bfb8      	it	lt
 80192c8:	4620      	movlt	r0, r4
 80192ca:	b204      	sxth	r4, r0
 80192cc:	e7a3      	b.n	8019216 <lv_obj_calculate_ext_draw_size+0x20>

080192ce <lv_obj_draw_dsc_init>:

void lv_obj_draw_dsc_init(lv_obj_draw_part_dsc_t * dsc, lv_draw_ctx_t * draw_ctx)
{
 80192ce:	b538      	push	{r3, r4, r5, lr}
 80192d0:	4604      	mov	r4, r0
 80192d2:	460d      	mov	r5, r1
    lv_memset_00(dsc, sizeof(lv_obj_draw_part_dsc_t));
 80192d4:	2148      	movs	r1, #72	@ 0x48
 80192d6:	f7fd fcf5 	bl	8016cc4 <lv_memset_00>
    dsc->draw_ctx = draw_ctx;
 80192da:	6025      	str	r5, [r4, #0]
}
 80192dc:	bd38      	pop	{r3, r4, r5, pc}

080192de <_lv_obj_get_ext_draw_size>:
    if(s_new != s_old) lv_obj_invalidate(obj);
}

lv_coord_t _lv_obj_get_ext_draw_size(const lv_obj_t * obj)
{
    if(obj->spec_attr) return obj->spec_attr->ext_draw_size;
 80192de:	6883      	ldr	r3, [r0, #8]
 80192e0:	b113      	cbz	r3, 80192e8 <_lv_obj_get_ext_draw_size+0xa>
 80192e2:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80192e6:	4770      	bx	lr
    else return 0;
 80192e8:	2000      	movs	r0, #0
}
 80192ea:	4770      	bx	lr

080192ec <lv_obj_refresh_ext_draw_size>:
{
 80192ec:	b530      	push	{r4, r5, lr}
 80192ee:	b083      	sub	sp, #12
 80192f0:	4604      	mov	r4, r0
    lv_coord_t s_old = _lv_obj_get_ext_draw_size(obj);
 80192f2:	f7ff fff4 	bl	80192de <_lv_obj_get_ext_draw_size>
 80192f6:	4605      	mov	r5, r0
    lv_coord_t s_new = 0;
 80192f8:	2300      	movs	r3, #0
 80192fa:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send(obj, LV_EVENT_REFR_EXT_DRAW_SIZE, &s_new);
 80192fe:	f10d 0206 	add.w	r2, sp, #6
 8019302:	2113      	movs	r1, #19
 8019304:	4620      	mov	r0, r4
 8019306:	f7f7 fcdf 	bl	8010cc8 <lv_event_send>
    if(s_new != s_old) lv_obj_invalidate(obj);
 801930a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801930e:	42ab      	cmp	r3, r5
 8019310:	d10a      	bne.n	8019328 <lv_obj_refresh_ext_draw_size+0x3c>
    if(obj->spec_attr) {
 8019312:	68a3      	ldr	r3, [r4, #8]
 8019314:	b163      	cbz	r3, 8019330 <lv_obj_refresh_ext_draw_size+0x44>
        obj->spec_attr->ext_draw_size = s_new;
 8019316:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801931a:	82da      	strh	r2, [r3, #22]
    if(s_new != s_old) lv_obj_invalidate(obj);
 801931c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8019320:	42ab      	cmp	r3, r5
 8019322:	d111      	bne.n	8019348 <lv_obj_refresh_ext_draw_size+0x5c>
}
 8019324:	b003      	add	sp, #12
 8019326:	bd30      	pop	{r4, r5, pc}
    if(s_new != s_old) lv_obj_invalidate(obj);
 8019328:	4620      	mov	r0, r4
 801932a:	f000 fdbc 	bl	8019ea6 <lv_obj_invalidate>
 801932e:	e7f0      	b.n	8019312 <lv_obj_refresh_ext_draw_size+0x26>
    else if(s_new != 0) {
 8019330:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d0f1      	beq.n	801931c <lv_obj_refresh_ext_draw_size+0x30>
        lv_obj_allocate_spec_attr(obj);
 8019338:	4620      	mov	r0, r4
 801933a:	f7ff fb29 	bl	8018990 <lv_obj_allocate_spec_attr>
        obj->spec_attr->ext_draw_size = s_new;
 801933e:	68a3      	ldr	r3, [r4, #8]
 8019340:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8019344:	82da      	strh	r2, [r3, #22]
 8019346:	e7e9      	b.n	801931c <lv_obj_refresh_ext_draw_size+0x30>
    if(s_new != s_old) lv_obj_invalidate(obj);
 8019348:	4620      	mov	r0, r4
 801934a:	f000 fdac 	bl	8019ea6 <lv_obj_invalidate>
}
 801934e:	e7e9      	b.n	8019324 <lv_obj_refresh_ext_draw_size+0x38>

08019350 <_lv_obj_get_layer_type>:

lv_layer_type_t _lv_obj_get_layer_type(const lv_obj_t * obj)
{

    if(obj->spec_attr) return obj->spec_attr->layer_type;
 8019350:	6883      	ldr	r3, [r0, #8]
 8019352:	b113      	cbz	r3, 801935a <_lv_obj_get_layer_type+0xa>
 8019354:	7e98      	ldrb	r0, [r3, #26]
 8019356:	0980      	lsrs	r0, r0, #6
 8019358:	4770      	bx	lr
    else return LV_LAYER_TYPE_NONE;
 801935a:	2000      	movs	r0, #0
}
 801935c:	4770      	bx	lr
	...

08019360 <transform_point>:
        lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
    }
}

static void transform_point(const lv_obj_t * obj, lv_point_t * p, bool inv)
{
 8019360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019364:	b083      	sub	sp, #12
 8019366:	4604      	mov	r4, r0
 8019368:	460f      	mov	r7, r1
 801936a:	4690      	mov	r8, r2
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801936c:	226e      	movs	r2, #110	@ 0x6e
 801936e:	2100      	movs	r1, #0
 8019370:	f003 f9c0 	bl	801c6f4 <lv_obj_get_style_prop>
 8019374:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 8019376:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801937a:	226d      	movs	r2, #109	@ 0x6d
 801937c:	2100      	movs	r1, #0
 801937e:	4620      	mov	r0, r4
 8019380:	f003 f9b8 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019384:	b205      	sxth	r5, r0
    int16_t angle = lv_obj_get_style_transform_angle(obj, 0);
    int16_t zoom = lv_obj_get_style_transform_zoom(obj, 0);

    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) return;
 8019386:	f1b9 0f00 	cmp.w	r9, #0
 801938a:	d102      	bne.n	8019392 <transform_point+0x32>
 801938c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8019390:	d037      	beq.n	8019402 <transform_point+0xa2>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 8019392:	226f      	movs	r2, #111	@ 0x6f
 8019394:	2100      	movs	r1, #0
 8019396:	4620      	mov	r0, r4
 8019398:	f003 f9ac 	bl	801c6f4 <lv_obj_get_style_prop>

    lv_point_t pivot = {
 801939c:	f8ad 0004 	strh.w	r0, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 80193a0:	2270      	movs	r2, #112	@ 0x70
 80193a2:	2100      	movs	r1, #0
 80193a4:	4620      	mov	r0, r4
 80193a6:	f003 f9a5 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80193aa:	b203      	sxth	r3, r0
 80193ac:	f8ad 3006 	strh.w	r3, [sp, #6]
        .x = lv_obj_get_style_transform_pivot_x(obj, 0),
        .y = lv_obj_get_style_transform_pivot_y(obj, 0)
    };

    if(LV_COORD_IS_PCT(pivot.x)) {
 80193b0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80193b4:	f402 41c0 	and.w	r1, r2, #24576	@ 0x6000
 80193b8:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80193bc:	d024      	beq.n	8019408 <transform_point+0xa8>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
    }
    if(LV_COORD_IS_PCT(pivot.y)) {
 80193be:	f403 42c0 	and.w	r2, r3, #24576	@ 0x6000
 80193c2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80193c6:	d03a      	beq.n	801943e <transform_point+0xde>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
    }

    pivot.x = obj->coords.x1 + pivot.x;
 80193c8:	8aa3      	ldrh	r3, [r4, #20]
 80193ca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80193ce:	4413      	add	r3, r2
 80193d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    pivot.y = obj->coords.y1 + pivot.y;
 80193d4:	8ae3      	ldrh	r3, [r4, #22]
 80193d6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80193da:	4413      	add	r3, r2
 80193dc:	f8ad 3006 	strh.w	r3, [sp, #6]

    if(inv) {
 80193e0:	f1b8 0f00 	cmp.w	r8, #0
 80193e4:	d007      	beq.n	80193f6 <transform_point+0x96>
        angle = -angle;
 80193e6:	4276      	negs	r6, r6
 80193e8:	fa0f f986 	sxth.w	r9, r6
        zoom = (256 * 256) / zoom;
 80193ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80193f0:	fb93 f3f5 	sdiv	r3, r3, r5
 80193f4:	b21d      	sxth	r5, r3
    }

    lv_point_transform(p, angle, zoom, &pivot);
 80193f6:	ab01      	add	r3, sp, #4
 80193f8:	462a      	mov	r2, r5
 80193fa:	4649      	mov	r1, r9
 80193fc:	4638      	mov	r0, r7
 80193fe:	f7e8 fda3 	bl	8001f48 <lv_point_transform>
}
 8019402:	b003      	add	sp, #12
 8019404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(LV_COORD_IS_PCT(pivot.x)) {
 8019408:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 801940c:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8019410:	dcd5      	bgt.n	80193be <transform_point+0x5e>
        pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 8019412:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8019416:	dd01      	ble.n	801941c <transform_point+0xbc>
 8019418:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801941c:	8b21      	ldrh	r1, [r4, #24]
 801941e:	8aa0      	ldrh	r0, [r4, #20]
 8019420:	1a09      	subs	r1, r1, r0
 8019422:	b289      	uxth	r1, r1
 8019424:	3101      	adds	r1, #1
 8019426:	b209      	sxth	r1, r1
 8019428:	fb01 f202 	mul.w	r2, r1, r2
 801942c:	4911      	ldr	r1, [pc, #68]	@ (8019474 <transform_point+0x114>)
 801942e:	fb81 0102 	smull	r0, r1, r1, r2
 8019432:	17d2      	asrs	r2, r2, #31
 8019434:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8019438:	f8ad 2004 	strh.w	r2, [sp, #4]
 801943c:	e7bf      	b.n	80193be <transform_point+0x5e>
    if(LV_COORD_IS_PCT(pivot.y)) {
 801943e:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8019442:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8019446:	dcbf      	bgt.n	80193c8 <transform_point+0x68>
        pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 8019448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801944c:	dd01      	ble.n	8019452 <transform_point+0xf2>
 801944e:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019452:	8b62      	ldrh	r2, [r4, #26]
 8019454:	8ae1      	ldrh	r1, [r4, #22]
 8019456:	1a52      	subs	r2, r2, r1
 8019458:	b292      	uxth	r2, r2
 801945a:	3201      	adds	r2, #1
 801945c:	b212      	sxth	r2, r2
 801945e:	fb02 f303 	mul.w	r3, r2, r3
 8019462:	4a04      	ldr	r2, [pc, #16]	@ (8019474 <transform_point+0x114>)
 8019464:	fb82 1203 	smull	r1, r2, r2, r3
 8019468:	17db      	asrs	r3, r3, #31
 801946a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801946e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019472:	e7a9      	b.n	80193c8 <transform_point+0x68>
 8019474:	51eb851f 	.word	0x51eb851f

08019478 <lv_obj_set_x>:
{
 8019478:	b530      	push	{r4, r5, lr}
 801947a:	b083      	sub	sp, #12
 801947c:	4605      	mov	r5, r0
 801947e:	460c      	mov	r4, r1
    res_x = lv_obj_get_local_style_prop(obj, LV_STYLE_X, &v_x, 0);
 8019480:	2300      	movs	r3, #0
 8019482:	aa01      	add	r2, sp, #4
 8019484:	2107      	movs	r1, #7
 8019486:	f002 ff45 	bl	801c314 <lv_obj_get_local_style_prop>
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801948a:	2801      	cmp	r0, #1
 801948c:	d007      	beq.n	801949e <lv_obj_set_x+0x26>
 801948e:	b920      	cbnz	r0, 801949a <lv_obj_set_x+0x22>
        lv_obj_set_style_x(obj, x, 0);
 8019490:	2200      	movs	r2, #0
 8019492:	4621      	mov	r1, r4
 8019494:	4628      	mov	r0, r5
 8019496:	f003 fe0b 	bl	801d0b0 <lv_obj_set_style_x>
}
 801949a:	b003      	add	sp, #12
 801949c:	bd30      	pop	{r4, r5, pc}
    if((res_x == LV_RES_OK && v_x.num != x) || res_x == LV_RES_INV) {
 801949e:	9b01      	ldr	r3, [sp, #4]
 80194a0:	42a3      	cmp	r3, r4
 80194a2:	d1f5      	bne.n	8019490 <lv_obj_set_x+0x18>
 80194a4:	e7f3      	b.n	801948e <lv_obj_set_x+0x16>

080194a6 <lv_obj_set_y>:
{
 80194a6:	b530      	push	{r4, r5, lr}
 80194a8:	b083      	sub	sp, #12
 80194aa:	4605      	mov	r5, r0
 80194ac:	460c      	mov	r4, r1
    res_y = lv_obj_get_local_style_prop(obj, LV_STYLE_Y, &v_y, 0);
 80194ae:	2300      	movs	r3, #0
 80194b0:	aa01      	add	r2, sp, #4
 80194b2:	2108      	movs	r1, #8
 80194b4:	f002 ff2e 	bl	801c314 <lv_obj_get_local_style_prop>
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 80194b8:	2801      	cmp	r0, #1
 80194ba:	d007      	beq.n	80194cc <lv_obj_set_y+0x26>
 80194bc:	b920      	cbnz	r0, 80194c8 <lv_obj_set_y+0x22>
        lv_obj_set_style_y(obj, y, 0);
 80194be:	2200      	movs	r2, #0
 80194c0:	4621      	mov	r1, r4
 80194c2:	4628      	mov	r0, r5
 80194c4:	f003 fdfb 	bl	801d0be <lv_obj_set_style_y>
}
 80194c8:	b003      	add	sp, #12
 80194ca:	bd30      	pop	{r4, r5, pc}
    if((res_y == LV_RES_OK && v_y.num != y) || res_y == LV_RES_INV) {
 80194cc:	9b01      	ldr	r3, [sp, #4]
 80194ce:	42a3      	cmp	r3, r4
 80194d0:	d1f5      	bne.n	80194be <lv_obj_set_y+0x18>
 80194d2:	e7f3      	b.n	80194bc <lv_obj_set_y+0x16>

080194d4 <lv_obj_set_pos>:
{
 80194d4:	b538      	push	{r3, r4, r5, lr}
 80194d6:	4604      	mov	r4, r0
 80194d8:	4615      	mov	r5, r2
    lv_obj_set_x(obj, x);
 80194da:	f7ff ffcd 	bl	8019478 <lv_obj_set_x>
    lv_obj_set_y(obj, y);
 80194de:	4629      	mov	r1, r5
 80194e0:	4620      	mov	r0, r4
 80194e2:	f7ff ffe0 	bl	80194a6 <lv_obj_set_y>
}
 80194e6:	bd38      	pop	{r3, r4, r5, pc}

080194e8 <lv_obj_set_width>:
{
 80194e8:	b530      	push	{r4, r5, lr}
 80194ea:	b083      	sub	sp, #12
 80194ec:	4605      	mov	r5, r0
 80194ee:	460c      	mov	r4, r1
    res_w = lv_obj_get_local_style_prop(obj, LV_STYLE_WIDTH, &v_w, 0);
 80194f0:	2300      	movs	r3, #0
 80194f2:	aa01      	add	r2, sp, #4
 80194f4:	2101      	movs	r1, #1
 80194f6:	f002 ff0d 	bl	801c314 <lv_obj_get_local_style_prop>
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 80194fa:	2801      	cmp	r0, #1
 80194fc:	d007      	beq.n	801950e <lv_obj_set_width+0x26>
 80194fe:	b920      	cbnz	r0, 801950a <lv_obj_set_width+0x22>
        lv_obj_set_style_width(obj, w, 0);
 8019500:	2200      	movs	r2, #0
 8019502:	4621      	mov	r1, r4
 8019504:	4628      	mov	r0, r5
 8019506:	f003 fdbe 	bl	801d086 <lv_obj_set_style_width>
}
 801950a:	b003      	add	sp, #12
 801950c:	bd30      	pop	{r4, r5, pc}
    if((res_w == LV_RES_OK && v_w.num != w) || res_w == LV_RES_INV) {
 801950e:	9b01      	ldr	r3, [sp, #4]
 8019510:	42a3      	cmp	r3, r4
 8019512:	d1f5      	bne.n	8019500 <lv_obj_set_width+0x18>
 8019514:	e7f3      	b.n	80194fe <lv_obj_set_width+0x16>

08019516 <lv_obj_set_height>:
{
 8019516:	b530      	push	{r4, r5, lr}
 8019518:	b083      	sub	sp, #12
 801951a:	4605      	mov	r5, r0
 801951c:	460c      	mov	r4, r1
    res_h = lv_obj_get_local_style_prop(obj, LV_STYLE_HEIGHT, &v_h, 0);
 801951e:	2300      	movs	r3, #0
 8019520:	aa01      	add	r2, sp, #4
 8019522:	2104      	movs	r1, #4
 8019524:	f002 fef6 	bl	801c314 <lv_obj_get_local_style_prop>
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 8019528:	2801      	cmp	r0, #1
 801952a:	d007      	beq.n	801953c <lv_obj_set_height+0x26>
 801952c:	b920      	cbnz	r0, 8019538 <lv_obj_set_height+0x22>
        lv_obj_set_style_height(obj, h, 0);
 801952e:	2200      	movs	r2, #0
 8019530:	4621      	mov	r1, r4
 8019532:	4628      	mov	r0, r5
 8019534:	f003 fdb5 	bl	801d0a2 <lv_obj_set_style_height>
}
 8019538:	b003      	add	sp, #12
 801953a:	bd30      	pop	{r4, r5, pc}
    if((res_h == LV_RES_OK && v_h.num != h) || res_h == LV_RES_INV) {
 801953c:	9b01      	ldr	r3, [sp, #4]
 801953e:	42a3      	cmp	r3, r4
 8019540:	d1f5      	bne.n	801952e <lv_obj_set_height+0x18>
 8019542:	e7f3      	b.n	801952c <lv_obj_set_height+0x16>

08019544 <lv_obj_set_size>:
{
 8019544:	b538      	push	{r3, r4, r5, lr}
 8019546:	4604      	mov	r4, r0
 8019548:	4615      	mov	r5, r2
    lv_obj_set_width(obj, w);
 801954a:	f7ff ffcd 	bl	80194e8 <lv_obj_set_width>
    lv_obj_set_height(obj, h);
 801954e:	4629      	mov	r1, r5
 8019550:	4620      	mov	r0, r4
 8019552:	f7ff ffe0 	bl	8019516 <lv_obj_set_height>
}
 8019556:	bd38      	pop	{r3, r4, r5, pc}

08019558 <lv_obj_is_layout_positioned>:
{
 8019558:	b538      	push	{r3, r4, r5, lr}
 801955a:	4604      	mov	r4, r0
    if(lv_obj_has_flag_any(obj, LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_IGNORE_LAYOUT | LV_OBJ_FLAG_FLOATING)) return false;
 801955c:	490a      	ldr	r1, [pc, #40]	@ (8019588 <lv_obj_is_layout_positioned+0x30>)
 801955e:	f7fe ff9c 	bl	801849a <lv_obj_has_flag_any>
 8019562:	b110      	cbz	r0, 801956a <lv_obj_is_layout_positioned+0x12>
 8019564:	2500      	movs	r5, #0
}
 8019566:	4628      	mov	r0, r5
 8019568:	bd38      	pop	{r3, r4, r5, pc}
 801956a:	4605      	mov	r5, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801956c:	4620      	mov	r0, r4
 801956e:	f003 fe01 	bl	801d174 <lv_obj_get_parent>
    if(parent == NULL) return false;
 8019572:	2800      	cmp	r0, #0
 8019574:	d0f7      	beq.n	8019566 <lv_obj_is_layout_positioned+0xe>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 8019576:	220a      	movs	r2, #10
 8019578:	2100      	movs	r1, #0
 801957a:	f003 f8bb 	bl	801c6f4 <lv_obj_get_style_prop>
    if(layout) return true;
 801957e:	b280      	uxth	r0, r0
 8019580:	2800      	cmp	r0, #0
 8019582:	d0f0      	beq.n	8019566 <lv_obj_is_layout_positioned+0xe>
 8019584:	2501      	movs	r5, #1
 8019586:	e7ee      	b.n	8019566 <lv_obj_is_layout_positioned+0xe>
 8019588:	00060001 	.word	0x00060001

0801958c <lv_obj_mark_layout_as_dirty>:
{
 801958c:	b508      	push	{r3, lr}
    obj->layout_inv = 1;
 801958e:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8019592:	f042 0201 	orr.w	r2, r2, #1
 8019596:	f880 2022 	strb.w	r2, [r0, #34]	@ 0x22
    lv_obj_t * scr = lv_obj_get_screen(obj);
 801959a:	f003 fdef 	bl	801d17c <lv_obj_get_screen>
    scr->scr_layout_inv = 1;
 801959e:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 80195a2:	f042 0204 	orr.w	r2, r2, #4
 80195a6:	f880 2022 	strb.w	r2, [r0, #34]	@ 0x22
    lv_disp_t * disp = lv_obj_get_disp(scr);
 80195aa:	f003 fdef 	bl	801d18c <lv_obj_get_disp>
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 80195ae:	6840      	ldr	r0, [r0, #4]
 80195b0:	b108      	cbz	r0, 80195b6 <lv_obj_mark_layout_as_dirty+0x2a>
 80195b2:	f00d fa2c 	bl	8026a0e <lv_timer_resume>
}
 80195b6:	bd08      	pop	{r3, pc}

080195b8 <lv_obj_set_layout>:
{
 80195b8:	b510      	push	{r4, lr}
 80195ba:	4604      	mov	r4, r0
    lv_obj_set_style_layout(obj, layout, 0);
 80195bc:	2200      	movs	r2, #0
 80195be:	b289      	uxth	r1, r1
 80195c0:	f003 fdca 	bl	801d158 <lv_obj_set_style_layout>
    lv_obj_mark_layout_as_dirty(obj);
 80195c4:	4620      	mov	r0, r4
 80195c6:	f7ff ffe1 	bl	801958c <lv_obj_mark_layout_as_dirty>
}
 80195ca:	bd10      	pop	{r4, pc}

080195cc <lv_layout_register>:
{
 80195cc:	b570      	push	{r4, r5, r6, lr}
 80195ce:	4605      	mov	r5, r0
 80195d0:	460c      	mov	r4, r1
    layout_cnt++;
 80195d2:	4a0d      	ldr	r2, [pc, #52]	@ (8019608 <lv_layout_register+0x3c>)
 80195d4:	6813      	ldr	r3, [r2, #0]
 80195d6:	3301      	adds	r3, #1
 80195d8:	6013      	str	r3, [r2, #0]
    LV_GC_ROOT(_lv_layout_list) = lv_mem_realloc(LV_GC_ROOT(_lv_layout_list), layout_cnt * sizeof(lv_layout_dsc_t));
 80195da:	4e0c      	ldr	r6, [pc, #48]	@ (801960c <lv_layout_register+0x40>)
 80195dc:	00d9      	lsls	r1, r3, #3
 80195de:	6830      	ldr	r0, [r6, #0]
 80195e0:	f7fd f9d4 	bl	801698c <lv_mem_realloc>
 80195e4:	6030      	str	r0, [r6, #0]
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 80195e6:	b168      	cbz	r0, 8019604 <lv_layout_register+0x38>
 80195e8:	4603      	mov	r3, r0
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].cb = cb;
 80195ea:	4a07      	ldr	r2, [pc, #28]	@ (8019608 <lv_layout_register+0x3c>)
 80195ec:	6810      	ldr	r0, [r2, #0]
 80195ee:	f100 5200 	add.w	r2, r0, #536870912	@ 0x20000000
 80195f2:	3a01      	subs	r2, #1
 80195f4:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
    LV_GC_ROOT(_lv_layout_list)[layout_cnt - 1].user_data = user_data;
 80195f8:	4b04      	ldr	r3, [pc, #16]	@ (801960c <lv_layout_register+0x40>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019600:	605c      	str	r4, [r3, #4]
}
 8019602:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MALLOC(LV_GC_ROOT(_lv_layout_list));
 8019604:	e7fe      	b.n	8019604 <lv_layout_register+0x38>
 8019606:	bf00      	nop
 8019608:	200088bc 	.word	0x200088bc
 801960c:	20006814 	.word	0x20006814

08019610 <lv_obj_align>:
{
 8019610:	b570      	push	{r4, r5, r6, lr}
 8019612:	4604      	mov	r4, r0
 8019614:	4615      	mov	r5, r2
 8019616:	461e      	mov	r6, r3
    lv_obj_set_style_align(obj, align, 0);
 8019618:	2200      	movs	r2, #0
 801961a:	f003 fd57 	bl	801d0cc <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x_ofs, y_ofs);
 801961e:	4632      	mov	r2, r6
 8019620:	4629      	mov	r1, r5
 8019622:	4620      	mov	r0, r4
 8019624:	f7ff ff56 	bl	80194d4 <lv_obj_set_pos>
}
 8019628:	bd70      	pop	{r4, r5, r6, pc}

0801962a <lv_obj_get_coords>:
    dest->x1 = src->x1;
 801962a:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801962e:	800b      	strh	r3, [r1, #0]
    dest->y1 = src->y1;
 8019630:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8019634:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 8019636:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801963a:	808b      	strh	r3, [r1, #4]
    dest->y2 = src->y2;
 801963c:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 8019640:	80cb      	strh	r3, [r1, #6]
}
 8019642:	4770      	bx	lr

08019644 <lv_obj_get_x>:
{
 8019644:	b538      	push	{r3, r4, r5, lr}
 8019646:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8019648:	f003 fd94 	bl	801d174 <lv_obj_get_parent>
    if(parent) {
 801964c:	b1d0      	cbz	r0, 8019684 <lv_obj_get_x+0x40>
 801964e:	4605      	mov	r5, r0
        rel_x  = obj->coords.x1 - parent->coords.x1;
 8019650:	8aa4      	ldrh	r4, [r4, #20]
 8019652:	8a83      	ldrh	r3, [r0, #20]
 8019654:	1ae4      	subs	r4, r4, r3
 8019656:	b2a4      	uxth	r4, r4
        rel_x += lv_obj_get_scroll_x(parent);
 8019658:	f001 fbc6 	bl	801ade8 <lv_obj_get_scroll_x>
 801965c:	fa14 f480 	uxtah	r4, r4, r0
 8019660:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019662:	2212      	movs	r2, #18
 8019664:	2100      	movs	r1, #0
 8019666:	4628      	mov	r0, r5
 8019668:	f003 f844 	bl	801c6f4 <lv_obj_get_style_prop>
        rel_x -= lv_obj_get_style_pad_left(parent, LV_PART_MAIN);
 801966c:	b280      	uxth	r0, r0
 801966e:	1a24      	subs	r4, r4, r0
 8019670:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019672:	2232      	movs	r2, #50	@ 0x32
 8019674:	2100      	movs	r1, #0
 8019676:	4628      	mov	r0, r5
 8019678:	f003 f83c 	bl	801c6f4 <lv_obj_get_style_prop>
        rel_x -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 801967c:	b280      	uxth	r0, r0
 801967e:	1a20      	subs	r0, r4, r0
 8019680:	b200      	sxth	r0, r0
}
 8019682:	bd38      	pop	{r3, r4, r5, pc}
        rel_x = obj->coords.x1;
 8019684:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 8019688:	e7fb      	b.n	8019682 <lv_obj_get_x+0x3e>

0801968a <lv_obj_get_y>:
{
 801968a:	b538      	push	{r3, r4, r5, lr}
 801968c:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801968e:	f003 fd71 	bl	801d174 <lv_obj_get_parent>
    if(parent) {
 8019692:	b1d0      	cbz	r0, 80196ca <lv_obj_get_y+0x40>
 8019694:	4605      	mov	r5, r0
        rel_y = obj->coords.y1 - parent->coords.y1;
 8019696:	8ae4      	ldrh	r4, [r4, #22]
 8019698:	8ac3      	ldrh	r3, [r0, #22]
 801969a:	1ae4      	subs	r4, r4, r3
 801969c:	b2a4      	uxth	r4, r4
        rel_y += lv_obj_get_scroll_y(parent);
 801969e:	f001 fbab 	bl	801adf8 <lv_obj_get_scroll_y>
 80196a2:	fa14 f480 	uxtah	r4, r4, r0
 80196a6:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80196a8:	2210      	movs	r2, #16
 80196aa:	2100      	movs	r1, #0
 80196ac:	4628      	mov	r0, r5
 80196ae:	f003 f821 	bl	801c6f4 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_pad_top(parent, LV_PART_MAIN);
 80196b2:	b280      	uxth	r0, r0
 80196b4:	1a24      	subs	r4, r4, r0
 80196b6:	b2a4      	uxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 80196b8:	2232      	movs	r2, #50	@ 0x32
 80196ba:	2100      	movs	r1, #0
 80196bc:	4628      	mov	r0, r5
 80196be:	f003 f819 	bl	801c6f4 <lv_obj_get_style_prop>
        rel_y -= lv_obj_get_style_border_width(parent, LV_PART_MAIN);
 80196c2:	b280      	uxth	r0, r0
 80196c4:	1a20      	subs	r0, r4, r0
 80196c6:	b200      	sxth	r0, r0
}
 80196c8:	bd38      	pop	{r3, r4, r5, pc}
        rel_y = obj->coords.y1;
 80196ca:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 80196ce:	e7fb      	b.n	80196c8 <lv_obj_get_y+0x3e>

080196d0 <lv_obj_get_width>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 80196d0:	8b03      	ldrh	r3, [r0, #24]
 80196d2:	8a82      	ldrh	r2, [r0, #20]
 80196d4:	1a98      	subs	r0, r3, r2
 80196d6:	b280      	uxth	r0, r0
 80196d8:	3001      	adds	r0, #1
}
 80196da:	b200      	sxth	r0, r0
 80196dc:	4770      	bx	lr

080196de <lv_obj_get_height>:
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 80196de:	8b43      	ldrh	r3, [r0, #26]
 80196e0:	8ac2      	ldrh	r2, [r0, #22]
 80196e2:	1a98      	subs	r0, r3, r2
 80196e4:	b280      	uxth	r0, r0
 80196e6:	3001      	adds	r0, #1
}
 80196e8:	b200      	sxth	r0, r0
 80196ea:	4770      	bx	lr

080196ec <lv_obj_get_y2>:
{
 80196ec:	b538      	push	{r3, r4, r5, lr}
 80196ee:	4605      	mov	r5, r0
    return lv_obj_get_y(obj) + lv_obj_get_height(obj);
 80196f0:	f7ff ffcb 	bl	801968a <lv_obj_get_y>
 80196f4:	b284      	uxth	r4, r0
 80196f6:	4628      	mov	r0, r5
 80196f8:	f7ff fff1 	bl	80196de <lv_obj_get_height>
 80196fc:	fa14 f080 	uxtah	r0, r4, r0
}
 8019700:	b200      	sxth	r0, r0
 8019702:	bd38      	pop	{r3, r4, r5, pc}

08019704 <lv_obj_get_content_width>:
{
 8019704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019706:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019708:	2212      	movs	r2, #18
 801970a:	2100      	movs	r1, #0
 801970c:	f002 fff2 	bl	801c6f4 <lv_obj_get_style_prop>
 8019710:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019712:	2213      	movs	r2, #19
 8019714:	2100      	movs	r1, #0
 8019716:	4628      	mov	r0, r5
 8019718:	f002 ffec 	bl	801c6f4 <lv_obj_get_style_prop>
 801971c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801971e:	2232      	movs	r2, #50	@ 0x32
 8019720:	2100      	movs	r1, #0
 8019722:	4628      	mov	r0, r5
 8019724:	f002 ffe6 	bl	801c6f4 <lv_obj_get_style_prop>
 8019728:	4604      	mov	r4, r0
    return lv_obj_get_width(obj) - left - right - 2 * border_width;
 801972a:	4628      	mov	r0, r5
 801972c:	f7ff ffd0 	bl	80196d0 <lv_obj_get_width>
 8019730:	b283      	uxth	r3, r0
 8019732:	1bdb      	subs	r3, r3, r7
 8019734:	b29b      	uxth	r3, r3
 8019736:	1b9b      	subs	r3, r3, r6
 8019738:	b29b      	uxth	r3, r3
 801973a:	0064      	lsls	r4, r4, #1
 801973c:	b2a4      	uxth	r4, r4
 801973e:	1b18      	subs	r0, r3, r4
}
 8019740:	b200      	sxth	r0, r0
 8019742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019744 <lv_obj_get_content_height>:
{
 8019744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019746:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019748:	2210      	movs	r2, #16
 801974a:	2100      	movs	r1, #0
 801974c:	f002 ffd2 	bl	801c6f4 <lv_obj_get_style_prop>
 8019750:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019752:	2211      	movs	r2, #17
 8019754:	2100      	movs	r1, #0
 8019756:	4628      	mov	r0, r5
 8019758:	f002 ffcc 	bl	801c6f4 <lv_obj_get_style_prop>
 801975c:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801975e:	2232      	movs	r2, #50	@ 0x32
 8019760:	2100      	movs	r1, #0
 8019762:	4628      	mov	r0, r5
 8019764:	f002 ffc6 	bl	801c6f4 <lv_obj_get_style_prop>
 8019768:	4604      	mov	r4, r0
    return lv_obj_get_height(obj) - top - bottom - 2 * border_width;
 801976a:	4628      	mov	r0, r5
 801976c:	f7ff ffb7 	bl	80196de <lv_obj_get_height>
 8019770:	b283      	uxth	r3, r0
 8019772:	1bdb      	subs	r3, r3, r7
 8019774:	b29b      	uxth	r3, r3
 8019776:	1b9b      	subs	r3, r3, r6
 8019778:	b29b      	uxth	r3, r3
 801977a:	0064      	lsls	r4, r4, #1
 801977c:	b2a4      	uxth	r4, r4
 801977e:	1b18      	subs	r0, r3, r4
}
 8019780:	b200      	sxth	r0, r0
 8019782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019784 <lv_obj_get_content_coords>:
{
 8019784:	b570      	push	{r4, r5, r6, lr}
 8019786:	4606      	mov	r6, r0
 8019788:	460c      	mov	r4, r1
 801978a:	2232      	movs	r2, #50	@ 0x32
 801978c:	2100      	movs	r1, #0
 801978e:	f002 ffb1 	bl	801c6f4 <lv_obj_get_style_prop>
 8019792:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, area);
 8019794:	4621      	mov	r1, r4
 8019796:	4630      	mov	r0, r6
 8019798:	f7ff ff47 	bl	801962a <lv_obj_get_coords>
    lv_area_increase(area, -border_width, -border_width);
 801979c:	4269      	negs	r1, r5
 801979e:	b209      	sxth	r1, r1
 80197a0:	460a      	mov	r2, r1
 80197a2:	4620      	mov	r0, r4
 80197a4:	f7e8 f908 	bl	80019b8 <lv_area_increase>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80197a8:	2212      	movs	r2, #18
 80197aa:	2100      	movs	r1, #0
 80197ac:	4630      	mov	r0, r6
 80197ae:	f002 ffa1 	bl	801c6f4 <lv_obj_get_style_prop>
    area->x1 += lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80197b2:	8823      	ldrh	r3, [r4, #0]
 80197b4:	fa13 f080 	uxtah	r0, r3, r0
 80197b8:	8020      	strh	r0, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80197ba:	2213      	movs	r2, #19
 80197bc:	2100      	movs	r1, #0
 80197be:	4630      	mov	r0, r6
 80197c0:	f002 ff98 	bl	801c6f4 <lv_obj_get_style_prop>
    area->x2 -= lv_obj_get_style_pad_right(obj, LV_PART_MAIN);
 80197c4:	88a3      	ldrh	r3, [r4, #4]
 80197c6:	b280      	uxth	r0, r0
 80197c8:	1a1b      	subs	r3, r3, r0
 80197ca:	80a3      	strh	r3, [r4, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80197cc:	2210      	movs	r2, #16
 80197ce:	2100      	movs	r1, #0
 80197d0:	4630      	mov	r0, r6
 80197d2:	f002 ff8f 	bl	801c6f4 <lv_obj_get_style_prop>
    area->y1 += lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 80197d6:	8863      	ldrh	r3, [r4, #2]
 80197d8:	fa13 f080 	uxtah	r0, r3, r0
 80197dc:	8060      	strh	r0, [r4, #2]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80197de:	2211      	movs	r2, #17
 80197e0:	2100      	movs	r1, #0
 80197e2:	4630      	mov	r0, r6
 80197e4:	f002 ff86 	bl	801c6f4 <lv_obj_get_style_prop>
    area->y2 -= lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN);
 80197e8:	88e3      	ldrh	r3, [r4, #6]
 80197ea:	b280      	uxth	r0, r0
 80197ec:	1a1b      	subs	r3, r3, r0
 80197ee:	80e3      	strh	r3, [r4, #6]
}
 80197f0:	bd70      	pop	{r4, r5, r6, pc}

080197f2 <lv_obj_get_self_width>:
{
 80197f2:	b500      	push	{lr}
 80197f4:	b083      	sub	sp, #12
    lv_point_t p = {0, LV_COORD_MIN};
 80197f6:	2300      	movs	r3, #0
 80197f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80197fc:	f24e 0301 	movw	r3, #57345	@ 0xe001
 8019800:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8019804:	aa01      	add	r2, sp, #4
 8019806:	212c      	movs	r1, #44	@ 0x2c
 8019808:	f7f7 fa5e 	bl	8010cc8 <lv_event_send>
}
 801980c:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 8019810:	b003      	add	sp, #12
 8019812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08019818 <calc_content_width>:
{
 8019818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801981c:	b083      	sub	sp, #12
 801981e:	4605      	mov	r5, r0
    lv_obj_scroll_to_x(obj, 0, LV_ANIM_OFF);
 8019820:	2200      	movs	r2, #0
 8019822:	4611      	mov	r1, r2
 8019824:	f001 fd9c 	bl	801b360 <lv_obj_scroll_to_x>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019828:	2232      	movs	r2, #50	@ 0x32
 801982a:	2100      	movs	r1, #0
 801982c:	4628      	mov	r0, r5
 801982e:	f002 ff61 	bl	801c6f4 <lv_obj_get_style_prop>
 8019832:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8019834:	2213      	movs	r2, #19
 8019836:	2100      	movs	r1, #0
 8019838:	4628      	mov	r0, r5
 801983a:	f002 ff5b 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_right = lv_obj_get_style_pad_right(obj, LV_PART_MAIN) + border_width;
 801983e:	b2a4      	uxth	r4, r4
 8019840:	fa14 f080 	uxtah	r0, r4, r0
 8019844:	fa1f fa80 	uxth.w	sl, r0
 8019848:	b203      	sxth	r3, r0
 801984a:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801984c:	2212      	movs	r2, #18
 801984e:	2100      	movs	r1, #0
 8019850:	4628      	mov	r0, r5
 8019852:	f002 ff4f 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_left = lv_obj_get_style_pad_left(obj, LV_PART_MAIN) + border_width;
 8019856:	fa14 f080 	uxtah	r0, r4, r0
 801985a:	fa1f fb80 	uxth.w	fp, r0
 801985e:	b203      	sxth	r3, r0
 8019860:	9300      	str	r3, [sp, #0]
    self_w = lv_obj_get_self_width(obj) +  pad_left + pad_right;
 8019862:	4628      	mov	r0, r5
 8019864:	f7ff ffc5 	bl	80197f2 <lv_obj_get_self_width>
 8019868:	fa1b f880 	uxtah	r8, fp, r0
 801986c:	fa1a f888 	uxtah	r8, sl, r8
 8019870:	fa0f f888 	sxth.w	r8, r8
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8019874:	4628      	mov	r0, r5
 8019876:	f003 fcbc 	bl	801d1f2 <lv_obj_get_child_cnt>
 801987a:	4607      	mov	r7, r0
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801987c:	2216      	movs	r2, #22
 801987e:	2100      	movs	r1, #0
 8019880:	4628      	mov	r0, r5
 8019882:	f002 ff37 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8019886:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 8019888:	2801      	cmp	r0, #1
 801988a:	d051      	beq.n	8019930 <calc_content_width+0x118>
        for(i = 0; i < child_cnt; i++) {
 801988c:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 801988e:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 8019a04 <calc_content_width+0x1ec>
 8019892:	e071      	b.n	8019978 <calc_content_width+0x160>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8019894:	2209      	movs	r2, #9
 8019896:	2100      	movs	r1, #0
 8019898:	4630      	mov	r0, r6
 801989a:	f002 ff2b 	bl	801c6f4 <lv_obj_get_style_prop>
                switch(align) {
 801989e:	b2c0      	uxtb	r0, r0
 80198a0:	2808      	cmp	r0, #8
 80198a2:	d82e      	bhi.n	8019902 <calc_content_width+0xea>
 80198a4:	f240 1349 	movw	r3, #329	@ 0x149
 80198a8:	40c3      	lsrs	r3, r0
 80198aa:	f013 0f01 	tst.w	r3, #1
 80198ae:	d028      	beq.n	8019902 <calc_content_width+0xea>
                        child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80198b0:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 80198b4:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80198b8:	1a9b      	subs	r3, r3, r2
 80198ba:	3301      	adds	r3, #1
 80198bc:	454b      	cmp	r3, r9
 80198be:	bfb8      	it	lt
 80198c0:	464b      	movlt	r3, r9
 80198c2:	fa0f f983 	sxth.w	r9, r3
        for(i = 0; i < child_cnt; i++) {
 80198c6:	3401      	adds	r4, #1
 80198c8:	42bc      	cmp	r4, r7
 80198ca:	d235      	bcs.n	8019938 <calc_content_width+0x120>
            lv_obj_t * child = obj->spec_attr->children[i];
 80198cc:	68ab      	ldr	r3, [r5, #8]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 80198d4:	494a      	ldr	r1, [pc, #296]	@ (8019a00 <calc_content_width+0x1e8>)
 80198d6:	4630      	mov	r0, r6
 80198d8:	f7fe fddf 	bl	801849a <lv_obj_has_flag_any>
 80198dc:	2800      	cmp	r0, #0
 80198de:	d1f2      	bne.n	80198c6 <calc_content_width+0xae>
            if(!lv_obj_is_layout_positioned(child)) {
 80198e0:	4630      	mov	r0, r6
 80198e2:	f7ff fe39 	bl	8019558 <lv_obj_is_layout_positioned>
 80198e6:	2800      	cmp	r0, #0
 80198e8:	d0d4      	beq.n	8019894 <calc_content_width+0x7c>
                child_res = LV_MAX(child_res, obj->coords.x2 - child->coords.x1 + 1);
 80198ea:	f9b5 3018 	ldrsh.w	r3, [r5, #24]
 80198ee:	f9b6 2014 	ldrsh.w	r2, [r6, #20]
 80198f2:	1a9b      	subs	r3, r3, r2
 80198f4:	3301      	adds	r3, #1
 80198f6:	454b      	cmp	r3, r9
 80198f8:	bfb8      	it	lt
 80198fa:	464b      	movlt	r3, r9
 80198fc:	fa0f f983 	sxth.w	r9, r3
 8019900:	e7e1      	b.n	80198c6 <calc_content_width+0xae>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 8019902:	2207      	movs	r2, #7
 8019904:	2100      	movs	r1, #0
 8019906:	4630      	mov	r0, r6
 8019908:	f002 fef4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801990c:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_x(child, 0) == 0) {
 801990e:	2800      	cmp	r0, #0
 8019910:	d1d9      	bne.n	80198c6 <calc_content_width+0xae>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8019912:	8b33      	ldrh	r3, [r6, #24]
 8019914:	8ab2      	ldrh	r2, [r6, #20]
 8019916:	1a9b      	subs	r3, r3, r2
 8019918:	b29b      	uxth	r3, r3
 801991a:	3301      	adds	r3, #1
 801991c:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_right);
 801991e:	9901      	ldr	r1, [sp, #4]
 8019920:	fa01 f383 	sxtah	r3, r1, r3
 8019924:	4599      	cmp	r9, r3
 8019926:	dcce      	bgt.n	80198c6 <calc_content_width+0xae>
 8019928:	4452      	add	r2, sl
 801992a:	fa0f f982 	sxth.w	r9, r2
 801992e:	e7ca      	b.n	80198c6 <calc_content_width+0xae>
        for(i = 0; i < child_cnt; i++) {
 8019930:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8019932:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8019a04 <calc_content_width+0x1ec>
 8019936:	e7c7      	b.n	80198c8 <calc_content_width+0xb0>
        if(child_res != LV_COORD_MIN) {
 8019938:	4b32      	ldr	r3, [pc, #200]	@ (8019a04 <calc_content_width+0x1ec>)
 801993a:	4599      	cmp	r9, r3
 801993c:	d05c      	beq.n	80199f8 <calc_content_width+0x1e0>
            child_res += pad_left;
 801993e:	44cb      	add	fp, r9
 8019940:	fa0f fa8b 	sxth.w	sl, fp
 8019944:	e052      	b.n	80199ec <calc_content_width+0x1d4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8019946:	2209      	movs	r2, #9
 8019948:	2100      	movs	r1, #0
 801994a:	4630      	mov	r0, r6
 801994c:	f002 fed2 	bl	801c6f4 <lv_obj_get_style_prop>
                switch(align) {
 8019950:	b2c0      	uxtb	r0, r0
 8019952:	2807      	cmp	r0, #7
 8019954:	d82d      	bhi.n	80199b2 <calc_content_width+0x19a>
 8019956:	2393      	movs	r3, #147	@ 0x93
 8019958:	40c3      	lsrs	r3, r0
 801995a:	f013 0f01 	tst.w	r3, #1
 801995e:	d028      	beq.n	80199b2 <calc_content_width+0x19a>
                        child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 8019960:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 8019964:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 8019968:	1a9b      	subs	r3, r3, r2
 801996a:	3301      	adds	r3, #1
 801996c:	454b      	cmp	r3, r9
 801996e:	bfb8      	it	lt
 8019970:	464b      	movlt	r3, r9
 8019972:	fa0f f983 	sxth.w	r9, r3
        for(i = 0; i < child_cnt; i++) {
 8019976:	3401      	adds	r4, #1
 8019978:	42bc      	cmp	r4, r7
 801997a:	d231      	bcs.n	80199e0 <calc_content_width+0x1c8>
            lv_obj_t * child = obj->spec_attr->children[i];
 801997c:	68ab      	ldr	r3, [r5, #8]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
            if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8019984:	491e      	ldr	r1, [pc, #120]	@ (8019a00 <calc_content_width+0x1e8>)
 8019986:	4630      	mov	r0, r6
 8019988:	f7fe fd87 	bl	801849a <lv_obj_has_flag_any>
 801998c:	2800      	cmp	r0, #0
 801998e:	d1f2      	bne.n	8019976 <calc_content_width+0x15e>
            if(!lv_obj_is_layout_positioned(child)) {
 8019990:	4630      	mov	r0, r6
 8019992:	f7ff fde1 	bl	8019558 <lv_obj_is_layout_positioned>
 8019996:	2800      	cmp	r0, #0
 8019998:	d0d5      	beq.n	8019946 <calc_content_width+0x12e>
                child_res = LV_MAX(child_res, child->coords.x2 - obj->coords.x1 + 1);
 801999a:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 801999e:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
 80199a2:	1a9b      	subs	r3, r3, r2
 80199a4:	3301      	adds	r3, #1
 80199a6:	454b      	cmp	r3, r9
 80199a8:	bfb8      	it	lt
 80199aa:	464b      	movlt	r3, r9
 80199ac:	fa0f f983 	sxth.w	r9, r3
 80199b0:	e7e1      	b.n	8019976 <calc_content_width+0x15e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 80199b2:	2208      	movs	r2, #8
 80199b4:	2100      	movs	r1, #0
 80199b6:	4630      	mov	r0, r6
 80199b8:	f002 fe9c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80199bc:	b200      	sxth	r0, r0
                        if(lv_obj_get_style_y(child, 0) == 0) {
 80199be:	2800      	cmp	r0, #0
 80199c0:	d1d9      	bne.n	8019976 <calc_content_width+0x15e>
 80199c2:	8b33      	ldrh	r3, [r6, #24]
 80199c4:	8ab2      	ldrh	r2, [r6, #20]
 80199c6:	1a9b      	subs	r3, r3, r2
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	3301      	adds	r3, #1
 80199cc:	b29a      	uxth	r2, r3
                            child_res = LV_MAX(child_res, lv_area_get_width(&child->coords) + pad_left);
 80199ce:	9900      	ldr	r1, [sp, #0]
 80199d0:	fa01 f383 	sxtah	r3, r1, r3
 80199d4:	4599      	cmp	r9, r3
 80199d6:	dcce      	bgt.n	8019976 <calc_content_width+0x15e>
 80199d8:	445a      	add	r2, fp
 80199da:	fa0f f982 	sxth.w	r9, r2
 80199de:	e7ca      	b.n	8019976 <calc_content_width+0x15e>
        if(child_res != LV_COORD_MIN) {
 80199e0:	4b08      	ldr	r3, [pc, #32]	@ (8019a04 <calc_content_width+0x1ec>)
 80199e2:	4599      	cmp	r9, r3
 80199e4:	d008      	beq.n	80199f8 <calc_content_width+0x1e0>
            child_res += pad_right;
 80199e6:	44ca      	add	sl, r9
 80199e8:	fa0f fa8a 	sxth.w	sl, sl
    if(child_res == LV_COORD_MIN) return self_w;
 80199ec:	4b05      	ldr	r3, [pc, #20]	@ (8019a04 <calc_content_width+0x1ec>)
 80199ee:	459a      	cmp	sl, r3
 80199f0:	d002      	beq.n	80199f8 <calc_content_width+0x1e0>
    else return LV_MAX(child_res, self_w);
 80199f2:	45d0      	cmp	r8, sl
 80199f4:	bfb8      	it	lt
 80199f6:	46d0      	movlt	r8, sl
}
 80199f8:	4640      	mov	r0, r8
 80199fa:	b003      	add	sp, #12
 80199fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a00:	00040001 	.word	0x00040001
 8019a04:	ffffe001 	.word	0xffffe001

08019a08 <lv_obj_get_self_height>:
{
 8019a08:	b500      	push	{lr}
 8019a0a:	b083      	sub	sp, #12
    lv_point_t p = {LV_COORD_MIN, 0};
 8019a0c:	f24e 0301 	movw	r3, #57345	@ 0xe001
 8019a10:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019a14:	2300      	movs	r3, #0
 8019a16:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_event_send((lv_obj_t *)obj, LV_EVENT_GET_SELF_SIZE, &p);
 8019a1a:	aa01      	add	r2, sp, #4
 8019a1c:	212c      	movs	r1, #44	@ 0x2c
 8019a1e:	f7f7 f953 	bl	8010cc8 <lv_event_send>
}
 8019a22:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
 8019a26:	b003      	add	sp, #12
 8019a28:	f85d fb04 	ldr.w	pc, [sp], #4

08019a2c <calc_content_height>:
{
 8019a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a30:	b083      	sub	sp, #12
 8019a32:	4606      	mov	r6, r0
    lv_obj_scroll_to_y(obj, 0, LV_ANIM_OFF);
 8019a34:	2200      	movs	r2, #0
 8019a36:	4611      	mov	r1, r2
 8019a38:	f001 fca6 	bl	801b388 <lv_obj_scroll_to_y>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019a3c:	2232      	movs	r2, #50	@ 0x32
 8019a3e:	2100      	movs	r1, #0
 8019a40:	4630      	mov	r0, r6
 8019a42:	f002 fe57 	bl	801c6f4 <lv_obj_get_style_prop>
 8019a46:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019a48:	2210      	movs	r2, #16
 8019a4a:	2100      	movs	r1, #0
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	f002 fe51 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_top = lv_obj_get_style_pad_top(obj, LV_PART_MAIN) + border_width;
 8019a52:	b2a4      	uxth	r4, r4
 8019a54:	fa14 f080 	uxtah	r0, r4, r0
 8019a58:	fa1f fb80 	uxth.w	fp, r0
 8019a5c:	b203      	sxth	r3, r0
 8019a5e:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8019a60:	2211      	movs	r2, #17
 8019a62:	2100      	movs	r1, #0
 8019a64:	4630      	mov	r0, r6
 8019a66:	f002 fe45 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pad_bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_MAIN) + border_width;
 8019a6a:	fa14 fa80 	uxtah	sl, r4, r0
 8019a6e:	fa1f fa8a 	uxth.w	sl, sl
    self_h = lv_obj_get_self_height(obj) + pad_top + pad_bottom;
 8019a72:	4630      	mov	r0, r6
 8019a74:	f7ff ffc8 	bl	8019a08 <lv_obj_get_self_height>
 8019a78:	fa1b f980 	uxtah	r9, fp, r0
 8019a7c:	fa1a f989 	uxtah	r9, sl, r9
 8019a80:	fa0f f989 	sxth.w	r9, r9
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8019a84:	4630      	mov	r0, r6
 8019a86:	f003 fbb4 	bl	801d1f2 <lv_obj_get_child_cnt>
 8019a8a:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 8019a8c:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 8019a8e:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8019b44 <calc_content_height+0x118>
    for(i = 0; i < child_cnt; i++) {
 8019a92:	e013      	b.n	8019abc <calc_content_height+0x90>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 8019a94:	2209      	movs	r2, #9
 8019a96:	2100      	movs	r1, #0
 8019a98:	4628      	mov	r0, r5
 8019a9a:	f002 fe2b 	bl	801c6f4 <lv_obj_get_style_prop>
            switch(align) {
 8019a9e:	b2c0      	uxtb	r0, r0
 8019aa0:	2803      	cmp	r0, #3
 8019aa2:	d828      	bhi.n	8019af6 <calc_content_height+0xca>
                    child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8019aa4:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8019aa8:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8019aac:	1a9b      	subs	r3, r3, r2
 8019aae:	3301      	adds	r3, #1
 8019ab0:	4543      	cmp	r3, r8
 8019ab2:	bfb8      	it	lt
 8019ab4:	4643      	movlt	r3, r8
 8019ab6:	fa0f f883 	sxth.w	r8, r3
    for(i = 0; i < child_cnt; i++) {
 8019aba:	3401      	adds	r4, #1
 8019abc:	42bc      	cmp	r4, r7
 8019abe:	d231      	bcs.n	8019b24 <calc_content_height+0xf8>
        lv_obj_t * child = obj->spec_attr->children[i];
 8019ac0:	68b3      	ldr	r3, [r6, #8]
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 8019ac8:	491d      	ldr	r1, [pc, #116]	@ (8019b40 <calc_content_height+0x114>)
 8019aca:	4628      	mov	r0, r5
 8019acc:	f7fe fce5 	bl	801849a <lv_obj_has_flag_any>
 8019ad0:	2800      	cmp	r0, #0
 8019ad2:	d1f2      	bne.n	8019aba <calc_content_height+0x8e>
        if(!lv_obj_is_layout_positioned(child)) {
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	f7ff fd3f 	bl	8019558 <lv_obj_is_layout_positioned>
 8019ada:	2800      	cmp	r0, #0
 8019adc:	d0da      	beq.n	8019a94 <calc_content_height+0x68>
            child_res = LV_MAX(child_res, child->coords.y2 - obj->coords.y1 + 1);
 8019ade:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 8019ae2:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 8019ae6:	1a9b      	subs	r3, r3, r2
 8019ae8:	3301      	adds	r3, #1
 8019aea:	4543      	cmp	r3, r8
 8019aec:	bfb8      	it	lt
 8019aee:	4643      	movlt	r3, r8
 8019af0:	fa0f f883 	sxth.w	r8, r3
 8019af4:	e7e1      	b.n	8019aba <calc_content_height+0x8e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 8019af6:	2208      	movs	r2, #8
 8019af8:	2100      	movs	r1, #0
 8019afa:	4628      	mov	r0, r5
 8019afc:	f002 fdfa 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019b00:	b200      	sxth	r0, r0
                    if(lv_obj_get_style_y(child, 0) == 0) {
 8019b02:	2800      	cmp	r0, #0
 8019b04:	d1d9      	bne.n	8019aba <calc_content_height+0x8e>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 8019b06:	8b6b      	ldrh	r3, [r5, #26]
 8019b08:	8aea      	ldrh	r2, [r5, #22]
 8019b0a:	1a9b      	subs	r3, r3, r2
 8019b0c:	b29b      	uxth	r3, r3
 8019b0e:	3301      	adds	r3, #1
 8019b10:	b29a      	uxth	r2, r3
                        child_res = LV_MAX(child_res, lv_area_get_height(&child->coords) + pad_top);
 8019b12:	9901      	ldr	r1, [sp, #4]
 8019b14:	fa01 f383 	sxtah	r3, r1, r3
 8019b18:	4598      	cmp	r8, r3
 8019b1a:	dcce      	bgt.n	8019aba <calc_content_height+0x8e>
 8019b1c:	445a      	add	r2, fp
 8019b1e:	fa0f f882 	sxth.w	r8, r2
 8019b22:	e7ca      	b.n	8019aba <calc_content_height+0x8e>
    if(child_res != LV_COORD_MIN) {
 8019b24:	4b07      	ldr	r3, [pc, #28]	@ (8019b44 <calc_content_height+0x118>)
 8019b26:	4598      	cmp	r8, r3
 8019b28:	d005      	beq.n	8019b36 <calc_content_height+0x10a>
        child_res += pad_bottom;
 8019b2a:	44c2      	add	sl, r8
 8019b2c:	fa0f fa8a 	sxth.w	sl, sl
        return LV_MAX(child_res, self_h);
 8019b30:	45d1      	cmp	r9, sl
 8019b32:	bfb8      	it	lt
 8019b34:	46d1      	movlt	r9, sl
}
 8019b36:	4648      	mov	r0, r9
 8019b38:	b003      	add	sp, #12
 8019b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b3e:	bf00      	nop
 8019b40:	00040001 	.word	0x00040001
 8019b44:	ffffe001 	.word	0xffffe001

08019b48 <lv_obj_refresh_self_size>:
{
 8019b48:	b538      	push	{r3, r4, r5, lr}
 8019b4a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 8019b4c:	2201      	movs	r2, #1
 8019b4e:	2100      	movs	r1, #0
 8019b50:	f002 fdd0 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8019b54:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 8019b56:	2204      	movs	r2, #4
 8019b58:	2100      	movs	r1, #0
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	f002 fdca 	bl	801c6f4 <lv_obj_get_style_prop>
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8019b60:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 8019b64:	429d      	cmp	r5, r3
 8019b66:	d002      	beq.n	8019b6e <lv_obj_refresh_self_size+0x26>
 8019b68:	b200      	sxth	r0, r0
 8019b6a:	4298      	cmp	r0, r3
 8019b6c:	d104      	bne.n	8019b78 <lv_obj_refresh_self_size+0x30>
    lv_obj_mark_layout_as_dirty(obj);
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f7ff fd0c 	bl	801958c <lv_obj_mark_layout_as_dirty>
    return true;
 8019b74:	2001      	movs	r0, #1
}
 8019b76:	bd38      	pop	{r3, r4, r5, pc}
    if(w_set != LV_SIZE_CONTENT && h_set != LV_SIZE_CONTENT) return false;
 8019b78:	2000      	movs	r0, #0
 8019b7a:	e7fc      	b.n	8019b76 <lv_obj_refresh_self_size+0x2e>

08019b7c <lv_obj_move_children_by>:
{
 8019b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b80:	4680      	mov	r8, r0
 8019b82:	468a      	mov	sl, r1
 8019b84:	4691      	mov	r9, r2
 8019b86:	461f      	mov	r7, r3
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 8019b88:	f003 fb33 	bl	801d1f2 <lv_obj_get_child_cnt>
 8019b8c:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 8019b8e:	2400      	movs	r4, #0
 8019b90:	e000      	b.n	8019b94 <lv_obj_move_children_by+0x18>
 8019b92:	3401      	adds	r4, #1
 8019b94:	42b4      	cmp	r4, r6
 8019b96:	d223      	bcs.n	8019be0 <lv_obj_move_children_by+0x64>
        lv_obj_t * child = obj->spec_attr->children[i];
 8019b98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019b9c:	681d      	ldr	r5, [r3, #0]
 8019b9e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
        if(ignore_floating && lv_obj_has_flag(child, LV_OBJ_FLAG_FLOATING)) continue;
 8019ba2:	b137      	cbz	r7, 8019bb2 <lv_obj_move_children_by+0x36>
 8019ba4:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8019ba8:	4628      	mov	r0, r5
 8019baa:	f7fe fc70 	bl	801848e <lv_obj_has_flag>
 8019bae:	2800      	cmp	r0, #0
 8019bb0:	d1ef      	bne.n	8019b92 <lv_obj_move_children_by+0x16>
        child->coords.x1 += x_diff;
 8019bb2:	8aab      	ldrh	r3, [r5, #20]
 8019bb4:	fa1f f28a 	uxth.w	r2, sl
 8019bb8:	4413      	add	r3, r2
 8019bba:	82ab      	strh	r3, [r5, #20]
        child->coords.y1 += y_diff;
 8019bbc:	8ae9      	ldrh	r1, [r5, #22]
 8019bbe:	fa1f f389 	uxth.w	r3, r9
 8019bc2:	4419      	add	r1, r3
 8019bc4:	82e9      	strh	r1, [r5, #22]
        child->coords.x2 += x_diff;
 8019bc6:	8b29      	ldrh	r1, [r5, #24]
 8019bc8:	440a      	add	r2, r1
 8019bca:	832a      	strh	r2, [r5, #24]
        child->coords.y2 += y_diff;
 8019bcc:	8b6a      	ldrh	r2, [r5, #26]
 8019bce:	4413      	add	r3, r2
 8019bd0:	836b      	strh	r3, [r5, #26]
        lv_obj_move_children_by(child, x_diff, y_diff, false);
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	464a      	mov	r2, r9
 8019bd6:	4651      	mov	r1, sl
 8019bd8:	4628      	mov	r0, r5
 8019bda:	f7ff ffcf 	bl	8019b7c <lv_obj_move_children_by>
 8019bde:	e7d8      	b.n	8019b92 <lv_obj_move_children_by+0x16>
}
 8019be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019be4 <lv_obj_transform_point>:
    if(obj) {
 8019be4:	b380      	cbz	r0, 8019c48 <lv_obj_transform_point+0x64>
{
 8019be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bea:	460f      	mov	r7, r1
 8019bec:	4615      	mov	r5, r2
 8019bee:	461c      	mov	r4, r3
 8019bf0:	4680      	mov	r8, r0
        lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 8019bf2:	f7ff fbad 	bl	8019350 <_lv_obj_get_layer_type>
 8019bf6:	4606      	mov	r6, r0
        if(inv) {
 8019bf8:	b19c      	cbz	r4, 8019c22 <lv_obj_transform_point+0x3e>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8019bfa:	b91d      	cbnz	r5, 8019c04 <lv_obj_transform_point+0x20>
            if(do_tranf) transform_point(obj, p, inv);
 8019bfc:	2e02      	cmp	r6, #2
 8019bfe:	d00a      	beq.n	8019c16 <lv_obj_transform_point+0x32>
}
 8019c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8019c04:	4640      	mov	r0, r8
 8019c06:	f003 fab5 	bl	801d174 <lv_obj_get_parent>
 8019c0a:	4623      	mov	r3, r4
 8019c0c:	462a      	mov	r2, r5
 8019c0e:	4639      	mov	r1, r7
 8019c10:	f7ff ffe8 	bl	8019be4 <lv_obj_transform_point>
 8019c14:	e7f2      	b.n	8019bfc <lv_obj_transform_point+0x18>
            if(do_tranf) transform_point(obj, p, inv);
 8019c16:	4622      	mov	r2, r4
 8019c18:	4639      	mov	r1, r7
 8019c1a:	4640      	mov	r0, r8
 8019c1c:	f7ff fba0 	bl	8019360 <transform_point>
 8019c20:	e7ee      	b.n	8019c00 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8019c22:	2802      	cmp	r0, #2
 8019c24:	d00a      	beq.n	8019c3c <lv_obj_transform_point+0x58>
            if(recursive) lv_obj_transform_point(lv_obj_get_parent(obj), p, recursive, inv);
 8019c26:	2d00      	cmp	r5, #0
 8019c28:	d0ea      	beq.n	8019c00 <lv_obj_transform_point+0x1c>
 8019c2a:	4640      	mov	r0, r8
 8019c2c:	f003 faa2 	bl	801d174 <lv_obj_get_parent>
 8019c30:	4623      	mov	r3, r4
 8019c32:	462a      	mov	r2, r5
 8019c34:	4639      	mov	r1, r7
 8019c36:	f7ff ffd5 	bl	8019be4 <lv_obj_transform_point>
}
 8019c3a:	e7e1      	b.n	8019c00 <lv_obj_transform_point+0x1c>
            if(do_tranf) transform_point(obj, p, inv);
 8019c3c:	4622      	mov	r2, r4
 8019c3e:	4639      	mov	r1, r7
 8019c40:	4640      	mov	r0, r8
 8019c42:	f7ff fb8d 	bl	8019360 <transform_point>
 8019c46:	e7ee      	b.n	8019c26 <lv_obj_transform_point+0x42>
 8019c48:	4770      	bx	lr

08019c4a <lv_obj_get_transformed_area>:
{
 8019c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c4c:	b085      	sub	sp, #20
 8019c4e:	4605      	mov	r5, r0
 8019c50:	460c      	mov	r4, r1
 8019c52:	4616      	mov	r6, r2
 8019c54:	461f      	mov	r7, r3
        {area->x1, area->y1},
 8019c56:	f9b1 1000 	ldrsh.w	r1, [r1]
    lv_point_t p[4] = {
 8019c5a:	f8ad 1000 	strh.w	r1, [sp]
        {area->x1, area->y1},
 8019c5e:	f9b4 e002 	ldrsh.w	lr, [r4, #2]
    lv_point_t p[4] = {
 8019c62:	f8ad e002 	strh.w	lr, [sp, #2]
 8019c66:	f8ad 1004 	strh.w	r1, [sp, #4]
        {area->x1, area->y2},
 8019c6a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
    lv_point_t p[4] = {
 8019c6e:	f8ad 1006 	strh.w	r1, [sp, #6]
        {area->x2, area->y1},
 8019c72:	f9b4 c004 	ldrsh.w	ip, [r4, #4]
    lv_point_t p[4] = {
 8019c76:	f8ad c008 	strh.w	ip, [sp, #8]
 8019c7a:	f8ad e00a 	strh.w	lr, [sp, #10]
 8019c7e:	f8ad c00c 	strh.w	ip, [sp, #12]
 8019c82:	f8ad 100e 	strh.w	r1, [sp, #14]
    lv_obj_transform_point(obj, &p[0], recursive, inv);
 8019c86:	4669      	mov	r1, sp
 8019c88:	f7ff ffac 	bl	8019be4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[1], recursive, inv);
 8019c8c:	463b      	mov	r3, r7
 8019c8e:	4632      	mov	r2, r6
 8019c90:	a901      	add	r1, sp, #4
 8019c92:	4628      	mov	r0, r5
 8019c94:	f7ff ffa6 	bl	8019be4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[2], recursive, inv);
 8019c98:	463b      	mov	r3, r7
 8019c9a:	4632      	mov	r2, r6
 8019c9c:	a902      	add	r1, sp, #8
 8019c9e:	4628      	mov	r0, r5
 8019ca0:	f7ff ffa0 	bl	8019be4 <lv_obj_transform_point>
    lv_obj_transform_point(obj, &p[3], recursive, inv);
 8019ca4:	463b      	mov	r3, r7
 8019ca6:	4632      	mov	r2, r6
 8019ca8:	a903      	add	r1, sp, #12
 8019caa:	4628      	mov	r0, r5
 8019cac:	f7ff ff9a 	bl	8019be4 <lv_obj_transform_point>
    area->x1 = LV_MIN4(p[0].x, p[1].x, p[2].x, p[3].x);
 8019cb0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019cb4:	f9bd 5008 	ldrsh.w	r5, [sp, #8]
 8019cb8:	4619      	mov	r1, r3
 8019cba:	42ab      	cmp	r3, r5
 8019cbc:	bfa8      	it	ge
 8019cbe:	4629      	movge	r1, r5
 8019cc0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019cc4:	f9bd 0000 	ldrsh.w	r0, [sp]
 8019cc8:	4616      	mov	r6, r2
 8019cca:	4282      	cmp	r2, r0
 8019ccc:	bfa8      	it	ge
 8019cce:	4606      	movge	r6, r0
 8019cd0:	42b1      	cmp	r1, r6
 8019cd2:	bfa8      	it	ge
 8019cd4:	4631      	movge	r1, r6
 8019cd6:	8021      	strh	r1, [r4, #0]
    area->x2 = LV_MAX4(p[0].x, p[1].x, p[2].x, p[3].x);
 8019cd8:	42ab      	cmp	r3, r5
 8019cda:	bfb8      	it	lt
 8019cdc:	462b      	movlt	r3, r5
 8019cde:	4282      	cmp	r2, r0
 8019ce0:	bfb8      	it	lt
 8019ce2:	4602      	movlt	r2, r0
 8019ce4:	4293      	cmp	r3, r2
 8019ce6:	bfb8      	it	lt
 8019ce8:	4613      	movlt	r3, r2
 8019cea:	80a3      	strh	r3, [r4, #4]
    area->y1 = LV_MIN4(p[0].y, p[1].y, p[2].y, p[3].y);
 8019cec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019cf0:	f9bd 500a 	ldrsh.w	r5, [sp, #10]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	42ab      	cmp	r3, r5
 8019cf8:	bfa8      	it	ge
 8019cfa:	4629      	movge	r1, r5
 8019cfc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019d00:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8019d04:	4616      	mov	r6, r2
 8019d06:	4282      	cmp	r2, r0
 8019d08:	bfa8      	it	ge
 8019d0a:	4606      	movge	r6, r0
 8019d0c:	42b1      	cmp	r1, r6
 8019d0e:	bfa8      	it	ge
 8019d10:	4631      	movge	r1, r6
 8019d12:	8061      	strh	r1, [r4, #2]
    area->y2 = LV_MAX4(p[0].y, p[1].y, p[2].y, p[3].y);
 8019d14:	42ab      	cmp	r3, r5
 8019d16:	bfb8      	it	lt
 8019d18:	462b      	movlt	r3, r5
 8019d1a:	4282      	cmp	r2, r0
 8019d1c:	bfb8      	it	lt
 8019d1e:	4602      	movlt	r2, r0
 8019d20:	4293      	cmp	r3, r2
 8019d22:	bfb8      	it	lt
 8019d24:	4613      	movlt	r3, r2
 8019d26:	80e3      	strh	r3, [r4, #6]
    lv_area_increase(area, 5, 5);
 8019d28:	2205      	movs	r2, #5
 8019d2a:	4611      	mov	r1, r2
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	f7e7 fe43 	bl	80019b8 <lv_area_increase>
}
 8019d32:	b005      	add	sp, #20
 8019d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019d36 <lv_obj_area_is_visible>:
{
 8019d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	4604      	mov	r4, r0
 8019d3e:	460e      	mov	r6, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return false;
 8019d40:	2101      	movs	r1, #1
 8019d42:	f7fe fba4 	bl	801848e <lv_obj_has_flag>
 8019d46:	b120      	cbz	r0, 8019d52 <lv_obj_area_is_visible+0x1c>
 8019d48:	2700      	movs	r7, #0
}
 8019d4a:	4638      	mov	r0, r7
 8019d4c:	b002      	add	sp, #8
 8019d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d52:	4607      	mov	r7, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8019d54:	4620      	mov	r0, r4
 8019d56:	f003 fa11 	bl	801d17c <lv_obj_get_screen>
 8019d5a:	4605      	mov	r5, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8019d5c:	f003 fa16 	bl	801d18c <lv_obj_get_disp>
 8019d60:	4680      	mov	r8, r0
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8019d62:	f7ed fc5b 	bl	800761c <lv_disp_get_scr_act>
 8019d66:	4285      	cmp	r5, r0
 8019d68:	d00e      	beq.n	8019d88 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8019d6a:	4640      	mov	r0, r8
 8019d6c:	f7ed fc61 	bl	8007632 <lv_disp_get_scr_prev>
    if(obj_scr != lv_disp_get_scr_act(disp) &&
 8019d70:	4285      	cmp	r5, r0
 8019d72:	d009      	beq.n	8019d88 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8019d74:	4640      	mov	r0, r8
 8019d76:	f7ed fc67 	bl	8007648 <lv_disp_get_layer_top>
       obj_scr != lv_disp_get_scr_prev(disp) &&
 8019d7a:	4285      	cmp	r5, r0
 8019d7c:	d004      	beq.n	8019d88 <lv_obj_area_is_visible+0x52>
       obj_scr != lv_disp_get_layer_sys(disp)) {
 8019d7e:	4640      	mov	r0, r8
 8019d80:	f7ed fc6d 	bl	800765e <lv_disp_get_layer_sys>
       obj_scr != lv_disp_get_layer_top(disp) &&
 8019d84:	4285      	cmp	r5, r0
 8019d86:	d1e0      	bne.n	8019d4a <lv_obj_area_is_visible+0x14>
    if(!lv_obj_has_flag_any(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8019d88:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8019d8c:	4620      	mov	r0, r4
 8019d8e:	f7fe fb84 	bl	801849a <lv_obj_has_flag_any>
 8019d92:	bb48      	cbnz	r0, 8019de8 <lv_obj_area_is_visible+0xb2>
        lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8019d94:	4620      	mov	r0, r4
 8019d96:	f7ff faa2 	bl	80192de <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8019d9a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8019d9e:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 8019da2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8019da6:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8019daa:	f9b4 5018 	ldrsh.w	r5, [r4, #24]
 8019dae:	f8ad 5004 	strh.w	r5, [sp, #4]
    dest->y2 = src->y2;
 8019db2:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8019db6:	f8ad 1006 	strh.w	r1, [sp, #6]
        obj_coords.x1 -= ext_size;
 8019dba:	b292      	uxth	r2, r2
 8019dbc:	b280      	uxth	r0, r0
 8019dbe:	1a12      	subs	r2, r2, r0
 8019dc0:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	1a1b      	subs	r3, r3, r0
 8019dc8:	f8ad 3002 	strh.w	r3, [sp, #2]
        obj_coords.x2 += ext_size;
 8019dcc:	fa10 f585 	uxtah	r5, r0, r5
 8019dd0:	f8ad 5004 	strh.w	r5, [sp, #4]
        obj_coords.y2 += ext_size;
 8019dd4:	fa10 f181 	uxtah	r1, r0, r1
 8019dd8:	f8ad 1006 	strh.w	r1, [sp, #6]
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8019ddc:	466a      	mov	r2, sp
 8019dde:	4631      	mov	r1, r6
 8019de0:	4630      	mov	r0, r6
 8019de2:	f7e7 fe07 	bl	80019f4 <_lv_area_intersect>
 8019de6:	b150      	cbz	r0, 8019dfe <lv_obj_area_is_visible+0xc8>
    lv_obj_get_transformed_area(obj, area, true, false);
 8019de8:	2300      	movs	r3, #0
 8019dea:	2201      	movs	r2, #1
 8019dec:	4631      	mov	r1, r6
 8019dee:	4620      	mov	r0, r4
 8019df0:	f7ff ff2b 	bl	8019c4a <lv_obj_get_transformed_area>
    lv_obj_t * par = lv_obj_get_parent(obj);
 8019df4:	4620      	mov	r0, r4
 8019df6:	f003 f9bd 	bl	801d174 <lv_obj_get_parent>
 8019dfa:	4604      	mov	r4, r0
    while(par != NULL) {
 8019dfc:	e005      	b.n	8019e0a <lv_obj_area_is_visible+0xd4>
        if(!_lv_area_intersect(area, area, &obj_coords)) return false;
 8019dfe:	4607      	mov	r7, r0
 8019e00:	e7a3      	b.n	8019d4a <lv_obj_area_is_visible+0x14>
        par = lv_obj_get_parent(par);
 8019e02:	4620      	mov	r0, r4
 8019e04:	f003 f9b6 	bl	801d174 <lv_obj_get_parent>
 8019e08:	4604      	mov	r4, r0
    while(par != NULL) {
 8019e0a:	b314      	cbz	r4, 8019e52 <lv_obj_area_is_visible+0x11c>
        if(lv_obj_has_flag(par, LV_OBJ_FLAG_HIDDEN)) return false;
 8019e0c:	2101      	movs	r1, #1
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f7fe fb3d 	bl	801848e <lv_obj_has_flag>
 8019e14:	2800      	cmp	r0, #0
 8019e16:	d198      	bne.n	8019d4a <lv_obj_area_is_visible+0x14>
        if(!lv_obj_has_flag_any(par, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 8019e18:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8019e1c:	4620      	mov	r0, r4
 8019e1e:	f7fe fb3c 	bl	801849a <lv_obj_has_flag_any>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d1ed      	bne.n	8019e02 <lv_obj_area_is_visible+0xcc>
            lv_area_t par_area = par->coords;
 8019e26:	466d      	mov	r5, sp
 8019e28:	f104 0314 	add.w	r3, r4, #20
 8019e2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e30:	e885 0003 	stmia.w	r5, {r0, r1}
            lv_obj_get_transformed_area(par, &par_area, true, false);
 8019e34:	2300      	movs	r3, #0
 8019e36:	2201      	movs	r2, #1
 8019e38:	4629      	mov	r1, r5
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f7ff ff05 	bl	8019c4a <lv_obj_get_transformed_area>
            if(!_lv_area_intersect(area, area, &par_area)) return false;
 8019e40:	462a      	mov	r2, r5
 8019e42:	4631      	mov	r1, r6
 8019e44:	4630      	mov	r0, r6
 8019e46:	f7e7 fdd5 	bl	80019f4 <_lv_area_intersect>
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	d1d9      	bne.n	8019e02 <lv_obj_area_is_visible+0xcc>
 8019e4e:	4607      	mov	r7, r0
 8019e50:	e77b      	b.n	8019d4a <lv_obj_area_is_visible+0x14>
    return true;
 8019e52:	2701      	movs	r7, #1
 8019e54:	e779      	b.n	8019d4a <lv_obj_area_is_visible+0x14>

08019e56 <lv_obj_invalidate_area>:
{
 8019e56:	b530      	push	{r4, r5, lr}
 8019e58:	b083      	sub	sp, #12
 8019e5a:	4605      	mov	r5, r0
 8019e5c:	460c      	mov	r4, r1
    lv_disp_t * disp   = lv_obj_get_disp(obj);
 8019e5e:	f003 f995 	bl	801d18c <lv_obj_get_disp>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 8019e62:	f7ed fc10 	bl	8007686 <lv_disp_is_invalidation_enabled>
 8019e66:	b908      	cbnz	r0, 8019e6c <lv_obj_invalidate_area+0x16>
}
 8019e68:	b003      	add	sp, #12
 8019e6a:	bd30      	pop	{r4, r5, pc}
    dest->x1 = src->x1;
 8019e6c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8019e70:	f8ad 3000 	strh.w	r3, [sp]
    dest->y1 = src->y1;
 8019e74:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8019e78:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8019e7c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019e80:	f8ad 3004 	strh.w	r3, [sp, #4]
    dest->y2 = src->y2;
 8019e84:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019e88:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!lv_obj_area_is_visible(obj, &area_tmp)) return;
 8019e8c:	4669      	mov	r1, sp
 8019e8e:	4628      	mov	r0, r5
 8019e90:	f7ff ff51 	bl	8019d36 <lv_obj_area_is_visible>
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d0e7      	beq.n	8019e68 <lv_obj_invalidate_area+0x12>
    _lv_inv_area(lv_obj_get_disp(obj),  &area_tmp);
 8019e98:	4628      	mov	r0, r5
 8019e9a:	f003 f977 	bl	801d18c <lv_obj_get_disp>
 8019e9e:	4669      	mov	r1, sp
 8019ea0:	f005 f868 	bl	801ef74 <_lv_inv_area>
 8019ea4:	e7e0      	b.n	8019e68 <lv_obj_invalidate_area+0x12>

08019ea6 <lv_obj_invalidate>:
{
 8019ea6:	b510      	push	{r4, lr}
 8019ea8:	b082      	sub	sp, #8
 8019eaa:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 8019eac:	f7ff fa17 	bl	80192de <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 8019eb0:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 8019eb4:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 8019eb8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8019ebc:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 8019ec0:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 8019ec4:	f8ad c004 	strh.w	ip, [sp, #4]
    dest->y2 = src->y2;
 8019ec8:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 8019ecc:	f8ad 1006 	strh.w	r1, [sp, #6]
    obj_coords.x1 -= ext_size;
 8019ed0:	b292      	uxth	r2, r2
 8019ed2:	b280      	uxth	r0, r0
 8019ed4:	1a12      	subs	r2, r2, r0
 8019ed6:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
 8019eda:	b29b      	uxth	r3, r3
 8019edc:	1a1b      	subs	r3, r3, r0
 8019ede:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
 8019ee2:	fa10 fc8c 	uxtah	ip, r0, ip
 8019ee6:	f8ad c004 	strh.w	ip, [sp, #4]
    obj_coords.y2 += ext_size;
 8019eea:	fa10 f181 	uxtah	r1, r0, r1
 8019eee:	f8ad 1006 	strh.w	r1, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
 8019ef2:	4669      	mov	r1, sp
 8019ef4:	4620      	mov	r0, r4
 8019ef6:	f7ff ffae 	bl	8019e56 <lv_obj_invalidate_area>
}
 8019efa:	b002      	add	sp, #8
 8019efc:	bd10      	pop	{r4, pc}

08019efe <lv_obj_move_to>:
{
 8019efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f02:	b087      	sub	sp, #28
 8019f04:	4604      	mov	r4, r0
 8019f06:	460d      	mov	r5, r1
 8019f08:	4616      	mov	r6, r2
    lv_obj_t * parent = obj->parent;
 8019f0a:	6847      	ldr	r7, [r0, #4]
    if(parent) {
 8019f0c:	b36f      	cbz	r7, 8019f6a <lv_obj_move_to+0x6c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8019f0e:	2212      	movs	r2, #18
 8019f10:	2100      	movs	r1, #0
 8019f12:	4638      	mov	r0, r7
 8019f14:	f002 fbee 	bl	801c6f4 <lv_obj_get_style_prop>
 8019f18:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 8019f1a:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8019f1e:	2210      	movs	r2, #16
 8019f20:	2100      	movs	r1, #0
 8019f22:	4638      	mov	r0, r7
 8019f24:	f002 fbe6 	bl	801c6f4 <lv_obj_get_style_prop>
 8019f28:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 8019f2a:	fa0f f880 	sxth.w	r8, r0
        if(lv_obj_has_flag(obj, LV_OBJ_FLAG_FLOATING)) {
 8019f2e:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 8019f32:	4620      	mov	r0, r4
 8019f34:	f7fe faab 	bl	801848e <lv_obj_has_flag>
 8019f38:	2800      	cmp	r0, #0
 8019f3a:	d03e      	beq.n	8019fba <lv_obj_move_to+0xbc>
            x += pad_left + parent->coords.x1;
 8019f3c:	8abb      	ldrh	r3, [r7, #20]
 8019f3e:	4453      	add	r3, sl
 8019f40:	fa15 f383 	uxtah	r3, r5, r3
 8019f44:	b21d      	sxth	r5, r3
            y += pad_top + parent->coords.y1;
 8019f46:	f8b7 8016 	ldrh.w	r8, [r7, #22]
 8019f4a:	44c8      	add	r8, r9
 8019f4c:	fa16 f888 	uxtah	r8, r6, r8
 8019f50:	fa0f f888 	sxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8019f54:	2232      	movs	r2, #50	@ 0x32
 8019f56:	2100      	movs	r1, #0
 8019f58:	4638      	mov	r0, r7
 8019f5a:	f002 fbcb 	bl	801c6f4 <lv_obj_get_style_prop>
        x += border_width;
 8019f5e:	b280      	uxth	r0, r0
 8019f60:	4405      	add	r5, r0
 8019f62:	b22d      	sxth	r5, r5
        y += border_width;
 8019f64:	eb00 0208 	add.w	r2, r0, r8
 8019f68:	b216      	sxth	r6, r2
    diff.x = x - obj->coords.x1;
 8019f6a:	8aa3      	ldrh	r3, [r4, #20]
 8019f6c:	1aed      	subs	r5, r5, r3
 8019f6e:	fa1f f885 	uxth.w	r8, r5
 8019f72:	b22d      	sxth	r5, r5
 8019f74:	f8ad 5014 	strh.w	r5, [sp, #20]
    diff.y = y - obj->coords.y1;
 8019f78:	8ae3      	ldrh	r3, [r4, #22]
 8019f7a:	1af2      	subs	r2, r6, r3
 8019f7c:	fa1f f982 	uxth.w	r9, r2
 8019f80:	b216      	sxth	r6, r2
 8019f82:	f8ad 6016 	strh.w	r6, [sp, #22]
    if(diff.x == 0 && diff.y == 0) return;
 8019f86:	b90d      	cbnz	r5, 8019f8c <lv_obj_move_to+0x8e>
 8019f88:	2e00      	cmp	r6, #0
 8019f8a:	d05a      	beq.n	801a042 <lv_obj_move_to+0x144>
    lv_obj_invalidate(obj);
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f7ff ff8a 	bl	8019ea6 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 8019f92:	a903      	add	r1, sp, #12
 8019f94:	4620      	mov	r0, r4
 8019f96:	f7ff fb48 	bl	801962a <lv_obj_get_coords>
    if(parent) {
 8019f9a:	b32f      	cbz	r7, 8019fe8 <lv_obj_move_to+0xea>
        lv_obj_get_content_coords(parent, &parent_fit_area);
 8019f9c:	a901      	add	r1, sp, #4
 8019f9e:	4638      	mov	r0, r7
 8019fa0:	f7ff fbf0 	bl	8019784 <lv_obj_get_content_coords>
        on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	a901      	add	r1, sp, #4
 8019fa8:	a803      	add	r0, sp, #12
 8019faa:	f7e7 fe57 	bl	8001c5c <_lv_area_is_in>
        if(!on1) lv_obj_scrollbar_invalidate(parent);
 8019fae:	4682      	mov	sl, r0
 8019fb0:	b9e0      	cbnz	r0, 8019fec <lv_obj_move_to+0xee>
 8019fb2:	4638      	mov	r0, r7
 8019fb4:	f001 ffdc 	bl	801bf70 <lv_obj_scrollbar_invalidate>
 8019fb8:	e018      	b.n	8019fec <lv_obj_move_to+0xee>
            x += pad_left + parent->coords.x1 - lv_obj_get_scroll_x(parent);
 8019fba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019fbe:	449b      	add	fp, r3
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	f000 ff11 	bl	801ade8 <lv_obj_get_scroll_x>
 8019fc6:	ebab 0b00 	sub.w	fp, fp, r0
 8019fca:	44ab      	add	fp, r5
 8019fcc:	fa0f f58b 	sxth.w	r5, fp
            y += pad_top + parent->coords.y1 - lv_obj_get_scroll_y(parent);
 8019fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019fd4:	4498      	add	r8, r3
 8019fd6:	4638      	mov	r0, r7
 8019fd8:	f000 ff0e 	bl	801adf8 <lv_obj_get_scroll_y>
 8019fdc:	eba8 0800 	sub.w	r8, r8, r0
 8019fe0:	44b0      	add	r8, r6
 8019fe2:	fa0f f888 	sxth.w	r8, r8
 8019fe6:	e7b5      	b.n	8019f54 <lv_obj_move_to+0x56>
    bool on1 = false;
 8019fe8:	f04f 0a00 	mov.w	sl, #0
    obj->coords.x1 += diff.x;
 8019fec:	8aa3      	ldrh	r3, [r4, #20]
 8019fee:	4443      	add	r3, r8
 8019ff0:	82a3      	strh	r3, [r4, #20]
    obj->coords.y1 += diff.y;
 8019ff2:	8ae3      	ldrh	r3, [r4, #22]
 8019ff4:	444b      	add	r3, r9
 8019ff6:	82e3      	strh	r3, [r4, #22]
    obj->coords.x2 += diff.x;
 8019ff8:	8b23      	ldrh	r3, [r4, #24]
 8019ffa:	4498      	add	r8, r3
 8019ffc:	f8a4 8018 	strh.w	r8, [r4, #24]
    obj->coords.y2 += diff.y;
 801a000:	8b63      	ldrh	r3, [r4, #26]
 801a002:	4499      	add	r9, r3
 801a004:	f8a4 901a 	strh.w	r9, [r4, #26]
    lv_obj_move_children_by(obj, diff.x, diff.y, false);
 801a008:	2300      	movs	r3, #0
 801a00a:	4632      	mov	r2, r6
 801a00c:	4629      	mov	r1, r5
 801a00e:	4620      	mov	r0, r4
 801a010:	f7ff fdb4 	bl	8019b7c <lv_obj_move_children_by>
    if(parent) lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801a014:	b127      	cbz	r7, 801a020 <lv_obj_move_to+0x122>
 801a016:	4622      	mov	r2, r4
 801a018:	2122      	movs	r1, #34	@ 0x22
 801a01a:	4638      	mov	r0, r7
 801a01c:	f7f6 fe54 	bl	8010cc8 <lv_event_send>
    lv_obj_invalidate(obj);
 801a020:	4620      	mov	r0, r4
 801a022:	f7ff ff40 	bl	8019ea6 <lv_obj_invalidate>
    if(parent) {
 801a026:	b167      	cbz	r7, 801a042 <lv_obj_move_to+0x144>
        bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 801a028:	2200      	movs	r2, #0
 801a02a:	a901      	add	r1, sp, #4
 801a02c:	f104 0014 	add.w	r0, r4, #20
 801a030:	f7e7 fe14 	bl	8001c5c <_lv_area_is_in>
        if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 801a034:	f1ba 0f00 	cmp.w	sl, #0
 801a038:	d100      	bne.n	801a03c <lv_obj_move_to+0x13e>
 801a03a:	b110      	cbz	r0, 801a042 <lv_obj_move_to+0x144>
 801a03c:	4638      	mov	r0, r7
 801a03e:	f001 ff97 	bl	801bf70 <lv_obj_scrollbar_invalidate>
}
 801a042:	b007      	add	sp, #28
 801a044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a048 <lv_obj_refr_pos>:
{
 801a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a04c:	b085      	sub	sp, #20
 801a04e:	4604      	mov	r4, r0
    if(lv_obj_is_layout_positioned(obj)) return;
 801a050:	f7ff fa82 	bl	8019558 <lv_obj_is_layout_positioned>
 801a054:	b110      	cbz	r0, 801a05c <lv_obj_refr_pos+0x14>
}
 801a056:	b005      	add	sp, #20
 801a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801a05c:	4620      	mov	r0, r4
 801a05e:	f003 f889 	bl	801d174 <lv_obj_get_parent>
 801a062:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_X);
 801a064:	2207      	movs	r2, #7
 801a066:	2100      	movs	r1, #0
 801a068:	4620      	mov	r0, r4
 801a06a:	f002 fb43 	bl	801c6f4 <lv_obj_get_style_prop>
 801a06e:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801a070:	b205      	sxth	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_Y);
 801a072:	2208      	movs	r2, #8
 801a074:	2100      	movs	r1, #0
 801a076:	4620      	mov	r0, r4
 801a078:	f002 fb3c 	bl	801c6f4 <lv_obj_get_style_prop>
 801a07c:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 801a07e:	b206      	sxth	r6, r0
    if(parent == NULL) {
 801a080:	2f00      	cmp	r7, #0
 801a082:	d04e      	beq.n	801a122 <lv_obj_refr_pos+0xda>
    lv_coord_t pw = lv_obj_get_content_width(parent);
 801a084:	4638      	mov	r0, r7
 801a086:	f7ff fb3d 	bl	8019704 <lv_obj_get_content_width>
 801a08a:	9000      	str	r0, [sp, #0]
    lv_coord_t ph = lv_obj_get_content_height(parent);
 801a08c:	4638      	mov	r0, r7
 801a08e:	f7ff fb59 	bl	8019744 <lv_obj_get_content_height>
 801a092:	9001      	str	r0, [sp, #4]
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 801a094:	f409 49c0 	and.w	r9, r9, #24576	@ 0x6000
 801a098:	f5b9 5f00 	cmp.w	r9, #8192	@ 0x2000
 801a09c:	d047      	beq.n	801a12e <lv_obj_refr_pos+0xe6>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 801a09e:	f408 48c0 	and.w	r8, r8, #24576	@ 0x6000
 801a0a2:	f5b8 5f00 	cmp.w	r8, #8192	@ 0x2000
 801a0a6:	d057      	beq.n	801a158 <lv_obj_refr_pos+0x110>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_X);
 801a0a8:	226b      	movs	r2, #107	@ 0x6b
 801a0aa:	2100      	movs	r1, #0
 801a0ac:	4620      	mov	r0, r4
 801a0ae:	f002 fb21 	bl	801c6f4 <lv_obj_get_style_prop>
 801a0b2:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 801a0b4:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSLATE_Y);
 801a0b8:	226c      	movs	r2, #108	@ 0x6c
 801a0ba:	2100      	movs	r1, #0
 801a0bc:	4620      	mov	r0, r4
 801a0be:	f002 fb19 	bl	801c6f4 <lv_obj_get_style_prop>
 801a0c2:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 801a0c4:	fa0f fa80 	sxth.w	sl, r0
    lv_coord_t w = lv_obj_get_width(obj);
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	f7ff fb01 	bl	80196d0 <lv_obj_get_width>
 801a0ce:	9002      	str	r0, [sp, #8]
    lv_coord_t h = lv_obj_get_height(obj);
 801a0d0:	4620      	mov	r0, r4
 801a0d2:	f7ff fb04 	bl	80196de <lv_obj_get_height>
 801a0d6:	9003      	str	r0, [sp, #12]
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801a0d8:	f409 49c0 	and.w	r9, r9, #24576	@ 0x6000
 801a0dc:	f5b9 5f00 	cmp.w	r9, #8192	@ 0x2000
 801a0e0:	d04f      	beq.n	801a182 <lv_obj_refr_pos+0x13a>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 801a0e2:	f408 48c0 	and.w	r8, r8, #24576	@ 0x6000
 801a0e6:	f5b8 5f00 	cmp.w	r8, #8192	@ 0x2000
 801a0ea:	d060      	beq.n	801a1ae <lv_obj_refr_pos+0x166>
    x += tr_x;
 801a0ec:	445d      	add	r5, fp
 801a0ee:	fa1f f885 	uxth.w	r8, r5
 801a0f2:	b22d      	sxth	r5, r5
    y += tr_y;
 801a0f4:	4456      	add	r6, sl
 801a0f6:	fa1f f986 	uxth.w	r9, r6
 801a0fa:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ALIGN);
 801a0fc:	2209      	movs	r2, #9
 801a0fe:	2100      	movs	r1, #0
 801a100:	4620      	mov	r0, r4
 801a102:	f002 faf7 	bl	801c6f4 <lv_obj_get_style_prop>
    if(align == LV_ALIGN_DEFAULT) {
 801a106:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 801a10a:	d066      	beq.n	801a1da <lv_obj_refr_pos+0x192>
    if(align == LV_ALIGN_TOP_LEFT) {
 801a10c:	2801      	cmp	r0, #1
 801a10e:	d06c      	beq.n	801a1ea <lv_obj_refr_pos+0x1a2>
        switch(align) {
 801a110:	3802      	subs	r0, #2
 801a112:	2807      	cmp	r0, #7
 801a114:	d87d      	bhi.n	801a212 <lv_obj_refr_pos+0x1ca>
 801a116:	e8df f000 	tbb	[pc, r0]
 801a11a:	8270      	.short	0x8270
 801a11c:	89b09d96 	.word	0x89b09d96
 801a120:	d0bd      	.short	0xd0bd
        lv_obj_move_to(obj, x, y);
 801a122:	4632      	mov	r2, r6
 801a124:	4629      	mov	r1, r5
 801a126:	4620      	mov	r0, r4
 801a128:	f7ff fee9 	bl	8019efe <lv_obj_move_to>
        return;
 801a12c:	e793      	b.n	801a056 <lv_obj_refr_pos+0xe>
    if(LV_COORD_IS_PCT(x)) x = (pw * LV_COORD_GET_PCT(x)) / 100;
 801a12e:	f425 43c0 	bic.w	r3, r5, #24576	@ 0x6000
 801a132:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a136:	dcb2      	bgt.n	801a09e <lv_obj_refr_pos+0x56>
 801a138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a13c:	dd01      	ble.n	801a142 <lv_obj_refr_pos+0xfa>
 801a13e:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801a142:	9a00      	ldr	r2, [sp, #0]
 801a144:	fb02 f303 	mul.w	r3, r2, r3
 801a148:	4a68      	ldr	r2, [pc, #416]	@ (801a2ec <lv_obj_refr_pos+0x2a4>)
 801a14a:	fb82 1203 	smull	r1, r2, r2, r3
 801a14e:	17db      	asrs	r3, r3, #31
 801a150:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a154:	b21d      	sxth	r5, r3
 801a156:	e7a2      	b.n	801a09e <lv_obj_refr_pos+0x56>
    if(LV_COORD_IS_PCT(y)) y = (ph * LV_COORD_GET_PCT(y)) / 100;
 801a158:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 801a15c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a160:	dca2      	bgt.n	801a0a8 <lv_obj_refr_pos+0x60>
 801a162:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a166:	dd01      	ble.n	801a16c <lv_obj_refr_pos+0x124>
 801a168:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801a16c:	9a01      	ldr	r2, [sp, #4]
 801a16e:	fb02 f303 	mul.w	r3, r2, r3
 801a172:	4a5e      	ldr	r2, [pc, #376]	@ (801a2ec <lv_obj_refr_pos+0x2a4>)
 801a174:	fb82 1203 	smull	r1, r2, r2, r3
 801a178:	17db      	asrs	r3, r3, #31
 801a17a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a17e:	b21e      	sxth	r6, r3
 801a180:	e792      	b.n	801a0a8 <lv_obj_refr_pos+0x60>
    if(LV_COORD_IS_PCT(tr_x)) tr_x = (w * LV_COORD_GET_PCT(tr_x)) / 100;
 801a182:	f42b 43c0 	bic.w	r3, fp, #24576	@ 0x6000
 801a186:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a18a:	dcaa      	bgt.n	801a0e2 <lv_obj_refr_pos+0x9a>
 801a18c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a190:	dd01      	ble.n	801a196 <lv_obj_refr_pos+0x14e>
 801a192:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801a196:	9a02      	ldr	r2, [sp, #8]
 801a198:	fb02 f303 	mul.w	r3, r2, r3
 801a19c:	4a53      	ldr	r2, [pc, #332]	@ (801a2ec <lv_obj_refr_pos+0x2a4>)
 801a19e:	fb82 1203 	smull	r1, r2, r2, r3
 801a1a2:	17db      	asrs	r3, r3, #31
 801a1a4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a1a8:	fa0f fb83 	sxth.w	fp, r3
 801a1ac:	e799      	b.n	801a0e2 <lv_obj_refr_pos+0x9a>
    if(LV_COORD_IS_PCT(tr_y)) tr_y = (h * LV_COORD_GET_PCT(tr_y)) / 100;
 801a1ae:	f42a 43c0 	bic.w	r3, sl, #24576	@ 0x6000
 801a1b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a1b6:	dc99      	bgt.n	801a0ec <lv_obj_refr_pos+0xa4>
 801a1b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a1bc:	dd01      	ble.n	801a1c2 <lv_obj_refr_pos+0x17a>
 801a1be:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801a1c2:	9a03      	ldr	r2, [sp, #12]
 801a1c4:	fb02 f303 	mul.w	r3, r2, r3
 801a1c8:	4a48      	ldr	r2, [pc, #288]	@ (801a2ec <lv_obj_refr_pos+0x2a4>)
 801a1ca:	fb82 1203 	smull	r1, r2, r2, r3
 801a1ce:	17db      	asrs	r3, r3, #31
 801a1d0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a1d4:	fa0f fa83 	sxth.w	sl, r3
 801a1d8:	e788      	b.n	801a0ec <lv_obj_refr_pos+0xa4>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a1da:	2216      	movs	r2, #22
 801a1dc:	2100      	movs	r1, #0
 801a1de:	4638      	mov	r0, r7
 801a1e0:	f002 fa88 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a1e4:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 801a1e6:	2801      	cmp	r0, #1
 801a1e8:	d005      	beq.n	801a1f6 <lv_obj_refr_pos+0x1ae>
        lv_obj_move_to(obj, x, y);
 801a1ea:	4632      	mov	r2, r6
 801a1ec:	4629      	mov	r1, r5
 801a1ee:	4620      	mov	r0, r4
 801a1f0:	f7ff fe85 	bl	8019efe <lv_obj_move_to>
 801a1f4:	e72f      	b.n	801a056 <lv_obj_refr_pos+0xe>
        if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 801a1f6:	2003      	movs	r0, #3
 801a1f8:	e78a      	b.n	801a110 <lv_obj_refr_pos+0xc8>
                x += pw / 2 - w / 2;
 801a1fa:	9b00      	ldr	r3, [sp, #0]
 801a1fc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a200:	9a02      	ldr	r2, [sp, #8]
 801a202:	eb02 75d2 	add.w	r5, r2, r2, lsr #31
 801a206:	106d      	asrs	r5, r5, #1
 801a208:	ebc5 0563 	rsb	r5, r5, r3, asr #1
 801a20c:	fa18 f585 	uxtah	r5, r8, r5
 801a210:	b22d      	sxth	r5, r5
        lv_obj_move_to(obj, x, y);
 801a212:	4632      	mov	r2, r6
 801a214:	4629      	mov	r1, r5
 801a216:	4620      	mov	r0, r4
 801a218:	f7ff fe71 	bl	8019efe <lv_obj_move_to>
 801a21c:	e71b      	b.n	801a056 <lv_obj_refr_pos+0xe>
                x += pw - w;
 801a21e:	9b00      	ldr	r3, [sp, #0]
 801a220:	9a02      	ldr	r2, [sp, #8]
 801a222:	1a9d      	subs	r5, r3, r2
 801a224:	fa18 f585 	uxtah	r5, r8, r5
 801a228:	b22d      	sxth	r5, r5
                break;
 801a22a:	e7f2      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                y += ph / 2 - h / 2;
 801a22c:	9b01      	ldr	r3, [sp, #4]
 801a22e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a232:	9a03      	ldr	r2, [sp, #12]
 801a234:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 801a238:	1076      	asrs	r6, r6, #1
 801a23a:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 801a23e:	fa19 f686 	uxtah	r6, r9, r6
 801a242:	b236      	sxth	r6, r6
                break;
 801a244:	e7e5      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                y += ph - h;
 801a246:	9b01      	ldr	r3, [sp, #4]
 801a248:	9a03      	ldr	r2, [sp, #12]
 801a24a:	1a9e      	subs	r6, r3, r2
 801a24c:	fa19 f686 	uxtah	r6, r9, r6
 801a250:	b236      	sxth	r6, r6
                break;
 801a252:	e7de      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                x += pw / 2 - w / 2;
 801a254:	9b00      	ldr	r3, [sp, #0]
 801a256:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a25a:	9a02      	ldr	r2, [sp, #8]
 801a25c:	eb02 75d2 	add.w	r5, r2, r2, lsr #31
 801a260:	106d      	asrs	r5, r5, #1
 801a262:	ebc5 0563 	rsb	r5, r5, r3, asr #1
 801a266:	fa18 f585 	uxtah	r5, r8, r5
 801a26a:	b22d      	sxth	r5, r5
                y += ph - h;
 801a26c:	9b01      	ldr	r3, [sp, #4]
 801a26e:	9a03      	ldr	r2, [sp, #12]
 801a270:	1a9e      	subs	r6, r3, r2
 801a272:	fa19 f686 	uxtah	r6, r9, r6
 801a276:	b236      	sxth	r6, r6
                break;
 801a278:	e7cb      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                x += pw - w;
 801a27a:	9b00      	ldr	r3, [sp, #0]
 801a27c:	9a02      	ldr	r2, [sp, #8]
 801a27e:	1a9d      	subs	r5, r3, r2
 801a280:	fa18 f585 	uxtah	r5, r8, r5
 801a284:	b22d      	sxth	r5, r5
                y += ph - h;
 801a286:	9b01      	ldr	r3, [sp, #4]
 801a288:	9a03      	ldr	r2, [sp, #12]
 801a28a:	1a9e      	subs	r6, r3, r2
 801a28c:	fa19 f686 	uxtah	r6, r9, r6
 801a290:	b236      	sxth	r6, r6
                break;
 801a292:	e7be      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                x += pw - w;
 801a294:	9b00      	ldr	r3, [sp, #0]
 801a296:	9a02      	ldr	r2, [sp, #8]
 801a298:	1a9d      	subs	r5, r3, r2
 801a29a:	fa18 f585 	uxtah	r5, r8, r5
 801a29e:	b22d      	sxth	r5, r5
                y += ph / 2 - h / 2;
 801a2a0:	9b01      	ldr	r3, [sp, #4]
 801a2a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a2a6:	9a03      	ldr	r2, [sp, #12]
 801a2a8:	eb02 76d2 	add.w	r6, r2, r2, lsr #31
 801a2ac:	1076      	asrs	r6, r6, #1
 801a2ae:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 801a2b2:	fa19 f686 	uxtah	r6, r9, r6
 801a2b6:	b236      	sxth	r6, r6
                break;
 801a2b8:	e7ab      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
                x += pw / 2 - w / 2;
 801a2ba:	9b00      	ldr	r3, [sp, #0]
 801a2bc:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801a2c0:	9b02      	ldr	r3, [sp, #8]
 801a2c2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a2c6:	105b      	asrs	r3, r3, #1
 801a2c8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 801a2cc:	fa18 f383 	uxtah	r3, r8, r3
 801a2d0:	b21d      	sxth	r5, r3
                y += ph / 2 - h / 2;
 801a2d2:	9b01      	ldr	r3, [sp, #4]
 801a2d4:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 801a2d8:	9b03      	ldr	r3, [sp, #12]
 801a2da:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801a2de:	105b      	asrs	r3, r3, #1
 801a2e0:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 801a2e4:	fa19 f383 	uxtah	r3, r9, r3
 801a2e8:	b21e      	sxth	r6, r3
                break;
 801a2ea:	e792      	b.n	801a212 <lv_obj_refr_pos+0x1ca>
 801a2ec:	51eb851f 	.word	0x51eb851f

0801a2f0 <lv_obj_is_visible>:
{
 801a2f0:	b510      	push	{r4, lr}
 801a2f2:	b082      	sub	sp, #8
 801a2f4:	4604      	mov	r4, r0
    lv_coord_t ext_size = _lv_obj_get_ext_draw_size(obj);
 801a2f6:	f7fe fff2 	bl	80192de <_lv_obj_get_ext_draw_size>
    dest->x1 = src->x1;
 801a2fa:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801a2fe:	f8ad 2000 	strh.w	r2, [sp]
    dest->y1 = src->y1;
 801a302:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801a306:	f8ad 3002 	strh.w	r3, [sp, #2]
    dest->x2 = src->x2;
 801a30a:	f9b4 c018 	ldrsh.w	ip, [r4, #24]
 801a30e:	f8ad c004 	strh.w	ip, [sp, #4]
    dest->y2 = src->y2;
 801a312:	f9b4 101a 	ldrsh.w	r1, [r4, #26]
 801a316:	f8ad 1006 	strh.w	r1, [sp, #6]
    obj_coords.x1 -= ext_size;
 801a31a:	b292      	uxth	r2, r2
 801a31c:	b280      	uxth	r0, r0
 801a31e:	1a12      	subs	r2, r2, r0
 801a320:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
 801a324:	b29b      	uxth	r3, r3
 801a326:	1a1b      	subs	r3, r3, r0
 801a328:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
 801a32c:	fa10 fc8c 	uxtah	ip, r0, ip
 801a330:	f8ad c004 	strh.w	ip, [sp, #4]
    obj_coords.y2 += ext_size;
 801a334:	fa10 f181 	uxtah	r1, r0, r1
 801a338:	f8ad 1006 	strh.w	r1, [sp, #6]
    return lv_obj_area_is_visible(obj, &obj_coords);
 801a33c:	4669      	mov	r1, sp
 801a33e:	4620      	mov	r0, r4
 801a340:	f7ff fcf9 	bl	8019d36 <lv_obj_area_is_visible>
}
 801a344:	b002      	add	sp, #8
 801a346:	bd10      	pop	{r4, pc}

0801a348 <lv_obj_set_ext_click_area>:
{
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4605      	mov	r5, r0
 801a34c:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801a34e:	f7fe fb1f 	bl	8018990 <lv_obj_allocate_spec_attr>
    obj->spec_attr->ext_click_pad = size;
 801a352:	68ab      	ldr	r3, [r5, #8]
 801a354:	829c      	strh	r4, [r3, #20]
}
 801a356:	bd38      	pop	{r3, r4, r5, pc}

0801a358 <lv_obj_get_click_area>:
{
 801a358:	b510      	push	{r4, lr}
    dest->x1 = src->x1;
 801a35a:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
 801a35e:	800a      	strh	r2, [r1, #0]
    dest->y1 = src->y1;
 801a360:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801a364:	804b      	strh	r3, [r1, #2]
    dest->x2 = src->x2;
 801a366:	f9b0 e018 	ldrsh.w	lr, [r0, #24]
 801a36a:	f8a1 e004 	strh.w	lr, [r1, #4]
    dest->y2 = src->y2;
 801a36e:	f9b0 c01a 	ldrsh.w	ip, [r0, #26]
 801a372:	f8a1 c006 	strh.w	ip, [r1, #6]
    if(obj->spec_attr) {
 801a376:	6884      	ldr	r4, [r0, #8]
 801a378:	b1a4      	cbz	r4, 801a3a4 <lv_obj_get_click_area+0x4c>
        area->x1 -= obj->spec_attr->ext_click_pad;
 801a37a:	b292      	uxth	r2, r2
 801a37c:	8aa4      	ldrh	r4, [r4, #20]
 801a37e:	1b12      	subs	r2, r2, r4
 801a380:	800a      	strh	r2, [r1, #0]
        area->x2 += obj->spec_attr->ext_click_pad;
 801a382:	6882      	ldr	r2, [r0, #8]
 801a384:	8a92      	ldrh	r2, [r2, #20]
 801a386:	fa12 fe8e 	uxtah	lr, r2, lr
 801a38a:	f8a1 e004 	strh.w	lr, [r1, #4]
        area->y1 -= obj->spec_attr->ext_click_pad;
 801a38e:	b29b      	uxth	r3, r3
 801a390:	6882      	ldr	r2, [r0, #8]
 801a392:	8a92      	ldrh	r2, [r2, #20]
 801a394:	1a9b      	subs	r3, r3, r2
 801a396:	804b      	strh	r3, [r1, #2]
        area->y2 += obj->spec_attr->ext_click_pad;
 801a398:	6883      	ldr	r3, [r0, #8]
 801a39a:	8a9b      	ldrh	r3, [r3, #20]
 801a39c:	fa13 fc8c 	uxtah	ip, r3, ip
 801a3a0:	f8a1 c006 	strh.w	ip, [r1, #6]
}
 801a3a4:	bd10      	pop	{r4, pc}
	...

0801a3a8 <lv_clamp_width>:
{
 801a3a8:	b500      	push	{lr}
 801a3aa:	4684      	mov	ip, r0
 801a3ac:	4608      	mov	r0, r1
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 801a3ae:	f401 41c0 	and.w	r1, r1, #24576	@ 0x6000
 801a3b2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801a3b6:	d00c      	beq.n	801a3d2 <lv_clamp_width+0x2a>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 801a3b8:	f402 41c0 	and.w	r1, r2, #24576	@ 0x6000
 801a3bc:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801a3c0:	d01b      	beq.n	801a3fa <lv_clamp_width+0x52>
    return LV_CLAMP(min_width, width, max_width);
 801a3c2:	4562      	cmp	r2, ip
 801a3c4:	bfa8      	it	ge
 801a3c6:	4662      	movge	r2, ip
}
 801a3c8:	4290      	cmp	r0, r2
 801a3ca:	bfb8      	it	lt
 801a3cc:	4610      	movlt	r0, r2
 801a3ce:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_width)) min_width = (ref_width * LV_COORD_GET_PCT(min_width)) / 100;
 801a3d2:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 801a3d6:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 801a3da:	dced      	bgt.n	801a3b8 <lv_clamp_width+0x10>
 801a3dc:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 801a3e0:	dd01      	ble.n	801a3e6 <lv_clamp_width+0x3e>
 801a3e2:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 801a3e6:	fb03 f101 	mul.w	r1, r3, r1
 801a3ea:	480e      	ldr	r0, [pc, #56]	@ (801a424 <lv_clamp_width+0x7c>)
 801a3ec:	fb80 e001 	smull	lr, r0, r0, r1
 801a3f0:	17c9      	asrs	r1, r1, #31
 801a3f2:	ebc1 1160 	rsb	r1, r1, r0, asr #5
 801a3f6:	b208      	sxth	r0, r1
 801a3f8:	e7de      	b.n	801a3b8 <lv_clamp_width+0x10>
    if(LV_COORD_IS_PCT(max_width)) max_width = (ref_width * LV_COORD_GET_PCT(max_width)) / 100;
 801a3fa:	f422 41c0 	bic.w	r1, r2, #24576	@ 0x6000
 801a3fe:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 801a402:	dcde      	bgt.n	801a3c2 <lv_clamp_width+0x1a>
 801a404:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 801a408:	dd01      	ble.n	801a40e <lv_clamp_width+0x66>
 801a40a:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 801a40e:	fb01 f303 	mul.w	r3, r1, r3
 801a412:	4a04      	ldr	r2, [pc, #16]	@ (801a424 <lv_clamp_width+0x7c>)
 801a414:	fb82 1203 	smull	r1, r2, r2, r3
 801a418:	17db      	asrs	r3, r3, #31
 801a41a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a41e:	b21a      	sxth	r2, r3
 801a420:	e7cf      	b.n	801a3c2 <lv_clamp_width+0x1a>
 801a422:	bf00      	nop
 801a424:	51eb851f 	.word	0x51eb851f

0801a428 <lv_clamp_height>:
{
 801a428:	b500      	push	{lr}
 801a42a:	4684      	mov	ip, r0
 801a42c:	4608      	mov	r0, r1
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 801a42e:	f401 41c0 	and.w	r1, r1, #24576	@ 0x6000
 801a432:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801a436:	d00c      	beq.n	801a452 <lv_clamp_height+0x2a>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 801a438:	f402 41c0 	and.w	r1, r2, #24576	@ 0x6000
 801a43c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 801a440:	d01b      	beq.n	801a47a <lv_clamp_height+0x52>
    return LV_CLAMP(min_height, height, max_height);
 801a442:	4562      	cmp	r2, ip
 801a444:	bfa8      	it	ge
 801a446:	4662      	movge	r2, ip
}
 801a448:	4290      	cmp	r0, r2
 801a44a:	bfb8      	it	lt
 801a44c:	4610      	movlt	r0, r2
 801a44e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(LV_COORD_IS_PCT(min_height)) min_height = (ref_height * LV_COORD_GET_PCT(min_height)) / 100;
 801a452:	f420 41c0 	bic.w	r1, r0, #24576	@ 0x6000
 801a456:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 801a45a:	dced      	bgt.n	801a438 <lv_clamp_height+0x10>
 801a45c:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 801a460:	dd01      	ble.n	801a466 <lv_clamp_height+0x3e>
 801a462:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 801a466:	fb03 f101 	mul.w	r1, r3, r1
 801a46a:	480e      	ldr	r0, [pc, #56]	@ (801a4a4 <lv_clamp_height+0x7c>)
 801a46c:	fb80 e001 	smull	lr, r0, r0, r1
 801a470:	17c9      	asrs	r1, r1, #31
 801a472:	ebc1 1160 	rsb	r1, r1, r0, asr #5
 801a476:	b208      	sxth	r0, r1
 801a478:	e7de      	b.n	801a438 <lv_clamp_height+0x10>
    if(LV_COORD_IS_PCT(max_height)) max_height = (ref_height * LV_COORD_GET_PCT(max_height)) / 100;
 801a47a:	f422 41c0 	bic.w	r1, r2, #24576	@ 0x6000
 801a47e:	f5b1 6ffa 	cmp.w	r1, #2000	@ 0x7d0
 801a482:	dcde      	bgt.n	801a442 <lv_clamp_height+0x1a>
 801a484:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 801a488:	dd01      	ble.n	801a48e <lv_clamp_height+0x66>
 801a48a:	f5c1 717a 	rsb	r1, r1, #1000	@ 0x3e8
 801a48e:	fb01 f303 	mul.w	r3, r1, r3
 801a492:	4a04      	ldr	r2, [pc, #16]	@ (801a4a4 <lv_clamp_height+0x7c>)
 801a494:	fb82 1203 	smull	r1, r2, r2, r3
 801a498:	17db      	asrs	r3, r3, #31
 801a49a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801a49e:	b21a      	sxth	r2, r3
 801a4a0:	e7cf      	b.n	801a442 <lv_clamp_height+0x1a>
 801a4a2:	bf00      	nop
 801a4a4:	51eb851f 	.word	0x51eb851f

0801a4a8 <lv_obj_refr_size>:
    if(obj->w_layout && obj->h_layout) return false;
 801a4a8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801a4ac:	f003 030c 	and.w	r3, r3, #12
 801a4b0:	2b0c      	cmp	r3, #12
 801a4b2:	f000 8198 	beq.w	801a7e6 <lv_obj_refr_size+0x33e>
{
 801a4b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ba:	b087      	sub	sp, #28
 801a4bc:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801a4be:	f002 fe59 	bl	801d174 <lv_obj_get_parent>
    if(parent == NULL) return false;
 801a4c2:	4605      	mov	r5, r0
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	f000 8190 	beq.w	801a7ea <lv_obj_refr_size+0x342>
    lv_coord_t sl_ori = lv_obj_get_scroll_left(obj);
 801a4ca:	4620      	mov	r0, r4
 801a4cc:	f000 fcfc 	bl	801aec8 <lv_obj_get_scroll_left>
 801a4d0:	9000      	str	r0, [sp, #0]
    if(obj->w_layout) {
 801a4d2:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 801a4d6:	f013 0f08 	tst.w	r3, #8
 801a4da:	d078      	beq.n	801a5ce <lv_obj_refr_size+0x126>
        w = lv_obj_get_width(obj);
 801a4dc:	4620      	mov	r0, r4
 801a4de:	f7ff f8f7 	bl	80196d0 <lv_obj_get_width>
 801a4e2:	4606      	mov	r6, r0
    bool w_is_content = false;
 801a4e4:	f04f 0900 	mov.w	r9, #0
    lv_coord_t st_ori = lv_obj_get_scroll_top(obj);
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	f000 fc8d 	bl	801ae08 <lv_obj_get_scroll_top>
 801a4ee:	4607      	mov	r7, r0
    if(obj->h_layout) {
 801a4f0:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 801a4f4:	f013 0f04 	tst.w	r3, #4
 801a4f8:	f000 80e7 	beq.w	801a6ca <lv_obj_refr_size+0x222>
        h = lv_obj_get_height(obj);
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f7ff f8ee 	bl	80196de <lv_obj_get_height>
 801a502:	4680      	mov	r8, r0
    bool h_is_content = false;
 801a504:	f04f 0a00 	mov.w	sl, #0
    if(w_is_content || h_is_content) {
 801a508:	f1b9 0f00 	cmp.w	r9, #0
 801a50c:	d102      	bne.n	801a514 <lv_obj_refr_size+0x6c>
 801a50e:	f1ba 0f00 	cmp.w	sl, #0
 801a512:	d005      	beq.n	801a520 <lv_obj_refr_size+0x78>
        lv_obj_scroll_to(obj, sl_ori, st_ori, LV_ANIM_OFF);
 801a514:	2300      	movs	r3, #0
 801a516:	463a      	mov	r2, r7
 801a518:	9900      	ldr	r1, [sp, #0]
 801a51a:	4620      	mov	r0, r4
 801a51c:	f000 ff48 	bl	801b3b0 <lv_obj_scroll_to>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 801a520:	4620      	mov	r0, r4
 801a522:	f7ff f8d5 	bl	80196d0 <lv_obj_get_width>
 801a526:	42b0      	cmp	r0, r6
 801a528:	d105      	bne.n	801a536 <lv_obj_refr_size+0x8e>
 801a52a:	4620      	mov	r0, r4
 801a52c:	f7ff f8d7 	bl	80196de <lv_obj_get_height>
 801a530:	4540      	cmp	r0, r8
 801a532:	f000 815c 	beq.w	801a7ee <lv_obj_refr_size+0x346>
    lv_obj_invalidate(obj);
 801a536:	4620      	mov	r0, r4
 801a538:	f7ff fcb5 	bl	8019ea6 <lv_obj_invalidate>
    lv_obj_get_coords(obj, &ori);
 801a53c:	a904      	add	r1, sp, #16
 801a53e:	4620      	mov	r0, r4
 801a540:	f7ff f873 	bl	801962a <lv_obj_get_coords>
    lv_obj_get_content_coords(parent, &parent_fit_area);
 801a544:	a902      	add	r1, sp, #8
 801a546:	4628      	mov	r0, r5
 801a548:	f7ff f91c 	bl	8019784 <lv_obj_get_content_coords>
    bool on1 = _lv_area_is_in(&ori, &parent_fit_area, 0);
 801a54c:	2200      	movs	r2, #0
 801a54e:	a902      	add	r1, sp, #8
 801a550:	a804      	add	r0, sp, #16
 801a552:	f7e7 fb83 	bl	8001c5c <_lv_area_is_in>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 801a556:	4607      	mov	r7, r0
 801a558:	2800      	cmp	r0, #0
 801a55a:	f000 813a 	beq.w	801a7d2 <lv_obj_refr_size+0x32a>
    obj->coords.y2 = obj->coords.y1 + h - 1;
 801a55e:	8ae0      	ldrh	r0, [r4, #22]
 801a560:	4440      	add	r0, r8
 801a562:	b280      	uxth	r0, r0
 801a564:	3801      	subs	r0, #1
 801a566:	8360      	strh	r0, [r4, #26]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a568:	2216      	movs	r2, #22
 801a56a:	2100      	movs	r1, #0
 801a56c:	4620      	mov	r0, r4
 801a56e:	f002 f8c1 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a572:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801a574:	2801      	cmp	r0, #1
 801a576:	f000 8130 	beq.w	801a7da <lv_obj_refr_size+0x332>
        obj->coords.x2 = obj->coords.x1 + w - 1;
 801a57a:	8aa3      	ldrh	r3, [r4, #20]
 801a57c:	4433      	add	r3, r6
 801a57e:	b29b      	uxth	r3, r3
 801a580:	3b01      	subs	r3, #1
 801a582:	8323      	strh	r3, [r4, #24]
    lv_event_send(obj, LV_EVENT_SIZE_CHANGED, &ori);
 801a584:	aa04      	add	r2, sp, #16
 801a586:	2129      	movs	r1, #41	@ 0x29
 801a588:	4620      	mov	r0, r4
 801a58a:	f7f6 fb9d 	bl	8010cc8 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801a58e:	4622      	mov	r2, r4
 801a590:	2122      	movs	r1, #34	@ 0x22
 801a592:	4628      	mov	r0, r5
 801a594:	f7f6 fb98 	bl	8010cc8 <lv_event_send>
    lv_obj_invalidate(obj);
 801a598:	4620      	mov	r0, r4
 801a59a:	f7ff fc84 	bl	8019ea6 <lv_obj_invalidate>
    obj->readjust_scroll_after_layout = 1;
 801a59e:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a5a2:	f043 0302 	orr.w	r3, r3, #2
 801a5a6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    bool on2 = _lv_area_is_in(&obj->coords, &parent_fit_area, 0);
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	a902      	add	r1, sp, #8
 801a5ae:	f104 0014 	add.w	r0, r4, #20
 801a5b2:	f7e7 fb53 	bl	8001c5c <_lv_area_is_in>
    if(on1 || (!on1 && on2)) lv_obj_scrollbar_invalidate(parent);
 801a5b6:	b907      	cbnz	r7, 801a5ba <lv_obj_refr_size+0x112>
 801a5b8:	b110      	cbz	r0, 801a5c0 <lv_obj_refr_size+0x118>
 801a5ba:	4628      	mov	r0, r5
 801a5bc:	f001 fcd8 	bl	801bf70 <lv_obj_scrollbar_invalidate>
    lv_obj_refresh_ext_draw_size(obj);
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	f7fe fe93 	bl	80192ec <lv_obj_refresh_ext_draw_size>
    return true;
 801a5c6:	2001      	movs	r0, #1
}
 801a5c8:	b007      	add	sp, #28
 801a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801a5ce:	2201      	movs	r2, #1
 801a5d0:	2100      	movs	r1, #0
 801a5d2:	4620      	mov	r0, r4
 801a5d4:	f002 f88e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a5d8:	b206      	sxth	r6, r0
        w_is_content = w == LV_SIZE_CONTENT ? true : false;
 801a5da:	f242 79d1 	movw	r9, #10193	@ 0x27d1
 801a5de:	454e      	cmp	r6, r9
 801a5e0:	bf14      	ite	ne
 801a5e2:	f04f 0900 	movne.w	r9, #0
 801a5e6:	f04f 0901 	moveq.w	r9, #1
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 801a5ea:	f400 40c0 	and.w	r0, r0, #24576	@ 0x6000
 801a5ee:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 801a5f2:	d036      	beq.n	801a662 <lv_obj_refr_size+0x1ba>
 801a5f4:	f04f 0800 	mov.w	r8, #0
        lv_coord_t parent_w = lv_obj_get_content_width(parent);
 801a5f8:	4628      	mov	r0, r5
 801a5fa:	f7ff f883 	bl	8019704 <lv_obj_get_content_width>
 801a5fe:	4607      	mov	r7, r0
        if(w_is_content) {
 801a600:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801a604:	429e      	cmp	r6, r3
 801a606:	d037      	beq.n	801a678 <lv_obj_refr_size+0x1d0>
        else if(w_is_pct) {
 801a608:	f1b8 0f00 	cmp.w	r8, #0
 801a60c:	d015      	beq.n	801a63a <lv_obj_refr_size+0x192>
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 801a60e:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801a612:	f013 0f08 	tst.w	r3, #8
 801a616:	d034      	beq.n	801a682 <lv_obj_refr_size+0x1da>
                w = (LV_COORD_GET_PCT(w) * parent_w) / 100;
 801a618:	f426 42c0 	bic.w	r2, r6, #24576	@ 0x6000
 801a61c:	b212      	sxth	r2, r2
 801a61e:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 801a622:	dd01      	ble.n	801a628 <lv_obj_refr_size+0x180>
 801a624:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 801a628:	fb07 f202 	mul.w	r2, r7, r2
 801a62c:	4b71      	ldr	r3, [pc, #452]	@ (801a7f4 <lv_obj_refr_size+0x34c>)
 801a62e:	fb83 1302 	smull	r1, r3, r3, r2
 801a632:	17d6      	asrs	r6, r2, #31
 801a634:	ebc6 1663 	rsb	r6, r6, r3, asr #5
 801a638:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_WIDTH);
 801a63a:	2202      	movs	r2, #2
 801a63c:	2100      	movs	r1, #0
 801a63e:	4620      	mov	r0, r4
 801a640:	f002 f858 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a644:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_WIDTH);
 801a648:	2203      	movs	r2, #3
 801a64a:	2100      	movs	r1, #0
 801a64c:	4620      	mov	r0, r4
 801a64e:	f002 f851 	bl	801c6f4 <lv_obj_get_style_prop>
        w = lv_clamp_width(w, minw, maxw, parent_w);
 801a652:	463b      	mov	r3, r7
 801a654:	b202      	sxth	r2, r0
 801a656:	4641      	mov	r1, r8
 801a658:	4630      	mov	r0, r6
 801a65a:	f7ff fea5 	bl	801a3a8 <lv_clamp_width>
 801a65e:	4606      	mov	r6, r0
 801a660:	e742      	b.n	801a4e8 <lv_obj_refr_size+0x40>
        w_is_pct = LV_COORD_IS_PCT(w) ? true : false;
 801a662:	f426 43c0 	bic.w	r3, r6, #24576	@ 0x6000
 801a666:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a66a:	dd02      	ble.n	801a672 <lv_obj_refr_size+0x1ca>
 801a66c:	f04f 0800 	mov.w	r8, #0
 801a670:	e7c2      	b.n	801a5f8 <lv_obj_refr_size+0x150>
 801a672:	f04f 0801 	mov.w	r8, #1
 801a676:	e7bf      	b.n	801a5f8 <lv_obj_refr_size+0x150>
            w = calc_content_width(obj);
 801a678:	4620      	mov	r0, r4
 801a67a:	f7ff f8cd 	bl	8019818 <calc_content_width>
 801a67e:	4606      	mov	r6, r0
 801a680:	e7db      	b.n	801a63a <lv_obj_refr_size+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801a682:	2201      	movs	r2, #1
 801a684:	2100      	movs	r1, #0
 801a686:	4628      	mov	r0, r5
 801a688:	f002 f834 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a68c:	b200      	sxth	r0, r0
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 801a68e:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801a692:	4298      	cmp	r0, r3
 801a694:	d1c0      	bne.n	801a618 <lv_obj_refr_size+0x170>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801a696:	2232      	movs	r2, #50	@ 0x32
 801a698:	2100      	movs	r1, #0
 801a69a:	4620      	mov	r0, r4
 801a69c:	f002 f82a 	bl	801c6f4 <lv_obj_get_style_prop>
 801a6a0:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 801a6a2:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a6a6:	2212      	movs	r2, #18
 801a6a8:	2100      	movs	r1, #0
 801a6aa:	4620      	mov	r0, r4
 801a6ac:	f002 f822 	bl	801c6f4 <lv_obj_get_style_prop>
                w = lv_obj_get_style_pad_left(obj, 0) + border_w;
 801a6b0:	fa16 f680 	uxtah	r6, r6, r0
 801a6b4:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801a6b6:	2213      	movs	r2, #19
 801a6b8:	2100      	movs	r1, #0
 801a6ba:	4620      	mov	r0, r4
 801a6bc:	f002 f81a 	bl	801c6f4 <lv_obj_get_style_prop>
                w += lv_obj_get_style_pad_right(obj, 0) + border_w;
 801a6c0:	fa08 f380 	sxtah	r3, r8, r0
 801a6c4:	441e      	add	r6, r3
 801a6c6:	b236      	sxth	r6, r6
            if(parent->w_layout == 0 && lv_obj_get_style_width(parent, 0) == LV_SIZE_CONTENT) {
 801a6c8:	e7b7      	b.n	801a63a <lv_obj_refr_size+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801a6ca:	2204      	movs	r2, #4
 801a6cc:	2100      	movs	r1, #0
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	f002 f810 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a6d4:	fa0f f880 	sxth.w	r8, r0
        h_is_content = h == LV_SIZE_CONTENT ? true : false;
 801a6d8:	f242 7ad1 	movw	sl, #10193	@ 0x27d1
 801a6dc:	45d0      	cmp	r8, sl
 801a6de:	bf14      	ite	ne
 801a6e0:	f04f 0a00 	movne.w	sl, #0
 801a6e4:	f04f 0a01 	moveq.w	sl, #1
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 801a6e8:	f400 40c0 	and.w	r0, r0, #24576	@ 0x6000
 801a6ec:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 801a6f0:	d039      	beq.n	801a766 <lv_obj_refr_size+0x2be>
 801a6f2:	f04f 0b00 	mov.w	fp, #0
        lv_coord_t parent_h = lv_obj_get_content_height(parent);
 801a6f6:	4628      	mov	r0, r5
 801a6f8:	f7ff f824 	bl	8019744 <lv_obj_get_content_height>
 801a6fc:	9001      	str	r0, [sp, #4]
        if(h_is_content) {
 801a6fe:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801a702:	4598      	cmp	r8, r3
 801a704:	d03a      	beq.n	801a77c <lv_obj_refr_size+0x2d4>
        else if(h_is_pct) {
 801a706:	f1bb 0f00 	cmp.w	fp, #0
 801a70a:	d018      	beq.n	801a73e <lv_obj_refr_size+0x296>
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 801a70c:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801a710:	f013 0f04 	tst.w	r3, #4
 801a714:	d037      	beq.n	801a786 <lv_obj_refr_size+0x2de>
                h = (LV_COORD_GET_PCT(h) * parent_h) / 100;
 801a716:	f428 43c0 	bic.w	r3, r8, #24576	@ 0x6000
 801a71a:	b21b      	sxth	r3, r3
 801a71c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a720:	dd01      	ble.n	801a726 <lv_obj_refr_size+0x27e>
 801a722:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 801a726:	9a01      	ldr	r2, [sp, #4]
 801a728:	fb02 f303 	mul.w	r3, r2, r3
 801a72c:	4a31      	ldr	r2, [pc, #196]	@ (801a7f4 <lv_obj_refr_size+0x34c>)
 801a72e:	fb82 1203 	smull	r1, r2, r2, r3
 801a732:	ea4f 78e3 	mov.w	r8, r3, asr #31
 801a736:	ebc8 1862 	rsb	r8, r8, r2, asr #5
 801a73a:	fa0f f888 	sxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 801a73e:	2205      	movs	r2, #5
 801a740:	2100      	movs	r1, #0
 801a742:	4620      	mov	r0, r4
 801a744:	f001 ffd6 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a748:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 801a74c:	2206      	movs	r2, #6
 801a74e:	2100      	movs	r1, #0
 801a750:	4620      	mov	r0, r4
 801a752:	f001 ffcf 	bl	801c6f4 <lv_obj_get_style_prop>
        h = lv_clamp_height(h, minh, maxh, parent_h);
 801a756:	9b01      	ldr	r3, [sp, #4]
 801a758:	b202      	sxth	r2, r0
 801a75a:	4659      	mov	r1, fp
 801a75c:	4640      	mov	r0, r8
 801a75e:	f7ff fe63 	bl	801a428 <lv_clamp_height>
 801a762:	4680      	mov	r8, r0
 801a764:	e6d0      	b.n	801a508 <lv_obj_refr_size+0x60>
        h_is_pct = LV_COORD_IS_PCT(h) ? true : false;
 801a766:	f428 43c0 	bic.w	r3, r8, #24576	@ 0x6000
 801a76a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801a76e:	dd02      	ble.n	801a776 <lv_obj_refr_size+0x2ce>
 801a770:	f04f 0b00 	mov.w	fp, #0
 801a774:	e7bf      	b.n	801a6f6 <lv_obj_refr_size+0x24e>
 801a776:	f04f 0b01 	mov.w	fp, #1
 801a77a:	e7bc      	b.n	801a6f6 <lv_obj_refr_size+0x24e>
            h = calc_content_height(obj);
 801a77c:	4620      	mov	r0, r4
 801a77e:	f7ff f955 	bl	8019a2c <calc_content_height>
 801a782:	4680      	mov	r8, r0
 801a784:	e7db      	b.n	801a73e <lv_obj_refr_size+0x296>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801a786:	2204      	movs	r2, #4
 801a788:	2100      	movs	r1, #0
 801a78a:	4628      	mov	r0, r5
 801a78c:	f001 ffb2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801a790:	b200      	sxth	r0, r0
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 801a792:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801a796:	4298      	cmp	r0, r3
 801a798:	d1bd      	bne.n	801a716 <lv_obj_refr_size+0x26e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801a79a:	2232      	movs	r2, #50	@ 0x32
 801a79c:	2100      	movs	r1, #0
 801a79e:	4620      	mov	r0, r4
 801a7a0:	f001 ffa8 	bl	801c6f4 <lv_obj_get_style_prop>
 801a7a4:	4680      	mov	r8, r0
    return (lv_coord_t)v.num;
 801a7a6:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a7aa:	2210      	movs	r2, #16
 801a7ac:	2100      	movs	r1, #0
 801a7ae:	4620      	mov	r0, r4
 801a7b0:	f001 ffa0 	bl	801c6f4 <lv_obj_get_style_prop>
                h = lv_obj_get_style_pad_top(obj, 0) + border_w;
 801a7b4:	fa18 f380 	uxtah	r3, r8, r0
 801a7b8:	fa1f f883 	uxth.w	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801a7bc:	2211      	movs	r2, #17
 801a7be:	2100      	movs	r1, #0
 801a7c0:	4620      	mov	r0, r4
 801a7c2:	f001 ff97 	bl	801c6f4 <lv_obj_get_style_prop>
                h += lv_obj_get_style_pad_bottom(obj, 0) + border_w;
 801a7c6:	fa0b f380 	sxtah	r3, fp, r0
 801a7ca:	4498      	add	r8, r3
 801a7cc:	fa0f f888 	sxth.w	r8, r8
            if(parent->h_layout == 0 && lv_obj_get_style_height(parent, 0) == LV_SIZE_CONTENT) {
 801a7d0:	e7b5      	b.n	801a73e <lv_obj_refr_size+0x296>
    if(!on1) lv_obj_scrollbar_invalidate(parent);
 801a7d2:	4628      	mov	r0, r5
 801a7d4:	f001 fbcc 	bl	801bf70 <lv_obj_scrollbar_invalidate>
 801a7d8:	e6c1      	b.n	801a55e <lv_obj_refr_size+0xb6>
        obj->coords.x1 = obj->coords.x2 - w + 1;
 801a7da:	8b23      	ldrh	r3, [r4, #24]
 801a7dc:	1b9b      	subs	r3, r3, r6
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	82a3      	strh	r3, [r4, #20]
 801a7e4:	e6ce      	b.n	801a584 <lv_obj_refr_size+0xdc>
    if(obj->w_layout && obj->h_layout) return false;
 801a7e6:	2000      	movs	r0, #0
}
 801a7e8:	4770      	bx	lr
    if(parent == NULL) return false;
 801a7ea:	2000      	movs	r0, #0
 801a7ec:	e6ec      	b.n	801a5c8 <lv_obj_refr_size+0x120>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) return false;
 801a7ee:	2000      	movs	r0, #0
 801a7f0:	e6ea      	b.n	801a5c8 <lv_obj_refr_size+0x120>
 801a7f2:	bf00      	nop
 801a7f4:	51eb851f 	.word	0x51eb851f

0801a7f8 <layout_update_core>:
{
 801a7f8:	b570      	push	{r4, r5, r6, lr}
 801a7fa:	4604      	mov	r4, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801a7fc:	f002 fcf9 	bl	801d1f2 <lv_obj_get_child_cnt>
 801a800:	4606      	mov	r6, r0
    for(i = 0; i < child_cnt; i++) {
 801a802:	2500      	movs	r5, #0
 801a804:	42b5      	cmp	r5, r6
 801a806:	d207      	bcs.n	801a818 <layout_update_core+0x20>
        lv_obj_t * child = obj->spec_attr->children[i];
 801a808:	68a3      	ldr	r3, [r4, #8]
 801a80a:	681b      	ldr	r3, [r3, #0]
        layout_update_core(child);
 801a80c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a810:	f7ff fff2 	bl	801a7f8 <layout_update_core>
    for(i = 0; i < child_cnt; i++) {
 801a814:	3501      	adds	r5, #1
 801a816:	e7f5      	b.n	801a804 <layout_update_core+0xc>
    if(obj->layout_inv) {
 801a818:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a81c:	f013 0f01 	tst.w	r3, #1
 801a820:	d105      	bne.n	801a82e <layout_update_core+0x36>
    if(obj->readjust_scroll_after_layout) {
 801a822:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a826:	f013 0f02 	tst.w	r3, #2
 801a82a:	d127      	bne.n	801a87c <layout_update_core+0x84>
}
 801a82c:	bd70      	pop	{r4, r5, r6, pc}
        obj->layout_inv = 0;
 801a82e:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a832:	f023 0301 	bic.w	r3, r3, #1
 801a836:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
        lv_obj_refr_size(obj);
 801a83a:	4620      	mov	r0, r4
 801a83c:	f7ff fe34 	bl	801a4a8 <lv_obj_refr_size>
        lv_obj_refr_pos(obj);
 801a840:	4620      	mov	r0, r4
 801a842:	f7ff fc01 	bl	801a048 <lv_obj_refr_pos>
        if(child_cnt > 0) {
 801a846:	2e00      	cmp	r6, #0
 801a848:	d0eb      	beq.n	801a822 <layout_update_core+0x2a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_LAYOUT);
 801a84a:	220a      	movs	r2, #10
 801a84c:	2100      	movs	r1, #0
 801a84e:	4620      	mov	r0, r4
 801a850:	f001 ff50 	bl	801c6f4 <lv_obj_get_style_prop>
            uint32_t layout_id = lv_obj_get_style_layout(obj, LV_PART_MAIN);
 801a854:	b280      	uxth	r0, r0
            if(layout_id > 0 && layout_id <= layout_cnt) {
 801a856:	2800      	cmp	r0, #0
 801a858:	d0e3      	beq.n	801a822 <layout_update_core+0x2a>
 801a85a:	4b0e      	ldr	r3, [pc, #56]	@ (801a894 <layout_update_core+0x9c>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	4283      	cmp	r3, r0
 801a860:	d3df      	bcc.n	801a822 <layout_update_core+0x2a>
                void  * user_data = LV_GC_ROOT(_lv_layout_list)[layout_id - 1].user_data;
 801a862:	f100 5000 	add.w	r0, r0, #536870912	@ 0x20000000
 801a866:	3801      	subs	r0, #1
 801a868:	4b0b      	ldr	r3, [pc, #44]	@ (801a898 <layout_update_core+0xa0>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
                LV_GC_ROOT(_lv_layout_list)[layout_id - 1].cb(obj, user_data);
 801a870:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 801a874:	6851      	ldr	r1, [r2, #4]
 801a876:	4620      	mov	r0, r4
 801a878:	4798      	blx	r3
 801a87a:	e7d2      	b.n	801a822 <layout_update_core+0x2a>
        obj->readjust_scroll_after_layout = 0;
 801a87c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a880:	f023 0302 	bic.w	r3, r3, #2
 801a884:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
        lv_obj_readjust_scroll(obj, LV_ANIM_OFF);
 801a888:	2100      	movs	r1, #0
 801a88a:	4620      	mov	r0, r4
 801a88c:	f001 fb93 	bl	801bfb6 <lv_obj_readjust_scroll>
}
 801a890:	e7cc      	b.n	801a82c <layout_update_core+0x34>
 801a892:	bf00      	nop
 801a894:	200088bc 	.word	0x200088bc
 801a898:	20006814 	.word	0x20006814

0801a89c <lv_obj_update_layout>:
    if(mutex) {
 801a89c:	4b0e      	ldr	r3, [pc, #56]	@ (801a8d8 <lv_obj_update_layout+0x3c>)
 801a89e:	781b      	ldrb	r3, [r3, #0]
 801a8a0:	b103      	cbz	r3, 801a8a4 <lv_obj_update_layout+0x8>
 801a8a2:	4770      	bx	lr
{
 801a8a4:	b510      	push	{r4, lr}
    mutex = true;
 801a8a6:	4b0c      	ldr	r3, [pc, #48]	@ (801a8d8 <lv_obj_update_layout+0x3c>)
 801a8a8:	2201      	movs	r2, #1
 801a8aa:	701a      	strb	r2, [r3, #0]
    lv_obj_t * scr = lv_obj_get_screen(obj);
 801a8ac:	f002 fc66 	bl	801d17c <lv_obj_get_screen>
 801a8b0:	4604      	mov	r4, r0
    while(scr->scr_layout_inv) {
 801a8b2:	e008      	b.n	801a8c6 <lv_obj_update_layout+0x2a>
        scr->scr_layout_inv = 0;
 801a8b4:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a8b8:	f023 0304 	bic.w	r3, r3, #4
 801a8bc:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
        layout_update_core(scr);
 801a8c0:	4620      	mov	r0, r4
 801a8c2:	f7ff ff99 	bl	801a7f8 <layout_update_core>
    while(scr->scr_layout_inv) {
 801a8c6:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801a8ca:	f013 0f04 	tst.w	r3, #4
 801a8ce:	d1f1      	bne.n	801a8b4 <lv_obj_update_layout+0x18>
    mutex = false;
 801a8d0:	4b01      	ldr	r3, [pc, #4]	@ (801a8d8 <lv_obj_update_layout+0x3c>)
 801a8d2:	2200      	movs	r2, #0
 801a8d4:	701a      	strb	r2, [r3, #0]
}
 801a8d6:	bd10      	pop	{r4, pc}
 801a8d8:	200088b9 	.word	0x200088b9

0801a8dc <lv_obj_align_to>:
{
 801a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e0:	b085      	sub	sp, #20
 801a8e2:	4680      	mov	r8, r0
 801a8e4:	460d      	mov	r5, r1
 801a8e6:	9201      	str	r2, [sp, #4]
 801a8e8:	9302      	str	r3, [sp, #8]
    lv_obj_update_layout(obj);
 801a8ea:	f7ff ffd7 	bl	801a89c <lv_obj_update_layout>
    if(base == NULL) base = lv_obj_get_parent(obj);
 801a8ee:	2d00      	cmp	r5, #0
 801a8f0:	d054      	beq.n	801a99c <lv_obj_align_to+0xc0>
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801a8f2:	4640      	mov	r0, r8
 801a8f4:	f002 fc3e 	bl	801d174 <lv_obj_get_parent>
 801a8f8:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801a8fa:	2232      	movs	r2, #50	@ 0x32
 801a8fc:	2100      	movs	r1, #0
 801a8fe:	f001 fef9 	bl	801c6f4 <lv_obj_get_style_prop>
 801a902:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a904:	2212      	movs	r2, #18
 801a906:	2100      	movs	r1, #0
 801a908:	4638      	mov	r0, r7
 801a90a:	f001 fef3 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + pborder;
 801a90e:	b2a4      	uxth	r4, r4
 801a910:	fa14 fa80 	uxtah	sl, r4, r0
 801a914:	fa0f fa8a 	sxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a918:	2210      	movs	r2, #16
 801a91a:	2100      	movs	r1, #0
 801a91c:	4638      	mov	r0, r7
 801a91e:	f001 fee9 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + pborder;
 801a922:	fa14 f980 	uxtah	r9, r4, r0
 801a926:	fa0f f989 	sxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801a92a:	2232      	movs	r2, #50	@ 0x32
 801a92c:	2100      	movs	r1, #0
 801a92e:	4628      	mov	r0, r5
 801a930:	f001 fee0 	bl	801c6f4 <lv_obj_get_style_prop>
 801a934:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801a936:	2212      	movs	r2, #18
 801a938:	2100      	movs	r1, #0
 801a93a:	4628      	mov	r0, r5
 801a93c:	f001 feda 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t bleft = lv_obj_get_style_pad_left(base, LV_PART_MAIN) + bborder;
 801a940:	fa1f fb8b 	uxth.w	fp, fp
 801a944:	fa1b f480 	uxtah	r4, fp, r0
 801a948:	b2a3      	uxth	r3, r4
 801a94a:	9303      	str	r3, [sp, #12]
 801a94c:	b224      	sxth	r4, r4
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801a94e:	2210      	movs	r2, #16
 801a950:	2100      	movs	r1, #0
 801a952:	4628      	mov	r0, r5
 801a954:	f001 fece 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t btop = lv_obj_get_style_pad_top(base, LV_PART_MAIN) + bborder;
 801a958:	fa1b f680 	uxtah	r6, fp, r0
 801a95c:	fa1f fb86 	uxth.w	fp, r6
 801a960:	b236      	sxth	r6, r6
    if(align == LV_ALIGN_DEFAULT) {
 801a962:	9b01      	ldr	r3, [sp, #4]
 801a964:	b1fb      	cbz	r3, 801a9a6 <lv_obj_align_to+0xca>
    switch(align) {
 801a966:	9b01      	ldr	r3, [sp, #4]
 801a968:	3b01      	subs	r3, #1
 801a96a:	2b14      	cmp	r3, #20
 801a96c:	d85a      	bhi.n	801aa24 <lv_obj_align_to+0x148>
 801a96e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a972:	0022      	.short	0x0022
 801a974:	00930080 	.word	0x00930080
 801a978:	00ae00a1 	.word	0x00ae00a1
 801a97c:	00e700cd 	.word	0x00e700cd
 801a980:	005c00f9 	.word	0x005c00f9
 801a984:	01200118 	.word	0x01200118
 801a988:	01470136 	.word	0x01470136
 801a98c:	0161014d 	.word	0x0161014d
 801a990:	01780170 	.word	0x01780170
 801a994:	019f018e 	.word	0x019f018e
 801a998:	01b901a5 	.word	0x01b901a5
    if(base == NULL) base = lv_obj_get_parent(obj);
 801a99c:	4640      	mov	r0, r8
 801a99e:	f002 fbe9 	bl	801d174 <lv_obj_get_parent>
 801a9a2:	4605      	mov	r5, r0
 801a9a4:	e7a5      	b.n	801a8f2 <lv_obj_align_to+0x16>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a9a6:	2216      	movs	r2, #22
 801a9a8:	2100      	movs	r1, #0
 801a9aa:	4628      	mov	r0, r5
 801a9ac:	f001 fea2 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a9b0:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(base, LV_PART_MAIN) == LV_BASE_DIR_RTL) align = LV_ALIGN_TOP_RIGHT;
 801a9b2:	2801      	cmp	r0, #1
 801a9b4:	d070      	beq.n	801aa98 <lv_obj_align_to+0x1bc>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801a9b6:	2216      	movs	r2, #22
 801a9b8:	2100      	movs	r1, #0
 801a9ba:	4638      	mov	r0, r7
 801a9bc:	f001 fe9a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801a9c0:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(parent, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801a9c2:	2801      	cmp	r0, #1
 801a9c4:	f000 819d 	beq.w	801ad02 <lv_obj_align_to+0x426>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_left(parent) - pleft;
 801a9c8:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 801a9cc:	9a02      	ldr	r2, [sp, #8]
 801a9ce:	441a      	add	r2, r3
 801a9d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a9d4:	eba2 0b03 	sub.w	fp, r2, r3
 801a9d8:	4638      	mov	r0, r7
 801a9da:	f000 fa75 	bl	801aec8 <lv_obj_get_scroll_left>
 801a9de:	4483      	add	fp, r0
 801a9e0:	ebab 0a0a 	sub.w	sl, fp, sl
 801a9e4:	44a2      	add	sl, r4
 801a9e6:	fa0f fa8a 	sxth.w	sl, sl
    y += y_ofs + base->coords.y1 - parent->coords.y1 + lv_obj_get_scroll_top(parent) - ptop;
 801a9ea:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801a9ee:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	@ 0x38
 801a9f2:	441c      	add	r4, r3
 801a9f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a9f8:	1ae4      	subs	r4, r4, r3
 801a9fa:	4638      	mov	r0, r7
 801a9fc:	f000 fa04 	bl	801ae08 <lv_obj_get_scroll_top>
 801aa00:	4404      	add	r4, r0
 801aa02:	eba4 0409 	sub.w	r4, r4, r9
 801aa06:	4434      	add	r4, r6
 801aa08:	b224      	sxth	r4, r4
    lv_obj_set_style_align(obj, LV_ALIGN_TOP_LEFT, 0);
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	2101      	movs	r1, #1
 801aa0e:	4640      	mov	r0, r8
 801aa10:	f002 fb5c 	bl	801d0cc <lv_obj_set_style_align>
    lv_obj_set_pos(obj, x, y);
 801aa14:	4622      	mov	r2, r4
 801aa16:	4651      	mov	r1, sl
 801aa18:	4640      	mov	r0, r8
 801aa1a:	f7fe fd5b 	bl	80194d4 <lv_obj_set_pos>
}
 801aa1e:	b005      	add	sp, #20
 801aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(align) {
 801aa24:	2600      	movs	r6, #0
 801aa26:	4634      	mov	r4, r6
 801aa28:	e7c5      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 801aa2a:	4628      	mov	r0, r5
 801aa2c:	f7fe fe6a 	bl	8019704 <lv_obj_get_content_width>
 801aa30:	4604      	mov	r4, r0
 801aa32:	4640      	mov	r0, r8
 801aa34:	f7fe fe4c 	bl	80196d0 <lv_obj_get_width>
 801aa38:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801aa3c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801aa40:	1044      	asrs	r4, r0, #1
 801aa42:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801aa46:	9b03      	ldr	r3, [sp, #12]
 801aa48:	fa13 f484 	uxtah	r4, r3, r4
 801aa4c:	b224      	sxth	r4, r4
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 801aa4e:	4628      	mov	r0, r5
 801aa50:	f7fe fe78 	bl	8019744 <lv_obj_get_content_height>
 801aa54:	4606      	mov	r6, r0
 801aa56:	4640      	mov	r0, r8
 801aa58:	f7fe fe41 	bl	80196de <lv_obj_get_height>
 801aa5c:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801aa60:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801aa64:	1046      	asrs	r6, r0, #1
 801aa66:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 801aa6a:	fa1b f686 	uxtah	r6, fp, r6
 801aa6e:	b236      	sxth	r6, r6
            break;
 801aa70:	e7a1      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 801aa72:	4628      	mov	r0, r5
 801aa74:	f7fe fe46 	bl	8019704 <lv_obj_get_content_width>
 801aa78:	4604      	mov	r4, r0
 801aa7a:	4640      	mov	r0, r8
 801aa7c:	f7fe fe28 	bl	80196d0 <lv_obj_get_width>
 801aa80:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801aa84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801aa88:	1044      	asrs	r4, r0, #1
 801aa8a:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801aa8e:	9b03      	ldr	r3, [sp, #12]
 801aa90:	fa13 f484 	uxtah	r4, r3, r4
 801aa94:	b224      	sxth	r4, r4
            break;
 801aa96:	e78e      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 801aa98:	4628      	mov	r0, r5
 801aa9a:	f7fe fe33 	bl	8019704 <lv_obj_get_content_width>
 801aa9e:	b284      	uxth	r4, r0
 801aaa0:	4640      	mov	r0, r8
 801aaa2:	f7fe fe15 	bl	80196d0 <lv_obj_get_width>
 801aaa6:	b280      	uxth	r0, r0
 801aaa8:	1a24      	subs	r4, r4, r0
 801aaaa:	9b03      	ldr	r3, [sp, #12]
 801aaac:	fa13 f484 	uxtah	r4, r3, r4
 801aab0:	b224      	sxth	r4, r4
            break;
 801aab2:	e780      	b.n	801a9b6 <lv_obj_align_to+0xda>
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 801aab4:	4628      	mov	r0, r5
 801aab6:	f7fe fe45 	bl	8019744 <lv_obj_get_content_height>
 801aaba:	b286      	uxth	r6, r0
 801aabc:	4640      	mov	r0, r8
 801aabe:	f7fe fe0e 	bl	80196de <lv_obj_get_height>
 801aac2:	b280      	uxth	r0, r0
 801aac4:	1a36      	subs	r6, r6, r0
 801aac6:	fa1b f686 	uxtah	r6, fp, r6
 801aaca:	b236      	sxth	r6, r6
            break;
 801aacc:	e773      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) / 2 - lv_obj_get_width(obj) / 2 + bleft;
 801aace:	4628      	mov	r0, r5
 801aad0:	f7fe fe18 	bl	8019704 <lv_obj_get_content_width>
 801aad4:	4604      	mov	r4, r0
 801aad6:	4640      	mov	r0, r8
 801aad8:	f7fe fdfa 	bl	80196d0 <lv_obj_get_width>
 801aadc:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801aae0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801aae4:	1044      	asrs	r4, r0, #1
 801aae6:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801aaea:	9b03      	ldr	r3, [sp, #12]
 801aaec:	fa13 f484 	uxtah	r4, r3, r4
 801aaf0:	b224      	sxth	r4, r4
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	f7fe fe26 	bl	8019744 <lv_obj_get_content_height>
 801aaf8:	b286      	uxth	r6, r0
 801aafa:	4640      	mov	r0, r8
 801aafc:	f7fe fdef 	bl	80196de <lv_obj_get_height>
 801ab00:	b280      	uxth	r0, r0
 801ab02:	1a36      	subs	r6, r6, r0
 801ab04:	fa1b f686 	uxtah	r6, fp, r6
 801ab08:	b236      	sxth	r6, r6
            break;
 801ab0a:	e754      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 801ab0c:	4628      	mov	r0, r5
 801ab0e:	f7fe fdf9 	bl	8019704 <lv_obj_get_content_width>
 801ab12:	b284      	uxth	r4, r0
 801ab14:	4640      	mov	r0, r8
 801ab16:	f7fe fddb 	bl	80196d0 <lv_obj_get_width>
 801ab1a:	b280      	uxth	r0, r0
 801ab1c:	1a24      	subs	r4, r4, r0
 801ab1e:	9b03      	ldr	r3, [sp, #12]
 801ab20:	fa13 f484 	uxtah	r4, r3, r4
 801ab24:	b224      	sxth	r4, r4
            y = lv_obj_get_content_height(base) - lv_obj_get_height(obj) + btop;
 801ab26:	4628      	mov	r0, r5
 801ab28:	f7fe fe0c 	bl	8019744 <lv_obj_get_content_height>
 801ab2c:	b286      	uxth	r6, r0
 801ab2e:	4640      	mov	r0, r8
 801ab30:	f7fe fdd5 	bl	80196de <lv_obj_get_height>
 801ab34:	b280      	uxth	r0, r0
 801ab36:	1a36      	subs	r6, r6, r0
 801ab38:	fa1b f686 	uxtah	r6, fp, r6
 801ab3c:	b236      	sxth	r6, r6
            break;
 801ab3e:	e73a      	b.n	801a9b6 <lv_obj_align_to+0xda>
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 801ab40:	4628      	mov	r0, r5
 801ab42:	f7fe fdff 	bl	8019744 <lv_obj_get_content_height>
 801ab46:	4606      	mov	r6, r0
 801ab48:	4640      	mov	r0, r8
 801ab4a:	f7fe fdc8 	bl	80196de <lv_obj_get_height>
 801ab4e:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801ab52:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ab56:	1046      	asrs	r6, r0, #1
 801ab58:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 801ab5c:	fa1b f686 	uxtah	r6, fp, r6
 801ab60:	b236      	sxth	r6, r6
            break;
 801ab62:	e728      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_content_width(base) - lv_obj_get_width(obj) + bleft;
 801ab64:	4628      	mov	r0, r5
 801ab66:	f7fe fdcd 	bl	8019704 <lv_obj_get_content_width>
 801ab6a:	b284      	uxth	r4, r0
 801ab6c:	4640      	mov	r0, r8
 801ab6e:	f7fe fdaf 	bl	80196d0 <lv_obj_get_width>
 801ab72:	b280      	uxth	r0, r0
 801ab74:	1a24      	subs	r4, r4, r0
 801ab76:	9b03      	ldr	r3, [sp, #12]
 801ab78:	fa13 f484 	uxtah	r4, r3, r4
 801ab7c:	b224      	sxth	r4, r4
            y = lv_obj_get_content_height(base) / 2 - lv_obj_get_height(obj) / 2 + btop;
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f7fe fde0 	bl	8019744 <lv_obj_get_content_height>
 801ab84:	4606      	mov	r6, r0
 801ab86:	4640      	mov	r0, r8
 801ab88:	f7fe fda9 	bl	80196de <lv_obj_get_height>
 801ab8c:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 801ab90:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ab94:	1046      	asrs	r6, r0, #1
 801ab96:	ebc6 0663 	rsb	r6, r6, r3, asr #1
 801ab9a:	fa1b f686 	uxtah	r6, fp, r6
 801ab9e:	b236      	sxth	r6, r6
            break;
 801aba0:	e709      	b.n	801a9b6 <lv_obj_align_to+0xda>
            y = -lv_obj_get_height(obj);
 801aba2:	4640      	mov	r0, r8
 801aba4:	f7fe fd9b 	bl	80196de <lv_obj_get_height>
 801aba8:	b286      	uxth	r6, r0
 801abaa:	4276      	negs	r6, r6
 801abac:	b236      	sxth	r6, r6
            x = 0;
 801abae:	2400      	movs	r4, #0
            break;
 801abb0:	e701      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 801abb2:	4628      	mov	r0, r5
 801abb4:	f7fe fd8c 	bl	80196d0 <lv_obj_get_width>
 801abb8:	4604      	mov	r4, r0
 801abba:	4640      	mov	r0, r8
 801abbc:	f7fe fd88 	bl	80196d0 <lv_obj_get_width>
 801abc0:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801abc4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801abc8:	1044      	asrs	r4, r0, #1
 801abca:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801abce:	b224      	sxth	r4, r4
            y = -lv_obj_get_height(obj);
 801abd0:	4640      	mov	r0, r8
 801abd2:	f7fe fd84 	bl	80196de <lv_obj_get_height>
 801abd6:	b286      	uxth	r6, r0
 801abd8:	4276      	negs	r6, r6
 801abda:	b236      	sxth	r6, r6
            break;
 801abdc:	e6eb      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 801abde:	4628      	mov	r0, r5
 801abe0:	f7fe fd76 	bl	80196d0 <lv_obj_get_width>
 801abe4:	b284      	uxth	r4, r0
 801abe6:	4640      	mov	r0, r8
 801abe8:	f7fe fd72 	bl	80196d0 <lv_obj_get_width>
 801abec:	b280      	uxth	r0, r0
 801abee:	1a24      	subs	r4, r4, r0
 801abf0:	b224      	sxth	r4, r4
            y = -lv_obj_get_height(obj);
 801abf2:	4640      	mov	r0, r8
 801abf4:	f7fe fd73 	bl	80196de <lv_obj_get_height>
 801abf8:	b286      	uxth	r6, r0
 801abfa:	4276      	negs	r6, r6
 801abfc:	b236      	sxth	r6, r6
            break;
 801abfe:	e6da      	b.n	801a9b6 <lv_obj_align_to+0xda>
            y = lv_obj_get_height(base);
 801ac00:	4628      	mov	r0, r5
 801ac02:	f7fe fd6c 	bl	80196de <lv_obj_get_height>
 801ac06:	4606      	mov	r6, r0
            x = 0;
 801ac08:	2400      	movs	r4, #0
            break;
 801ac0a:	e6d4      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 801ac0c:	4628      	mov	r0, r5
 801ac0e:	f7fe fd5f 	bl	80196d0 <lv_obj_get_width>
 801ac12:	4604      	mov	r4, r0
 801ac14:	4640      	mov	r0, r8
 801ac16:	f7fe fd5b 	bl	80196d0 <lv_obj_get_width>
 801ac1a:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801ac1e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ac22:	1044      	asrs	r4, r0, #1
 801ac24:	ebc4 0463 	rsb	r4, r4, r3, asr #1
 801ac28:	b224      	sxth	r4, r4
            y = lv_obj_get_height(base);
 801ac2a:	4628      	mov	r0, r5
 801ac2c:	f7fe fd57 	bl	80196de <lv_obj_get_height>
 801ac30:	4606      	mov	r6, r0
            break;
 801ac32:	e6c0      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 801ac34:	4628      	mov	r0, r5
 801ac36:	f7fe fd4b 	bl	80196d0 <lv_obj_get_width>
 801ac3a:	b284      	uxth	r4, r0
 801ac3c:	4640      	mov	r0, r8
 801ac3e:	f7fe fd47 	bl	80196d0 <lv_obj_get_width>
 801ac42:	b280      	uxth	r0, r0
 801ac44:	1a24      	subs	r4, r4, r0
 801ac46:	b224      	sxth	r4, r4
            y = lv_obj_get_height(base);
 801ac48:	4628      	mov	r0, r5
 801ac4a:	f7fe fd48 	bl	80196de <lv_obj_get_height>
 801ac4e:	4606      	mov	r6, r0
            break;
 801ac50:	e6b1      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = -lv_obj_get_width(obj);
 801ac52:	4640      	mov	r0, r8
 801ac54:	f7fe fd3c 	bl	80196d0 <lv_obj_get_width>
 801ac58:	b284      	uxth	r4, r0
 801ac5a:	4264      	negs	r4, r4
 801ac5c:	b224      	sxth	r4, r4
            y = 0;
 801ac5e:	2600      	movs	r6, #0
            break;
 801ac60:	e6a9      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = -lv_obj_get_width(obj);
 801ac62:	4640      	mov	r0, r8
 801ac64:	f7fe fd34 	bl	80196d0 <lv_obj_get_width>
 801ac68:	b284      	uxth	r4, r0
 801ac6a:	4264      	negs	r4, r4
 801ac6c:	b224      	sxth	r4, r4
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 801ac6e:	4628      	mov	r0, r5
 801ac70:	f7fe fd35 	bl	80196de <lv_obj_get_height>
 801ac74:	4606      	mov	r6, r0
 801ac76:	4640      	mov	r0, r8
 801ac78:	f7fe fd31 	bl	80196de <lv_obj_get_height>
 801ac7c:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801ac80:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ac84:	1040      	asrs	r0, r0, #1
 801ac86:	ebc0 0666 	rsb	r6, r0, r6, asr #1
 801ac8a:	b236      	sxth	r6, r6
            break;
 801ac8c:	e693      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = -lv_obj_get_width(obj);
 801ac8e:	4640      	mov	r0, r8
 801ac90:	f7fe fd1e 	bl	80196d0 <lv_obj_get_width>
 801ac94:	b284      	uxth	r4, r0
 801ac96:	4264      	negs	r4, r4
 801ac98:	b224      	sxth	r4, r4
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	f7fe fd1f 	bl	80196de <lv_obj_get_height>
 801aca0:	b286      	uxth	r6, r0
 801aca2:	4640      	mov	r0, r8
 801aca4:	f7fe fd1b 	bl	80196de <lv_obj_get_height>
 801aca8:	b280      	uxth	r0, r0
 801acaa:	1a36      	subs	r6, r6, r0
 801acac:	b236      	sxth	r6, r6
            break;
 801acae:	e682      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base);
 801acb0:	4628      	mov	r0, r5
 801acb2:	f7fe fd0d 	bl	80196d0 <lv_obj_get_width>
 801acb6:	4604      	mov	r4, r0
            y = 0;
 801acb8:	2600      	movs	r6, #0
            break;
 801acba:	e67c      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base);
 801acbc:	4628      	mov	r0, r5
 801acbe:	f7fe fd07 	bl	80196d0 <lv_obj_get_width>
 801acc2:	4604      	mov	r4, r0
            y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 801acc4:	4628      	mov	r0, r5
 801acc6:	f7fe fd0a 	bl	80196de <lv_obj_get_height>
 801acca:	4606      	mov	r6, r0
 801accc:	4640      	mov	r0, r8
 801acce:	f7fe fd06 	bl	80196de <lv_obj_get_height>
 801acd2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801acd6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801acda:	1040      	asrs	r0, r0, #1
 801acdc:	ebc0 0666 	rsb	r6, r0, r6, asr #1
 801ace0:	b236      	sxth	r6, r6
            break;
 801ace2:	e668      	b.n	801a9b6 <lv_obj_align_to+0xda>
            x = lv_obj_get_width(base);
 801ace4:	4628      	mov	r0, r5
 801ace6:	f7fe fcf3 	bl	80196d0 <lv_obj_get_width>
 801acea:	4604      	mov	r4, r0
            y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 801acec:	4628      	mov	r0, r5
 801acee:	f7fe fcf6 	bl	80196de <lv_obj_get_height>
 801acf2:	b286      	uxth	r6, r0
 801acf4:	4640      	mov	r0, r8
 801acf6:	f7fe fcf2 	bl	80196de <lv_obj_get_height>
 801acfa:	b280      	uxth	r0, r0
 801acfc:	1a36      	subs	r6, r6, r0
 801acfe:	b236      	sxth	r6, r6
            break;
 801ad00:	e659      	b.n	801a9b6 <lv_obj_align_to+0xda>
        x += x_ofs + base->coords.x1 - parent->coords.x1 + lv_obj_get_scroll_right(parent) - pleft;
 801ad02:	f9b5 b014 	ldrsh.w	fp, [r5, #20]
 801ad06:	9b02      	ldr	r3, [sp, #8]
 801ad08:	445b      	add	r3, fp
 801ad0a:	469b      	mov	fp, r3
 801ad0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ad10:	ebab 0b03 	sub.w	fp, fp, r3
 801ad14:	4638      	mov	r0, r7
 801ad16:	f000 f949 	bl	801afac <lv_obj_get_scroll_right>
 801ad1a:	4483      	add	fp, r0
 801ad1c:	ebab 0b0a 	sub.w	fp, fp, sl
 801ad20:	44a3      	add	fp, r4
 801ad22:	fa0f fa8b 	sxth.w	sl, fp
 801ad26:	e660      	b.n	801a9ea <lv_obj_align_to+0x10e>

0801ad28 <scroll_anim_ready_cb>:
{
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
}

static void scroll_anim_ready_cb(lv_anim_t * a)
{
 801ad28:	b508      	push	{r3, lr}
    lv_event_send(a->var, LV_EVENT_SCROLL_END, NULL);
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	210a      	movs	r1, #10
 801ad2e:	6800      	ldr	r0, [r0, #0]
 801ad30:	f7f5 ffca 	bl	8010cc8 <lv_event_send>
}
 801ad34:	bd08      	pop	{r3, pc}

0801ad36 <lv_obj_set_scrollbar_mode>:
{
 801ad36:	b538      	push	{r3, r4, r5, lr}
 801ad38:	4604      	mov	r4, r0
 801ad3a:	460d      	mov	r5, r1
    lv_obj_allocate_spec_attr(obj);
 801ad3c:	f7fd fe28 	bl	8018990 <lv_obj_allocate_spec_attr>
    if(obj->spec_attr->scrollbar_mode == mode) return;
 801ad40:	68a2      	ldr	r2, [r4, #8]
 801ad42:	7e13      	ldrb	r3, [r2, #24]
 801ad44:	f003 0303 	and.w	r3, r3, #3
 801ad48:	42ab      	cmp	r3, r5
 801ad4a:	d006      	beq.n	801ad5a <lv_obj_set_scrollbar_mode+0x24>
    obj->spec_attr->scrollbar_mode = mode;
 801ad4c:	7e13      	ldrb	r3, [r2, #24]
 801ad4e:	f365 0301 	bfi	r3, r5, #0, #2
 801ad52:	7613      	strb	r3, [r2, #24]
    lv_obj_invalidate(obj);
 801ad54:	4620      	mov	r0, r4
 801ad56:	f7ff f8a6 	bl	8019ea6 <lv_obj_invalidate>
}
 801ad5a:	bd38      	pop	{r3, r4, r5, pc}

0801ad5c <lv_obj_set_scroll_dir>:
{
 801ad5c:	b538      	push	{r3, r4, r5, lr}
 801ad5e:	4605      	mov	r5, r0
 801ad60:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801ad62:	f7fd fe15 	bl	8018990 <lv_obj_allocate_spec_attr>
    if(dir != obj->spec_attr->scroll_dir) {
 801ad66:	68aa      	ldr	r2, [r5, #8]
 801ad68:	7e53      	ldrb	r3, [r2, #25]
 801ad6a:	f003 030f 	and.w	r3, r3, #15
 801ad6e:	42a3      	cmp	r3, r4
 801ad70:	d003      	beq.n	801ad7a <lv_obj_set_scroll_dir+0x1e>
        obj->spec_attr->scroll_dir = dir;
 801ad72:	7e53      	ldrb	r3, [r2, #25]
 801ad74:	f364 0303 	bfi	r3, r4, #0, #4
 801ad78:	7653      	strb	r3, [r2, #25]
}
 801ad7a:	bd38      	pop	{r3, r4, r5, pc}

0801ad7c <lv_obj_set_scroll_snap_x>:
{
 801ad7c:	b538      	push	{r3, r4, r5, lr}
 801ad7e:	4605      	mov	r5, r0
 801ad80:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801ad82:	f7fd fe05 	bl	8018990 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_x = align;
 801ad86:	68ab      	ldr	r3, [r5, #8]
 801ad88:	7e1a      	ldrb	r2, [r3, #24]
 801ad8a:	f364 0283 	bfi	r2, r4, #2, #2
 801ad8e:	761a      	strb	r2, [r3, #24]
}
 801ad90:	bd38      	pop	{r3, r4, r5, pc}

0801ad92 <lv_obj_set_scroll_snap_y>:
{
 801ad92:	b538      	push	{r3, r4, r5, lr}
 801ad94:	4605      	mov	r5, r0
 801ad96:	460c      	mov	r4, r1
    lv_obj_allocate_spec_attr(obj);
 801ad98:	f7fd fdfa 	bl	8018990 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll_snap_y = align;
 801ad9c:	68ab      	ldr	r3, [r5, #8]
 801ad9e:	7e1a      	ldrb	r2, [r3, #24]
 801ada0:	f364 1205 	bfi	r2, r4, #4, #2
 801ada4:	761a      	strb	r2, [r3, #24]
}
 801ada6:	bd38      	pop	{r3, r4, r5, pc}

0801ada8 <lv_obj_get_scrollbar_mode>:
    if(obj->spec_attr) return obj->spec_attr->scrollbar_mode;
 801ada8:	6883      	ldr	r3, [r0, #8]
 801adaa:	b11b      	cbz	r3, 801adb4 <lv_obj_get_scrollbar_mode+0xc>
 801adac:	7e18      	ldrb	r0, [r3, #24]
 801adae:	f000 0003 	and.w	r0, r0, #3
 801adb2:	4770      	bx	lr
    else return LV_SCROLLBAR_MODE_AUTO;
 801adb4:	2003      	movs	r0, #3
}
 801adb6:	4770      	bx	lr

0801adb8 <lv_obj_get_scroll_dir>:
    if(obj->spec_attr) return obj->spec_attr->scroll_dir;
 801adb8:	6883      	ldr	r3, [r0, #8]
 801adba:	b11b      	cbz	r3, 801adc4 <lv_obj_get_scroll_dir+0xc>
 801adbc:	7e58      	ldrb	r0, [r3, #25]
 801adbe:	f000 000f 	and.w	r0, r0, #15
 801adc2:	4770      	bx	lr
    else return LV_DIR_ALL;
 801adc4:	200f      	movs	r0, #15
}
 801adc6:	4770      	bx	lr

0801adc8 <lv_obj_get_scroll_snap_x>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_x;
 801adc8:	6883      	ldr	r3, [r0, #8]
 801adca:	b11b      	cbz	r3, 801add4 <lv_obj_get_scroll_snap_x+0xc>
 801adcc:	7e18      	ldrb	r0, [r3, #24]
 801adce:	f3c0 0081 	ubfx	r0, r0, #2, #2
 801add2:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 801add4:	2000      	movs	r0, #0
}
 801add6:	4770      	bx	lr

0801add8 <lv_obj_get_scroll_snap_y>:
    if(obj->spec_attr) return obj->spec_attr->scroll_snap_y;
 801add8:	6883      	ldr	r3, [r0, #8]
 801adda:	b11b      	cbz	r3, 801ade4 <lv_obj_get_scroll_snap_y+0xc>
 801addc:	7e18      	ldrb	r0, [r3, #24]
 801adde:	f3c0 1001 	ubfx	r0, r0, #4, #2
 801ade2:	4770      	bx	lr
    else return LV_SCROLL_SNAP_NONE;
 801ade4:	2000      	movs	r0, #0
}
 801ade6:	4770      	bx	lr

0801ade8 <lv_obj_get_scroll_x>:
    if(obj->spec_attr == NULL) return 0;
 801ade8:	6883      	ldr	r3, [r0, #8]
 801adea:	b11b      	cbz	r3, 801adf4 <lv_obj_get_scroll_x+0xc>
    return -obj->spec_attr->scroll.x;
 801adec:	8a18      	ldrh	r0, [r3, #16]
 801adee:	4240      	negs	r0, r0
 801adf0:	b200      	sxth	r0, r0
 801adf2:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 801adf4:	2000      	movs	r0, #0
}
 801adf6:	4770      	bx	lr

0801adf8 <lv_obj_get_scroll_y>:
    if(obj->spec_attr == NULL) return 0;
 801adf8:	6883      	ldr	r3, [r0, #8]
 801adfa:	b11b      	cbz	r3, 801ae04 <lv_obj_get_scroll_y+0xc>
    return -obj->spec_attr->scroll.y;
 801adfc:	8a58      	ldrh	r0, [r3, #18]
 801adfe:	4240      	negs	r0, r0
 801ae00:	b200      	sxth	r0, r0
 801ae02:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 801ae04:	2000      	movs	r0, #0
}
 801ae06:	4770      	bx	lr

0801ae08 <lv_obj_get_scroll_top>:
    if(obj->spec_attr == NULL) return 0;
 801ae08:	6883      	ldr	r3, [r0, #8]
 801ae0a:	b11b      	cbz	r3, 801ae14 <lv_obj_get_scroll_top+0xc>
    return -obj->spec_attr->scroll.y;
 801ae0c:	8a58      	ldrh	r0, [r3, #18]
 801ae0e:	4240      	negs	r0, r0
 801ae10:	b200      	sxth	r0, r0
 801ae12:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 801ae14:	2000      	movs	r0, #0
}
 801ae16:	4770      	bx	lr

0801ae18 <lv_obj_get_scroll_bottom>:
{
 801ae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae1c:	4606      	mov	r6, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801ae1e:	f002 f9e8 	bl	801d1f2 <lv_obj_get_child_cnt>
 801ae22:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 801ae24:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 801ae26:	4f26      	ldr	r7, [pc, #152]	@ (801aec0 <lv_obj_get_scroll_bottom+0xa8>)
    for(i = 0; i < child_cnt; i++) {
 801ae28:	e005      	b.n	801ae36 <lv_obj_get_scroll_bottom+0x1e>
        child_res = LV_MAX(child_res, child->coords.y2);
 801ae2a:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 801ae2e:	429f      	cmp	r7, r3
 801ae30:	bfb8      	it	lt
 801ae32:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 801ae34:	3401      	adds	r4, #1
 801ae36:	4544      	cmp	r4, r8
 801ae38:	d20a      	bcs.n	801ae50 <lv_obj_get_scroll_bottom+0x38>
        lv_obj_t * child = obj->spec_attr->children[i];
 801ae3a:	68b3      	ldr	r3, [r6, #8]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801ae42:	4920      	ldr	r1, [pc, #128]	@ (801aec4 <lv_obj_get_scroll_bottom+0xac>)
 801ae44:	4628      	mov	r0, r5
 801ae46:	f7fd fb28 	bl	801849a <lv_obj_has_flag_any>
 801ae4a:	2800      	cmp	r0, #0
 801ae4c:	d0ed      	beq.n	801ae2a <lv_obj_get_scroll_bottom+0x12>
 801ae4e:	e7f1      	b.n	801ae34 <lv_obj_get_scroll_bottom+0x1c>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ae50:	2210      	movs	r2, #16
 801ae52:	2100      	movs	r1, #0
 801ae54:	4630      	mov	r0, r6
 801ae56:	f001 fc4d 	bl	801c6f4 <lv_obj_get_style_prop>
 801ae5a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ae5c:	2211      	movs	r2, #17
 801ae5e:	2100      	movs	r1, #0
 801ae60:	4630      	mov	r0, r6
 801ae62:	f001 fc47 	bl	801c6f4 <lv_obj_get_style_prop>
 801ae66:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801ae68:	2232      	movs	r2, #50	@ 0x32
 801ae6a:	2100      	movs	r1, #0
 801ae6c:	4630      	mov	r0, r6
 801ae6e:	f001 fc41 	bl	801c6f4 <lv_obj_get_style_prop>
 801ae72:	4605      	mov	r5, r0
    if(child_res != LV_COORD_MIN) {
 801ae74:	4b12      	ldr	r3, [pc, #72]	@ (801aec0 <lv_obj_get_scroll_bottom+0xa8>)
 801ae76:	429f      	cmp	r7, r3
 801ae78:	d005      	beq.n	801ae86 <lv_obj_get_scroll_bottom+0x6e>
        child_res -= (obj->coords.y2 - pad_bottom - border_width);
 801ae7a:	8b73      	ldrh	r3, [r6, #26]
 801ae7c:	eba9 0303 	sub.w	r3, r9, r3
 801ae80:	4403      	add	r3, r0
 801ae82:	443b      	add	r3, r7
 801ae84:	b21f      	sxth	r7, r3
    lv_coord_t self_h = lv_obj_get_self_height(obj);
 801ae86:	4630      	mov	r0, r6
 801ae88:	f7fe fdbe 	bl	8019a08 <lv_obj_get_self_height>
 801ae8c:	4680      	mov	r8, r0
    self_h = self_h - (lv_obj_get_height(obj) - pad_top - pad_bottom - 2 * border_width);
 801ae8e:	006d      	lsls	r5, r5, #1
 801ae90:	b2ad      	uxth	r5, r5
 801ae92:	4630      	mov	r0, r6
 801ae94:	f7fe fc23 	bl	80196de <lv_obj_get_height>
 801ae98:	b280      	uxth	r0, r0
 801ae9a:	1a24      	subs	r4, r4, r0
 801ae9c:	fa19 f484 	uxtah	r4, r9, r4
 801aea0:	fa15 f484 	uxtah	r4, r5, r4
 801aea4:	fa18 f484 	uxtah	r4, r8, r4
 801aea8:	b2a4      	uxth	r4, r4
    self_h -= lv_obj_get_scroll_y(obj);
 801aeaa:	4630      	mov	r0, r6
 801aeac:	f7ff ffa4 	bl	801adf8 <lv_obj_get_scroll_y>
 801aeb0:	b280      	uxth	r0, r0
 801aeb2:	1a20      	subs	r0, r4, r0
 801aeb4:	b200      	sxth	r0, r0
}
 801aeb6:	42b8      	cmp	r0, r7
 801aeb8:	bfb8      	it	lt
 801aeba:	4638      	movlt	r0, r7
 801aebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aec0:	ffffe001 	.word	0xffffe001
 801aec4:	00040001 	.word	0x00040001

0801aec8 <lv_obj_get_scroll_left>:
{
 801aec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aecc:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801aece:	2216      	movs	r2, #22
 801aed0:	2100      	movs	r1, #0
 801aed2:	f001 fc0f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801aed6:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801aed8:	2801      	cmp	r0, #1
 801aeda:	d007      	beq.n	801aeec <lv_obj_get_scroll_left+0x24>
        if(obj->spec_attr == NULL) return 0;
 801aedc:	68a3      	ldr	r3, [r4, #8]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d05d      	beq.n	801af9e <lv_obj_get_scroll_left+0xd6>
        return -obj->spec_attr->scroll.x;
 801aee2:	8a18      	ldrh	r0, [r3, #16]
 801aee4:	4240      	negs	r0, r0
 801aee6:	b200      	sxth	r0, r0
}
 801aee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801aeec:	2213      	movs	r2, #19
 801aeee:	2100      	movs	r1, #0
 801aef0:	4620      	mov	r0, r4
 801aef2:	f001 fbff 	bl	801c6f4 <lv_obj_get_style_prop>
 801aef6:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801aef8:	2212      	movs	r2, #18
 801aefa:	2100      	movs	r1, #0
 801aefc:	4620      	mov	r0, r4
 801aefe:	f001 fbf9 	bl	801c6f4 <lv_obj_get_style_prop>
 801af02:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801af04:	2232      	movs	r2, #50	@ 0x32
 801af06:	2100      	movs	r1, #0
 801af08:	4620      	mov	r0, r4
 801af0a:	f001 fbf3 	bl	801c6f4 <lv_obj_get_style_prop>
 801af0e:	4682      	mov	sl, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801af10:	4620      	mov	r0, r4
 801af12:	f002 f96e 	bl	801d1f2 <lv_obj_get_child_cnt>
 801af16:	4681      	mov	r9, r0
    lv_coord_t x1 = LV_COORD_MAX;
 801af18:	f641 78ff 	movw	r8, #8191	@ 0x1fff
    for(i = 0; i < child_cnt; i++) {
 801af1c:	2500      	movs	r5, #0
 801af1e:	e005      	b.n	801af2c <lv_obj_get_scroll_left+0x64>
        x1 = LV_MIN(x1, child->coords.x1);
 801af20:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
 801af24:	4598      	cmp	r8, r3
 801af26:	bfa8      	it	ge
 801af28:	4698      	movge	r8, r3
    for(i = 0; i < child_cnt; i++) {
 801af2a:	3501      	adds	r5, #1
 801af2c:	454d      	cmp	r5, r9
 801af2e:	d20a      	bcs.n	801af46 <lv_obj_get_scroll_left+0x7e>
        lv_obj_t * child = obj->spec_attr->children[i];
 801af30:	68a3      	ldr	r3, [r4, #8]
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801af38:	491a      	ldr	r1, [pc, #104]	@ (801afa4 <lv_obj_get_scroll_left+0xdc>)
 801af3a:	4630      	mov	r0, r6
 801af3c:	f7fd faad 	bl	801849a <lv_obj_has_flag_any>
 801af40:	2800      	cmp	r0, #0
 801af42:	d0ed      	beq.n	801af20 <lv_obj_get_scroll_left+0x58>
 801af44:	e7f1      	b.n	801af2a <lv_obj_get_scroll_left+0x62>
    if(x1 != LV_COORD_MAX) {
 801af46:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 801af4a:	4598      	cmp	r8, r3
 801af4c:	d025      	beq.n	801af9a <lv_obj_get_scroll_left+0xd2>
        child_res = (obj->coords.x1 + pad_left + border_width) - child_res;
 801af4e:	8aa5      	ldrh	r5, [r4, #20]
 801af50:	445d      	add	r5, fp
 801af52:	fa1a f585 	uxtah	r5, sl, r5
 801af56:	b2ad      	uxth	r5, r5
 801af58:	eba5 0508 	sub.w	r5, r5, r8
 801af5c:	b22d      	sxth	r5, r5
    lv_coord_t self_w = lv_obj_get_self_width(obj);
 801af5e:	4620      	mov	r0, r4
 801af60:	f7fe fc47 	bl	80197f2 <lv_obj_get_self_width>
 801af64:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 801af66:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801af6a:	fa1f fa8a 	uxth.w	sl, sl
 801af6e:	4620      	mov	r0, r4
 801af70:	f7fe fbae 	bl	80196d0 <lv_obj_get_width>
 801af74:	b280      	uxth	r0, r0
 801af76:	1a3e      	subs	r6, r7, r0
 801af78:	fa1b f686 	uxtah	r6, fp, r6
 801af7c:	fa1a f686 	uxtah	r6, sl, r6
 801af80:	fa18 f686 	uxtah	r6, r8, r6
 801af84:	b2b6      	uxth	r6, r6
    self_w += lv_obj_get_scroll_x(obj);
 801af86:	4620      	mov	r0, r4
 801af88:	f7ff ff2e 	bl	801ade8 <lv_obj_get_scroll_x>
 801af8c:	fa16 f080 	uxtah	r0, r6, r0
 801af90:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 801af92:	42a8      	cmp	r0, r5
 801af94:	bfb8      	it	lt
 801af96:	4628      	movlt	r0, r5
 801af98:	e7a6      	b.n	801aee8 <lv_obj_get_scroll_left+0x20>
        child_res = LV_COORD_MIN;
 801af9a:	4d03      	ldr	r5, [pc, #12]	@ (801afa8 <lv_obj_get_scroll_left+0xe0>)
 801af9c:	e7df      	b.n	801af5e <lv_obj_get_scroll_left+0x96>
        if(obj->spec_attr == NULL) return 0;
 801af9e:	2000      	movs	r0, #0
 801afa0:	e7a2      	b.n	801aee8 <lv_obj_get_scroll_left+0x20>
 801afa2:	bf00      	nop
 801afa4:	00040001 	.word	0x00040001
 801afa8:	ffffe001 	.word	0xffffe001

0801afac <lv_obj_get_scroll_right>:
{
 801afac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afb0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801afb2:	2216      	movs	r2, #22
 801afb4:	2100      	movs	r1, #0
 801afb6:	f001 fb9d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801afba:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 801afbc:	2801      	cmp	r0, #1
 801afbe:	d105      	bne.n	801afcc <lv_obj_get_scroll_right+0x20>
        if(obj->spec_attr == NULL) return 0;
 801afc0:	68ab      	ldr	r3, [r5, #8]
 801afc2:	2b00      	cmp	r3, #0
 801afc4:	d053      	beq.n	801b06e <lv_obj_get_scroll_right+0xc2>
        return obj->spec_attr->scroll.x;
 801afc6:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
 801afca:	e04e      	b.n	801b06a <lv_obj_get_scroll_right+0xbe>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801afcc:	4628      	mov	r0, r5
 801afce:	f002 f910 	bl	801d1f2 <lv_obj_get_child_cnt>
 801afd2:	4680      	mov	r8, r0
    for(i = 0; i < child_cnt; i++) {
 801afd4:	2400      	movs	r4, #0
    lv_coord_t child_res = LV_COORD_MIN;
 801afd6:	4f27      	ldr	r7, [pc, #156]	@ (801b074 <lv_obj_get_scroll_right+0xc8>)
    for(i = 0; i < child_cnt; i++) {
 801afd8:	e005      	b.n	801afe6 <lv_obj_get_scroll_right+0x3a>
        child_res = LV_MAX(child_res, child->coords.x2);
 801afda:	f9b6 3018 	ldrsh.w	r3, [r6, #24]
 801afde:	429f      	cmp	r7, r3
 801afe0:	bfb8      	it	lt
 801afe2:	461f      	movlt	r7, r3
    for(i = 0; i < child_cnt; i++) {
 801afe4:	3401      	adds	r4, #1
 801afe6:	4544      	cmp	r4, r8
 801afe8:	d20a      	bcs.n	801b000 <lv_obj_get_scroll_right+0x54>
        lv_obj_t * child = obj->spec_attr->children[i];
 801afea:	68ab      	ldr	r3, [r5, #8]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        if(lv_obj_has_flag_any(child,  LV_OBJ_FLAG_HIDDEN | LV_OBJ_FLAG_FLOATING)) continue;
 801aff2:	4921      	ldr	r1, [pc, #132]	@ (801b078 <lv_obj_get_scroll_right+0xcc>)
 801aff4:	4630      	mov	r0, r6
 801aff6:	f7fd fa50 	bl	801849a <lv_obj_has_flag_any>
 801affa:	2800      	cmp	r0, #0
 801affc:	d0ed      	beq.n	801afda <lv_obj_get_scroll_right+0x2e>
 801affe:	e7f1      	b.n	801afe4 <lv_obj_get_scroll_right+0x38>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b000:	2213      	movs	r2, #19
 801b002:	2100      	movs	r1, #0
 801b004:	4628      	mov	r0, r5
 801b006:	f001 fb75 	bl	801c6f4 <lv_obj_get_style_prop>
 801b00a:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b00c:	2212      	movs	r2, #18
 801b00e:	2100      	movs	r1, #0
 801b010:	4628      	mov	r0, r5
 801b012:	f001 fb6f 	bl	801c6f4 <lv_obj_get_style_prop>
 801b016:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b018:	2232      	movs	r2, #50	@ 0x32
 801b01a:	2100      	movs	r1, #0
 801b01c:	4628      	mov	r0, r5
 801b01e:	f001 fb69 	bl	801c6f4 <lv_obj_get_style_prop>
 801b022:	4606      	mov	r6, r0
    if(child_res != LV_COORD_MIN) {
 801b024:	4b13      	ldr	r3, [pc, #76]	@ (801b074 <lv_obj_get_scroll_right+0xc8>)
 801b026:	429f      	cmp	r7, r3
 801b028:	d004      	beq.n	801b034 <lv_obj_get_scroll_right+0x88>
        child_res -= (obj->coords.x2 - pad_right - border_width);
 801b02a:	8b2b      	ldrh	r3, [r5, #24]
 801b02c:	1ae3      	subs	r3, r4, r3
 801b02e:	4403      	add	r3, r0
 801b030:	443b      	add	r3, r7
 801b032:	b21f      	sxth	r7, r3
    self_w = lv_obj_get_self_width(obj);
 801b034:	4628      	mov	r0, r5
 801b036:	f7fe fbdc 	bl	80197f2 <lv_obj_get_self_width>
 801b03a:	4680      	mov	r8, r0
    self_w = self_w - (lv_obj_get_width(obj) - pad_right - pad_left - 2 * border_width);
 801b03c:	0076      	lsls	r6, r6, #1
 801b03e:	b2b6      	uxth	r6, r6
 801b040:	4628      	mov	r0, r5
 801b042:	f7fe fb45 	bl	80196d0 <lv_obj_get_width>
 801b046:	b280      	uxth	r0, r0
 801b048:	1a24      	subs	r4, r4, r0
 801b04a:	fa19 f484 	uxtah	r4, r9, r4
 801b04e:	fa16 f484 	uxtah	r4, r6, r4
 801b052:	fa18 f484 	uxtah	r4, r8, r4
 801b056:	b2a4      	uxth	r4, r4
    self_w -= lv_obj_get_scroll_x(obj);
 801b058:	4628      	mov	r0, r5
 801b05a:	f7ff fec5 	bl	801ade8 <lv_obj_get_scroll_x>
 801b05e:	b280      	uxth	r0, r0
 801b060:	1a20      	subs	r0, r4, r0
 801b062:	b200      	sxth	r0, r0
    return LV_MAX(child_res, self_w);
 801b064:	42b8      	cmp	r0, r7
 801b066:	bfb8      	it	lt
 801b068:	4638      	movlt	r0, r7
}
 801b06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(obj->spec_attr == NULL) return 0;
 801b06e:	2000      	movs	r0, #0
 801b070:	e7fb      	b.n	801b06a <lv_obj_get_scroll_right+0xbe>
 801b072:	bf00      	nop
 801b074:	ffffe001 	.word	0xffffe001
 801b078:	00040001 	.word	0x00040001

0801b07c <lv_obj_get_scroll_end>:
{
 801b07c:	b538      	push	{r3, r4, r5, lr}
 801b07e:	4605      	mov	r5, r0
 801b080:	460c      	mov	r4, r1
    a = lv_anim_get(obj, scroll_x_anim);
 801b082:	490d      	ldr	r1, [pc, #52]	@ (801b0b8 <lv_obj_get_scroll_end+0x3c>)
 801b084:	f7e5 fbf8 	bl	8000878 <lv_anim_get>
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 801b088:	b168      	cbz	r0, 801b0a6 <lv_obj_get_scroll_end+0x2a>
 801b08a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801b08c:	425b      	negs	r3, r3
 801b08e:	b21b      	sxth	r3, r3
 801b090:	8023      	strh	r3, [r4, #0]
    a = lv_anim_get(obj, scroll_y_anim);
 801b092:	490a      	ldr	r1, [pc, #40]	@ (801b0bc <lv_obj_get_scroll_end+0x40>)
 801b094:	4628      	mov	r0, r5
 801b096:	f7e5 fbef 	bl	8000878 <lv_anim_get>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 801b09a:	b148      	cbz	r0, 801b0b0 <lv_obj_get_scroll_end+0x34>
 801b09c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801b09e:	4240      	negs	r0, r0
 801b0a0:	b200      	sxth	r0, r0
 801b0a2:	8060      	strh	r0, [r4, #2]
}
 801b0a4:	bd38      	pop	{r3, r4, r5, pc}
    end->x = a ? -a->end_value : lv_obj_get_scroll_x(obj);
 801b0a6:	4628      	mov	r0, r5
 801b0a8:	f7ff fe9e 	bl	801ade8 <lv_obj_get_scroll_x>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	e7ef      	b.n	801b090 <lv_obj_get_scroll_end+0x14>
    end->y = a ? -a->end_value : lv_obj_get_scroll_y(obj);
 801b0b0:	4628      	mov	r0, r5
 801b0b2:	f7ff fea1 	bl	801adf8 <lv_obj_get_scroll_y>
 801b0b6:	e7f4      	b.n	801b0a2 <lv_obj_get_scroll_end+0x26>
 801b0b8:	0801b129 	.word	0x0801b129
 801b0bc:	0801b10f 	.word	0x0801b10f

0801b0c0 <_lv_obj_scroll_by_raw>:
{
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	4604      	mov	r4, r0
 801b0c4:	4615      	mov	r5, r2
    if(x == 0 && y == 0) return LV_RES_OK;
 801b0c6:	460e      	mov	r6, r1
 801b0c8:	b901      	cbnz	r1, 801b0cc <_lv_obj_scroll_by_raw+0xc>
 801b0ca:	b1f2      	cbz	r2, 801b10a <_lv_obj_scroll_by_raw+0x4a>
    lv_obj_allocate_spec_attr(obj);
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f7fd fc5f 	bl	8018990 <lv_obj_allocate_spec_attr>
    obj->spec_attr->scroll.x += x;
 801b0d2:	68a2      	ldr	r2, [r4, #8]
 801b0d4:	8a13      	ldrh	r3, [r2, #16]
 801b0d6:	4433      	add	r3, r6
 801b0d8:	8213      	strh	r3, [r2, #16]
    obj->spec_attr->scroll.y += y;
 801b0da:	68a2      	ldr	r2, [r4, #8]
 801b0dc:	8a53      	ldrh	r3, [r2, #18]
 801b0de:	442b      	add	r3, r5
 801b0e0:	8253      	strh	r3, [r2, #18]
    lv_obj_move_children_by(obj, x, y, true);
 801b0e2:	2301      	movs	r3, #1
 801b0e4:	462a      	mov	r2, r5
 801b0e6:	4631      	mov	r1, r6
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f7fe fd47 	bl	8019b7c <lv_obj_move_children_by>
    lv_res_t res = lv_event_send(obj, LV_EVENT_SCROLL, NULL);
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	210b      	movs	r1, #11
 801b0f2:	4620      	mov	r0, r4
 801b0f4:	f7f5 fde8 	bl	8010cc8 <lv_event_send>
 801b0f8:	4605      	mov	r5, r0
    if(res != LV_RES_OK) return res;
 801b0fa:	2801      	cmp	r0, #1
 801b0fc:	d001      	beq.n	801b102 <_lv_obj_scroll_by_raw+0x42>
}
 801b0fe:	4628      	mov	r0, r5
 801b100:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_invalidate(obj);
 801b102:	4620      	mov	r0, r4
 801b104:	f7fe fecf 	bl	8019ea6 <lv_obj_invalidate>
    return LV_RES_OK;
 801b108:	e7f9      	b.n	801b0fe <_lv_obj_scroll_by_raw+0x3e>
    if(x == 0 && y == 0) return LV_RES_OK;
 801b10a:	2501      	movs	r5, #1
 801b10c:	e7f7      	b.n	801b0fe <_lv_obj_scroll_by_raw+0x3e>

0801b10e <scroll_y_anim>:
{
 801b10e:	b538      	push	{r3, r4, r5, lr}
 801b110:	4604      	mov	r4, r0
 801b112:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, 0, v + lv_obj_get_scroll_y(obj));
 801b114:	f7ff fe70 	bl	801adf8 <lv_obj_get_scroll_y>
 801b118:	fa15 f280 	uxtah	r2, r5, r0
 801b11c:	b212      	sxth	r2, r2
 801b11e:	2100      	movs	r1, #0
 801b120:	4620      	mov	r0, r4
 801b122:	f7ff ffcd 	bl	801b0c0 <_lv_obj_scroll_by_raw>
}
 801b126:	bd38      	pop	{r3, r4, r5, pc}

0801b128 <scroll_x_anim>:
{
 801b128:	b538      	push	{r3, r4, r5, lr}
 801b12a:	4604      	mov	r4, r0
 801b12c:	460d      	mov	r5, r1
    _lv_obj_scroll_by_raw(obj, v + lv_obj_get_scroll_x(obj), 0);
 801b12e:	f7ff fe5b 	bl	801ade8 <lv_obj_get_scroll_x>
 801b132:	fa15 f180 	uxtah	r1, r5, r0
 801b136:	2200      	movs	r2, #0
 801b138:	b209      	sxth	r1, r1
 801b13a:	4620      	mov	r0, r4
 801b13c:	f7ff ffc0 	bl	801b0c0 <_lv_obj_scroll_by_raw>
}
 801b140:	bd38      	pop	{r3, r4, r5, pc}
	...

0801b144 <lv_obj_scroll_by>:
{
 801b144:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b146:	b093      	sub	sp, #76	@ 0x4c
 801b148:	4604      	mov	r4, r0
 801b14a:	4615      	mov	r5, r2
    if(dx == 0 && dy == 0) return;
 801b14c:	460e      	mov	r6, r1
 801b14e:	b901      	cbnz	r1, 801b152 <lv_obj_scroll_by+0xe>
 801b150:	b182      	cbz	r2, 801b174 <lv_obj_scroll_by+0x30>
    if(anim_en == LV_ANIM_ON) {
 801b152:	2b01      	cmp	r3, #1
 801b154:	d010      	beq.n	801b178 <lv_obj_scroll_by+0x34>
        lv_anim_del(obj, scroll_y_anim);
 801b156:	493f      	ldr	r1, [pc, #252]	@ (801b254 <lv_obj_scroll_by+0x110>)
 801b158:	4620      	mov	r0, r4
 801b15a:	f7e5 fb15 	bl	8000788 <lv_anim_del>
        lv_anim_del(obj, scroll_x_anim);
 801b15e:	493e      	ldr	r1, [pc, #248]	@ (801b258 <lv_obj_scroll_by+0x114>)
 801b160:	4620      	mov	r0, r4
 801b162:	f7e5 fb11 	bl	8000788 <lv_anim_del>
        res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, NULL);
 801b166:	2200      	movs	r2, #0
 801b168:	2109      	movs	r1, #9
 801b16a:	4620      	mov	r0, r4
 801b16c:	f7f5 fdac 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 801b170:	2801      	cmp	r0, #1
 801b172:	d062      	beq.n	801b23a <lv_obj_scroll_by+0xf6>
}
 801b174:	b013      	add	sp, #76	@ 0x4c
 801b176:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
 801b178:	4620      	mov	r0, r4
 801b17a:	f002 f807 	bl	801d18c <lv_obj_get_disp>
 801b17e:	4607      	mov	r7, r0
        lv_anim_init(&a);
 801b180:	a801      	add	r0, sp, #4
 801b182:	f7e5 fae7 	bl	8000754 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 801b186:	9401      	str	r4, [sp, #4]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param ready_cb  a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
 801b188:	4b34      	ldr	r3, [pc, #208]	@ (801b25c <lv_obj_scroll_by+0x118>)
 801b18a:	9304      	str	r3, [sp, #16]
        if(dx) {
 801b18c:	b996      	cbnz	r6, 801b1b4 <lv_obj_scroll_by+0x70>
        if(dy) {
 801b18e:	2d00      	cmp	r5, #0
 801b190:	d0f0      	beq.n	801b174 <lv_obj_scroll_by+0x30>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_ver_res(d) * 2) >> 2, 0, dy);
 801b192:	4638      	mov	r0, r7
 801b194:	f7f8 f890 	bl	80132b8 <lv_disp_get_ver_res>
 801b198:	462a      	mov	r2, r5
 801b19a:	2100      	movs	r1, #0
 801b19c:	f340 005d 	sbfx	r0, r0, #1, #30
 801b1a0:	f7e5 fb84 	bl	80008ac <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 801b1a4:	28c7      	cmp	r0, #199	@ 0xc7
 801b1a6:	d92f      	bls.n	801b208 <lv_obj_scroll_by+0xc4>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 801b1a8:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 801b1ac:	d92d      	bls.n	801b20a <lv_obj_scroll_by+0xc6>
 801b1ae:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801b1b2:	e02a      	b.n	801b20a <lv_obj_scroll_by+0xc6>
            uint32_t t = lv_anim_speed_to_time((lv_disp_get_hor_res(d) * 2) >> 2, 0, dx);
 801b1b4:	4638      	mov	r0, r7
 801b1b6:	f7f8 f867 	bl	8013288 <lv_disp_get_hor_res>
 801b1ba:	4632      	mov	r2, r6
 801b1bc:	2100      	movs	r1, #0
 801b1be:	f340 005d 	sbfx	r0, r0, #1, #30
 801b1c2:	f7e5 fb73 	bl	80008ac <lv_anim_speed_to_time>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 801b1c6:	28c7      	cmp	r0, #199	@ 0xc7
 801b1c8:	d905      	bls.n	801b1d6 <lv_obj_scroll_by+0x92>
            if(t > SCROLL_ANIM_TIME_MAX) t = SCROLL_ANIM_TIME_MAX;
 801b1ca:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 801b1ce:	d903      	bls.n	801b1d8 <lv_obj_scroll_by+0x94>
 801b1d0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 801b1d4:	e000      	b.n	801b1d8 <lv_obj_scroll_by+0x94>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 801b1d6:	20c8      	movs	r0, #200	@ 0xc8
    a->time = duration;
 801b1d8:	900c      	str	r0, [sp, #48]	@ 0x30
            lv_coord_t sx = lv_obj_get_scroll_x(obj);
 801b1da:	4620      	mov	r0, r4
 801b1dc:	f7ff fe04 	bl	801ade8 <lv_obj_get_scroll_x>
            lv_anim_set_values(&a, -sx, -sx + dx);
 801b1e0:	4243      	negs	r3, r0
 801b1e2:	1a30      	subs	r0, r6, r0
    a->start_value = start;
 801b1e4:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 801b1e6:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 801b1e8:	900b      	str	r0, [sp, #44]	@ 0x2c
    a->exec_cb = exec_cb;
 801b1ea:	4b1b      	ldr	r3, [pc, #108]	@ (801b258 <lv_obj_scroll_by+0x114>)
 801b1ec:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 801b1ee:	4b1c      	ldr	r3, [pc, #112]	@ (801b260 <lv_obj_scroll_by+0x11c>)
 801b1f0:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 801b1f2:	aa01      	add	r2, sp, #4
 801b1f4:	2109      	movs	r1, #9
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	f7f5 fd66 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801b1fc:	2801      	cmp	r0, #1
 801b1fe:	d1b9      	bne.n	801b174 <lv_obj_scroll_by+0x30>
            lv_anim_start(&a);
 801b200:	a801      	add	r0, sp, #4
 801b202:	f7e5 faf3 	bl	80007ec <lv_anim_start>
 801b206:	e7c2      	b.n	801b18e <lv_obj_scroll_by+0x4a>
            if(t < SCROLL_ANIM_TIME_MIN) t = SCROLL_ANIM_TIME_MIN;
 801b208:	20c8      	movs	r0, #200	@ 0xc8
    a->time = duration;
 801b20a:	900c      	str	r0, [sp, #48]	@ 0x30
            lv_coord_t sy = lv_obj_get_scroll_y(obj);
 801b20c:	4620      	mov	r0, r4
 801b20e:	f7ff fdf3 	bl	801adf8 <lv_obj_get_scroll_y>
            lv_anim_set_values(&a, -sy, -sy + dy);
 801b212:	4243      	negs	r3, r0
 801b214:	1a28      	subs	r0, r5, r0
    a->start_value = start;
 801b216:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 801b218:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 801b21a:	900b      	str	r0, [sp, #44]	@ 0x2c
    a->exec_cb = exec_cb;
 801b21c:	4b0d      	ldr	r3, [pc, #52]	@ (801b254 <lv_obj_scroll_by+0x110>)
 801b21e:	9302      	str	r3, [sp, #8]
    a->path_cb = path_cb;
 801b220:	4b0f      	ldr	r3, [pc, #60]	@ (801b260 <lv_obj_scroll_by+0x11c>)
 801b222:	9308      	str	r3, [sp, #32]
            res = lv_event_send(obj, LV_EVENT_SCROLL_BEGIN, &a);
 801b224:	aa01      	add	r2, sp, #4
 801b226:	2109      	movs	r1, #9
 801b228:	4620      	mov	r0, r4
 801b22a:	f7f5 fd4d 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 801b22e:	2801      	cmp	r0, #1
 801b230:	d1a0      	bne.n	801b174 <lv_obj_scroll_by+0x30>
            lv_anim_start(&a);
 801b232:	a801      	add	r0, sp, #4
 801b234:	f7e5 fada 	bl	80007ec <lv_anim_start>
 801b238:	e79c      	b.n	801b174 <lv_obj_scroll_by+0x30>
        res = _lv_obj_scroll_by_raw(obj, dx, dy);
 801b23a:	462a      	mov	r2, r5
 801b23c:	4631      	mov	r1, r6
 801b23e:	4620      	mov	r0, r4
 801b240:	f7ff ff3e 	bl	801b0c0 <_lv_obj_scroll_by_raw>
        if(res != LV_RES_OK) return;
 801b244:	2801      	cmp	r0, #1
 801b246:	d195      	bne.n	801b174 <lv_obj_scroll_by+0x30>
        res = lv_event_send(obj, LV_EVENT_SCROLL_END, NULL);
 801b248:	2200      	movs	r2, #0
 801b24a:	210a      	movs	r1, #10
 801b24c:	4620      	mov	r0, r4
 801b24e:	f7f5 fd3b 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 801b252:	e78f      	b.n	801b174 <lv_obj_scroll_by+0x30>
 801b254:	0801b10f 	.word	0x0801b10f
 801b258:	0801b129 	.word	0x0801b129
 801b25c:	0801ad29 	.word	0x0801ad29
 801b260:	080008cb 	.word	0x080008cb

0801b264 <lv_obj_scroll_by_bounded>:
{
 801b264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b268:	4605      	mov	r5, r0
 801b26a:	4614      	mov	r4, r2
 801b26c:	461e      	mov	r6, r3
    if(dx == 0 && dy == 0) return;
 801b26e:	4688      	mov	r8, r1
 801b270:	b901      	cbnz	r1, 801b274 <lv_obj_scroll_by_bounded+0x10>
 801b272:	b37a      	cbz	r2, 801b2d4 <lv_obj_scroll_by_bounded+0x70>
    lv_obj_update_layout(obj);
 801b274:	4628      	mov	r0, r5
 801b276:	f7ff fb11 	bl	801a89c <lv_obj_update_layout>
    lv_coord_t x_current = -lv_obj_get_scroll_x(obj);
 801b27a:	4628      	mov	r0, r5
 801b27c:	f7ff fdb4 	bl	801ade8 <lv_obj_get_scroll_x>
 801b280:	fa1f f980 	uxth.w	r9, r0
    lv_coord_t x_bounded = x_current + dx;
 801b284:	fa1f f888 	uxth.w	r8, r8
 801b288:	eba8 0809 	sub.w	r8, r8, r9
 801b28c:	fa0f f888 	sxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801b290:	2216      	movs	r2, #22
 801b292:	2100      	movs	r1, #0
 801b294:	4628      	mov	r0, r5
 801b296:	f001 fa2d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801b29a:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801b29c:	2801      	cmp	r0, #1
 801b29e:	d030      	beq.n	801b302 <lv_obj_scroll_by_bounded+0x9e>
        if(x_bounded > 0) x_bounded = 0;
 801b2a0:	f1b8 0f00 	cmp.w	r8, #0
 801b2a4:	dd18      	ble.n	801b2d8 <lv_obj_scroll_by_bounded+0x74>
 801b2a6:	f04f 0800 	mov.w	r8, #0
    lv_coord_t y_current = -lv_obj_get_scroll_y(obj);
 801b2aa:	4628      	mov	r0, r5
 801b2ac:	f7ff fda4 	bl	801adf8 <lv_obj_get_scroll_y>
 801b2b0:	b287      	uxth	r7, r0
    lv_coord_t y_bounded = y_current + dy;
 801b2b2:	b2a4      	uxth	r4, r4
 801b2b4:	1be4      	subs	r4, r4, r7
 801b2b6:	b224      	sxth	r4, r4
    if(y_bounded > 0) y_bounded = 0;
 801b2b8:	2c00      	cmp	r4, #0
 801b2ba:	dd3b      	ble.n	801b334 <lv_obj_scroll_by_bounded+0xd0>
 801b2bc:	2400      	movs	r4, #0
    dx = x_bounded - x_current;
 801b2be:	eb09 0108 	add.w	r1, r9, r8
 801b2c2:	b209      	sxth	r1, r1
    dy = y_bounded - y_current;
 801b2c4:	193a      	adds	r2, r7, r4
 801b2c6:	b212      	sxth	r2, r2
    if(dx || dy) {
 801b2c8:	b901      	cbnz	r1, 801b2cc <lv_obj_scroll_by_bounded+0x68>
 801b2ca:	b11a      	cbz	r2, 801b2d4 <lv_obj_scroll_by_bounded+0x70>
        lv_obj_scroll_by(obj, dx, dy, anim_en);
 801b2cc:	4633      	mov	r3, r6
 801b2ce:	4628      	mov	r0, r5
 801b2d0:	f7ff ff38 	bl	801b144 <lv_obj_scroll_by>
}
 801b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(x_bounded < 0) {
 801b2d8:	dae7      	bge.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801b2da:	4628      	mov	r0, r5
 801b2dc:	f7ff fdf4 	bl	801aec8 <lv_obj_get_scroll_left>
 801b2e0:	b287      	uxth	r7, r0
 801b2e2:	4628      	mov	r0, r5
 801b2e4:	f7ff fe62 	bl	801afac <lv_obj_get_scroll_right>
 801b2e8:	fa17 f380 	uxtah	r3, r7, r0
 801b2ec:	b21b      	sxth	r3, r3
            if(scroll_max < 0) scroll_max = 0;
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	db05      	blt.n	801b2fe <lv_obj_scroll_by_bounded+0x9a>
            if(x_bounded < -scroll_max) x_bounded = -scroll_max;
 801b2f2:	425a      	negs	r2, r3
 801b2f4:	4590      	cmp	r8, r2
 801b2f6:	dad8      	bge.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
 801b2f8:	fa0f f882 	sxth.w	r8, r2
 801b2fc:	e7d5      	b.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
            if(scroll_max < 0) scroll_max = 0;
 801b2fe:	2300      	movs	r3, #0
 801b300:	e7f7      	b.n	801b2f2 <lv_obj_scroll_by_bounded+0x8e>
        if(x_bounded < 0) x_bounded = 0;
 801b302:	f1b8 0f00 	cmp.w	r8, #0
 801b306:	db12      	blt.n	801b32e <lv_obj_scroll_by_bounded+0xca>
        if(x_bounded > 0) {
 801b308:	ddcf      	ble.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
            lv_coord_t  scroll_max = lv_obj_get_scroll_left(obj) + lv_obj_get_scroll_right(obj);
 801b30a:	4628      	mov	r0, r5
 801b30c:	f7ff fddc 	bl	801aec8 <lv_obj_get_scroll_left>
 801b310:	b287      	uxth	r7, r0
 801b312:	4628      	mov	r0, r5
 801b314:	f7ff fe4a 	bl	801afac <lv_obj_get_scroll_right>
 801b318:	fa17 f080 	uxtah	r0, r7, r0
 801b31c:	b200      	sxth	r0, r0
            if(scroll_max < 0) scroll_max = 0;
 801b31e:	2800      	cmp	r0, #0
 801b320:	db03      	blt.n	801b32a <lv_obj_scroll_by_bounded+0xc6>
            if(x_bounded > scroll_max) x_bounded = scroll_max;
 801b322:	4540      	cmp	r0, r8
 801b324:	dac1      	bge.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
 801b326:	4680      	mov	r8, r0
 801b328:	e7bf      	b.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
            if(scroll_max < 0) scroll_max = 0;
 801b32a:	2000      	movs	r0, #0
 801b32c:	e7f9      	b.n	801b322 <lv_obj_scroll_by_bounded+0xbe>
        if(x_bounded < 0) x_bounded = 0;
 801b32e:	f04f 0800 	mov.w	r8, #0
 801b332:	e7ba      	b.n	801b2aa <lv_obj_scroll_by_bounded+0x46>
    if(y_bounded < 0) {
 801b334:	dac3      	bge.n	801b2be <lv_obj_scroll_by_bounded+0x5a>
        lv_coord_t  scroll_max = lv_obj_get_scroll_top(obj) + lv_obj_get_scroll_bottom(obj);
 801b336:	4628      	mov	r0, r5
 801b338:	f7ff fd66 	bl	801ae08 <lv_obj_get_scroll_top>
 801b33c:	fa1f fa80 	uxth.w	sl, r0
 801b340:	4628      	mov	r0, r5
 801b342:	f7ff fd69 	bl	801ae18 <lv_obj_get_scroll_bottom>
 801b346:	fa1a f080 	uxtah	r0, sl, r0
 801b34a:	b200      	sxth	r0, r0
        if(scroll_max < 0) scroll_max = 0;
 801b34c:	2800      	cmp	r0, #0
 801b34e:	db04      	blt.n	801b35a <lv_obj_scroll_by_bounded+0xf6>
        if(y_bounded < -scroll_max) y_bounded = -scroll_max;
 801b350:	4243      	negs	r3, r0
 801b352:	429c      	cmp	r4, r3
 801b354:	dab3      	bge.n	801b2be <lv_obj_scroll_by_bounded+0x5a>
 801b356:	b21c      	sxth	r4, r3
 801b358:	e7b1      	b.n	801b2be <lv_obj_scroll_by_bounded+0x5a>
        if(scroll_max < 0) scroll_max = 0;
 801b35a:	2000      	movs	r0, #0
 801b35c:	e7f8      	b.n	801b350 <lv_obj_scroll_by_bounded+0xec>
	...

0801b360 <lv_obj_scroll_to_x>:
{
 801b360:	b570      	push	{r4, r5, r6, lr}
 801b362:	4604      	mov	r4, r0
 801b364:	460e      	mov	r6, r1
 801b366:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_x_anim);
 801b368:	4906      	ldr	r1, [pc, #24]	@ (801b384 <lv_obj_scroll_to_x+0x24>)
 801b36a:	f7e5 fa0d 	bl	8000788 <lv_anim_del>
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj);
 801b36e:	4620      	mov	r0, r4
 801b370:	f7ff fd3a 	bl	801ade8 <lv_obj_get_scroll_x>
    lv_coord_t diff = -x + scroll_x;
 801b374:	1b81      	subs	r1, r0, r6
    lv_obj_scroll_by_bounded(obj, diff, 0, anim_en);
 801b376:	462b      	mov	r3, r5
 801b378:	2200      	movs	r2, #0
 801b37a:	b209      	sxth	r1, r1
 801b37c:	4620      	mov	r0, r4
 801b37e:	f7ff ff71 	bl	801b264 <lv_obj_scroll_by_bounded>
}
 801b382:	bd70      	pop	{r4, r5, r6, pc}
 801b384:	0801b129 	.word	0x0801b129

0801b388 <lv_obj_scroll_to_y>:
{
 801b388:	b570      	push	{r4, r5, r6, lr}
 801b38a:	4604      	mov	r4, r0
 801b38c:	460e      	mov	r6, r1
 801b38e:	4615      	mov	r5, r2
    lv_anim_del(obj, scroll_y_anim);
 801b390:	4906      	ldr	r1, [pc, #24]	@ (801b3ac <lv_obj_scroll_to_y+0x24>)
 801b392:	f7e5 f9f9 	bl	8000788 <lv_anim_del>
    lv_coord_t scroll_y = lv_obj_get_scroll_y(obj);
 801b396:	4620      	mov	r0, r4
 801b398:	f7ff fd2e 	bl	801adf8 <lv_obj_get_scroll_y>
    lv_coord_t diff = -y + scroll_y;
 801b39c:	1b82      	subs	r2, r0, r6
    lv_obj_scroll_by_bounded(obj, 0, diff, anim_en);
 801b39e:	462b      	mov	r3, r5
 801b3a0:	b212      	sxth	r2, r2
 801b3a2:	2100      	movs	r1, #0
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	f7ff ff5d 	bl	801b264 <lv_obj_scroll_by_bounded>
}
 801b3aa:	bd70      	pop	{r4, r5, r6, pc}
 801b3ac:	0801b10f 	.word	0x0801b10f

0801b3b0 <lv_obj_scroll_to>:
{
 801b3b0:	b570      	push	{r4, r5, r6, lr}
 801b3b2:	4605      	mov	r5, r0
 801b3b4:	4616      	mov	r6, r2
 801b3b6:	461c      	mov	r4, r3
    lv_obj_scroll_to_x(obj, x, anim_en);
 801b3b8:	461a      	mov	r2, r3
 801b3ba:	f7ff ffd1 	bl	801b360 <lv_obj_scroll_to_x>
    lv_obj_scroll_to_y(obj, y, anim_en);
 801b3be:	4622      	mov	r2, r4
 801b3c0:	4631      	mov	r1, r6
 801b3c2:	4628      	mov	r0, r5
 801b3c4:	f7ff ffe0 	bl	801b388 <lv_obj_scroll_to_y>
}
 801b3c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b3cc <scroll_area_into_view>:

static void scroll_area_into_view(const lv_area_t * area, lv_obj_t * child, lv_point_t * scroll_value,
                                  lv_anim_enable_t anim_en)
{
 801b3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3d0:	b089      	sub	sp, #36	@ 0x24
 801b3d2:	4681      	mov	r9, r0
 801b3d4:	460d      	mov	r5, r1
 801b3d6:	9104      	str	r1, [sp, #16]
 801b3d8:	4617      	mov	r7, r2
 801b3da:	9302      	str	r3, [sp, #8]
    lv_obj_t * parent = lv_obj_get_parent(child);
 801b3dc:	4608      	mov	r0, r1
 801b3de:	f001 fec9 	bl	801d174 <lv_obj_get_parent>
 801b3e2:	4604      	mov	r4, r0
    if(!lv_obj_has_flag(parent, LV_OBJ_FLAG_SCROLLABLE)) return;
 801b3e4:	2110      	movs	r1, #16
 801b3e6:	f7fd f852 	bl	801848e <lv_obj_has_flag>
 801b3ea:	2800      	cmp	r0, #0
 801b3ec:	f000 80fd 	beq.w	801b5ea <scroll_area_into_view+0x21e>

    lv_dir_t scroll_dir = lv_obj_get_scroll_dir(parent);
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7ff fce1 	bl	801adb8 <lv_obj_get_scroll_dir>
 801b3f6:	9001      	str	r0, [sp, #4]
    lv_coord_t snap_goal = 0;
    lv_coord_t act = 0;
    const lv_area_t * area_tmp;

    lv_coord_t y_scroll = 0;
    lv_scroll_snap_t snap_y = lv_obj_get_scroll_snap_y(parent);
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f7ff fced 	bl	801add8 <lv_obj_get_scroll_snap_y>
    if(snap_y != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 801b3fe:	9005      	str	r0, [sp, #20]
 801b400:	2800      	cmp	r0, #0
 801b402:	f000 80f5 	beq.w	801b5f0 <scroll_area_into_view+0x224>
 801b406:	f105 0b14 	add.w	fp, r5, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801b40a:	2232      	movs	r2, #50	@ 0x32
 801b40c:	2100      	movs	r1, #0
 801b40e:	4620      	mov	r0, r4
 801b410:	f001 f970 	bl	801c6f4 <lv_obj_get_style_prop>
 801b414:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b416:	2210      	movs	r2, #16
 801b418:	2100      	movs	r1, #0
 801b41a:	4620      	mov	r0, r4
 801b41c:	f001 f96a 	bl	801c6f4 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t border_width = lv_obj_get_style_border_width(parent, LV_PART_MAIN);
    lv_coord_t ptop = lv_obj_get_style_pad_top(parent, LV_PART_MAIN) + border_width;
 801b420:	fa1f f888 	uxth.w	r8, r8
 801b424:	fa18 f680 	uxtah	r6, r8, r0
 801b428:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b42a:	2211      	movs	r2, #17
 801b42c:	2100      	movs	r1, #0
 801b42e:	4620      	mov	r0, r4
 801b430:	f001 f960 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pbottom = lv_obj_get_style_pad_bottom(parent, LV_PART_MAIN) + border_width;
 801b434:	fa18 fa80 	uxtah	sl, r8, r0
 801b438:	fa1f fa8a 	uxth.w	sl, sl
    lv_coord_t top_diff = parent->coords.y1 + ptop - area_tmp->y1 - scroll_value->y;
 801b43c:	8ae5      	ldrh	r5, [r4, #22]
 801b43e:	4435      	add	r5, r6
 801b440:	b2ad      	uxth	r5, r5
 801b442:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801b446:	1aed      	subs	r5, r5, r3
 801b448:	b2ad      	uxth	r5, r5
 801b44a:	887b      	ldrh	r3, [r7, #2]
 801b44c:	1aed      	subs	r5, r5, r3
 801b44e:	b22d      	sxth	r5, r5
    lv_coord_t bottom_diff = -(parent->coords.y2 - pbottom - area_tmp->y2 - scroll_value->y);
 801b450:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 801b454:	8b61      	ldrh	r1, [r4, #26]
 801b456:	ebaa 0101 	sub.w	r1, sl, r1
 801b45a:	440a      	add	r2, r1
 801b45c:	4413      	add	r3, r2
 801b45e:	b29a      	uxth	r2, r3
 801b460:	9207      	str	r2, [sp, #28]
 801b462:	b21b      	sxth	r3, r3
 801b464:	9303      	str	r3, [sp, #12]
    lv_coord_t parent_h = lv_obj_get_height(parent) - ptop - pbottom;
 801b466:	4620      	mov	r0, r4
 801b468:	f7fe f939 	bl	80196de <lv_obj_get_height>
 801b46c:	b283      	uxth	r3, r0
 801b46e:	1b9b      	subs	r3, r3, r6
 801b470:	b29b      	uxth	r3, r3
 801b472:	eba3 030a 	sub.w	r3, r3, sl
 801b476:	b21a      	sxth	r2, r3
 801b478:	9206      	str	r2, [sp, #24]
    if((top_diff >= 0 && bottom_diff >= 0)) y_scroll = 0;
 801b47a:	2d00      	cmp	r5, #0
 801b47c:	f2c0 80c5 	blt.w	801b60a <scroll_area_into_view+0x23e>
 801b480:	9b03      	ldr	r3, [sp, #12]
 801b482:	2b00      	cmp	r3, #0
 801b484:	f2c0 80b6 	blt.w	801b5f4 <scroll_area_into_view+0x228>
 801b488:	2500      	movs	r5, #0
        /*Do not let scrolling in*/
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
        if(sb + y_scroll < 0) y_scroll = 0;
    }

    switch(snap_y) {
 801b48a:	9b05      	ldr	r3, [sp, #20]
 801b48c:	2b02      	cmp	r3, #2
 801b48e:	f000 80cc 	beq.w	801b62a <scroll_area_into_view+0x25e>
 801b492:	2b03      	cmp	r3, #3
 801b494:	f000 80d7 	beq.w	801b646 <scroll_area_into_view+0x27a>
 801b498:	2b01      	cmp	r3, #1
 801b49a:	d10b      	bne.n	801b4b4 <scroll_area_into_view+0xe8>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.y1 + ptop;
 801b49c:	8ae3      	ldrh	r3, [r4, #22]
 801b49e:	4433      	add	r3, r6
 801b4a0:	b29b      	uxth	r3, r3
            act = area_tmp->y1 + y_scroll;
 801b4a2:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801b4a6:	b2ad      	uxth	r5, r5
 801b4a8:	442a      	add	r2, r5
 801b4aa:	b292      	uxth	r2, r2
            y_scroll += snap_goal - act;
 801b4ac:	1a9b      	subs	r3, r3, r2
 801b4ae:	fa15 f383 	uxtah	r3, r5, r3
 801b4b2:	b21d      	sxth	r5, r3
            y_scroll += snap_goal - act;
            break;
    }

    lv_coord_t x_scroll = 0;
    lv_scroll_snap_t snap_x = lv_obj_get_scroll_snap_x(parent);
 801b4b4:	4620      	mov	r0, r4
 801b4b6:	f7ff fc87 	bl	801adc8 <lv_obj_get_scroll_snap_x>
    if(snap_x != LV_SCROLL_SNAP_NONE) area_tmp = &child->coords;
 801b4ba:	4683      	mov	fp, r0
 801b4bc:	b110      	cbz	r0, 801b4c4 <scroll_area_into_view+0xf8>
 801b4be:	9b04      	ldr	r3, [sp, #16]
 801b4c0:	f103 0914 	add.w	r9, r3, #20
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b4c4:	2212      	movs	r2, #18
 801b4c6:	2100      	movs	r1, #0
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f001 f913 	bl	801c6f4 <lv_obj_get_style_prop>
    else area_tmp = area;

    lv_coord_t pleft = lv_obj_get_style_pad_left(parent, LV_PART_MAIN) + border_width;
 801b4ce:	fa18 fa80 	uxtah	sl, r8, r0
 801b4d2:	fa1f fa8a 	uxth.w	sl, sl
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b4d6:	2213      	movs	r2, #19
 801b4d8:	2100      	movs	r1, #0
 801b4da:	4620      	mov	r0, r4
 801b4dc:	f001 f90a 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t pright = lv_obj_get_style_pad_right(parent, LV_PART_MAIN) + border_width;
 801b4e0:	fa18 f880 	uxtah	r8, r8, r0
 801b4e4:	fa1f f888 	uxth.w	r8, r8
    lv_coord_t left_diff = parent->coords.x1 + pleft - area_tmp->x1 - scroll_value->x;
 801b4e8:	8aa6      	ldrh	r6, [r4, #20]
 801b4ea:	4456      	add	r6, sl
 801b4ec:	b2b6      	uxth	r6, r6
 801b4ee:	f8b9 3000 	ldrh.w	r3, [r9]
 801b4f2:	1af6      	subs	r6, r6, r3
 801b4f4:	b2b6      	uxth	r6, r6
 801b4f6:	883b      	ldrh	r3, [r7, #0]
 801b4f8:	1af6      	subs	r6, r6, r3
 801b4fa:	b236      	sxth	r6, r6
    lv_coord_t right_diff = -(parent->coords.x2 - pright - area_tmp->x2 - scroll_value->x);
 801b4fc:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801b500:	8b21      	ldrh	r1, [r4, #24]
 801b502:	eba8 0101 	sub.w	r1, r8, r1
 801b506:	440a      	add	r2, r1
 801b508:	4413      	add	r3, r2
 801b50a:	b29a      	uxth	r2, r3
 801b50c:	b21b      	sxth	r3, r3
    if((left_diff >= 0 && right_diff >= 0)) x_scroll = 0;
 801b50e:	2e00      	cmp	r6, #0
 801b510:	f2c0 80ba 	blt.w	801b688 <scroll_area_into_view+0x2bc>
 801b514:	2b00      	cmp	r3, #0
 801b516:	f2c0 80b5 	blt.w	801b684 <scroll_area_into_view+0x2b8>
 801b51a:	2600      	movs	r6, #0
        /*Do not let scrolling in*/
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
        if(sr + x_scroll < 0) x_scroll = 0;
    }

    lv_coord_t parent_w = lv_obj_get_width(parent) - pleft - pright;
 801b51c:	4620      	mov	r0, r4
 801b51e:	f7fe f8d7 	bl	80196d0 <lv_obj_get_width>
 801b522:	b283      	uxth	r3, r0
 801b524:	eba3 030a 	sub.w	r3, r3, sl
 801b528:	b29b      	uxth	r3, r3
 801b52a:	eba3 0308 	sub.w	r3, r3, r8
 801b52e:	b21b      	sxth	r3, r3
    switch(snap_x) {
 801b530:	f1bb 0f02 	cmp.w	fp, #2
 801b534:	f000 80bf 	beq.w	801b6b6 <scroll_area_into_view+0x2ea>
 801b538:	f1bb 0f03 	cmp.w	fp, #3
 801b53c:	f000 80c9 	beq.w	801b6d2 <scroll_area_into_view+0x306>
 801b540:	f1bb 0f01 	cmp.w	fp, #1
 801b544:	d10b      	bne.n	801b55e <scroll_area_into_view+0x192>
        case LV_SCROLL_SNAP_START:
            snap_goal = parent->coords.x1 + pleft;
 801b546:	8aa3      	ldrh	r3, [r4, #20]
 801b548:	4453      	add	r3, sl
 801b54a:	b29b      	uxth	r3, r3
            act = area_tmp->x1 + x_scroll;
 801b54c:	f8b9 2000 	ldrh.w	r2, [r9]
 801b550:	b2b6      	uxth	r6, r6
 801b552:	4432      	add	r2, r6
 801b554:	b292      	uxth	r2, r2
            x_scroll += snap_goal - act;
 801b556:	1a9b      	subs	r3, r3, r2
 801b558:	fa16 f383 	uxtah	r3, r6, r3
 801b55c:	b21e      	sxth	r6, r3
            x_scroll += snap_goal - act;
            break;
    }

    /*Remove any pending scroll animations.*/
    bool y_del = lv_anim_del(parent, scroll_y_anim);
 801b55e:	4971      	ldr	r1, [pc, #452]	@ (801b724 <scroll_area_into_view+0x358>)
 801b560:	4620      	mov	r0, r4
 801b562:	f7e5 f911 	bl	8000788 <lv_anim_del>
 801b566:	4680      	mov	r8, r0
    bool x_del = lv_anim_del(parent, scroll_x_anim);
 801b568:	496f      	ldr	r1, [pc, #444]	@ (801b728 <scroll_area_into_view+0x35c>)
 801b56a:	4620      	mov	r0, r4
 801b56c:	f7e5 f90c 	bl	8000788 <lv_anim_del>
    if(y_del || x_del) {
 801b570:	f1b8 0f00 	cmp.w	r8, #0
 801b574:	d100      	bne.n	801b578 <scroll_area_into_view+0x1ac>
 801b576:	b130      	cbz	r0, 801b586 <scroll_area_into_view+0x1ba>
        lv_res_t res;
        res = lv_event_send(parent, LV_EVENT_SCROLL_END, NULL);
 801b578:	2200      	movs	r2, #0
 801b57a:	210a      	movs	r1, #10
 801b57c:	4620      	mov	r0, r4
 801b57e:	f7f5 fba3 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 801b582:	2801      	cmp	r0, #1
 801b584:	d131      	bne.n	801b5ea <scroll_area_into_view+0x21e>
    }

    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 801b586:	9b01      	ldr	r3, [sp, #4]
 801b588:	f013 0f01 	tst.w	r3, #1
 801b58c:	d102      	bne.n	801b594 <scroll_area_into_view+0x1c8>
 801b58e:	2e00      	cmp	r6, #0
 801b590:	f2c0 80c0 	blt.w	801b714 <scroll_area_into_view+0x348>
    if((scroll_dir & LV_DIR_RIGHT) == 0 && x_scroll > 0) x_scroll = 0;
 801b594:	9b01      	ldr	r3, [sp, #4]
 801b596:	f013 0f02 	tst.w	r3, #2
 801b59a:	d102      	bne.n	801b5a2 <scroll_area_into_view+0x1d6>
 801b59c:	2e00      	cmp	r6, #0
 801b59e:	dd00      	ble.n	801b5a2 <scroll_area_into_view+0x1d6>
 801b5a0:	2600      	movs	r6, #0
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 801b5a2:	9b01      	ldr	r3, [sp, #4]
 801b5a4:	f013 0f04 	tst.w	r3, #4
 801b5a8:	d102      	bne.n	801b5b0 <scroll_area_into_view+0x1e4>
 801b5aa:	2d00      	cmp	r5, #0
 801b5ac:	f2c0 80b4 	blt.w	801b718 <scroll_area_into_view+0x34c>
    if((scroll_dir & LV_DIR_BOTTOM) == 0 && y_scroll > 0) y_scroll = 0;
 801b5b0:	9b01      	ldr	r3, [sp, #4]
 801b5b2:	f013 0f08 	tst.w	r3, #8
 801b5b6:	d102      	bne.n	801b5be <scroll_area_into_view+0x1f2>
 801b5b8:	2d00      	cmp	r5, #0
 801b5ba:	dd00      	ble.n	801b5be <scroll_area_into_view+0x1f2>
 801b5bc:	2500      	movs	r5, #0

    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 801b5be:	883b      	ldrh	r3, [r7, #0]
 801b5c0:	9a02      	ldr	r2, [sp, #8]
 801b5c2:	2a00      	cmp	r2, #0
 801b5c4:	f000 80aa 	beq.w	801b71c <scroll_area_into_view+0x350>
 801b5c8:	b2b2      	uxth	r2, r6
 801b5ca:	4413      	add	r3, r2
 801b5cc:	803b      	strh	r3, [r7, #0]
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 801b5ce:	887b      	ldrh	r3, [r7, #2]
 801b5d0:	9a02      	ldr	r2, [sp, #8]
 801b5d2:	2a00      	cmp	r2, #0
 801b5d4:	f000 80a4 	beq.w	801b720 <scroll_area_into_view+0x354>
 801b5d8:	b2aa      	uxth	r2, r5
 801b5da:	4413      	add	r3, r2
 801b5dc:	807b      	strh	r3, [r7, #2]
    lv_obj_scroll_by(parent, x_scroll, y_scroll, anim_en);
 801b5de:	9b02      	ldr	r3, [sp, #8]
 801b5e0:	462a      	mov	r2, r5
 801b5e2:	4631      	mov	r1, r6
 801b5e4:	4620      	mov	r0, r4
 801b5e6:	f7ff fdad 	bl	801b144 <lv_obj_scroll_by>
}
 801b5ea:	b009      	add	sp, #36	@ 0x24
 801b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else area_tmp = area;
 801b5f0:	46cb      	mov	fp, r9
 801b5f2:	e70a      	b.n	801b40a <scroll_area_into_view+0x3e>
    else if(top_diff > 0) {
 801b5f4:	2d00      	cmp	r5, #0
 801b5f6:	dd08      	ble.n	801b60a <scroll_area_into_view+0x23e>
        lv_coord_t st = lv_obj_get_scroll_top(parent);
 801b5f8:	4620      	mov	r0, r4
 801b5fa:	f7ff fc05 	bl	801ae08 <lv_obj_get_scroll_top>
        if(st - y_scroll < 0) y_scroll = 0;
 801b5fe:	1b40      	subs	r0, r0, r5
 801b600:	2800      	cmp	r0, #0
 801b602:	f6bf af42 	bge.w	801b48a <scroll_area_into_view+0xbe>
 801b606:	2500      	movs	r5, #0
 801b608:	e73f      	b.n	801b48a <scroll_area_into_view+0xbe>
    else if(bottom_diff > 0) {
 801b60a:	9b03      	ldr	r3, [sp, #12]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	dc01      	bgt.n	801b614 <scroll_area_into_view+0x248>
    lv_coord_t y_scroll = 0;
 801b610:	2500      	movs	r5, #0
 801b612:	e73a      	b.n	801b48a <scroll_area_into_view+0xbe>
        y_scroll = -bottom_diff;
 801b614:	9b07      	ldr	r3, [sp, #28]
 801b616:	425b      	negs	r3, r3
 801b618:	b21d      	sxth	r5, r3
        lv_coord_t sb = lv_obj_get_scroll_bottom(parent);
 801b61a:	4620      	mov	r0, r4
 801b61c:	f7ff fbfc 	bl	801ae18 <lv_obj_get_scroll_bottom>
        if(sb + y_scroll < 0) y_scroll = 0;
 801b620:	42e8      	cmn	r0, r5
 801b622:	f57f af32 	bpl.w	801b48a <scroll_area_into_view+0xbe>
 801b626:	2500      	movs	r5, #0
 801b628:	e72f      	b.n	801b48a <scroll_area_into_view+0xbe>
            snap_goal = parent->coords.y2 - pbottom;
 801b62a:	8b63      	ldrh	r3, [r4, #26]
 801b62c:	eba3 030a 	sub.w	r3, r3, sl
 801b630:	b29b      	uxth	r3, r3
            act = area_tmp->y2 + y_scroll;
 801b632:	f8bb 2006 	ldrh.w	r2, [fp, #6]
 801b636:	b2ad      	uxth	r5, r5
 801b638:	442a      	add	r2, r5
 801b63a:	b292      	uxth	r2, r2
            y_scroll += snap_goal - act;
 801b63c:	1a9b      	subs	r3, r3, r2
 801b63e:	fa15 f383 	uxtah	r3, r5, r3
 801b642:	b21d      	sxth	r5, r3
            break;
 801b644:	e736      	b.n	801b4b4 <scroll_area_into_view+0xe8>
            snap_goal = parent->coords.y1 + ptop + parent_h / 2;
 801b646:	8ae3      	ldrh	r3, [r4, #22]
 801b648:	441e      	add	r6, r3
 801b64a:	9b06      	ldr	r3, [sp, #24]
 801b64c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b650:	105b      	asrs	r3, r3, #1
 801b652:	fa13 f686 	uxtah	r6, r3, r6
 801b656:	b2b6      	uxth	r6, r6
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801b658:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 801b65c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 801b660:	1a9b      	subs	r3, r3, r2
 801b662:	b29b      	uxth	r3, r3
 801b664:	3301      	adds	r3, #1
            act = lv_area_get_height(area_tmp) / 2 + area_tmp->y1 + y_scroll;
 801b666:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 801b66a:	fa01 f383 	sxtah	r3, r1, r3
 801b66e:	eb02 0263 	add.w	r2, r2, r3, asr #1
 801b672:	b2ad      	uxth	r5, r5
 801b674:	fa15 f282 	uxtah	r2, r5, r2
 801b678:	b292      	uxth	r2, r2
            y_scroll += snap_goal - act;
 801b67a:	1ab6      	subs	r6, r6, r2
 801b67c:	fa15 f686 	uxtah	r6, r5, r6
 801b680:	b235      	sxth	r5, r6
            break;
 801b682:	e717      	b.n	801b4b4 <scroll_area_into_view+0xe8>
    else if(left_diff > 0) {
 801b684:	2e00      	cmp	r6, #0
 801b686:	dc03      	bgt.n	801b690 <scroll_area_into_view+0x2c4>
    else if(right_diff > 0) {
 801b688:	2b00      	cmp	r3, #0
 801b68a:	dc0a      	bgt.n	801b6a2 <scroll_area_into_view+0x2d6>
    lv_coord_t x_scroll = 0;
 801b68c:	2600      	movs	r6, #0
 801b68e:	e745      	b.n	801b51c <scroll_area_into_view+0x150>
        lv_coord_t sl = lv_obj_get_scroll_left(parent);
 801b690:	4620      	mov	r0, r4
 801b692:	f7ff fc19 	bl	801aec8 <lv_obj_get_scroll_left>
        if(sl - x_scroll < 0) x_scroll = 0;
 801b696:	1b80      	subs	r0, r0, r6
 801b698:	2800      	cmp	r0, #0
 801b69a:	f6bf af3f 	bge.w	801b51c <scroll_area_into_view+0x150>
 801b69e:	2600      	movs	r6, #0
 801b6a0:	e73c      	b.n	801b51c <scroll_area_into_view+0x150>
        x_scroll = -right_diff;
 801b6a2:	4252      	negs	r2, r2
 801b6a4:	b216      	sxth	r6, r2
        lv_coord_t sr = lv_obj_get_scroll_right(parent);
 801b6a6:	4620      	mov	r0, r4
 801b6a8:	f7ff fc80 	bl	801afac <lv_obj_get_scroll_right>
        if(sr + x_scroll < 0) x_scroll = 0;
 801b6ac:	42f0      	cmn	r0, r6
 801b6ae:	f57f af35 	bpl.w	801b51c <scroll_area_into_view+0x150>
 801b6b2:	2600      	movs	r6, #0
 801b6b4:	e732      	b.n	801b51c <scroll_area_into_view+0x150>
            snap_goal = parent->coords.x2 - pright;
 801b6b6:	8b23      	ldrh	r3, [r4, #24]
 801b6b8:	eba3 0308 	sub.w	r3, r3, r8
 801b6bc:	b29b      	uxth	r3, r3
            act = area_tmp->x2 + x_scroll;
 801b6be:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801b6c2:	b2b6      	uxth	r6, r6
 801b6c4:	4432      	add	r2, r6
 801b6c6:	b292      	uxth	r2, r2
            x_scroll += snap_goal - act;
 801b6c8:	1a9b      	subs	r3, r3, r2
 801b6ca:	fa16 f383 	uxtah	r3, r6, r3
 801b6ce:	b21e      	sxth	r6, r3
            break;
 801b6d0:	e745      	b.n	801b55e <scroll_area_into_view+0x192>
            snap_goal = parent->coords.x1 + pleft + parent_w / 2;
 801b6d2:	8aa2      	ldrh	r2, [r4, #20]
 801b6d4:	4492      	add	sl, r2
 801b6d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801b6da:	105b      	asrs	r3, r3, #1
 801b6dc:	fa13 fa8a 	uxtah	sl, r3, sl
 801b6e0:	fa1f fa8a 	uxth.w	sl, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801b6e4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801b6e8:	f8b9 2000 	ldrh.w	r2, [r9]
 801b6ec:	1a9b      	subs	r3, r3, r2
 801b6ee:	b29b      	uxth	r3, r3
 801b6f0:	3301      	adds	r3, #1
            act = lv_area_get_width(area_tmp) / 2 + area_tmp->x1 + x_scroll;
 801b6f2:	f3c3 31c0 	ubfx	r1, r3, #15, #1
 801b6f6:	fa01 f383 	sxtah	r3, r1, r3
 801b6fa:	eb02 0263 	add.w	r2, r2, r3, asr #1
 801b6fe:	b2b6      	uxth	r6, r6
 801b700:	fa16 f282 	uxtah	r2, r6, r2
 801b704:	b292      	uxth	r2, r2
            x_scroll += snap_goal - act;
 801b706:	ebaa 0a02 	sub.w	sl, sl, r2
 801b70a:	fa16 fa8a 	uxtah	sl, r6, sl
 801b70e:	fa0f f68a 	sxth.w	r6, sl
            break;
 801b712:	e724      	b.n	801b55e <scroll_area_into_view+0x192>
    if((scroll_dir & LV_DIR_LEFT) == 0 && x_scroll < 0) x_scroll = 0;
 801b714:	2600      	movs	r6, #0
 801b716:	e73d      	b.n	801b594 <scroll_area_into_view+0x1c8>
    if((scroll_dir & LV_DIR_TOP) == 0 && y_scroll < 0) y_scroll = 0;
 801b718:	2500      	movs	r5, #0
 801b71a:	e749      	b.n	801b5b0 <scroll_area_into_view+0x1e4>
    scroll_value->x += anim_en == LV_ANIM_OFF ? 0 : x_scroll;
 801b71c:	2200      	movs	r2, #0
 801b71e:	e754      	b.n	801b5ca <scroll_area_into_view+0x1fe>
    scroll_value->y += anim_en == LV_ANIM_OFF ? 0 : y_scroll;
 801b720:	2200      	movs	r2, #0
 801b722:	e75a      	b.n	801b5da <scroll_area_into_view+0x20e>
 801b724:	0801b10f 	.word	0x0801b10f
 801b728:	0801b129 	.word	0x0801b129

0801b72c <lv_obj_scroll_to_view_recursive>:
{
 801b72c:	b570      	push	{r4, r5, r6, lr}
 801b72e:	b082      	sub	sp, #8
 801b730:	4605      	mov	r5, r0
 801b732:	460e      	mov	r6, r1
    lv_obj_update_layout(obj);
 801b734:	f7ff f8b2 	bl	801a89c <lv_obj_update_layout>
    lv_point_t p = {0, 0};
 801b738:	2300      	movs	r3, #0
 801b73a:	f8ad 3004 	strh.w	r3, [sp, #4]
 801b73e:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_t * parent = lv_obj_get_parent(child);
 801b742:	4628      	mov	r0, r5
 801b744:	f001 fd16 	bl	801d174 <lv_obj_get_parent>
 801b748:	4604      	mov	r4, r0
    lv_obj_t * child = obj;
 801b74a:	4629      	mov	r1, r5
    while(parent) {
 801b74c:	e00a      	b.n	801b764 <lv_obj_scroll_to_view_recursive+0x38>
        scroll_area_into_view(&obj->coords, child, &p, anim_en);
 801b74e:	4633      	mov	r3, r6
 801b750:	aa01      	add	r2, sp, #4
 801b752:	f105 0014 	add.w	r0, r5, #20
 801b756:	f7ff fe39 	bl	801b3cc <scroll_area_into_view>
        parent = lv_obj_get_parent(parent);
 801b75a:	4620      	mov	r0, r4
 801b75c:	f001 fd0a 	bl	801d174 <lv_obj_get_parent>
        child = parent;
 801b760:	4621      	mov	r1, r4
        parent = lv_obj_get_parent(parent);
 801b762:	4604      	mov	r4, r0
    while(parent) {
 801b764:	2c00      	cmp	r4, #0
 801b766:	d1f2      	bne.n	801b74e <lv_obj_scroll_to_view_recursive+0x22>
}
 801b768:	b002      	add	sp, #8
 801b76a:	bd70      	pop	{r4, r5, r6, pc}

0801b76c <lv_obj_get_scrollbar_area>:
{
 801b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b770:	b095      	sub	sp, #84	@ 0x54
 801b772:	4604      	mov	r4, r0
 801b774:	460f      	mov	r7, r1
 801b776:	4616      	mov	r6, r2
    lv_area_set(hor_area, 0, 0, -1, -1);
 801b778:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801b77c:	9500      	str	r5, [sp, #0]
 801b77e:	462b      	mov	r3, r5
 801b780:	2200      	movs	r2, #0
 801b782:	4611      	mov	r1, r2
 801b784:	4638      	mov	r0, r7
 801b786:	f7e6 f8f6 	bl	8001976 <lv_area_set>
    lv_area_set(ver_area, 0, 0, -1, -1);
 801b78a:	9500      	str	r5, [sp, #0]
 801b78c:	462b      	mov	r3, r5
 801b78e:	2200      	movs	r2, #0
 801b790:	4611      	mov	r1, r2
 801b792:	4630      	mov	r0, r6
 801b794:	f7e6 f8ef 	bl	8001976 <lv_area_set>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_SCROLLABLE) == false) return;
 801b798:	2110      	movs	r1, #16
 801b79a:	4620      	mov	r0, r4
 801b79c:	f7fc fe77 	bl	801848e <lv_obj_has_flag>
 801b7a0:	9003      	str	r0, [sp, #12]
 801b7a2:	b120      	cbz	r0, 801b7ae <lv_obj_get_scrollbar_area+0x42>
    lv_dir_t sm = lv_obj_get_scrollbar_mode(obj);
 801b7a4:	4620      	mov	r0, r4
 801b7a6:	f7ff faff 	bl	801ada8 <lv_obj_get_scrollbar_mode>
    if(sm == LV_SCROLLBAR_MODE_OFF)  return;
 801b7aa:	4681      	mov	r9, r0
 801b7ac:	b910      	cbnz	r0, 801b7b4 <lv_obj_get_scrollbar_area+0x48>
}
 801b7ae:	b015      	add	sp, #84	@ 0x54
 801b7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801b7b4:	2000      	movs	r0, #0
 801b7b6:	f7f7 fdbf 	bl	8013338 <lv_indev_get_next>
 801b7ba:	4605      	mov	r5, r0
    if(sm == LV_SCROLLBAR_MODE_ACTIVE) {
 801b7bc:	f1b9 0f02 	cmp.w	r9, #2
 801b7c0:	d10c      	bne.n	801b7dc <lv_obj_get_scrollbar_area+0x70>
        while(indev) {
 801b7c2:	b14d      	cbz	r5, 801b7d8 <lv_obj_get_scrollbar_area+0x6c>
            if(lv_indev_get_scroll_obj(indev) == obj) break;
 801b7c4:	4628      	mov	r0, r5
 801b7c6:	f7f9 f873 	bl	80148b0 <lv_indev_get_scroll_obj>
 801b7ca:	4284      	cmp	r4, r0
 801b7cc:	d004      	beq.n	801b7d8 <lv_obj_get_scrollbar_area+0x6c>
            indev = lv_indev_get_next(indev);
 801b7ce:	4628      	mov	r0, r5
 801b7d0:	f7f7 fdb2 	bl	8013338 <lv_indev_get_next>
 801b7d4:	4605      	mov	r5, r0
 801b7d6:	e7f4      	b.n	801b7c2 <lv_obj_get_scrollbar_area+0x56>
        if(indev == NULL)  return;
 801b7d8:	2d00      	cmp	r5, #0
 801b7da:	d0e8      	beq.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
    lv_coord_t st = lv_obj_get_scroll_top(obj);
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f7ff fb13 	bl	801ae08 <lv_obj_get_scroll_top>
 801b7e2:	4680      	mov	r8, r0
    lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	f7ff fb17 	bl	801ae18 <lv_obj_get_scroll_bottom>
 801b7ea:	9004      	str	r0, [sp, #16]
    lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f7ff fb6b 	bl	801aec8 <lv_obj_get_scroll_left>
 801b7f2:	9005      	str	r0, [sp, #20]
    lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801b7f4:	4620      	mov	r0, r4
 801b7f6:	f7ff fbd9 	bl	801afac <lv_obj_get_scroll_right>
 801b7fa:	9006      	str	r0, [sp, #24]
    lv_dir_t dir = lv_obj_get_scroll_dir(obj);
 801b7fc:	4620      	mov	r0, r4
 801b7fe:	f7ff fadb 	bl	801adb8 <lv_obj_get_scroll_dir>
 801b802:	4682      	mov	sl, r0
    if((dir & LV_DIR_VER) &&
 801b804:	f010 0f0c 	tst.w	r0, #12
 801b808:	d021      	beq.n	801b84e <lv_obj_get_scrollbar_area+0xe2>
 801b80a:	f1b9 0f01 	cmp.w	r9, #1
 801b80e:	f000 8127 	beq.w	801ba60 <lv_obj_get_scrollbar_area+0x2f4>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801b812:	f1b9 0f03 	cmp.w	r9, #3
 801b816:	d005      	beq.n	801b824 <lv_obj_get_scrollbar_area+0xb8>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801b818:	f1b9 0f02 	cmp.w	r9, #2
 801b81c:	d00e      	beq.n	801b83c <lv_obj_get_scrollbar_area+0xd0>
    bool ver_draw = false;
 801b81e:	f04f 0b00 	mov.w	fp, #0
 801b822:	e016      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801b824:	f1b8 0f00 	cmp.w	r8, #0
 801b828:	dd02      	ble.n	801b830 <lv_obj_get_scrollbar_area+0xc4>
        ver_draw = true;
 801b82a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b82e:	e010      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (st > 0 || sb > 0)) ||
 801b830:	9b04      	ldr	r3, [sp, #16]
 801b832:	2b00      	cmp	r3, #0
 801b834:	ddf0      	ble.n	801b818 <lv_obj_get_scrollbar_area+0xac>
        ver_draw = true;
 801b836:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b83a:	e00a      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_VER))) {
 801b83c:	4628      	mov	r0, r5
 801b83e:	f7f9 f826 	bl	801488e <lv_indev_get_scroll_dir>
 801b842:	280c      	cmp	r0, #12
 801b844:	f000 810f 	beq.w	801ba66 <lv_obj_get_scrollbar_area+0x2fa>
    bool ver_draw = false;
 801b848:	f04f 0b00 	mov.w	fp, #0
 801b84c:	e001      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
 801b84e:	f04f 0b00 	mov.w	fp, #0
    if((dir & LV_DIR_HOR) &&
 801b852:	f01a 0f03 	tst.w	sl, #3
 801b856:	d00a      	beq.n	801b86e <lv_obj_get_scrollbar_area+0x102>
 801b858:	f1b9 0f01 	cmp.w	r9, #1
 801b85c:	d00c      	beq.n	801b878 <lv_obj_get_scrollbar_area+0x10c>
       ((sm == LV_SCROLLBAR_MODE_ON) ||
 801b85e:	f1b9 0f03 	cmp.w	r9, #3
 801b862:	f000 8103 	beq.w	801ba6c <lv_obj_get_scrollbar_area+0x300>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801b866:	f1b9 0f02 	cmp.w	r9, #2
 801b86a:	f000 8108 	beq.w	801ba7e <lv_obj_get_scrollbar_area+0x312>
    if(!hor_draw && !ver_draw) return;
 801b86e:	f1bb 0f00 	cmp.w	fp, #0
 801b872:	d09c      	beq.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
 801b874:	2300      	movs	r3, #0
 801b876:	9303      	str	r3, [sp, #12]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801b878:	2216      	movs	r2, #22
 801b87a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b87e:	4620      	mov	r0, r4
 801b880:	f000 ff38 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801b884:	b2c3      	uxtb	r3, r0
 801b886:	930a      	str	r3, [sp, #40]	@ 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801b888:	2210      	movs	r2, #16
 801b88a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b88e:	4620      	mov	r0, r4
 801b890:	f000 ff30 	bl	801c6f4 <lv_obj_get_style_prop>
 801b894:	9012      	str	r0, [sp, #72]	@ 0x48
    return (lv_coord_t)v.num;
 801b896:	b203      	sxth	r3, r0
 801b898:	930c      	str	r3, [sp, #48]	@ 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801b89a:	2211      	movs	r2, #17
 801b89c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	f000 ff27 	bl	801c6f4 <lv_obj_get_style_prop>
 801b8a6:	9009      	str	r0, [sp, #36]	@ 0x24
    return (lv_coord_t)v.num;
 801b8a8:	b203      	sxth	r3, r0
 801b8aa:	930b      	str	r3, [sp, #44]	@ 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801b8ac:	2212      	movs	r2, #18
 801b8ae:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	f000 ff1e 	bl	801c6f4 <lv_obj_get_style_prop>
 801b8b8:	9011      	str	r0, [sp, #68]	@ 0x44
    return (lv_coord_t)v.num;
 801b8ba:	b203      	sxth	r3, r0
 801b8bc:	9310      	str	r3, [sp, #64]	@ 0x40
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801b8be:	2213      	movs	r2, #19
 801b8c0:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f000 ff15 	bl	801c6f4 <lv_obj_get_style_prop>
 801b8ca:	900d      	str	r0, [sp, #52]	@ 0x34
    return (lv_coord_t)v.num;
 801b8cc:	b203      	sxth	r3, r0
 801b8ce:	930f      	str	r3, [sp, #60]	@ 0x3c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801b8d0:	2201      	movs	r2, #1
 801b8d2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	f000 ff0c 	bl	801c6f4 <lv_obj_get_style_prop>
 801b8dc:	9008      	str	r0, [sp, #32]
    return (lv_coord_t)v.num;
 801b8de:	fa0f f980 	sxth.w	r9, r0
    lv_coord_t obj_h = lv_obj_get_height(obj);
 801b8e2:	4620      	mov	r0, r4
 801b8e4:	f7fd fefb 	bl	80196de <lv_obj_get_height>
 801b8e8:	4605      	mov	r5, r0
    lv_coord_t obj_w = lv_obj_get_width(obj);
 801b8ea:	4620      	mov	r0, r4
 801b8ec:	f7fd fef0 	bl	80196d0 <lv_obj_get_width>
 801b8f0:	9007      	str	r0, [sp, #28]
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801b8f2:	f1bb 0f00 	cmp.w	fp, #0
 801b8f6:	f000 80c9 	beq.w	801ba8c <lv_obj_get_scrollbar_area+0x320>
 801b8fa:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
    lv_coord_t hor_req_space = hor_draw ? tickness : 0;
 801b8fe:	9b03      	ldr	r3, [sp, #12]
 801b900:	b90b      	cbnz	r3, 801b906 <lv_obj_get_scrollbar_area+0x19a>
 801b902:	f04f 0900 	mov.w	r9, #0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BG_OPA);
 801b906:	2221      	movs	r2, #33	@ 0x21
 801b908:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801b90c:	4620      	mov	r0, r4
 801b90e:	f000 fef1 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801b912:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801b914:	2801      	cmp	r0, #1
 801b916:	f240 80bc 	bls.w	801ba92 <lv_obj_get_scrollbar_area+0x326>
    lv_coord_t content_h = obj_h + st + sb;
 801b91a:	fa1f fa85 	uxth.w	sl, r5
 801b91e:	44d0      	add	r8, sl
 801b920:	9b04      	ldr	r3, [sp, #16]
 801b922:	fa13 f388 	uxtah	r3, r3, r8
 801b926:	fa1f f883 	uxth.w	r8, r3
 801b92a:	b21b      	sxth	r3, r3
    if(ver_draw && content_h) {
 801b92c:	f1bb 0f00 	cmp.w	fp, #0
 801b930:	f000 80f8 	beq.w	801bb24 <lv_obj_get_scrollbar_area+0x3b8>
 801b934:	2b00      	cmp	r3, #0
 801b936:	f000 80f5 	beq.w	801bb24 <lv_obj_get_scrollbar_area+0x3b8>
        ver_area->y1 = obj->coords.y1;
 801b93a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801b93e:	8072      	strh	r2, [r6, #2]
        ver_area->y2 = obj->coords.y2;
 801b940:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 801b944:	80f2      	strh	r2, [r6, #6]
        if(rtl) {
 801b946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b948:	2a01      	cmp	r2, #1
 801b94a:	f000 80ad 	beq.w	801baa8 <lv_obj_get_scrollbar_area+0x33c>
            ver_area->x2 = obj->coords.x2 - right_space;
 801b94e:	8b21      	ldrh	r1, [r4, #24]
 801b950:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b952:	1a89      	subs	r1, r1, r2
 801b954:	b28a      	uxth	r2, r1
 801b956:	80b1      	strh	r1, [r6, #4]
            ver_area->x1 = ver_area->x2 - tickness + 1;
 801b958:	9908      	ldr	r1, [sp, #32]
 801b95a:	1a52      	subs	r2, r2, r1
 801b95c:	b292      	uxth	r2, r2
 801b95e:	3201      	adds	r2, #1
 801b960:	8032      	strh	r2, [r6, #0]
        lv_coord_t sb_h = ((obj_h - top_space - bottom_space - hor_req_space) * obj_h) / content_h;
 801b962:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b964:	1aaa      	subs	r2, r5, r2
 801b966:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b968:	1a52      	subs	r2, r2, r1
 801b96a:	f8cd 904c 	str.w	r9, [sp, #76]	@ 0x4c
 801b96e:	eba2 0209 	sub.w	r2, r2, r9
 801b972:	fb02 f505 	mul.w	r5, r2, r5
 801b976:	fb95 f5f3 	sdiv	r5, r5, r3
 801b97a:	b22d      	sxth	r5, r5
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801b97c:	46ab      	mov	fp, r5
 801b97e:	2000      	movs	r0, #0
 801b980:	f7f7 fcb2 	bl	80132e8 <lv_disp_get_dpi>
 801b984:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801b988:	0040      	lsls	r0, r0, #1
 801b98a:	28ef      	cmp	r0, #239	@ 0xef
 801b98c:	f300 8097 	bgt.w	801babe <lv_obj_get_scrollbar_area+0x352>
 801b990:	2301      	movs	r3, #1
 801b992:	459b      	cmp	fp, r3
 801b994:	f340 80a1 	ble.w	801bada <lv_obj_get_scrollbar_area+0x36e>
        rem = (obj_h - top_space - bottom_space - hor_req_space) -
 801b998:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801b99c:	ebaa 0302 	sub.w	r3, sl, r2
 801b9a0:	b29b      	uxth	r3, r3
 801b9a2:	f8bd b024 	ldrh.w	fp, [sp, #36]	@ 0x24
 801b9a6:	eba3 030b 	sub.w	r3, r3, fp
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	fa1f f989 	uxth.w	r9, r9
 801b9b0:	eba3 0309 	sub.w	r3, r3, r9
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	b2a9      	uxth	r1, r5
 801b9b8:	1a5b      	subs	r3, r3, r1
 801b9ba:	b298      	uxth	r0, r3
 801b9bc:	b21b      	sxth	r3, r3
        lv_coord_t scroll_h = content_h - obj_h; /*The size of the content which can be really scrolled*/
 801b9be:	eba8 080a 	sub.w	r8, r8, sl
 801b9c2:	fa0f f888 	sxth.w	r8, r8
        if(scroll_h <= 0) {
 801b9c6:	f1b8 0f00 	cmp.w	r8, #0
 801b9ca:	f340 809f 	ble.w	801bb0c <lv_obj_get_scrollbar_area+0x3a0>
            lv_coord_t sb_y = (rem * sb) / scroll_h;
 801b9ce:	9d04      	ldr	r5, [sp, #16]
 801b9d0:	fb05 f303 	mul.w	r3, r5, r3
 801b9d4:	fb93 f3f8 	sdiv	r3, r3, r8
            sb_y = rem - sb_y;
 801b9d8:	1ac3      	subs	r3, r0, r3
            ver_area->y1 = obj->coords.y1 + sb_y + top_space;
 801b9da:	8ae0      	ldrh	r0, [r4, #22]
 801b9dc:	fa10 f383 	uxtah	r3, r0, r3
 801b9e0:	fa12 f383 	uxtah	r3, r2, r3
 801b9e4:	b218      	sxth	r0, r3
 801b9e6:	8070      	strh	r0, [r6, #2]
            ver_area->y2 = ver_area->y1 + sb_h - 1;
 801b9e8:	fa11 f383 	uxtah	r3, r1, r3
 801b9ec:	b29b      	uxth	r3, r3
 801b9ee:	3b01      	subs	r3, #1
 801b9f0:	80f3      	strh	r3, [r6, #6]
            if(ver_area->y1 < obj->coords.y1 + top_space) {
 801b9f2:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801b9f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b9f8:	440b      	add	r3, r1
 801b9fa:	4298      	cmp	r0, r3
 801b9fc:	f2c0 8135 	blt.w	801bc6a <lv_obj_get_scrollbar_area+0x4fe>
            if(ver_area->y2 > obj->coords.y2 - hor_req_space - bottom_space) {
 801ba00:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801ba04:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
 801ba08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ba0a:	1ad3      	subs	r3, r2, r3
 801ba0c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ba0e:	1a1b      	subs	r3, r3, r0
 801ba10:	4299      	cmp	r1, r3
 801ba12:	f340 8087 	ble.w	801bb24 <lv_obj_get_scrollbar_area+0x3b8>
                ver_area->y2 = obj->coords.y2 - hor_req_space - bottom_space;
 801ba16:	b292      	uxth	r2, r2
 801ba18:	eba2 0509 	sub.w	r5, r2, r9
 801ba1c:	b2ad      	uxth	r5, r5
 801ba1e:	eba5 050b 	sub.w	r5, r5, fp
 801ba22:	b22d      	sxth	r5, r5
 801ba24:	80f5      	strh	r5, [r6, #6]
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801ba26:	2000      	movs	r0, #0
 801ba28:	f7f7 fc5e 	bl	80132e8 <lv_disp_get_dpi>
 801ba2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ba30:	0043      	lsls	r3, r0, #1
 801ba32:	2bef      	cmp	r3, #239	@ 0xef
 801ba34:	f300 815a 	bgt.w	801bcec <lv_obj_get_scrollbar_area+0x580>
 801ba38:	2301      	movs	r3, #1
 801ba3a:	1aed      	subs	r5, r5, r3
 801ba3c:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801ba40:	429d      	cmp	r5, r3
 801ba42:	da6f      	bge.n	801bb24 <lv_obj_get_scrollbar_area+0x3b8>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801ba44:	88f5      	ldrh	r5, [r6, #6]
 801ba46:	2000      	movs	r0, #0
 801ba48:	f7f7 fc4e 	bl	80132e8 <lv_disp_get_dpi>
 801ba4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ba50:	0043      	lsls	r3, r0, #1
 801ba52:	2bef      	cmp	r3, #239	@ 0xef
 801ba54:	f300 8158 	bgt.w	801bd08 <lv_obj_get_scrollbar_area+0x59c>
 801ba58:	2301      	movs	r3, #1
 801ba5a:	1aed      	subs	r5, r5, r3
 801ba5c:	8075      	strh	r5, [r6, #2]
 801ba5e:	e061      	b.n	801bb24 <lv_obj_get_scrollbar_area+0x3b8>
        ver_draw = true;
 801ba60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801ba64:	e6f5      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
 801ba66:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801ba6a:	e6f2      	b.n	801b852 <lv_obj_get_scrollbar_area+0xe6>
        (sm == LV_SCROLLBAR_MODE_AUTO && (sl > 0 || sr > 0)) ||
 801ba6c:	9b05      	ldr	r3, [sp, #20]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	f73f af02 	bgt.w	801b878 <lv_obj_get_scrollbar_area+0x10c>
 801ba74:	9b06      	ldr	r3, [sp, #24]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	f73f aefe 	bgt.w	801b878 <lv_obj_get_scrollbar_area+0x10c>
 801ba7c:	e6f3      	b.n	801b866 <lv_obj_get_scrollbar_area+0xfa>
        (sm == LV_SCROLLBAR_MODE_ACTIVE && lv_indev_get_scroll_dir(indev) == LV_DIR_HOR))) {
 801ba7e:	4628      	mov	r0, r5
 801ba80:	f7f8 ff05 	bl	801488e <lv_indev_get_scroll_dir>
 801ba84:	2803      	cmp	r0, #3
 801ba86:	f47f aef2 	bne.w	801b86e <lv_obj_get_scrollbar_area+0x102>
 801ba8a:	e6f5      	b.n	801b878 <lv_obj_get_scrollbar_area+0x10c>
    lv_coord_t ver_reg_space = ver_draw ? tickness : 0;
 801ba8c:	2300      	movs	r3, #0
 801ba8e:	930e      	str	r3, [sp, #56]	@ 0x38
 801ba90:	e735      	b.n	801b8fe <lv_obj_get_scrollbar_area+0x192>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_OPA);
 801ba92:	2231      	movs	r2, #49	@ 0x31
 801ba94:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 801ba98:	4620      	mov	r0, r4
 801ba9a:	f000 fe2b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801ba9e:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_opa(obj, LV_PART_SCROLLBAR) < LV_OPA_MIN &&
 801baa0:	2801      	cmp	r0, #1
 801baa2:	f63f af3a 	bhi.w	801b91a <lv_obj_get_scrollbar_area+0x1ae>
 801baa6:	e682      	b.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
            ver_area->x1 = obj->coords.x1 + left_space;
 801baa8:	8aa2      	ldrh	r2, [r4, #20]
 801baaa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801baac:	440a      	add	r2, r1
 801baae:	8032      	strh	r2, [r6, #0]
            ver_area->x2 = ver_area->x1 + tickness - 1;
 801bab0:	9908      	ldr	r1, [sp, #32]
 801bab2:	fa11 f282 	uxtah	r2, r1, r2
 801bab6:	b292      	uxth	r2, r2
 801bab8:	3a01      	subs	r2, #1
 801baba:	80b2      	strh	r2, [r6, #4]
 801babc:	e751      	b.n	801b962 <lv_obj_get_scrollbar_area+0x1f6>
        sb_h = LV_MAX(sb_h, SCROLLBAR_MIN_SIZE);
 801babe:	2000      	movs	r0, #0
 801bac0:	f7f7 fc12 	bl	80132e8 <lv_disp_get_dpi>
 801bac4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bac8:	0043      	lsls	r3, r0, #1
 801baca:	3350      	adds	r3, #80	@ 0x50
 801bacc:	4ab6      	ldr	r2, [pc, #728]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bace:	fb82 1203 	smull	r1, r2, r2, r3
 801bad2:	17db      	asrs	r3, r3, #31
 801bad4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bad8:	e75b      	b.n	801b992 <lv_obj_get_scrollbar_area+0x226>
 801bada:	2000      	movs	r0, #0
 801badc:	f7f7 fc04 	bl	80132e8 <lv_disp_get_dpi>
 801bae0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bae4:	0043      	lsls	r3, r0, #1
 801bae6:	2bef      	cmp	r3, #239	@ 0xef
 801bae8:	dc01      	bgt.n	801baee <lv_obj_get_scrollbar_area+0x382>
 801baea:	2501      	movs	r5, #1
 801baec:	e754      	b.n	801b998 <lv_obj_get_scrollbar_area+0x22c>
 801baee:	2000      	movs	r0, #0
 801baf0:	f7f7 fbfa 	bl	80132e8 <lv_disp_get_dpi>
 801baf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801baf8:	0043      	lsls	r3, r0, #1
 801bafa:	3350      	adds	r3, #80	@ 0x50
 801bafc:	4aaa      	ldr	r2, [pc, #680]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bafe:	fb82 1203 	smull	r1, r2, r2, r3
 801bb02:	17db      	asrs	r3, r3, #31
 801bb04:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bb08:	b21d      	sxth	r5, r3
 801bb0a:	e745      	b.n	801b998 <lv_obj_get_scrollbar_area+0x22c>
            ver_area->y1 = obj->coords.y1 + top_space;
 801bb0c:	8ae3      	ldrh	r3, [r4, #22]
 801bb0e:	4413      	add	r3, r2
 801bb10:	8073      	strh	r3, [r6, #2]
            ver_area->y2 = obj->coords.y2 - bottom_space - hor_req_space - 1;
 801bb12:	8b63      	ldrh	r3, [r4, #26]
 801bb14:	eba3 030b 	sub.w	r3, r3, fp
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	eba3 0309 	sub.w	r3, r3, r9
 801bb1e:	b29b      	uxth	r3, r3
 801bb20:	3b01      	subs	r3, #1
 801bb22:	80f3      	strh	r3, [r6, #6]
    lv_coord_t content_w = obj_w + sl + sr;
 801bb24:	f8bd 801c 	ldrh.w	r8, [sp, #28]
 801bb28:	9b05      	ldr	r3, [sp, #20]
 801bb2a:	4443      	add	r3, r8
 801bb2c:	9a06      	ldr	r2, [sp, #24]
 801bb2e:	fa12 f383 	uxtah	r3, r2, r3
 801bb32:	fa1f f983 	uxth.w	r9, r3
 801bb36:	b21b      	sxth	r3, r3
    if(hor_draw && content_w) {
 801bb38:	9a03      	ldr	r2, [sp, #12]
 801bb3a:	2a00      	cmp	r2, #0
 801bb3c:	f43f ae37 	beq.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	f43f ae34 	beq.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
        hor_area->y2 = obj->coords.y2 - bottom_space;
 801bb46:	8b61      	ldrh	r1, [r4, #26]
 801bb48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb4a:	1a89      	subs	r1, r1, r2
 801bb4c:	b28a      	uxth	r2, r1
 801bb4e:	80f9      	strh	r1, [r7, #6]
        hor_area->y1 = hor_area->y2 - tickness + 1;
 801bb50:	9908      	ldr	r1, [sp, #32]
 801bb52:	1a52      	subs	r2, r2, r1
 801bb54:	b292      	uxth	r2, r2
 801bb56:	3201      	adds	r2, #1
 801bb58:	807a      	strh	r2, [r7, #2]
        hor_area->x1 = obj->coords.x1;
 801bb5a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801bb5e:	803a      	strh	r2, [r7, #0]
        hor_area->x2 = obj->coords.x2;
 801bb60:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801bb64:	80ba      	strh	r2, [r7, #4]
        lv_coord_t sb_w = ((obj_w - left_space - right_space - ver_reg_space) * obj_w) / content_w;
 801bb66:	9907      	ldr	r1, [sp, #28]
 801bb68:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb6a:	1a8a      	subs	r2, r1, r2
 801bb6c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801bb6e:	1a12      	subs	r2, r2, r0
 801bb70:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801bb72:	4683      	mov	fp, r0
 801bb74:	1a12      	subs	r2, r2, r0
 801bb76:	fb02 f501 	mul.w	r5, r2, r1
 801bb7a:	fb95 f5f3 	sdiv	r5, r5, r3
 801bb7e:	b22d      	sxth	r5, r5
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801bb80:	462e      	mov	r6, r5
 801bb82:	2000      	movs	r0, #0
 801bb84:	f7f7 fbb0 	bl	80132e8 <lv_disp_get_dpi>
 801bb88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bb8c:	0040      	lsls	r0, r0, #1
 801bb8e:	28ef      	cmp	r0, #239	@ 0xef
 801bb90:	f300 80c9 	bgt.w	801bd26 <lv_obj_get_scrollbar_area+0x5ba>
 801bb94:	2301      	movs	r3, #1
 801bb96:	429e      	cmp	r6, r3
 801bb98:	f340 80d3 	ble.w	801bd42 <lv_obj_get_scrollbar_area+0x5d6>
        rem = (obj_w - left_space - right_space - ver_reg_space) -
 801bb9c:	f8bd 2044 	ldrh.w	r2, [sp, #68]	@ 0x44
 801bba0:	eba8 0302 	sub.w	r3, r8, r2
 801bba4:	b29b      	uxth	r3, r3
 801bba6:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
 801bbaa:	1b9b      	subs	r3, r3, r6
 801bbac:	b29b      	uxth	r3, r3
 801bbae:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801bbb2:	eba3 030a 	sub.w	r3, r3, sl
 801bbb6:	b29b      	uxth	r3, r3
 801bbb8:	b2ad      	uxth	r5, r5
 801bbba:	1b5b      	subs	r3, r3, r5
 801bbbc:	b299      	uxth	r1, r3
 801bbbe:	b21b      	sxth	r3, r3
        lv_coord_t scroll_w = content_w - obj_w; /*The size of the content which can be really scrolled*/
 801bbc0:	eba9 0908 	sub.w	r9, r9, r8
 801bbc4:	fa0f f989 	sxth.w	r9, r9
        if(scroll_w <= 0) {
 801bbc8:	f1b9 0f00 	cmp.w	r9, #0
 801bbcc:	f340 80d2 	ble.w	801bd74 <lv_obj_get_scrollbar_area+0x608>
            lv_coord_t sb_x = (rem * sr) / scroll_w;
 801bbd0:	9806      	ldr	r0, [sp, #24]
 801bbd2:	fb00 f303 	mul.w	r3, r0, r3
 801bbd6:	fb93 f3f9 	sdiv	r3, r3, r9
            sb_x = rem - sb_x;
 801bbda:	1ac9      	subs	r1, r1, r3
 801bbdc:	b289      	uxth	r1, r1
            if(rtl) {
 801bbde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bbe0:	2b01      	cmp	r3, #1
 801bbe2:	f000 80e3 	beq.w	801bdac <lv_obj_get_scrollbar_area+0x640>
                hor_area->x1 = obj->coords.x1 + sb_x + left_space;
 801bbe6:	8aa3      	ldrh	r3, [r4, #20]
 801bbe8:	4419      	add	r1, r3
 801bbea:	fa12 f381 	uxtah	r3, r2, r1
 801bbee:	b219      	sxth	r1, r3
 801bbf0:	8039      	strh	r1, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801bbf2:	fa15 f383 	uxtah	r3, r5, r3
 801bbf6:	b29b      	uxth	r3, r3
 801bbf8:	3b01      	subs	r3, #1
 801bbfa:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space) {
 801bbfc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801bc00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bc02:	4403      	add	r3, r0
 801bc04:	4299      	cmp	r1, r3
 801bc06:	f2c0 815d 	blt.w	801bec4 <lv_obj_get_scrollbar_area+0x758>
                if(hor_area->x2 > obj->coords.x2 - ver_reg_space - right_space) {
 801bc0a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801bc0e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801bc12:	eba2 030b 	sub.w	r3, r2, fp
 801bc16:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801bc18:	1a1b      	subs	r3, r3, r0
 801bc1a:	4299      	cmp	r1, r3
 801bc1c:	f77f adc7 	ble.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - ver_reg_space - right_space;
 801bc20:	b294      	uxth	r4, r2
 801bc22:	eba4 040a 	sub.w	r4, r4, sl
 801bc26:	b2a4      	uxth	r4, r4
 801bc28:	1ba4      	subs	r4, r4, r6
 801bc2a:	b224      	sxth	r4, r4
 801bc2c:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801bc2e:	2000      	movs	r0, #0
 801bc30:	f7f7 fb5a 	bl	80132e8 <lv_disp_get_dpi>
 801bc34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc38:	0043      	lsls	r3, r0, #1
 801bc3a:	2bef      	cmp	r3, #239	@ 0xef
 801bc3c:	f300 817c 	bgt.w	801bf38 <lv_obj_get_scrollbar_area+0x7cc>
 801bc40:	2301      	movs	r3, #1
 801bc42:	1ae4      	subs	r4, r4, r3
 801bc44:	f9b7 3000 	ldrsh.w	r3, [r7]
 801bc48:	429c      	cmp	r4, r3
 801bc4a:	f6bf adb0 	bge.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801bc4e:	88bc      	ldrh	r4, [r7, #4]
 801bc50:	2000      	movs	r0, #0
 801bc52:	f7f7 fb49 	bl	80132e8 <lv_disp_get_dpi>
 801bc56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc5a:	0043      	lsls	r3, r0, #1
 801bc5c:	2bef      	cmp	r3, #239	@ 0xef
 801bc5e:	f300 8179 	bgt.w	801bf54 <lv_obj_get_scrollbar_area+0x7e8>
 801bc62:	2301      	movs	r3, #1
 801bc64:	1ae4      	subs	r4, r4, r3
 801bc66:	803c      	strh	r4, [r7, #0]
 801bc68:	e5a1      	b.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
                ver_area->y1 = obj->coords.y1 + top_space;
 801bc6a:	fa12 f181 	uxtah	r1, r2, r1
 801bc6e:	fa0f f881 	sxth.w	r8, r1
 801bc72:	f8a6 8002 	strh.w	r8, [r6, #2]
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801bc76:	2000      	movs	r0, #0
 801bc78:	f7f7 fb36 	bl	80132e8 <lv_disp_get_dpi>
 801bc7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bc80:	0043      	lsls	r3, r0, #1
 801bc82:	2bef      	cmp	r3, #239	@ 0xef
 801bc84:	dc15      	bgt.n	801bcb2 <lv_obj_get_scrollbar_area+0x546>
 801bc86:	2301      	movs	r3, #1
 801bc88:	4498      	add	r8, r3
 801bc8a:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801bc8e:	4598      	cmp	r8, r3
 801bc90:	f77f aeb6 	ble.w	801ba00 <lv_obj_get_scrollbar_area+0x294>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801bc94:	f8b6 8002 	ldrh.w	r8, [r6, #2]
 801bc98:	2000      	movs	r0, #0
 801bc9a:	f7f7 fb25 	bl	80132e8 <lv_disp_get_dpi>
 801bc9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bca2:	0043      	lsls	r3, r0, #1
 801bca4:	2bef      	cmp	r3, #239	@ 0xef
 801bca6:	dc12      	bgt.n	801bcce <lv_obj_get_scrollbar_area+0x562>
 801bca8:	2301      	movs	r3, #1
 801bcaa:	4498      	add	r8, r3
 801bcac:	f8a6 8006 	strh.w	r8, [r6, #6]
 801bcb0:	e6a6      	b.n	801ba00 <lv_obj_get_scrollbar_area+0x294>
                if(ver_area->y1 + SCROLLBAR_MIN_SIZE > ver_area->y2) {
 801bcb2:	2000      	movs	r0, #0
 801bcb4:	f7f7 fb18 	bl	80132e8 <lv_disp_get_dpi>
 801bcb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bcbc:	0043      	lsls	r3, r0, #1
 801bcbe:	3350      	adds	r3, #80	@ 0x50
 801bcc0:	4a39      	ldr	r2, [pc, #228]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bcc2:	fb82 1203 	smull	r1, r2, r2, r3
 801bcc6:	17db      	asrs	r3, r3, #31
 801bcc8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bccc:	e7dc      	b.n	801bc88 <lv_obj_get_scrollbar_area+0x51c>
                    ver_area->y2 = ver_area->y1 + SCROLLBAR_MIN_SIZE;
 801bcce:	2000      	movs	r0, #0
 801bcd0:	f7f7 fb0a 	bl	80132e8 <lv_disp_get_dpi>
 801bcd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bcd8:	0043      	lsls	r3, r0, #1
 801bcda:	3350      	adds	r3, #80	@ 0x50
 801bcdc:	4a32      	ldr	r2, [pc, #200]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bcde:	fb82 1203 	smull	r1, r2, r2, r3
 801bce2:	17db      	asrs	r3, r3, #31
 801bce4:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bce8:	b29b      	uxth	r3, r3
 801bcea:	e7de      	b.n	801bcaa <lv_obj_get_scrollbar_area+0x53e>
                if(ver_area->y2 - SCROLLBAR_MIN_SIZE < ver_area->y1) {
 801bcec:	2000      	movs	r0, #0
 801bcee:	f7f7 fafb 	bl	80132e8 <lv_disp_get_dpi>
 801bcf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bcf6:	0043      	lsls	r3, r0, #1
 801bcf8:	3350      	adds	r3, #80	@ 0x50
 801bcfa:	4a2b      	ldr	r2, [pc, #172]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bcfc:	fb82 1203 	smull	r1, r2, r2, r3
 801bd00:	17db      	asrs	r3, r3, #31
 801bd02:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bd06:	e698      	b.n	801ba3a <lv_obj_get_scrollbar_area+0x2ce>
                    ver_area->y1 = ver_area->y2 - SCROLLBAR_MIN_SIZE;
 801bd08:	2000      	movs	r0, #0
 801bd0a:	f7f7 faed 	bl	80132e8 <lv_disp_get_dpi>
 801bd0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bd12:	0043      	lsls	r3, r0, #1
 801bd14:	3350      	adds	r3, #80	@ 0x50
 801bd16:	4a24      	ldr	r2, [pc, #144]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bd18:	fb82 1203 	smull	r1, r2, r2, r3
 801bd1c:	17db      	asrs	r3, r3, #31
 801bd1e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bd22:	b29b      	uxth	r3, r3
 801bd24:	e699      	b.n	801ba5a <lv_obj_get_scrollbar_area+0x2ee>
        sb_w = LV_MAX(sb_w, SCROLLBAR_MIN_SIZE);
 801bd26:	2000      	movs	r0, #0
 801bd28:	f7f7 fade 	bl	80132e8 <lv_disp_get_dpi>
 801bd2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bd30:	0043      	lsls	r3, r0, #1
 801bd32:	3350      	adds	r3, #80	@ 0x50
 801bd34:	4a1c      	ldr	r2, [pc, #112]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bd36:	fb82 1203 	smull	r1, r2, r2, r3
 801bd3a:	17db      	asrs	r3, r3, #31
 801bd3c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bd40:	e729      	b.n	801bb96 <lv_obj_get_scrollbar_area+0x42a>
 801bd42:	2000      	movs	r0, #0
 801bd44:	f7f7 fad0 	bl	80132e8 <lv_disp_get_dpi>
 801bd48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bd4c:	0043      	lsls	r3, r0, #1
 801bd4e:	2bef      	cmp	r3, #239	@ 0xef
 801bd50:	dc01      	bgt.n	801bd56 <lv_obj_get_scrollbar_area+0x5ea>
 801bd52:	2501      	movs	r5, #1
 801bd54:	e722      	b.n	801bb9c <lv_obj_get_scrollbar_area+0x430>
 801bd56:	2000      	movs	r0, #0
 801bd58:	f7f7 fac6 	bl	80132e8 <lv_disp_get_dpi>
 801bd5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bd60:	0043      	lsls	r3, r0, #1
 801bd62:	3350      	adds	r3, #80	@ 0x50
 801bd64:	4a10      	ldr	r2, [pc, #64]	@ (801bda8 <lv_obj_get_scrollbar_area+0x63c>)
 801bd66:	fb82 1203 	smull	r1, r2, r2, r3
 801bd6a:	17dd      	asrs	r5, r3, #31
 801bd6c:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
 801bd70:	b22d      	sxth	r5, r5
 801bd72:	e713      	b.n	801bb9c <lv_obj_get_scrollbar_area+0x430>
            if(rtl) {
 801bd74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd76:	2b01      	cmp	r3, #1
 801bd78:	d00b      	beq.n	801bd92 <lv_obj_get_scrollbar_area+0x626>
                hor_area->x1 = obj->coords.x1 + left_space;
 801bd7a:	8aa3      	ldrh	r3, [r4, #20]
 801bd7c:	4413      	add	r3, r2
 801bd7e:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space - ver_reg_space - 1;
 801bd80:	8b23      	ldrh	r3, [r4, #24]
 801bd82:	1b9b      	subs	r3, r3, r6
 801bd84:	b29b      	uxth	r3, r3
 801bd86:	eba3 030a 	sub.w	r3, r3, sl
 801bd8a:	b29b      	uxth	r3, r3
 801bd8c:	3b01      	subs	r3, #1
 801bd8e:	80bb      	strh	r3, [r7, #4]
 801bd90:	e50d      	b.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
                hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space - 1;
 801bd92:	8aa3      	ldrh	r3, [r4, #20]
 801bd94:	4413      	add	r3, r2
 801bd96:	fa1a f383 	uxtah	r3, sl, r3
 801bd9a:	b29b      	uxth	r3, r3
 801bd9c:	3b01      	subs	r3, #1
 801bd9e:	803b      	strh	r3, [r7, #0]
                hor_area->x2 = obj->coords.x2 - right_space;
 801bda0:	8b23      	ldrh	r3, [r4, #24]
 801bda2:	1b9b      	subs	r3, r3, r6
 801bda4:	80bb      	strh	r3, [r7, #4]
 801bda6:	e502      	b.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
 801bda8:	66666667 	.word	0x66666667
                hor_area->x1 = obj->coords.x1 + sb_x + left_space + ver_reg_space;
 801bdac:	8aa3      	ldrh	r3, [r4, #20]
 801bdae:	440b      	add	r3, r1
 801bdb0:	fa12 f383 	uxtah	r3, r2, r3
 801bdb4:	fa1a f383 	uxtah	r3, sl, r3
 801bdb8:	b219      	sxth	r1, r3
 801bdba:	8039      	strh	r1, [r7, #0]
                hor_area->x2 = hor_area->x1 + sb_w - 1;
 801bdbc:	fa15 f383 	uxtah	r3, r5, r3
 801bdc0:	b29b      	uxth	r3, r3
 801bdc2:	3b01      	subs	r3, #1
 801bdc4:	80bb      	strh	r3, [r7, #4]
                if(hor_area->x1 < obj->coords.x1 + left_space + ver_reg_space) {
 801bdc6:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801bdca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bdcc:	4403      	add	r3, r0
 801bdce:	445b      	add	r3, fp
 801bdd0:	4299      	cmp	r1, r3
 801bdd2:	db28      	blt.n	801be26 <lv_obj_get_scrollbar_area+0x6ba>
                if(hor_area->x2 > obj->coords.x2 - right_space) {
 801bdd4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 801bdd8:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801bddc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bdde:	1a9a      	subs	r2, r3, r2
 801bde0:	4291      	cmp	r1, r2
 801bde2:	f77f ace4 	ble.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x2 = obj->coords.x2 - right_space;
 801bde6:	b29c      	uxth	r4, r3
 801bde8:	1ba4      	subs	r4, r4, r6
 801bdea:	b224      	sxth	r4, r4
 801bdec:	80bc      	strh	r4, [r7, #4]
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801bdee:	2000      	movs	r0, #0
 801bdf0:	f7f7 fa7a 	bl	80132e8 <lv_disp_get_dpi>
 801bdf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bdf8:	0043      	lsls	r3, r0, #1
 801bdfa:	2bef      	cmp	r3, #239	@ 0xef
 801bdfc:	dc4b      	bgt.n	801be96 <lv_obj_get_scrollbar_area+0x72a>
 801bdfe:	2301      	movs	r3, #1
 801be00:	1ae4      	subs	r4, r4, r3
 801be02:	f9b7 3000 	ldrsh.w	r3, [r7]
 801be06:	429c      	cmp	r4, r3
 801be08:	f6bf acd1 	bge.w	801b7ae <lv_obj_get_scrollbar_area+0x42>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801be0c:	88bc      	ldrh	r4, [r7, #4]
 801be0e:	2000      	movs	r0, #0
 801be10:	f7f7 fa6a 	bl	80132e8 <lv_disp_get_dpi>
 801be14:	230a      	movs	r3, #10
 801be16:	fb00 f303 	mul.w	r3, r0, r3
 801be1a:	2bef      	cmp	r3, #239	@ 0xef
 801be1c:	dc46      	bgt.n	801beac <lv_obj_get_scrollbar_area+0x740>
 801be1e:	2301      	movs	r3, #1
 801be20:	1ae4      	subs	r4, r4, r3
 801be22:	803c      	strh	r4, [r7, #0]
 801be24:	e4c3      	b.n	801b7ae <lv_obj_get_scrollbar_area+0x42>
                    hor_area->x1 = obj->coords.x1 + left_space + ver_reg_space;
 801be26:	fa12 f580 	uxtah	r5, r2, r0
 801be2a:	fa1a f585 	uxtah	r5, sl, r5
 801be2e:	b22d      	sxth	r5, r5
 801be30:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801be32:	2000      	movs	r0, #0
 801be34:	f7f7 fa58 	bl	80132e8 <lv_disp_get_dpi>
 801be38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801be3c:	0043      	lsls	r3, r0, #1
 801be3e:	2bef      	cmp	r3, #239	@ 0xef
 801be40:	dc12      	bgt.n	801be68 <lv_obj_get_scrollbar_area+0x6fc>
 801be42:	2301      	movs	r3, #1
 801be44:	441d      	add	r5, r3
 801be46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801be4a:	429d      	cmp	r5, r3
 801be4c:	ddc2      	ble.n	801bdd4 <lv_obj_get_scrollbar_area+0x668>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801be4e:	883d      	ldrh	r5, [r7, #0]
 801be50:	2000      	movs	r0, #0
 801be52:	f7f7 fa49 	bl	80132e8 <lv_disp_get_dpi>
 801be56:	230a      	movs	r3, #10
 801be58:	fb00 f303 	mul.w	r3, r0, r3
 801be5c:	2bef      	cmp	r3, #239	@ 0xef
 801be5e:	dc0e      	bgt.n	801be7e <lv_obj_get_scrollbar_area+0x712>
 801be60:	2301      	movs	r3, #1
 801be62:	441d      	add	r5, r3
 801be64:	80bd      	strh	r5, [r7, #4]
 801be66:	e7b5      	b.n	801bdd4 <lv_obj_get_scrollbar_area+0x668>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801be68:	2000      	movs	r0, #0
 801be6a:	f7f7 fa3d 	bl	80132e8 <lv_disp_get_dpi>
 801be6e:	220a      	movs	r2, #10
 801be70:	fb02 f300 	mul.w	r3, r2, r0
 801be74:	3350      	adds	r3, #80	@ 0x50
 801be76:	22a0      	movs	r2, #160	@ 0xa0
 801be78:	fb93 f3f2 	sdiv	r3, r3, r2
 801be7c:	e7e2      	b.n	801be44 <lv_obj_get_scrollbar_area+0x6d8>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801be7e:	2000      	movs	r0, #0
 801be80:	f7f7 fa32 	bl	80132e8 <lv_disp_get_dpi>
 801be84:	220a      	movs	r2, #10
 801be86:	fb02 f300 	mul.w	r3, r2, r0
 801be8a:	3350      	adds	r3, #80	@ 0x50
 801be8c:	22a0      	movs	r2, #160	@ 0xa0
 801be8e:	fb93 f3f2 	sdiv	r3, r3, r2
 801be92:	b29b      	uxth	r3, r3
 801be94:	e7e5      	b.n	801be62 <lv_obj_get_scrollbar_area+0x6f6>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801be96:	2000      	movs	r0, #0
 801be98:	f7f7 fa26 	bl	80132e8 <lv_disp_get_dpi>
 801be9c:	220a      	movs	r2, #10
 801be9e:	fb02 f300 	mul.w	r3, r2, r0
 801bea2:	3350      	adds	r3, #80	@ 0x50
 801bea4:	22a0      	movs	r2, #160	@ 0xa0
 801bea6:	fb93 f3f2 	sdiv	r3, r3, r2
 801beaa:	e7a9      	b.n	801be00 <lv_obj_get_scrollbar_area+0x694>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801beac:	2000      	movs	r0, #0
 801beae:	f7f7 fa1b 	bl	80132e8 <lv_disp_get_dpi>
 801beb2:	220a      	movs	r2, #10
 801beb4:	fb02 f300 	mul.w	r3, r2, r0
 801beb8:	3350      	adds	r3, #80	@ 0x50
 801beba:	22a0      	movs	r2, #160	@ 0xa0
 801bebc:	fb93 f3f2 	sdiv	r3, r3, r2
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	e7ad      	b.n	801be20 <lv_obj_get_scrollbar_area+0x6b4>
                    hor_area->x1 = obj->coords.x1 + left_space;
 801bec4:	fa12 f080 	uxtah	r0, r2, r0
 801bec8:	b205      	sxth	r5, r0
 801beca:	803d      	strh	r5, [r7, #0]
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801becc:	2000      	movs	r0, #0
 801bece:	f7f7 fa0b 	bl	80132e8 <lv_disp_get_dpi>
 801bed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bed6:	0043      	lsls	r3, r0, #1
 801bed8:	2bef      	cmp	r3, #239	@ 0xef
 801beda:	dc13      	bgt.n	801bf04 <lv_obj_get_scrollbar_area+0x798>
 801bedc:	2301      	movs	r3, #1
 801bede:	441d      	add	r5, r3
 801bee0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bee4:	429d      	cmp	r5, r3
 801bee6:	f77f ae90 	ble.w	801bc0a <lv_obj_get_scrollbar_area+0x49e>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801beea:	883d      	ldrh	r5, [r7, #0]
 801beec:	2000      	movs	r0, #0
 801beee:	f7f7 f9fb 	bl	80132e8 <lv_disp_get_dpi>
 801bef2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bef6:	0043      	lsls	r3, r0, #1
 801bef8:	2bef      	cmp	r3, #239	@ 0xef
 801befa:	dc11      	bgt.n	801bf20 <lv_obj_get_scrollbar_area+0x7b4>
 801befc:	2301      	movs	r3, #1
 801befe:	441d      	add	r5, r3
 801bf00:	80bd      	strh	r5, [r7, #4]
 801bf02:	e682      	b.n	801bc0a <lv_obj_get_scrollbar_area+0x49e>
                    if(hor_area->x1 + SCROLLBAR_MIN_SIZE > hor_area->x2) {
 801bf04:	2000      	movs	r0, #0
 801bf06:	f7f7 f9ef 	bl	80132e8 <lv_disp_get_dpi>
 801bf0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bf0e:	0043      	lsls	r3, r0, #1
 801bf10:	3350      	adds	r3, #80	@ 0x50
 801bf12:	4a16      	ldr	r2, [pc, #88]	@ (801bf6c <lv_obj_get_scrollbar_area+0x800>)
 801bf14:	fb82 1203 	smull	r1, r2, r2, r3
 801bf18:	17db      	asrs	r3, r3, #31
 801bf1a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bf1e:	e7de      	b.n	801bede <lv_obj_get_scrollbar_area+0x772>
                        hor_area->x2 = hor_area->x1 + SCROLLBAR_MIN_SIZE;
 801bf20:	2000      	movs	r0, #0
 801bf22:	f7f7 f9e1 	bl	80132e8 <lv_disp_get_dpi>
 801bf26:	220a      	movs	r2, #10
 801bf28:	fb02 f300 	mul.w	r3, r2, r0
 801bf2c:	3350      	adds	r3, #80	@ 0x50
 801bf2e:	22a0      	movs	r2, #160	@ 0xa0
 801bf30:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf34:	b29b      	uxth	r3, r3
 801bf36:	e7e2      	b.n	801befe <lv_obj_get_scrollbar_area+0x792>
                    if(hor_area->x2 - SCROLLBAR_MIN_SIZE < hor_area->x1) {
 801bf38:	2000      	movs	r0, #0
 801bf3a:	f7f7 f9d5 	bl	80132e8 <lv_disp_get_dpi>
 801bf3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801bf42:	0043      	lsls	r3, r0, #1
 801bf44:	3350      	adds	r3, #80	@ 0x50
 801bf46:	4a09      	ldr	r2, [pc, #36]	@ (801bf6c <lv_obj_get_scrollbar_area+0x800>)
 801bf48:	fb82 1203 	smull	r1, r2, r2, r3
 801bf4c:	17db      	asrs	r3, r3, #31
 801bf4e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 801bf52:	e676      	b.n	801bc42 <lv_obj_get_scrollbar_area+0x4d6>
                        hor_area->x1 = hor_area->x2 - SCROLLBAR_MIN_SIZE;
 801bf54:	2000      	movs	r0, #0
 801bf56:	f7f7 f9c7 	bl	80132e8 <lv_disp_get_dpi>
 801bf5a:	220a      	movs	r2, #10
 801bf5c:	fb02 f300 	mul.w	r3, r2, r0
 801bf60:	3350      	adds	r3, #80	@ 0x50
 801bf62:	22a0      	movs	r2, #160	@ 0xa0
 801bf64:	fb93 f3f2 	sdiv	r3, r3, r2
 801bf68:	b29b      	uxth	r3, r3
 801bf6a:	e67b      	b.n	801bc64 <lv_obj_get_scrollbar_area+0x4f8>
 801bf6c:	66666667 	.word	0x66666667

0801bf70 <lv_obj_scrollbar_invalidate>:
{
 801bf70:	b510      	push	{r4, lr}
 801bf72:	b084      	sub	sp, #16
 801bf74:	4604      	mov	r4, r0
    lv_obj_get_scrollbar_area(obj, &hor_area, &ver_area);
 801bf76:	466a      	mov	r2, sp
 801bf78:	a902      	add	r1, sp, #8
 801bf7a:	f7ff fbf7 	bl	801b76c <lv_obj_get_scrollbar_area>
    if(lv_area_get_size(&hor_area) <= 0 && lv_area_get_size(&ver_area) <= 0) return;
 801bf7e:	a802      	add	r0, sp, #8
 801bf80:	f7e5 fd0c 	bl	800199c <lv_area_get_size>
 801bf84:	b918      	cbnz	r0, 801bf8e <lv_obj_scrollbar_invalidate+0x1e>
 801bf86:	4668      	mov	r0, sp
 801bf88:	f7e5 fd08 	bl	800199c <lv_area_get_size>
 801bf8c:	b138      	cbz	r0, 801bf9e <lv_obj_scrollbar_invalidate+0x2e>
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 801bf8e:	a802      	add	r0, sp, #8
 801bf90:	f7e5 fd04 	bl	800199c <lv_area_get_size>
 801bf94:	b928      	cbnz	r0, 801bfa2 <lv_obj_scrollbar_invalidate+0x32>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 801bf96:	4668      	mov	r0, sp
 801bf98:	f7e5 fd00 	bl	800199c <lv_area_get_size>
 801bf9c:	b930      	cbnz	r0, 801bfac <lv_obj_scrollbar_invalidate+0x3c>
}
 801bf9e:	b004      	add	sp, #16
 801bfa0:	bd10      	pop	{r4, pc}
    if(lv_area_get_size(&hor_area) > 0) lv_obj_invalidate_area(obj, &hor_area);
 801bfa2:	a902      	add	r1, sp, #8
 801bfa4:	4620      	mov	r0, r4
 801bfa6:	f7fd ff56 	bl	8019e56 <lv_obj_invalidate_area>
 801bfaa:	e7f4      	b.n	801bf96 <lv_obj_scrollbar_invalidate+0x26>
    if(lv_area_get_size(&ver_area) > 0) lv_obj_invalidate_area(obj, &ver_area);
 801bfac:	4669      	mov	r1, sp
 801bfae:	4620      	mov	r0, r4
 801bfb0:	f7fd ff51 	bl	8019e56 <lv_obj_invalidate_area>
 801bfb4:	e7f3      	b.n	801bf9e <lv_obj_scrollbar_invalidate+0x2e>

0801bfb6 <lv_obj_readjust_scroll>:
{
 801bfb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfb8:	4604      	mov	r4, r0
 801bfba:	460d      	mov	r5, r1
    if(lv_obj_get_scroll_snap_y(obj) == LV_SCROLL_SNAP_NONE) {
 801bfbc:	f7fe ff0c 	bl	801add8 <lv_obj_get_scroll_snap_y>
 801bfc0:	b120      	cbz	r0, 801bfcc <lv_obj_readjust_scroll+0x16>
    if(lv_obj_get_scroll_snap_x(obj) == LV_SCROLL_SNAP_NONE) {
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	f7fe ff00 	bl	801adc8 <lv_obj_get_scroll_snap_x>
 801bfc8:	b1b0      	cbz	r0, 801bff8 <lv_obj_readjust_scroll+0x42>
}
 801bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_coord_t st = lv_obj_get_scroll_top(obj);
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f7fe ff1b 	bl	801ae08 <lv_obj_get_scroll_top>
 801bfd2:	4606      	mov	r6, r0
        lv_coord_t sb = lv_obj_get_scroll_bottom(obj);
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f7fe ff1f 	bl	801ae18 <lv_obj_get_scroll_bottom>
        if(sb < 0 && st > 0) {
 801bfda:	1e03      	subs	r3, r0, #0
 801bfdc:	daf1      	bge.n	801bfc2 <lv_obj_readjust_scroll+0xc>
 801bfde:	2e00      	cmp	r6, #0
 801bfe0:	ddef      	ble.n	801bfc2 <lv_obj_readjust_scroll+0xc>
            sb = LV_MIN(st, -sb);
 801bfe2:	425b      	negs	r3, r3
 801bfe4:	429e      	cmp	r6, r3
 801bfe6:	bfa8      	it	ge
 801bfe8:	461e      	movge	r6, r3
            lv_obj_scroll_by(obj, 0, sb, anim_en);
 801bfea:	462b      	mov	r3, r5
 801bfec:	b232      	sxth	r2, r6
 801bfee:	2100      	movs	r1, #0
 801bff0:	4620      	mov	r0, r4
 801bff2:	f7ff f8a7 	bl	801b144 <lv_obj_scroll_by>
 801bff6:	e7e4      	b.n	801bfc2 <lv_obj_readjust_scroll+0xc>
        lv_coord_t sl = lv_obj_get_scroll_left(obj);
 801bff8:	4620      	mov	r0, r4
 801bffa:	f7fe ff65 	bl	801aec8 <lv_obj_get_scroll_left>
 801bffe:	4607      	mov	r7, r0
        lv_coord_t sr = lv_obj_get_scroll_right(obj);
 801c000:	4620      	mov	r0, r4
 801c002:	f7fe ffd3 	bl	801afac <lv_obj_get_scroll_right>
 801c006:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801c008:	2216      	movs	r2, #22
 801c00a:	2100      	movs	r1, #0
 801c00c:	4620      	mov	r0, r4
 801c00e:	f000 fb71 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801c012:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 801c014:	2801      	cmp	r0, #1
 801c016:	d00e      	beq.n	801c036 <lv_obj_readjust_scroll+0x80>
            if(sr < 0 && sl > 0) {
 801c018:	2e00      	cmp	r6, #0
 801c01a:	dad6      	bge.n	801bfca <lv_obj_readjust_scroll+0x14>
 801c01c:	2f00      	cmp	r7, #0
 801c01e:	ddd4      	ble.n	801bfca <lv_obj_readjust_scroll+0x14>
                sr = LV_MIN(sl, -sr);
 801c020:	4276      	negs	r6, r6
 801c022:	42be      	cmp	r6, r7
 801c024:	bfa8      	it	ge
 801c026:	463e      	movge	r6, r7
                lv_obj_scroll_by(obj, sr, 0, anim_en);
 801c028:	462b      	mov	r3, r5
 801c02a:	2200      	movs	r2, #0
 801c02c:	b231      	sxth	r1, r6
 801c02e:	4620      	mov	r0, r4
 801c030:	f7ff f888 	bl	801b144 <lv_obj_scroll_by>
 801c034:	e7c9      	b.n	801bfca <lv_obj_readjust_scroll+0x14>
            if(sl < 0 && sr > 0) {
 801c036:	2f00      	cmp	r7, #0
 801c038:	dac7      	bge.n	801bfca <lv_obj_readjust_scroll+0x14>
 801c03a:	2e00      	cmp	r6, #0
 801c03c:	ddc5      	ble.n	801bfca <lv_obj_readjust_scroll+0x14>
                lv_obj_scroll_by(obj, sl, 0, anim_en);
 801c03e:	462b      	mov	r3, r5
 801c040:	2200      	movs	r2, #0
 801c042:	4639      	mov	r1, r7
 801c044:	4620      	mov	r0, r4
 801c046:	f7ff f87d 	bl	801b144 <lv_obj_scroll_by>
}
 801c04a:	e7be      	b.n	801bfca <lv_obj_readjust_scroll+0x14>

0801c04c <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 801c04c:	b283      	uxth	r3, r0
 801c04e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c052:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 801c056:	b28b      	uxth	r3, r1
 801c058:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c05c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 801c060:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 801c062:	040b      	lsls	r3, r1, #16
 801c064:	fa13 f181 	uxtah	r1, r3, r1
 801c068:	4b0a      	ldr	r3, [pc, #40]	@ (801c094 <lv_color_mix+0x48>)
 801c06a:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 801c06c:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 801c070:	fa1c f080 	uxtah	r0, ip, r0
 801c074:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 801c076:	1a40      	subs	r0, r0, r1
 801c078:	08d2      	lsrs	r2, r2, #3
 801c07a:	fb00 f202 	mul.w	r2, r0, r2
 801c07e:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 801c082:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 801c084:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 801c088:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 801c08a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 801c08e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801c092:	4770      	bx	lr
 801c094:	07e0f81f 	.word	0x07e0f81f

0801c098 <trans_del>:
 * @param part a part of object or 0xFF to remove from all parts
 * @param prop a property or 0xFF to remove all properties
 * @param tr_limit delete transitions only "older" than this. `NULL` if not used
 */
static bool trans_del(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop, trans_t * tr_limit)
{
 801c098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c09c:	4606      	mov	r6, r0
 801c09e:	4689      	mov	r9, r1
 801c0a0:	4692      	mov	sl, r2
 801c0a2:	4698      	mov	r8, r3
    trans_t * tr;
    trans_t * tr_prev;
    bool removed = false;
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 801c0a4:	4827      	ldr	r0, [pc, #156]	@ (801c144 <trans_del+0xac>)
 801c0a6:	f7fa fa60 	bl	801656a <_lv_ll_get_tail>
 801c0aa:	4604      	mov	r4, r0
    bool removed = false;
 801c0ac:	2700      	movs	r7, #0
    while(tr != NULL) {
 801c0ae:	e007      	b.n	801c0c0 <trans_del+0x28>
        if(tr == tr_limit) break;

        /*'tr' might be deleted, so get the next object while 'tr' is valid*/
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);

        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 801c0b0:	88a3      	ldrh	r3, [r4, #4]
 801c0b2:	4553      	cmp	r3, sl
 801c0b4:	d032      	beq.n	801c11c <trans_del+0x84>
 801c0b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c0ba:	459a      	cmp	sl, r3
 801c0bc:	d030      	beq.n	801c120 <trans_del+0x88>

            /*Free the transition descriptor too*/
            lv_anim_del(tr, NULL);
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
            lv_mem_free(tr);
            removed = true;
 801c0be:	462c      	mov	r4, r5
    while(tr != NULL) {
 801c0c0:	2c00      	cmp	r4, #0
 801c0c2:	d03c      	beq.n	801c13e <trans_del+0xa6>
        if(tr == tr_limit) break;
 801c0c4:	4544      	cmp	r4, r8
 801c0c6:	d03a      	beq.n	801c13e <trans_del+0xa6>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 801c0c8:	4621      	mov	r1, r4
 801c0ca:	481e      	ldr	r0, [pc, #120]	@ (801c144 <trans_del+0xac>)
 801c0cc:	f7fa fa55 	bl	801657a <_lv_ll_get_prev>
 801c0d0:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->selector || part == LV_PART_ANY) && (prop == tr->prop || prop == LV_STYLE_PROP_ANY)) {
 801c0d2:	6820      	ldr	r0, [r4, #0]
 801c0d4:	42b0      	cmp	r0, r6
 801c0d6:	d1f2      	bne.n	801c0be <trans_del+0x26>
 801c0d8:	68a3      	ldr	r3, [r4, #8]
 801c0da:	454b      	cmp	r3, r9
 801c0dc:	d0e8      	beq.n	801c0b0 <trans_del+0x18>
 801c0de:	f5b9 2f70 	cmp.w	r9, #983040	@ 0xf0000
 801c0e2:	d1ec      	bne.n	801c0be <trans_del+0x26>
 801c0e4:	e7e4      	b.n	801c0b0 <trans_del+0x18>
                    lv_style_remove_prop(obj->styles[i].style, tr->prop);
 801c0e6:	88a1      	ldrh	r1, [r4, #4]
 801c0e8:	5810      	ldr	r0, [r2, r0]
 801c0ea:	f004 fe61 	bl	8020db0 <lv_style_remove_prop>
            for(i = 0; i < obj->style_cnt; i++) {
 801c0ee:	3701      	adds	r7, #1
 801c0f0:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 801c0f2:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801c0f6:	42bb      	cmp	r3, r7
 801c0f8:	d914      	bls.n	801c124 <trans_del+0x8c>
                if(obj->styles[i].is_trans && (part == LV_PART_ANY || obj->styles[i].selector == part)) {
 801c0fa:	68f2      	ldr	r2, [r6, #12]
 801c0fc:	00f8      	lsls	r0, r7, #3
 801c0fe:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
 801c102:	79d9      	ldrb	r1, [r3, #7]
 801c104:	f011 0f02 	tst.w	r1, #2
 801c108:	d0f1      	beq.n	801c0ee <trans_del+0x56>
 801c10a:	f5b9 2f70 	cmp.w	r9, #983040	@ 0xf0000
 801c10e:	d0ea      	beq.n	801c0e6 <trans_del+0x4e>
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801c116:	454b      	cmp	r3, r9
 801c118:	d1e9      	bne.n	801c0ee <trans_del+0x56>
 801c11a:	e7e4      	b.n	801c0e6 <trans_del+0x4e>
 801c11c:	2700      	movs	r7, #0
 801c11e:	e7e7      	b.n	801c0f0 <trans_del+0x58>
 801c120:	2700      	movs	r7, #0
 801c122:	e7e5      	b.n	801c0f0 <trans_del+0x58>
            lv_anim_del(tr, NULL);
 801c124:	2100      	movs	r1, #0
 801c126:	4620      	mov	r0, r4
 801c128:	f7e4 fb2e 	bl	8000788 <lv_anim_del>
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 801c12c:	4621      	mov	r1, r4
 801c12e:	4805      	ldr	r0, [pc, #20]	@ (801c144 <trans_del+0xac>)
 801c130:	f7fa fa59 	bl	80165e6 <_lv_ll_remove>
            lv_mem_free(tr);
 801c134:	4620      	mov	r0, r4
 801c136:	f7fa fc0d 	bl	8016954 <lv_mem_free>
            removed = true;
 801c13a:	2701      	movs	r7, #1
 801c13c:	e7bf      	b.n	801c0be <trans_del+0x26>

        }
        tr = tr_prev;
    }
    return removed;
}
 801c13e:	4638      	mov	r0, r7
 801c140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c144:	20006818 	.word	0x20006818

0801c148 <refresh_children_style>:
{
 801c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14a:	4607      	mov	r7, r0
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801c14c:	f001 f851 	bl	801d1f2 <lv_obj_get_child_cnt>
 801c150:	4605      	mov	r5, r0
    for(i = 0; i < child_cnt; i++) {
 801c152:	2400      	movs	r4, #0
 801c154:	42ac      	cmp	r4, r5
 801c156:	d213      	bcs.n	801c180 <refresh_children_style+0x38>
        lv_obj_t * child = obj->spec_attr->children[i];
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
        lv_obj_invalidate(child);
 801c160:	4630      	mov	r0, r6
 801c162:	f7fd fea0 	bl	8019ea6 <lv_obj_invalidate>
        lv_event_send(child, LV_EVENT_STYLE_CHANGED, NULL);
 801c166:	2200      	movs	r2, #0
 801c168:	212a      	movs	r1, #42	@ 0x2a
 801c16a:	4630      	mov	r0, r6
 801c16c:	f7f4 fdac 	bl	8010cc8 <lv_event_send>
        lv_obj_invalidate(child);
 801c170:	4630      	mov	r0, r6
 801c172:	f7fd fe98 	bl	8019ea6 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
 801c176:	4630      	mov	r0, r6
 801c178:	f7ff ffe6 	bl	801c148 <refresh_children_style>
    for(i = 0; i < child_cnt; i++) {
 801c17c:	3401      	adds	r4, #1
 801c17e:	e7e9      	b.n	801c154 <refresh_children_style+0xc>
}
 801c180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c182 <get_local_style>:
{
 801c182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c186:	4604      	mov	r4, r0
 801c188:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801c18a:	2300      	movs	r3, #0
 801c18c:	e000      	b.n	801c190 <get_local_style+0xe>
 801c18e:	3301      	adds	r3, #1
 801c190:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 801c192:	f3c2 1205 	ubfx	r2, r2, #4, #6
 801c196:	429a      	cmp	r2, r3
 801c198:	d90e      	bls.n	801c1b8 <get_local_style+0x36>
        if(obj->styles[i].is_local &&
 801c19a:	68e1      	ldr	r1, [r4, #12]
 801c19c:	00de      	lsls	r6, r3, #3
 801c19e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801c1a2:	79d0      	ldrb	r0, [r2, #7]
 801c1a4:	f010 0f01 	tst.w	r0, #1
 801c1a8:	d0f1      	beq.n	801c18e <get_local_style+0xc>
           obj->styles[i].selector == selector) {
 801c1aa:	6852      	ldr	r2, [r2, #4]
 801c1ac:	f3c2 0217 	ubfx	r2, r2, #0, #24
        if(obj->styles[i].is_local &&
 801c1b0:	42aa      	cmp	r2, r5
 801c1b2:	d1ec      	bne.n	801c18e <get_local_style+0xc>
            return obj->styles[i].style;
 801c1b4:	5988      	ldr	r0, [r1, r6]
 801c1b6:	e046      	b.n	801c246 <get_local_style+0xc4>
    obj->style_cnt++;
 801c1b8:	3201      	adds	r2, #1
 801c1ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c1be:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801c1c0:	f362 1309 	bfi	r3, r2, #4, #6
 801c1c4:	8463      	strh	r3, [r4, #34]	@ 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801c1c6:	00d1      	lsls	r1, r2, #3
 801c1c8:	68e0      	ldr	r0, [r4, #12]
 801c1ca:	f7fa fbdf 	bl	801698c <lv_mem_realloc>
 801c1ce:	60e0      	str	r0, [r4, #12]
    LV_ASSERT_MALLOC(obj->styles);
 801c1d0:	b1b0      	cbz	r0, 801c200 <get_local_style+0x7e>
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801c1d2:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
 801c1d4:	f3c6 1605 	ubfx	r6, r6, #4, #6
 801c1d8:	3e01      	subs	r6, #1
 801c1da:	b196      	cbz	r6, 801c202 <get_local_style+0x80>
        if(obj->styles[i - 1].is_local || obj->styles[i - 1].is_trans) break;
 801c1dc:	68e2      	ldr	r2, [r4, #12]
 801c1de:	f106 5300 	add.w	r3, r6, #536870912	@ 0x20000000
 801c1e2:	3b01      	subs	r3, #1
 801c1e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c1e8:	79d9      	ldrb	r1, [r3, #7]
 801c1ea:	f011 0f03 	tst.w	r1, #3
 801c1ee:	d108      	bne.n	801c202 <get_local_style+0x80>
        obj->styles[i] = obj->styles[i - 1];
 801c1f0:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 801c1f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c1f8:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801c1fc:	3e01      	subs	r6, #1
 801c1fe:	e7ec      	b.n	801c1da <get_local_style+0x58>
    LV_ASSERT_MALLOC(obj->styles);
 801c200:	e7fe      	b.n	801c200 <get_local_style+0x7e>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 801c202:	68e0      	ldr	r0, [r4, #12]
 801c204:	00f7      	lsls	r7, r6, #3
 801c206:	2108      	movs	r1, #8
 801c208:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 801c20c:	f7fa fd5a 	bl	8016cc4 <lv_memset_00>
    obj->styles[i].style = lv_mem_alloc(sizeof(lv_style_t));
 801c210:	f8d4 800c 	ldr.w	r8, [r4, #12]
 801c214:	2008      	movs	r0, #8
 801c216:	f7fa fb7f 	bl	8016918 <lv_mem_alloc>
 801c21a:	f848 0036 	str.w	r0, [r8, r6, lsl #3]
    lv_style_init(obj->styles[i].style);
 801c21e:	68e3      	ldr	r3, [r4, #12]
 801c220:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
 801c224:	f004 fd6f 	bl	8020d06 <lv_style_init>
    obj->styles[i].is_local = 1;
 801c228:	68e3      	ldr	r3, [r4, #12]
 801c22a:	443b      	add	r3, r7
 801c22c:	79da      	ldrb	r2, [r3, #7]
 801c22e:	f042 0201 	orr.w	r2, r2, #1
 801c232:	71da      	strb	r2, [r3, #7]
    obj->styles[i].selector = selector;
 801c234:	68e3      	ldr	r3, [r4, #12]
 801c236:	443b      	add	r3, r7
 801c238:	685a      	ldr	r2, [r3, #4]
 801c23a:	f365 0217 	bfi	r2, r5, #0, #24
 801c23e:	605a      	str	r2, [r3, #4]
    return obj->styles[i].style;
 801c240:	68e3      	ldr	r3, [r4, #12]
 801c242:	f853 0036 	ldr.w	r0, [r3, r6, lsl #3]
}
 801c246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c24a <get_trans_style>:
{
 801c24a:	b570      	push	{r4, r5, r6, lr}
 801c24c:	4604      	mov	r4, r0
 801c24e:	460d      	mov	r5, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801c250:	2100      	movs	r1, #0
 801c252:	e000      	b.n	801c256 <get_trans_style+0xc>
 801c254:	3101      	adds	r1, #1
 801c256:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 801c258:	f3c2 1205 	ubfx	r2, r2, #4, #6
 801c25c:	428a      	cmp	r2, r1
 801c25e:	d90b      	bls.n	801c278 <get_trans_style+0x2e>
        if(obj->styles[i].is_trans && obj->styles[i].selector == selector) break;
 801c260:	68e3      	ldr	r3, [r4, #12]
 801c262:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801c266:	79d8      	ldrb	r0, [r3, #7]
 801c268:	f010 0f02 	tst.w	r0, #2
 801c26c:	d0f2      	beq.n	801c254 <get_trans_style+0xa>
 801c26e:	685b      	ldr	r3, [r3, #4]
 801c270:	f3c3 0317 	ubfx	r3, r3, #0, #24
 801c274:	42ab      	cmp	r3, r5
 801c276:	d1ed      	bne.n	801c254 <get_trans_style+0xa>
    if(i != obj->style_cnt) return &obj->styles[i];
 801c278:	428a      	cmp	r2, r1
 801c27a:	d003      	beq.n	801c284 <get_trans_style+0x3a>
 801c27c:	68e0      	ldr	r0, [r4, #12]
 801c27e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 801c282:	bd70      	pop	{r4, r5, r6, pc}
    obj->style_cnt++;
 801c284:	3201      	adds	r2, #1
 801c286:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c28a:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801c28c:	f362 1309 	bfi	r3, r2, #4, #6
 801c290:	8463      	strh	r3, [r4, #34]	@ 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801c292:	00d1      	lsls	r1, r2, #3
 801c294:	68e0      	ldr	r0, [r4, #12]
 801c296:	f7fa fb79 	bl	801698c <lv_mem_realloc>
 801c29a:	60e0      	str	r0, [r4, #12]
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801c29c:	8c66      	ldrh	r6, [r4, #34]	@ 0x22
 801c29e:	f3c6 1605 	ubfx	r6, r6, #4, #6
 801c2a2:	3e01      	subs	r6, #1
 801c2a4:	e00c      	b.n	801c2c0 <get_trans_style+0x76>
        obj->styles[i] = obj->styles[i - 1];
 801c2a6:	68e2      	ldr	r2, [r4, #12]
 801c2a8:	f106 5300 	add.w	r3, r6, #536870912	@ 0x20000000
 801c2ac:	3b01      	subs	r3, #1
 801c2ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c2b2:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 801c2b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c2ba:	e882 0003 	stmia.w	r2, {r0, r1}
    for(i = obj->style_cnt - 1; i > 0 ; i--) {
 801c2be:	3e01      	subs	r6, #1
 801c2c0:	2e00      	cmp	r6, #0
 801c2c2:	d1f0      	bne.n	801c2a6 <get_trans_style+0x5c>
    lv_memset_00(&obj->styles[0], sizeof(_lv_obj_style_t));
 801c2c4:	2108      	movs	r1, #8
 801c2c6:	68e0      	ldr	r0, [r4, #12]
 801c2c8:	f7fa fcfc 	bl	8016cc4 <lv_memset_00>
    obj->styles[0].style = lv_mem_alloc(sizeof(lv_style_t));
 801c2cc:	68e6      	ldr	r6, [r4, #12]
 801c2ce:	2008      	movs	r0, #8
 801c2d0:	f7fa fb22 	bl	8016918 <lv_mem_alloc>
 801c2d4:	6030      	str	r0, [r6, #0]
    lv_style_init(obj->styles[0].style);
 801c2d6:	68e3      	ldr	r3, [r4, #12]
 801c2d8:	6818      	ldr	r0, [r3, #0]
 801c2da:	f004 fd14 	bl	8020d06 <lv_style_init>
    obj->styles[0].is_trans = 1;
 801c2de:	68e2      	ldr	r2, [r4, #12]
 801c2e0:	79d3      	ldrb	r3, [r2, #7]
 801c2e2:	f043 0302 	orr.w	r3, r3, #2
 801c2e6:	71d3      	strb	r3, [r2, #7]
    obj->styles[0].selector = selector;
 801c2e8:	68e3      	ldr	r3, [r4, #12]
 801c2ea:	685a      	ldr	r2, [r3, #4]
 801c2ec:	f365 0217 	bfi	r2, r5, #0, #24
 801c2f0:	605a      	str	r2, [r3, #4]
    return &obj->styles[0];
 801c2f2:	68e0      	ldr	r0, [r4, #12]
 801c2f4:	e7c5      	b.n	801c282 <get_trans_style+0x38>
	...

0801c2f8 <_lv_obj_style_init>:
{
 801c2f8:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(trans_t));
 801c2fa:	2114      	movs	r1, #20
 801c2fc:	4801      	ldr	r0, [pc, #4]	@ (801c304 <_lv_obj_style_init+0xc>)
 801c2fe:	f7fa f8ea 	bl	80164d6 <_lv_ll_init>
}
 801c302:	bd08      	pop	{r3, pc}
 801c304:	20006818 	.word	0x20006818

0801c308 <lv_obj_enable_style_refresh>:
    style_refr = en;
 801c308:	4b01      	ldr	r3, [pc, #4]	@ (801c310 <lv_obj_enable_style_refresh+0x8>)
 801c30a:	7018      	strb	r0, [r3, #0]
}
 801c30c:	4770      	bx	lr
 801c30e:	bf00      	nop
 801c310:	20000070 	.word	0x20000070

0801c314 <lv_obj_get_local_style_prop>:
{
 801c314:	b570      	push	{r4, r5, r6, lr}
    for(i = 0; i < obj->style_cnt; i++) {
 801c316:	f04f 0c00 	mov.w	ip, #0
 801c31a:	e001      	b.n	801c320 <lv_obj_get_local_style_prop+0xc>
 801c31c:	f10c 0c01 	add.w	ip, ip, #1
 801c320:	f8b0 e022 	ldrh.w	lr, [r0, #34]	@ 0x22
 801c324:	f3ce 1e05 	ubfx	lr, lr, #4, #6
 801c328:	45e6      	cmp	lr, ip
 801c32a:	d913      	bls.n	801c354 <lv_obj_get_local_style_prop+0x40>
        if(obj->styles[i].is_local &&
 801c32c:	68c4      	ldr	r4, [r0, #12]
 801c32e:	ea4f 06cc 	mov.w	r6, ip, lsl #3
 801c332:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801c336:	f89e 5007 	ldrb.w	r5, [lr, #7]
 801c33a:	f015 0f01 	tst.w	r5, #1
 801c33e:	d0ed      	beq.n	801c31c <lv_obj_get_local_style_prop+0x8>
           obj->styles[i].selector == selector) {
 801c340:	f8de 5004 	ldr.w	r5, [lr, #4]
 801c344:	f3c5 0517 	ubfx	r5, r5, #0, #24
        if(obj->styles[i].is_local &&
 801c348:	429d      	cmp	r5, r3
 801c34a:	d1e7      	bne.n	801c31c <lv_obj_get_local_style_prop+0x8>
            return lv_style_get_prop(obj->styles[i].style, prop, value);
 801c34c:	59a0      	ldr	r0, [r4, r6]
 801c34e:	f004 fe87 	bl	8021060 <lv_style_get_prop>
 801c352:	e000      	b.n	801c356 <lv_obj_get_local_style_prop+0x42>
    return LV_STYLE_RES_NOT_FOUND;
 801c354:	2000      	movs	r0, #0
}
 801c356:	bd70      	pop	{r4, r5, r6, pc}

0801c358 <lv_obj_style_get_selector_state>:
}
 801c358:	b280      	uxth	r0, r0
 801c35a:	4770      	bx	lr

0801c35c <_lv_obj_style_state_compare>:
{
 801c35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c360:	b082      	sub	sp, #8
 801c362:	4606      	mov	r6, r0
 801c364:	4688      	mov	r8, r1
 801c366:	4617      	mov	r7, r2
    for(i = 0; i < obj->style_cnt; i++) {
 801c368:	2500      	movs	r5, #0
    _lv_style_state_cmp_t res = _LV_STYLE_STATE_CMP_SAME;
 801c36a:	46a9      	mov	r9, r5
    for(i = 0; i < obj->style_cnt; i++) {
 801c36c:	e010      	b.n	801c390 <_lv_obj_style_state_compare+0x34>
                return _LV_STYLE_STATE_CMP_DIFF_LAYOUT;
 801c36e:	f04f 0903 	mov.w	r9, #3
}
 801c372:	4648      	mov	r0, r9
 801c374:	b002      	add	sp, #8
 801c376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_HEIGHT, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c37a:	aa01      	add	r2, sp, #4
 801c37c:	216a      	movs	r1, #106	@ 0x6a
 801c37e:	4620      	mov	r0, r4
 801c380:	f004 fe6e 	bl	8021060 <lv_style_get_prop>
 801c384:	2800      	cmp	r0, #0
 801c386:	f000 80b3 	beq.w	801c4f0 <_lv_obj_style_state_compare+0x194>
 801c38a:	f04f 0902 	mov.w	r9, #2
    for(i = 0; i < obj->style_cnt; i++) {
 801c38e:	3501      	adds	r5, #1
 801c390:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 801c392:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801c396:	42ab      	cmp	r3, r5
 801c398:	d9eb      	bls.n	801c372 <_lv_obj_style_state_compare+0x16>
        if(obj->styles[i].is_trans) continue;
 801c39a:	68f4      	ldr	r4, [r6, #12]
 801c39c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 801c3a0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c3a4:	79da      	ldrb	r2, [r3, #7]
 801c3a6:	f012 0f02 	tst.w	r2, #2
 801c3aa:	d1f0      	bne.n	801c38e <_lv_obj_style_state_compare+0x32>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801c3ac:	6858      	ldr	r0, [r3, #4]
 801c3ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 801c3b2:	f7ff ffd1 	bl	801c358 <lv_obj_style_get_selector_state>
        bool valid1 = state_act & (~state1) ? false : true;
 801c3b6:	ea30 0308 	bics.w	r3, r0, r8
 801c3ba:	bf0c      	ite	eq
 801c3bc:	2201      	moveq	r2, #1
 801c3be:	2200      	movne	r2, #0
        bool valid2 = state_act & (~state2) ? false : true;
 801c3c0:	43b8      	bics	r0, r7
 801c3c2:	bf0c      	ite	eq
 801c3c4:	2301      	moveq	r3, #1
 801c3c6:	2300      	movne	r3, #0
        if(valid1 != valid2) {
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	d0e0      	beq.n	801c38e <_lv_obj_style_state_compare+0x32>
            lv_style_t * style = obj->styles[i].style;
 801c3cc:	f854 400a 	ldr.w	r4, [r4, sl]
            if(lv_style_get_prop(style, LV_STYLE_PAD_TOP, &v))layout_diff = true;
 801c3d0:	aa01      	add	r2, sp, #4
 801c3d2:	2110      	movs	r1, #16
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f004 fe43 	bl	8021060 <lv_style_get_prop>
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	d1c7      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_BOTTOM, &v)) layout_diff = true;
 801c3de:	aa01      	add	r2, sp, #4
 801c3e0:	2111      	movs	r1, #17
 801c3e2:	4620      	mov	r0, r4
 801c3e4:	f004 fe3c 	bl	8021060 <lv_style_get_prop>
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	d1c0      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_LEFT, &v)) layout_diff = true;
 801c3ec:	aa01      	add	r2, sp, #4
 801c3ee:	2112      	movs	r1, #18
 801c3f0:	4620      	mov	r0, r4
 801c3f2:	f004 fe35 	bl	8021060 <lv_style_get_prop>
 801c3f6:	2800      	cmp	r0, #0
 801c3f8:	d1b9      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_RIGHT, &v)) layout_diff = true;
 801c3fa:	aa01      	add	r2, sp, #4
 801c3fc:	2113      	movs	r1, #19
 801c3fe:	4620      	mov	r0, r4
 801c400:	f004 fe2e 	bl	8021060 <lv_style_get_prop>
 801c404:	2800      	cmp	r0, #0
 801c406:	d1b2      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_COLUMN, &v)) layout_diff = true;
 801c408:	aa01      	add	r2, sp, #4
 801c40a:	2115      	movs	r1, #21
 801c40c:	4620      	mov	r0, r4
 801c40e:	f004 fe27 	bl	8021060 <lv_style_get_prop>
 801c412:	2800      	cmp	r0, #0
 801c414:	d1ab      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_PAD_ROW, &v)) layout_diff = true;
 801c416:	aa01      	add	r2, sp, #4
 801c418:	2114      	movs	r1, #20
 801c41a:	4620      	mov	r0, r4
 801c41c:	f004 fe20 	bl	8021060 <lv_style_get_prop>
 801c420:	2800      	cmp	r0, #0
 801c422:	d1a4      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_LAYOUT, &v)) layout_diff = true;
 801c424:	aa01      	add	r2, sp, #4
 801c426:	210a      	movs	r1, #10
 801c428:	4620      	mov	r0, r4
 801c42a:	f004 fe19 	bl	8021060 <lv_style_get_prop>
 801c42e:	2800      	cmp	r0, #0
 801c430:	d19d      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_X, &v)) layout_diff = true;
 801c432:	aa01      	add	r2, sp, #4
 801c434:	216b      	movs	r1, #107	@ 0x6b
 801c436:	4620      	mov	r0, r4
 801c438:	f004 fe12 	bl	8021060 <lv_style_get_prop>
 801c43c:	2800      	cmp	r0, #0
 801c43e:	d196      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSLATE_Y, &v)) layout_diff = true;
 801c440:	aa01      	add	r2, sp, #4
 801c442:	216c      	movs	r1, #108	@ 0x6c
 801c444:	4620      	mov	r0, r4
 801c446:	f004 fe0b 	bl	8021060 <lv_style_get_prop>
 801c44a:	2800      	cmp	r0, #0
 801c44c:	d18f      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_WIDTH, &v)) layout_diff = true;
 801c44e:	aa01      	add	r2, sp, #4
 801c450:	2101      	movs	r1, #1
 801c452:	4620      	mov	r0, r4
 801c454:	f004 fe04 	bl	8021060 <lv_style_get_prop>
 801c458:	2800      	cmp	r0, #0
 801c45a:	d188      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_HEIGHT, &v)) layout_diff = true;
 801c45c:	aa01      	add	r2, sp, #4
 801c45e:	2104      	movs	r1, #4
 801c460:	4620      	mov	r0, r4
 801c462:	f004 fdfd 	bl	8021060 <lv_style_get_prop>
 801c466:	2800      	cmp	r0, #0
 801c468:	d181      	bne.n	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_WIDTH, &v)) layout_diff = true;
 801c46a:	aa01      	add	r2, sp, #4
 801c46c:	2102      	movs	r1, #2
 801c46e:	4620      	mov	r0, r4
 801c470:	f004 fdf6 	bl	8021060 <lv_style_get_prop>
 801c474:	2800      	cmp	r0, #0
 801c476:	f47f af7a 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_WIDTH, &v)) layout_diff = true;
 801c47a:	aa01      	add	r2, sp, #4
 801c47c:	2103      	movs	r1, #3
 801c47e:	4620      	mov	r0, r4
 801c480:	f004 fdee 	bl	8021060 <lv_style_get_prop>
 801c484:	2800      	cmp	r0, #0
 801c486:	f47f af72 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MIN_HEIGHT, &v)) layout_diff = true;
 801c48a:	aa01      	add	r2, sp, #4
 801c48c:	2105      	movs	r1, #5
 801c48e:	4620      	mov	r0, r4
 801c490:	f004 fde6 	bl	8021060 <lv_style_get_prop>
 801c494:	2800      	cmp	r0, #0
 801c496:	f47f af6a 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_MAX_HEIGHT, &v)) layout_diff = true;
 801c49a:	aa01      	add	r2, sp, #4
 801c49c:	2106      	movs	r1, #6
 801c49e:	4620      	mov	r0, r4
 801c4a0:	f004 fdde 	bl	8021060 <lv_style_get_prop>
 801c4a4:	2800      	cmp	r0, #0
 801c4a6:	f47f af62 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_BORDER_WIDTH, &v)) layout_diff = true;
 801c4aa:	aa01      	add	r2, sp, #4
 801c4ac:	2132      	movs	r1, #50	@ 0x32
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f004 fdd6 	bl	8021060 <lv_style_get_prop>
 801c4b4:	2800      	cmp	r0, #0
 801c4b6:	f47f af5a 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) layout_diff = true;
 801c4ba:	aa01      	add	r2, sp, #4
 801c4bc:	216e      	movs	r1, #110	@ 0x6e
 801c4be:	4620      	mov	r0, r4
 801c4c0:	f004 fdce 	bl	8021060 <lv_style_get_prop>
 801c4c4:	2800      	cmp	r0, #0
 801c4c6:	f47f af52 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) layout_diff = true;
 801c4ca:	aa01      	add	r2, sp, #4
 801c4cc:	216d      	movs	r1, #109	@ 0x6d
 801c4ce:	4620      	mov	r0, r4
 801c4d0:	f004 fdc6 	bl	8021060 <lv_style_get_prop>
 801c4d4:	2800      	cmp	r0, #0
 801c4d6:	f47f af4a 	bne.w	801c36e <_lv_obj_style_state_compare+0x12>
            if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c4da:	aa01      	add	r2, sp, #4
 801c4dc:	2169      	movs	r1, #105	@ 0x69
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f004 fdbe 	bl	8021060 <lv_style_get_prop>
 801c4e4:	2800      	cmp	r0, #0
 801c4e6:	f43f af48 	beq.w	801c37a <_lv_obj_style_state_compare+0x1e>
 801c4ea:	f04f 0902 	mov.w	r9, #2
 801c4ee:	e74e      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ANGLE, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c4f0:	aa01      	add	r2, sp, #4
 801c4f2:	216e      	movs	r1, #110	@ 0x6e
 801c4f4:	4620      	mov	r0, r4
 801c4f6:	f004 fdb3 	bl	8021060 <lv_style_get_prop>
 801c4fa:	b110      	cbz	r0, 801c502 <_lv_obj_style_state_compare+0x1a6>
 801c4fc:	f04f 0902 	mov.w	r9, #2
 801c500:	e745      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_TRANSFORM_ZOOM, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c502:	aa01      	add	r2, sp, #4
 801c504:	216d      	movs	r1, #109	@ 0x6d
 801c506:	4620      	mov	r0, r4
 801c508:	f004 fdaa 	bl	8021060 <lv_style_get_prop>
 801c50c:	b110      	cbz	r0, 801c514 <_lv_obj_style_state_compare+0x1b8>
 801c50e:	f04f 0902 	mov.w	r9, #2
 801c512:	e73c      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c514:	aa01      	add	r2, sp, #4
 801c516:	2137      	movs	r1, #55	@ 0x37
 801c518:	4620      	mov	r0, r4
 801c51a:	f004 fda1 	bl	8021060 <lv_style_get_prop>
 801c51e:	b110      	cbz	r0, 801c526 <_lv_obj_style_state_compare+0x1ca>
 801c520:	f04f 0902 	mov.w	r9, #2
 801c524:	e733      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_PAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c526:	aa01      	add	r2, sp, #4
 801c528:	2138      	movs	r1, #56	@ 0x38
 801c52a:	4620      	mov	r0, r4
 801c52c:	f004 fd98 	bl	8021060 <lv_style_get_prop>
 801c530:	b110      	cbz	r0, 801c538 <_lv_obj_style_state_compare+0x1dc>
 801c532:	f04f 0902 	mov.w	r9, #2
 801c536:	e72a      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_OUTLINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c538:	aa01      	add	r2, sp, #4
 801c53a:	2135      	movs	r1, #53	@ 0x35
 801c53c:	4620      	mov	r0, r4
 801c53e:	f004 fd8f 	bl	8021060 <lv_style_get_prop>
 801c542:	b110      	cbz	r0, 801c54a <_lv_obj_style_state_compare+0x1ee>
 801c544:	f04f 0902 	mov.w	r9, #2
 801c548:	e721      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c54a:	aa01      	add	r2, sp, #4
 801c54c:	2140      	movs	r1, #64	@ 0x40
 801c54e:	4620      	mov	r0, r4
 801c550:	f004 fd86 	bl	8021060 <lv_style_get_prop>
 801c554:	b110      	cbz	r0, 801c55c <_lv_obj_style_state_compare+0x200>
 801c556:	f04f 0902 	mov.w	r9, #2
 801c55a:	e718      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OPA, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c55c:	aa01      	add	r2, sp, #4
 801c55e:	2145      	movs	r1, #69	@ 0x45
 801c560:	4620      	mov	r0, r4
 801c562:	f004 fd7d 	bl	8021060 <lv_style_get_prop>
 801c566:	b110      	cbz	r0, 801c56e <_lv_obj_style_state_compare+0x212>
 801c568:	f04f 0902 	mov.w	r9, #2
 801c56c:	e70f      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_X, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c56e:	aa01      	add	r2, sp, #4
 801c570:	2141      	movs	r1, #65	@ 0x41
 801c572:	4620      	mov	r0, r4
 801c574:	f004 fd74 	bl	8021060 <lv_style_get_prop>
 801c578:	b110      	cbz	r0, 801c580 <_lv_obj_style_state_compare+0x224>
 801c57a:	f04f 0902 	mov.w	r9, #2
 801c57e:	e706      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_OFS_Y, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c580:	aa01      	add	r2, sp, #4
 801c582:	2142      	movs	r1, #66	@ 0x42
 801c584:	4620      	mov	r0, r4
 801c586:	f004 fd6b 	bl	8021060 <lv_style_get_prop>
 801c58a:	b110      	cbz	r0, 801c592 <_lv_obj_style_state_compare+0x236>
 801c58c:	f04f 0902 	mov.w	r9, #2
 801c590:	e6fd      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_SHADOW_SPREAD, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c592:	aa01      	add	r2, sp, #4
 801c594:	2143      	movs	r1, #67	@ 0x43
 801c596:	4620      	mov	r0, r4
 801c598:	f004 fd62 	bl	8021060 <lv_style_get_prop>
 801c59c:	b110      	cbz	r0, 801c5a4 <_lv_obj_style_state_compare+0x248>
 801c59e:	f04f 0902 	mov.w	r9, #2
 801c5a2:	e6f4      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c5a4:	aa01      	add	r2, sp, #4
 801c5a6:	2149      	movs	r1, #73	@ 0x49
 801c5a8:	4620      	mov	r0, r4
 801c5aa:	f004 fd59 	bl	8021060 <lv_style_get_prop>
 801c5ae:	b930      	cbnz	r0, 801c5be <_lv_obj_style_state_compare+0x262>
            else if(res == _LV_STYLE_STATE_CMP_SAME) res = _LV_STYLE_STATE_CMP_DIFF_REDRAW;
 801c5b0:	f1b9 0f00 	cmp.w	r9, #0
 801c5b4:	f47f aeeb 	bne.w	801c38e <_lv_obj_style_state_compare+0x32>
 801c5b8:	f04f 0901 	mov.w	r9, #1
 801c5bc:	e6e7      	b.n	801c38e <_lv_obj_style_state_compare+0x32>
            else if(lv_style_get_prop(style, LV_STYLE_LINE_WIDTH, &v)) res = _LV_STYLE_STATE_CMP_DIFF_DRAW_PAD;
 801c5be:	f04f 0902 	mov.w	r9, #2
 801c5c2:	e6e4      	b.n	801c38e <_lv_obj_style_state_compare+0x32>

0801c5c4 <lv_obj_style_get_selector_part>:
}
 801c5c4:	f400 007f 	and.w	r0, r0, #16711680	@ 0xff0000
 801c5c8:	4770      	bx	lr

0801c5ca <get_prop_core>:
{
 801c5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5ce:	b087      	sub	sp, #28
 801c5d0:	4605      	mov	r5, r0
 801c5d2:	468a      	mov	sl, r1
 801c5d4:	9201      	str	r2, [sp, #4]
 801c5d6:	9302      	str	r3, [sp, #8]
    uint8_t group = 1 << _lv_style_get_prop_group(prop);
 801c5d8:	4610      	mov	r0, r2
 801c5da:	f004 fd4a 	bl	8021072 <_lv_style_get_prop_group>
 801c5de:	f04f 0901 	mov.w	r9, #1
 801c5e2:	fa09 f900 	lsl.w	r9, r9, r0
 801c5e6:	fa5f f989 	uxtb.w	r9, r9
    lv_state_t state = obj->state;
 801c5ea:	8c2b      	ldrh	r3, [r5, #32]
 801c5ec:	9303      	str	r3, [sp, #12]
    lv_state_t state_inv = ~state;
 801c5ee:	ea6f 0b03 	mvn.w	fp, r3
 801c5f2:	fa1f fb8b 	uxth.w	fp, fp
    bool skip_trans = obj->skip_trans;
 801c5f6:	f895 8022 	ldrb.w	r8, [r5, #34]	@ 0x22
 801c5fa:	f3c8 08c0 	ubfx	r8, r8, #3, #1
    for(i = 0; i < obj->style_cnt; i++) {
 801c5fe:	2400      	movs	r4, #0
 801c600:	e004      	b.n	801c60c <get_prop_core+0x42>
            *v = value_tmp;
 801c602:	9b05      	ldr	r3, [sp, #20]
 801c604:	9a02      	ldr	r2, [sp, #8]
 801c606:	6013      	str	r3, [r2, #0]
            return LV_STYLE_RES_FOUND;
 801c608:	e06f      	b.n	801c6ea <get_prop_core+0x120>
    for(i = 0; i < obj->style_cnt; i++) {
 801c60a:	3401      	adds	r4, #1
 801c60c:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801c60e:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801c612:	42a3      	cmp	r3, r4
 801c614:	d91f      	bls.n	801c656 <get_prop_core+0x8c>
        _lv_obj_style_t * obj_style = &obj->styles[i];
 801c616:	68ee      	ldr	r6, [r5, #12]
 801c618:	00e7      	lsls	r7, r4, #3
 801c61a:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        if(obj_style->is_trans == false) break;
 801c61e:	79da      	ldrb	r2, [r3, #7]
 801c620:	f012 0f02 	tst.w	r2, #2
 801c624:	d055      	beq.n	801c6d2 <get_prop_core+0x108>
        if(skip_trans) continue;
 801c626:	f1b8 0f00 	cmp.w	r8, #0
 801c62a:	d1ee      	bne.n	801c60a <get_prop_core+0x40>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801c62c:	6858      	ldr	r0, [r3, #4]
 801c62e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 801c632:	f7ff ffc7 	bl	801c5c4 <lv_obj_style_get_selector_part>
        if(part_act != part) continue;
 801c636:	4550      	cmp	r0, sl
 801c638:	d1e7      	bne.n	801c60a <get_prop_core+0x40>
        if((obj_style->style->has_group & group) == 0) continue;
 801c63a:	59f0      	ldr	r0, [r6, r7]
 801c63c:	7983      	ldrb	r3, [r0, #6]
 801c63e:	ea13 0f09 	tst.w	r3, r9
 801c642:	d0e2      	beq.n	801c60a <get_prop_core+0x40>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801c644:	aa05      	add	r2, sp, #20
 801c646:	9901      	ldr	r1, [sp, #4]
 801c648:	f004 fd0a 	bl	8021060 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801c64c:	2801      	cmp	r0, #1
 801c64e:	d0d8      	beq.n	801c602 <get_prop_core+0x38>
        else if(found == LV_STYLE_RES_INHERIT) {
 801c650:	2802      	cmp	r0, #2
 801c652:	d1da      	bne.n	801c60a <get_prop_core+0x40>
 801c654:	e049      	b.n	801c6ea <get_prop_core+0x120>
 801c656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c65a:	9300      	str	r3, [sp, #0]
 801c65c:	46a8      	mov	r8, r5
 801c65e:	e007      	b.n	801c670 <get_prop_core+0xa6>
            if(state_act == state) {
 801c660:	9b03      	ldr	r3, [sp, #12]
 801c662:	42b3      	cmp	r3, r6
 801c664:	d031      	beq.n	801c6ca <get_prop_core+0x100>
                *v = value_tmp;
 801c666:	9b05      	ldr	r3, [sp, #20]
 801c668:	9a02      	ldr	r2, [sp, #8]
 801c66a:	6013      	str	r3, [r2, #0]
                weight = state_act;
 801c66c:	9600      	str	r6, [sp, #0]
    for(; i < obj->style_cnt; i++) {
 801c66e:	3401      	adds	r4, #1
 801c670:	f8b8 3022 	ldrh.w	r3, [r8, #34]	@ 0x22
 801c674:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801c678:	42a3      	cmp	r3, r4
 801c67a:	d92f      	bls.n	801c6dc <get_prop_core+0x112>
        if((obj->styles[i].style->has_group & group) == 0) continue;
 801c67c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c680:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 801c684:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
 801c688:	79ab      	ldrb	r3, [r5, #6]
 801c68a:	ea13 0f09 	tst.w	r3, r9
 801c68e:	d0ee      	beq.n	801c66e <get_prop_core+0xa4>
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801c690:	6856      	ldr	r6, [r2, #4]
 801c692:	f3c6 0617 	ubfx	r6, r6, #0, #24
 801c696:	4630      	mov	r0, r6
 801c698:	f7ff ff94 	bl	801c5c4 <lv_obj_style_get_selector_part>
 801c69c:	4607      	mov	r7, r0
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801c69e:	4630      	mov	r0, r6
 801c6a0:	f7ff fe5a 	bl	801c358 <lv_obj_style_get_selector_state>
 801c6a4:	4606      	mov	r6, r0
        if(part_act != part) continue;
 801c6a6:	45ba      	cmp	sl, r7
 801c6a8:	d1e1      	bne.n	801c66e <get_prop_core+0xa4>
        if((state_act & state_inv)) continue;
 801c6aa:	ea1b 0f00 	tst.w	fp, r0
 801c6ae:	d1de      	bne.n	801c66e <get_prop_core+0xa4>
        if(state_act <= weight) continue;
 801c6b0:	9b00      	ldr	r3, [sp, #0]
 801c6b2:	4298      	cmp	r0, r3
 801c6b4:	dddb      	ble.n	801c66e <get_prop_core+0xa4>
        found = lv_style_get_prop(obj_style->style, prop, &value_tmp);
 801c6b6:	aa05      	add	r2, sp, #20
 801c6b8:	9901      	ldr	r1, [sp, #4]
 801c6ba:	4628      	mov	r0, r5
 801c6bc:	f004 fcd0 	bl	8021060 <lv_style_get_prop>
        if(found == LV_STYLE_RES_FOUND) {
 801c6c0:	2801      	cmp	r0, #1
 801c6c2:	d0cd      	beq.n	801c660 <get_prop_core+0x96>
        else if(found == LV_STYLE_RES_INHERIT) {
 801c6c4:	2802      	cmp	r0, #2
 801c6c6:	d1d2      	bne.n	801c66e <get_prop_core+0xa4>
 801c6c8:	e00f      	b.n	801c6ea <get_prop_core+0x120>
                *v = value_tmp;
 801c6ca:	9b05      	ldr	r3, [sp, #20]
 801c6cc:	9a02      	ldr	r2, [sp, #8]
 801c6ce:	6013      	str	r3, [r2, #0]
                return LV_STYLE_RES_FOUND;
 801c6d0:	e00b      	b.n	801c6ea <get_prop_core+0x120>
 801c6d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c6d6:	9300      	str	r3, [sp, #0]
 801c6d8:	46a8      	mov	r8, r5
 801c6da:	e7c9      	b.n	801c670 <get_prop_core+0xa6>
    if(weight >= 0) {
 801c6dc:	9b00      	ldr	r3, [sp, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	db06      	blt.n	801c6f0 <get_prop_core+0x126>
        *v = value_tmp;
 801c6e2:	9b05      	ldr	r3, [sp, #20]
 801c6e4:	9a02      	ldr	r2, [sp, #8]
 801c6e6:	6013      	str	r3, [r2, #0]
        return LV_STYLE_RES_FOUND;
 801c6e8:	2001      	movs	r0, #1
}
 801c6ea:	b007      	add	sp, #28
 801c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else return LV_STYLE_RES_NOT_FOUND;
 801c6f0:	2000      	movs	r0, #0
 801c6f2:	e7fa      	b.n	801c6ea <get_prop_core+0x120>

0801c6f4 <lv_obj_get_style_prop>:
{
 801c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6f8:	b082      	sub	sp, #8
 801c6fa:	4605      	mov	r5, r0
 801c6fc:	460e      	mov	r6, r1
 801c6fe:	4617      	mov	r7, r2
 * @param flag Flag
 * @return true if the flag is set for this property
 */
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)
{
    return _lv_style_prop_lookup_flags(prop) & flag;
 801c700:	4610      	mov	r0, r2
 801c702:	f004 fd53 	bl	80211ac <_lv_style_prop_lookup_flags>
 801c706:	f000 0801 	and.w	r8, r0, #1
    lv_style_res_t found = LV_STYLE_RES_NOT_FOUND;
 801c70a:	2400      	movs	r4, #0
    while(obj) {
 801c70c:	e003      	b.n	801c716 <lv_obj_get_style_prop+0x22>
        obj = lv_obj_get_parent(obj);
 801c70e:	4628      	mov	r0, r5
 801c710:	f000 fd30 	bl	801d174 <lv_obj_get_parent>
 801c714:	4605      	mov	r5, r0
    while(obj) {
 801c716:	b18d      	cbz	r5, 801c73c <lv_obj_get_style_prop+0x48>
        found = get_prop_core(obj, part, prop, &value_act);
 801c718:	ab01      	add	r3, sp, #4
 801c71a:	463a      	mov	r2, r7
 801c71c:	4631      	mov	r1, r6
 801c71e:	4628      	mov	r0, r5
 801c720:	f7ff ff53 	bl	801c5ca <get_prop_core>
 801c724:	4604      	mov	r4, r0
        if(found == LV_STYLE_RES_FOUND) break;
 801c726:	2801      	cmp	r0, #1
 801c728:	d008      	beq.n	801c73c <lv_obj_get_style_prop+0x48>
        if(!inheritable) break;
 801c72a:	f1b8 0f00 	cmp.w	r8, #0
 801c72e:	d005      	beq.n	801c73c <lv_obj_get_style_prop+0x48>
        if(found != LV_STYLE_RES_INHERIT && part != LV_PART_MAIN) {
 801c730:	2802      	cmp	r0, #2
 801c732:	d0ec      	beq.n	801c70e <lv_obj_get_style_prop+0x1a>
 801c734:	2e00      	cmp	r6, #0
 801c736:	d0ea      	beq.n	801c70e <lv_obj_get_style_prop+0x1a>
            part = LV_PART_MAIN;
 801c738:	2600      	movs	r6, #0
 801c73a:	e7ec      	b.n	801c716 <lv_obj_get_style_prop+0x22>
    if(found != LV_STYLE_RES_FOUND) {
 801c73c:	2c01      	cmp	r4, #1
 801c73e:	d008      	beq.n	801c752 <lv_obj_get_style_prop+0x5e>
        if(part == LV_PART_MAIN && (prop == LV_STYLE_WIDTH || prop == LV_STYLE_HEIGHT)) {
 801c740:	b91e      	cbnz	r6, 801c74a <lv_obj_get_style_prop+0x56>
 801c742:	2f01      	cmp	r7, #1
 801c744:	d009      	beq.n	801c75a <lv_obj_get_style_prop+0x66>
 801c746:	2f04      	cmp	r7, #4
 801c748:	d007      	beq.n	801c75a <lv_obj_get_style_prop+0x66>
            value_act = lv_style_prop_get_default(prop);
 801c74a:	4638      	mov	r0, r7
 801c74c:	f004 fbae 	bl	8020eac <lv_style_prop_get_default>
 801c750:	9001      	str	r0, [sp, #4]
}
 801c752:	9801      	ldr	r0, [sp, #4]
 801c754:	b002      	add	sp, #8
 801c756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            const lv_obj_class_t * cls = obj->class_p;
 801c75a:	682b      	ldr	r3, [r5, #0]
            while(cls) {
 801c75c:	e003      	b.n	801c766 <lv_obj_get_style_prop+0x72>
                    if(cls->width_def != 0) break;
 801c75e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 801c762:	b93a      	cbnz	r2, 801c774 <lv_obj_get_style_prop+0x80>
                cls = cls->base_class;
 801c764:	681b      	ldr	r3, [r3, #0]
            while(cls) {
 801c766:	b12b      	cbz	r3, 801c774 <lv_obj_get_style_prop+0x80>
                if(prop == LV_STYLE_WIDTH) {
 801c768:	2f01      	cmp	r7, #1
 801c76a:	d0f8      	beq.n	801c75e <lv_obj_get_style_prop+0x6a>
                    if(cls->height_def != 0) break;
 801c76c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 801c770:	2a00      	cmp	r2, #0
 801c772:	d0f7      	beq.n	801c764 <lv_obj_get_style_prop+0x70>
            if(cls) {
 801c774:	b143      	cbz	r3, 801c788 <lv_obj_get_style_prop+0x94>
                value_act.num = prop == LV_STYLE_WIDTH ? cls->width_def : cls->height_def;
 801c776:	2f01      	cmp	r7, #1
 801c778:	d003      	beq.n	801c782 <lv_obj_get_style_prop+0x8e>
 801c77a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801c77e:	9301      	str	r3, [sp, #4]
 801c780:	e7e7      	b.n	801c752 <lv_obj_get_style_prop+0x5e>
 801c782:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801c786:	e7fa      	b.n	801c77e <lv_obj_get_style_prop+0x8a>
                value_act.num = 0;
 801c788:	2300      	movs	r3, #0
 801c78a:	9301      	str	r3, [sp, #4]
 801c78c:	e7e1      	b.n	801c752 <lv_obj_get_style_prop+0x5e>

0801c78e <calculate_layer_type>:
        }
    }
}

static lv_layer_type_t calculate_layer_type(lv_obj_t * obj)
{
 801c78e:	b510      	push	{r4, lr}
 801c790:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801c792:	226e      	movs	r2, #110	@ 0x6e
 801c794:	2100      	movs	r1, #0
 801c796:	f7ff ffad 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c79a:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 801c79c:	b9f0      	cbnz	r0, 801c7dc <calculate_layer_type+0x4e>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801c79e:	226d      	movs	r2, #109	@ 0x6d
 801c7a0:	2100      	movs	r1, #0
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	f7ff ffa6 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801c7a8:	b200      	sxth	r0, r0
    if(lv_obj_get_style_transform_zoom(obj, 0) != 256) return LV_LAYER_TYPE_TRANSFORM;
 801c7aa:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801c7ae:	d001      	beq.n	801c7b4 <calculate_layer_type+0x26>
 801c7b0:	2002      	movs	r0, #2
 801c7b2:	e014      	b.n	801c7de <calculate_layer_type+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA_LAYERED);
 801c7b4:	2261      	movs	r2, #97	@ 0x61
 801c7b6:	2100      	movs	r1, #0
 801c7b8:	4620      	mov	r0, r4
 801c7ba:	f7ff ff9b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801c7be:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_opa_layered(obj, 0) != LV_OPA_COVER) return LV_LAYER_TYPE_SIMPLE;
 801c7c0:	28ff      	cmp	r0, #255	@ 0xff
 801c7c2:	d001      	beq.n	801c7c8 <calculate_layer_type+0x3a>
 801c7c4:	2001      	movs	r0, #1
 801c7c6:	e00a      	b.n	801c7de <calculate_layer_type+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801c7c8:	2268      	movs	r2, #104	@ 0x68
 801c7ca:	2100      	movs	r1, #0
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	f7ff ff91 	bl	801c6f4 <lv_obj_get_style_prop>
#if LV_DRAW_COMPLEX
    if(lv_obj_get_style_blend_mode(obj, 0) != LV_BLEND_MODE_NORMAL) return LV_LAYER_TYPE_SIMPLE;
 801c7d2:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 801c7d6:	d002      	beq.n	801c7de <calculate_layer_type+0x50>
 801c7d8:	2001      	movs	r0, #1
 801c7da:	e000      	b.n	801c7de <calculate_layer_type+0x50>
    if(lv_obj_get_style_transform_angle(obj, 0) != 0) return LV_LAYER_TYPE_TRANSFORM;
 801c7dc:	2002      	movs	r0, #2
#endif
    return LV_LAYER_TYPE_NONE;
}
 801c7de:	bd10      	pop	{r4, pc}

0801c7e0 <_lv_obj_style_create_transition>:
{
 801c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e4:	b093      	sub	sp, #76	@ 0x4c
 801c7e6:	4604      	mov	r4, r0
 801c7e8:	460f      	mov	r7, r1
 801c7ea:	4692      	mov	sl, r2
 801c7ec:	4699      	mov	r9, r3
 801c7ee:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
    obj->skip_trans = 1;
 801c7f0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 801c7f4:	f043 0308 	orr.w	r3, r3, #8
 801c7f8:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
    obj->state = prev_state;
 801c7fc:	8402      	strh	r2, [r0, #32]
    lv_style_value_t v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 801c7fe:	8932      	ldrh	r2, [r6, #8]
 801c800:	f7ff ff78 	bl	801c6f4 <lv_obj_get_style_prop>
 801c804:	4605      	mov	r5, r0
    obj->state = new_state;
 801c806:	f8a4 9020 	strh.w	r9, [r4, #32]
    lv_style_value_t v2 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 801c80a:	8932      	ldrh	r2, [r6, #8]
 801c80c:	4639      	mov	r1, r7
 801c80e:	4620      	mov	r0, r4
 801c810:	f7ff ff70 	bl	801c6f4 <lv_obj_get_style_prop>
 801c814:	4680      	mov	r8, r0
    obj->skip_trans = 0;
 801c816:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801c81a:	f023 0308 	bic.w	r3, r3, #8
 801c81e:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 801c822:	4683      	mov	fp, r0
 801c824:	4285      	cmp	r5, r0
 801c826:	d047      	beq.n	801c8b8 <_lv_obj_style_create_transition+0xd8>
    obj->state = prev_state;
 801c828:	f8a4 a020 	strh.w	sl, [r4, #32]
    v1 = lv_obj_get_style_prop(obj, part, tr_dsc->prop);
 801c82c:	8932      	ldrh	r2, [r6, #8]
 801c82e:	4639      	mov	r1, r7
 801c830:	4620      	mov	r0, r4
 801c832:	f7ff ff5f 	bl	801c6f4 <lv_obj_get_style_prop>
 801c836:	4605      	mov	r5, r0
    obj->state = new_state;
 801c838:	f8a4 9020 	strh.w	r9, [r4, #32]
    _lv_obj_style_t * style_trans = get_trans_style(obj, part);
 801c83c:	4639      	mov	r1, r7
 801c83e:	4620      	mov	r0, r4
 801c840:	f7ff fd03 	bl	801c24a <get_trans_style>
    lv_style_set_prop(style_trans->style, tr_dsc->prop, v1);   /*Be sure `trans_style` has a valid value*/
 801c844:	462a      	mov	r2, r5
 801c846:	8931      	ldrh	r1, [r6, #8]
 801c848:	6800      	ldr	r0, [r0, #0]
 801c84a:	f004 fca7 	bl	802119c <lv_style_set_prop>
    if(tr_dsc->prop == LV_STYLE_RADIUS) {
 801c84e:	8933      	ldrh	r3, [r6, #8]
 801c850:	2b0b      	cmp	r3, #11
 801c852:	d033      	beq.n	801c8bc <_lv_obj_style_create_transition+0xdc>
    tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
 801c854:	4830      	ldr	r0, [pc, #192]	@ (801c918 <_lv_obj_style_create_transition+0x138>)
 801c856:	f7f9 fe46 	bl	80164e6 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(tr);
 801c85a:	4681      	mov	r9, r0
 801c85c:	2800      	cmp	r0, #0
 801c85e:	d059      	beq.n	801c914 <_lv_obj_style_create_transition+0x134>
    tr->start_value = v1;
 801c860:	60c5      	str	r5, [r0, #12]
    tr->end_value = v2;
 801c862:	f8c0 8010 	str.w	r8, [r0, #16]
    tr->obj = obj;
 801c866:	6004      	str	r4, [r0, #0]
    tr->prop = tr_dsc->prop;
 801c868:	8933      	ldrh	r3, [r6, #8]
 801c86a:	8083      	strh	r3, [r0, #4]
    tr->selector = part;
 801c86c:	6087      	str	r7, [r0, #8]
    lv_anim_init(&a);
 801c86e:	a801      	add	r0, sp, #4
 801c870:	f7e3 ff70 	bl	8000754 <lv_anim_init>
    a->var = var;
 801c874:	f8cd 9004 	str.w	r9, [sp, #4]
    a->exec_cb = exec_cb;
 801c878:	4b28      	ldr	r3, [pc, #160]	@ (801c91c <_lv_obj_style_create_transition+0x13c>)
 801c87a:	9302      	str	r3, [sp, #8]
    a->start_cb = start_cb;
 801c87c:	4b28      	ldr	r3, [pc, #160]	@ (801c920 <_lv_obj_style_create_transition+0x140>)
 801c87e:	9303      	str	r3, [sp, #12]
    a->ready_cb = ready_cb;
 801c880:	4b28      	ldr	r3, [pc, #160]	@ (801c924 <_lv_obj_style_create_transition+0x144>)
 801c882:	9304      	str	r3, [sp, #16]
    a->start_value = start;
 801c884:	2300      	movs	r3, #0
 801c886:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 801c888:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 801c88a:	22ff      	movs	r2, #255	@ 0xff
 801c88c:	920b      	str	r2, [sp, #44]	@ 0x2c
    lv_anim_set_time(&a, tr_dsc->time);
 801c88e:	8832      	ldrh	r2, [r6, #0]
    a->time = duration;
 801c890:	920c      	str	r2, [sp, #48]	@ 0x30
    lv_anim_set_delay(&a, tr_dsc->delay);
 801c892:	8872      	ldrh	r2, [r6, #2]
    a->act_time = -(int32_t)(delay);
 801c894:	4252      	negs	r2, r2
 801c896:	920d      	str	r2, [sp, #52]	@ 0x34
    lv_anim_set_path_cb(&a, tr_dsc->path_cb);
 801c898:	68f2      	ldr	r2, [r6, #12]
    a->path_cb = path_cb;
 801c89a:	9208      	str	r2, [sp, #32]
 * @param en        true: apply the start value immediately in `lv_anim_start`;
 *                  false: apply the start value only when `delay` ms is elapsed and the animations really starts
 */
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
{
    a->early_apply = en;
 801c89c:	f89d 2046 	ldrb.w	r2, [sp, #70]	@ 0x46
 801c8a0:	f363 0200 	bfi	r2, r3, #0, #1
 801c8a4:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
    a.user_data = tr_dsc->user_data;
 801c8a8:	6933      	ldr	r3, [r6, #16]
 801c8aa:	9307      	str	r3, [sp, #28]
    lv_anim_start(&a);
 801c8ac:	a801      	add	r0, sp, #4
 801c8ae:	f7e3 ff9d 	bl	80007ec <lv_anim_start>
}
 801c8b2:	b013      	add	sp, #76	@ 0x4c
 801c8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(v1.ptr == v2.ptr && v1.num == v2.num && v1.color.full == v2.color.full)  return;
 801c8b8:	d1b6      	bne.n	801c828 <_lv_obj_style_create_transition+0x48>
 801c8ba:	e7fa      	b.n	801c8b2 <_lv_obj_style_create_transition+0xd2>
        if(v1.num == LV_RADIUS_CIRCLE || v2.num == LV_RADIUS_CIRCLE) {
 801c8bc:	46aa      	mov	sl, r5
 801c8be:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801c8c2:	429d      	cmp	r5, r3
 801c8c4:	d001      	beq.n	801c8ca <_lv_obj_style_create_transition+0xea>
 801c8c6:	459b      	cmp	fp, r3
 801c8c8:	d1c4      	bne.n	801c854 <_lv_obj_style_create_transition+0x74>
            lv_coord_t whalf = lv_obj_get_width(obj) / 2;
 801c8ca:	4620      	mov	r0, r4
 801c8cc:	f7fc ff00 	bl	80196d0 <lv_obj_get_width>
 801c8d0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c8d4:	f340 094f 	sbfx	r9, r0, #1, #16
            lv_coord_t hhalf = lv_obj_get_height(obj) / 2;
 801c8d8:	4620      	mov	r0, r4
 801c8da:	f7fc ff00 	bl	80196de <lv_obj_get_height>
 801c8de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801c8e2:	f340 034f 	sbfx	r3, r0, #1, #16
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 801c8e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c8ea:	4592      	cmp	sl, r2
 801c8ec:	d009      	beq.n	801c902 <_lv_obj_style_create_transition+0x122>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 801c8ee:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801c8f2:	4593      	cmp	fp, r2
 801c8f4:	d1ae      	bne.n	801c854 <_lv_obj_style_create_transition+0x74>
 801c8f6:	4599      	cmp	r9, r3
 801c8f8:	da0a      	bge.n	801c910 <_lv_obj_style_create_transition+0x130>
 801c8fa:	f109 0301 	add.w	r3, r9, #1
 801c8fe:	4698      	mov	r8, r3
 801c900:	e7a8      	b.n	801c854 <_lv_obj_style_create_transition+0x74>
            if(v1.num == LV_RADIUS_CIRCLE) v1.num = LV_MIN(whalf + 1, hhalf + 1);
 801c902:	4599      	cmp	r9, r3
 801c904:	da02      	bge.n	801c90c <_lv_obj_style_create_transition+0x12c>
 801c906:	f109 0501 	add.w	r5, r9, #1
 801c90a:	e7f0      	b.n	801c8ee <_lv_obj_style_create_transition+0x10e>
 801c90c:	1c5d      	adds	r5, r3, #1
 801c90e:	e7ee      	b.n	801c8ee <_lv_obj_style_create_transition+0x10e>
            if(v2.num == LV_RADIUS_CIRCLE) v2.num = LV_MIN(whalf + 1, hhalf + 1);
 801c910:	3301      	adds	r3, #1
 801c912:	e7f4      	b.n	801c8fe <_lv_obj_style_create_transition+0x11e>
    LV_ASSERT_MALLOC(tr);
 801c914:	e7fe      	b.n	801c914 <_lv_obj_style_create_transition+0x134>
 801c916:	bf00      	nop
 801c918:	20006818 	.word	0x20006818
 801c91c:	0801cc4d 	.word	0x0801cc4d
 801c920:	0801cfb5 	.word	0x0801cfb5
 801c924:	0801cf09 	.word	0x0801cf09

0801c928 <_lv_obj_style_apply_color_filter>:
{
 801c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c92a:	4614      	mov	r4, r2
    if(obj == NULL) return v;
 801c92c:	b1c0      	cbz	r0, 801c960 <_lv_obj_style_apply_color_filter+0x38>
 801c92e:	460d      	mov	r5, r1
 801c930:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_DSC);
 801c932:	2262      	movs	r2, #98	@ 0x62
 801c934:	f7ff fede 	bl	801c6f4 <lv_obj_get_style_prop>
    if(f && f->filter_cb) {
 801c938:	4607      	mov	r7, r0
 801c93a:	b178      	cbz	r0, 801c95c <_lv_obj_style_apply_color_filter+0x34>
 801c93c:	6803      	ldr	r3, [r0, #0]
 801c93e:	b16b      	cbz	r3, 801c95c <_lv_obj_style_apply_color_filter+0x34>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_COLOR_FILTER_OPA);
 801c940:	2263      	movs	r2, #99	@ 0x63
 801c942:	4629      	mov	r1, r5
 801c944:	4630      	mov	r0, r6
 801c946:	f7ff fed5 	bl	801c6f4 <lv_obj_get_style_prop>
        if(f_opa != 0) v.color = f->filter_cb(f, v.color, f_opa);
 801c94a:	f010 02ff 	ands.w	r2, r0, #255	@ 0xff
 801c94e:	d005      	beq.n	801c95c <_lv_obj_style_apply_color_filter+0x34>
 801c950:	683b      	ldr	r3, [r7, #0]
 801c952:	4621      	mov	r1, r4
 801c954:	4638      	mov	r0, r7
 801c956:	4798      	blx	r3
 801c958:	f360 040f 	bfi	r4, r0, #0, #16
    return v;
 801c95c:	4620      	mov	r0, r4
}
 801c95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(obj == NULL) return v;
 801c960:	4610      	mov	r0, r2
 801c962:	e7fc      	b.n	801c95e <_lv_obj_style_apply_color_filter+0x36>

0801c964 <lv_obj_refresh_style>:
    if(!style_refr) return;
 801c964:	4b48      	ldr	r3, [pc, #288]	@ (801ca88 <lv_obj_refresh_style+0x124>)
 801c966:	781b      	ldrb	r3, [r3, #0]
 801c968:	b903      	cbnz	r3, 801c96c <lv_obj_refresh_style+0x8>
 801c96a:	4770      	bx	lr
{
 801c96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c970:	4605      	mov	r5, r0
 801c972:	460e      	mov	r6, r1
 801c974:	4614      	mov	r4, r2
    lv_obj_invalidate(obj);
 801c976:	f7fd fa96 	bl	8019ea6 <lv_obj_invalidate>
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 801c97a:	4630      	mov	r0, r6
 801c97c:	f7ff fe22 	bl	801c5c4 <lv_obj_style_get_selector_part>
 801c980:	4606      	mov	r6, r0
 801c982:	4620      	mov	r0, r4
 801c984:	f004 fc12 	bl	80211ac <_lv_style_prop_lookup_flags>
 801c988:	f000 0704 	and.w	r7, r0, #4
 801c98c:	4620      	mov	r0, r4
 801c98e:	f004 fc0d 	bl	80211ac <_lv_style_prop_lookup_flags>
 801c992:	f000 0802 	and.w	r8, r0, #2
 801c996:	4620      	mov	r0, r4
 801c998:	f004 fc08 	bl	80211ac <_lv_style_prop_lookup_flags>
 801c99c:	f000 0901 	and.w	r9, r0, #1
 801c9a0:	4620      	mov	r0, r4
 801c9a2:	f004 fc03 	bl	80211ac <_lv_style_prop_lookup_flags>
 801c9a6:	f000 0a10 	and.w	sl, r0, #16
    if(is_layout_refr) {
 801c9aa:	b15f      	cbz	r7, 801c9c4 <lv_obj_refresh_style+0x60>
        if(part == LV_PART_ANY ||
 801c9ac:	f5b6 2f70 	cmp.w	r6, #983040	@ 0xf0000
 801c9b0:	d000      	beq.n	801c9b4 <lv_obj_refresh_style+0x50>
 801c9b2:	bbd6      	cbnz	r6, 801ca2a <lv_obj_refresh_style+0xc6>
            lv_event_send(obj, LV_EVENT_STYLE_CHANGED, NULL);
 801c9b4:	2200      	movs	r2, #0
 801c9b6:	212a      	movs	r1, #42	@ 0x2a
 801c9b8:	4628      	mov	r0, r5
 801c9ba:	f7f4 f985 	bl	8010cc8 <lv_event_send>
            lv_obj_mark_layout_as_dirty(obj);
 801c9be:	4628      	mov	r0, r5
 801c9c0:	f7fc fde4 	bl	801958c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && (prop == LV_STYLE_PROP_ANY || is_layout_refr)) {
 801c9c4:	f5b6 2f70 	cmp.w	r6, #983040	@ 0xf0000
 801c9c8:	d000      	beq.n	801c9cc <lv_obj_refresh_style+0x68>
 801c9ca:	b956      	cbnz	r6, 801c9e2 <lv_obj_refresh_style+0x7e>
 801c9cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c9d0:	429c      	cmp	r4, r3
 801c9d2:	d000      	beq.n	801c9d6 <lv_obj_refresh_style+0x72>
 801c9d4:	b12f      	cbz	r7, 801c9e2 <lv_obj_refresh_style+0x7e>
        lv_obj_t * parent = lv_obj_get_parent(obj);
 801c9d6:	4628      	mov	r0, r5
 801c9d8:	f000 fbcc 	bl	801d174 <lv_obj_get_parent>
        if(parent) lv_obj_mark_layout_as_dirty(parent);
 801c9dc:	b108      	cbz	r0, 801c9e2 <lv_obj_refresh_style+0x7e>
 801c9de:	f7fc fdd5 	bl	801958c <lv_obj_mark_layout_as_dirty>
    if((part == LV_PART_ANY || part == LV_PART_MAIN) && is_layer_refr) {
 801c9e2:	f5b6 2f70 	cmp.w	r6, #983040	@ 0xf0000
 801c9e6:	d000      	beq.n	801c9ea <lv_obj_refresh_style+0x86>
 801c9e8:	b916      	cbnz	r6, 801c9f0 <lv_obj_refresh_style+0x8c>
 801c9ea:	f1ba 0f00 	cmp.w	sl, #0
 801c9ee:	d131      	bne.n	801ca54 <lv_obj_refresh_style+0xf0>
    if(prop == LV_STYLE_PROP_ANY || is_ext_draw) {
 801c9f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c9f4:	429c      	cmp	r4, r3
 801c9f6:	d002      	beq.n	801c9fe <lv_obj_refresh_style+0x9a>
 801c9f8:	f1b8 0f00 	cmp.w	r8, #0
 801c9fc:	d002      	beq.n	801ca04 <lv_obj_refresh_style+0xa0>
        lv_obj_refresh_ext_draw_size(obj);
 801c9fe:	4628      	mov	r0, r5
 801ca00:	f7fc fc74 	bl	80192ec <lv_obj_refresh_ext_draw_size>
    lv_obj_invalidate(obj);
 801ca04:	4628      	mov	r0, r5
 801ca06:	f7fd fa4e 	bl	8019ea6 <lv_obj_invalidate>
    if(prop == LV_STYLE_PROP_ANY || (is_inheritable && (is_ext_draw || is_layout_refr))) {
 801ca0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ca0e:	429c      	cmp	r4, r3
 801ca10:	d006      	beq.n	801ca20 <lv_obj_refresh_style+0xbc>
 801ca12:	f1b9 0f00 	cmp.w	r9, #0
 801ca16:	d006      	beq.n	801ca26 <lv_obj_refresh_style+0xc2>
 801ca18:	f1b8 0f00 	cmp.w	r8, #0
 801ca1c:	d100      	bne.n	801ca20 <lv_obj_refresh_style+0xbc>
 801ca1e:	b117      	cbz	r7, 801ca26 <lv_obj_refresh_style+0xc2>
        if(part != LV_PART_SCROLLBAR) {
 801ca20:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 801ca24:	d12c      	bne.n	801ca80 <lv_obj_refresh_style+0x11c>
}
 801ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_HEIGHT);
 801ca2a:	2204      	movs	r2, #4
 801ca2c:	2100      	movs	r1, #0
 801ca2e:	4628      	mov	r0, r5
 801ca30:	f7ff fe60 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ca34:	b200      	sxth	r0, r0
           part == LV_PART_MAIN ||
 801ca36:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801ca3a:	4298      	cmp	r0, r3
 801ca3c:	d0ba      	beq.n	801c9b4 <lv_obj_refresh_style+0x50>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_WIDTH);
 801ca3e:	2201      	movs	r2, #1
 801ca40:	2100      	movs	r1, #0
 801ca42:	4628      	mov	r0, r5
 801ca44:	f7ff fe56 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801ca48:	b200      	sxth	r0, r0
           lv_obj_get_style_height(obj, 0) == LV_SIZE_CONTENT ||
 801ca4a:	f242 73d1 	movw	r3, #10193	@ 0x27d1
 801ca4e:	4298      	cmp	r0, r3
 801ca50:	d1b8      	bne.n	801c9c4 <lv_obj_refresh_style+0x60>
 801ca52:	e7af      	b.n	801c9b4 <lv_obj_refresh_style+0x50>
        lv_layer_type_t layer_type = calculate_layer_type(obj);
 801ca54:	4628      	mov	r0, r5
 801ca56:	f7ff fe9a 	bl	801c78e <calculate_layer_type>
 801ca5a:	4682      	mov	sl, r0
        if(obj->spec_attr) obj->spec_attr->layer_type = layer_type;
 801ca5c:	68ab      	ldr	r3, [r5, #8]
 801ca5e:	b123      	cbz	r3, 801ca6a <lv_obj_refresh_style+0x106>
 801ca60:	7e9a      	ldrb	r2, [r3, #26]
 801ca62:	f360 1287 	bfi	r2, r0, #6, #2
 801ca66:	769a      	strb	r2, [r3, #26]
 801ca68:	e7c2      	b.n	801c9f0 <lv_obj_refresh_style+0x8c>
        else if(layer_type != LV_LAYER_TYPE_NONE) {
 801ca6a:	2800      	cmp	r0, #0
 801ca6c:	d0c0      	beq.n	801c9f0 <lv_obj_refresh_style+0x8c>
            lv_obj_allocate_spec_attr(obj);
 801ca6e:	4628      	mov	r0, r5
 801ca70:	f7fb ff8e 	bl	8018990 <lv_obj_allocate_spec_attr>
            obj->spec_attr->layer_type = layer_type;
 801ca74:	68ab      	ldr	r3, [r5, #8]
 801ca76:	7e9a      	ldrb	r2, [r3, #26]
 801ca78:	f36a 1287 	bfi	r2, sl, #6, #2
 801ca7c:	769a      	strb	r2, [r3, #26]
 801ca7e:	e7b7      	b.n	801c9f0 <lv_obj_refresh_style+0x8c>
            refresh_children_style(obj);
 801ca80:	4628      	mov	r0, r5
 801ca82:	f7ff fb61 	bl	801c148 <refresh_children_style>
 801ca86:	e7ce      	b.n	801ca26 <lv_obj_refresh_style+0xc2>
 801ca88:	20000070 	.word	0x20000070

0801ca8c <lv_obj_add_style>:
{
 801ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca90:	4605      	mov	r5, r0
 801ca92:	4688      	mov	r8, r1
 801ca94:	4617      	mov	r7, r2
    trans_del(obj, selector, LV_STYLE_PROP_ANY, NULL);
 801ca96:	2300      	movs	r3, #0
 801ca98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ca9c:	4639      	mov	r1, r7
 801ca9e:	f7ff fafb 	bl	801c098 <trans_del>
    for(i = 0; i < obj->style_cnt; i++) {
 801caa2:	2600      	movs	r6, #0
 801caa4:	e000      	b.n	801caa8 <lv_obj_add_style+0x1c>
 801caa6:	3601      	adds	r6, #1
 801caa8:	8c69      	ldrh	r1, [r5, #34]	@ 0x22
 801caaa:	f3c1 1105 	ubfx	r1, r1, #4, #6
 801caae:	42b1      	cmp	r1, r6
 801cab0:	d909      	bls.n	801cac6 <lv_obj_add_style+0x3a>
        if(obj->styles[i].is_trans) continue;
 801cab2:	68eb      	ldr	r3, [r5, #12]
 801cab4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801cab8:	79db      	ldrb	r3, [r3, #7]
 801caba:	f013 0f02 	tst.w	r3, #2
 801cabe:	d1f2      	bne.n	801caa6 <lv_obj_add_style+0x1a>
        if(obj->styles[i].is_local) continue;
 801cac0:	f013 0f01 	tst.w	r3, #1
 801cac4:	d1ef      	bne.n	801caa6 <lv_obj_add_style+0x1a>
    obj->style_cnt++;
 801cac6:	3101      	adds	r1, #1
 801cac8:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801cacc:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 801cace:	f361 1309 	bfi	r3, r1, #4, #6
 801cad2:	846b      	strh	r3, [r5, #34]	@ 0x22
    obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801cad4:	00c9      	lsls	r1, r1, #3
 801cad6:	68e8      	ldr	r0, [r5, #12]
 801cad8:	f7f9 ff58 	bl	801698c <lv_mem_realloc>
 801cadc:	60e8      	str	r0, [r5, #12]
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801cade:	8c6a      	ldrh	r2, [r5, #34]	@ 0x22
 801cae0:	f3c2 1205 	ubfx	r2, r2, #4, #6
 801cae4:	3a01      	subs	r2, #1
 801cae6:	e00c      	b.n	801cb02 <lv_obj_add_style+0x76>
        obj->styles[j] = obj->styles[j - 1];
 801cae8:	68ec      	ldr	r4, [r5, #12]
 801caea:	f102 5300 	add.w	r3, r2, #536870912	@ 0x20000000
 801caee:	3b01      	subs	r3, #1
 801caf0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801caf4:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 801caf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cafc:	e88c 0003 	stmia.w	ip, {r0, r1}
    for(j = obj->style_cnt - 1; j > i ; j--) {
 801cb00:	3a01      	subs	r2, #1
 801cb02:	4296      	cmp	r6, r2
 801cb04:	d3f0      	bcc.n	801cae8 <lv_obj_add_style+0x5c>
    lv_memset_00(&obj->styles[i], sizeof(_lv_obj_style_t));
 801cb06:	68e8      	ldr	r0, [r5, #12]
 801cb08:	00f4      	lsls	r4, r6, #3
 801cb0a:	2108      	movs	r1, #8
 801cb0c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 801cb10:	f7fa f8d8 	bl	8016cc4 <lv_memset_00>
    obj->styles[i].style = style;
 801cb14:	68eb      	ldr	r3, [r5, #12]
 801cb16:	f843 8036 	str.w	r8, [r3, r6, lsl #3]
    obj->styles[i].selector = selector;
 801cb1a:	68eb      	ldr	r3, [r5, #12]
 801cb1c:	4423      	add	r3, r4
 801cb1e:	685a      	ldr	r2, [r3, #4]
 801cb20:	f367 0217 	bfi	r2, r7, #0, #24
 801cb24:	605a      	str	r2, [r3, #4]
    lv_obj_refresh_style(obj, selector, LV_STYLE_PROP_ANY);
 801cb26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb2a:	4639      	mov	r1, r7
 801cb2c:	4628      	mov	r0, r5
 801cb2e:	f7ff ff19 	bl	801c964 <lv_obj_refresh_style>
}
 801cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cb36 <report_style_change_core>:
{
 801cb36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb38:	4605      	mov	r5, r0
 801cb3a:	460c      	mov	r4, r1
    for(i = 0; i < obj->style_cnt; i++) {
 801cb3c:	2200      	movs	r2, #0
 801cb3e:	e000      	b.n	801cb42 <report_style_change_core+0xc>
 801cb40:	3201      	adds	r2, #1
 801cb42:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801cb44:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801cb48:	4293      	cmp	r3, r2
 801cb4a:	d90c      	bls.n	801cb66 <report_style_change_core+0x30>
        if(style == NULL || obj->styles[i].style == style) {
 801cb4c:	b125      	cbz	r5, 801cb58 <report_style_change_core+0x22>
 801cb4e:	68e3      	ldr	r3, [r4, #12]
 801cb50:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801cb54:	42ab      	cmp	r3, r5
 801cb56:	d1f3      	bne.n	801cb40 <report_style_change_core+0xa>
            lv_obj_refresh_style(obj, LV_PART_ANY, LV_STYLE_PROP_ANY);
 801cb58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cb5c:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 801cb60:	4620      	mov	r0, r4
 801cb62:	f7ff feff 	bl	801c964 <lv_obj_refresh_style>
    uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801cb66:	4620      	mov	r0, r4
 801cb68:	f000 fb43 	bl	801d1f2 <lv_obj_get_child_cnt>
 801cb6c:	4607      	mov	r7, r0
    for(i = 0; i < child_cnt; i++) {
 801cb6e:	2600      	movs	r6, #0
 801cb70:	42be      	cmp	r6, r7
 801cb72:	d208      	bcs.n	801cb86 <report_style_change_core+0x50>
        report_style_change_core(style, obj->spec_attr->children[i]);
 801cb74:	68a3      	ldr	r3, [r4, #8]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 801cb7c:	4628      	mov	r0, r5
 801cb7e:	f7ff ffda 	bl	801cb36 <report_style_change_core>
    for(i = 0; i < child_cnt; i++) {
 801cb82:	3601      	adds	r6, #1
 801cb84:	e7f4      	b.n	801cb70 <report_style_change_core+0x3a>
}
 801cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cb88 <lv_obj_report_style_change>:
    if(!style_refr) return;
 801cb88:	4b0e      	ldr	r3, [pc, #56]	@ (801cbc4 <lv_obj_report_style_change+0x3c>)
 801cb8a:	781b      	ldrb	r3, [r3, #0]
 801cb8c:	b903      	cbnz	r3, 801cb90 <lv_obj_report_style_change+0x8>
 801cb8e:	4770      	bx	lr
{
 801cb90:	b570      	push	{r4, r5, r6, lr}
 801cb92:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
 801cb94:	2000      	movs	r0, #0
 801cb96:	f7f6 fbbd 	bl	8013314 <lv_disp_get_next>
 801cb9a:	4605      	mov	r5, r0
    while(d) {
 801cb9c:	e00d      	b.n	801cbba <lv_obj_report_style_change+0x32>
            report_style_change_core(style, d->screens[i]);
 801cb9e:	68eb      	ldr	r3, [r5, #12]
 801cba0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801cba4:	4630      	mov	r0, r6
 801cba6:	f7ff ffc6 	bl	801cb36 <report_style_change_core>
        for(i = 0; i < d->screen_cnt; i++) {
 801cbaa:	3401      	adds	r4, #1
 801cbac:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801cbae:	42a3      	cmp	r3, r4
 801cbb0:	d8f5      	bhi.n	801cb9e <lv_obj_report_style_change+0x16>
        d = lv_disp_get_next(d);
 801cbb2:	4628      	mov	r0, r5
 801cbb4:	f7f6 fbae 	bl	8013314 <lv_disp_get_next>
 801cbb8:	4605      	mov	r5, r0
    while(d) {
 801cbba:	b10d      	cbz	r5, 801cbc0 <lv_obj_report_style_change+0x38>
        for(i = 0; i < d->screen_cnt; i++) {
 801cbbc:	2400      	movs	r4, #0
 801cbbe:	e7f5      	b.n	801cbac <lv_obj_report_style_change+0x24>
}
 801cbc0:	bd70      	pop	{r4, r5, r6, pc}
 801cbc2:	bf00      	nop
 801cbc4:	20000070 	.word	0x20000070

0801cbc8 <lv_obj_set_local_style_prop>:
{
 801cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbca:	4606      	mov	r6, r0
 801cbcc:	460d      	mov	r5, r1
 801cbce:	4617      	mov	r7, r2
 801cbd0:	461c      	mov	r4, r3
    lv_style_t * style = get_local_style(obj, selector);
 801cbd2:	4619      	mov	r1, r3
 801cbd4:	f7ff fad5 	bl	801c182 <get_local_style>
    lv_style_set_prop(style, prop, value);
 801cbd8:	463a      	mov	r2, r7
 801cbda:	4629      	mov	r1, r5
 801cbdc:	f004 fade 	bl	802119c <lv_style_set_prop>
    lv_obj_refresh_style(obj, selector, prop);
 801cbe0:	462a      	mov	r2, r5
 801cbe2:	4621      	mov	r1, r4
 801cbe4:	4630      	mov	r0, r6
 801cbe6:	f7ff febd 	bl	801c964 <lv_obj_refresh_style>
}
 801cbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cbec <lv_obj_remove_local_style_prop>:
{
 801cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbee:	4604      	mov	r4, r0
 801cbf0:	460e      	mov	r6, r1
 801cbf2:	4615      	mov	r5, r2
    for(i = 0; i < obj->style_cnt; i++) {
 801cbf4:	f04f 0e00 	mov.w	lr, #0
 801cbf8:	e001      	b.n	801cbfe <lv_obj_remove_local_style_prop+0x12>
 801cbfa:	f10e 0e01 	add.w	lr, lr, #1
 801cbfe:	f8b4 c022 	ldrh.w	ip, [r4, #34]	@ 0x22
 801cc02:	f3cc 1c05 	ubfx	ip, ip, #4, #6
 801cc06:	45f4      	cmp	ip, lr
 801cc08:	d90b      	bls.n	801cc22 <lv_obj_remove_local_style_prop+0x36>
        if(obj->styles[i].is_local &&
 801cc0a:	68e3      	ldr	r3, [r4, #12]
 801cc0c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 801cc10:	79da      	ldrb	r2, [r3, #7]
 801cc12:	f012 0f01 	tst.w	r2, #1
 801cc16:	d0f0      	beq.n	801cbfa <lv_obj_remove_local_style_prop+0xe>
           obj->styles[i].selector == selector) {
 801cc18:	685b      	ldr	r3, [r3, #4]
 801cc1a:	f3c3 0317 	ubfx	r3, r3, #0, #24
        if(obj->styles[i].is_local &&
 801cc1e:	42ab      	cmp	r3, r5
 801cc20:	d1eb      	bne.n	801cbfa <lv_obj_remove_local_style_prop+0xe>
    if(i == obj->style_cnt) return false;
 801cc22:	45f4      	cmp	ip, lr
 801cc24:	d00f      	beq.n	801cc46 <lv_obj_remove_local_style_prop+0x5a>
    lv_res_t res = lv_style_remove_prop(obj->styles[i].style, prop);
 801cc26:	68e3      	ldr	r3, [r4, #12]
 801cc28:	4631      	mov	r1, r6
 801cc2a:	f853 003e 	ldr.w	r0, [r3, lr, lsl #3]
 801cc2e:	f004 f8bf 	bl	8020db0 <lv_style_remove_prop>
    if(res == LV_RES_OK) {
 801cc32:	4607      	mov	r7, r0
 801cc34:	b908      	cbnz	r0, 801cc3a <lv_obj_remove_local_style_prop+0x4e>
}
 801cc36:	4638      	mov	r0, r7
 801cc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_refresh_style(obj, selector, prop);
 801cc3a:	4632      	mov	r2, r6
 801cc3c:	4629      	mov	r1, r5
 801cc3e:	4620      	mov	r0, r4
 801cc40:	f7ff fe90 	bl	801c964 <lv_obj_refresh_style>
 801cc44:	e7f7      	b.n	801cc36 <lv_obj_remove_local_style_prop+0x4a>
    if(i == obj->style_cnt) return false;
 801cc46:	2700      	movs	r7, #0
 801cc48:	e7f5      	b.n	801cc36 <lv_obj_remove_local_style_prop+0x4a>
	...

0801cc4c <trans_anim_cb>:
{
 801cc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc50:	b083      	sub	sp, #12
 801cc52:	4604      	mov	r4, r0
    lv_obj_t * obj = tr->obj;
 801cc54:	6805      	ldr	r5, [r0, #0]
    for(i = 0; i < obj->style_cnt; i++) {
 801cc56:	2300      	movs	r3, #0
 801cc58:	e000      	b.n	801cc5c <trans_anim_cb+0x10>
 801cc5a:	3301      	adds	r3, #1
 801cc5c:	f8b5 c022 	ldrh.w	ip, [r5, #34]	@ 0x22
 801cc60:	f3cc 1c05 	ubfx	ip, ip, #4, #6
 801cc64:	459c      	cmp	ip, r3
 801cc66:	f240 80a5 	bls.w	801cdb4 <trans_anim_cb+0x168>
        if(obj->styles[i].is_trans == 0 || obj->styles[i].selector != tr->selector) continue;
 801cc6a:	68ee      	ldr	r6, [r5, #12]
 801cc6c:	00df      	lsls	r7, r3, #3
 801cc6e:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 801cc72:	f890 c007 	ldrb.w	ip, [r0, #7]
 801cc76:	f01c 0f02 	tst.w	ip, #2
 801cc7a:	d0ee      	beq.n	801cc5a <trans_anim_cb+0xe>
 801cc7c:	6840      	ldr	r0, [r0, #4]
 801cc7e:	f3c0 0017 	ubfx	r0, r0, #0, #24
 801cc82:	68a2      	ldr	r2, [r4, #8]
 801cc84:	4290      	cmp	r0, r2
 801cc86:	d1e8      	bne.n	801cc5a <trans_anim_cb+0xe>
        switch(tr->prop) {
 801cc88:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801cc8c:	f1b8 0f68 	cmp.w	r8, #104	@ 0x68
 801cc90:	d874      	bhi.n	801cd7c <trans_anim_cb+0x130>
 801cc92:	f1b8 0f57 	cmp.w	r8, #87	@ 0x57
 801cc96:	d30e      	bcc.n	801ccb6 <trans_anim_cb+0x6a>
 801cc98:	f1a8 0357 	sub.w	r3, r8, #87	@ 0x57
 801cc9c:	2b11      	cmp	r3, #17
 801cc9e:	d86d      	bhi.n	801cd7c <trans_anim_cb+0x130>
 801cca0:	e8df f003 	tbb	[pc, r3]
 801cca4:	6c6c6c45 	.word	0x6c6c6c45
 801cca8:	6c6c6c6c 	.word	0x6c6c6c6c
 801ccac:	4d6c6c6c 	.word	0x4d6c6c6c
 801ccb0:	6c6c6c6c 	.word	0x6c6c6c6c
 801ccb4:	1a45      	.short	0x1a45
 801ccb6:	f1b8 0f36 	cmp.w	r8, #54	@ 0x36
 801ccba:	d81d      	bhi.n	801ccf8 <trans_anim_cb+0xac>
 801ccbc:	f1b8 0f20 	cmp.w	r8, #32
 801ccc0:	d35c      	bcc.n	801cd7c <trans_anim_cb+0x130>
 801ccc2:	f1a8 0220 	sub.w	r2, r8, #32
 801ccc6:	b292      	uxth	r2, r2
 801ccc8:	2301      	movs	r3, #1
 801ccca:	4093      	lsls	r3, r2
 801cccc:	4a3f      	ldr	r2, [pc, #252]	@ (801cdcc <trans_anim_cb+0x180>)
 801ccce:	401a      	ands	r2, r3
 801ccd0:	bb02      	cbnz	r2, 801cd14 <trans_anim_cb+0xc8>
 801ccd2:	f413 1fc0 	tst.w	r3, #1572864	@ 0x180000
 801ccd6:	d051      	beq.n	801cd7c <trans_anim_cb+0x130>
                if(v < 255) value_final.num = tr->start_value.num;
 801ccd8:	29fe      	cmp	r1, #254	@ 0xfe
 801ccda:	dc25      	bgt.n	801cd28 <trans_anim_cb+0xdc>
 801ccdc:	f8d4 900c 	ldr.w	r9, [r4, #12]
        if(lv_style_get_prop(obj->styles[i].style, tr->prop, &old_value)) {
 801cce0:	aa01      	add	r2, sp, #4
 801cce2:	4641      	mov	r1, r8
 801cce4:	59f0      	ldr	r0, [r6, r7]
 801cce6:	f004 f9bb 	bl	8021060 <lv_style_get_prop>
 801ccea:	2800      	cmp	r0, #0
 801ccec:	d05a      	beq.n	801cda4 <trans_anim_cb+0x158>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 801ccee:	9b01      	ldr	r3, [sp, #4]
 801ccf0:	4599      	cmp	r9, r3
 801ccf2:	d054      	beq.n	801cd9e <trans_anim_cb+0x152>
        bool refr = true;
 801ccf4:	2601      	movs	r6, #1
 801ccf6:	e056      	b.n	801cda6 <trans_anim_cb+0x15a>
        switch(tr->prop) {
 801ccf8:	f1b8 0f55 	cmp.w	r8, #85	@ 0x55
 801ccfc:	d83e      	bhi.n	801cd7c <trans_anim_cb+0x130>
 801ccfe:	f1b8 0f44 	cmp.w	r8, #68	@ 0x44
 801cd02:	d33b      	bcc.n	801cd7c <trans_anim_cb+0x130>
 801cd04:	f1a8 0244 	sub.w	r2, r8, #68	@ 0x44
 801cd08:	b292      	uxth	r2, r2
 801cd0a:	4b31      	ldr	r3, [pc, #196]	@ (801cdd0 <trans_anim_cb+0x184>)
 801cd0c:	40d3      	lsrs	r3, r2
 801cd0e:	f013 0f01 	tst.w	r3, #1
 801cd12:	d033      	beq.n	801cd7c <trans_anim_cb+0x130>
                if(v <= 0) value_final.color = tr->start_value.color;
 801cd14:	2900      	cmp	r1, #0
 801cd16:	dd21      	ble.n	801cd5c <trans_anim_cb+0x110>
                else if(v >= 255) value_final.color = tr->end_value.color;
 801cd18:	29fe      	cmp	r1, #254	@ 0xfe
 801cd1a:	dd25      	ble.n	801cd68 <trans_anim_cb+0x11c>
 801cd1c:	8a23      	ldrh	r3, [r4, #16]
 801cd1e:	f04f 0900 	mov.w	r9, #0
 801cd22:	f363 090f 	bfi	r9, r3, #0, #16
 801cd26:	e7db      	b.n	801cce0 <trans_anim_cb+0x94>
                else value_final.num = tr->end_value.num;
 801cd28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cd2c:	e7d8      	b.n	801cce0 <trans_anim_cb+0x94>
                if(v < 255) value_final.ptr = tr->start_value.ptr;
 801cd2e:	29fe      	cmp	r1, #254	@ 0xfe
 801cd30:	dc02      	bgt.n	801cd38 <trans_anim_cb+0xec>
 801cd32:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801cd36:	e7d3      	b.n	801cce0 <trans_anim_cb+0x94>
                else value_final.ptr = tr->end_value.ptr;
 801cd38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cd3c:	e7d0      	b.n	801cce0 <trans_anim_cb+0x94>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 801cd3e:	68e3      	ldr	r3, [r4, #12]
 801cd40:	b12b      	cbz	r3, 801cd4e <trans_anim_cb+0x102>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 801cd42:	6922      	ldr	r2, [r4, #16]
 801cd44:	b132      	cbz	r2, 801cd54 <trans_anim_cb+0x108>
                else if(v < 128) value_final.ptr = tr->start_value.ptr;
 801cd46:	297f      	cmp	r1, #127	@ 0x7f
 801cd48:	dc06      	bgt.n	801cd58 <trans_anim_cb+0x10c>
 801cd4a:	4699      	mov	r9, r3
 801cd4c:	e7c8      	b.n	801cce0 <trans_anim_cb+0x94>
                if(tr->start_value.ptr == NULL) value_final.ptr = tr->end_value.ptr;
 801cd4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cd52:	e7c5      	b.n	801cce0 <trans_anim_cb+0x94>
                else if(tr->end_value.ptr == NULL) value_final.ptr = tr->start_value.ptr;
 801cd54:	4699      	mov	r9, r3
 801cd56:	e7c3      	b.n	801cce0 <trans_anim_cb+0x94>
                else value_final.ptr = tr->end_value.ptr;
 801cd58:	4691      	mov	r9, r2
 801cd5a:	e7c1      	b.n	801cce0 <trans_anim_cb+0x94>
                if(v <= 0) value_final.color = tr->start_value.color;
 801cd5c:	89a3      	ldrh	r3, [r4, #12]
 801cd5e:	f04f 0900 	mov.w	r9, #0
 801cd62:	f363 090f 	bfi	r9, r3, #0, #16
 801cd66:	e7bb      	b.n	801cce0 <trans_anim_cb+0x94>
                else value_final.color = lv_color_mix(tr->end_value.color, tr->start_value.color, v);
 801cd68:	b2ca      	uxtb	r2, r1
 801cd6a:	89a1      	ldrh	r1, [r4, #12]
 801cd6c:	8a20      	ldrh	r0, [r4, #16]
 801cd6e:	f7ff f96d 	bl	801c04c <lv_color_mix>
 801cd72:	f04f 0900 	mov.w	r9, #0
 801cd76:	f360 090f 	bfi	r9, r0, #0, #16
 801cd7a:	e7b1      	b.n	801cce0 <trans_anim_cb+0x94>
                if(v == 0) value_final.num = tr->start_value.num;
 801cd7c:	b911      	cbnz	r1, 801cd84 <trans_anim_cb+0x138>
 801cd7e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801cd82:	e7ad      	b.n	801cce0 <trans_anim_cb+0x94>
                else if(v == 255) value_final.num = tr->end_value.num;
 801cd84:	29ff      	cmp	r1, #255	@ 0xff
 801cd86:	d007      	beq.n	801cd98 <trans_anim_cb+0x14c>
                else value_final.num = tr->start_value.num + ((int32_t)((int32_t)(tr->end_value.num - tr->start_value.num) * v) >> 8);
 801cd88:	68e2      	ldr	r2, [r4, #12]
 801cd8a:	6923      	ldr	r3, [r4, #16]
 801cd8c:	1a9b      	subs	r3, r3, r2
 801cd8e:	fb01 f303 	mul.w	r3, r1, r3
 801cd92:	eb02 2923 	add.w	r9, r2, r3, asr #8
 801cd96:	e7a3      	b.n	801cce0 <trans_anim_cb+0x94>
                else if(v == 255) value_final.num = tr->end_value.num;
 801cd98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801cd9c:	e7a0      	b.n	801cce0 <trans_anim_cb+0x94>
            if(value_final.ptr == old_value.ptr && value_final.color.full == old_value.color.full &&
 801cd9e:	d00c      	beq.n	801cdba <trans_anim_cb+0x16e>
        bool refr = true;
 801cda0:	2601      	movs	r6, #1
 801cda2:	e000      	b.n	801cda6 <trans_anim_cb+0x15a>
 801cda4:	2601      	movs	r6, #1
        lv_style_set_prop(obj->styles[i].style, tr->prop, value_final);
 801cda6:	68eb      	ldr	r3, [r5, #12]
 801cda8:	464a      	mov	r2, r9
 801cdaa:	88a1      	ldrh	r1, [r4, #4]
 801cdac:	59d8      	ldr	r0, [r3, r7]
 801cdae:	f004 f9f5 	bl	802119c <lv_style_set_prop>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 801cdb2:	b926      	cbnz	r6, 801cdbe <trans_anim_cb+0x172>
}
 801cdb4:	b003      	add	sp, #12
 801cdb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                refr = false;
 801cdba:	2600      	movs	r6, #0
 801cdbc:	e7f3      	b.n	801cda6 <trans_anim_cb+0x15a>
        if(refr) lv_obj_refresh_style(tr->obj, tr->selector, tr->prop);
 801cdbe:	88a2      	ldrh	r2, [r4, #4]
 801cdc0:	68a1      	ldr	r1, [r4, #8]
 801cdc2:	6820      	ldr	r0, [r4, #0]
 801cdc4:	f7ff fdce 	bl	801c964 <lv_obj_refresh_style>
        break;
 801cdc8:	e7f4      	b.n	801cdb4 <trans_anim_cb+0x168>
 801cdca:	bf00      	nop
 801cdcc:	00410005 	.word	0x00410005
 801cdd0:	00020009 	.word	0x00020009

0801cdd4 <lv_obj_remove_style>:
{
 801cdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd8:	b085      	sub	sp, #20
 801cdda:	4604      	mov	r4, r0
 801cddc:	460e      	mov	r6, r1
 801cdde:	9101      	str	r1, [sp, #4]
 801cde0:	4615      	mov	r5, r2
    lv_state_t state = lv_obj_style_get_selector_state(selector);
 801cde2:	4610      	mov	r0, r2
 801cde4:	f7ff fab8 	bl	801c358 <lv_obj_style_get_selector_state>
 801cde8:	4681      	mov	r9, r0
    lv_part_t part = lv_obj_style_get_selector_part(selector);
 801cdea:	4628      	mov	r0, r5
 801cdec:	f7ff fbea 	bl	801c5c4 <lv_obj_style_get_selector_part>
 801cdf0:	4683      	mov	fp, r0
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 801cdf2:	b146      	cbz	r6, 801ce06 <lv_obj_remove_style+0x32>
 801cdf4:	79f3      	ldrb	r3, [r6, #7]
 801cdf6:	b153      	cbz	r3, 801ce0e <lv_obj_remove_style+0x3a>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801cdf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cdfc:	9303      	str	r3, [sp, #12]
    bool deleted = false;
 801cdfe:	2300      	movs	r3, #0
 801ce00:	9302      	str	r3, [sp, #8]
    uint32_t i = 0;
 801ce02:	461d      	mov	r5, r3
    while(i <  obj->style_cnt) {
 801ce04:	e00d      	b.n	801ce22 <lv_obj_remove_style+0x4e>
    lv_style_prop_t prop = LV_STYLE_PROP_ANY;
 801ce06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ce0a:	9303      	str	r3, [sp, #12]
 801ce0c:	e7f7      	b.n	801cdfe <lv_obj_remove_style+0x2a>
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 801ce0e:	2300      	movs	r3, #0
 801ce10:	9303      	str	r3, [sp, #12]
 801ce12:	e7f4      	b.n	801cdfe <lv_obj_remove_style+0x2a>
           (part != LV_PART_ANY && part_act != part) ||
 801ce14:	9a01      	ldr	r2, [sp, #4]
 801ce16:	b332      	cbz	r2, 801ce66 <lv_obj_remove_style+0x92>
           (style != NULL && style != obj->styles[i].style)) {
 801ce18:	f857 300a 	ldr.w	r3, [r7, sl]
 801ce1c:	4293      	cmp	r3, r2
 801ce1e:	d022      	beq.n	801ce66 <lv_obj_remove_style+0x92>
            i++;
 801ce20:	3501      	adds	r5, #1
    while(i <  obj->style_cnt) {
 801ce22:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801ce24:	f3c3 1305 	ubfx	r3, r3, #4, #6
 801ce28:	42ab      	cmp	r3, r5
 801ce2a:	d95f      	bls.n	801ceec <lv_obj_remove_style+0x118>
        lv_state_t state_act = lv_obj_style_get_selector_state(obj->styles[i].selector);
 801ce2c:	68e7      	ldr	r7, [r4, #12]
 801ce2e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 801ce32:	eb07 08c5 	add.w	r8, r7, r5, lsl #3
 801ce36:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801ce3a:	f3c6 0617 	ubfx	r6, r6, #0, #24
 801ce3e:	4630      	mov	r0, r6
 801ce40:	f7ff fa8a 	bl	801c358 <lv_obj_style_get_selector_state>
 801ce44:	9000      	str	r0, [sp, #0]
        lv_part_t part_act = lv_obj_style_get_selector_part(obj->styles[i].selector);
 801ce46:	4630      	mov	r0, r6
 801ce48:	f7ff fbbc 	bl	801c5c4 <lv_obj_style_get_selector_part>
        if((state != LV_STATE_ANY && state_act != state) ||
 801ce4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ce50:	4599      	cmp	r9, r3
 801ce52:	d002      	beq.n	801ce5a <lv_obj_remove_style+0x86>
 801ce54:	9b00      	ldr	r3, [sp, #0]
 801ce56:	4599      	cmp	r9, r3
 801ce58:	d1e2      	bne.n	801ce20 <lv_obj_remove_style+0x4c>
 801ce5a:	f5bb 2f70 	cmp.w	fp, #983040	@ 0xf0000
 801ce5e:	d0d9      	beq.n	801ce14 <lv_obj_remove_style+0x40>
           (part != LV_PART_ANY && part_act != part) ||
 801ce60:	4583      	cmp	fp, r0
 801ce62:	d0d7      	beq.n	801ce14 <lv_obj_remove_style+0x40>
 801ce64:	e7dc      	b.n	801ce20 <lv_obj_remove_style+0x4c>
        if(obj->styles[i].is_trans) {
 801ce66:	f898 3007 	ldrb.w	r3, [r8, #7]
 801ce6a:	f013 0f02 	tst.w	r3, #2
 801ce6e:	d108      	bne.n	801ce82 <lv_obj_remove_style+0xae>
        if(obj->styles[i].is_local || obj->styles[i].is_trans) {
 801ce70:	68e3      	ldr	r3, [r4, #12]
 801ce72:	eb03 020a 	add.w	r2, r3, sl
 801ce76:	79d2      	ldrb	r2, [r2, #7]
 801ce78:	f012 0f03 	tst.w	r2, #3
 801ce7c:	d109      	bne.n	801ce92 <lv_obj_remove_style+0xbe>
    if(style && style->prop_cnt == 0) prop = LV_STYLE_PROP_INV;
 801ce7e:	462a      	mov	r2, r5
 801ce80:	e01f      	b.n	801cec2 <lv_obj_remove_style+0xee>
            trans_del(obj, part, LV_STYLE_PROP_ANY, NULL);
 801ce82:	2300      	movs	r3, #0
 801ce84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801ce88:	4659      	mov	r1, fp
 801ce8a:	4620      	mov	r0, r4
 801ce8c:	f7ff f904 	bl	801c098 <trans_del>
 801ce90:	e7ee      	b.n	801ce70 <lv_obj_remove_style+0x9c>
            lv_style_reset(obj->styles[i].style);
 801ce92:	f853 000a 	ldr.w	r0, [r3, sl]
 801ce96:	f003 ff3b 	bl	8020d10 <lv_style_reset>
            lv_mem_free(obj->styles[i].style);
 801ce9a:	68e3      	ldr	r3, [r4, #12]
 801ce9c:	f853 000a 	ldr.w	r0, [r3, sl]
 801cea0:	f7f9 fd58 	bl	8016954 <lv_mem_free>
            obj->styles[i].style = NULL;
 801cea4:	68e3      	ldr	r3, [r4, #12]
 801cea6:	2200      	movs	r2, #0
 801cea8:	f843 200a 	str.w	r2, [r3, sl]
 801ceac:	e7e7      	b.n	801ce7e <lv_obj_remove_style+0xaa>
            obj->styles[j] = obj->styles[j + 1];
 801ceae:	68e3      	ldr	r3, [r4, #12]
 801ceb0:	1c56      	adds	r6, r2, #1
 801ceb2:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 801ceb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ceba:	c903      	ldmia	r1, {r0, r1}
 801cebc:	e883 0003 	stmia.w	r3, {r0, r1}
        for(j = i; j < (uint32_t)obj->style_cnt - 1 ; j++) {
 801cec0:	4632      	mov	r2, r6
 801cec2:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 801cec4:	f3c1 1105 	ubfx	r1, r1, #4, #6
 801cec8:	1e4b      	subs	r3, r1, #1
 801ceca:	4293      	cmp	r3, r2
 801cecc:	d8ef      	bhi.n	801ceae <lv_obj_remove_style+0xda>
        obj->style_cnt--;
 801cece:	313f      	adds	r1, #63	@ 0x3f
 801ced0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ced4:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801ced6:	f361 1309 	bfi	r3, r1, #4, #6
 801ceda:	8463      	strh	r3, [r4, #34]	@ 0x22
        obj->styles = lv_mem_realloc(obj->styles, obj->style_cnt * sizeof(_lv_obj_style_t));
 801cedc:	00c9      	lsls	r1, r1, #3
 801cede:	68e0      	ldr	r0, [r4, #12]
 801cee0:	f7f9 fd54 	bl	801698c <lv_mem_realloc>
 801cee4:	60e0      	str	r0, [r4, #12]
        deleted = true;
 801cee6:	2301      	movs	r3, #1
 801cee8:	9302      	str	r3, [sp, #8]
 801ceea:	e79a      	b.n	801ce22 <lv_obj_remove_style+0x4e>
    if(deleted && prop != LV_STYLE_PROP_INV) {
 801ceec:	9b02      	ldr	r3, [sp, #8]
 801ceee:	b10b      	cbz	r3, 801cef4 <lv_obj_remove_style+0x120>
 801cef0:	9b03      	ldr	r3, [sp, #12]
 801cef2:	b913      	cbnz	r3, 801cefa <lv_obj_remove_style+0x126>
}
 801cef4:	b005      	add	sp, #20
 801cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_refresh_style(obj, part, prop);
 801cefa:	461a      	mov	r2, r3
 801cefc:	4659      	mov	r1, fp
 801cefe:	4620      	mov	r0, r4
 801cf00:	f7ff fd30 	bl	801c964 <lv_obj_refresh_style>
}
 801cf04:	e7f6      	b.n	801cef4 <lv_obj_remove_style+0x120>
	...

0801cf08 <trans_anim_ready_cb>:
{
 801cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    trans_t * tr = a->var;
 801cf0c:	6804      	ldr	r4, [r0, #0]
    lv_obj_t * obj = tr->obj;
 801cf0e:	6825      	ldr	r5, [r4, #0]
    lv_style_prop_t prop = tr->prop;
 801cf10:	88a6      	ldrh	r6, [r4, #4]
    _LV_LL_READ(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
 801cf12:	4827      	ldr	r0, [pc, #156]	@ (801cfb0 <trans_anim_ready_cb+0xa8>)
 801cf14:	f7f9 fb25 	bl	8016562 <_lv_ll_get_head>
 801cf18:	4601      	mov	r1, r0
 801cf1a:	e003      	b.n	801cf24 <trans_anim_ready_cb+0x1c>
 801cf1c:	4824      	ldr	r0, [pc, #144]	@ (801cfb0 <trans_anim_ready_cb+0xa8>)
 801cf1e:	f7f9 fb28 	bl	8016572 <_lv_ll_get_next>
 801cf22:	4601      	mov	r1, r0
 801cf24:	b179      	cbz	r1, 801cf46 <trans_anim_ready_cb+0x3e>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->selector == tr->selector && tr_i->prop == tr->prop) {
 801cf26:	42a1      	cmp	r1, r4
 801cf28:	d0f8      	beq.n	801cf1c <trans_anim_ready_cb+0x14>
 801cf2a:	680a      	ldr	r2, [r1, #0]
 801cf2c:	6823      	ldr	r3, [r4, #0]
 801cf2e:	429a      	cmp	r2, r3
 801cf30:	d1f4      	bne.n	801cf1c <trans_anim_ready_cb+0x14>
 801cf32:	688a      	ldr	r2, [r1, #8]
 801cf34:	68a3      	ldr	r3, [r4, #8]
 801cf36:	429a      	cmp	r2, r3
 801cf38:	d1f0      	bne.n	801cf1c <trans_anim_ready_cb+0x14>
 801cf3a:	888a      	ldrh	r2, [r1, #4]
 801cf3c:	88a3      	ldrh	r3, [r4, #4]
 801cf3e:	429a      	cmp	r2, r3
 801cf40:	d1ec      	bne.n	801cf1c <trans_anim_ready_cb+0x14>
            running = true;
 801cf42:	2301      	movs	r3, #1
 801cf44:	e000      	b.n	801cf48 <trans_anim_ready_cb+0x40>
    bool running = false;
 801cf46:	2300      	movs	r3, #0
    if(!running) {
 801cf48:	b113      	cbz	r3, 801cf50 <trans_anim_ready_cb+0x48>
}
 801cf4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for(i = 0; i < obj->style_cnt; i++) {
 801cf4e:	3301      	adds	r3, #1
 801cf50:	8c6a      	ldrh	r2, [r5, #34]	@ 0x22
 801cf52:	f3c2 1205 	ubfx	r2, r2, #4, #6
 801cf56:	429a      	cmp	r2, r3
 801cf58:	d9f7      	bls.n	801cf4a <trans_anim_ready_cb+0x42>
            if(obj->styles[i].is_trans && obj->styles[i].selector == tr->selector) {
 801cf5a:	68ea      	ldr	r2, [r5, #12]
 801cf5c:	00df      	lsls	r7, r3, #3
 801cf5e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801cf62:	79d1      	ldrb	r1, [r2, #7]
 801cf64:	f011 0f02 	tst.w	r1, #2
 801cf68:	d0f1      	beq.n	801cf4e <trans_anim_ready_cb+0x46>
 801cf6a:	6852      	ldr	r2, [r2, #4]
 801cf6c:	f3c2 0217 	ubfx	r2, r2, #0, #24
 801cf70:	68a1      	ldr	r1, [r4, #8]
 801cf72:	428a      	cmp	r2, r1
 801cf74:	d1eb      	bne.n	801cf4e <trans_anim_ready_cb+0x46>
                _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
 801cf76:	4621      	mov	r1, r4
 801cf78:	480d      	ldr	r0, [pc, #52]	@ (801cfb0 <trans_anim_ready_cb+0xa8>)
 801cf7a:	f7f9 fb34 	bl	80165e6 <_lv_ll_remove>
                lv_mem_free(tr);
 801cf7e:	4620      	mov	r0, r4
 801cf80:	f7f9 fce8 	bl	8016954 <lv_mem_free>
                _lv_obj_style_t * obj_style = &obj->styles[i];
 801cf84:	68ec      	ldr	r4, [r5, #12]
 801cf86:	eb04 0807 	add.w	r8, r4, r7
                lv_style_remove_prop(obj_style->style, prop);
 801cf8a:	4631      	mov	r1, r6
 801cf8c:	59e0      	ldr	r0, [r4, r7]
 801cf8e:	f003 ff0f 	bl	8020db0 <lv_style_remove_prop>
                if(lv_style_is_empty(obj->styles[i].style)) {
 801cf92:	68eb      	ldr	r3, [r5, #12]
 801cf94:	59d8      	ldr	r0, [r3, r7]
 801cf96:	f004 f867 	bl	8021068 <lv_style_is_empty>
 801cf9a:	2800      	cmp	r0, #0
 801cf9c:	d0d5      	beq.n	801cf4a <trans_anim_ready_cb+0x42>
                    lv_obj_remove_style(obj, obj_style->style, obj_style->selector);
 801cf9e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cfa2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 801cfa6:	59e1      	ldr	r1, [r4, r7]
 801cfa8:	4628      	mov	r0, r5
 801cfaa:	f7ff ff13 	bl	801cdd4 <lv_obj_remove_style>
 801cfae:	e7cc      	b.n	801cf4a <trans_anim_ready_cb+0x42>
 801cfb0:	20006818 	.word	0x20006818

0801cfb4 <trans_anim_start_cb>:
{
 801cfb4:	b570      	push	{r4, r5, r6, lr}
    trans_t * tr = a->var;
 801cfb6:	6804      	ldr	r4, [r0, #0]
    lv_part_t part = lv_obj_style_get_selector_part(tr->selector);
 801cfb8:	68a0      	ldr	r0, [r4, #8]
 801cfba:	f7ff fb03 	bl	801c5c4 <lv_obj_style_get_selector_part>
 801cfbe:	4605      	mov	r5, r0
    tr->start_value = lv_obj_get_style_prop(tr->obj, part, tr->prop);
 801cfc0:	88a2      	ldrh	r2, [r4, #4]
 801cfc2:	4601      	mov	r1, r0
 801cfc4:	6820      	ldr	r0, [r4, #0]
 801cfc6:	f7ff fb95 	bl	801c6f4 <lv_obj_get_style_prop>
 801cfca:	60e0      	str	r0, [r4, #12]
    lv_style_prop_t prop_tmp = tr->prop;
 801cfcc:	88a6      	ldrh	r6, [r4, #4]
    tr->prop = LV_STYLE_PROP_INV;
 801cfce:	2300      	movs	r3, #0
 801cfd0:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, part, prop_tmp, tr);
 801cfd2:	4623      	mov	r3, r4
 801cfd4:	4632      	mov	r2, r6
 801cfd6:	4629      	mov	r1, r5
 801cfd8:	6820      	ldr	r0, [r4, #0]
 801cfda:	f7ff f85d 	bl	801c098 <trans_del>
    tr->prop = prop_tmp;
 801cfde:	80a6      	strh	r6, [r4, #4]
    _lv_obj_style_t * style_trans = get_trans_style(tr->obj, tr->selector);
 801cfe0:	68a1      	ldr	r1, [r4, #8]
 801cfe2:	6820      	ldr	r0, [r4, #0]
 801cfe4:	f7ff f931 	bl	801c24a <get_trans_style>
    lv_style_set_prop(style_trans->style, tr->prop, tr->start_value);   /*Be sure `trans_style` has a valid value*/
 801cfe8:	68e2      	ldr	r2, [r4, #12]
 801cfea:	88a1      	ldrh	r1, [r4, #4]
 801cfec:	6800      	ldr	r0, [r0, #0]
 801cfee:	f004 f8d5 	bl	802119c <lv_style_set_prop>
}
 801cff2:	bd70      	pop	{r4, r5, r6, pc}

0801cff4 <lv_obj_calculate_style_text_align>:
{
 801cff4:	b570      	push	{r4, r5, r6, lr}
 801cff6:	4605      	mov	r5, r0
 801cff8:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_ALIGN);
 801cffa:	225b      	movs	r2, #91	@ 0x5b
 801cffc:	f7ff fb7a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_text_align_t)v.num;
 801d000:	b2c4      	uxtb	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801d002:	2216      	movs	r2, #22
 801d004:	4631      	mov	r1, r6
 801d006:	4628      	mov	r0, r5
 801d008:	f7ff fb74 	bl	801c6f4 <lv_obj_get_style_prop>
 */
static inline void lv_bidi_calculate_align(lv_text_align_t * align, lv_base_dir_t * base_dir, const char * txt)
{
    LV_UNUSED(txt);
    LV_UNUSED(base_dir);
    if(*align == LV_TEXT_ALIGN_AUTO) * align = LV_TEXT_ALIGN_LEFT;
 801d00c:	b904      	cbnz	r4, 801d010 <lv_obj_calculate_style_text_align+0x1c>
 801d00e:	2401      	movs	r4, #1
}
 801d010:	4620      	mov	r0, r4
 801d012:	bd70      	pop	{r4, r5, r6, pc}

0801d014 <lv_obj_get_style_opa_recursive>:
{
 801d014:	b570      	push	{r4, r5, r6, lr}
 801d016:	4604      	mov	r4, r0
 801d018:	460e      	mov	r6, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801d01a:	2260      	movs	r2, #96	@ 0x60
 801d01c:	f7ff fb6a 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d020:	b2c3      	uxtb	r3, r0
    if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d022:	2b02      	cmp	r3, #2
 801d024:	d928      	bls.n	801d078 <lv_obj_get_style_opa_recursive+0x64>
    if(opa_obj < LV_OPA_MAX) {
 801d026:	2bfc      	cmp	r3, #252	@ 0xfc
 801d028:	d809      	bhi.n	801d03e <lv_obj_get_style_opa_recursive+0x2a>
        opa_final = ((uint32_t)opa_final * opa_obj) >> 8;
 801d02a:	ebc3 2003 	rsb	r0, r3, r3, lsl #8
 801d02e:	f3c0 2507 	ubfx	r5, r0, #8, #8
    if(part != LV_PART_MAIN) {
 801d032:	b956      	cbnz	r6, 801d04a <lv_obj_get_style_opa_recursive+0x36>
        obj = lv_obj_get_parent(obj);
 801d034:	4620      	mov	r0, r4
 801d036:	f000 f89d 	bl	801d174 <lv_obj_get_parent>
 801d03a:	4604      	mov	r4, r0
 801d03c:	e005      	b.n	801d04a <lv_obj_get_style_opa_recursive+0x36>
    lv_opa_t opa_final = LV_OPA_COVER;
 801d03e:	25ff      	movs	r5, #255	@ 0xff
 801d040:	e7f7      	b.n	801d032 <lv_obj_get_style_opa_recursive+0x1e>
        obj = lv_obj_get_parent(obj);
 801d042:	4620      	mov	r0, r4
 801d044:	f000 f896 	bl	801d174 <lv_obj_get_parent>
 801d048:	4604      	mov	r4, r0
    while(obj) {
 801d04a:	b17c      	cbz	r4, 801d06c <lv_obj_get_style_opa_recursive+0x58>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA);
 801d04c:	2260      	movs	r2, #96	@ 0x60
 801d04e:	2100      	movs	r1, #0
 801d050:	4620      	mov	r0, r4
 801d052:	f7ff fb4f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801d056:	b2c3      	uxtb	r3, r0
        if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d058:	2b02      	cmp	r3, #2
 801d05a:	d910      	bls.n	801d07e <lv_obj_get_style_opa_recursive+0x6a>
        if(opa_obj < LV_OPA_MAX) {
 801d05c:	2bfc      	cmp	r3, #252	@ 0xfc
 801d05e:	d8f0      	bhi.n	801d042 <lv_obj_get_style_opa_recursive+0x2e>
            opa_final = ((uint32_t)opa_final * opa_obj) >> 8;
 801d060:	4618      	mov	r0, r3
 801d062:	fb05 f000 	mul.w	r0, r5, r0
 801d066:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801d06a:	e7ea      	b.n	801d042 <lv_obj_get_style_opa_recursive+0x2e>
    if(opa_final <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d06c:	2d02      	cmp	r5, #2
 801d06e:	d908      	bls.n	801d082 <lv_obj_get_style_opa_recursive+0x6e>
    if(opa_final >= LV_OPA_MAX) return LV_OPA_COVER;
 801d070:	2dfc      	cmp	r5, #252	@ 0xfc
 801d072:	d902      	bls.n	801d07a <lv_obj_get_style_opa_recursive+0x66>
 801d074:	25ff      	movs	r5, #255	@ 0xff
 801d076:	e000      	b.n	801d07a <lv_obj_get_style_opa_recursive+0x66>
    if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d078:	2500      	movs	r5, #0
}
 801d07a:	4628      	mov	r0, r5
 801d07c:	bd70      	pop	{r4, r5, r6, pc}
        if(opa_obj <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d07e:	2500      	movs	r5, #0
 801d080:	e7fb      	b.n	801d07a <lv_obj_get_style_opa_recursive+0x66>
    if(opa_final <= LV_OPA_MIN) return LV_OPA_TRANSP;
 801d082:	2500      	movs	r5, #0
 801d084:	e7f9      	b.n	801d07a <lv_obj_get_style_opa_recursive+0x66>

0801d086 <lv_obj_set_style_width>:
#include "lv_obj.h"

void lv_obj_set_style_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d086:	b508      	push	{r3, lr}
 801d088:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_WIDTH, v, selector);
 801d08a:	460a      	mov	r2, r1
 801d08c:	2101      	movs	r1, #1
 801d08e:	f7ff fd9b 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d092:	bd08      	pop	{r3, pc}

0801d094 <lv_obj_set_style_min_width>:

void lv_obj_set_style_min_width(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d094:	b508      	push	{r3, lr}
 801d096:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MIN_WIDTH, v, selector);
 801d098:	460a      	mov	r2, r1
 801d09a:	2102      	movs	r1, #2
 801d09c:	f7ff fd94 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0a0:	bd08      	pop	{r3, pc}

0801d0a2 <lv_obj_set_style_height>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_WIDTH, v, selector);
}

void lv_obj_set_style_height(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0a2:	b508      	push	{r3, lr}
 801d0a4:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_HEIGHT, v, selector);
 801d0a6:	460a      	mov	r2, r1
 801d0a8:	2104      	movs	r1, #4
 801d0aa:	f7ff fd8d 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0ae:	bd08      	pop	{r3, pc}

0801d0b0 <lv_obj_set_style_x>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_MAX_HEIGHT, v, selector);
}

void lv_obj_set_style_x(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0b0:	b508      	push	{r3, lr}
 801d0b2:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_X, v, selector);
 801d0b4:	460a      	mov	r2, r1
 801d0b6:	2107      	movs	r1, #7
 801d0b8:	f7ff fd86 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0bc:	bd08      	pop	{r3, pc}

0801d0be <lv_obj_set_style_y>:

void lv_obj_set_style_y(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0be:	b508      	push	{r3, lr}
 801d0c0:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_Y, v, selector);
 801d0c2:	460a      	mov	r2, r1
 801d0c4:	2108      	movs	r1, #8
 801d0c6:	f7ff fd7f 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0ca:	bd08      	pop	{r3, pc}

0801d0cc <lv_obj_set_style_align>:

void lv_obj_set_style_align(struct _lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
{
 801d0cc:	b508      	push	{r3, lr}
 801d0ce:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ALIGN, v, selector);
 801d0d0:	460a      	mov	r2, r1
 801d0d2:	2109      	movs	r1, #9
 801d0d4:	f7ff fd78 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0d8:	bd08      	pop	{r3, pc}

0801d0da <lv_obj_set_style_pad_top>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TRANSFORM_PIVOT_Y, v, selector);
}

void lv_obj_set_style_pad_top(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0da:	b508      	push	{r3, lr}
 801d0dc:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_TOP, v, selector);
 801d0de:	460a      	mov	r2, r1
 801d0e0:	2110      	movs	r1, #16
 801d0e2:	f7ff fd71 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0e6:	bd08      	pop	{r3, pc}

0801d0e8 <lv_obj_set_style_pad_bottom>:

void lv_obj_set_style_pad_bottom(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0e8:	b508      	push	{r3, lr}
 801d0ea:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_BOTTOM, v, selector);
 801d0ec:	460a      	mov	r2, r1
 801d0ee:	2111      	movs	r1, #17
 801d0f0:	f7ff fd6a 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d0f4:	bd08      	pop	{r3, pc}

0801d0f6 <lv_obj_set_style_pad_left>:

void lv_obj_set_style_pad_left(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d0f6:	b508      	push	{r3, lr}
 801d0f8:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_LEFT, v, selector);
 801d0fa:	460a      	mov	r2, r1
 801d0fc:	2112      	movs	r1, #18
 801d0fe:	f7ff fd63 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d102:	bd08      	pop	{r3, pc}

0801d104 <lv_obj_set_style_pad_right>:

void lv_obj_set_style_pad_right(struct _lv_obj_t * obj, lv_coord_t value, lv_style_selector_t selector)
{
 801d104:	b508      	push	{r3, lr}
 801d106:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_RIGHT, v, selector);
 801d108:	460a      	mov	r2, r1
 801d10a:	2113      	movs	r1, #19
 801d10c:	f7ff fd5c 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d110:	bd08      	pop	{r3, pc}

0801d112 <lv_obj_set_style_bg_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_PAD_COLUMN, v, selector);
}

void lv_obj_set_style_bg_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 801d112:	b508      	push	{r3, lr}
 801d114:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_COLOR, v, selector);
 801d116:	b28a      	uxth	r2, r1
 801d118:	2120      	movs	r1, #32
 801d11a:	f7ff fd55 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d11e:	bd08      	pop	{r3, pc}

0801d120 <lv_obj_set_style_bg_opa>:

void lv_obj_set_style_bg_opa(struct _lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
{
 801d120:	b508      	push	{r3, lr}
 801d122:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_OPA, v, selector);
 801d124:	460a      	mov	r2, r1
 801d126:	2121      	movs	r1, #33	@ 0x21
 801d128:	f7ff fd4e 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d12c:	bd08      	pop	{r3, pc}

0801d12e <lv_obj_set_style_bg_img_src>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_DITHER_MODE, v, selector);
}

void lv_obj_set_style_bg_img_src(struct _lv_obj_t * obj, const void * value, lv_style_selector_t selector)
{
 801d12e:	b508      	push	{r3, lr}
 801d130:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .ptr = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BG_IMG_SRC, v, selector);
 801d132:	460a      	mov	r2, r1
 801d134:	2128      	movs	r1, #40	@ 0x28
 801d136:	f7ff fd47 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d13a:	bd08      	pop	{r3, pc}

0801d13c <lv_obj_set_style_text_color>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_ARC_IMG_SRC, v, selector);
}

void lv_obj_set_style_text_color(struct _lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
{
 801d13c:	b508      	push	{r3, lr}
 801d13e:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .color = value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_COLOR, v, selector);
 801d140:	b28a      	uxth	r2, r1
 801d142:	2155      	movs	r1, #85	@ 0x55
 801d144:	f7ff fd40 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d148:	bd08      	pop	{r3, pc}

0801d14a <lv_obj_set_style_text_align>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_DECOR, v, selector);
}

void lv_obj_set_style_text_align(struct _lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
{
 801d14a:	b508      	push	{r3, lr}
 801d14c:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_TEXT_ALIGN, v, selector);
 801d14e:	460a      	mov	r2, r1
 801d150:	215b      	movs	r1, #91	@ 0x5b
 801d152:	f7ff fd39 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d156:	bd08      	pop	{r3, pc}

0801d158 <lv_obj_set_style_layout>:
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BLEND_MODE, v, selector);
}

void lv_obj_set_style_layout(struct _lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
{
 801d158:	b508      	push	{r3, lr}
 801d15a:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_LAYOUT, v, selector);
 801d15c:	460a      	mov	r2, r1
 801d15e:	210a      	movs	r1, #10
 801d160:	f7ff fd32 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d164:	bd08      	pop	{r3, pc}

0801d166 <lv_obj_set_style_base_dir>:

void lv_obj_set_style_base_dir(struct _lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
{
 801d166:	b508      	push	{r3, lr}
 801d168:	4613      	mov	r3, r2
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_obj_set_local_style_prop(obj, LV_STYLE_BASE_DIR, v, selector);
 801d16a:	460a      	mov	r2, r1
 801d16c:	2116      	movs	r1, #22
 801d16e:	f7ff fd2b 	bl	801cbc8 <lv_obj_set_local_style_prop>
}
 801d172:	bd08      	pop	{r3, pc}

0801d174 <lv_obj_get_parent>:
    return NULL;
}

lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
    if(obj == NULL) return NULL;
 801d174:	b108      	cbz	r0, 801d17a <lv_obj_get_parent+0x6>
    LV_ASSERT_OBJ(obj, MY_CLASS);

    return obj->parent;
 801d176:	6840      	ldr	r0, [r0, #4]
 801d178:	4770      	bx	lr
}
 801d17a:	4770      	bx	lr

0801d17c <lv_obj_get_screen>:
{
 801d17c:	b510      	push	{r4, lr}
        par = lv_obj_get_parent(act_par);
 801d17e:	4604      	mov	r4, r0
 801d180:	f7ff fff8 	bl	801d174 <lv_obj_get_parent>
    } while(par != NULL);
 801d184:	2800      	cmp	r0, #0
 801d186:	d1fa      	bne.n	801d17e <lv_obj_get_screen+0x2>
}
 801d188:	4620      	mov	r0, r4
 801d18a:	bd10      	pop	{r4, pc}

0801d18c <lv_obj_get_disp>:
{
 801d18c:	b510      	push	{r4, lr}
 801d18e:	4604      	mov	r4, r0
    if(obj->parent == NULL) scr = obj;  /*`obj` is a screen*/
 801d190:	6843      	ldr	r3, [r0, #4]
 801d192:	b113      	cbz	r3, 801d19a <lv_obj_get_disp+0xe>
    else scr = lv_obj_get_screen(obj);  /*get the screen of `obj`*/
 801d194:	f7ff fff2 	bl	801d17c <lv_obj_get_screen>
 801d198:	4604      	mov	r4, r0
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 801d19a:	480a      	ldr	r0, [pc, #40]	@ (801d1c4 <lv_obj_get_disp+0x38>)
 801d19c:	f7f9 f9e1 	bl	8016562 <_lv_ll_get_head>
 801d1a0:	b150      	cbz	r0, 801d1b8 <lv_obj_get_disp+0x2c>
        for(i = 0; i < d->screen_cnt; i++) {
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	e000      	b.n	801d1a8 <lv_obj_get_disp+0x1c>
 801d1a6:	3301      	adds	r3, #1
 801d1a8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 801d1aa:	429a      	cmp	r2, r3
 801d1ac:	d905      	bls.n	801d1ba <lv_obj_get_disp+0x2e>
            if(d->screens[i] == scr) return d;
 801d1ae:	68c2      	ldr	r2, [r0, #12]
 801d1b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801d1b4:	42a2      	cmp	r2, r4
 801d1b6:	d1f6      	bne.n	801d1a6 <lv_obj_get_disp+0x1a>
}
 801d1b8:	bd10      	pop	{r4, pc}
    _LV_LL_READ(&LV_GC_ROOT(_lv_disp_ll), d) {
 801d1ba:	4601      	mov	r1, r0
 801d1bc:	4801      	ldr	r0, [pc, #4]	@ (801d1c4 <lv_obj_get_disp+0x38>)
 801d1be:	f7f9 f9d8 	bl	8016572 <_lv_ll_get_next>
 801d1c2:	e7ed      	b.n	801d1a0 <lv_obj_get_disp+0x14>
 801d1c4:	20006860 	.word	0x20006860

0801d1c8 <lv_obj_get_child>:

lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t id)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);

    if(obj->spec_attr == NULL) return NULL;
 801d1c8:	6880      	ldr	r0, [r0, #8]
 801d1ca:	b188      	cbz	r0, 801d1f0 <lv_obj_get_child+0x28>

    uint32_t idu;
    if(id < 0) {
 801d1cc:	2900      	cmp	r1, #0
 801d1ce:	db07      	blt.n	801d1e0 <lv_obj_get_child+0x18>
        id = obj->spec_attr->child_cnt + id;
        if(id < 0) return NULL;
        idu = (uint32_t) id;
    }
    else {
        idu = id;
 801d1d0:	460b      	mov	r3, r1
    }

    if(idu >= obj->spec_attr->child_cnt) return NULL;
 801d1d2:	6842      	ldr	r2, [r0, #4]
 801d1d4:	429a      	cmp	r2, r3
 801d1d6:	d90a      	bls.n	801d1ee <lv_obj_get_child+0x26>
    else return obj->spec_attr->children[id];
 801d1d8:	6803      	ldr	r3, [r0, #0]
 801d1da:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801d1de:	4770      	bx	lr
        id = obj->spec_attr->child_cnt + id;
 801d1e0:	6843      	ldr	r3, [r0, #4]
 801d1e2:	4419      	add	r1, r3
 801d1e4:	460b      	mov	r3, r1
        if(id < 0) return NULL;
 801d1e6:	2900      	cmp	r1, #0
 801d1e8:	daf3      	bge.n	801d1d2 <lv_obj_get_child+0xa>
 801d1ea:	2000      	movs	r0, #0
 801d1ec:	4770      	bx	lr
    if(idu >= obj->spec_attr->child_cnt) return NULL;
 801d1ee:	2000      	movs	r0, #0
}
 801d1f0:	4770      	bx	lr

0801d1f2 <lv_obj_get_child_cnt>:

uint32_t lv_obj_get_child_cnt(const lv_obj_t * obj)
{
    LV_ASSERT_OBJ(obj, MY_CLASS);
    if(obj->spec_attr == NULL) return 0;
 801d1f2:	6883      	ldr	r3, [r0, #8]
 801d1f4:	b10b      	cbz	r3, 801d1fa <lv_obj_get_child_cnt+0x8>
    return obj->spec_attr->child_cnt;
 801d1f6:	6858      	ldr	r0, [r3, #4]
 801d1f8:	4770      	bx	lr
    if(obj->spec_attr == NULL) return 0;
 801d1fa:	2000      	movs	r0, #0
}
 801d1fc:	4770      	bx	lr

0801d1fe <lv_obj_get_index>:

uint32_t lv_obj_get_index(const lv_obj_t * obj)
{
 801d1fe:	b570      	push	{r4, r5, r6, lr}
 801d200:	4606      	mov	r6, r0
    LV_ASSERT_OBJ(obj, MY_CLASS);

    lv_obj_t * parent = lv_obj_get_parent(obj);
 801d202:	f7ff ffb7 	bl	801d174 <lv_obj_get_parent>
    if(parent == NULL) return 0;
 801d206:	b190      	cbz	r0, 801d22e <lv_obj_get_index+0x30>
 801d208:	4605      	mov	r5, r0

    uint32_t i = 0;
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801d20a:	2400      	movs	r4, #0
 801d20c:	4628      	mov	r0, r5
 801d20e:	f7ff fff0 	bl	801d1f2 <lv_obj_get_child_cnt>
 801d212:	42a0      	cmp	r0, r4
 801d214:	d907      	bls.n	801d226 <lv_obj_get_index+0x28>
        if(lv_obj_get_child(parent, i) == obj) return i;
 801d216:	4621      	mov	r1, r4
 801d218:	4628      	mov	r0, r5
 801d21a:	f7ff ffd5 	bl	801d1c8 <lv_obj_get_child>
 801d21e:	4286      	cmp	r6, r0
 801d220:	d003      	beq.n	801d22a <lv_obj_get_index+0x2c>
    for(i = 0; i < lv_obj_get_child_cnt(parent); i++) {
 801d222:	3401      	adds	r4, #1
 801d224:	e7f2      	b.n	801d20c <lv_obj_get_index+0xe>
    }

    return 0xFFFFFFFF; /*Shouldn't happen*/
 801d226:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
}
 801d22a:	4620      	mov	r0, r4
 801d22c:	bd70      	pop	{r4, r5, r6, pc}
    if(parent == NULL) return 0;
 801d22e:	2400      	movs	r4, #0
 801d230:	e7fb      	b.n	801d22a <lv_obj_get_index+0x2c>

0801d232 <obj_del_core>:

    lv_obj_del(obj);
}

static void obj_del_core(lv_obj_t * obj)
{
 801d232:	b570      	push	{r4, r5, r6, lr}
 801d234:	4605      	mov	r5, r0
    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_res_t res = lv_event_send(obj, LV_EVENT_DELETE, NULL);
 801d236:	2200      	movs	r2, #0
 801d238:	2121      	movs	r1, #33	@ 0x21
 801d23a:	f7f3 fd45 	bl	8010cc8 <lv_event_send>
    if(res == LV_RES_INV) return;
 801d23e:	2800      	cmp	r0, #0
 801d240:	d07f      	beq.n	801d342 <obj_del_core+0x110>

    obj->being_deleted = 1;
 801d242:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801d246:	f043 0310 	orr.w	r3, r3, #16
 801d24a:	f885 3023 	strb.w	r3, [r5, #35]	@ 0x23

    /*Recursively delete the children*/
    lv_obj_t * child = lv_obj_get_child(obj, 0);
 801d24e:	2100      	movs	r1, #0
 801d250:	4628      	mov	r0, r5
 801d252:	f7ff ffb9 	bl	801d1c8 <lv_obj_get_child>
    while(child) {
 801d256:	b130      	cbz	r0, 801d266 <obj_del_core+0x34>
        obj_del_core(child);
 801d258:	f7ff ffeb 	bl	801d232 <obj_del_core>
        child = lv_obj_get_child(obj, 0);
 801d25c:	2100      	movs	r1, #0
 801d25e:	4628      	mov	r0, r5
 801d260:	f7ff ffb2 	bl	801d1c8 <lv_obj_get_child>
 801d264:	e7f7      	b.n	801d256 <obj_del_core+0x24>
    }

    lv_group_t * group = lv_obj_get_group(obj);
 801d266:	4628      	mov	r0, r5
 801d268:	f7fb f925 	bl	80184b6 <lv_obj_get_group>
 801d26c:	4606      	mov	r6, r0

    /*Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 801d26e:	2000      	movs	r0, #0
 801d270:	f7f6 f862 	bl	8013338 <lv_indev_get_next>
 801d274:	4604      	mov	r4, r0
    while(indev) {
 801d276:	e00d      	b.n	801d294 <obj_del_core+0x62>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
            lv_indev_reset(indev, obj);
 801d278:	4629      	mov	r1, r5
 801d27a:	4620      	mov	r0, r4
 801d27c:	f7f7 fa84 	bl	8014788 <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 801d280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d282:	42ab      	cmp	r3, r5
 801d284:	d00e      	beq.n	801d2a4 <obj_del_core+0x72>
            indev->proc.types.pointer.last_pressed = NULL;
        }

        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801d286:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801d288:	42b3      	cmp	r3, r6
 801d28a:	d00e      	beq.n	801d2aa <obj_del_core+0x78>
            lv_indev_reset(indev, obj);
        }
        indev = lv_indev_get_next(indev);
 801d28c:	4620      	mov	r0, r4
 801d28e:	f7f6 f853 	bl	8013338 <lv_indev_get_next>
 801d292:	4604      	mov	r4, r0
    while(indev) {
 801d294:	b194      	cbz	r4, 801d2bc <obj_del_core+0x8a>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 801d296:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801d298:	42ab      	cmp	r3, r5
 801d29a:	d0ed      	beq.n	801d278 <obj_del_core+0x46>
 801d29c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801d29e:	42ab      	cmp	r3, r5
 801d2a0:	d1ee      	bne.n	801d280 <obj_del_core+0x4e>
 801d2a2:	e7e9      	b.n	801d278 <obj_del_core+0x46>
            indev->proc.types.pointer.last_pressed = NULL;
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	6363      	str	r3, [r4, #52]	@ 0x34
 801d2a8:	e7ed      	b.n	801d286 <obj_del_core+0x54>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 801d2aa:	f7f7 fb27 	bl	80148fc <lv_indev_get_obj_act>
 801d2ae:	4285      	cmp	r5, r0
 801d2b0:	d1ec      	bne.n	801d28c <obj_del_core+0x5a>
            lv_indev_reset(indev, obj);
 801d2b2:	4629      	mov	r1, r5
 801d2b4:	4620      	mov	r0, r4
 801d2b6:	f7f7 fa67 	bl	8014788 <lv_indev_reset>
 801d2ba:	e7e7      	b.n	801d28c <obj_del_core+0x5a>
    }

    /*All children deleted. Now clean up the object specific data*/
    _lv_obj_destruct(obj);
 801d2bc:	4628      	mov	r0, r5
 801d2be:	f7fb fc1b 	bl	8018af8 <_lv_obj_destruct>

    /*Remove the screen for the screen list*/
    if(obj->parent == NULL) {
 801d2c2:	686b      	ldr	r3, [r5, #4]
 801d2c4:	b183      	cbz	r3, 801d2e8 <obj_del_core+0xb6>
        disp->screen_cnt--;
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
    }
    /*Remove the object from the child list of its parent*/
    else {
        uint32_t id = lv_obj_get_index(obj);
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	f7ff ff99 	bl	801d1fe <lv_obj_get_index>
        uint32_t i;
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801d2cc:	686b      	ldr	r3, [r5, #4]
 801d2ce:	689a      	ldr	r2, [r3, #8]
 801d2d0:	6853      	ldr	r3, [r2, #4]
 801d2d2:	3b01      	subs	r3, #1
 801d2d4:	4283      	cmp	r3, r0
 801d2d6:	d928      	bls.n	801d32a <obj_del_core+0xf8>
            obj->parent->spec_attr->children[i] = obj->parent->spec_attr->children[i + 1];
 801d2d8:	6812      	ldr	r2, [r2, #0]
 801d2da:	1c43      	adds	r3, r0, #1
 801d2dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d2e0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        for(i = id; i < obj->parent->spec_attr->child_cnt - 1; i++) {
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	e7f1      	b.n	801d2cc <obj_del_core+0x9a>
        lv_disp_t * disp = lv_obj_get_disp(obj);
 801d2e8:	4628      	mov	r0, r5
 801d2ea:	f7ff ff4f 	bl	801d18c <lv_obj_get_disp>
 801d2ee:	4604      	mov	r4, r0
        for(i = 0; i < disp->screen_cnt; i++) {
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	d90d      	bls.n	801d314 <obj_del_core+0xe2>
            if(disp->screens[i] == obj) break;
 801d2f8:	68e2      	ldr	r2, [r4, #12]
 801d2fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801d2fe:	42aa      	cmp	r2, r5
 801d300:	d008      	beq.n	801d314 <obj_del_core+0xe2>
        for(i = 0; i < disp->screen_cnt; i++) {
 801d302:	3301      	adds	r3, #1
 801d304:	e7f5      	b.n	801d2f2 <obj_del_core+0xc0>
            disp->screens[i] = disp->screens[i + 1];
 801d306:	68e1      	ldr	r1, [r4, #12]
 801d308:	1c5a      	adds	r2, r3, #1
 801d30a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d30e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        for(i = id; i < disp->screen_cnt - 1; i++) {
 801d312:	4613      	mov	r3, r2
 801d314:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801d316:	3901      	subs	r1, #1
 801d318:	4299      	cmp	r1, r3
 801d31a:	d8f4      	bhi.n	801d306 <obj_del_core+0xd4>
        disp->screen_cnt--;
 801d31c:	6261      	str	r1, [r4, #36]	@ 0x24
        disp->screens = lv_mem_realloc(disp->screens, disp->screen_cnt * sizeof(lv_obj_t *));
 801d31e:	0089      	lsls	r1, r1, #2
 801d320:	68e0      	ldr	r0, [r4, #12]
 801d322:	f7f9 fb33 	bl	801698c <lv_mem_realloc>
 801d326:	60e0      	str	r0, [r4, #12]
 801d328:	e008      	b.n	801d33c <obj_del_core+0x10a>
        }
        obj->parent->spec_attr->child_cnt--;
 801d32a:	6053      	str	r3, [r2, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 801d32c:	686b      	ldr	r3, [r5, #4]
 801d32e:	689c      	ldr	r4, [r3, #8]
                                                          obj->parent->spec_attr->child_cnt * sizeof(lv_obj_t *));
 801d330:	6861      	ldr	r1, [r4, #4]
        obj->parent->spec_attr->children = lv_mem_realloc(obj->parent->spec_attr->children,
 801d332:	0089      	lsls	r1, r1, #2
 801d334:	6820      	ldr	r0, [r4, #0]
 801d336:	f7f9 fb29 	bl	801698c <lv_mem_realloc>
 801d33a:	6020      	str	r0, [r4, #0]
    }

    /*Free the object itself*/
    lv_mem_free(obj);
 801d33c:	4628      	mov	r0, r5
 801d33e:	f7f9 fb09 	bl	8016954 <lv_mem_free>
}
 801d342:	bd70      	pop	{r4, r5, r6, pc}

0801d344 <lv_obj_del>:
{
 801d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d346:	4604      	mov	r4, r0
    lv_obj_invalidate(obj);
 801d348:	f7fc fdad 	bl	8019ea6 <lv_obj_invalidate>
    lv_obj_t * par = lv_obj_get_parent(obj);
 801d34c:	4620      	mov	r0, r4
 801d34e:	f7ff ff11 	bl	801d174 <lv_obj_get_parent>
    if(par == NULL) {
 801d352:	4605      	mov	r5, r0
 801d354:	b1b0      	cbz	r0, 801d384 <lv_obj_del+0x40>
    bool act_scr_del = false;
 801d356:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
 801d358:	4637      	mov	r7, r6
    obj_del_core(obj);
 801d35a:	4620      	mov	r0, r4
 801d35c:	f7ff ff69 	bl	801d232 <obj_del_core>
    if(par) {
 801d360:	b165      	cbz	r5, 801d37c <lv_obj_del+0x38>
        lv_obj_scrollbar_invalidate(par);
 801d362:	4628      	mov	r0, r5
 801d364:	f7fe fe04 	bl	801bf70 <lv_obj_scrollbar_invalidate>
        lv_event_send(par, LV_EVENT_CHILD_CHANGED, NULL);
 801d368:	2200      	movs	r2, #0
 801d36a:	2122      	movs	r1, #34	@ 0x22
 801d36c:	4628      	mov	r0, r5
 801d36e:	f7f3 fcab 	bl	8010cc8 <lv_event_send>
        lv_event_send(par, LV_EVENT_CHILD_DELETED, NULL);
 801d372:	2200      	movs	r2, #0
 801d374:	2124      	movs	r1, #36	@ 0x24
 801d376:	4628      	mov	r0, r5
 801d378:	f7f3 fca6 	bl	8010cc8 <lv_event_send>
    if(act_scr_del) {
 801d37c:	b10e      	cbz	r6, 801d382 <lv_obj_del+0x3e>
        disp->act_scr = NULL;
 801d37e:	2300      	movs	r3, #0
 801d380:	613b      	str	r3, [r7, #16]
}
 801d382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
 801d384:	4620      	mov	r0, r4
 801d386:	f7ff ff01 	bl	801d18c <lv_obj_get_disp>
        if(!disp) return;   /*Shouldn't happen*/
 801d38a:	4607      	mov	r7, r0
 801d38c:	2800      	cmp	r0, #0
 801d38e:	d0f8      	beq.n	801d382 <lv_obj_del+0x3e>
        if(disp->act_scr == obj) act_scr_del = true;
 801d390:	6903      	ldr	r3, [r0, #16]
 801d392:	42a3      	cmp	r3, r4
 801d394:	d001      	beq.n	801d39a <lv_obj_del+0x56>
    bool act_scr_del = false;
 801d396:	2600      	movs	r6, #0
 801d398:	e7df      	b.n	801d35a <lv_obj_del+0x16>
        if(disp->act_scr == obj) act_scr_del = true;
 801d39a:	2601      	movs	r6, #1
 801d39c:	e7dd      	b.n	801d35a <lv_obj_del+0x16>

0801d39e <lv_obj_set_parent>:
{
 801d39e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(obj->parent == NULL) {
 801d3a0:	6843      	ldr	r3, [r0, #4]
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d05c      	beq.n	801d460 <lv_obj_set_parent+0xc2>
 801d3a6:	4606      	mov	r6, r0
 801d3a8:	460f      	mov	r7, r1
    if(parent == NULL) {
 801d3aa:	2900      	cmp	r1, #0
 801d3ac:	d058      	beq.n	801d460 <lv_obj_set_parent+0xc2>
    lv_obj_invalidate(obj);
 801d3ae:	f7fc fd7a 	bl	8019ea6 <lv_obj_invalidate>
    lv_obj_allocate_spec_attr(parent);
 801d3b2:	4638      	mov	r0, r7
 801d3b4:	f7fb faec 	bl	8018990 <lv_obj_allocate_spec_attr>
    lv_obj_t * old_parent = obj->parent;
 801d3b8:	6875      	ldr	r5, [r6, #4]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801d3ba:	4630      	mov	r0, r6
 801d3bc:	f7ff ff1f 	bl	801d1fe <lv_obj_get_index>
 801d3c0:	4604      	mov	r4, r0
 801d3c2:	e007      	b.n	801d3d4 <lv_obj_set_parent+0x36>
        old_parent->spec_attr->children[i] = old_parent->spec_attr->children[i + 1];
 801d3c4:	68ab      	ldr	r3, [r5, #8]
 801d3c6:	681a      	ldr	r2, [r3, #0]
 801d3c8:	1c63      	adds	r3, r4, #1
 801d3ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d3ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
    for(i = lv_obj_get_index(obj); i <= (int32_t)lv_obj_get_child_cnt(old_parent) - 2; i++) {
 801d3d2:	461c      	mov	r4, r3
 801d3d4:	4628      	mov	r0, r5
 801d3d6:	f7ff ff0c 	bl	801d1f2 <lv_obj_get_child_cnt>
 801d3da:	3801      	subs	r0, #1
 801d3dc:	42a0      	cmp	r0, r4
 801d3de:	dcf1      	bgt.n	801d3c4 <lv_obj_set_parent+0x26>
    old_parent->spec_attr->child_cnt--;
 801d3e0:	68aa      	ldr	r2, [r5, #8]
 801d3e2:	6853      	ldr	r3, [r2, #4]
 801d3e4:	3b01      	subs	r3, #1
 801d3e6:	6053      	str	r3, [r2, #4]
    if(old_parent->spec_attr->child_cnt) {
 801d3e8:	68ac      	ldr	r4, [r5, #8]
 801d3ea:	6861      	ldr	r1, [r4, #4]
 801d3ec:	2900      	cmp	r1, #0
 801d3ee:	d038      	beq.n	801d462 <lv_obj_set_parent+0xc4>
        old_parent->spec_attr->children = lv_mem_realloc(old_parent->spec_attr->children,
 801d3f0:	0089      	lsls	r1, r1, #2
 801d3f2:	6820      	ldr	r0, [r4, #0]
 801d3f4:	f7f9 faca 	bl	801698c <lv_mem_realloc>
 801d3f8:	6020      	str	r0, [r4, #0]
    parent->spec_attr->child_cnt++;
 801d3fa:	68ba      	ldr	r2, [r7, #8]
 801d3fc:	6853      	ldr	r3, [r2, #4]
 801d3fe:	3301      	adds	r3, #1
 801d400:	6053      	str	r3, [r2, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 801d402:	68bc      	ldr	r4, [r7, #8]
                                                 parent->spec_attr->child_cnt * (sizeof(lv_obj_t *)));
 801d404:	6861      	ldr	r1, [r4, #4]
    parent->spec_attr->children = lv_mem_realloc(parent->spec_attr->children,
 801d406:	0089      	lsls	r1, r1, #2
 801d408:	6820      	ldr	r0, [r4, #0]
 801d40a:	f7f9 fabf 	bl	801698c <lv_mem_realloc>
 801d40e:	6020      	str	r0, [r4, #0]
    parent->spec_attr->children[lv_obj_get_child_cnt(parent) - 1] = obj;
 801d410:	68bb      	ldr	r3, [r7, #8]
 801d412:	681c      	ldr	r4, [r3, #0]
 801d414:	4638      	mov	r0, r7
 801d416:	f7ff feec 	bl	801d1f2 <lv_obj_get_child_cnt>
 801d41a:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
 801d41e:	3801      	subs	r0, #1
 801d420:	f844 6020 	str.w	r6, [r4, r0, lsl #2]
    obj->parent = parent;
 801d424:	6077      	str	r7, [r6, #4]
    lv_obj_scrollbar_invalidate(old_parent);
 801d426:	4628      	mov	r0, r5
 801d428:	f7fe fda2 	bl	801bf70 <lv_obj_scrollbar_invalidate>
    lv_event_send(old_parent, LV_EVENT_CHILD_CHANGED, obj);
 801d42c:	4632      	mov	r2, r6
 801d42e:	2122      	movs	r1, #34	@ 0x22
 801d430:	4628      	mov	r0, r5
 801d432:	f7f3 fc49 	bl	8010cc8 <lv_event_send>
    lv_event_send(old_parent, LV_EVENT_CHILD_DELETED, NULL);
 801d436:	2200      	movs	r2, #0
 801d438:	2124      	movs	r1, #36	@ 0x24
 801d43a:	4628      	mov	r0, r5
 801d43c:	f7f3 fc44 	bl	8010cc8 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, obj);
 801d440:	4632      	mov	r2, r6
 801d442:	2122      	movs	r1, #34	@ 0x22
 801d444:	4638      	mov	r0, r7
 801d446:	f7f3 fc3f 	bl	8010cc8 <lv_event_send>
    lv_event_send(parent, LV_EVENT_CHILD_CREATED, NULL);
 801d44a:	2200      	movs	r2, #0
 801d44c:	2123      	movs	r1, #35	@ 0x23
 801d44e:	4638      	mov	r0, r7
 801d450:	f7f3 fc3a 	bl	8010cc8 <lv_event_send>
    lv_obj_mark_layout_as_dirty(obj);
 801d454:	4630      	mov	r0, r6
 801d456:	f7fc f899 	bl	801958c <lv_obj_mark_layout_as_dirty>
    lv_obj_invalidate(obj);
 801d45a:	4630      	mov	r0, r6
 801d45c:	f7fc fd23 	bl	8019ea6 <lv_obj_invalidate>
}
 801d460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_mem_free(old_parent->spec_attr->children);
 801d462:	6820      	ldr	r0, [r4, #0]
 801d464:	f7f9 fa76 	bl	8016954 <lv_mem_free>
        old_parent->spec_attr->children = NULL;
 801d468:	68ab      	ldr	r3, [r5, #8]
 801d46a:	2200      	movs	r2, #0
 801d46c:	601a      	str	r2, [r3, #0]
 801d46e:	e7c4      	b.n	801d3fa <lv_obj_set_parent+0x5c>

0801d470 <lv_obj_move_to_index>:
{
 801d470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d472:	4607      	mov	r7, r0
    if(index < 0) {
 801d474:	1e0d      	subs	r5, r1, #0
 801d476:	db11      	blt.n	801d49c <lv_obj_move_to_index+0x2c>
    const int32_t old_index = lv_obj_get_index(obj);
 801d478:	4638      	mov	r0, r7
 801d47a:	f7ff fec0 	bl	801d1fe <lv_obj_get_index>
 801d47e:	4604      	mov	r4, r0
    lv_obj_t * parent = lv_obj_get_parent(obj);
 801d480:	4638      	mov	r0, r7
 801d482:	f7ff fe77 	bl	801d174 <lv_obj_get_parent>
 801d486:	4606      	mov	r6, r0
    if(index < 0) return;
 801d488:	2d00      	cmp	r5, #0
 801d48a:	db25      	blt.n	801d4d8 <lv_obj_move_to_index+0x68>
    if(index >= (int32_t) lv_obj_get_child_cnt(parent)) return;
 801d48c:	f7ff feb1 	bl	801d1f2 <lv_obj_get_child_cnt>
 801d490:	42a8      	cmp	r0, r5
 801d492:	dd21      	ble.n	801d4d8 <lv_obj_move_to_index+0x68>
    if(index == old_index) return;
 801d494:	42a5      	cmp	r5, r4
 801d496:	d01f      	beq.n	801d4d8 <lv_obj_move_to_index+0x68>
    if(index < old_index) {
 801d498:	db10      	blt.n	801d4bc <lv_obj_move_to_index+0x4c>
 801d49a:	e026      	b.n	801d4ea <lv_obj_move_to_index+0x7a>
        index = lv_obj_get_child_cnt(lv_obj_get_parent(obj)) + index;
 801d49c:	f7ff fe6a 	bl	801d174 <lv_obj_get_parent>
 801d4a0:	f7ff fea7 	bl	801d1f2 <lv_obj_get_child_cnt>
 801d4a4:	4405      	add	r5, r0
 801d4a6:	e7e7      	b.n	801d478 <lv_obj_move_to_index+0x8>
            parent->spec_attr->children[i] = parent->spec_attr->children[i - 1];
 801d4a8:	68b3      	ldr	r3, [r6, #8]
 801d4aa:	681a      	ldr	r2, [r3, #0]
 801d4ac:	f104 4380 	add.w	r3, r4, #1073741824	@ 0x40000000
 801d4b0:	3b01      	subs	r3, #1
 801d4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d4b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
            i--;
 801d4ba:	3c01      	subs	r4, #1
        while(i > index)  {
 801d4bc:	42a5      	cmp	r5, r4
 801d4be:	dbf3      	blt.n	801d4a8 <lv_obj_move_to_index+0x38>
    parent->spec_attr->children[index] = obj;
 801d4c0:	68b3      	ldr	r3, [r6, #8]
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
    lv_event_send(parent, LV_EVENT_CHILD_CHANGED, NULL);
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	2122      	movs	r1, #34	@ 0x22
 801d4cc:	4630      	mov	r0, r6
 801d4ce:	f7f3 fbfb 	bl	8010cc8 <lv_event_send>
    lv_obj_invalidate(parent);
 801d4d2:	4630      	mov	r0, r6
 801d4d4:	f7fc fce7 	bl	8019ea6 <lv_obj_invalidate>
}
 801d4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            parent->spec_attr->children[i] = parent->spec_attr->children[i + 1];
 801d4da:	68b3      	ldr	r3, [r6, #8]
 801d4dc:	681a      	ldr	r2, [r3, #0]
 801d4de:	1c63      	adds	r3, r4, #1
 801d4e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801d4e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
            i++;
 801d4e8:	461c      	mov	r4, r3
        while(i < index) {
 801d4ea:	42a5      	cmp	r5, r4
 801d4ec:	dcf5      	bgt.n	801d4da <lv_obj_move_to_index+0x6a>
 801d4ee:	e7e7      	b.n	801d4c0 <lv_obj_move_to_index+0x50>

0801d4f0 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void * buffer, size_t idx, size_t maxlen)
{
    if(idx < maxlen) {
 801d4f0:	429a      	cmp	r2, r3
 801d4f2:	d200      	bcs.n	801d4f6 <_out_buffer+0x6>
        ((char *)buffer)[idx] = character;
 801d4f4:	5488      	strb	r0, [r1, r2]
    }
}
 801d4f6:	4770      	bx	lr

0801d4f8 <_out_null>:
{
    LV_UNUSED(character);
    LV_UNUSED(buffer);
    LV_UNUSED(idx);
    LV_UNUSED(maxlen);
}
 801d4f8:	4770      	bx	lr

0801d4fa <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char ** str)
{
 801d4fa:	4601      	mov	r1, r0
    unsigned int i = 0U;
 801d4fc:	2000      	movs	r0, #0
    while(_is_digit(**str)) {
 801d4fe:	e008      	b.n	801d512 <_atoi+0x18>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
 801d500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801d504:	1c53      	adds	r3, r2, #1
 801d506:	600b      	str	r3, [r1, #0]
 801d508:	7813      	ldrb	r3, [r2, #0]
 801d50a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801d50e:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
    while(_is_digit(**str)) {
 801d512:	680a      	ldr	r2, [r1, #0]
 801d514:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 801d516:	3b30      	subs	r3, #48	@ 0x30
 801d518:	b2db      	uxtb	r3, r3
    while(_is_digit(**str)) {
 801d51a:	2b09      	cmp	r3, #9
 801d51c:	d9f0      	bls.n	801d500 <_atoi+0x6>
    }
    return i;
}
 801d51e:	4770      	bx	lr

0801d520 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char * buffer, size_t idx, size_t maxlen, const char * buf, size_t len,
                       unsigned int width, unsigned int flags)
{
 801d520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d524:	b083      	sub	sp, #12
 801d526:	4605      	mov	r5, r0
 801d528:	460e      	mov	r6, r1
 801d52a:	4693      	mov	fp, r2
 801d52c:	461f      	mov	r7, r3
 801d52e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d532:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d534:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
    const size_t start_idx = idx;

    // pad spaces up to given width
    if(!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 801d538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d53a:	f013 0f03 	tst.w	r3, #3
 801d53e:	d119      	bne.n	801d574 <_out_rev+0x54>
        size_t i;
        for(i = len; i < width; i++) {
 801d540:	46a0      	mov	r8, r4
 801d542:	9201      	str	r2, [sp, #4]
 801d544:	45c8      	cmp	r8, r9
 801d546:	d209      	bcs.n	801d55c <_out_rev+0x3c>
            out(' ', buffer, idx++, maxlen);
 801d548:	f102 0b01 	add.w	fp, r2, #1
 801d54c:	463b      	mov	r3, r7
 801d54e:	4631      	mov	r1, r6
 801d550:	2020      	movs	r0, #32
 801d552:	47a8      	blx	r5
        for(i = len; i < width; i++) {
 801d554:	f108 0801 	add.w	r8, r8, #1
            out(' ', buffer, idx++, maxlen);
 801d558:	465a      	mov	r2, fp
 801d55a:	e7f3      	b.n	801d544 <_out_rev+0x24>
 801d55c:	f8dd b004 	ldr.w	fp, [sp, #4]
 801d560:	e008      	b.n	801d574 <_out_rev+0x54>
        }
    }

    // reverse string
    while(len) {
        out(buf[--len], buffer, idx++, maxlen);
 801d562:	3c01      	subs	r4, #1
 801d564:	f102 0801 	add.w	r8, r2, #1
 801d568:	463b      	mov	r3, r7
 801d56a:	4631      	mov	r1, r6
 801d56c:	f81a 0004 	ldrb.w	r0, [sl, r4]
 801d570:	47a8      	blx	r5
 801d572:	4642      	mov	r2, r8
    while(len) {
 801d574:	2c00      	cmp	r4, #0
 801d576:	d1f4      	bne.n	801d562 <_out_rev+0x42>
    }

    // append pad spaces up to given width
    if(flags & FLAGS_LEFT) {
 801d578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d57a:	f013 0f02 	tst.w	r3, #2
 801d57e:	d103      	bne.n	801d588 <_out_rev+0x68>
            out(' ', buffer, idx++, maxlen);
        }
    }

    return idx;
}
 801d580:	4610      	mov	r0, r2
 801d582:	b003      	add	sp, #12
 801d584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while(idx - start_idx < width) {
 801d588:	eba2 030b 	sub.w	r3, r2, fp
 801d58c:	454b      	cmp	r3, r9
 801d58e:	d2f7      	bcs.n	801d580 <_out_rev+0x60>
            out(' ', buffer, idx++, maxlen);
 801d590:	1c54      	adds	r4, r2, #1
 801d592:	463b      	mov	r3, r7
 801d594:	4631      	mov	r1, r6
 801d596:	2020      	movs	r0, #32
 801d598:	47a8      	blx	r5
 801d59a:	4622      	mov	r2, r4
 801d59c:	e7f4      	b.n	801d588 <_out_rev+0x68>

0801d59e <_ntoa_format>:

// internal itoa format
static size_t _ntoa_format(out_fct_type out, char * buffer, size_t idx, size_t maxlen, char * buf, size_t len,
                           bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801d59e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d5a2:	b085      	sub	sp, #20
 801d5a4:	4699      	mov	r9, r3
 801d5a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d5a8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d5aa:	f89d 8038 	ldrb.w	r8, [sp, #56]	@ 0x38
 801d5ae:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 801d5b2:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d5b4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
    // pad leading zeros
    if(!(flags & FLAGS_LEFT)) {
 801d5b6:	f016 0f02 	tst.w	r6, #2
 801d5ba:	d121      	bne.n	801d600 <_ntoa_format+0x62>
        if(width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 801d5bc:	b17f      	cbz	r7, 801d5de <_ntoa_format+0x40>
 801d5be:	f016 0f01 	tst.w	r6, #1
 801d5c2:	d00c      	beq.n	801d5de <_ntoa_format+0x40>
 801d5c4:	f1b8 0f00 	cmp.w	r8, #0
 801d5c8:	d102      	bne.n	801d5d0 <_ntoa_format+0x32>
 801d5ca:	f016 0f0c 	tst.w	r6, #12
 801d5ce:	d006      	beq.n	801d5de <_ntoa_format+0x40>
            width--;
 801d5d0:	3f01      	subs	r7, #1
 801d5d2:	e004      	b.n	801d5de <_ntoa_format+0x40>
        }
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
 801d5d4:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801d5d8:	f805 c004 	strb.w	ip, [r5, r4]
 801d5dc:	3401      	adds	r4, #1
        while((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d5de:	4574      	cmp	r4, lr
 801d5e0:	d201      	bcs.n	801d5e6 <_ntoa_format+0x48>
 801d5e2:	2c1f      	cmp	r4, #31
 801d5e4:	d9f6      	bls.n	801d5d4 <_ntoa_format+0x36>
        }
        while((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d5e6:	f016 0f01 	tst.w	r6, #1
 801d5ea:	d009      	beq.n	801d600 <_ntoa_format+0x62>
 801d5ec:	42bc      	cmp	r4, r7
 801d5ee:	d207      	bcs.n	801d600 <_ntoa_format+0x62>
 801d5f0:	2c1f      	cmp	r4, #31
 801d5f2:	d805      	bhi.n	801d600 <_ntoa_format+0x62>
            buf[len++] = '0';
 801d5f4:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801d5f8:	f805 c004 	strb.w	ip, [r5, r4]
 801d5fc:	3401      	adds	r4, #1
 801d5fe:	e7f2      	b.n	801d5e6 <_ntoa_format+0x48>
        }
    }

    // handle hash
    if(flags & FLAGS_HASH) {
 801d600:	f016 0f10 	tst.w	r6, #16
 801d604:	d014      	beq.n	801d630 <_ntoa_format+0x92>
        if(!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 801d606:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 801d60a:	d104      	bne.n	801d616 <_ntoa_format+0x78>
 801d60c:	b11c      	cbz	r4, 801d616 <_ntoa_format+0x78>
 801d60e:	4574      	cmp	r4, lr
 801d610:	d022      	beq.n	801d658 <_ntoa_format+0xba>
 801d612:	42bc      	cmp	r4, r7
 801d614:	d020      	beq.n	801d658 <_ntoa_format+0xba>
            len--;
            if(len && (base == 16U)) {
                len--;
            }
        }
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d618:	2b10      	cmp	r3, #16
 801d61a:	d036      	beq.n	801d68a <_ntoa_format+0xec>
            buf[len++] = 'x';
        }
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
        }
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d61e:	2b02      	cmp	r3, #2
 801d620:	d03e      	beq.n	801d6a0 <_ntoa_format+0x102>
            buf[len++] = 'b';
        }
        if(len < PRINTF_NTOA_BUFFER_SIZE) {
 801d622:	2c1f      	cmp	r4, #31
 801d624:	d80e      	bhi.n	801d644 <_ntoa_format+0xa6>
            buf[len++] = '0';
 801d626:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 801d62a:	f805 c004 	strb.w	ip, [r5, r4]
 801d62e:	3401      	adds	r4, #1
        }
    }

    if(len < PRINTF_NTOA_BUFFER_SIZE) {
 801d630:	2c1f      	cmp	r4, #31
 801d632:	d807      	bhi.n	801d644 <_ntoa_format+0xa6>
        if(negative) {
 801d634:	f1b8 0f00 	cmp.w	r8, #0
 801d638:	d03a      	beq.n	801d6b0 <_ntoa_format+0x112>
            buf[len++] = '-';
 801d63a:	f04f 0c2d 	mov.w	ip, #45	@ 0x2d
 801d63e:	f805 c004 	strb.w	ip, [r5, r4]
 801d642:	3401      	adds	r4, #1
        else if(flags & FLAGS_SPACE) {
            buf[len++] = ' ';
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 801d644:	9603      	str	r6, [sp, #12]
 801d646:	9702      	str	r7, [sp, #8]
 801d648:	9401      	str	r4, [sp, #4]
 801d64a:	9500      	str	r5, [sp, #0]
 801d64c:	464b      	mov	r3, r9
 801d64e:	f7ff ff67 	bl	801d520 <_out_rev>
}
 801d652:	b005      	add	sp, #20
 801d654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(len && (base == 16U)) {
 801d658:	f1b4 0c01 	subs.w	ip, r4, #1
 801d65c:	d013      	beq.n	801d686 <_ntoa_format+0xe8>
 801d65e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d660:	2b10      	cmp	r3, #16
 801d662:	d00e      	beq.n	801d682 <_ntoa_format+0xe4>
            len--;
 801d664:	4664      	mov	r4, ip
        else if((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d666:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d668:	2b10      	cmp	r3, #16
 801d66a:	d1d7      	bne.n	801d61c <_ntoa_format+0x7e>
 801d66c:	f016 0f20 	tst.w	r6, #32
 801d670:	d0d4      	beq.n	801d61c <_ntoa_format+0x7e>
 801d672:	2c1f      	cmp	r4, #31
 801d674:	d8d2      	bhi.n	801d61c <_ntoa_format+0x7e>
            buf[len++] = 'X';
 801d676:	f04f 0c58 	mov.w	ip, #88	@ 0x58
 801d67a:	f805 c004 	strb.w	ip, [r5, r4]
 801d67e:	3401      	adds	r4, #1
 801d680:	e7cf      	b.n	801d622 <_ntoa_format+0x84>
                len--;
 801d682:	3c02      	subs	r4, #2
 801d684:	e7c7      	b.n	801d616 <_ntoa_format+0x78>
            len--;
 801d686:	4664      	mov	r4, ip
 801d688:	e7c5      	b.n	801d616 <_ntoa_format+0x78>
        if((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d68a:	f016 0f20 	tst.w	r6, #32
 801d68e:	d1ea      	bne.n	801d666 <_ntoa_format+0xc8>
 801d690:	2c1f      	cmp	r4, #31
 801d692:	d8e8      	bhi.n	801d666 <_ntoa_format+0xc8>
            buf[len++] = 'x';
 801d694:	f04f 0c78 	mov.w	ip, #120	@ 0x78
 801d698:	f805 c004 	strb.w	ip, [r5, r4]
 801d69c:	3401      	adds	r4, #1
 801d69e:	e7c0      	b.n	801d622 <_ntoa_format+0x84>
        else if((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801d6a0:	2c1f      	cmp	r4, #31
 801d6a2:	d8cf      	bhi.n	801d644 <_ntoa_format+0xa6>
            buf[len++] = 'b';
 801d6a4:	f04f 0c62 	mov.w	ip, #98	@ 0x62
 801d6a8:	f805 c004 	strb.w	ip, [r5, r4]
 801d6ac:	3401      	adds	r4, #1
 801d6ae:	e7b8      	b.n	801d622 <_ntoa_format+0x84>
        else if(flags & FLAGS_PLUS) {
 801d6b0:	f016 0f04 	tst.w	r6, #4
 801d6b4:	d005      	beq.n	801d6c2 <_ntoa_format+0x124>
            buf[len++] = '+';  // ignore the space if the '+' exists
 801d6b6:	f04f 0c2b 	mov.w	ip, #43	@ 0x2b
 801d6ba:	f805 c004 	strb.w	ip, [r5, r4]
 801d6be:	3401      	adds	r4, #1
 801d6c0:	e7c0      	b.n	801d644 <_ntoa_format+0xa6>
        else if(flags & FLAGS_SPACE) {
 801d6c2:	f016 0f08 	tst.w	r6, #8
 801d6c6:	d0bd      	beq.n	801d644 <_ntoa_format+0xa6>
            buf[len++] = ' ';
 801d6c8:	f04f 0c20 	mov.w	ip, #32
 801d6cc:	f805 c004 	strb.w	ip, [r5, r4]
 801d6d0:	3401      	adds	r4, #1
 801d6d2:	e7b7      	b.n	801d644 <_ntoa_format+0xa6>

0801d6d4 <_ntoa_long>:

// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801d6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6d6:	b091      	sub	sp, #68	@ 0x44
 801d6d8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d6da:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801d6dc:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 801d6de:	b90c      	cbnz	r4, 801d6e4 <_ntoa_long+0x10>
        flags &= ~FLAGS_HASH;
 801d6e0:	f026 0610 	bic.w	r6, r6, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 801d6e4:	f416 6e80 	ands.w	lr, r6, #1024	@ 0x400
 801d6e8:	d016      	beq.n	801d718 <_ntoa_long+0x44>
 801d6ea:	b364      	cbz	r4, 801d746 <_ntoa_long+0x72>
 801d6ec:	f04f 0e00 	mov.w	lr, #0
 801d6f0:	e012      	b.n	801d718 <_ntoa_long+0x44>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d6f2:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 801d6f6:	fa5f fc8c 	uxtb.w	ip, ip
 801d6fa:	f10e 0701 	add.w	r7, lr, #1
 801d6fe:	f10e 0e40 	add.w	lr, lr, #64	@ 0x40
 801d702:	44ee      	add	lr, sp
 801d704:	f80e cc20 	strb.w	ip, [lr, #-32]
            value /= base;
 801d708:	fbb4 fcf5 	udiv	ip, r4, r5
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801d70c:	42ac      	cmp	r4, r5
 801d70e:	d31b      	bcc.n	801d748 <_ntoa_long+0x74>
 801d710:	2f1f      	cmp	r7, #31
 801d712:	d819      	bhi.n	801d748 <_ntoa_long+0x74>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d714:	46be      	mov	lr, r7
            value /= base;
 801d716:	4664      	mov	r4, ip
            const char digit = (char)(value % base);
 801d718:	fbb4 fcf5 	udiv	ip, r4, r5
 801d71c:	fb05 4c1c 	mls	ip, r5, ip, r4
 801d720:	fa5f fc8c 	uxtb.w	ip, ip
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d724:	f1bc 0f09 	cmp.w	ip, #9
 801d728:	d9e3      	bls.n	801d6f2 <_ntoa_long+0x1e>
 801d72a:	f016 0f20 	tst.w	r6, #32
 801d72e:	d008      	beq.n	801d742 <_ntoa_long+0x6e>
 801d730:	2741      	movs	r7, #65	@ 0x41
 801d732:	44bc      	add	ip, r7
 801d734:	fa5f fc8c 	uxtb.w	ip, ip
 801d738:	f1ac 0c0a 	sub.w	ip, ip, #10
 801d73c:	fa5f fc8c 	uxtb.w	ip, ip
 801d740:	e7db      	b.n	801d6fa <_ntoa_long+0x26>
 801d742:	2761      	movs	r7, #97	@ 0x61
 801d744:	e7f5      	b.n	801d732 <_ntoa_long+0x5e>
    size_t len = 0U;
 801d746:	4627      	mov	r7, r4
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801d748:	9606      	str	r6, [sp, #24]
 801d74a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d74c:	9405      	str	r4, [sp, #20]
 801d74e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801d750:	9404      	str	r4, [sp, #16]
 801d752:	9503      	str	r5, [sp, #12]
 801d754:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 801d758:	9402      	str	r4, [sp, #8]
 801d75a:	9701      	str	r7, [sp, #4]
 801d75c:	ac08      	add	r4, sp, #32
 801d75e:	9400      	str	r4, [sp, #0]
 801d760:	f7ff ff1d 	bl	801d59e <_ntoa_format>
}
 801d764:	b011      	add	sp, #68	@ 0x44
 801d766:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d768 <_ntoa_long_long>:

// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char * buffer, size_t idx, size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d76c:	b095      	sub	sp, #84	@ 0x54
 801d76e:	9009      	str	r0, [sp, #36]	@ 0x24
 801d770:	910a      	str	r1, [sp, #40]	@ 0x28
 801d772:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d774:	4698      	mov	r8, r3
 801d776:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801d77a:	f8dd 907c 	ldr.w	r9, [sp, #124]	@ 0x7c
 801d77e:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 801d780:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 801d782:	9e26      	ldr	r6, [sp, #152]	@ 0x98
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;

    // no hash for 0 values
    if(!value) {
 801d784:	ea5b 0209 	orrs.w	r2, fp, r9
 801d788:	d101      	bne.n	801d78e <_ntoa_long_long+0x26>
        flags &= ~FLAGS_HASH;
 801d78a:	f026 0610 	bic.w	r6, r6, #16
    }

    // write if precision != 0 and value is != 0
    if(!(flags & FLAGS_PRECISION) || value) {
 801d78e:	f416 6480 	ands.w	r4, r6, #1024	@ 0x400
 801d792:	d01e      	beq.n	801d7d2 <_ntoa_long_long+0x6a>
 801d794:	ea5b 0209 	orrs.w	r2, fp, r9
 801d798:	d02f      	beq.n	801d7fa <_ntoa_long_long+0x92>
 801d79a:	2400      	movs	r4, #0
 801d79c:	e019      	b.n	801d7d2 <_ntoa_long_long+0x6a>
        do {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d79e:	3230      	adds	r2, #48	@ 0x30
 801d7a0:	b2d3      	uxtb	r3, r2
 801d7a2:	f104 0a01 	add.w	sl, r4, #1
 801d7a6:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d7aa:	eb0d 0402 	add.w	r4, sp, r2
 801d7ae:	f804 3c20 	strb.w	r3, [r4, #-32]
            value /= base;
 801d7b2:	462a      	mov	r2, r5
 801d7b4:	463b      	mov	r3, r7
 801d7b6:	4658      	mov	r0, fp
 801d7b8:	4649      	mov	r1, r9
 801d7ba:	f7e2 fcf7 	bl	80001ac <__aeabi_uldivmod>
        } while(value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801d7be:	45ab      	cmp	fp, r5
 801d7c0:	eb79 0907 	sbcs.w	r9, r9, r7
 801d7c4:	d31b      	bcc.n	801d7fe <_ntoa_long_long+0x96>
 801d7c6:	f1ba 0f1f 	cmp.w	sl, #31
 801d7ca:	d818      	bhi.n	801d7fe <_ntoa_long_long+0x96>
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d7cc:	4654      	mov	r4, sl
            value /= base;
 801d7ce:	4683      	mov	fp, r0
 801d7d0:	4689      	mov	r9, r1
            const char digit = (char)(value % base);
 801d7d2:	462a      	mov	r2, r5
 801d7d4:	463b      	mov	r3, r7
 801d7d6:	4658      	mov	r0, fp
 801d7d8:	4649      	mov	r1, r9
 801d7da:	f7e2 fce7 	bl	80001ac <__aeabi_uldivmod>
 801d7de:	b2d2      	uxtb	r2, r2
            buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801d7e0:	2a09      	cmp	r2, #9
 801d7e2:	d9dc      	bls.n	801d79e <_ntoa_long_long+0x36>
 801d7e4:	f016 0f20 	tst.w	r6, #32
 801d7e8:	d005      	beq.n	801d7f6 <_ntoa_long_long+0x8e>
 801d7ea:	2341      	movs	r3, #65	@ 0x41
 801d7ec:	4413      	add	r3, r2
 801d7ee:	b2db      	uxtb	r3, r3
 801d7f0:	3b0a      	subs	r3, #10
 801d7f2:	b2db      	uxtb	r3, r3
 801d7f4:	e7d5      	b.n	801d7a2 <_ntoa_long_long+0x3a>
 801d7f6:	2361      	movs	r3, #97	@ 0x61
 801d7f8:	e7f8      	b.n	801d7ec <_ntoa_long_long+0x84>
    size_t len = 0U;
 801d7fa:	f04f 0a00 	mov.w	sl, #0
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801d7fe:	9606      	str	r6, [sp, #24]
 801d800:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d802:	9305      	str	r3, [sp, #20]
 801d804:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d806:	9304      	str	r3, [sp, #16]
 801d808:	9503      	str	r5, [sp, #12]
 801d80a:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 801d80e:	9302      	str	r3, [sp, #8]
 801d810:	f8cd a004 	str.w	sl, [sp, #4]
 801d814:	ab0c      	add	r3, sp, #48	@ 0x30
 801d816:	9300      	str	r3, [sp, #0]
 801d818:	4643      	mov	r3, r8
 801d81a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d81c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d81e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d820:	f7ff febd 	bl	801d59e <_ntoa_format>
}
 801d824:	b015      	add	sp, #84	@ 0x54
 801d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d82c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char * buffer, const size_t maxlen, const char * format, va_list va)
{
 801d82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d830:	b093      	sub	sp, #76	@ 0x4c
 801d832:	4680      	mov	r8, r0
 801d834:	4617      	mov	r7, r2
 801d836:	930f      	str	r3, [sp, #60]	@ 0x3c
    unsigned int flags, width, precision, n;
    size_t idx = 0U;

    if(!buffer) {
 801d838:	468b      	mov	fp, r1
 801d83a:	2900      	cmp	r1, #0
 801d83c:	f000 82cf 	beq.w	801ddde <_vsnprintf+0x5b2>
                    format++;
                    break;
                }

            case '%' :
                out('%', buffer, idx++, maxlen);
 801d840:	2500      	movs	r5, #0
    while(*format) {
 801d842:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d844:	7818      	ldrb	r0, [r3, #0]
 801d846:	2800      	cmp	r0, #0
 801d848:	f000 82cc 	beq.w	801dde4 <_vsnprintf+0x5b8>
        if(*format != '%') {
 801d84c:	2825      	cmp	r0, #37	@ 0x25
 801d84e:	d009      	beq.n	801d864 <_vsnprintf+0x38>
            out(*format, buffer, idx++, maxlen);
 801d850:	1c6c      	adds	r4, r5, #1
 801d852:	463b      	mov	r3, r7
 801d854:	462a      	mov	r2, r5
 801d856:	4659      	mov	r1, fp
 801d858:	47c0      	blx	r8
            format++;
 801d85a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d85c:	3301      	adds	r3, #1
 801d85e:	930f      	str	r3, [sp, #60]	@ 0x3c
            out(*format, buffer, idx++, maxlen);
 801d860:	4625      	mov	r5, r4
            continue;
 801d862:	e7ee      	b.n	801d842 <_vsnprintf+0x16>
            format++;
 801d864:	3301      	adds	r3, #1
 801d866:	930f      	str	r3, [sp, #60]	@ 0x3c
        flags = 0U;
 801d868:	2600      	movs	r6, #0
 801d86a:	e01f      	b.n	801d8ac <_vsnprintf+0x80>
                    flags |= FLAGS_ZEROPAD;
 801d86c:	f046 0601 	orr.w	r6, r6, #1
                    format++;
 801d870:	3201      	adds	r2, #1
 801d872:	920f      	str	r2, [sp, #60]	@ 0x3c
                    n = 1U;
 801d874:	2301      	movs	r3, #1
                    break;
 801d876:	e018      	b.n	801d8aa <_vsnprintf+0x7e>
                    flags |= FLAGS_LEFT;
 801d878:	f046 0602 	orr.w	r6, r6, #2
                    format++;
 801d87c:	3201      	adds	r2, #1
 801d87e:	920f      	str	r2, [sp, #60]	@ 0x3c
                    n = 1U;
 801d880:	2301      	movs	r3, #1
                    break;
 801d882:	e012      	b.n	801d8aa <_vsnprintf+0x7e>
                    flags |= FLAGS_PLUS;
 801d884:	f046 0604 	orr.w	r6, r6, #4
                    format++;
 801d888:	3201      	adds	r2, #1
 801d88a:	920f      	str	r2, [sp, #60]	@ 0x3c
                    n = 1U;
 801d88c:	2301      	movs	r3, #1
                    break;
 801d88e:	e00c      	b.n	801d8aa <_vsnprintf+0x7e>
                    flags |= FLAGS_SPACE;
 801d890:	f046 0608 	orr.w	r6, r6, #8
                    format++;
 801d894:	3201      	adds	r2, #1
 801d896:	920f      	str	r2, [sp, #60]	@ 0x3c
                    n = 1U;
 801d898:	2301      	movs	r3, #1
                    break;
 801d89a:	e006      	b.n	801d8aa <_vsnprintf+0x7e>
                    flags |= FLAGS_HASH;
 801d89c:	f046 0610 	orr.w	r6, r6, #16
                    format++;
 801d8a0:	3201      	adds	r2, #1
 801d8a2:	920f      	str	r2, [sp, #60]	@ 0x3c
                    n = 1U;
 801d8a4:	2301      	movs	r3, #1
                    break;
 801d8a6:	e000      	b.n	801d8aa <_vsnprintf+0x7e>
            switch(*format) {
 801d8a8:	2300      	movs	r3, #0
        } while(n);
 801d8aa:	b34b      	cbz	r3, 801d900 <_vsnprintf+0xd4>
            switch(*format) {
 801d8ac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d8ae:	7813      	ldrb	r3, [r2, #0]
 801d8b0:	3b20      	subs	r3, #32
 801d8b2:	2b10      	cmp	r3, #16
 801d8b4:	d8f8      	bhi.n	801d8a8 <_vsnprintf+0x7c>
 801d8b6:	a101      	add	r1, pc, #4	@ (adr r1, 801d8bc <_vsnprintf+0x90>)
 801d8b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d8bc:	0801d891 	.word	0x0801d891
 801d8c0:	0801d8a9 	.word	0x0801d8a9
 801d8c4:	0801d8a9 	.word	0x0801d8a9
 801d8c8:	0801d89d 	.word	0x0801d89d
 801d8cc:	0801d8a9 	.word	0x0801d8a9
 801d8d0:	0801d8a9 	.word	0x0801d8a9
 801d8d4:	0801d8a9 	.word	0x0801d8a9
 801d8d8:	0801d8a9 	.word	0x0801d8a9
 801d8dc:	0801d8a9 	.word	0x0801d8a9
 801d8e0:	0801d8a9 	.word	0x0801d8a9
 801d8e4:	0801d8a9 	.word	0x0801d8a9
 801d8e8:	0801d885 	.word	0x0801d885
 801d8ec:	0801d8a9 	.word	0x0801d8a9
 801d8f0:	0801d879 	.word	0x0801d879
 801d8f4:	0801d8a9 	.word	0x0801d8a9
 801d8f8:	0801d8a9 	.word	0x0801d8a9
 801d8fc:	0801d86d 	.word	0x0801d86d
        if(_is_digit(*format)) {
 801d900:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d902:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d904:	781a      	ldrb	r2, [r3, #0]
    return (ch >= '0') && (ch <= '9');
 801d906:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d90a:	b2db      	uxtb	r3, r3
        if(_is_digit(*format)) {
 801d90c:	2b09      	cmp	r3, #9
 801d90e:	d918      	bls.n	801d942 <_vsnprintf+0x116>
        else if(*format == '*') {
 801d910:	2a2a      	cmp	r2, #42	@ 0x2a
 801d912:	d01b      	beq.n	801d94c <_vsnprintf+0x120>
        width = 0U;
 801d914:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
        if(*format == '.') {
 801d918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d91a:	781a      	ldrb	r2, [r3, #0]
 801d91c:	2a2e      	cmp	r2, #46	@ 0x2e
 801d91e:	d025      	beq.n	801d96c <_vsnprintf+0x140>
        switch(*format) {
 801d920:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d922:	7813      	ldrb	r3, [r2, #0]
 801d924:	3b68      	subs	r3, #104	@ 0x68
 801d926:	2b12      	cmp	r3, #18
 801d928:	d85c      	bhi.n	801d9e4 <_vsnprintf+0x1b8>
 801d92a:	e8df f003 	tbb	[pc, r3]
 801d92e:	5b49      	.short	0x5b49
 801d930:	5b3b5b7b 	.word	0x5b3b5b7b
 801d934:	5b5b5b5b 	.word	0x5b5b5b5b
 801d938:	5b575b5b 	.word	0x5b575b5b
 801d93c:	5b5b5b5b 	.word	0x5b5b5b5b
 801d940:	80          	.byte	0x80
 801d941:	00          	.byte	0x00
            width = _atoi(&format);
 801d942:	a80f      	add	r0, sp, #60	@ 0x3c
 801d944:	f7ff fdd9 	bl	801d4fa <_atoi>
 801d948:	4682      	mov	sl, r0
 801d94a:	e7e5      	b.n	801d918 <_vsnprintf+0xec>
            const int w = va_arg(va, int);
 801d94c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d94e:	1d1a      	adds	r2, r3, #4
 801d950:	921c      	str	r2, [sp, #112]	@ 0x70
 801d952:	681b      	ldr	r3, [r3, #0]
            if(w < 0) {
 801d954:	2b00      	cmp	r3, #0
 801d956:	db04      	blt.n	801d962 <_vsnprintf+0x136>
                width = (unsigned int)w;
 801d958:	469a      	mov	sl, r3
            format++;
 801d95a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d95c:	3301      	adds	r3, #1
 801d95e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d960:	e7da      	b.n	801d918 <_vsnprintf+0xec>
                flags |= FLAGS_LEFT;    // reverse padding
 801d962:	f046 0602 	orr.w	r6, r6, #2
                width = (unsigned int) - w;
 801d966:	f1c3 0a00 	rsb	sl, r3, #0
 801d96a:	e7f6      	b.n	801d95a <_vsnprintf+0x12e>
            flags |= FLAGS_PRECISION;
 801d96c:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
            format++;
 801d970:	1c5a      	adds	r2, r3, #1
 801d972:	920f      	str	r2, [sp, #60]	@ 0x3c
            if(_is_digit(*format)) {
 801d974:	785a      	ldrb	r2, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 801d976:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d97a:	b2db      	uxtb	r3, r3
            if(_is_digit(*format)) {
 801d97c:	2b09      	cmp	r3, #9
 801d97e:	d90c      	bls.n	801d99a <_vsnprintf+0x16e>
            else if(*format == '*') {
 801d980:	2a2a      	cmp	r2, #42	@ 0x2a
 801d982:	d1cd      	bne.n	801d920 <_vsnprintf+0xf4>
                const int prec = (int)va_arg(va, int);
 801d984:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d986:	1d1a      	adds	r2, r3, #4
 801d988:	921c      	str	r2, [sp, #112]	@ 0x70
 801d98a:	681c      	ldr	r4, [r3, #0]
                precision = prec > 0 ? (unsigned int)prec : 0U;
 801d98c:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 801d990:	930b      	str	r3, [sp, #44]	@ 0x2c
                format++;
 801d992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d994:	3301      	adds	r3, #1
 801d996:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d998:	e7c2      	b.n	801d920 <_vsnprintf+0xf4>
                precision = _atoi(&format);
 801d99a:	a80f      	add	r0, sp, #60	@ 0x3c
 801d99c:	f7ff fdad 	bl	801d4fa <_atoi>
 801d9a0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d9a2:	e7bd      	b.n	801d920 <_vsnprintf+0xf4>
                flags |= FLAGS_LONG;
 801d9a4:	f446 7180 	orr.w	r1, r6, #256	@ 0x100
                format++;
 801d9a8:	1c53      	adds	r3, r2, #1
 801d9aa:	930f      	str	r3, [sp, #60]	@ 0x3c
                if(*format == 'l') {
 801d9ac:	7853      	ldrb	r3, [r2, #1]
 801d9ae:	2b6c      	cmp	r3, #108	@ 0x6c
 801d9b0:	d001      	beq.n	801d9b6 <_vsnprintf+0x18a>
                flags |= FLAGS_LONG;
 801d9b2:	460e      	mov	r6, r1
 801d9b4:	e016      	b.n	801d9e4 <_vsnprintf+0x1b8>
                    flags |= FLAGS_LONG_LONG;
 801d9b6:	f446 7640 	orr.w	r6, r6, #768	@ 0x300
                    format++;
 801d9ba:	3202      	adds	r2, #2
 801d9bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d9be:	e011      	b.n	801d9e4 <_vsnprintf+0x1b8>
                flags |= FLAGS_SHORT;
 801d9c0:	f046 0180 	orr.w	r1, r6, #128	@ 0x80
                format++;
 801d9c4:	1c53      	adds	r3, r2, #1
 801d9c6:	930f      	str	r3, [sp, #60]	@ 0x3c
                if(*format == 'h') {
 801d9c8:	7853      	ldrb	r3, [r2, #1]
 801d9ca:	2b68      	cmp	r3, #104	@ 0x68
 801d9cc:	d001      	beq.n	801d9d2 <_vsnprintf+0x1a6>
                flags |= FLAGS_SHORT;
 801d9ce:	460e      	mov	r6, r1
 801d9d0:	e008      	b.n	801d9e4 <_vsnprintf+0x1b8>
                    flags |= FLAGS_CHAR;
 801d9d2:	f046 06c0 	orr.w	r6, r6, #192	@ 0xc0
                    format++;
 801d9d6:	3202      	adds	r2, #2
 801d9d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d9da:	e003      	b.n	801d9e4 <_vsnprintf+0x1b8>
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801d9dc:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
                format++;
 801d9e0:	3201      	adds	r2, #1
 801d9e2:	920f      	str	r2, [sp, #60]	@ 0x3c
        switch(*format) {
 801d9e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d9e6:	7808      	ldrb	r0, [r1, #0]
 801d9e8:	2878      	cmp	r0, #120	@ 0x78
 801d9ea:	d811      	bhi.n	801da10 <_vsnprintf+0x1e4>
 801d9ec:	2862      	cmp	r0, #98	@ 0x62
 801d9ee:	d323      	bcc.n	801da38 <_vsnprintf+0x20c>
 801d9f0:	f1a0 0262 	sub.w	r2, r0, #98	@ 0x62
 801d9f4:	b2d2      	uxtb	r2, r2
 801d9f6:	2301      	movs	r3, #1
 801d9f8:	4093      	lsls	r3, r2
 801d9fa:	4a8d      	ldr	r2, [pc, #564]	@ (801dc30 <_vsnprintf+0x404>)
 801d9fc:	401a      	ands	r2, r3
 801d9fe:	bb6a      	cbnz	r2, 801da5c <_vsnprintf+0x230>
 801da00:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801da04:	f040 8186 	bne.w	801dd14 <_vsnprintf+0x4e8>
 801da08:	f013 0f02 	tst.w	r3, #2
 801da0c:	f040 8150 	bne.w	801dcb0 <_vsnprintf+0x484>
                format++;
                break;

            default :
                out(*format, buffer, idx++, maxlen);
 801da10:	1c6c      	adds	r4, r5, #1
 801da12:	463b      	mov	r3, r7
 801da14:	462a      	mov	r2, r5
 801da16:	4659      	mov	r1, fp
 801da18:	47c0      	blx	r8
                format++;
 801da1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da1c:	3301      	adds	r3, #1
 801da1e:	930f      	str	r3, [sp, #60]	@ 0x3c
                out(*format, buffer, idx++, maxlen);
 801da20:	4625      	mov	r5, r4
                break;
 801da22:	e70e      	b.n	801d842 <_vsnprintf+0x16>
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801da24:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
                format++;
 801da28:	3201      	adds	r2, #1
 801da2a:	920f      	str	r2, [sp, #60]	@ 0x3c
                break;
 801da2c:	e7da      	b.n	801d9e4 <_vsnprintf+0x1b8>
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801da2e:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
                format++;
 801da32:	3201      	adds	r2, #1
 801da34:	920f      	str	r2, [sp, #60]	@ 0x3c
                break;
 801da36:	e7d5      	b.n	801d9e4 <_vsnprintf+0x1b8>
        switch(*format) {
 801da38:	2825      	cmp	r0, #37	@ 0x25
 801da3a:	d10a      	bne.n	801da52 <_vsnprintf+0x226>
                out('%', buffer, idx++, maxlen);
 801da3c:	1c6c      	adds	r4, r5, #1
 801da3e:	463b      	mov	r3, r7
 801da40:	462a      	mov	r2, r5
 801da42:	4659      	mov	r1, fp
 801da44:	2025      	movs	r0, #37	@ 0x25
 801da46:	47c0      	blx	r8
                format++;
 801da48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da4a:	3301      	adds	r3, #1
 801da4c:	930f      	str	r3, [sp, #60]	@ 0x3c
                out('%', buffer, idx++, maxlen);
 801da4e:	4625      	mov	r5, r4
                break;
 801da50:	e6f7      	b.n	801d842 <_vsnprintf+0x16>
        switch(*format) {
 801da52:	d3dd      	bcc.n	801da10 <_vsnprintf+0x1e4>
 801da54:	2850      	cmp	r0, #80	@ 0x50
 801da56:	d001      	beq.n	801da5c <_vsnprintf+0x230>
 801da58:	2858      	cmp	r0, #88	@ 0x58
 801da5a:	d1d9      	bne.n	801da10 <_vsnprintf+0x1e4>
                    if(*format == 'x' || *format == 'X') {
 801da5c:	3850      	subs	r0, #80	@ 0x50
 801da5e:	2828      	cmp	r0, #40	@ 0x28
 801da60:	d85f      	bhi.n	801db22 <_vsnprintf+0x2f6>
 801da62:	e8df f000 	tbb	[pc, r0]
 801da66:	5e17      	.short	0x5e17
 801da68:	5e5e5e5e 	.word	0x5e5e5e5e
 801da6c:	5e155e5e 	.word	0x5e155e5e
 801da70:	5e5e5e5e 	.word	0x5e5e5e5e
 801da74:	5e5e5e5e 	.word	0x5e5e5e5e
 801da78:	5e5e5e22 	.word	0x5e5e5e22
 801da7c:	5e5e5e5e 	.word	0x5e5e5e5e
 801da80:	5e5e5e5e 	.word	0x5e5e5e5e
 801da84:	5e17625e 	.word	0x5e17625e
 801da88:	5e5e5e5e 	.word	0x5e5e5e5e
 801da8c:	5e5e      	.short	0x5e5e
 801da8e:	15          	.byte	0x15
 801da8f:	00          	.byte	0x00
                flags |= FLAGS_SHORT;
 801da90:	2210      	movs	r2, #16
 801da92:	e00b      	b.n	801daac <_vsnprintf+0x280>
                            flags |= FLAGS_LONG;
 801da94:	f446 7688 	orr.w	r6, r6, #272	@ 0x110
                        if(*(format + 1) == 'V')
 801da98:	784b      	ldrb	r3, [r1, #1]
 801da9a:	2b56      	cmp	r3, #86	@ 0x56
 801da9c:	d001      	beq.n	801daa2 <_vsnprintf+0x276>
                        base = 16U;
 801da9e:	2210      	movs	r2, #16
 801daa0:	e004      	b.n	801daac <_vsnprintf+0x280>
                            format++;
 801daa2:	3101      	adds	r1, #1
 801daa4:	910f      	str	r1, [sp, #60]	@ 0x3c
                        base = 16U;
 801daa6:	2210      	movs	r2, #16
 801daa8:	e000      	b.n	801daac <_vsnprintf+0x280>
 801daaa:	2202      	movs	r2, #2
                    if(*format == 'X' || *format == 'P') {
 801daac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801daae:	781b      	ldrb	r3, [r3, #0]
 801dab0:	2b58      	cmp	r3, #88	@ 0x58
 801dab2:	d001      	beq.n	801dab8 <_vsnprintf+0x28c>
 801dab4:	2b50      	cmp	r3, #80	@ 0x50
 801dab6:	d101      	bne.n	801dabc <_vsnprintf+0x290>
                        flags |= FLAGS_UPPERCASE;
 801dab8:	f046 0620 	orr.w	r6, r6, #32
                    if((*format != 'i') && (*format != 'd')) {
 801dabc:	2b69      	cmp	r3, #105	@ 0x69
 801dabe:	d003      	beq.n	801dac8 <_vsnprintf+0x29c>
 801dac0:	2b64      	cmp	r3, #100	@ 0x64
 801dac2:	d001      	beq.n	801dac8 <_vsnprintf+0x29c>
                        flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 801dac4:	f026 060c 	bic.w	r6, r6, #12
                    if(flags & FLAGS_PRECISION) {
 801dac8:	f416 6f80 	tst.w	r6, #1024	@ 0x400
 801dacc:	d001      	beq.n	801dad2 <_vsnprintf+0x2a6>
                        flags &= ~FLAGS_ZEROPAD;
 801dace:	f026 0601 	bic.w	r6, r6, #1
                    if((*format == 'i') || (*format == 'd')) {
 801dad2:	2b69      	cmp	r3, #105	@ 0x69
 801dad4:	d02b      	beq.n	801db2e <_vsnprintf+0x302>
 801dad6:	2b64      	cmp	r3, #100	@ 0x64
 801dad8:	d029      	beq.n	801db2e <_vsnprintf+0x302>
                    else if(*format == 'V') {
 801dada:	2b56      	cmp	r3, #86	@ 0x56
 801dadc:	f000 8097 	beq.w	801dc0e <_vsnprintf+0x3e2>
                        if(flags & FLAGS_LONG_LONG) {
 801dae0:	f416 7f00 	tst.w	r6, #512	@ 0x200
 801dae4:	f040 80a6 	bne.w	801dc34 <_vsnprintf+0x408>
                        else if(flags & FLAGS_LONG) {
 801dae8:	f416 7f80 	tst.w	r6, #256	@ 0x100
 801daec:	f040 80be 	bne.w	801dc6c <_vsnprintf+0x440>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801daf0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 801daf4:	f000 80cf 	beq.w	801dc96 <_vsnprintf+0x46a>
                            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va,
 801daf8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dafa:	1d19      	adds	r1, r3, #4
 801dafc:	911c      	str	r1, [sp, #112]	@ 0x70
 801dafe:	781b      	ldrb	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801db00:	9605      	str	r6, [sp, #20]
 801db02:	f8cd a010 	str.w	sl, [sp, #16]
 801db06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801db08:	9103      	str	r1, [sp, #12]
 801db0a:	9202      	str	r2, [sp, #8]
 801db0c:	2200      	movs	r2, #0
 801db0e:	9201      	str	r2, [sp, #4]
 801db10:	9300      	str	r3, [sp, #0]
 801db12:	463b      	mov	r3, r7
 801db14:	462a      	mov	r2, r5
 801db16:	4659      	mov	r1, fp
 801db18:	4640      	mov	r0, r8
 801db1a:	f7ff fddb 	bl	801d6d4 <_ntoa_long>
 801db1e:	4605      	mov	r5, r0
 801db20:	e026      	b.n	801db70 <_vsnprintf+0x344>
                        flags &= ~FLAGS_HASH;   // no hash for dec format
 801db22:	f026 0610 	bic.w	r6, r6, #16
                        base = 10U;
 801db26:	220a      	movs	r2, #10
 801db28:	e7c0      	b.n	801daac <_vsnprintf+0x280>
                        base = 16U;
 801db2a:	2208      	movs	r2, #8
 801db2c:	e7be      	b.n	801daac <_vsnprintf+0x280>
                        if(flags & FLAGS_LONG_LONG) {
 801db2e:	f416 7f00 	tst.w	r6, #512	@ 0x200
 801db32:	d121      	bne.n	801db78 <_vsnprintf+0x34c>
                        else if(flags & FLAGS_LONG) {
 801db34:	f416 7f80 	tst.w	r6, #256	@ 0x100
 801db38:	d142      	bne.n	801dbc0 <_vsnprintf+0x394>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 801db3a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 801db3e:	d058      	beq.n	801dbf2 <_vsnprintf+0x3c6>
 801db40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801db42:	1d19      	adds	r1, r3, #4
 801db44:	911c      	str	r1, [sp, #112]	@ 0x70
 801db46:	781b      	ldrb	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision,
 801db48:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 801db4c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 801db50:	9605      	str	r6, [sp, #20]
 801db52:	f8cd a010 	str.w	sl, [sp, #16]
 801db56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801db58:	9003      	str	r0, [sp, #12]
 801db5a:	9202      	str	r2, [sp, #8]
 801db5c:	0fdb      	lsrs	r3, r3, #31
 801db5e:	9301      	str	r3, [sp, #4]
 801db60:	9100      	str	r1, [sp, #0]
 801db62:	463b      	mov	r3, r7
 801db64:	462a      	mov	r2, r5
 801db66:	4659      	mov	r1, fp
 801db68:	4640      	mov	r0, r8
 801db6a:	f7ff fdb3 	bl	801d6d4 <_ntoa_long>
 801db6e:	4605      	mov	r5, r0
                    format++;
 801db70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db72:	3301      	adds	r3, #1
 801db74:	930f      	str	r3, [sp, #60]	@ 0x3c
                    break;
 801db76:	e664      	b.n	801d842 <_vsnprintf+0x16>
                            const long long value = va_arg(va, long long);
 801db78:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801db7a:	3307      	adds	r3, #7
 801db7c:	f023 0307 	bic.w	r3, r3, #7
 801db80:	f103 0108 	add.w	r1, r3, #8
 801db84:	911c      	str	r1, [sp, #112]	@ 0x70
 801db86:	6859      	ldr	r1, [r3, #4]
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base,
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	4608      	mov	r0, r1
 801db8c:	2900      	cmp	r1, #0
 801db8e:	db13      	blt.n	801dbb8 <_vsnprintf+0x38c>
 801db90:	9608      	str	r6, [sp, #32]
 801db92:	f8cd a01c 	str.w	sl, [sp, #28]
 801db96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801db98:	9406      	str	r4, [sp, #24]
 801db9a:	9204      	str	r2, [sp, #16]
 801db9c:	2200      	movs	r2, #0
 801db9e:	9205      	str	r2, [sp, #20]
 801dba0:	0fc9      	lsrs	r1, r1, #31
 801dba2:	9102      	str	r1, [sp, #8]
 801dba4:	9300      	str	r3, [sp, #0]
 801dba6:	9001      	str	r0, [sp, #4]
 801dba8:	463b      	mov	r3, r7
 801dbaa:	462a      	mov	r2, r5
 801dbac:	4659      	mov	r1, fp
 801dbae:	4640      	mov	r0, r8
 801dbb0:	f7ff fdda 	bl	801d768 <_ntoa_long_long>
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	e7db      	b.n	801db70 <_vsnprintf+0x344>
 801dbb8:	425b      	negs	r3, r3
 801dbba:	eb61 0041 	sbc.w	r0, r1, r1, lsl #1
 801dbbe:	e7e7      	b.n	801db90 <_vsnprintf+0x364>
                            const long value = va_arg(va, long);
 801dbc0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dbc2:	1d19      	adds	r1, r3, #4
 801dbc4:	911c      	str	r1, [sp, #112]	@ 0x70
 801dbc6:	681b      	ldr	r3, [r3, #0]
                            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision,
 801dbc8:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 801dbcc:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 801dbd0:	9605      	str	r6, [sp, #20]
 801dbd2:	f8cd a010 	str.w	sl, [sp, #16]
 801dbd6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801dbd8:	9003      	str	r0, [sp, #12]
 801dbda:	9202      	str	r2, [sp, #8]
 801dbdc:	0fdb      	lsrs	r3, r3, #31
 801dbde:	9301      	str	r3, [sp, #4]
 801dbe0:	9100      	str	r1, [sp, #0]
 801dbe2:	463b      	mov	r3, r7
 801dbe4:	462a      	mov	r2, r5
 801dbe6:	4659      	mov	r1, fp
 801dbe8:	4640      	mov	r0, r8
 801dbea:	f7ff fd73 	bl	801d6d4 <_ntoa_long>
 801dbee:	4605      	mov	r5, r0
 801dbf0:	e7be      	b.n	801db70 <_vsnprintf+0x344>
                                                                                                                                       int) : va_arg(va, int);
 801dbf2:	f016 0f80 	tst.w	r6, #128	@ 0x80
 801dbf6:	d005      	beq.n	801dc04 <_vsnprintf+0x3d8>
                            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va,
 801dbf8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dbfa:	1d19      	adds	r1, r3, #4
 801dbfc:	911c      	str	r1, [sp, #112]	@ 0x70
 801dbfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dc02:	e7a1      	b.n	801db48 <_vsnprintf+0x31c>
                                                                                                                                       int) : va_arg(va, int);
 801dc04:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc06:	1d19      	adds	r1, r3, #4
 801dc08:	911c      	str	r1, [sp, #112]	@ 0x70
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	e79c      	b.n	801db48 <_vsnprintf+0x31c>
                        lv_vaformat_t * vaf = va_arg(va, lv_vaformat_t *);
 801dc0e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc10:	1d1a      	adds	r2, r3, #4
 801dc12:	921c      	str	r2, [sp, #112]	@ 0x70
 801dc14:	681b      	ldr	r3, [r3, #0]
                        va_copy(copy, *vaf->va);
 801dc16:	685a      	ldr	r2, [r3, #4]
 801dc18:	6812      	ldr	r2, [r2, #0]
 801dc1a:	9211      	str	r2, [sp, #68]	@ 0x44
                        idx += _vsnprintf(out, buffer + idx, maxlen - idx, vaf->fmt, copy);
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	9200      	str	r2, [sp, #0]
 801dc20:	1b7a      	subs	r2, r7, r5
 801dc22:	eb0b 0105 	add.w	r1, fp, r5
 801dc26:	4640      	mov	r0, r8
 801dc28:	f7ff fe00 	bl	801d82c <_vsnprintf>
 801dc2c:	4405      	add	r5, r0
                        va_end(copy);
 801dc2e:	e79f      	b.n	801db70 <_vsnprintf+0x344>
 801dc30:	00486085 	.word	0x00486085
                            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 801dc34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc36:	3307      	adds	r3, #7
 801dc38:	f023 0307 	bic.w	r3, r3, #7
 801dc3c:	f103 0108 	add.w	r1, r3, #8
 801dc40:	911c      	str	r1, [sp, #112]	@ 0x70
 801dc42:	9608      	str	r6, [sp, #32]
 801dc44:	f8cd a01c 	str.w	sl, [sp, #28]
 801dc48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dc4a:	9106      	str	r1, [sp, #24]
 801dc4c:	2100      	movs	r1, #0
 801dc4e:	9204      	str	r2, [sp, #16]
 801dc50:	9105      	str	r1, [sp, #20]
 801dc52:	9102      	str	r1, [sp, #8]
 801dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc58:	e9cd 2300 	strd	r2, r3, [sp]
 801dc5c:	463b      	mov	r3, r7
 801dc5e:	462a      	mov	r2, r5
 801dc60:	4659      	mov	r1, fp
 801dc62:	4640      	mov	r0, r8
 801dc64:	f7ff fd80 	bl	801d768 <_ntoa_long_long>
 801dc68:	4605      	mov	r5, r0
 801dc6a:	e781      	b.n	801db70 <_vsnprintf+0x344>
                            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 801dc6c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc6e:	1d19      	adds	r1, r3, #4
 801dc70:	911c      	str	r1, [sp, #112]	@ 0x70
 801dc72:	9605      	str	r6, [sp, #20]
 801dc74:	f8cd a010 	str.w	sl, [sp, #16]
 801dc78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dc7a:	9103      	str	r1, [sp, #12]
 801dc7c:	9202      	str	r2, [sp, #8]
 801dc7e:	2200      	movs	r2, #0
 801dc80:	9201      	str	r2, [sp, #4]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	9300      	str	r3, [sp, #0]
 801dc86:	463b      	mov	r3, r7
 801dc88:	462a      	mov	r2, r5
 801dc8a:	4659      	mov	r1, fp
 801dc8c:	4640      	mov	r0, r8
 801dc8e:	f7ff fd21 	bl	801d6d4 <_ntoa_long>
 801dc92:	4605      	mov	r5, r0
 801dc94:	e76c      	b.n	801db70 <_vsnprintf+0x344>
                                                                                                    unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801dc96:	f016 0f80 	tst.w	r6, #128	@ 0x80
 801dc9a:	d004      	beq.n	801dca6 <_vsnprintf+0x47a>
 801dc9c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dc9e:	1d19      	adds	r1, r3, #4
 801dca0:	911c      	str	r1, [sp, #112]	@ 0x70
 801dca2:	881b      	ldrh	r3, [r3, #0]
 801dca4:	e72c      	b.n	801db00 <_vsnprintf+0x2d4>
 801dca6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dca8:	1d19      	adds	r1, r3, #4
 801dcaa:	911c      	str	r1, [sp, #112]	@ 0x70
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	e727      	b.n	801db00 <_vsnprintf+0x2d4>
                    if(!(flags & FLAGS_LEFT)) {
 801dcb0:	f016 0602 	ands.w	r6, r6, #2
 801dcb4:	d01d      	beq.n	801dcf2 <_vsnprintf+0x4c6>
                    unsigned int l = 1U;
 801dcb6:	2401      	movs	r4, #1
                    out((char)va_arg(va, int), buffer, idx++, maxlen);
 801dcb8:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801dcba:	1d03      	adds	r3, r0, #4
 801dcbc:	931c      	str	r3, [sp, #112]	@ 0x70
 801dcbe:	f105 0901 	add.w	r9, r5, #1
 801dcc2:	463b      	mov	r3, r7
 801dcc4:	462a      	mov	r2, r5
 801dcc6:	4659      	mov	r1, fp
 801dcc8:	7800      	ldrb	r0, [r0, #0]
 801dcca:	47c0      	blx	r8
                    if(flags & FLAGS_LEFT) {
 801dccc:	b9a6      	cbnz	r6, 801dcf8 <_vsnprintf+0x4cc>
                    format++;
 801dcce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dcd0:	3301      	adds	r3, #1
 801dcd2:	930f      	str	r3, [sp, #60]	@ 0x3c
                    break;
 801dcd4:	464d      	mov	r5, r9
 801dcd6:	e5b4      	b.n	801d842 <_vsnprintf+0x16>
                            out(' ', buffer, idx++, maxlen);
 801dcd8:	f102 0901 	add.w	r9, r2, #1
 801dcdc:	463b      	mov	r3, r7
 801dcde:	4659      	mov	r1, fp
 801dce0:	2020      	movs	r0, #32
 801dce2:	47c0      	blx	r8
                        while(l++ < width) {
 801dce4:	4623      	mov	r3, r4
                            out(' ', buffer, idx++, maxlen);
 801dce6:	464a      	mov	r2, r9
                        while(l++ < width) {
 801dce8:	1c5c      	adds	r4, r3, #1
 801dcea:	459a      	cmp	sl, r3
 801dcec:	d8f4      	bhi.n	801dcd8 <_vsnprintf+0x4ac>
 801dcee:	4615      	mov	r5, r2
 801dcf0:	e7e2      	b.n	801dcb8 <_vsnprintf+0x48c>
                    unsigned int l = 1U;
 801dcf2:	2301      	movs	r3, #1
 801dcf4:	462a      	mov	r2, r5
 801dcf6:	e7f7      	b.n	801dce8 <_vsnprintf+0x4bc>
 801dcf8:	464a      	mov	r2, r9
 801dcfa:	e006      	b.n	801dd0a <_vsnprintf+0x4de>
                            out(' ', buffer, idx++, maxlen);
 801dcfc:	1c56      	adds	r6, r2, #1
 801dcfe:	463b      	mov	r3, r7
 801dd00:	4659      	mov	r1, fp
 801dd02:	2020      	movs	r0, #32
 801dd04:	47c0      	blx	r8
                        while(l++ < width) {
 801dd06:	462c      	mov	r4, r5
                            out(' ', buffer, idx++, maxlen);
 801dd08:	4632      	mov	r2, r6
                        while(l++ < width) {
 801dd0a:	1c65      	adds	r5, r4, #1
 801dd0c:	45a2      	cmp	sl, r4
 801dd0e:	d8f5      	bhi.n	801dcfc <_vsnprintf+0x4d0>
 801dd10:	4691      	mov	r9, r2
 801dd12:	e7dc      	b.n	801dcce <_vsnprintf+0x4a2>
                    const char * p = va_arg(va, char *);
 801dd14:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801dd16:	1d1a      	adds	r2, r3, #4
 801dd18:	921c      	str	r2, [sp, #112]	@ 0x70
 801dd1a:	f8d3 9000 	ldr.w	r9, [r3]
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801dd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dd20:	b9fb      	cbnz	r3, 801dd62 <_vsnprintf+0x536>
 801dd22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dd26:	464b      	mov	r3, r9
 801dd28:	e001      	b.n	801dd2e <_vsnprintf+0x502>
    for(s = str; *s && maxsize--; ++s);
 801dd2a:	3301      	adds	r3, #1
 801dd2c:	460a      	mov	r2, r1
 801dd2e:	7819      	ldrb	r1, [r3, #0]
 801dd30:	b111      	cbz	r1, 801dd38 <_vsnprintf+0x50c>
 801dd32:	1e51      	subs	r1, r2, #1
 801dd34:	2a00      	cmp	r2, #0
 801dd36:	d1f8      	bne.n	801dd2a <_vsnprintf+0x4fe>
    return (unsigned int)(s - str);
 801dd38:	eba3 0309 	sub.w	r3, r3, r9
                    if(flags & FLAGS_PRECISION) {
 801dd3c:	f416 6280 	ands.w	r2, r6, #1024	@ 0x400
 801dd40:	920c      	str	r2, [sp, #48]	@ 0x30
 801dd42:	d003      	beq.n	801dd4c <_vsnprintf+0x520>
                        l = (l < precision ? l : precision);
 801dd44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dd46:	4293      	cmp	r3, r2
 801dd48:	bf28      	it	cs
 801dd4a:	4613      	movcs	r3, r2
                    if(!(flags & FLAGS_LEFT)) {
 801dd4c:	f016 0402 	ands.w	r4, r6, #2
 801dd50:	d009      	beq.n	801dd66 <_vsnprintf+0x53a>
 801dd52:	940d      	str	r4, [sp, #52]	@ 0x34
 801dd54:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 801dd58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801dd5a:	462a      	mov	r2, r5
 801dd5c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dd5e:	469a      	mov	sl, r3
 801dd60:	e01f      	b.n	801dda2 <_vsnprintf+0x576>
                    unsigned int l = _strnlen_s(p, precision ? precision : (size_t) -1);
 801dd62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dd64:	e7df      	b.n	801dd26 <_vsnprintf+0x4fa>
 801dd66:	462a      	mov	r2, r5
 801dd68:	4625      	mov	r5, r4
 801dd6a:	e006      	b.n	801dd7a <_vsnprintf+0x54e>
                            out(' ', buffer, idx++, maxlen);
 801dd6c:	1c54      	adds	r4, r2, #1
 801dd6e:	463b      	mov	r3, r7
 801dd70:	4659      	mov	r1, fp
 801dd72:	2020      	movs	r0, #32
 801dd74:	47c0      	blx	r8
                        while(l++ < width) {
 801dd76:	4633      	mov	r3, r6
                            out(' ', buffer, idx++, maxlen);
 801dd78:	4622      	mov	r2, r4
                        while(l++ < width) {
 801dd7a:	1c5e      	adds	r6, r3, #1
 801dd7c:	459a      	cmp	sl, r3
 801dd7e:	d8f5      	bhi.n	801dd6c <_vsnprintf+0x540>
 801dd80:	462c      	mov	r4, r5
 801dd82:	4633      	mov	r3, r6
 801dd84:	940d      	str	r4, [sp, #52]	@ 0x34
 801dd86:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 801dd8a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801dd8c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801dd8e:	469a      	mov	sl, r3
 801dd90:	e007      	b.n	801dda2 <_vsnprintf+0x576>
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801dd92:	461e      	mov	r6, r3
                        out(*(p++), buffer, idx++, maxlen);
 801dd94:	f109 0901 	add.w	r9, r9, #1
 801dd98:	1c54      	adds	r4, r2, #1
 801dd9a:	463b      	mov	r3, r7
 801dd9c:	4659      	mov	r1, fp
 801dd9e:	47c0      	blx	r8
 801dda0:	4622      	mov	r2, r4
                    while((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801dda2:	f899 0000 	ldrb.w	r0, [r9]
 801dda6:	b120      	cbz	r0, 801ddb2 <_vsnprintf+0x586>
 801dda8:	2d00      	cmp	r5, #0
 801ddaa:	d0f3      	beq.n	801dd94 <_vsnprintf+0x568>
 801ddac:	1e73      	subs	r3, r6, #1
 801ddae:	2e00      	cmp	r6, #0
 801ddb0:	d1ef      	bne.n	801dd92 <_vsnprintf+0x566>
                    if(flags & FLAGS_LEFT) {
 801ddb2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ddb4:	4615      	mov	r5, r2
 801ddb6:	4653      	mov	r3, sl
 801ddb8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 801ddbc:	b954      	cbnz	r4, 801ddd4 <_vsnprintf+0x5a8>
                    format++;
 801ddbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddc0:	3301      	adds	r3, #1
 801ddc2:	930f      	str	r3, [sp, #60]	@ 0x3c
                    break;
 801ddc4:	e53d      	b.n	801d842 <_vsnprintf+0x16>
                            out(' ', buffer, idx++, maxlen);
 801ddc6:	1c55      	adds	r5, r2, #1
 801ddc8:	463b      	mov	r3, r7
 801ddca:	4659      	mov	r1, fp
 801ddcc:	2020      	movs	r0, #32
 801ddce:	47c0      	blx	r8
                        while(l++ < width) {
 801ddd0:	4623      	mov	r3, r4
                            out(' ', buffer, idx++, maxlen);
 801ddd2:	462a      	mov	r2, r5
                        while(l++ < width) {
 801ddd4:	1c5c      	adds	r4, r3, #1
 801ddd6:	459a      	cmp	sl, r3
 801ddd8:	d8f5      	bhi.n	801ddc6 <_vsnprintf+0x59a>
 801ddda:	4615      	mov	r5, r2
 801dddc:	e7ef      	b.n	801ddbe <_vsnprintf+0x592>
        out = _out_null;
 801ddde:	f8df 8020 	ldr.w	r8, [pc, #32]	@ 801de00 <_vsnprintf+0x5d4>
 801dde2:	e52d      	b.n	801d840 <_vsnprintf+0x14>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801dde4:	42bd      	cmp	r5, r7
 801dde6:	d308      	bcc.n	801ddfa <_vsnprintf+0x5ce>
 801dde8:	1e7a      	subs	r2, r7, #1
 801ddea:	463b      	mov	r3, r7
 801ddec:	4659      	mov	r1, fp
 801ddee:	2000      	movs	r0, #0
 801ddf0:	47c0      	blx	r8

    // return written chars without terminating \0
    return (int)idx;
}
 801ddf2:	4628      	mov	r0, r5
 801ddf4:	b013      	add	sp, #76	@ 0x4c
 801ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801ddfa:	462a      	mov	r2, r5
 801ddfc:	e7f5      	b.n	801ddea <_vsnprintf+0x5be>
 801ddfe:	bf00      	nop
 801de00:	0801d4f9 	.word	0x0801d4f9

0801de04 <lv_snprintf>:

///////////////////////////////////////////////////////////////////////////////

int lv_snprintf(char * buffer, size_t count, const char * format, ...)
{
 801de04:	b40c      	push	{r2, r3}
 801de06:	b510      	push	{r4, lr}
 801de08:	b084      	sub	sp, #16
 801de0a:	460a      	mov	r2, r1
 801de0c:	ac06      	add	r4, sp, #24
 801de0e:	f854 3b04 	ldr.w	r3, [r4], #4
    va_list va;
    va_start(va, format);
 801de12:	9403      	str	r4, [sp, #12]
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 801de14:	9400      	str	r4, [sp, #0]
 801de16:	4601      	mov	r1, r0
 801de18:	4803      	ldr	r0, [pc, #12]	@ (801de28 <lv_snprintf+0x24>)
 801de1a:	f7ff fd07 	bl	801d82c <_vsnprintf>
    va_end(va);
    return ret;
}
 801de1e:	b004      	add	sp, #16
 801de20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de24:	b002      	add	sp, #8
 801de26:	4770      	bx	lr
 801de28:	0801d4f1 	.word	0x0801d4f1

0801de2c <lv_vsnprintf>:

int lv_vsnprintf(char * buffer, size_t count, const char * format, va_list va)
{
 801de2c:	b500      	push	{lr}
 801de2e:	b083      	sub	sp, #12
    return _vsnprintf(_out_buffer, buffer, count, format, va);
 801de30:	9300      	str	r3, [sp, #0]
 801de32:	4613      	mov	r3, r2
 801de34:	460a      	mov	r2, r1
 801de36:	4601      	mov	r1, r0
 801de38:	4802      	ldr	r0, [pc, #8]	@ (801de44 <lv_vsnprintf+0x18>)
 801de3a:	f7ff fcf7 	bl	801d82c <_vsnprintf>
}
 801de3e:	b003      	add	sp, #12
 801de40:	f85d fb04 	ldr.w	pc, [sp], #4
 801de44:	0801d4f1 	.word	0x0801d4f1

0801de48 <get_max_row>:
    }
}


static uint32_t get_max_row(lv_disp_t * disp, lv_coord_t area_w, lv_coord_t area_h)
{
 801de48:	b570      	push	{r4, r5, r6, lr}
 801de4a:	b082      	sub	sp, #8
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 801de4c:	6803      	ldr	r3, [r0, #0]
 801de4e:	68db      	ldr	r3, [r3, #12]
 801de50:	68db      	ldr	r3, [r3, #12]
 801de52:	fbb3 f1f1 	udiv	r1, r3, r1

    if(max_row > area_h) max_row = area_h;
 801de56:	4615      	mov	r5, r2
 801de58:	428a      	cmp	r2, r1
 801de5a:	db00      	blt.n	801de5e <get_max_row+0x16>
    int32_t max_row = (uint32_t)disp->driver->draw_buf->size / area_w;
 801de5c:	460d      	mov	r5, r1

    /*Round down the lines of draw_buf if rounding is added*/
    if(disp_refr->driver->rounder_cb) {
 801de5e:	4b17      	ldr	r3, [pc, #92]	@ (801debc <get_max_row+0x74>)
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	681b      	ldr	r3, [r3, #0]
 801de64:	699b      	ldr	r3, [r3, #24]
 801de66:	b31b      	cbz	r3, 801deb0 <get_max_row+0x68>
        lv_area_t tmp;
        tmp.x1 = 0;
 801de68:	2300      	movs	r3, #0
 801de6a:	f8ad 3000 	strh.w	r3, [sp]
        tmp.x2 = 0;
 801de6e:	f8ad 3004 	strh.w	r3, [sp, #4]
        tmp.y1 = 0;
 801de72:	f8ad 3002 	strh.w	r3, [sp, #2]

        lv_coord_t h_tmp = max_row;
 801de76:	b22c      	sxth	r4, r5
        do {
            tmp.y2 = h_tmp - 1;
 801de78:	4626      	mov	r6, r4
 801de7a:	3c01      	subs	r4, #1
 801de7c:	b224      	sxth	r4, r4
 801de7e:	f8ad 4006 	strh.w	r4, [sp, #6]
            disp_refr->driver->rounder_cb(disp_refr->driver, &tmp);
 801de82:	4b0e      	ldr	r3, [pc, #56]	@ (801debc <get_max_row+0x74>)
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	6818      	ldr	r0, [r3, #0]
 801de88:	6983      	ldr	r3, [r0, #24]
 801de8a:	4669      	mov	r1, sp
 801de8c:	4798      	blx	r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801de8e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801de92:	b293      	uxth	r3, r2
 801de94:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801de98:	1a5b      	subs	r3, r3, r1
 801de9a:	b29b      	uxth	r3, r3
 801de9c:	3301      	adds	r3, #1
 801de9e:	b21b      	sxth	r3, r3

            /*If this height fits into `max_row` then fine*/
            if(lv_area_get_height(&tmp) <= max_row) break;
 801dea0:	42ab      	cmp	r3, r5
 801dea2:	dd02      	ble.n	801deaa <get_max_row+0x62>

            /*Decrement the height of the area until it fits into `max_row` after rounding*/
            h_tmp--;
        } while(h_tmp > 0);
 801dea4:	2c00      	cmp	r4, #0
 801dea6:	dce7      	bgt.n	801de78 <get_max_row+0x30>
            h_tmp--;
 801dea8:	4626      	mov	r6, r4

        if(h_tmp <= 0) {
 801deaa:	2e00      	cmp	r6, #0
 801deac:	dd03      	ble.n	801deb6 <get_max_row+0x6e>
            LV_LOG_WARN("Can't set draw_buf height using the round function. (Wrong round_cb or to "
                        "small draw_buf)");
            return 0;
        }
        else {
            max_row = tmp.y2 + 1;
 801deae:	1c55      	adds	r5, r2, #1
        }
    }

    return max_row;
 801deb0:	4628      	mov	r0, r5
}
 801deb2:	b002      	add	sp, #8
 801deb4:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 801deb6:	2000      	movs	r0, #0
 801deb8:	e7fb      	b.n	801deb2 <get_max_row+0x6a>
 801deba:	bf00      	nop
 801debc:	200088e0 	.word	0x200088e0

0801dec0 <draw_buf_rotate_180>:

static void draw_buf_rotate_180(lv_disp_drv_t * drv, lv_area_t * area, lv_color_t * color_p)
{
 801dec0:	b510      	push	{r4, lr}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801dec2:	888b      	ldrh	r3, [r1, #4]
 801dec4:	f8b1 c000 	ldrh.w	ip, [r1]
 801dec8:	eba3 030c 	sub.w	r3, r3, ip
 801decc:	b29b      	uxth	r3, r3
 801dece:	3301      	adds	r3, #1
 801ded0:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ded2:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 801ded6:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 801deda:	ebac 0c0e 	sub.w	ip, ip, lr
 801dede:	fa1f fc8c 	uxth.w	ip, ip
 801dee2:	f10c 0c01 	add.w	ip, ip, #1
 801dee6:	fa0f fc8c 	sxth.w	ip, ip
    lv_coord_t area_w = lv_area_get_width(area);
    lv_coord_t area_h = lv_area_get_height(area);
    uint32_t total = area_w * area_h;
 801deea:	fb0c f303 	mul.w	r3, ip, r3
    /*Swap the beginning and end values*/
    lv_color_t tmp;
    uint32_t i = total - 1, j = 0;
 801deee:	3b01      	subs	r3, #1
 801def0:	f04f 0c00 	mov.w	ip, #0
    while(i > j) {
 801def4:	e00a      	b.n	801df0c <draw_buf_rotate_180+0x4c>
        tmp = color_p[i];
 801def6:	f832 e013 	ldrh.w	lr, [r2, r3, lsl #1]
        color_p[i] = color_p[j];
 801defa:	f832 401c 	ldrh.w	r4, [r2, ip, lsl #1]
 801defe:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
        color_p[j] = tmp;
 801df02:	f822 e01c 	strh.w	lr, [r2, ip, lsl #1]
        i--;
 801df06:	3b01      	subs	r3, #1
        j++;
 801df08:	f10c 0c01 	add.w	ip, ip, #1
    while(i > j) {
 801df0c:	4563      	cmp	r3, ip
 801df0e:	d8f2      	bhi.n	801def6 <draw_buf_rotate_180+0x36>
    }
    lv_coord_t tmp_coord;
    tmp_coord = area->y2;
 801df10:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    area->y2 = drv->ver_res - area->y1 - 1;
 801df14:	8843      	ldrh	r3, [r0, #2]
 801df16:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 801df1a:	eba3 030c 	sub.w	r3, r3, ip
 801df1e:	b29b      	uxth	r3, r3
 801df20:	3b01      	subs	r3, #1
 801df22:	80cb      	strh	r3, [r1, #6]
    area->y1 = drv->ver_res - tmp_coord - 1;
 801df24:	8843      	ldrh	r3, [r0, #2]
 801df26:	1a9b      	subs	r3, r3, r2
 801df28:	b29b      	uxth	r3, r3
 801df2a:	3b01      	subs	r3, #1
 801df2c:	804b      	strh	r3, [r1, #2]
    tmp_coord = area->x2;
 801df2e:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
    area->x2 = drv->hor_res - area->x1 - 1;
 801df32:	8803      	ldrh	r3, [r0, #0]
 801df34:	f8b1 c000 	ldrh.w	ip, [r1]
 801df38:	eba3 030c 	sub.w	r3, r3, ip
 801df3c:	b29b      	uxth	r3, r3
 801df3e:	3b01      	subs	r3, #1
 801df40:	808b      	strh	r3, [r1, #4]
    area->x1 = drv->hor_res - tmp_coord - 1;
 801df42:	8803      	ldrh	r3, [r0, #0]
 801df44:	1a9b      	subs	r3, r3, r2
 801df46:	b29b      	uxth	r3, r3
 801df48:	3b01      	subs	r3, #1
 801df4a:	800b      	strh	r3, [r1, #0]
}
 801df4c:	bd10      	pop	{r4, pc}

0801df4e <draw_buf_rotate_90>:

static void LV_ATTRIBUTE_FAST_MEM draw_buf_rotate_90(bool invert_i, lv_coord_t area_w, lv_coord_t area_h,
                                                     lv_color_t * orig_color_p, lv_color_t * rot_buf)
{
 801df4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df52:	4604      	mov	r4, r0
 801df54:	4608      	mov	r0, r1
 801df56:	4611      	mov	r1, r2
 801df58:	9d06      	ldr	r5, [sp, #24]

    uint32_t invert = (area_w * area_h) - 1;
 801df5a:	fb02 f800 	mul.w	r8, r2, r0
 801df5e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    uint32_t initial_i = ((area_w - 1) * area_h);
 801df62:	1e47      	subs	r7, r0, #1
 801df64:	fb02 f707 	mul.w	r7, r2, r7
    for(lv_coord_t y = 0; y < area_h; y++) {
 801df68:	2600      	movs	r6, #0
 801df6a:	e011      	b.n	801df90 <draw_buf_rotate_90+0x42>
        for(lv_coord_t x = 0; x < area_w; x++) {
            rot_buf[i] = *(orig_color_p++);
            if(invert_i)
                i += area_h;
            else
                i -= area_h;
 801df6c:	ebae 0e01 	sub.w	lr, lr, r1
        for(lv_coord_t x = 0; x < area_w; x++) {
 801df70:	f10c 0c01 	add.w	ip, ip, #1
 801df74:	fa0f fc8c 	sxth.w	ip, ip
 801df78:	4584      	cmp	ip, r0
 801df7a:	da07      	bge.n	801df8c <draw_buf_rotate_90+0x3e>
            rot_buf[i] = *(orig_color_p++);
 801df7c:	f833 2b02 	ldrh.w	r2, [r3], #2
 801df80:	f825 201e 	strh.w	r2, [r5, lr, lsl #1]
            if(invert_i)
 801df84:	2c00      	cmp	r4, #0
 801df86:	d0f1      	beq.n	801df6c <draw_buf_rotate_90+0x1e>
                i += area_h;
 801df88:	448e      	add	lr, r1
 801df8a:	e7f1      	b.n	801df70 <draw_buf_rotate_90+0x22>
    for(lv_coord_t y = 0; y < area_h; y++) {
 801df8c:	3601      	adds	r6, #1
 801df8e:	b236      	sxth	r6, r6
 801df90:	428e      	cmp	r6, r1
 801df92:	da07      	bge.n	801dfa4 <draw_buf_rotate_90+0x56>
        uint32_t i = initial_i + y;
 801df94:	eb06 0e07 	add.w	lr, r6, r7
        if(invert_i)
 801df98:	b10c      	cbz	r4, 801df9e <draw_buf_rotate_90+0x50>
            i = invert - i;
 801df9a:	eba8 0e0e 	sub.w	lr, r8, lr
{
 801df9e:	f04f 0c00 	mov.w	ip, #0
 801dfa2:	e7e9      	b.n	801df78 <draw_buf_rotate_90+0x2a>
        }
    }
}
 801dfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801dfa8 <draw_buf_rotate_90_sqr>:
/**
 * Rotate a square image 90/270 degrees in place.
 * @note inspired by https://stackoverflow.com/a/43694906
 */
static void draw_buf_rotate_90_sqr(bool is_270, lv_coord_t w, lv_color_t * color_p)
{
 801dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(lv_coord_t i = 0; i < w / 2; i++) {
 801dfac:	2400      	movs	r4, #0
 801dfae:	e04c      	b.n	801e04a <draw_buf_rotate_90_sqr+0xa2>
                    &color_p[j * w + inv_i]
                );
            }
            else {
                draw_buf_rotate4(
                    &color_p[i * w + j],
 801dfb0:	fb01 5604 	mla	r6, r1, r4, r5
                    &color_p[j * w + inv_i],
 801dfb4:	fb01 c505 	mla	r5, r1, r5, ip
                    &color_p[inv_i * w + inv_j],
 801dfb8:	fb01 3c0c 	mla	ip, r1, ip, r3
                    &color_p[inv_j * w + i]
 801dfbc:	fb01 4303 	mla	r3, r1, r3, r4
    tmp = *a;
 801dfc0:	f832 7016 	ldrh.w	r7, [r2, r6, lsl #1]
    *a = *b;
 801dfc4:	f832 8015 	ldrh.w	r8, [r2, r5, lsl #1]
 801dfc8:	f822 8016 	strh.w	r8, [r2, r6, lsl #1]
    *b = *c;
 801dfcc:	f832 601c 	ldrh.w	r6, [r2, ip, lsl #1]
 801dfd0:	f822 6015 	strh.w	r6, [r2, r5, lsl #1]
    *c = *d;
 801dfd4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 801dfd8:	f822 501c 	strh.w	r5, [r2, ip, lsl #1]
    *d = tmp;
 801dfdc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 801dfe0:	f10e 0e01 	add.w	lr, lr, #1
 801dfe4:	fa0f fe8e 	sxth.w	lr, lr
 801dfe8:	4675      	mov	r5, lr
 801dfea:	1c4b      	adds	r3, r1, #1
 801dfec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801dff0:	ebbe 0f63 	cmp.w	lr, r3, asr #1
 801dff4:	da27      	bge.n	801e046 <draw_buf_rotate_90_sqr+0x9e>
            lv_coord_t inv_i = (w - 1) - i;
 801dff6:	b28b      	uxth	r3, r1
 801dff8:	eba3 0c04 	sub.w	ip, r3, r4
 801dffc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801e000:	fa0f fc8c 	sxth.w	ip, ip
            lv_coord_t inv_j = (w - 1) - j;
 801e004:	fa1f fe8e 	uxth.w	lr, lr
 801e008:	eba3 030e 	sub.w	r3, r3, lr
 801e00c:	3b01      	subs	r3, #1
 801e00e:	b21b      	sxth	r3, r3
            if(is_270) {
 801e010:	2800      	cmp	r0, #0
 801e012:	d0cd      	beq.n	801dfb0 <draw_buf_rotate_90_sqr+0x8>
                    &color_p[i * w + j],
 801e014:	fb01 5704 	mla	r7, r1, r4, r5
                    &color_p[inv_j * w + i],
 801e018:	fb01 4603 	mla	r6, r1, r3, r4
                    &color_p[inv_i * w + inv_j],
 801e01c:	fb01 330c 	mla	r3, r1, ip, r3
                    &color_p[j * w + inv_i]
 801e020:	fb01 cc05 	mla	ip, r1, r5, ip
    tmp = *a;
 801e024:	f832 5017 	ldrh.w	r5, [r2, r7, lsl #1]
    *a = *b;
 801e028:	f832 8016 	ldrh.w	r8, [r2, r6, lsl #1]
 801e02c:	f822 8017 	strh.w	r8, [r2, r7, lsl #1]
    *b = *c;
 801e030:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 801e034:	f822 7016 	strh.w	r7, [r2, r6, lsl #1]
    *c = *d;
 801e038:	f832 601c 	ldrh.w	r6, [r2, ip, lsl #1]
 801e03c:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
    *d = tmp;
 801e040:	f822 501c 	strh.w	r5, [r2, ip, lsl #1]
}
 801e044:	e7cc      	b.n	801dfe0 <draw_buf_rotate_90_sqr+0x38>
    for(lv_coord_t i = 0; i < w / 2; i++) {
 801e046:	3401      	adds	r4, #1
 801e048:	b224      	sxth	r4, r4
 801e04a:	eb01 73d1 	add.w	r3, r1, r1, lsr #31
 801e04e:	ebb4 0f63 	cmp.w	r4, r3, asr #1
 801e052:	da02      	bge.n	801e05a <draw_buf_rotate_90_sqr+0xb2>
        for(lv_coord_t j = 0; j < (w + 1) / 2; j++) {
 801e054:	f04f 0e00 	mov.w	lr, #0
 801e058:	e7c6      	b.n	801dfe8 <draw_buf_rotate_90_sqr+0x40>
                );
            }

        }
    }
}
 801e05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e05e <call_flush_cb>:
            draw_buf->buf_act = draw_buf->buf1;
    }
}

static void call_flush_cb(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p)
{
 801e05e:	b510      	push	{r4, lr}
 801e060:	b082      	sub	sp, #8
    REFR_TRACE("Calling flush_cb on (%d;%d)(%d;%d) area with %p image pointer", area->x1, area->y1, area->x2, area->y2,
               (void *)color_p);

    lv_area_t offset_area = {
        .x1 = area->x1 + drv->offset_x,
 801e062:	880c      	ldrh	r4, [r1, #0]
 801e064:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 801e068:	4474      	add	r4, lr
    lv_area_t offset_area = {
 801e06a:	f8ad 4000 	strh.w	r4, [sp]
        .y1 = area->y1 + drv->offset_y,
 801e06e:	884c      	ldrh	r4, [r1, #2]
 801e070:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 801e074:	4464      	add	r4, ip
    lv_area_t offset_area = {
 801e076:	f8ad 4002 	strh.w	r4, [sp, #2]
        .x2 = area->x2 + drv->offset_x,
 801e07a:	888c      	ldrh	r4, [r1, #4]
 801e07c:	44a6      	add	lr, r4
    lv_area_t offset_area = {
 801e07e:	f8ad e004 	strh.w	lr, [sp, #4]
        .y2 = area->y2 + drv->offset_y
 801e082:	88c9      	ldrh	r1, [r1, #6]
 801e084:	448c      	add	ip, r1
    lv_area_t offset_area = {
 801e086:	f8ad c006 	strh.w	ip, [sp, #6]
    };

    drv->flush_cb(drv, &offset_area, color_p);
 801e08a:	6943      	ldr	r3, [r0, #20]
 801e08c:	4669      	mov	r1, sp
 801e08e:	4798      	blx	r3
}
 801e090:	b002      	add	sp, #8
 801e092:	bd10      	pop	{r4, pc}

0801e094 <perf_monitor_init>:

#if LV_USE_PERF_MONITOR
static void perf_monitor_init(perf_monitor_t * _perf_monitor)
{
    LV_ASSERT_NULL(_perf_monitor);
 801e094:	b138      	cbz	r0, 801e0a6 <perf_monitor_init+0x12>
    _perf_monitor->elaps_sum = 0;
 801e096:	2200      	movs	r2, #0
 801e098:	6042      	str	r2, [r0, #4]
    _perf_monitor->fps_sum_all = 0;
 801e09a:	6102      	str	r2, [r0, #16]
    _perf_monitor->fps_sum_cnt = 0;
 801e09c:	60c2      	str	r2, [r0, #12]
    _perf_monitor->frame_cnt = 0;
 801e09e:	6082      	str	r2, [r0, #8]
    _perf_monitor->perf_last_time = 0;
 801e0a0:	6002      	str	r2, [r0, #0]
    _perf_monitor->perf_label = NULL;
 801e0a2:	6142      	str	r2, [r0, #20]
}
 801e0a4:	4770      	bx	lr
    LV_ASSERT_NULL(_perf_monitor);
 801e0a6:	e7fe      	b.n	801e0a6 <perf_monitor_init+0x12>

0801e0a8 <mem_monitor_init>:
#endif

#if LV_USE_MEM_MONITOR
static void mem_monitor_init(mem_monitor_t * _mem_monitor)
{
    LV_ASSERT_NULL(_mem_monitor);
 801e0a8:	b118      	cbz	r0, 801e0b2 <mem_monitor_init+0xa>
    _mem_monitor->mem_last_time = 0;
 801e0aa:	2200      	movs	r2, #0
 801e0ac:	6002      	str	r2, [r0, #0]
    _mem_monitor->mem_label = NULL;
 801e0ae:	6042      	str	r2, [r0, #4]
}
 801e0b0:	4770      	bx	lr
    LV_ASSERT_NULL(_mem_monitor);
 801e0b2:	e7fe      	b.n	801e0b2 <mem_monitor_init+0xa>

0801e0b4 <lv_refr_get_top_obj>:
{
 801e0b4:	b570      	push	{r4, r5, r6, lr}
 801e0b6:	b082      	sub	sp, #8
 801e0b8:	4606      	mov	r6, r0
 801e0ba:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e0bc:	2200      	movs	r2, #0
 801e0be:	3114      	adds	r1, #20
 801e0c0:	f7e3 fdcc 	bl	8001c5c <_lv_area_is_in>
 801e0c4:	b368      	cbz	r0, 801e122 <lv_refr_get_top_obj+0x6e>
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 801e0c6:	2101      	movs	r1, #1
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f7fa f9e0 	bl	801848e <lv_obj_has_flag>
 801e0ce:	bb58      	cbnz	r0, 801e128 <lv_refr_get_top_obj+0x74>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 801e0d0:	4620      	mov	r0, r4
 801e0d2:	f7fb f93d 	bl	8019350 <_lv_obj_get_layer_type>
 801e0d6:	bb48      	cbnz	r0, 801e12c <lv_refr_get_top_obj+0x78>
    info.res = LV_COVER_RES_COVER;
 801e0d8:	2300      	movs	r3, #0
 801e0da:	f88d 3000 	strb.w	r3, [sp]
    info.area = area_p;
 801e0de:	9601      	str	r6, [sp, #4]
    lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e0e0:	466a      	mov	r2, sp
 801e0e2:	2112      	movs	r1, #18
 801e0e4:	4620      	mov	r0, r4
 801e0e6:	f7f2 fdef 	bl	8010cc8 <lv_event_send>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 801e0ea:	f89d 3000 	ldrb.w	r3, [sp]
 801e0ee:	2b02      	cmp	r3, #2
 801e0f0:	d01e      	beq.n	801e130 <lv_refr_get_top_obj+0x7c>
    int32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e0f2:	4620      	mov	r0, r4
 801e0f4:	f7ff f87d 	bl	801d1f2 <lv_obj_get_child_cnt>
    for(i = child_cnt - 1; i >= 0; i--) {
 801e0f8:	1e45      	subs	r5, r0, #1
    lv_obj_t * found_p = NULL;
 801e0fa:	2000      	movs	r0, #0
    for(i = child_cnt - 1; i >= 0; i--) {
 801e0fc:	e000      	b.n	801e100 <lv_refr_get_top_obj+0x4c>
 801e0fe:	3d01      	subs	r5, #1
 801e100:	2d00      	cmp	r5, #0
 801e102:	db08      	blt.n	801e116 <lv_refr_get_top_obj+0x62>
        lv_obj_t * child = obj->spec_attr->children[i];
 801e104:	68a3      	ldr	r3, [r4, #8]
 801e106:	681b      	ldr	r3, [r3, #0]
        found_p = lv_refr_get_top_obj(area_p, child);
 801e108:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801e10c:	4630      	mov	r0, r6
 801e10e:	f7ff ffd1 	bl	801e0b4 <lv_refr_get_top_obj>
        if(found_p != NULL) {
 801e112:	2800      	cmp	r0, #0
 801e114:	d0f3      	beq.n	801e0fe <lv_refr_get_top_obj+0x4a>
    if(found_p == NULL && info.res == LV_COVER_RES_COVER) {
 801e116:	b928      	cbnz	r0, 801e124 <lv_refr_get_top_obj+0x70>
 801e118:	f89d 3000 	ldrb.w	r3, [sp]
 801e11c:	b913      	cbnz	r3, 801e124 <lv_refr_get_top_obj+0x70>
        found_p = obj;
 801e11e:	4620      	mov	r0, r4
 801e120:	e000      	b.n	801e124 <lv_refr_get_top_obj+0x70>
    if(_lv_area_is_in(area_p, &obj->coords, 0) == false) return NULL;
 801e122:	2000      	movs	r0, #0
}
 801e124:	b002      	add	sp, #8
 801e126:	bd70      	pop	{r4, r5, r6, pc}
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return NULL;
 801e128:	2000      	movs	r0, #0
 801e12a:	e7fb      	b.n	801e124 <lv_refr_get_top_obj+0x70>
    if(_lv_obj_get_layer_type(obj) != LV_LAYER_TYPE_NONE) return NULL;
 801e12c:	2000      	movs	r0, #0
 801e12e:	e7f9      	b.n	801e124 <lv_refr_get_top_obj+0x70>
    if(info.res == LV_COVER_RES_MASKED) return NULL;
 801e130:	2000      	movs	r0, #0
 801e132:	e7f7      	b.n	801e124 <lv_refr_get_top_obj+0x70>

0801e134 <layer_get_area>:
{
 801e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e138:	b088      	sub	sp, #32
 801e13a:	4680      	mov	r8, r0
 801e13c:	460e      	mov	r6, r1
 801e13e:	4614      	mov	r4, r2
 801e140:	461f      	mov	r7, r3
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 801e142:	4608      	mov	r0, r1
 801e144:	f7fb f8cb 	bl	80192de <_lv_obj_get_ext_draw_size>
 801e148:	4605      	mov	r5, r0
    lv_obj_get_coords(obj, &obj_coords_ext);
 801e14a:	a906      	add	r1, sp, #24
 801e14c:	4630      	mov	r0, r6
 801e14e:	f7fb fa6c 	bl	801962a <lv_obj_get_coords>
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 801e152:	462a      	mov	r2, r5
 801e154:	4629      	mov	r1, r5
 801e156:	a806      	add	r0, sp, #24
 801e158:	f7e3 fc2e 	bl	80019b8 <lv_area_increase>
    if(layer_type == LV_LAYER_TYPE_TRANSFORM) {
 801e15c:	2c02      	cmp	r4, #2
 801e15e:	d005      	beq.n	801e16c <layer_get_area+0x38>
    else if(layer_type == LV_LAYER_TYPE_SIMPLE) {
 801e160:	2c01      	cmp	r4, #1
 801e162:	d031      	beq.n	801e1c8 <layer_get_area+0x94>
        return LV_RES_INV;
 801e164:	2000      	movs	r0, #0
}
 801e166:	b008      	add	sp, #32
 801e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_area_t tranf_coords = obj_coords_ext;
 801e16c:	ac02      	add	r4, sp, #8
 801e16e:	ab08      	add	r3, sp, #32
 801e170:	e913 0003 	ldmdb	r3, {r0, r1}
 801e174:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &tranf_coords, false, false);
 801e178:	2300      	movs	r3, #0
 801e17a:	461a      	mov	r2, r3
 801e17c:	4621      	mov	r1, r4
 801e17e:	4630      	mov	r0, r6
 801e180:	f7fb fd63 	bl	8019c4a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &tranf_coords)) {
 801e184:	4622      	mov	r2, r4
 801e186:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801e18a:	4668      	mov	r0, sp
 801e18c:	f7e3 fc32 	bl	80019f4 <_lv_area_intersect>
 801e190:	b908      	cbnz	r0, 801e196 <layer_get_area+0x62>
            return LV_RES_INV;
 801e192:	2000      	movs	r0, #0
 801e194:	e7e7      	b.n	801e166 <layer_get_area+0x32>
        lv_area_t inverse_clip_coords_for_obj = clip_coords_for_obj;
 801e196:	ac04      	add	r4, sp, #16
 801e198:	466b      	mov	r3, sp
 801e19a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801e19e:	e884 0003 	stmia.w	r4, {r0, r1}
        lv_obj_get_transformed_area(obj, &inverse_clip_coords_for_obj, false, true);
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	4621      	mov	r1, r4
 801e1a8:	4630      	mov	r0, r6
 801e1aa:	f7fb fd4e 	bl	8019c4a <lv_obj_get_transformed_area>
        if(!_lv_area_intersect(&inverse_clip_coords_for_obj, &inverse_clip_coords_for_obj, &obj_coords_ext)) {
 801e1ae:	aa06      	add	r2, sp, #24
 801e1b0:	4621      	mov	r1, r4
 801e1b2:	4620      	mov	r0, r4
 801e1b4:	f7e3 fc1e 	bl	80019f4 <_lv_area_intersect>
 801e1b8:	2800      	cmp	r0, #0
 801e1ba:	d0ea      	beq.n	801e192 <layer_get_area+0x5e>
        *layer_area_out = inverse_clip_coords_for_obj;
 801e1bc:	4623      	mov	r3, r4
 801e1be:	cb03      	ldmia	r3!, {r0, r1}
 801e1c0:	6038      	str	r0, [r7, #0]
 801e1c2:	6079      	str	r1, [r7, #4]
    return LV_RES_OK;
 801e1c4:	2001      	movs	r0, #1
 801e1c6:	e7ce      	b.n	801e166 <layer_get_area+0x32>
        if(!_lv_area_intersect(&clip_coords_for_obj, draw_ctx->clip_area, &obj_coords_ext)) {
 801e1c8:	aa06      	add	r2, sp, #24
 801e1ca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801e1ce:	a804      	add	r0, sp, #16
 801e1d0:	f7e3 fc10 	bl	80019f4 <_lv_area_intersect>
 801e1d4:	2800      	cmp	r0, #0
 801e1d6:	d0c6      	beq.n	801e166 <layer_get_area+0x32>
        *layer_area_out = clip_coords_for_obj;
 801e1d8:	ab04      	add	r3, sp, #16
 801e1da:	cb03      	ldmia	r3!, {r0, r1}
 801e1dc:	6038      	str	r0, [r7, #0]
 801e1de:	6079      	str	r1, [r7, #4]
    return LV_RES_OK;
 801e1e0:	4620      	mov	r0, r4
 801e1e2:	e7c0      	b.n	801e166 <layer_get_area+0x32>

0801e1e4 <layer_alpha_test>:
{
 801e1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1e6:	b083      	sub	sp, #12
 801e1e8:	460d      	mov	r5, r1
 801e1ea:	4614      	mov	r4, r2
    if(flags & LV_DRAW_LAYER_FLAG_HAS_ALPHA) {
 801e1ec:	f013 0f01 	tst.w	r3, #1
 801e1f0:	d10d      	bne.n	801e20e <layer_alpha_test+0x2a>
        has_alpha = false;
 801e1f2:	2200      	movs	r2, #0
    if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 801e1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1f8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801e1fc:	4299      	cmp	r1, r3
 801e1fe:	dd00      	ble.n	801e202 <layer_alpha_test+0x1e>
 801e200:	81e3      	strh	r3, [r4, #14]
    lv_draw_layer_adjust(draw_ctx, layer_ctx, has_alpha ? LV_DRAW_LAYER_FLAG_HAS_ALPHA : LV_DRAW_LAYER_FLAG_NONE);
 801e202:	4621      	mov	r1, r4
 801e204:	4628      	mov	r0, r5
 801e206:	f7ea fa25 	bl	8008654 <lv_draw_layer_adjust>
}
 801e20a:	b003      	add	sp, #12
 801e20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e20e:	4606      	mov	r6, r0
        if(_lv_area_is_in(&layer_ctx->area_act, &obj->coords, 0)) {
 801e210:	f102 0708 	add.w	r7, r2, #8
 801e214:	2200      	movs	r2, #0
 801e216:	f100 0114 	add.w	r1, r0, #20
 801e21a:	4638      	mov	r0, r7
 801e21c:	f7e3 fd1e 	bl	8001c5c <_lv_area_is_in>
 801e220:	b938      	cbnz	r0, 801e232 <layer_alpha_test+0x4e>
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_alpha - 1;
 801e222:	8963      	ldrh	r3, [r4, #10]
 801e224:	8a22      	ldrh	r2, [r4, #16]
 801e226:	4413      	add	r3, r2
 801e228:	b29b      	uxth	r3, r3
 801e22a:	3b01      	subs	r3, #1
 801e22c:	81e3      	strh	r3, [r4, #14]
 801e22e:	2201      	movs	r2, #1
 801e230:	e7e0      	b.n	801e1f4 <layer_alpha_test+0x10>
            info.res = LV_COVER_RES_COVER;
 801e232:	2300      	movs	r3, #0
 801e234:	f88d 3000 	strb.w	r3, [sp]
            info.area = &layer_ctx->area_act;
 801e238:	9701      	str	r7, [sp, #4]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e23a:	466a      	mov	r2, sp
 801e23c:	2112      	movs	r1, #18
 801e23e:	4630      	mov	r0, r6
 801e240:	f7f2 fd42 	bl	8010cc8 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) has_alpha = false;
 801e244:	f89d 3000 	ldrb.w	r3, [sp]
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d1ea      	bne.n	801e222 <layer_alpha_test+0x3e>
 801e24c:	2200      	movs	r2, #0
 801e24e:	e7d1      	b.n	801e1f4 <layer_alpha_test+0x10>

0801e250 <lv_refr_join_area>:
{
 801e250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e254:	b083      	sub	sp, #12
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 801e256:	2500      	movs	r5, #0
 801e258:	e051      	b.n	801e2fe <lv_refr_join_area+0xae>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 801e25a:	3401      	adds	r4, #1
 801e25c:	4b30      	ldr	r3, [pc, #192]	@ (801e320 <lv_refr_join_area+0xd0>)
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	f8b3 2150 	ldrh.w	r2, [r3, #336]	@ 0x150
 801e264:	42a2      	cmp	r2, r4
 801e266:	d949      	bls.n	801e2fc <lv_refr_join_area+0xac>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 801e268:	191a      	adds	r2, r3, r4
 801e26a:	f892 2130 	ldrb.w	r2, [r2, #304]	@ 0x130
 801e26e:	2a00      	cmp	r2, #0
 801e270:	d1f3      	bne.n	801e25a <lv_refr_join_area+0xa>
 801e272:	42ac      	cmp	r4, r5
 801e274:	d0f1      	beq.n	801e25a <lv_refr_join_area+0xa>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 801e276:	1da8      	adds	r0, r5, #6
 801e278:	1da1      	adds	r1, r4, #6
 801e27a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801e27e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801e282:	f7e3 fcc9 	bl	8001c18 <_lv_area_is_on>
 801e286:	2800      	cmp	r0, #0
 801e288:	d0e7      	beq.n	801e25a <lv_refr_join_area+0xa>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 801e28a:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 801e320 <lv_refr_join_area+0xd0>
 801e28e:	f8d8 3000 	ldr.w	r3, [r8]
 801e292:	1da9      	adds	r1, r5, #6
 801e294:	00ce      	lsls	r6, r1, #3
 801e296:	1da2      	adds	r2, r4, #6
 801e298:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801e29c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e2a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801e2a4:	4668      	mov	r0, sp
 801e2a6:	f7e3 fbd2 	bl	8001a4e <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 801e2aa:	4668      	mov	r0, sp
 801e2ac:	f7e3 fb76 	bl	800199c <lv_area_get_size>
 801e2b0:	4607      	mov	r7, r0
 801e2b2:	f8d8 0000 	ldr.w	r0, [r8]
 801e2b6:	4430      	add	r0, r6
 801e2b8:	f7e3 fb70 	bl	800199c <lv_area_get_size>
 801e2bc:	4606      	mov	r6, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 801e2be:	f8d8 0000 	ldr.w	r0, [r8]
 801e2c2:	4448      	add	r0, r9
 801e2c4:	f7e3 fb6a 	bl	800199c <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 801e2c8:	4406      	add	r6, r0
 801e2ca:	42b7      	cmp	r7, r6
 801e2cc:	d2c5      	bcs.n	801e25a <lv_refr_join_area+0xa>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 801e2ce:	f8d8 2000 	ldr.w	r2, [r8]
    dest->x1 = src->x1;
 801e2d2:	f9bd 1000 	ldrsh.w	r1, [sp]
 801e2d6:	1dab      	adds	r3, r5, #6
 801e2d8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
    dest->y1 = src->y1;
 801e2dc:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 801e2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e2e4:	8059      	strh	r1, [r3, #2]
    dest->x2 = src->x2;
 801e2e6:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 801e2ea:	8099      	strh	r1, [r3, #4]
    dest->y2 = src->y2;
 801e2ec:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801e2f0:	80d9      	strh	r1, [r3, #6]
                disp_refr->inv_area_joined[join_from] = 1;
 801e2f2:	4422      	add	r2, r4
 801e2f4:	2301      	movs	r3, #1
 801e2f6:	f882 3130 	strb.w	r3, [r2, #304]	@ 0x130
 801e2fa:	e7ae      	b.n	801e25a <lv_refr_join_area+0xa>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 801e2fc:	3501      	adds	r5, #1
 801e2fe:	4b08      	ldr	r3, [pc, #32]	@ (801e320 <lv_refr_join_area+0xd0>)
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	f8b3 2150 	ldrh.w	r2, [r3, #336]	@ 0x150
 801e306:	42aa      	cmp	r2, r5
 801e308:	d906      	bls.n	801e318 <lv_refr_join_area+0xc8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 801e30a:	442b      	add	r3, r5
 801e30c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801e310:	2b00      	cmp	r3, #0
 801e312:	d1f3      	bne.n	801e2fc <lv_refr_join_area+0xac>
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 801e314:	2400      	movs	r4, #0
 801e316:	e7a1      	b.n	801e25c <lv_refr_join_area+0xc>
}
 801e318:	b003      	add	sp, #12
 801e31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e31e:	bf00      	nop
 801e320:	200088e0 	.word	0x200088e0

0801e324 <refr_sync_areas>:
    if(!disp_refr->driver->direct_mode) return;
 801e324:	4b4f      	ldr	r3, [pc, #316]	@ (801e464 <refr_sync_areas+0x140>)
 801e326:	6818      	ldr	r0, [r3, #0]
 801e328:	6803      	ldr	r3, [r0, #0]
 801e32a:	7c1a      	ldrb	r2, [r3, #16]
 801e32c:	f012 0f01 	tst.w	r2, #1
 801e330:	f000 8096 	beq.w	801e460 <refr_sync_areas+0x13c>
    if(disp_refr->driver->draw_buf->buf2 == NULL) return;
 801e334:	68db      	ldr	r3, [r3, #12]
 801e336:	685b      	ldr	r3, [r3, #4]
 801e338:	2b00      	cmp	r3, #0
 801e33a:	f000 8091 	beq.w	801e460 <refr_sync_areas+0x13c>
{
 801e33e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e342:	b08d      	sub	sp, #52	@ 0x34
    if(_lv_ll_is_empty(&disp_refr->sync_areas)) return;
 801e344:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e348:	f7f8 f9b5 	bl	80166b6 <_lv_ll_is_empty>
 801e34c:	2800      	cmp	r0, #0
 801e34e:	f040 8084 	bne.w	801e45a <refr_sync_areas+0x136>
    void * buf_off_screen = disp_refr->driver->draw_buf->buf_act;
 801e352:	4b44      	ldr	r3, [pc, #272]	@ (801e464 <refr_sync_areas+0x140>)
 801e354:	6818      	ldr	r0, [r3, #0]
 801e356:	6803      	ldr	r3, [r0, #0]
 801e358:	68db      	ldr	r3, [r3, #12]
 801e35a:	f8d3 b008 	ldr.w	fp, [r3, #8]
    void * buf_on_screen = disp_refr->driver->draw_buf->buf_act == disp_refr->driver->draw_buf->buf1
 801e35e:	f8d3 a000 	ldr.w	sl, [r3]
                           : disp_refr->driver->draw_buf->buf1;
 801e362:	45da      	cmp	sl, fp
 801e364:	d00a      	beq.n	801e37c <refr_sync_areas+0x58>
    lv_coord_t stride = lv_disp_get_hor_res(disp_refr);
 801e366:	f7f4 ff8f 	bl	8013288 <lv_disp_get_hor_res>
 801e36a:	4681      	mov	r9, r0
    lv_area_t res[4] = {0};
 801e36c:	2220      	movs	r2, #32
 801e36e:	2100      	movs	r1, #0
 801e370:	a804      	add	r0, sp, #16
 801e372:	f00b f904 	bl	802957e <memset>
    for(i = 0; i < disp_refr->inv_p; i++) {
 801e376:	f04f 0800 	mov.w	r8, #0
 801e37a:	e03a      	b.n	801e3f2 <refr_sync_areas+0xce>
                           : disp_refr->driver->draw_buf->buf1;
 801e37c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801e380:	e7f1      	b.n	801e366 <refr_sync_areas+0x42>
                    new_area = _lv_ll_ins_prev(&disp_refr->sync_areas, sync_area);
 801e382:	4b38      	ldr	r3, [pc, #224]	@ (801e464 <refr_sync_areas+0x140>)
 801e384:	6818      	ldr	r0, [r3, #0]
 801e386:	4629      	mov	r1, r5
 801e388:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e38c:	f7f8 f8f8 	bl	8016580 <_lv_ll_ins_prev>
 801e390:	4602      	mov	r2, r0
                    *new_area = res[j];
 801e392:	ab0c      	add	r3, sp, #48	@ 0x30
 801e394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e398:	3b20      	subs	r3, #32
 801e39a:	cb03      	ldmia	r3!, {r0, r1}
 801e39c:	6010      	str	r0, [r2, #0]
 801e39e:	6051      	str	r1, [r2, #4]
                for(j = 0; j < res_c; j++) {
 801e3a0:	3401      	adds	r4, #1
 801e3a2:	b264      	sxtb	r4, r4
 801e3a4:	42b4      	cmp	r4, r6
 801e3a6:	dbec      	blt.n	801e382 <refr_sync_areas+0x5e>
                _lv_ll_remove(&disp_refr->sync_areas, sync_area);
 801e3a8:	4b2e      	ldr	r3, [pc, #184]	@ (801e464 <refr_sync_areas+0x140>)
 801e3aa:	6818      	ldr	r0, [r3, #0]
 801e3ac:	4629      	mov	r1, r5
 801e3ae:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e3b2:	f7f8 f918 	bl	80165e6 <_lv_ll_remove>
                lv_mem_free(sync_area);
 801e3b6:	4628      	mov	r0, r5
 801e3b8:	f7f8 facc 	bl	8016954 <lv_mem_free>
                for(j = 0; j < res_c; j++) {
 801e3bc:	463d      	mov	r5, r7
        while(sync_area != NULL) {
 801e3be:	b1b5      	cbz	r5, 801e3ee <refr_sync_areas+0xca>
            next_area = _lv_ll_get_next(&disp_refr->sync_areas, sync_area);
 801e3c0:	4c28      	ldr	r4, [pc, #160]	@ (801e464 <refr_sync_areas+0x140>)
 801e3c2:	6820      	ldr	r0, [r4, #0]
 801e3c4:	4629      	mov	r1, r5
 801e3c6:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e3ca:	f7f8 f8d2 	bl	8016572 <_lv_ll_get_next>
 801e3ce:	4607      	mov	r7, r0
            res_c = _lv_area_diff(res, sync_area, &disp_refr->inv_areas[i]);
 801e3d0:	6823      	ldr	r3, [r4, #0]
 801e3d2:	f108 0206 	add.w	r2, r8, #6
 801e3d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e3da:	4629      	mov	r1, r5
 801e3dc:	a804      	add	r0, sp, #16
 801e3de:	f7e3 fc92 	bl	8001d06 <_lv_area_diff>
 801e3e2:	4606      	mov	r6, r0
            if(res_c != -1) {
 801e3e4:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
 801e3e8:	d0e8      	beq.n	801e3bc <refr_sync_areas+0x98>
                for(j = 0; j < res_c; j++) {
 801e3ea:	2400      	movs	r4, #0
 801e3ec:	e7da      	b.n	801e3a4 <refr_sync_areas+0x80>
    for(i = 0; i < disp_refr->inv_p; i++) {
 801e3ee:	f108 0801 	add.w	r8, r8, #1
 801e3f2:	4b1c      	ldr	r3, [pc, #112]	@ (801e464 <refr_sync_areas+0x140>)
 801e3f4:	6818      	ldr	r0, [r3, #0]
 801e3f6:	f8b0 3150 	ldrh.w	r3, [r0, #336]	@ 0x150
 801e3fa:	4543      	cmp	r3, r8
 801e3fc:	d90b      	bls.n	801e416 <refr_sync_areas+0xf2>
        if(disp_refr->inv_area_joined[i]) continue;
 801e3fe:	eb00 0308 	add.w	r3, r0, r8
 801e402:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801e406:	2b00      	cmp	r3, #0
 801e408:	d1f1      	bne.n	801e3ee <refr_sync_areas+0xca>
        sync_area = _lv_ll_get_head(&disp_refr->sync_areas);
 801e40a:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e40e:	f7f8 f8a8 	bl	8016562 <_lv_ll_get_head>
 801e412:	4605      	mov	r5, r0
        while(sync_area != NULL) {
 801e414:	e7d3      	b.n	801e3be <refr_sync_areas+0x9a>
    for(sync_area = _lv_ll_get_head(&disp_refr->sync_areas); sync_area != NULL;
 801e416:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e41a:	f7f8 f8a2 	bl	8016562 <_lv_ll_get_head>
 801e41e:	4604      	mov	r4, r0
 801e420:	b1ac      	cbz	r4, 801e44e <refr_sync_areas+0x12a>
        disp_refr->driver->draw_ctx->buffer_copy(
 801e422:	4d10      	ldr	r5, [pc, #64]	@ (801e464 <refr_sync_areas+0x140>)
 801e424:	682b      	ldr	r3, [r5, #0]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801e42a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 801e42c:	9402      	str	r4, [sp, #8]
 801e42e:	f8cd 9004 	str.w	r9, [sp, #4]
 801e432:	f8cd a000 	str.w	sl, [sp]
 801e436:	4623      	mov	r3, r4
 801e438:	464a      	mov	r2, r9
 801e43a:	4659      	mov	r1, fp
 801e43c:	47b0      	blx	r6
        sync_area = _lv_ll_get_next(&disp_refr->sync_areas, sync_area)) {
 801e43e:	6828      	ldr	r0, [r5, #0]
 801e440:	4621      	mov	r1, r4
 801e442:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e446:	f7f8 f894 	bl	8016572 <_lv_ll_get_next>
 801e44a:	4604      	mov	r4, r0
 801e44c:	e7e8      	b.n	801e420 <refr_sync_areas+0xfc>
    _lv_ll_clear(&disp_refr->sync_areas);
 801e44e:	4b05      	ldr	r3, [pc, #20]	@ (801e464 <refr_sync_areas+0x140>)
 801e450:	6818      	ldr	r0, [r3, #0]
 801e452:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801e456:	f7f8 f908 	bl	801666a <_lv_ll_clear>
}
 801e45a:	b00d      	add	sp, #52	@ 0x34
 801e45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e460:	4770      	bx	lr
 801e462:	bf00      	nop
 801e464:	200088e0 	.word	0x200088e0

0801e468 <lv_layer_sys>:
/**
 * Get the active screen of the default display
 * @return  pointer to the sys layer
 */
static inline lv_obj_t * lv_layer_sys(void)
{
 801e468:	b508      	push	{r3, lr}
    return lv_disp_get_layer_sys(lv_disp_get_default());
 801e46a:	f7f4 ff07 	bl	801327c <lv_disp_get_default>
 801e46e:	f7e9 f8f6 	bl	800765e <lv_disp_get_layer_sys>
}
 801e472:	bd08      	pop	{r3, pc}

0801e474 <draw_buf_rotate>:
{
 801e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e478:	b08b      	sub	sp, #44	@ 0x2c
 801e47a:	4680      	mov	r8, r0
 801e47c:	460f      	mov	r7, r1
    lv_disp_drv_t * drv = disp_refr->driver;
 801e47e:	4b85      	ldr	r3, [pc, #532]	@ (801e694 <draw_buf_rotate+0x220>)
 801e480:	6818      	ldr	r0, [r3, #0]
 801e482:	6804      	ldr	r4, [r0, #0]
    if(disp_refr->driver->full_refresh && drv->sw_rotate) {
 801e484:	7c23      	ldrb	r3, [r4, #16]
 801e486:	f013 0f02 	tst.w	r3, #2
 801e48a:	d002      	beq.n	801e492 <draw_buf_rotate+0x1e>
 801e48c:	f013 0f04 	tst.w	r3, #4
 801e490:	d107      	bne.n	801e4a2 <draw_buf_rotate+0x2e>
    if(drv->rotated == LV_DISP_ROT_180) {
 801e492:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801e496:	2b20      	cmp	r3, #32
 801e498:	d006      	beq.n	801e4a8 <draw_buf_rotate+0x34>
    else if(drv->rotated == LV_DISP_ROT_90 || drv->rotated == LV_DISP_ROT_270) {
 801e49a:	2b10      	cmp	r3, #16
 801e49c:	d00f      	beq.n	801e4be <draw_buf_rotate+0x4a>
 801e49e:	2b30      	cmp	r3, #48	@ 0x30
 801e4a0:	d00d      	beq.n	801e4be <draw_buf_rotate+0x4a>
}
 801e4a2:	b00b      	add	sp, #44	@ 0x2c
 801e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        draw_buf_rotate_180(drv, area, color_p);
 801e4a8:	463a      	mov	r2, r7
 801e4aa:	4641      	mov	r1, r8
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	f7ff fd07 	bl	801dec0 <draw_buf_rotate_180>
        call_flush_cb(drv, area, color_p);
 801e4b2:	463a      	mov	r2, r7
 801e4b4:	4641      	mov	r1, r8
 801e4b6:	4620      	mov	r0, r4
 801e4b8:	f7ff fdd1 	bl	801e05e <call_flush_cb>
 801e4bc:	e7f1      	b.n	801e4a2 <draw_buf_rotate+0x2e>
        lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 801e4be:	f7f4 ff37 	bl	8013330 <lv_disp_get_draw_buf>
 801e4c2:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e4c4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801e4c8:	f9b8 2000 	ldrsh.w	r2, [r8]
 801e4cc:	b293      	uxth	r3, r2
 801e4ce:	1ac9      	subs	r1, r1, r3
 801e4d0:	b289      	uxth	r1, r1
 801e4d2:	3101      	adds	r1, #1
 801e4d4:	b288      	uxth	r0, r1
 801e4d6:	9008      	str	r0, [sp, #32]
 801e4d8:	b209      	sxth	r1, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801e4da:	f8b8 c006 	ldrh.w	ip, [r8, #6]
 801e4de:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 801e4e2:	9009      	str	r0, [sp, #36]	@ 0x24
 801e4e4:	fa1f fe80 	uxth.w	lr, r0
 801e4e8:	ebac 0c0e 	sub.w	ip, ip, lr
 801e4ec:	fa1f fc8c 	uxth.w	ip, ip
 801e4f0:	f10c 0c01 	add.w	ip, ip, #1
 801e4f4:	fa0f fa8c 	sxth.w	sl, ip
        lv_coord_t max_row = LV_MIN((lv_coord_t)((LV_DISP_ROT_MAX_BUF / sizeof(lv_color_t)) / area_w), area_h);
 801e4f8:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 801e4fc:	fbb0 f0f1 	udiv	r0, r0, r1
 801e500:	4550      	cmp	r0, sl
 801e502:	bfa8      	it	ge
 801e504:	4650      	movge	r0, sl
 801e506:	9006      	str	r0, [sp, #24]
        if(drv->rotated == LV_DISP_ROT_90) {
 801e508:	7c20      	ldrb	r0, [r4, #16]
 801e50a:	f000 0030 	and.w	r0, r0, #48	@ 0x30
 801e50e:	2810      	cmp	r0, #16
 801e510:	d00e      	beq.n	801e530 <draw_buf_rotate+0xbc>
            area->y1 = area->x1;
 801e512:	f8a8 2002 	strh.w	r2, [r8, #2]
            area->y2 = area->y1 + area_w - 1;
 801e516:	9a08      	ldr	r2, [sp, #32]
 801e518:	4413      	add	r3, r2
 801e51a:	b29b      	uxth	r3, r3
 801e51c:	3b01      	subs	r3, #1
 801e51e:	f8a8 3006 	strh.w	r3, [r8, #6]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 801e522:	2600      	movs	r6, #0
 801e524:	9603      	str	r6, [sp, #12]
 801e526:	f8cd e01c 	str.w	lr, [sp, #28]
 801e52a:	9104      	str	r1, [sp, #16]
 801e52c:	46bb      	mov	fp, r7
 801e52e:	e062      	b.n	801e5f6 <draw_buf_rotate+0x182>
            area->y2 = drv->ver_res - area->x1 - 1;
 801e530:	8862      	ldrh	r2, [r4, #2]
 801e532:	1ad3      	subs	r3, r2, r3
 801e534:	b29b      	uxth	r3, r3
 801e536:	3b01      	subs	r3, #1
 801e538:	b29a      	uxth	r2, r3
 801e53a:	f8a8 3006 	strh.w	r3, [r8, #6]
            area->y1 = area->y2 - area_w + 1;
 801e53e:	9b08      	ldr	r3, [sp, #32]
 801e540:	1ad3      	subs	r3, r2, r3
 801e542:	b29b      	uxth	r3, r3
 801e544:	3301      	adds	r3, #1
 801e546:	f8a8 3002 	strh.w	r3, [r8, #2]
 801e54a:	e7ea      	b.n	801e522 <draw_buf_rotate+0xae>
                draw_buf_rotate_90_sqr(drv->rotated == LV_DISP_ROT_270, area_w, color_p);
 801e54c:	7c20      	ldrb	r0, [r4, #16]
 801e54e:	f000 0030 	and.w	r0, r0, #48	@ 0x30
 801e552:	465a      	mov	r2, fp
 801e554:	4619      	mov	r1, r3
 801e556:	2830      	cmp	r0, #48	@ 0x30
 801e558:	bf14      	ite	ne
 801e55a:	2000      	movne	r0, #0
 801e55c:	2001      	moveq	r0, #1
 801e55e:	f7ff fd23 	bl	801dfa8 <draw_buf_rotate_90_sqr>
                if(drv->rotated == LV_DISP_ROT_90) {
 801e562:	7c23      	ldrb	r3, [r4, #16]
 801e564:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801e568:	2b10      	cmp	r3, #16
 801e56a:	d00e      	beq.n	801e58a <draw_buf_rotate+0x116>
                    area->x2 = drv->hor_res - 1 - init_y_off;
 801e56c:	8822      	ldrh	r2, [r4, #0]
 801e56e:	9b07      	ldr	r3, [sp, #28]
 801e570:	1ad2      	subs	r2, r2, r3
 801e572:	3a01      	subs	r2, #1
 801e574:	b293      	uxth	r3, r2
 801e576:	f8a8 2004 	strh.w	r2, [r8, #4]
                    area->x1 = area->x2 - area_w + 1;
 801e57a:	9a08      	ldr	r2, [sp, #32]
 801e57c:	1a9b      	subs	r3, r3, r2
 801e57e:	b29b      	uxth	r3, r3
 801e580:	3301      	adds	r3, #1
 801e582:	f8a8 3000 	strh.w	r3, [r8]
                height = area_w;
 801e586:	9f04      	ldr	r7, [sp, #16]
 801e588:	e06b      	b.n	801e662 <draw_buf_rotate+0x1ee>
                    area->x1 = init_y_off;
 801e58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e58c:	f8a8 3000 	strh.w	r3, [r8]
                    area->x2 = init_y_off + area_w - 1;
 801e590:	9b07      	ldr	r3, [sp, #28]
 801e592:	9a08      	ldr	r2, [sp, #32]
 801e594:	4413      	add	r3, r2
 801e596:	b29b      	uxth	r3, r3
 801e598:	3b01      	subs	r3, #1
 801e59a:	f8a8 3004 	strh.w	r3, [r8, #4]
                height = area_w;
 801e59e:	9f04      	ldr	r7, [sp, #16]
 801e5a0:	e05f      	b.n	801e662 <draw_buf_rotate+0x1ee>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 801e5a2:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 801e5a6:	f7f8 fa09 	bl	80169bc <lv_mem_buf_get>
 801e5aa:	9003      	str	r0, [sp, #12]
 801e5ac:	e037      	b.n	801e61e <draw_buf_rotate+0x1aa>
                    area->x1 = init_y_off + row;
 801e5ae:	9b07      	ldr	r3, [sp, #28]
 801e5b0:	4433      	add	r3, r6
 801e5b2:	f8a8 3000 	strh.w	r3, [r8]
                    area->x2 = init_y_off + row + height - 1;
 801e5b6:	fa19 f383 	uxtah	r3, r9, r3
 801e5ba:	b29b      	uxth	r3, r3
 801e5bc:	3b01      	subs	r3, #1
 801e5be:	f8a8 3004 	strh.w	r3, [r8, #4]
 801e5c2:	e04e      	b.n	801e662 <draw_buf_rotate+0x1ee>
                draw_buf->flushing_last = 0;
 801e5c4:	2300      	movs	r3, #0
 801e5c6:	616b      	str	r3, [r5, #20]
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 801e5c8:	9a03      	ldr	r2, [sp, #12]
 801e5ca:	b15a      	cbz	r2, 801e5e4 <draw_buf_rotate+0x170>
 801e5cc:	4641      	mov	r1, r8
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	f7ff fd45 	bl	801e05e <call_flush_cb>
            while(draw_buf->flushing) {
 801e5d4:	692b      	ldr	r3, [r5, #16]
 801e5d6:	b13b      	cbz	r3, 801e5e8 <draw_buf_rotate+0x174>
                if(drv->wait_cb) drv->wait_cb(drv);
 801e5d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d0fa      	beq.n	801e5d4 <draw_buf_rotate+0x160>
 801e5de:	4620      	mov	r0, r4
 801e5e0:	4798      	blx	r3
 801e5e2:	e7f7      	b.n	801e5d4 <draw_buf_rotate+0x160>
            call_flush_cb(drv, area, rot_buf == NULL ? color_p : rot_buf);
 801e5e4:	465a      	mov	r2, fp
 801e5e6:	e7f1      	b.n	801e5cc <draw_buf_rotate+0x158>
            color_p += area_w * height;
 801e5e8:	9b04      	ldr	r3, [sp, #16]
 801e5ea:	fb09 f903 	mul.w	r9, r9, r3
 801e5ee:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
            row += height;
 801e5f2:	4437      	add	r7, r6
 801e5f4:	b23e      	sxth	r6, r7
        while(row < area_h) {
 801e5f6:	4556      	cmp	r6, sl
 801e5f8:	da43      	bge.n	801e682 <draw_buf_rotate+0x20e>
            lv_coord_t height = LV_MIN(max_row, area_h - row);
 801e5fa:	9605      	str	r6, [sp, #20]
 801e5fc:	ebaa 0906 	sub.w	r9, sl, r6
 801e600:	9b06      	ldr	r3, [sp, #24]
 801e602:	4599      	cmp	r9, r3
 801e604:	bfa8      	it	ge
 801e606:	4699      	movge	r9, r3
 801e608:	fa0f f789 	sxth.w	r7, r9
            draw_buf->flushing = 1;
 801e60c:	2301      	movs	r3, #1
 801e60e:	612b      	str	r3, [r5, #16]
            if((row == 0) && (area_h >= area_w)) {
 801e610:	b916      	cbnz	r6, 801e618 <draw_buf_rotate+0x1a4>
 801e612:	9b04      	ldr	r3, [sp, #16]
 801e614:	459a      	cmp	sl, r3
 801e616:	da99      	bge.n	801e54c <draw_buf_rotate+0xd8>
                if(rot_buf == NULL) rot_buf = lv_mem_buf_get(LV_DISP_ROT_MAX_BUF);
 801e618:	9b03      	ldr	r3, [sp, #12]
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d0c1      	beq.n	801e5a2 <draw_buf_rotate+0x12e>
                draw_buf_rotate_90(drv->rotated == LV_DISP_ROT_270, area_w, height, color_p, rot_buf);
 801e61e:	7c20      	ldrb	r0, [r4, #16]
 801e620:	f000 0030 	and.w	r0, r0, #48	@ 0x30
 801e624:	9b03      	ldr	r3, [sp, #12]
 801e626:	9300      	str	r3, [sp, #0]
 801e628:	465b      	mov	r3, fp
 801e62a:	463a      	mov	r2, r7
 801e62c:	9904      	ldr	r1, [sp, #16]
 801e62e:	2830      	cmp	r0, #48	@ 0x30
 801e630:	bf14      	ite	ne
 801e632:	2000      	movne	r0, #0
 801e634:	2001      	moveq	r0, #1
 801e636:	f7ff fc8a 	bl	801df4e <draw_buf_rotate_90>
                if(drv->rotated == LV_DISP_ROT_90) {
 801e63a:	7c23      	ldrb	r3, [r4, #16]
 801e63c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801e640:	2b10      	cmp	r3, #16
 801e642:	d0b4      	beq.n	801e5ae <draw_buf_rotate+0x13a>
                    area->x2 = drv->hor_res - 1 - init_y_off - row;
 801e644:	8823      	ldrh	r3, [r4, #0]
 801e646:	9a07      	ldr	r2, [sp, #28]
 801e648:	1a9b      	subs	r3, r3, r2
 801e64a:	b29b      	uxth	r3, r3
 801e64c:	1b9b      	subs	r3, r3, r6
 801e64e:	3b01      	subs	r3, #1
 801e650:	b29a      	uxth	r2, r3
 801e652:	f8a8 3004 	strh.w	r3, [r8, #4]
                    area->x1 = area->x2 - height + 1;
 801e656:	eba2 0309 	sub.w	r3, r2, r9
 801e65a:	b29b      	uxth	r3, r3
 801e65c:	3301      	adds	r3, #1
 801e65e:	f8a8 3000 	strh.w	r3, [r8]
            if(row + height >= area_h && draw_buf->last_area && draw_buf->last_part) {
 801e662:	46b9      	mov	r9, r7
 801e664:	9b05      	ldr	r3, [sp, #20]
 801e666:	443b      	add	r3, r7
 801e668:	459a      	cmp	sl, r3
 801e66a:	dcab      	bgt.n	801e5c4 <draw_buf_rotate+0x150>
 801e66c:	69ab      	ldr	r3, [r5, #24]
 801e66e:	f013 0f01 	tst.w	r3, #1
 801e672:	d0a7      	beq.n	801e5c4 <draw_buf_rotate+0x150>
 801e674:	69ab      	ldr	r3, [r5, #24]
 801e676:	f013 0f02 	tst.w	r3, #2
 801e67a:	d0a3      	beq.n	801e5c4 <draw_buf_rotate+0x150>
                draw_buf->flushing_last = 1;
 801e67c:	2301      	movs	r3, #1
 801e67e:	616b      	str	r3, [r5, #20]
 801e680:	e7a2      	b.n	801e5c8 <draw_buf_rotate+0x154>
        if(rot_buf != NULL) lv_mem_buf_release(rot_buf);
 801e682:	9b03      	ldr	r3, [sp, #12]
 801e684:	2b00      	cmp	r3, #0
 801e686:	f43f af0c 	beq.w	801e4a2 <draw_buf_rotate+0x2e>
 801e68a:	4618      	mov	r0, r3
 801e68c:	f7f8 f9f8 	bl	8016a80 <lv_mem_buf_release>
 801e690:	e707      	b.n	801e4a2 <draw_buf_rotate+0x2e>
 801e692:	bf00      	nop
 801e694:	200088e0 	.word	0x200088e0

0801e698 <draw_buf_flush>:
{
 801e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e69a:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 801e69c:	4b2e      	ldr	r3, [pc, #184]	@ (801e758 <draw_buf_flush+0xc0>)
 801e69e:	6818      	ldr	r0, [r3, #0]
 801e6a0:	f7f4 fe46 	bl	8013330 <lv_disp_get_draw_buf>
 801e6a4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = disp->driver->draw_ctx;
 801e6a6:	682b      	ldr	r3, [r5, #0]
 801e6a8:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    if(draw_ctx->wait_for_finish) draw_ctx->wait_for_finish(draw_ctx);
 801e6aa:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 801e6ac:	b10b      	cbz	r3, 801e6b2 <draw_buf_flush+0x1a>
 801e6ae:	4630      	mov	r0, r6
 801e6b0:	4798      	blx	r3
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 801e6b2:	68e1      	ldr	r1, [r4, #12]
 801e6b4:	4b28      	ldr	r3, [pc, #160]	@ (801e758 <draw_buf_flush+0xc0>)
 801e6b6:	681b      	ldr	r3, [r3, #0]
 801e6b8:	681a      	ldr	r2, [r3, #0]
 801e6ba:	f9b2 3000 	ldrsh.w	r3, [r2]
 801e6be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801e6c2:	fb02 f303 	mul.w	r3, r2, r3
    if(draw_buf->buf1 && draw_buf->buf2 && !full_sized) {
 801e6c6:	6822      	ldr	r2, [r4, #0]
 801e6c8:	b16a      	cbz	r2, 801e6e6 <draw_buf_flush+0x4e>
 801e6ca:	6862      	ldr	r2, [r4, #4]
 801e6cc:	b15a      	cbz	r2, 801e6e6 <draw_buf_flush+0x4e>
 801e6ce:	4299      	cmp	r1, r3
 801e6d0:	d009      	beq.n	801e6e6 <draw_buf_flush+0x4e>
        while(draw_buf->flushing) {
 801e6d2:	6923      	ldr	r3, [r4, #16]
 801e6d4:	b13b      	cbz	r3, 801e6e6 <draw_buf_flush+0x4e>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 801e6d6:	4b20      	ldr	r3, [pc, #128]	@ (801e758 <draw_buf_flush+0xc0>)
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	6818      	ldr	r0, [r3, #0]
 801e6dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d0f7      	beq.n	801e6d2 <draw_buf_flush+0x3a>
 801e6e2:	4798      	blx	r3
 801e6e4:	e7f5      	b.n	801e6d2 <draw_buf_flush+0x3a>
    draw_buf->flushing = 1;
 801e6e6:	2301      	movs	r3, #1
 801e6e8:	6123      	str	r3, [r4, #16]
    if(disp_refr->driver->draw_buf->last_area && disp_refr->driver->draw_buf->last_part) draw_buf->flushing_last = 1;
 801e6ea:	4b1b      	ldr	r3, [pc, #108]	@ (801e758 <draw_buf_flush+0xc0>)
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	68db      	ldr	r3, [r3, #12]
 801e6f2:	699a      	ldr	r2, [r3, #24]
 801e6f4:	f012 0f01 	tst.w	r2, #1
 801e6f8:	d006      	beq.n	801e708 <draw_buf_flush+0x70>
 801e6fa:	699b      	ldr	r3, [r3, #24]
 801e6fc:	f013 0f02 	tst.w	r3, #2
 801e700:	d002      	beq.n	801e708 <draw_buf_flush+0x70>
 801e702:	2301      	movs	r3, #1
 801e704:	6163      	str	r3, [r4, #20]
 801e706:	e001      	b.n	801e70c <draw_buf_flush+0x74>
    else draw_buf->flushing_last = 0;
 801e708:	2300      	movs	r3, #0
 801e70a:	6163      	str	r3, [r4, #20]
    bool flushing_last = draw_buf->flushing_last;
 801e70c:	6967      	ldr	r7, [r4, #20]
    if(disp->driver->flush_cb) {
 801e70e:	6828      	ldr	r0, [r5, #0]
 801e710:	6943      	ldr	r3, [r0, #20]
 801e712:	b153      	cbz	r3, 801e72a <draw_buf_flush+0x92>
        if(disp->driver->rotated != LV_DISP_ROT_NONE && disp->driver->sw_rotate) {
 801e714:	7c03      	ldrb	r3, [r0, #16]
 801e716:	f013 0f30 	tst.w	r3, #48	@ 0x30
 801e71a:	d002      	beq.n	801e722 <draw_buf_flush+0x8a>
 801e71c:	f013 0f04 	tst.w	r3, #4
 801e720:	d112      	bne.n	801e748 <draw_buf_flush+0xb0>
            call_flush_cb(disp->driver, draw_ctx->buf_area, draw_ctx->buf);
 801e722:	6832      	ldr	r2, [r6, #0]
 801e724:	6871      	ldr	r1, [r6, #4]
 801e726:	f7ff fc9a 	bl	801e05e <call_flush_cb>
    if(draw_buf->buf1 && draw_buf->buf2 && (!disp->driver->direct_mode || flushing_last)) {
 801e72a:	6823      	ldr	r3, [r4, #0]
 801e72c:	b15b      	cbz	r3, 801e746 <draw_buf_flush+0xae>
 801e72e:	6862      	ldr	r2, [r4, #4]
 801e730:	b14a      	cbz	r2, 801e746 <draw_buf_flush+0xae>
 801e732:	6829      	ldr	r1, [r5, #0]
 801e734:	7c09      	ldrb	r1, [r1, #16]
 801e736:	f011 0f01 	tst.w	r1, #1
 801e73a:	d000      	beq.n	801e73e <draw_buf_flush+0xa6>
 801e73c:	b11f      	cbz	r7, 801e746 <draw_buf_flush+0xae>
        if(draw_buf->buf_act == draw_buf->buf1)
 801e73e:	68a1      	ldr	r1, [r4, #8]
 801e740:	428b      	cmp	r3, r1
 801e742:	d006      	beq.n	801e752 <draw_buf_flush+0xba>
            draw_buf->buf_act = draw_buf->buf1;
 801e744:	60a3      	str	r3, [r4, #8]
}
 801e746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            draw_buf_rotate(draw_ctx->buf_area, draw_ctx->buf);
 801e748:	6831      	ldr	r1, [r6, #0]
 801e74a:	6870      	ldr	r0, [r6, #4]
 801e74c:	f7ff fe92 	bl	801e474 <draw_buf_rotate>
 801e750:	e7eb      	b.n	801e72a <draw_buf_flush+0x92>
            draw_buf->buf_act = draw_buf->buf2;
 801e752:	60a2      	str	r2, [r4, #8]
 801e754:	e7f7      	b.n	801e746 <draw_buf_flush+0xae>
 801e756:	bf00      	nop
 801e758:	200088e0 	.word	0x200088e0

0801e75c <_lv_refr_init>:
{
 801e75c:	b508      	push	{r3, lr}
    perf_monitor_init(&perf_monitor);
 801e75e:	4803      	ldr	r0, [pc, #12]	@ (801e76c <_lv_refr_init+0x10>)
 801e760:	f7ff fc98 	bl	801e094 <perf_monitor_init>
    mem_monitor_init(&mem_monitor);
 801e764:	4802      	ldr	r0, [pc, #8]	@ (801e770 <_lv_refr_init+0x14>)
 801e766:	f7ff fc9f 	bl	801e0a8 <mem_monitor_init>
}
 801e76a:	bd08      	pop	{r3, pc}
 801e76c:	200088c8 	.word	0x200088c8
 801e770:	200088c0 	.word	0x200088c0

0801e774 <lv_obj_redraw>:
{
 801e774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e778:	b087      	sub	sp, #28
 801e77a:	4606      	mov	r6, r0
 801e77c:	460d      	mov	r5, r1
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801e77e:	f8d0 8008 	ldr.w	r8, [r0, #8]
    lv_obj_get_coords(obj, &obj_coords_ext);
 801e782:	a902      	add	r1, sp, #8
 801e784:	4628      	mov	r0, r5
 801e786:	f7fa ff50 	bl	801962a <lv_obj_get_coords>
    lv_coord_t ext_draw_size = _lv_obj_get_ext_draw_size(obj);
 801e78a:	4628      	mov	r0, r5
 801e78c:	f7fa fda7 	bl	80192de <_lv_obj_get_ext_draw_size>
 801e790:	4601      	mov	r1, r0
    lv_area_increase(&obj_coords_ext, ext_draw_size, ext_draw_size);
 801e792:	4602      	mov	r2, r0
 801e794:	a802      	add	r0, sp, #8
 801e796:	f7e3 f90f 	bl	80019b8 <lv_area_increase>
    bool com_clip_res = _lv_area_intersect(&clip_coords_for_obj, clip_area_ori, &obj_coords_ext);
 801e79a:	aa02      	add	r2, sp, #8
 801e79c:	4641      	mov	r1, r8
 801e79e:	a804      	add	r0, sp, #16
 801e7a0:	f7e3 f928 	bl	80019f4 <_lv_area_intersect>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e7a4:	b930      	cbnz	r0, 801e7b4 <lv_obj_redraw+0x40>
 801e7a6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801e7aa:	4628      	mov	r0, r5
 801e7ac:	f7f9 fe6f 	bl	801848e <lv_obj_has_flag>
 801e7b0:	4681      	mov	r9, r0
 801e7b2:	b190      	cbz	r0, 801e7da <lv_obj_redraw+0x66>
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e7b4:	ab04      	add	r3, sp, #16
 801e7b6:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_BEGIN, draw_ctx);
 801e7b8:	4632      	mov	r2, r6
 801e7ba:	2114      	movs	r1, #20
 801e7bc:	4628      	mov	r0, r5
 801e7be:	f7f2 fa83 	bl	8010cc8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN, draw_ctx);
 801e7c2:	4632      	mov	r2, r6
 801e7c4:	2115      	movs	r1, #21
 801e7c6:	4628      	mov	r0, r5
 801e7c8:	f7f2 fa7e 	bl	8010cc8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_MAIN_END, draw_ctx);
 801e7cc:	4632      	mov	r2, r6
 801e7ce:	2116      	movs	r1, #22
 801e7d0:	4628      	mov	r0, r5
 801e7d2:	f7f2 fa79 	bl	8010cc8 <lv_event_send>
    bool should_draw = com_clip_res || lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE);
 801e7d6:	f04f 0901 	mov.w	r9, #1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_OVERFLOW_VISIBLE)) {
 801e7da:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801e7de:	4628      	mov	r0, r5
 801e7e0:	f7f9 fe55 	bl	801848e <lv_obj_has_flag>
 801e7e4:	b168      	cbz	r0, 801e802 <lv_obj_redraw+0x8e>
        clip_coords_for_children  = *clip_area_ori;
 801e7e6:	466b      	mov	r3, sp
 801e7e8:	f8d8 0000 	ldr.w	r0, [r8]
 801e7ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e7f0:	c303      	stmia	r3!, {r0, r1}
        draw_ctx->clip_area = &clip_coords_for_children;
 801e7f2:	f8c6 d008 	str.w	sp, [r6, #8]
        uint32_t child_cnt = lv_obj_get_child_cnt(obj);
 801e7f6:	4628      	mov	r0, r5
 801e7f8:	f7fe fcfb 	bl	801d1f2 <lv_obj_get_child_cnt>
 801e7fc:	4607      	mov	r7, r0
        for(i = 0; i < child_cnt; i++) {
 801e7fe:	2400      	movs	r4, #0
 801e800:	e00f      	b.n	801e822 <lv_obj_redraw+0xae>
        if(!_lv_area_intersect(&clip_coords_for_children, clip_area_ori, &obj->coords)) {
 801e802:	f105 0214 	add.w	r2, r5, #20
 801e806:	4641      	mov	r1, r8
 801e808:	4668      	mov	r0, sp
 801e80a:	f7e3 f8f3 	bl	80019f4 <_lv_area_intersect>
 801e80e:	b150      	cbz	r0, 801e826 <lv_obj_redraw+0xb2>
 801e810:	e7ef      	b.n	801e7f2 <lv_obj_redraw+0x7e>
            lv_obj_t * child = obj->spec_attr->children[i];
 801e812:	68ab      	ldr	r3, [r5, #8]
 801e814:	681b      	ldr	r3, [r3, #0]
            refr_obj(draw_ctx, child);
 801e816:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801e81a:	4630      	mov	r0, r6
 801e81c:	f000 f81e 	bl	801e85c <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 801e820:	3401      	adds	r4, #1
 801e822:	42bc      	cmp	r4, r7
 801e824:	d3f5      	bcc.n	801e812 <lv_obj_redraw+0x9e>
    if(should_draw) {
 801e826:	f1b9 0f00 	cmp.w	r9, #0
 801e82a:	d104      	bne.n	801e836 <lv_obj_redraw+0xc2>
    draw_ctx->clip_area = clip_area_ori;
 801e82c:	f8c6 8008 	str.w	r8, [r6, #8]
}
 801e830:	b007      	add	sp, #28
 801e832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        draw_ctx->clip_area = &clip_coords_for_obj;
 801e836:	ab04      	add	r3, sp, #16
 801e838:	60b3      	str	r3, [r6, #8]
        lv_event_send(obj, LV_EVENT_DRAW_POST_BEGIN, draw_ctx);
 801e83a:	4632      	mov	r2, r6
 801e83c:	2117      	movs	r1, #23
 801e83e:	4628      	mov	r0, r5
 801e840:	f7f2 fa42 	bl	8010cc8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST, draw_ctx);
 801e844:	4632      	mov	r2, r6
 801e846:	2118      	movs	r1, #24
 801e848:	4628      	mov	r0, r5
 801e84a:	f7f2 fa3d 	bl	8010cc8 <lv_event_send>
        lv_event_send(obj, LV_EVENT_DRAW_POST_END, draw_ctx);
 801e84e:	4632      	mov	r2, r6
 801e850:	2119      	movs	r1, #25
 801e852:	4628      	mov	r0, r5
 801e854:	f7f2 fa38 	bl	8010cc8 <lv_event_send>
 801e858:	e7e8      	b.n	801e82c <lv_obj_redraw+0xb8>
	...

0801e85c <refr_obj>:
{
 801e85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e860:	b08b      	sub	sp, #44	@ 0x2c
 801e862:	4605      	mov	r5, r0
 801e864:	460c      	mov	r4, r1
    if(lv_obj_has_flag(obj, LV_OBJ_FLAG_HIDDEN)) return;
 801e866:	2101      	movs	r1, #1
 801e868:	4620      	mov	r0, r4
 801e86a:	f7f9 fe10 	bl	801848e <lv_obj_has_flag>
 801e86e:	b110      	cbz	r0, 801e876 <refr_obj+0x1a>
}
 801e870:	b00b      	add	sp, #44	@ 0x2c
 801e872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_layer_type_t layer_type = _lv_obj_get_layer_type(obj);
 801e876:	4620      	mov	r0, r4
 801e878:	f7fa fd6a 	bl	8019350 <_lv_obj_get_layer_type>
    if(layer_type == LV_LAYER_TYPE_NONE) {
 801e87c:	4606      	mov	r6, r0
 801e87e:	b920      	cbnz	r0, 801e88a <refr_obj+0x2e>
        lv_obj_redraw(draw_ctx, obj);
 801e880:	4621      	mov	r1, r4
 801e882:	4628      	mov	r0, r5
 801e884:	f7ff ff76 	bl	801e774 <lv_obj_redraw>
 801e888:	e7f2      	b.n	801e870 <refr_obj+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_OPA_LAYERED);
 801e88a:	2261      	movs	r2, #97	@ 0x61
 801e88c:	2100      	movs	r1, #0
 801e88e:	4620      	mov	r0, r4
 801e890:	f7fd ff30 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_opa_t)v.num;
 801e894:	fa5f f880 	uxtb.w	r8, r0
        if(opa < LV_OPA_MIN) return;
 801e898:	f1b8 0f01 	cmp.w	r8, #1
 801e89c:	d9e8      	bls.n	801e870 <refr_obj+0x14>
        lv_res_t res = layer_get_area(draw_ctx, obj, layer_type, &layer_area_full);
 801e89e:	ab02      	add	r3, sp, #8
 801e8a0:	4632      	mov	r2, r6
 801e8a2:	4621      	mov	r1, r4
 801e8a4:	4628      	mov	r0, r5
 801e8a6:	f7ff fc45 	bl	801e134 <layer_get_area>
 801e8aa:	4607      	mov	r7, r0
        if(res != LV_RES_OK) return;
 801e8ac:	2801      	cmp	r0, #1
 801e8ae:	d1df      	bne.n	801e870 <refr_obj+0x14>
        if(_lv_area_is_in(&layer_area_full, &obj->coords, 0)) {
 801e8b0:	2200      	movs	r2, #0
 801e8b2:	f104 0114 	add.w	r1, r4, #20
 801e8b6:	a802      	add	r0, sp, #8
 801e8b8:	f7e3 f9d0 	bl	8001c5c <_lv_area_is_in>
 801e8bc:	2800      	cmp	r0, #0
 801e8be:	d16f      	bne.n	801e9a0 <refr_obj+0x144>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 801e8c0:	2e01      	cmp	r6, #1
 801e8c2:	d07d      	beq.n	801e9c0 <refr_obj+0x164>
        lv_draw_layer_ctx_t * layer_ctx = lv_draw_layer_create(draw_ctx, &layer_area_full, flags);
 801e8c4:	463a      	mov	r2, r7
 801e8c6:	a902      	add	r1, sp, #8
 801e8c8:	4628      	mov	r0, r5
 801e8ca:	f7e9 fe93 	bl	80085f4 <lv_draw_layer_create>
        if(layer_ctx == NULL) {
 801e8ce:	4606      	mov	r6, r0
 801e8d0:	2800      	cmp	r0, #0
 801e8d2:	d0cd      	beq.n	801e870 <refr_obj+0x14>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_X);
 801e8d4:	226f      	movs	r2, #111	@ 0x6f
 801e8d6:	2100      	movs	r1, #0
 801e8d8:	4620      	mov	r0, r4
 801e8da:	f7fd ff0b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e8de:	fa0f f980 	sxth.w	r9, r0
        lv_point_t pivot = {
 801e8e2:	f8ad 9004 	strh.w	r9, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_PIVOT_Y);
 801e8e6:	2270      	movs	r2, #112	@ 0x70
 801e8e8:	2100      	movs	r1, #0
 801e8ea:	4620      	mov	r0, r4
 801e8ec:	f7fd ff02 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e8f0:	b203      	sxth	r3, r0
 801e8f2:	f8ad 3006 	strh.w	r3, [sp, #6]
        if(LV_COORD_IS_PCT(pivot.x)) {
 801e8f6:	f409 42c0 	and.w	r2, r9, #24576	@ 0x6000
 801e8fa:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 801e8fe:	d063      	beq.n	801e9c8 <refr_obj+0x16c>
        if(LV_COORD_IS_PCT(pivot.y)) {
 801e900:	f403 42c0 	and.w	r2, r3, #24576	@ 0x6000
 801e904:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 801e908:	d079      	beq.n	801e9fe <refr_obj+0x1a2>
        lv_draw_img_dsc_init(&draw_dsc);
 801e90a:	a804      	add	r0, sp, #16
 801e90c:	f7e9 f974 	bl	8007bf8 <lv_draw_img_dsc_init>
        draw_dsc.opa = opa;
 801e910:	f88d 801b 	strb.w	r8, [sp, #27]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ANGLE);
 801e914:	226e      	movs	r2, #110	@ 0x6e
 801e916:	2100      	movs	r1, #0
 801e918:	4620      	mov	r0, r4
 801e91a:	f7fd feeb 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801e91e:	b203      	sxth	r3, r0
        draw_dsc.angle = lv_obj_get_style_transform_angle(obj, 0);
 801e920:	f8ad 3010 	strh.w	r3, [sp, #16]
        if(draw_dsc.angle > 3600) draw_dsc.angle -= 3600;
 801e924:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801e928:	f340 8084 	ble.w	801ea34 <refr_obj+0x1d8>
 801e92c:	b280      	uxth	r0, r0
 801e92e:	f5a0 6061 	sub.w	r0, r0, #3600	@ 0xe10
 801e932:	f8ad 0010 	strh.w	r0, [sp, #16]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 801e936:	226d      	movs	r2, #109	@ 0x6d
 801e938:	2100      	movs	r1, #0
 801e93a:	4620      	mov	r0, r4
 801e93c:	f7fd feda 	bl	801c6f4 <lv_obj_get_style_prop>
        draw_dsc.zoom = lv_obj_get_style_transform_zoom(obj, 0);
 801e940:	f8ad 0012 	strh.w	r0, [sp, #18]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BLEND_MODE);
 801e944:	2268      	movs	r2, #104	@ 0x68
 801e946:	2100      	movs	r1, #0
 801e948:	4620      	mov	r0, r4
 801e94a:	f7fd fed3 	bl	801c6f4 <lv_obj_get_style_prop>
        draw_dsc.blend_mode = lv_obj_get_style_blend_mode(obj, 0);
 801e94e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e952:	f360 0303 	bfi	r3, r0, #0, #4
 801e956:	f88d 301c 	strb.w	r3, [sp, #28]
        draw_dsc.antialias = disp_refr->driver->antialiasing;
 801e95a:	4b59      	ldr	r3, [pc, #356]	@ (801eac0 <refr_obj+0x264>)
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	7c1b      	ldrb	r3, [r3, #16]
 801e962:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801e966:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 801e96a:	f363 0200 	bfi	r2, r3, #0, #1
 801e96e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
        if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801e972:	f017 0802 	ands.w	r8, r7, #2
 801e976:	f000 808e 	beq.w	801ea96 <refr_obj+0x23a>
            layer_ctx->area_act = layer_ctx->area_full;
 801e97a:	f106 0308 	add.w	r3, r6, #8
 801e97e:	e896 0003 	ldmia.w	r6, {r0, r1}
 801e982:	e883 0003 	stmia.w	r3, {r0, r1}
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 801e986:	8973      	ldrh	r3, [r6, #10]
 801e988:	8a72      	ldrh	r2, [r6, #18]
 801e98a:	4413      	add	r3, r2
 801e98c:	b29b      	uxth	r3, r3
 801e98e:	3b01      	subs	r3, #1
 801e990:	b21b      	sxth	r3, r3
 801e992:	81f3      	strh	r3, [r6, #14]
            if(layer_ctx->area_act.y2 > layer_ctx->area_full.y2) layer_ctx->area_act.y2 = layer_ctx->area_full.y2;
 801e994:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 801e998:	4293      	cmp	r3, r2
 801e99a:	dd7c      	ble.n	801ea96 <refr_obj+0x23a>
 801e99c:	81f2      	strh	r2, [r6, #14]
 801e99e:	e07a      	b.n	801ea96 <refr_obj+0x23a>
            info.res = LV_COVER_RES_COVER;
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	f88d 3010 	strb.w	r3, [sp, #16]
            info.area = &layer_area_full;
 801e9a6:	ab02      	add	r3, sp, #8
 801e9a8:	9305      	str	r3, [sp, #20]
            lv_event_send(obj, LV_EVENT_COVER_CHECK, &info);
 801e9aa:	aa04      	add	r2, sp, #16
 801e9ac:	2112      	movs	r1, #18
 801e9ae:	4620      	mov	r0, r4
 801e9b0:	f7f2 f98a 	bl	8010cc8 <lv_event_send>
            if(info.res == LV_COVER_RES_COVER) flags &= ~LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 801e9b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801e9b8:	b103      	cbz	r3, 801e9bc <refr_obj+0x160>
        lv_draw_layer_flags_t flags = LV_DRAW_LAYER_FLAG_HAS_ALPHA;
 801e9ba:	463b      	mov	r3, r7
 801e9bc:	461f      	mov	r7, r3
 801e9be:	e77f      	b.n	801e8c0 <refr_obj+0x64>
        if(layer_type == LV_LAYER_TYPE_SIMPLE) flags |= LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE;
 801e9c0:	f047 0702 	orr.w	r7, r7, #2
 801e9c4:	b2ff      	uxtb	r7, r7
 801e9c6:	e77d      	b.n	801e8c4 <refr_obj+0x68>
        if(LV_COORD_IS_PCT(pivot.x)) {
 801e9c8:	f429 49c0 	bic.w	r9, r9, #24576	@ 0x6000
 801e9cc:	f5b9 6ffa 	cmp.w	r9, #2000	@ 0x7d0
 801e9d0:	dc96      	bgt.n	801e900 <refr_obj+0xa4>
            pivot.x = (LV_COORD_GET_PCT(pivot.x) * lv_area_get_width(&obj->coords)) / 100;
 801e9d2:	f5b9 7f7a 	cmp.w	r9, #1000	@ 0x3e8
 801e9d6:	dd01      	ble.n	801e9dc <refr_obj+0x180>
 801e9d8:	f5c9 797a 	rsb	r9, r9, #1000	@ 0x3e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801e9dc:	8b22      	ldrh	r2, [r4, #24]
 801e9de:	8aa1      	ldrh	r1, [r4, #20]
 801e9e0:	1a52      	subs	r2, r2, r1
 801e9e2:	b292      	uxth	r2, r2
 801e9e4:	3201      	adds	r2, #1
 801e9e6:	b212      	sxth	r2, r2
 801e9e8:	fb09 f202 	mul.w	r2, r9, r2
 801e9ec:	4935      	ldr	r1, [pc, #212]	@ (801eac4 <refr_obj+0x268>)
 801e9ee:	fb81 0102 	smull	r0, r1, r1, r2
 801e9f2:	17d2      	asrs	r2, r2, #31
 801e9f4:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 801e9f8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801e9fc:	e780      	b.n	801e900 <refr_obj+0xa4>
        if(LV_COORD_IS_PCT(pivot.y)) {
 801e9fe:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 801ea02:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801ea06:	dc80      	bgt.n	801e90a <refr_obj+0xae>
            pivot.y = (LV_COORD_GET_PCT(pivot.y) * lv_area_get_height(&obj->coords)) / 100;
 801ea08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801ea0c:	dd01      	ble.n	801ea12 <refr_obj+0x1b6>
 801ea0e:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ea12:	8b62      	ldrh	r2, [r4, #26]
 801ea14:	8ae1      	ldrh	r1, [r4, #22]
 801ea16:	1a52      	subs	r2, r2, r1
 801ea18:	b292      	uxth	r2, r2
 801ea1a:	3201      	adds	r2, #1
 801ea1c:	b212      	sxth	r2, r2
 801ea1e:	fb02 f303 	mul.w	r3, r2, r3
 801ea22:	4a28      	ldr	r2, [pc, #160]	@ (801eac4 <refr_obj+0x268>)
 801ea24:	fb82 1203 	smull	r1, r2, r2, r3
 801ea28:	17db      	asrs	r3, r3, #31
 801ea2a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801ea2e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ea32:	e76a      	b.n	801e90a <refr_obj+0xae>
        else if(draw_dsc.angle < 0) draw_dsc.angle += 3600;
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	f6bf af7e 	bge.w	801e936 <refr_obj+0xda>
 801ea3a:	b283      	uxth	r3, r0
 801ea3c:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 801ea40:	f8ad 3010 	strh.w	r3, [sp, #16]
 801ea44:	e777      	b.n	801e936 <refr_obj+0xda>
            lv_obj_redraw(draw_ctx, obj);
 801ea46:	4621      	mov	r1, r4
 801ea48:	4628      	mov	r0, r5
 801ea4a:	f7ff fe93 	bl	801e774 <lv_obj_redraw>
            draw_dsc.pivot.x = obj->coords.x1 + pivot.x - draw_ctx->buf_area->x1;
 801ea4e:	8aa3      	ldrh	r3, [r4, #20]
 801ea50:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ea54:	4413      	add	r3, r2
 801ea56:	b29b      	uxth	r3, r3
 801ea58:	686a      	ldr	r2, [r5, #4]
 801ea5a:	8811      	ldrh	r1, [r2, #0]
 801ea5c:	1a5b      	subs	r3, r3, r1
 801ea5e:	f8ad 3014 	strh.w	r3, [sp, #20]
            draw_dsc.pivot.y = obj->coords.y1 + pivot.y - draw_ctx->buf_area->y1;
 801ea62:	8ae3      	ldrh	r3, [r4, #22]
 801ea64:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801ea68:	440b      	add	r3, r1
 801ea6a:	b29b      	uxth	r3, r3
 801ea6c:	8852      	ldrh	r2, [r2, #2]
 801ea6e:	1a9b      	subs	r3, r3, r2
 801ea70:	f8ad 3016 	strh.w	r3, [sp, #22]
            lv_draw_layer_blend(draw_ctx, layer_ctx, &draw_dsc);
 801ea74:	aa04      	add	r2, sp, #16
 801ea76:	4631      	mov	r1, r6
 801ea78:	4628      	mov	r0, r5
 801ea7a:	f7e9 fdf0 	bl	800865e <lv_draw_layer_blend>
            if((flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) == 0) break;
 801ea7e:	f1b8 0f00 	cmp.w	r8, #0
 801ea82:	d018      	beq.n	801eab6 <refr_obj+0x25a>
            layer_ctx->area_act.y1 = layer_ctx->area_act.y2 + 1;
 801ea84:	89f1      	ldrh	r1, [r6, #14]
 801ea86:	3101      	adds	r1, #1
 801ea88:	8171      	strh	r1, [r6, #10]
            layer_ctx->area_act.y2 = layer_ctx->area_act.y1 + layer_ctx->max_row_with_no_alpha - 1;
 801ea8a:	8a73      	ldrh	r3, [r6, #18]
 801ea8c:	fa13 f181 	uxtah	r1, r3, r1
 801ea90:	b289      	uxth	r1, r1
 801ea92:	3901      	subs	r1, #1
 801ea94:	81f1      	strh	r1, [r6, #14]
        while(layer_ctx->area_act.y1 <= layer_area_full.y2) {
 801ea96:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 801ea9a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801ea9e:	429a      	cmp	r2, r3
 801eaa0:	dc09      	bgt.n	801eab6 <refr_obj+0x25a>
            if(flags & LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE) {
 801eaa2:	f1b8 0f00 	cmp.w	r8, #0
 801eaa6:	d0ce      	beq.n	801ea46 <refr_obj+0x1ea>
                layer_alpha_test(obj, draw_ctx, layer_ctx, flags);
 801eaa8:	463b      	mov	r3, r7
 801eaaa:	4632      	mov	r2, r6
 801eaac:	4629      	mov	r1, r5
 801eaae:	4620      	mov	r0, r4
 801eab0:	f7ff fb98 	bl	801e1e4 <layer_alpha_test>
 801eab4:	e7c7      	b.n	801ea46 <refr_obj+0x1ea>
        lv_draw_layer_destroy(draw_ctx, layer_ctx);
 801eab6:	4631      	mov	r1, r6
 801eab8:	4628      	mov	r0, r5
 801eaba:	f7e9 fdd5 	bl	8008668 <lv_draw_layer_destroy>
 801eabe:	e6d7      	b.n	801e870 <refr_obj+0x14>
 801eac0:	200088e0 	.word	0x200088e0
 801eac4:	51eb851f 	.word	0x51eb851f

0801eac8 <refr_obj_and_children>:
{
 801eac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eacc:	4681      	mov	r9, r0
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 801eace:	4688      	mov	r8, r1
 801ead0:	b141      	cbz	r1, 801eae4 <refr_obj_and_children+0x1c>
    refr_obj(draw_ctx, top_obj);
 801ead2:	4641      	mov	r1, r8
 801ead4:	4648      	mov	r0, r9
 801ead6:	f7ff fec1 	bl	801e85c <refr_obj>
    parent = lv_obj_get_parent(top_obj);
 801eada:	4640      	mov	r0, r8
 801eadc:	f7fe fb4a 	bl	801d174 <lv_obj_get_parent>
 801eae0:	4605      	mov	r5, r0
    while(parent != NULL) {
 801eae2:	e02c      	b.n	801eb3e <refr_obj_and_children+0x76>
    if(top_obj == NULL) top_obj = lv_disp_get_scr_act(disp_refr);
 801eae4:	4b1a      	ldr	r3, [pc, #104]	@ (801eb50 <refr_obj_and_children+0x88>)
 801eae6:	6818      	ldr	r0, [r3, #0]
 801eae8:	f7e8 fd98 	bl	800761c <lv_disp_get_scr_act>
    if(top_obj == NULL) return;  /*Shouldn't happen*/
 801eaec:	4680      	mov	r8, r0
 801eaee:	2800      	cmp	r0, #0
 801eaf0:	d1ef      	bne.n	801ead2 <refr_obj_and_children+0xa>
}
 801eaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                refr_obj(draw_ctx, child);
 801eaf6:	4648      	mov	r0, r9
 801eaf8:	f7ff feb0 	bl	801e85c <refr_obj>
        for(i = 0; i < child_cnt; i++) {
 801eafc:	3401      	adds	r4, #1
 801eafe:	42b4      	cmp	r4, r6
 801eb00:	d209      	bcs.n	801eb16 <refr_obj_and_children+0x4e>
            lv_obj_t * child = parent->spec_attr->children[i];
 801eb02:	68ab      	ldr	r3, [r5, #8]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            if(!go) {
 801eb0a:	2f00      	cmp	r7, #0
 801eb0c:	d1f3      	bne.n	801eaf6 <refr_obj_and_children+0x2e>
                if(child == border_p) go = true;
 801eb0e:	4588      	cmp	r8, r1
 801eb10:	d1f4      	bne.n	801eafc <refr_obj_and_children+0x34>
 801eb12:	2701      	movs	r7, #1
 801eb14:	e7f2      	b.n	801eafc <refr_obj_and_children+0x34>
        lv_event_send(parent, LV_EVENT_DRAW_POST_BEGIN, (void *)draw_ctx);
 801eb16:	464a      	mov	r2, r9
 801eb18:	2117      	movs	r1, #23
 801eb1a:	4628      	mov	r0, r5
 801eb1c:	f7f2 f8d4 	bl	8010cc8 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST, (void *)draw_ctx);
 801eb20:	464a      	mov	r2, r9
 801eb22:	2118      	movs	r1, #24
 801eb24:	4628      	mov	r0, r5
 801eb26:	f7f2 f8cf 	bl	8010cc8 <lv_event_send>
        lv_event_send(parent, LV_EVENT_DRAW_POST_END, (void *)draw_ctx);
 801eb2a:	464a      	mov	r2, r9
 801eb2c:	2119      	movs	r1, #25
 801eb2e:	4628      	mov	r0, r5
 801eb30:	f7f2 f8ca 	bl	8010cc8 <lv_event_send>
        parent = lv_obj_get_parent(parent);
 801eb34:	4628      	mov	r0, r5
 801eb36:	f7fe fb1d 	bl	801d174 <lv_obj_get_parent>
        border_p = parent;
 801eb3a:	46a8      	mov	r8, r5
        parent = lv_obj_get_parent(parent);
 801eb3c:	4605      	mov	r5, r0
    while(parent != NULL) {
 801eb3e:	2d00      	cmp	r5, #0
 801eb40:	d0d7      	beq.n	801eaf2 <refr_obj_and_children+0x2a>
        uint32_t child_cnt = lv_obj_get_child_cnt(parent);
 801eb42:	4628      	mov	r0, r5
 801eb44:	f7fe fb55 	bl	801d1f2 <lv_obj_get_child_cnt>
 801eb48:	4606      	mov	r6, r0
        for(i = 0; i < child_cnt; i++) {
 801eb4a:	2400      	movs	r4, #0
        bool go = false;
 801eb4c:	4627      	mov	r7, r4
        for(i = 0; i < child_cnt; i++) {
 801eb4e:	e7d6      	b.n	801eafe <refr_obj_and_children+0x36>
 801eb50:	200088e0 	.word	0x200088e0

0801eb54 <refr_area_part>:
{
 801eb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb58:	b094      	sub	sp, #80	@ 0x50
 801eb5a:	4605      	mov	r5, r0
    lv_disp_draw_buf_t * draw_buf = lv_disp_get_draw_buf(disp_refr);
 801eb5c:	4b6d      	ldr	r3, [pc, #436]	@ (801ed14 <refr_area_part+0x1c0>)
 801eb5e:	6818      	ldr	r0, [r3, #0]
 801eb60:	f7f4 fbe6 	bl	8013330 <lv_disp_get_draw_buf>
 801eb64:	4604      	mov	r4, r0
    if(draw_ctx->init_buf)
 801eb66:	68eb      	ldr	r3, [r5, #12]
 801eb68:	b10b      	cbz	r3, 801eb6e <refr_area_part+0x1a>
        draw_ctx->init_buf(draw_ctx);
 801eb6a:	4628      	mov	r0, r5
 801eb6c:	4798      	blx	r3
    bool full_sized = draw_buf->size == (uint32_t)disp_refr->driver->hor_res * disp_refr->driver->ver_res;
 801eb6e:	68e0      	ldr	r0, [r4, #12]
 801eb70:	4b68      	ldr	r3, [pc, #416]	@ (801ed14 <refr_area_part+0x1c0>)
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	681a      	ldr	r2, [r3, #0]
 801eb76:	f9b2 3000 	ldrsh.w	r3, [r2]
 801eb7a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801eb7e:	fb02 f303 	mul.w	r3, r2, r3
    if((draw_buf->buf1 && !draw_buf->buf2) ||
 801eb82:	6822      	ldr	r2, [r4, #0]
 801eb84:	b112      	cbz	r2, 801eb8c <refr_area_part+0x38>
 801eb86:	6861      	ldr	r1, [r4, #4]
 801eb88:	2900      	cmp	r1, #0
 801eb8a:	d030      	beq.n	801ebee <refr_area_part+0x9a>
 801eb8c:	b11a      	cbz	r2, 801eb96 <refr_area_part+0x42>
       (draw_buf->buf1 && draw_buf->buf2 && full_sized)) {
 801eb8e:	6862      	ldr	r2, [r4, #4]
 801eb90:	b10a      	cbz	r2, 801eb96 <refr_area_part+0x42>
 801eb92:	4298      	cmp	r0, r3
 801eb94:	d02b      	beq.n	801ebee <refr_area_part+0x9a>
    top_act_scr = lv_refr_get_top_obj(draw_ctx->buf_area, lv_disp_get_scr_act(disp_refr));
 801eb96:	686c      	ldr	r4, [r5, #4]
 801eb98:	4e5e      	ldr	r6, [pc, #376]	@ (801ed14 <refr_area_part+0x1c0>)
 801eb9a:	6830      	ldr	r0, [r6, #0]
 801eb9c:	f7e8 fd3e 	bl	800761c <lv_disp_get_scr_act>
 801eba0:	4601      	mov	r1, r0
 801eba2:	4620      	mov	r0, r4
 801eba4:	f7ff fa86 	bl	801e0b4 <lv_refr_get_top_obj>
 801eba8:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
 801ebaa:	6833      	ldr	r3, [r6, #0]
 801ebac:	695e      	ldr	r6, [r3, #20]
 801ebae:	b126      	cbz	r6, 801ebba <refr_area_part+0x66>
        top_prev_scr = lv_refr_get_top_obj(draw_ctx->buf_area, disp_refr->prev_scr);
 801ebb0:	4631      	mov	r1, r6
 801ebb2:	6868      	ldr	r0, [r5, #4]
 801ebb4:	f7ff fa7e 	bl	801e0b4 <lv_refr_get_top_obj>
 801ebb8:	4606      	mov	r6, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 801ebba:	b31c      	cbz	r4, 801ec04 <refr_area_part+0xb0>
    if(disp_refr->draw_prev_over_act) {
 801ebbc:	4b55      	ldr	r3, [pc, #340]	@ (801ed14 <refr_area_part+0x1c0>)
 801ebbe:	681b      	ldr	r3, [r3, #0]
 801ebc0:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801ebc4:	f012 0f01 	tst.w	r2, #1
 801ebc8:	d07c      	beq.n	801ecc4 <refr_area_part+0x170>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 801ebca:	2c00      	cmp	r4, #0
 801ebcc:	d076      	beq.n	801ecbc <refr_area_part+0x168>
        refr_obj_and_children(draw_ctx, top_act_scr);
 801ebce:	4621      	mov	r1, r4
 801ebd0:	4628      	mov	r0, r5
 801ebd2:	f7ff ff79 	bl	801eac8 <refr_obj_and_children>
        if(disp_refr->prev_scr) {
 801ebd6:	4b4f      	ldr	r3, [pc, #316]	@ (801ed14 <refr_area_part+0x1c0>)
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	695b      	ldr	r3, [r3, #20]
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d07d      	beq.n	801ecdc <refr_area_part+0x188>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 801ebe0:	2e00      	cmp	r6, #0
 801ebe2:	d06d      	beq.n	801ecc0 <refr_area_part+0x16c>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 801ebe4:	4631      	mov	r1, r6
 801ebe6:	4628      	mov	r0, r5
 801ebe8:	f7ff ff6e 	bl	801eac8 <refr_obj_and_children>
 801ebec:	e076      	b.n	801ecdc <refr_area_part+0x188>
        while(draw_buf->flushing) {
 801ebee:	6923      	ldr	r3, [r4, #16]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d0d0      	beq.n	801eb96 <refr_area_part+0x42>
            if(disp_refr->driver->wait_cb) disp_refr->driver->wait_cb(disp_refr->driver);
 801ebf4:	4b47      	ldr	r3, [pc, #284]	@ (801ed14 <refr_area_part+0x1c0>)
 801ebf6:	681b      	ldr	r3, [r3, #0]
 801ebf8:	6818      	ldr	r0, [r3, #0]
 801ebfa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d0f6      	beq.n	801ebee <refr_area_part+0x9a>
 801ec00:	4798      	blx	r3
 801ec02:	e7f4      	b.n	801ebee <refr_area_part+0x9a>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
 801ec04:	2e00      	cmp	r6, #0
 801ec06:	d1d9      	bne.n	801ebbc <refr_area_part+0x68>
                    lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 801ec08:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 801ed14 <refr_area_part+0x1c0>
 801ec0c:	f8d8 0000 	ldr.w	r0, [r8]
 801ec10:	f7f4 fb3a 	bl	8013288 <lv_disp_get_hor_res>
 801ec14:	b287      	uxth	r7, r0
 801ec16:	3f01      	subs	r7, #1
 801ec18:	b2bf      	uxth	r7, r7
 801ec1a:	f8d8 0000 	ldr.w	r0, [r8]
 801ec1e:	f7f4 fb4b 	bl	80132b8 <lv_disp_get_ver_res>
 801ec22:	b283      	uxth	r3, r0
 801ec24:	3b01      	subs	r3, #1
        lv_area_set(&a, 0, 0,
 801ec26:	b21b      	sxth	r3, r3
 801ec28:	9300      	str	r3, [sp, #0]
 801ec2a:	b23b      	sxth	r3, r7
 801ec2c:	2200      	movs	r2, #0
 801ec2e:	4611      	mov	r1, r2
 801ec30:	a804      	add	r0, sp, #16
 801ec32:	f7e2 fea0 	bl	8001976 <lv_area_set>
        if(draw_ctx->draw_bg) {
 801ec36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ec38:	b1ab      	cbz	r3, 801ec66 <refr_area_part+0x112>
            lv_draw_rect_dsc_init(&dsc);
 801ec3a:	a806      	add	r0, sp, #24
 801ec3c:	f7eb f808 	bl	8009c50 <lv_draw_rect_dsc_init>
            dsc.bg_img_src = disp_refr->bg_img;
 801ec40:	f8d8 3000 	ldr.w	r3, [r8]
 801ec44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ec46:	920a      	str	r2, [sp, #40]	@ 0x28
            dsc.bg_img_opa = disp_refr->bg_opa;
 801ec48:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801ec4c:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
            dsc.bg_color = disp_refr->bg_color;
 801ec50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801ec52:	f8ad 301c 	strh.w	r3, [sp, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 801ec56:	f88d 201b 	strb.w	r2, [sp, #27]
            draw_ctx->draw_bg(draw_ctx, &dsc, &a);
 801ec5a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801ec5c:	aa04      	add	r2, sp, #16
 801ec5e:	a906      	add	r1, sp, #24
 801ec60:	4628      	mov	r0, r5
 801ec62:	4798      	blx	r3
 801ec64:	e7aa      	b.n	801ebbc <refr_area_part+0x68>
        else if(disp_refr->bg_img) {
 801ec66:	4b2b      	ldr	r3, [pc, #172]	@ (801ed14 <refr_area_part+0x1c0>)
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801ec6c:	b1a0      	cbz	r0, 801ec98 <refr_area_part+0x144>
            lv_res_t res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
 801ec6e:	a903      	add	r1, sp, #12
 801ec70:	f7f5 fc90 	bl	8014594 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
 801ec74:	2801      	cmp	r0, #1
 801ec76:	d1a1      	bne.n	801ebbc <refr_area_part+0x68>
                lv_draw_img_dsc_init(&dsc);
 801ec78:	a806      	add	r0, sp, #24
 801ec7a:	f7e8 ffbd 	bl	8007bf8 <lv_draw_img_dsc_init>
                dsc.opa = disp_refr->bg_opa;
 801ec7e:	4b25      	ldr	r3, [pc, #148]	@ (801ed14 <refr_area_part+0x1c0>)
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801ec86:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
                lv_draw_img(draw_ctx, &dsc, &a, disp_refr->bg_img);
 801ec8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec8c:	aa04      	add	r2, sp, #16
 801ec8e:	a906      	add	r1, sp, #24
 801ec90:	4628      	mov	r0, r5
 801ec92:	f7e9 f93f 	bl	8007f14 <lv_draw_img>
                LV_LOG_WARN("Can't draw the background image");
 801ec96:	e791      	b.n	801ebbc <refr_area_part+0x68>
            lv_draw_rect_dsc_init(&dsc);
 801ec98:	a806      	add	r0, sp, #24
 801ec9a:	f7ea ffd9 	bl	8009c50 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
 801ec9e:	4b1d      	ldr	r3, [pc, #116]	@ (801ed14 <refr_area_part+0x1c0>)
 801eca0:	681b      	ldr	r3, [r3, #0]
 801eca2:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801eca4:	f8ad 201c 	strh.w	r2, [sp, #28]
            dsc.bg_opa = disp_refr->bg_opa;
 801eca8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801ecac:	f88d 301b 	strb.w	r3, [sp, #27]
            lv_draw_rect(draw_ctx, &dsc, draw_ctx->buf_area);
 801ecb0:	686a      	ldr	r2, [r5, #4]
 801ecb2:	a906      	add	r1, sp, #24
 801ecb4:	4628      	mov	r0, r5
 801ecb6:	f7eb f80d 	bl	8009cd4 <lv_draw_rect>
 801ecba:	e77f      	b.n	801ebbc <refr_area_part+0x68>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 801ecbc:	691c      	ldr	r4, [r3, #16]
 801ecbe:	e786      	b.n	801ebce <refr_area_part+0x7a>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 801ecc0:	461e      	mov	r6, r3
 801ecc2:	e78f      	b.n	801ebe4 <refr_area_part+0x90>
        if(disp_refr->prev_scr) {
 801ecc4:	695b      	ldr	r3, [r3, #20]
 801ecc6:	b123      	cbz	r3, 801ecd2 <refr_area_part+0x17e>
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 801ecc8:	b1ee      	cbz	r6, 801ed06 <refr_area_part+0x1b2>
            refr_obj_and_children(draw_ctx, top_prev_scr);
 801ecca:	4631      	mov	r1, r6
 801eccc:	4628      	mov	r0, r5
 801ecce:	f7ff fefb 	bl	801eac8 <refr_obj_and_children>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 801ecd2:	b1d4      	cbz	r4, 801ed0a <refr_area_part+0x1b6>
        refr_obj_and_children(draw_ctx, top_act_scr);
 801ecd4:	4621      	mov	r1, r4
 801ecd6:	4628      	mov	r0, r5
 801ecd8:	f7ff fef6 	bl	801eac8 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_top(disp_refr));
 801ecdc:	4c0d      	ldr	r4, [pc, #52]	@ (801ed14 <refr_area_part+0x1c0>)
 801ecde:	6820      	ldr	r0, [r4, #0]
 801ece0:	f7e8 fcb2 	bl	8007648 <lv_disp_get_layer_top>
 801ece4:	4601      	mov	r1, r0
 801ece6:	4628      	mov	r0, r5
 801ece8:	f7ff feee 	bl	801eac8 <refr_obj_and_children>
    refr_obj_and_children(draw_ctx, lv_disp_get_layer_sys(disp_refr));
 801ecec:	6820      	ldr	r0, [r4, #0]
 801ecee:	f7e8 fcb6 	bl	800765e <lv_disp_get_layer_sys>
 801ecf2:	4601      	mov	r1, r0
 801ecf4:	4628      	mov	r0, r5
 801ecf6:	f7ff fee7 	bl	801eac8 <refr_obj_and_children>
    draw_buf_flush(disp_refr);
 801ecfa:	6820      	ldr	r0, [r4, #0]
 801ecfc:	f7ff fccc 	bl	801e698 <draw_buf_flush>
}
 801ed00:	b014      	add	sp, #80	@ 0x50
 801ed02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if(top_prev_scr == NULL) top_prev_scr = disp_refr->prev_scr;
 801ed06:	461e      	mov	r6, r3
 801ed08:	e7df      	b.n	801ecca <refr_area_part+0x176>
        if(top_act_scr == NULL) top_act_scr = disp_refr->act_scr;
 801ed0a:	4b02      	ldr	r3, [pc, #8]	@ (801ed14 <refr_area_part+0x1c0>)
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	691c      	ldr	r4, [r3, #16]
 801ed10:	e7e0      	b.n	801ecd4 <refr_area_part+0x180>
 801ed12:	bf00      	nop
 801ed14:	200088e0 	.word	0x200088e0

0801ed18 <refr_area>:
{
 801ed18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ed1c:	b087      	sub	sp, #28
 801ed1e:	4607      	mov	r7, r0
    lv_draw_ctx_t * draw_ctx = disp_refr->driver->draw_ctx;
 801ed20:	4b61      	ldr	r3, [pc, #388]	@ (801eea8 <refr_area+0x190>)
 801ed22:	6818      	ldr	r0, [r3, #0]
 801ed24:	6803      	ldr	r3, [r0, #0]
 801ed26:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
    draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 801ed28:	68db      	ldr	r3, [r3, #12]
 801ed2a:	689b      	ldr	r3, [r3, #8]
 801ed2c:	602b      	str	r3, [r5, #0]
    if(disp_refr->driver->full_refresh || disp_refr->driver->direct_mode) {
 801ed2e:	6803      	ldr	r3, [r0, #0]
 801ed30:	7c1b      	ldrb	r3, [r3, #16]
 801ed32:	f013 0f03 	tst.w	r3, #3
 801ed36:	d124      	bne.n	801ed82 <refr_area+0x6a>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 801ed38:	88bc      	ldrh	r4, [r7, #4]
 801ed3a:	883b      	ldrh	r3, [r7, #0]
 801ed3c:	1ae4      	subs	r4, r4, r3
 801ed3e:	b2a4      	uxth	r4, r4
 801ed40:	3401      	adds	r4, #1
 801ed42:	b224      	sxth	r4, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
 801ed44:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 801ed48:	fa1f f886 	uxth.w	r8, r6
 801ed4c:	887b      	ldrh	r3, [r7, #2]
 801ed4e:	eba8 0803 	sub.w	r8, r8, r3
 801ed52:	fa1f f888 	uxth.w	r8, r8
 801ed56:	f108 0801 	add.w	r8, r8, #1
 801ed5a:	fa0f f888 	sxth.w	r8, r8
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 801ed5e:	f7f4 faab 	bl	80132b8 <lv_disp_get_ver_res>
 801ed62:	42b0      	cmp	r0, r6
 801ed64:	dd40      	ble.n	801ede8 <refr_area+0xd0>
 801ed66:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
    int32_t max_row = get_max_row(disp_refr, w, h);
 801ed6a:	4642      	mov	r2, r8
 801ed6c:	4621      	mov	r1, r4
 801ed6e:	4b4e      	ldr	r3, [pc, #312]	@ (801eea8 <refr_area+0x190>)
 801ed70:	6818      	ldr	r0, [r3, #0]
 801ed72:	f7ff f869 	bl	801de48 <get_max_row>
 801ed76:	4680      	mov	r8, r0
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 801ed78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    lv_coord_t row_last = 0;
 801ed7c:	f04f 0900 	mov.w	r9, #0
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 801ed80:	e042      	b.n	801ee08 <refr_area+0xf0>
        lv_area_set(&disp_area, 0, 0, lv_disp_get_hor_res(disp_refr) - 1, lv_disp_get_ver_res(disp_refr) - 1);
 801ed82:	f7f4 fa81 	bl	8013288 <lv_disp_get_hor_res>
 801ed86:	b284      	uxth	r4, r0
 801ed88:	3c01      	subs	r4, #1
 801ed8a:	b2a4      	uxth	r4, r4
 801ed8c:	4e46      	ldr	r6, [pc, #280]	@ (801eea8 <refr_area+0x190>)
 801ed8e:	6830      	ldr	r0, [r6, #0]
 801ed90:	f7f4 fa92 	bl	80132b8 <lv_disp_get_ver_res>
 801ed94:	b283      	uxth	r3, r0
 801ed96:	3b01      	subs	r3, #1
 801ed98:	f10d 0808 	add.w	r8, sp, #8
 801ed9c:	b21b      	sxth	r3, r3
 801ed9e:	9300      	str	r3, [sp, #0]
 801eda0:	b223      	sxth	r3, r4
 801eda2:	2200      	movs	r2, #0
 801eda4:	4611      	mov	r1, r2
 801eda6:	4640      	mov	r0, r8
 801eda8:	f7e2 fde5 	bl	8001976 <lv_area_set>
        draw_ctx->buf_area = &disp_area;
 801edac:	f8c5 8004 	str.w	r8, [r5, #4]
        if(disp_refr->driver->full_refresh) {
 801edb0:	6833      	ldr	r3, [r6, #0]
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	7c1a      	ldrb	r2, [r3, #16]
 801edb6:	f012 0f02 	tst.w	r2, #2
 801edba:	d00a      	beq.n	801edd2 <refr_area+0xba>
            disp_refr->driver->draw_buf->last_part = 1;
 801edbc:	68da      	ldr	r2, [r3, #12]
 801edbe:	7e13      	ldrb	r3, [r2, #24]
 801edc0:	f043 0302 	orr.w	r3, r3, #2
 801edc4:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = &disp_area;
 801edc6:	f8c5 8008 	str.w	r8, [r5, #8]
            refr_area_part(draw_ctx);
 801edca:	4628      	mov	r0, r5
 801edcc:	f7ff fec2 	bl	801eb54 <refr_area_part>
 801edd0:	e047      	b.n	801ee62 <refr_area+0x14a>
            disp_refr->driver->draw_buf->last_part = disp_refr->driver->draw_buf->last_area;
 801edd2:	68da      	ldr	r2, [r3, #12]
 801edd4:	6991      	ldr	r1, [r2, #24]
 801edd6:	7e13      	ldrb	r3, [r2, #24]
 801edd8:	f361 0341 	bfi	r3, r1, #1, #1
 801eddc:	7613      	strb	r3, [r2, #24]
            draw_ctx->clip_area = area_p;
 801edde:	60af      	str	r7, [r5, #8]
            refr_area_part(draw_ctx);
 801ede0:	4628      	mov	r0, r5
 801ede2:	f7ff feb7 	bl	801eb54 <refr_area_part>
        return;
 801ede6:	e03c      	b.n	801ee62 <refr_area+0x14a>
                    lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 801ede8:	4b2f      	ldr	r3, [pc, #188]	@ (801eea8 <refr_area+0x190>)
 801edea:	6818      	ldr	r0, [r3, #0]
 801edec:	f7f4 fa64 	bl	80132b8 <lv_disp_get_ver_res>
 801edf0:	b286      	uxth	r6, r0
 801edf2:	3e01      	subs	r6, #1
    lv_coord_t y2 = area_p->y2 >= lv_disp_get_ver_res(disp_refr) ?
 801edf4:	b236      	sxth	r6, r6
 801edf6:	e7b8      	b.n	801ed6a <refr_area+0x52>
        row_last = sub_area.y2;
 801edf8:	f9bd 9016 	ldrsh.w	r9, [sp, #22]
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 801edfc:	454e      	cmp	r6, r9
 801edfe:	d027      	beq.n	801ee50 <refr_area+0x138>
        refr_area_part(draw_ctx);
 801ee00:	4628      	mov	r0, r5
 801ee02:	f7ff fea7 	bl	801eb54 <refr_area_part>
    for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 801ee06:	b223      	sxth	r3, r4
 801ee08:	eb03 0208 	add.w	r2, r3, r8
 801ee0c:	3a01      	subs	r2, #1
 801ee0e:	42b2      	cmp	r2, r6
 801ee10:	dc25      	bgt.n	801ee5e <refr_area+0x146>
        sub_area.x1 = area_p->x1;
 801ee12:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee16:	f8ad 2010 	strh.w	r2, [sp, #16]
        sub_area.x2 = area_p->x2;
 801ee1a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801ee1e:	f8ad 2014 	strh.w	r2, [sp, #20]
        sub_area.y1 = row;
 801ee22:	f8ad 3012 	strh.w	r3, [sp, #18]
        sub_area.y2 = row + max_row - 1;
 801ee26:	4443      	add	r3, r8
 801ee28:	b29c      	uxth	r4, r3
 801ee2a:	1e63      	subs	r3, r4, #1
 801ee2c:	f8ad 3016 	strh.w	r3, [sp, #22]
        draw_ctx->buf_area = &sub_area;
 801ee30:	ab04      	add	r3, sp, #16
 801ee32:	606b      	str	r3, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 801ee34:	60ab      	str	r3, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 801ee36:	4b1c      	ldr	r3, [pc, #112]	@ (801eea8 <refr_area+0x190>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	681a      	ldr	r2, [r3, #0]
 801ee3c:	68d2      	ldr	r2, [r2, #12]
 801ee3e:	6892      	ldr	r2, [r2, #8]
 801ee40:	602a      	str	r2, [r5, #0]
        if(sub_area.y2 > y2) sub_area.y2 = y2;
 801ee42:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 801ee46:	42b2      	cmp	r2, r6
 801ee48:	ddd6      	ble.n	801edf8 <refr_area+0xe0>
 801ee4a:	f8ad 6016 	strh.w	r6, [sp, #22]
 801ee4e:	e7d3      	b.n	801edf8 <refr_area+0xe0>
        if(y2 == row_last) disp_refr->driver->draw_buf->last_part = 1;
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	68da      	ldr	r2, [r3, #12]
 801ee54:	7e13      	ldrb	r3, [r2, #24]
 801ee56:	f043 0302 	orr.w	r3, r3, #2
 801ee5a:	7613      	strb	r3, [r2, #24]
 801ee5c:	e7d0      	b.n	801ee00 <refr_area+0xe8>
    if(y2 != row_last) {
 801ee5e:	45b1      	cmp	r9, r6
 801ee60:	d102      	bne.n	801ee68 <refr_area+0x150>
}
 801ee62:	b007      	add	sp, #28
 801ee64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sub_area.x1 = area_p->x1;
 801ee68:	f9b7 2000 	ldrsh.w	r2, [r7]
 801ee6c:	f8ad 2010 	strh.w	r2, [sp, #16]
        sub_area.x2 = area_p->x2;
 801ee70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801ee74:	f8ad 2014 	strh.w	r2, [sp, #20]
        sub_area.y1 = row;
 801ee78:	f8ad 3012 	strh.w	r3, [sp, #18]
        sub_area.y2 = y2;
 801ee7c:	f8ad 6016 	strh.w	r6, [sp, #22]
        draw_ctx->buf_area = &sub_area;
 801ee80:	ab04      	add	r3, sp, #16
 801ee82:	606b      	str	r3, [r5, #4]
        draw_ctx->clip_area = &sub_area;
 801ee84:	60ab      	str	r3, [r5, #8]
        draw_ctx->buf = disp_refr->driver->draw_buf->buf_act;
 801ee86:	4b08      	ldr	r3, [pc, #32]	@ (801eea8 <refr_area+0x190>)
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	681a      	ldr	r2, [r3, #0]
 801ee8c:	68d2      	ldr	r2, [r2, #12]
 801ee8e:	6892      	ldr	r2, [r2, #8]
 801ee90:	602a      	str	r2, [r5, #0]
        disp_refr->driver->draw_buf->last_part = 1;
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	68da      	ldr	r2, [r3, #12]
 801ee96:	7e13      	ldrb	r3, [r2, #24]
 801ee98:	f043 0302 	orr.w	r3, r3, #2
 801ee9c:	7613      	strb	r3, [r2, #24]
        refr_area_part(draw_ctx);
 801ee9e:	4628      	mov	r0, r5
 801eea0:	f7ff fe58 	bl	801eb54 <refr_area_part>
 801eea4:	e7dd      	b.n	801ee62 <refr_area+0x14a>
 801eea6:	bf00      	nop
 801eea8:	200088e0 	.word	0x200088e0

0801eeac <refr_invalid_areas>:
{
 801eeac:	b570      	push	{r4, r5, r6, lr}
    px_num = 0;
 801eeae:	4b2f      	ldr	r3, [pc, #188]	@ (801ef6c <refr_invalid_areas+0xc0>)
 801eeb0:	2200      	movs	r2, #0
 801eeb2:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
 801eeb4:	4b2e      	ldr	r3, [pc, #184]	@ (801ef70 <refr_invalid_areas+0xc4>)
 801eeb6:	681a      	ldr	r2, [r3, #0]
 801eeb8:	f8b2 4150 	ldrh.w	r4, [r2, #336]	@ 0x150
 801eebc:	2c00      	cmp	r4, #0
 801eebe:	d053      	beq.n	801ef68 <refr_invalid_areas+0xbc>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 801eec0:	3c01      	subs	r4, #1
 801eec2:	2c00      	cmp	r4, #0
 801eec4:	db05      	blt.n	801eed2 <refr_invalid_areas+0x26>
        if(disp_refr->inv_area_joined[i] == 0) {
 801eec6:	1913      	adds	r3, r2, r4
 801eec8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 801eecc:	b113      	cbz	r3, 801eed4 <refr_invalid_areas+0x28>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
 801eece:	3c01      	subs	r4, #1
 801eed0:	e7f7      	b.n	801eec2 <refr_invalid_areas+0x16>
    int32_t last_i = 0;
 801eed2:	2400      	movs	r4, #0
    if(disp_refr->driver->render_start_cb) {
 801eed4:	6810      	ldr	r0, [r2, #0]
 801eed6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801eed8:	b103      	cbz	r3, 801eedc <refr_invalid_areas+0x30>
        disp_refr->driver->render_start_cb(disp_refr->driver);
 801eeda:	4798      	blx	r3
    disp_refr->driver->draw_buf->last_area = 0;
 801eedc:	4b24      	ldr	r3, [pc, #144]	@ (801ef70 <refr_invalid_areas+0xc4>)
 801eede:	681a      	ldr	r2, [r3, #0]
 801eee0:	6813      	ldr	r3, [r2, #0]
 801eee2:	68d9      	ldr	r1, [r3, #12]
 801eee4:	7e0b      	ldrb	r3, [r1, #24]
 801eee6:	f023 0301 	bic.w	r3, r3, #1
 801eeea:	760b      	strb	r3, [r1, #24]
    disp_refr->driver->draw_buf->last_part = 0;
 801eeec:	6813      	ldr	r3, [r2, #0]
 801eeee:	68d9      	ldr	r1, [r3, #12]
 801eef0:	7e0b      	ldrb	r3, [r1, #24]
 801eef2:	f023 0302 	bic.w	r3, r3, #2
 801eef6:	760b      	strb	r3, [r1, #24]
    disp_refr->rendering_in_progress = true;
 801eef8:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 801eefc:	f043 0304 	orr.w	r3, r3, #4
 801ef00:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    for(i = 0; i < disp_refr->inv_p; i++) {
 801ef04:	2500      	movs	r5, #0
 801ef06:	e015      	b.n	801ef34 <refr_invalid_areas+0x88>
            disp_refr->driver->draw_buf->last_part = 0;
 801ef08:	681a      	ldr	r2, [r3, #0]
 801ef0a:	68d1      	ldr	r1, [r2, #12]
 801ef0c:	7e0a      	ldrb	r2, [r1, #24]
 801ef0e:	f022 0202 	bic.w	r2, r2, #2
 801ef12:	760a      	strb	r2, [r1, #24]
            refr_area(&disp_refr->inv_areas[i]);
 801ef14:	1da8      	adds	r0, r5, #6
 801ef16:	00c6      	lsls	r6, r0, #3
 801ef18:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801ef1c:	f7ff fefc 	bl	801ed18 <refr_area>
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 801ef20:	4b13      	ldr	r3, [pc, #76]	@ (801ef70 <refr_invalid_areas+0xc4>)
 801ef22:	6818      	ldr	r0, [r3, #0]
 801ef24:	4430      	add	r0, r6
 801ef26:	f7e2 fd39 	bl	800199c <lv_area_get_size>
 801ef2a:	4a10      	ldr	r2, [pc, #64]	@ (801ef6c <refr_invalid_areas+0xc0>)
 801ef2c:	6813      	ldr	r3, [r2, #0]
 801ef2e:	4403      	add	r3, r0
 801ef30:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 801ef32:	3501      	adds	r5, #1
 801ef34:	4b0e      	ldr	r3, [pc, #56]	@ (801ef70 <refr_invalid_areas+0xc4>)
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	f8b3 2150 	ldrh.w	r2, [r3, #336]	@ 0x150
 801ef3c:	42aa      	cmp	r2, r5
 801ef3e:	dd0d      	ble.n	801ef5c <refr_invalid_areas+0xb0>
        if(disp_refr->inv_area_joined[i] == 0) {
 801ef40:	195a      	adds	r2, r3, r5
 801ef42:	f892 2130 	ldrb.w	r2, [r2, #304]	@ 0x130
 801ef46:	2a00      	cmp	r2, #0
 801ef48:	d1f3      	bne.n	801ef32 <refr_invalid_areas+0x86>
            if(i == last_i) disp_refr->driver->draw_buf->last_area = 1;
 801ef4a:	42a5      	cmp	r5, r4
 801ef4c:	d1dc      	bne.n	801ef08 <refr_invalid_areas+0x5c>
 801ef4e:	681a      	ldr	r2, [r3, #0]
 801ef50:	68d1      	ldr	r1, [r2, #12]
 801ef52:	7e0a      	ldrb	r2, [r1, #24]
 801ef54:	f042 0201 	orr.w	r2, r2, #1
 801ef58:	760a      	strb	r2, [r1, #24]
 801ef5a:	e7d5      	b.n	801ef08 <refr_invalid_areas+0x5c>
    disp_refr->rendering_in_progress = false;
 801ef5c:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801ef60:	f022 0204 	bic.w	r2, r2, #4
 801ef64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801ef68:	bd70      	pop	{r4, r5, r6, pc}
 801ef6a:	bf00      	nop
 801ef6c:	200088e4 	.word	0x200088e4
 801ef70:	200088e0 	.word	0x200088e0

0801ef74 <_lv_inv_area>:
{
 801ef74:	b530      	push	{r4, r5, lr}
 801ef76:	b085      	sub	sp, #20
 801ef78:	460d      	mov	r5, r1
    if(!disp) disp = lv_disp_get_default();
 801ef7a:	4604      	mov	r4, r0
 801ef7c:	b368      	cbz	r0, 801efda <_lv_inv_area+0x66>
    if(!lv_disp_is_invalidation_enabled(disp)) return;
 801ef7e:	4620      	mov	r0, r4
 801ef80:	f7e8 fb81 	bl	8007686 <lv_disp_is_invalidation_enabled>
 801ef84:	b390      	cbz	r0, 801efec <_lv_inv_area+0x78>
    if(disp->rendering_in_progress) {
 801ef86:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801ef8a:	f013 0f04 	tst.w	r3, #4
 801ef8e:	d12d      	bne.n	801efec <_lv_inv_area+0x78>
    if(area_p == NULL) {
 801ef90:	b34d      	cbz	r5, 801efe6 <_lv_inv_area+0x72>
    scr_area.x1 = 0;
 801ef92:	2300      	movs	r3, #0
 801ef94:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
 801ef98:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 801ef9c:	4620      	mov	r0, r4
 801ef9e:	f7f4 f973 	bl	8013288 <lv_disp_get_hor_res>
 801efa2:	b280      	uxth	r0, r0
 801efa4:	3801      	subs	r0, #1
 801efa6:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 801efaa:	4620      	mov	r0, r4
 801efac:	f7f4 f984 	bl	80132b8 <lv_disp_get_ver_res>
 801efb0:	b280      	uxth	r0, r0
 801efb2:	3801      	subs	r0, #1
 801efb4:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
 801efb8:	aa02      	add	r2, sp, #8
 801efba:	4629      	mov	r1, r5
 801efbc:	4668      	mov	r0, sp
 801efbe:	f7e2 fd19 	bl	80019f4 <_lv_area_intersect>
    if(suc == false)  return; /*Out of the screen*/
 801efc2:	b198      	cbz	r0, 801efec <_lv_inv_area+0x78>
    if(disp->driver->full_refresh) {
 801efc4:	6820      	ldr	r0, [r4, #0]
 801efc6:	7c03      	ldrb	r3, [r0, #16]
 801efc8:	f013 0f02 	tst.w	r3, #2
 801efcc:	d110      	bne.n	801eff0 <_lv_inv_area+0x7c>
    if(disp->driver->rounder_cb) disp->driver->rounder_cb(disp->driver, &com_area);
 801efce:	6983      	ldr	r3, [r0, #24]
 801efd0:	b10b      	cbz	r3, 801efd6 <_lv_inv_area+0x62>
 801efd2:	4669      	mov	r1, sp
 801efd4:	4798      	blx	r3
{
 801efd6:	2500      	movs	r5, #0
 801efd8:	e01c      	b.n	801f014 <_lv_inv_area+0xa0>
    if(!disp) disp = lv_disp_get_default();
 801efda:	f7f4 f94f 	bl	801327c <lv_disp_get_default>
    if(!disp) return;
 801efde:	4604      	mov	r4, r0
 801efe0:	2800      	cmp	r0, #0
 801efe2:	d1cc      	bne.n	801ef7e <_lv_inv_area+0xa>
 801efe4:	e002      	b.n	801efec <_lv_inv_area+0x78>
        disp->inv_p = 0;
 801efe6:	2300      	movs	r3, #0
 801efe8:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
}
 801efec:	b005      	add	sp, #20
 801efee:	bd30      	pop	{r4, r5, pc}
        disp->inv_areas[0] = scr_area;
 801eff0:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801eff4:	aa04      	add	r2, sp, #16
 801eff6:	e912 0003 	ldmdb	r2, {r0, r1}
 801effa:	e883 0003 	stmia.w	r3, {r0, r1}
        disp->inv_p = 1;
 801effe:	2301      	movs	r3, #1
 801f000:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
        if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801f004:	6860      	ldr	r0, [r4, #4]
 801f006:	2800      	cmp	r0, #0
 801f008:	d0f0      	beq.n	801efec <_lv_inv_area+0x78>
 801f00a:	f007 fd00 	bl	8026a0e <lv_timer_resume>
        return;
 801f00e:	e7ed      	b.n	801efec <_lv_inv_area+0x78>
    for(i = 0; i < disp->inv_p; i++) {
 801f010:	3501      	adds	r5, #1
 801f012:	b2ad      	uxth	r5, r5
 801f014:	f8b4 3150 	ldrh.w	r3, [r4, #336]	@ 0x150
 801f018:	42ab      	cmp	r3, r5
 801f01a:	d909      	bls.n	801f030 <_lv_inv_area+0xbc>
        if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
 801f01c:	1da9      	adds	r1, r5, #6
 801f01e:	2200      	movs	r2, #0
 801f020:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801f024:	4668      	mov	r0, sp
 801f026:	f7e2 fe19 	bl	8001c5c <_lv_area_is_in>
 801f02a:	2800      	cmp	r0, #0
 801f02c:	d0f0      	beq.n	801f010 <_lv_inv_area+0x9c>
 801f02e:	e7dd      	b.n	801efec <_lv_inv_area+0x78>
    if(disp->inv_p < LV_INV_BUF_SIZE) {
 801f030:	2b1f      	cmp	r3, #31
 801f032:	d81a      	bhi.n	801f06a <_lv_inv_area+0xf6>
    dest->x1 = src->x1;
 801f034:	f9bd 2000 	ldrsh.w	r2, [sp]
 801f038:	3306      	adds	r3, #6
 801f03a:	f824 2033 	strh.w	r2, [r4, r3, lsl #3]
    dest->y1 = src->y1;
 801f03e:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 801f042:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 801f046:	805a      	strh	r2, [r3, #2]
    dest->x2 = src->x2;
 801f048:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f04c:	809a      	strh	r2, [r3, #4]
    dest->y2 = src->y2;
 801f04e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801f052:	80da      	strh	r2, [r3, #6]
    disp->inv_p++;
 801f054:	f8b4 3150 	ldrh.w	r3, [r4, #336]	@ 0x150
 801f058:	3301      	adds	r3, #1
 801f05a:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    if(disp->refr_timer) lv_timer_resume(disp->refr_timer);
 801f05e:	6860      	ldr	r0, [r4, #4]
 801f060:	2800      	cmp	r0, #0
 801f062:	d0c3      	beq.n	801efec <_lv_inv_area+0x78>
 801f064:	f007 fcd3 	bl	8026a0e <lv_timer_resume>
 801f068:	e7c0      	b.n	801efec <_lv_inv_area+0x78>
        disp->inv_p = 0;
 801f06a:	2300      	movs	r3, #0
 801f06c:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    dest->x1 = src->x1;
 801f070:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801f074:	8623      	strh	r3, [r4, #48]	@ 0x30
    dest->y1 = src->y1;
 801f076:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801f07a:	8663      	strh	r3, [r4, #50]	@ 0x32
    dest->x2 = src->x2;
 801f07c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f080:	86a3      	strh	r3, [r4, #52]	@ 0x34
    dest->y2 = src->y2;
 801f082:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f086:	86e3      	strh	r3, [r4, #54]	@ 0x36
}
 801f088:	e7e4      	b.n	801f054 <_lv_inv_area+0xe0>
	...

0801f08c <_lv_refr_get_disp_refreshing>:
}
 801f08c:	4b01      	ldr	r3, [pc, #4]	@ (801f094 <_lv_refr_get_disp_refreshing+0x8>)
 801f08e:	6818      	ldr	r0, [r3, #0]
 801f090:	4770      	bx	lr
 801f092:	bf00      	nop
 801f094:	200088e0 	.word	0x200088e0

0801f098 <_lv_disp_refr_timer>:
{
 801f098:	b530      	push	{r4, r5, lr}
 801f09a:	b08b      	sub	sp, #44	@ 0x2c
 801f09c:	4604      	mov	r4, r0
    uint32_t start = lv_tick_get();
 801f09e:	f7f4 f965 	bl	801336c <lv_tick_get>
 801f0a2:	4605      	mov	r5, r0
    volatile uint32_t elaps = 0;
 801f0a4:	2300      	movs	r3, #0
 801f0a6:	9309      	str	r3, [sp, #36]	@ 0x24
    if(tmr) {
 801f0a8:	2c00      	cmp	r4, #0
 801f0aa:	d02e      	beq.n	801f10a <_lv_disp_refr_timer+0x72>
        disp_refr = tmr->user_data;
 801f0ac:	68e2      	ldr	r2, [r4, #12]
 801f0ae:	4bab      	ldr	r3, [pc, #684]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f0b0:	601a      	str	r2, [r3, #0]
    lv_obj_update_layout(disp_refr->act_scr);
 801f0b2:	4caa      	ldr	r4, [pc, #680]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f0b4:	6823      	ldr	r3, [r4, #0]
 801f0b6:	6918      	ldr	r0, [r3, #16]
 801f0b8:	f7fb fbf0 	bl	801a89c <lv_obj_update_layout>
    if(disp_refr->prev_scr) lv_obj_update_layout(disp_refr->prev_scr);
 801f0bc:	6823      	ldr	r3, [r4, #0]
 801f0be:	6958      	ldr	r0, [r3, #20]
 801f0c0:	b108      	cbz	r0, 801f0c6 <_lv_disp_refr_timer+0x2e>
 801f0c2:	f7fb fbeb 	bl	801a89c <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->top_layer);
 801f0c6:	4ca5      	ldr	r4, [pc, #660]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f0c8:	6823      	ldr	r3, [r4, #0]
 801f0ca:	69d8      	ldr	r0, [r3, #28]
 801f0cc:	f7fb fbe6 	bl	801a89c <lv_obj_update_layout>
    lv_obj_update_layout(disp_refr->sys_layer);
 801f0d0:	6823      	ldr	r3, [r4, #0]
 801f0d2:	6a18      	ldr	r0, [r3, #32]
 801f0d4:	f7fb fbe2 	bl	801a89c <lv_obj_update_layout>
    if(disp_refr->act_scr == NULL) {
 801f0d8:	6823      	ldr	r3, [r4, #0]
 801f0da:	691a      	ldr	r2, [r3, #16]
 801f0dc:	b1d2      	cbz	r2, 801f114 <_lv_disp_refr_timer+0x7c>
    lv_refr_join_area();
 801f0de:	f7ff f8b7 	bl	801e250 <lv_refr_join_area>
    refr_sync_areas();
 801f0e2:	f7ff f91f 	bl	801e324 <refr_sync_areas>
    refr_invalid_areas();
 801f0e6:	f7ff fee1 	bl	801eeac <refr_invalid_areas>
    if(disp_refr->inv_p != 0) {
 801f0ea:	4b9c      	ldr	r3, [pc, #624]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	f8b3 2150 	ldrh.w	r2, [r3, #336]	@ 0x150
 801f0f2:	2a00      	cmp	r2, #0
 801f0f4:	d049      	beq.n	801f18a <_lv_disp_refr_timer+0xf2>
        if(disp_refr->driver->direct_mode && disp_refr->driver->draw_buf->buf2) {
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	7c1a      	ldrb	r2, [r3, #16]
 801f0fa:	f012 0f01 	tst.w	r2, #1
 801f0fe:	d027      	beq.n	801f150 <_lv_disp_refr_timer+0xb8>
 801f100:	68db      	ldr	r3, [r3, #12]
 801f102:	685b      	ldr	r3, [r3, #4]
 801f104:	b323      	cbz	r3, 801f150 <_lv_disp_refr_timer+0xb8>
            for(i = 0; i < disp_refr->inv_p; i++) {
 801f106:	2400      	movs	r4, #0
 801f108:	e009      	b.n	801f11e <_lv_disp_refr_timer+0x86>
        disp_refr = lv_disp_get_default();
 801f10a:	f7f4 f8b7 	bl	801327c <lv_disp_get_default>
 801f10e:	4b93      	ldr	r3, [pc, #588]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f110:	6018      	str	r0, [r3, #0]
 801f112:	e7ce      	b.n	801f0b2 <_lv_disp_refr_timer+0x1a>
        disp_refr->inv_p = 0;
 801f114:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
        return;
 801f118:	e062      	b.n	801f1e0 <_lv_disp_refr_timer+0x148>
            for(i = 0; i < disp_refr->inv_p; i++) {
 801f11a:	3401      	adds	r4, #1
 801f11c:	b2a4      	uxth	r4, r4
 801f11e:	4b8f      	ldr	r3, [pc, #572]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f120:	6818      	ldr	r0, [r3, #0]
 801f122:	f8b0 2150 	ldrh.w	r2, [r0, #336]	@ 0x150
 801f126:	42a2      	cmp	r2, r4
 801f128:	d912      	bls.n	801f150 <_lv_disp_refr_timer+0xb8>
                if(disp_refr->inv_area_joined[i])
 801f12a:	1902      	adds	r2, r0, r4
 801f12c:	f892 2130 	ldrb.w	r2, [r2, #304]	@ 0x130
 801f130:	2a00      	cmp	r2, #0
 801f132:	d1f2      	bne.n	801f11a <_lv_disp_refr_timer+0x82>
                lv_area_t * sync_area = _lv_ll_ins_tail(&disp_refr->sync_areas);
 801f134:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 801f138:	f7f7 f9f4 	bl	8016524 <_lv_ll_ins_tail>
 801f13c:	4602      	mov	r2, r0
                *sync_area = disp_refr->inv_areas[i];
 801f13e:	4b87      	ldr	r3, [pc, #540]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f140:	681b      	ldr	r3, [r3, #0]
 801f142:	1da1      	adds	r1, r4, #6
 801f144:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801f148:	cb03      	ldmia	r3!, {r0, r1}
 801f14a:	6010      	str	r0, [r2, #0]
 801f14c:	6051      	str	r1, [r2, #4]
 801f14e:	e7e4      	b.n	801f11a <_lv_disp_refr_timer+0x82>
        lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
 801f150:	4c82      	ldr	r4, [pc, #520]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f152:	6820      	ldr	r0, [r4, #0]
 801f154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801f158:	3030      	adds	r0, #48	@ 0x30
 801f15a:	f7f7 fdb3 	bl	8016cc4 <lv_memset_00>
        lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
 801f15e:	6820      	ldr	r0, [r4, #0]
 801f160:	2120      	movs	r1, #32
 801f162:	f500 7098 	add.w	r0, r0, #304	@ 0x130
 801f166:	f7f7 fdad 	bl	8016cc4 <lv_memset_00>
        disp_refr->inv_p = 0;
 801f16a:	6823      	ldr	r3, [r4, #0]
 801f16c:	2200      	movs	r2, #0
 801f16e:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
        elaps = lv_tick_elaps(start);
 801f172:	4628      	mov	r0, r5
 801f174:	f7f4 f908 	bl	8013388 <lv_tick_elaps>
 801f178:	9009      	str	r0, [sp, #36]	@ 0x24
        if(disp_refr->driver->monitor_cb) {
 801f17a:	6823      	ldr	r3, [r4, #0]
 801f17c:	6818      	ldr	r0, [r3, #0]
 801f17e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801f180:	b11b      	cbz	r3, 801f18a <_lv_disp_refr_timer+0xf2>
            disp_refr->driver->monitor_cb(disp_refr->driver, elaps, px_num);
 801f182:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f184:	4a76      	ldr	r2, [pc, #472]	@ (801f360 <_lv_disp_refr_timer+0x2c8>)
 801f186:	6812      	ldr	r2, [r2, #0]
 801f188:	4798      	blx	r3
    lv_mem_buf_free_all();
 801f18a:	f7f7 fc8f 	bl	8016aac <lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
 801f18e:	f7f2 fe87 	bl	8011ea0 <_lv_font_clean_up_fmt_txt>
    _lv_draw_mask_cleanup();
 801f192:	f7ea fb19 	bl	80097c8 <_lv_draw_mask_cleanup>
    lv_obj_t * perf_label = perf_monitor.perf_label;
 801f196:	4b73      	ldr	r3, [pc, #460]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f198:	695c      	ldr	r4, [r3, #20]
    if(perf_label == NULL) {
 801f19a:	b31c      	cbz	r4, 801f1e4 <_lv_disp_refr_timer+0x14c>
    if(lv_tick_elaps(perf_monitor.perf_last_time) < 300) {
 801f19c:	4b71      	ldr	r3, [pc, #452]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f19e:	6818      	ldr	r0, [r3, #0]
 801f1a0:	f7f4 f8f2 	bl	8013388 <lv_tick_elaps>
 801f1a4:	f5b0 7f96 	cmp.w	r0, #300	@ 0x12c
 801f1a8:	d25f      	bcs.n	801f26a <_lv_disp_refr_timer+0x1d2>
        if(px_num > 5000) {
 801f1aa:	4b6d      	ldr	r3, [pc, #436]	@ (801f360 <_lv_disp_refr_timer+0x2c8>)
 801f1ac:	681a      	ldr	r2, [r3, #0]
 801f1ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 801f1b2:	429a      	cmp	r2, r3
 801f1b4:	d907      	bls.n	801f1c6 <_lv_disp_refr_timer+0x12e>
            perf_monitor.elaps_sum += elaps;
 801f1b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f1b8:	4b6a      	ldr	r3, [pc, #424]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f1ba:	685a      	ldr	r2, [r3, #4]
 801f1bc:	440a      	add	r2, r1
 801f1be:	605a      	str	r2, [r3, #4]
            perf_monitor.frame_cnt ++;
 801f1c0:	689a      	ldr	r2, [r3, #8]
 801f1c2:	3201      	adds	r2, #1
 801f1c4:	609a      	str	r2, [r3, #8]
    lv_obj_t * mem_label = mem_monitor.mem_label;
 801f1c6:	4b68      	ldr	r3, [pc, #416]	@ (801f368 <_lv_disp_refr_timer+0x2d0>)
 801f1c8:	685c      	ldr	r4, [r3, #4]
    if(mem_label == NULL) {
 801f1ca:	2c00      	cmp	r4, #0
 801f1cc:	f000 8087 	beq.w	801f2de <_lv_disp_refr_timer+0x246>
    if(lv_tick_elaps(mem_monitor.mem_last_time) > 300) {
 801f1d0:	4b65      	ldr	r3, [pc, #404]	@ (801f368 <_lv_disp_refr_timer+0x2d0>)
 801f1d2:	6818      	ldr	r0, [r3, #0]
 801f1d4:	f7f4 f8d8 	bl	8013388 <lv_tick_elaps>
 801f1d8:	f5b0 7f96 	cmp.w	r0, #300	@ 0x12c
 801f1dc:	f200 80ca 	bhi.w	801f374 <_lv_disp_refr_timer+0x2dc>
}
 801f1e0:	b00b      	add	sp, #44	@ 0x2c
 801f1e2:	bd30      	pop	{r4, r5, pc}
        perf_label = lv_label_create(lv_layer_sys());
 801f1e4:	f7ff f940 	bl	801e468 <lv_layer_sys>
 801f1e8:	f7f5 fdc8 	bl	8014d7c <lv_label_create>
 801f1ec:	4604      	mov	r4, r0
        lv_obj_set_style_bg_opa(perf_label, LV_OPA_50, 0);
 801f1ee:	2200      	movs	r2, #0
 801f1f0:	217f      	movs	r1, #127	@ 0x7f
 801f1f2:	f7fd ff95 	bl	801d120 <lv_obj_set_style_bg_opa>
    return (uint8_t)(bright >> 3);
}

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 801f1f6:	f04f 0100 	mov.w	r1, #0
 801f1fa:	f021 0107 	bic.w	r1, r1, #7
 801f1fe:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 801f202:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 801f206:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        lv_obj_set_style_bg_color(perf_label, lv_color_black(), 0);
 801f20a:	2200      	movs	r2, #0
 801f20c:	4620      	mov	r0, r4
 801f20e:	f7fd ff80 	bl	801d112 <lv_obj_set_style_bg_color>
        lv_obj_set_style_text_color(perf_label, lv_color_white(), 0);
 801f212:	2200      	movs	r2, #0
 801f214:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f218:	4620      	mov	r0, r4
 801f21a:	f7fd ff8f 	bl	801d13c <lv_obj_set_style_text_color>
        lv_obj_set_style_pad_top(perf_label, 3, 0);
 801f21e:	2200      	movs	r2, #0
 801f220:	2103      	movs	r1, #3
 801f222:	4620      	mov	r0, r4
 801f224:	f7fd ff59 	bl	801d0da <lv_obj_set_style_pad_top>
        lv_obj_set_style_pad_bottom(perf_label, 3, 0);
 801f228:	2200      	movs	r2, #0
 801f22a:	2103      	movs	r1, #3
 801f22c:	4620      	mov	r0, r4
 801f22e:	f7fd ff5b 	bl	801d0e8 <lv_obj_set_style_pad_bottom>
        lv_obj_set_style_pad_left(perf_label, 3, 0);
 801f232:	2200      	movs	r2, #0
 801f234:	2103      	movs	r1, #3
 801f236:	4620      	mov	r0, r4
 801f238:	f7fd ff5d 	bl	801d0f6 <lv_obj_set_style_pad_left>
        lv_obj_set_style_pad_right(perf_label, 3, 0);
 801f23c:	2200      	movs	r2, #0
 801f23e:	2103      	movs	r1, #3
 801f240:	4620      	mov	r0, r4
 801f242:	f7fd ff5f 	bl	801d104 <lv_obj_set_style_pad_right>
        lv_obj_set_style_text_align(perf_label, LV_TEXT_ALIGN_RIGHT, 0);
 801f246:	2200      	movs	r2, #0
 801f248:	2103      	movs	r1, #3
 801f24a:	4620      	mov	r0, r4
 801f24c:	f7fd ff7d 	bl	801d14a <lv_obj_set_style_text_align>
        lv_label_set_text(perf_label, "?");
 801f250:	4946      	ldr	r1, [pc, #280]	@ (801f36c <_lv_disp_refr_timer+0x2d4>)
 801f252:	4620      	mov	r0, r4
 801f254:	f7f6 fa48 	bl	80156e8 <lv_label_set_text>
        lv_obj_align(perf_label, LV_USE_PERF_MONITOR_POS, 0, 0);
 801f258:	2300      	movs	r3, #0
 801f25a:	461a      	mov	r2, r3
 801f25c:	2106      	movs	r1, #6
 801f25e:	4620      	mov	r0, r4
 801f260:	f7fa f9d6 	bl	8019610 <lv_obj_align>
        perf_monitor.perf_label = perf_label;
 801f264:	4b3f      	ldr	r3, [pc, #252]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f266:	615c      	str	r4, [r3, #20]
 801f268:	e798      	b.n	801f19c <_lv_disp_refr_timer+0x104>
        perf_monitor.perf_last_time = lv_tick_get();
 801f26a:	f7f4 f87f 	bl	801336c <lv_tick_get>
 801f26e:	4b3d      	ldr	r3, [pc, #244]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f270:	6018      	str	r0, [r3, #0]
        if(disp_refr->refr_timer) {
 801f272:	4b3a      	ldr	r3, [pc, #232]	@ (801f35c <_lv_disp_refr_timer+0x2c4>)
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	685b      	ldr	r3, [r3, #4]
 801f278:	b36b      	cbz	r3, 801f2d6 <_lv_disp_refr_timer+0x23e>
            fps_limit = 1000 / disp_refr->refr_timer->period;
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
 801f280:	fbb5 f5f3 	udiv	r5, r5, r3
        if(perf_monitor.elaps_sum == 0) {
 801f284:	4b37      	ldr	r3, [pc, #220]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f286:	685b      	ldr	r3, [r3, #4]
 801f288:	b913      	cbnz	r3, 801f290 <_lv_disp_refr_timer+0x1f8>
            perf_monitor.elaps_sum = 1;
 801f28a:	4b36      	ldr	r3, [pc, #216]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f28c:	2201      	movs	r2, #1
 801f28e:	605a      	str	r2, [r3, #4]
        if(perf_monitor.frame_cnt == 0) {
 801f290:	4b34      	ldr	r3, [pc, #208]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f292:	689b      	ldr	r3, [r3, #8]
 801f294:	b30b      	cbz	r3, 801f2da <_lv_disp_refr_timer+0x242>
            fps = (1000 * perf_monitor.frame_cnt) / perf_monitor.elaps_sum;
 801f296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801f29a:	fb02 f303 	mul.w	r3, r2, r3
 801f29e:	4a31      	ldr	r2, [pc, #196]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f2a0:	6852      	ldr	r2, [r2, #4]
 801f2a2:	fbb3 f3f2 	udiv	r3, r3, r2
        perf_monitor.elaps_sum = 0;
 801f2a6:	4a2f      	ldr	r2, [pc, #188]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f2a8:	2100      	movs	r1, #0
 801f2aa:	6051      	str	r1, [r2, #4]
        perf_monitor.frame_cnt = 0;
 801f2ac:	6091      	str	r1, [r2, #8]
        if(fps > fps_limit) {
 801f2ae:	429d      	cmp	r5, r3
 801f2b0:	d300      	bcc.n	801f2b4 <_lv_disp_refr_timer+0x21c>
 801f2b2:	461d      	mov	r5, r3
        perf_monitor.fps_sum_all += fps;
 801f2b4:	4b2b      	ldr	r3, [pc, #172]	@ (801f364 <_lv_disp_refr_timer+0x2cc>)
 801f2b6:	691a      	ldr	r2, [r3, #16]
 801f2b8:	442a      	add	r2, r5
 801f2ba:	611a      	str	r2, [r3, #16]
        perf_monitor.fps_sum_cnt ++;
 801f2bc:	68da      	ldr	r2, [r3, #12]
 801f2be:	3201      	adds	r2, #1
 801f2c0:	60da      	str	r2, [r3, #12]
        uint32_t cpu = 100 - lv_timer_get_idle();
 801f2c2:	f007 fbc5 	bl	8026a50 <lv_timer_get_idle>
        lv_label_set_text_fmt(perf_label, "%"LV_PRIu32" FPS\n%"LV_PRIu32"%% CPU", fps, cpu);
 801f2c6:	f1c0 0364 	rsb	r3, r0, #100	@ 0x64
 801f2ca:	462a      	mov	r2, r5
 801f2cc:	4928      	ldr	r1, [pc, #160]	@ (801f370 <_lv_disp_refr_timer+0x2d8>)
 801f2ce:	4620      	mov	r0, r4
 801f2d0:	f7f6 fa47 	bl	8015762 <lv_label_set_text_fmt>
 801f2d4:	e777      	b.n	801f1c6 <_lv_disp_refr_timer+0x12e>
            fps_limit = 1000 / LV_DISP_DEF_REFR_PERIOD;
 801f2d6:	2521      	movs	r5, #33	@ 0x21
 801f2d8:	e7d4      	b.n	801f284 <_lv_disp_refr_timer+0x1ec>
            fps = fps_limit;
 801f2da:	462b      	mov	r3, r5
 801f2dc:	e7e3      	b.n	801f2a6 <_lv_disp_refr_timer+0x20e>
        mem_label = lv_label_create(lv_layer_sys());
 801f2de:	f7ff f8c3 	bl	801e468 <lv_layer_sys>
 801f2e2:	f7f5 fd4b 	bl	8014d7c <lv_label_create>
 801f2e6:	4604      	mov	r4, r0
        lv_obj_set_style_bg_opa(mem_label, LV_OPA_50, 0);
 801f2e8:	2200      	movs	r2, #0
 801f2ea:	217f      	movs	r1, #127	@ 0x7f
 801f2ec:	f7fd ff18 	bl	801d120 <lv_obj_set_style_bg_opa>
 801f2f0:	f04f 0100 	mov.w	r1, #0
 801f2f4:	f021 0107 	bic.w	r1, r1, #7
 801f2f8:	f021 01f8 	bic.w	r1, r1, #248	@ 0xf8
 801f2fc:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
 801f300:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
        lv_obj_set_style_bg_color(mem_label, lv_color_black(), 0);
 801f304:	2200      	movs	r2, #0
 801f306:	4620      	mov	r0, r4
 801f308:	f7fd ff03 	bl	801d112 <lv_obj_set_style_bg_color>
        lv_obj_set_style_text_color(mem_label, lv_color_white(), 0);
 801f30c:	2200      	movs	r2, #0
 801f30e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801f312:	4620      	mov	r0, r4
 801f314:	f7fd ff12 	bl	801d13c <lv_obj_set_style_text_color>
        lv_obj_set_style_pad_top(mem_label, 3, 0);
 801f318:	2200      	movs	r2, #0
 801f31a:	2103      	movs	r1, #3
 801f31c:	4620      	mov	r0, r4
 801f31e:	f7fd fedc 	bl	801d0da <lv_obj_set_style_pad_top>
        lv_obj_set_style_pad_bottom(mem_label, 3, 0);
 801f322:	2200      	movs	r2, #0
 801f324:	2103      	movs	r1, #3
 801f326:	4620      	mov	r0, r4
 801f328:	f7fd fede 	bl	801d0e8 <lv_obj_set_style_pad_bottom>
        lv_obj_set_style_pad_left(mem_label, 3, 0);
 801f32c:	2200      	movs	r2, #0
 801f32e:	2103      	movs	r1, #3
 801f330:	4620      	mov	r0, r4
 801f332:	f7fd fee0 	bl	801d0f6 <lv_obj_set_style_pad_left>
        lv_obj_set_style_pad_right(mem_label, 3, 0);
 801f336:	2200      	movs	r2, #0
 801f338:	2103      	movs	r1, #3
 801f33a:	4620      	mov	r0, r4
 801f33c:	f7fd fee2 	bl	801d104 <lv_obj_set_style_pad_right>
        lv_label_set_text(mem_label, "?");
 801f340:	490a      	ldr	r1, [pc, #40]	@ (801f36c <_lv_disp_refr_timer+0x2d4>)
 801f342:	4620      	mov	r0, r4
 801f344:	f7f6 f9d0 	bl	80156e8 <lv_label_set_text>
        lv_obj_align(mem_label, LV_USE_MEM_MONITOR_POS, 0, 0);
 801f348:	2300      	movs	r3, #0
 801f34a:	461a      	mov	r2, r3
 801f34c:	2104      	movs	r1, #4
 801f34e:	4620      	mov	r0, r4
 801f350:	f7fa f95e 	bl	8019610 <lv_obj_align>
        mem_monitor.mem_label = mem_label;
 801f354:	4b04      	ldr	r3, [pc, #16]	@ (801f368 <_lv_disp_refr_timer+0x2d0>)
 801f356:	605c      	str	r4, [r3, #4]
 801f358:	e73a      	b.n	801f1d0 <_lv_disp_refr_timer+0x138>
 801f35a:	bf00      	nop
 801f35c:	200088e0 	.word	0x200088e0
 801f360:	200088e4 	.word	0x200088e4
 801f364:	200088c8 	.word	0x200088c8
 801f368:	200088c0 	.word	0x200088c0
 801f36c:	08029d2c 	.word	0x08029d2c
 801f370:	08029e40 	.word	0x08029e40
        mem_monitor.mem_last_time = lv_tick_get();
 801f374:	f7f3 fffa 	bl	801336c <lv_tick_get>
 801f378:	4b0c      	ldr	r3, [pc, #48]	@ (801f3ac <_lv_disp_refr_timer+0x314>)
 801f37a:	6018      	str	r0, [r3, #0]
        lv_mem_monitor(&mon);
 801f37c:	a802      	add	r0, sp, #8
 801f37e:	f7f7 fc6f 	bl	8016c60 <lv_mem_monitor>
        uint32_t used_size = mon.total_size - mon.free_size;;
 801f382:	9a02      	ldr	r2, [sp, #8]
 801f384:	9b04      	ldr	r3, [sp, #16]
 801f386:	1ad2      	subs	r2, r2, r3
        uint32_t used_kb_tenth = (used_size - (used_kb * 1024)) / 102;
 801f388:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801f38c:	4908      	ldr	r1, [pc, #32]	@ (801f3b0 <_lv_disp_refr_timer+0x318>)
 801f38e:	fba1 1303 	umull	r1, r3, r1, r3
                              used_kb, used_kb_tenth, mon.used_pct,
 801f392:	f89d 1020 	ldrb.w	r1, [sp, #32]
                              mon.frag_pct);
 801f396:	f89d 0021 	ldrb.w	r0, [sp, #33]	@ 0x21
        lv_label_set_text_fmt(mem_label,
 801f39a:	9001      	str	r0, [sp, #4]
 801f39c:	9100      	str	r1, [sp, #0]
 801f39e:	099b      	lsrs	r3, r3, #6
 801f3a0:	0a92      	lsrs	r2, r2, #10
 801f3a2:	4904      	ldr	r1, [pc, #16]	@ (801f3b4 <_lv_disp_refr_timer+0x31c>)
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	f7f6 f9dc 	bl	8015762 <lv_label_set_text_fmt>
    REFR_TRACE("finished");
 801f3aa:	e719      	b.n	801f1e0 <_lv_disp_refr_timer+0x148>
 801f3ac:	200088c0 	.word	0x200088c0
 801f3b0:	a0a0a0a1 	.word	0xa0a0a0a1
 801f3b4:	08029e54 	.word	0x08029e54

0801f3b8 <set_y_anim>:
    inf_normalize(obj);
}


static void set_y_anim(void * obj, int32_t v)
{
 801f3b8:	b508      	push	{r3, lr}
    lv_obj_set_y(obj, v);
 801f3ba:	b209      	sxth	r1, r1
 801f3bc:	f7fa f873 	bl	80194a6 <lv_obj_set_y>
}
 801f3c0:	bd08      	pop	{r3, pc}

0801f3c2 <get_label>:
{
 801f3c2:	b508      	push	{r3, lr}
    return lv_obj_get_child(obj, 0);
 801f3c4:	2100      	movs	r1, #0
 801f3c6:	f7fd feff 	bl	801d1c8 <lv_obj_get_child>
}
 801f3ca:	bd08      	pop	{r3, pc}

0801f3cc <get_selected_label_width>:
{
 801f3cc:	b570      	push	{r4, r5, r6, lr}
 801f3ce:	b086      	sub	sp, #24
 801f3d0:	4604      	mov	r4, r0
    lv_obj_t * label = get_label(obj);
 801f3d2:	f7ff fff6 	bl	801f3c2 <get_label>
    if(label == NULL) return 0;
 801f3d6:	b308      	cbz	r0, 801f41c <get_selected_label_width+0x50>
 801f3d8:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f3da:	2257      	movs	r2, #87	@ 0x57
 801f3dc:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f7fd f987 	bl	801c6f4 <lv_obj_get_style_prop>
 801f3e6:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 801f3e8:	2258      	movs	r2, #88	@ 0x58
 801f3ea:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 801f3ee:	4620      	mov	r0, r4
 801f3f0:	f7fd f980 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f3f4:	b204      	sxth	r4, r0
    const char * txt = lv_label_get_text(label);
 801f3f6:	4630      	mov	r0, r6
 801f3f8:	f7f5 fcd6 	bl	8014da8 <lv_label_get_text>
 801f3fc:	4601      	mov	r1, r0
    lv_txt_get_size(&size, txt, font, letter_space, 0, LV_COORD_MAX,  LV_TEXT_FLAG_NONE);
 801f3fe:	2300      	movs	r3, #0
 801f400:	9302      	str	r3, [sp, #8]
 801f402:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 801f406:	9201      	str	r2, [sp, #4]
 801f408:	9300      	str	r3, [sp, #0]
 801f40a:	4623      	mov	r3, r4
 801f40c:	462a      	mov	r2, r5
 801f40e:	a805      	add	r0, sp, #20
 801f410:	f008 fa7b 	bl	802790a <lv_txt_get_size>
    return size.x;
 801f414:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
}
 801f418:	b006      	add	sp, #24
 801f41a:	bd70      	pop	{r4, r5, r6, pc}
    if(label == NULL) return 0;
 801f41c:	2000      	movs	r0, #0
 801f41e:	e7fb      	b.n	801f418 <get_selected_label_width+0x4c>

0801f420 <inf_normalize>:
{
 801f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801f422:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 801f426:	f013 0f01 	tst.w	r3, #1
 801f42a:	d100      	bne.n	801f42e <inf_normalize+0xe>
}
 801f42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f42e:	4604      	mov	r4, r0
        uint16_t real_id_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801f430:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 801f432:	4a22      	ldr	r2, [pc, #136]	@ (801f4bc <inf_normalize+0x9c>)
 801f434:	fba2 1203 	umull	r1, r2, r2, r3
 801f438:	1a9b      	subs	r3, r3, r2
 801f43a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 801f43e:	f3c2 028f 	ubfx	r2, r2, #2, #16
        roller->sel_opt_id = roller->sel_opt_id % real_id_cnt;
 801f442:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 801f444:	fbb3 f1f2 	udiv	r1, r3, r2
 801f448:	fb02 3311 	mls	r3, r2, r1, r3
 801f44c:	b29b      	uxth	r3, r3
 801f44e:	84c3      	strh	r3, [r0, #38]	@ 0x26
        roller->sel_opt_id += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801f450:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801f454:	b289      	uxth	r1, r1
 801f456:	440b      	add	r3, r1
 801f458:	b29b      	uxth	r3, r3
 801f45a:	84c3      	strh	r3, [r0, #38]	@ 0x26
        roller->sel_opt_id_ori = roller->sel_opt_id % real_id_cnt;
 801f45c:	fbb3 f0f2 	udiv	r0, r3, r2
 801f460:	fb02 3310 	mls	r3, r2, r0, r3
 801f464:	b29b      	uxth	r3, r3
 801f466:	8523      	strh	r3, [r4, #40]	@ 0x28
        roller->sel_opt_id_ori += (LV_ROLLER_INF_PAGES / 2) * real_id_cnt; /*Select the middle page*/
 801f468:	4419      	add	r1, r3
 801f46a:	8521      	strh	r1, [r4, #40]	@ 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f46c:	2257      	movs	r2, #87	@ 0x57
 801f46e:	2100      	movs	r1, #0
 801f470:	4620      	mov	r0, r4
 801f472:	f7fd f93f 	bl	801c6f4 <lv_obj_get_style_prop>
 801f476:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f478:	2259      	movs	r2, #89	@ 0x59
 801f47a:	2100      	movs	r1, #0
 801f47c:	4620      	mov	r0, r4
 801f47e:	f7fd f939 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f482:	b206      	sxth	r6, r0
 801f484:	f9b5 5008 	ldrsh.w	r5, [r5, #8]
        lv_coord_t h                   = lv_obj_get_content_height(obj);
 801f488:	4620      	mov	r0, r4
 801f48a:	f7fa f95b 	bl	8019744 <lv_obj_get_content_height>
 801f48e:	4607      	mov	r7, r0
        lv_obj_t * label = get_label(obj);
 801f490:	4620      	mov	r0, r4
 801f492:	f7ff ff96 	bl	801f3c2 <get_label>
        lv_coord_t sel_y1 = roller->sel_opt_id * (font_h + line_space);
 801f496:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801f498:	442e      	add	r6, r5
 801f49a:	fb16 f603 	smulbb	r6, r6, r3
 801f49e:	b2b6      	uxth	r6, r6
        lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801f4a0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 801f4a4:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
 801f4a8:	1049      	asrs	r1, r1, #1
 801f4aa:	ebc1 0167 	rsb	r1, r1, r7, asr #1
 801f4ae:	b289      	uxth	r1, r1
        lv_coord_t new_y = mid_y1 - sel_y1;
 801f4b0:	1b89      	subs	r1, r1, r6
        lv_obj_set_y(label, new_y);
 801f4b2:	b209      	sxth	r1, r1
 801f4b4:	f7f9 fff7 	bl	80194a6 <lv_obj_set_y>
}
 801f4b8:	e7b8      	b.n	801f42c <inf_normalize+0xc>
 801f4ba:	bf00      	nop
 801f4bc:	24924925 	.word	0x24924925

0801f4c0 <scroll_anim_ready_cb>:
{
 801f4c0:	b508      	push	{r3, lr}
    lv_obj_t * obj = lv_obj_get_parent(a->var); /*The label is animated*/
 801f4c2:	6800      	ldr	r0, [r0, #0]
 801f4c4:	f7fd fe56 	bl	801d174 <lv_obj_get_parent>
    inf_normalize(obj);
 801f4c8:	f7ff ffaa 	bl	801f420 <inf_normalize>
}
 801f4cc:	bd08      	pop	{r3, pc}
	...

0801f4d0 <refr_position>:
{
 801f4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4d4:	b093      	sub	sp, #76	@ 0x4c
 801f4d6:	4681      	mov	r9, r0
 801f4d8:	460e      	mov	r6, r1
    lv_obj_t * label = get_label(obj);
 801f4da:	f7ff ff72 	bl	801f3c2 <get_label>
    if(label == NULL) return;
 801f4de:	2800      	cmp	r0, #0
 801f4e0:	d048      	beq.n	801f574 <refr_position+0xa4>
 801f4e2:	4605      	mov	r5, r0
    lv_text_align_t align = lv_obj_calculate_style_text_align(label, LV_PART_MAIN, lv_label_get_text(label));
 801f4e4:	f7f5 fc60 	bl	8014da8 <lv_label_get_text>
 801f4e8:	4602      	mov	r2, r0
 801f4ea:	2100      	movs	r1, #0
 801f4ec:	4628      	mov	r0, r5
 801f4ee:	f7fd fd81 	bl	801cff4 <lv_obj_calculate_style_text_align>
    switch(align) {
 801f4f2:	2802      	cmp	r0, #2
 801f4f4:	d041      	beq.n	801f57a <refr_position+0xaa>
 801f4f6:	2803      	cmp	r0, #3
 801f4f8:	d04f      	beq.n	801f59a <refr_position+0xca>
 801f4fa:	2801      	cmp	r0, #1
 801f4fc:	d05b      	beq.n	801f5b6 <refr_position+0xe6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f4fe:	2257      	movs	r2, #87	@ 0x57
 801f500:	2100      	movs	r1, #0
 801f502:	4648      	mov	r0, r9
 801f504:	f7fd f8f6 	bl	801c6f4 <lv_obj_get_style_prop>
 801f508:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f50a:	2259      	movs	r2, #89	@ 0x59
 801f50c:	2100      	movs	r1, #0
 801f50e:	4648      	mov	r0, r9
 801f510:	f7fd f8f0 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 801f514:	fa0f fa80 	sxth.w	sl, r0
 801f518:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
    lv_coord_t h                   = lv_obj_get_content_height(obj);
 801f51c:	4648      	mov	r0, r9
 801f51e:	f7fa f911 	bl	8019744 <lv_obj_get_content_height>
 801f522:	4683      	mov	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 801f524:	2265      	movs	r2, #101	@ 0x65
 801f526:	2100      	movs	r1, #0
 801f528:	4648      	mov	r0, r9
 801f52a:	f7fd f8e3 	bl	801c6f4 <lv_obj_get_style_prop>
 801f52e:	4680      	mov	r8, r0
    uint16_t anim_time             = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);
 801f530:	b287      	uxth	r7, r0
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801f532:	b106      	cbz	r6, 801f536 <refr_position+0x66>
 801f534:	b917      	cbnz	r7, 801f53c <refr_position+0x6c>
        inf_normalize(obj);
 801f536:	4648      	mov	r0, r9
 801f538:	f7ff ff72 	bl	801f420 <inf_normalize>
    int32_t id = roller->sel_opt_id;
 801f53c:	f8b9 3026 	ldrh.w	r3, [r9, #38]	@ 0x26
    lv_coord_t sel_y1 = id * (font_h + line_space);
 801f540:	44a2      	add	sl, r4
 801f542:	fb1a fa03 	smulbb	sl, sl, r3
 801f546:	fa1f fa8a 	uxth.w	sl, sl
    lv_coord_t mid_y1 = h / 2 - font_h / 2;
 801f54a:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
 801f54e:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 801f552:	105b      	asrs	r3, r3, #1
 801f554:	ebc3 036b 	rsb	r3, r3, fp, asr #1
 801f558:	b29b      	uxth	r3, r3
    lv_coord_t new_y = mid_y1 - sel_y1;
 801f55a:	eba3 030a 	sub.w	r3, r3, sl
 801f55e:	b21c      	sxth	r4, r3
    if(anim_en == LV_ANIM_OFF || anim_time == 0) {
 801f560:	b106      	cbz	r6, 801f564 <refr_position+0x94>
 801f562:	bb6f      	cbnz	r7, 801f5c0 <refr_position+0xf0>
        lv_anim_del(label, set_y_anim);
 801f564:	4922      	ldr	r1, [pc, #136]	@ (801f5f0 <refr_position+0x120>)
 801f566:	4628      	mov	r0, r5
 801f568:	f7e1 f90e 	bl	8000788 <lv_anim_del>
        lv_obj_set_y(label, new_y);
 801f56c:	4621      	mov	r1, r4
 801f56e:	4628      	mov	r0, r5
 801f570:	f7f9 ff99 	bl	80194a6 <lv_obj_set_y>
}
 801f574:	b013      	add	sp, #76	@ 0x4c
 801f576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lv_obj_set_x(label, (lv_obj_get_content_width(obj) - lv_obj_get_width(label)) / 2);
 801f57a:	4648      	mov	r0, r9
 801f57c:	f7fa f8c2 	bl	8019704 <lv_obj_get_content_width>
 801f580:	4604      	mov	r4, r0
 801f582:	4628      	mov	r0, r5
 801f584:	f7fa f8a4 	bl	80196d0 <lv_obj_get_width>
 801f588:	1a20      	subs	r0, r4, r0
 801f58a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801f58e:	f340 014f 	sbfx	r1, r0, #1, #16
 801f592:	4628      	mov	r0, r5
 801f594:	f7f9 ff70 	bl	8019478 <lv_obj_set_x>
            break;
 801f598:	e7b1      	b.n	801f4fe <refr_position+0x2e>
            lv_obj_set_x(label, lv_obj_get_content_width(obj) - lv_obj_get_width(label));
 801f59a:	4648      	mov	r0, r9
 801f59c:	f7fa f8b2 	bl	8019704 <lv_obj_get_content_width>
 801f5a0:	b284      	uxth	r4, r0
 801f5a2:	4628      	mov	r0, r5
 801f5a4:	f7fa f894 	bl	80196d0 <lv_obj_get_width>
 801f5a8:	b280      	uxth	r0, r0
 801f5aa:	1a21      	subs	r1, r4, r0
 801f5ac:	b209      	sxth	r1, r1
 801f5ae:	4628      	mov	r0, r5
 801f5b0:	f7f9 ff62 	bl	8019478 <lv_obj_set_x>
            break;
 801f5b4:	e7a3      	b.n	801f4fe <refr_position+0x2e>
            lv_obj_set_x(label, 0);
 801f5b6:	2100      	movs	r1, #0
 801f5b8:	4628      	mov	r0, r5
 801f5ba:	f7f9 ff5d 	bl	8019478 <lv_obj_set_x>
            break;
 801f5be:	e79e      	b.n	801f4fe <refr_position+0x2e>
        lv_anim_init(&a);
 801f5c0:	a801      	add	r0, sp, #4
 801f5c2:	f7e1 f8c7 	bl	8000754 <lv_anim_init>
    a->var = var;
 801f5c6:	9501      	str	r5, [sp, #4]
    a->exec_cb = exec_cb;
 801f5c8:	4b09      	ldr	r3, [pc, #36]	@ (801f5f0 <refr_position+0x120>)
 801f5ca:	9302      	str	r3, [sp, #8]
        lv_anim_set_values(&a, lv_obj_get_y(label), new_y);
 801f5cc:	4628      	mov	r0, r5
 801f5ce:	f7fa f85c 	bl	801968a <lv_obj_get_y>
    a->start_value = start;
 801f5d2:	9009      	str	r0, [sp, #36]	@ 0x24
    a->current_value = start;
 801f5d4:	900a      	str	r0, [sp, #40]	@ 0x28
    a->end_value = end;
 801f5d6:	940b      	str	r4, [sp, #44]	@ 0x2c
    a->time = duration;
 801f5d8:	fa1f f788 	uxth.w	r7, r8
 801f5dc:	970c      	str	r7, [sp, #48]	@ 0x30
    a->ready_cb = ready_cb;
 801f5de:	4b05      	ldr	r3, [pc, #20]	@ (801f5f4 <refr_position+0x124>)
 801f5e0:	9304      	str	r3, [sp, #16]
    a->path_cb = path_cb;
 801f5e2:	4b05      	ldr	r3, [pc, #20]	@ (801f5f8 <refr_position+0x128>)
 801f5e4:	9308      	str	r3, [sp, #32]
        lv_anim_start(&a);
 801f5e6:	a801      	add	r0, sp, #4
 801f5e8:	f7e1 f900 	bl	80007ec <lv_anim_start>
 801f5ec:	e7c2      	b.n	801f574 <refr_position+0xa4>
 801f5ee:	bf00      	nop
 801f5f0:	0801f3b9 	.word	0x0801f3b9
 801f5f4:	0801f4c1 	.word	0x0801f4c1
 801f5f8:	080008cb 	.word	0x080008cb

0801f5fc <get_sel_area>:
{
 801f5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f600:	b082      	sub	sp, #8
 801f602:	4606      	mov	r6, r0
 801f604:	460f      	mov	r7, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f606:	2257      	movs	r2, #87	@ 0x57
 801f608:	2100      	movs	r1, #0
 801f60a:	f7fd f873 	bl	801c6f4 <lv_obj_get_style_prop>
 801f60e:	4604      	mov	r4, r0
 801f610:	2257      	movs	r2, #87	@ 0x57
 801f612:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 801f616:	4630      	mov	r0, r6
 801f618:	f7fd f86c 	bl	801c6f4 <lv_obj_get_style_prop>
 801f61c:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 801f620:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801f624:	2259      	movs	r2, #89	@ 0x59
 801f626:	2100      	movs	r1, #0
 801f628:	4630      	mov	r0, r6
 801f62a:	f7fd f863 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t d = (font_sel_h + font_main_h) / 2 + line_space;
 801f62e:	1963      	adds	r3, r4, r5
 801f630:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801f634:	eb00 0563 	add.w	r5, r0, r3, asr #1
 801f638:	fa1f f885 	uxth.w	r8, r5
 801f63c:	b22d      	sxth	r5, r5
    sel_area->y1 = obj->coords.y1 + lv_obj_get_height(obj) / 2 - d / 2;
 801f63e:	8af4      	ldrh	r4, [r6, #22]
 801f640:	4630      	mov	r0, r6
 801f642:	f7fa f84c 	bl	80196de <lv_obj_get_height>
 801f646:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801f64a:	eb04 0360 	add.w	r3, r4, r0, asr #1
 801f64e:	b29b      	uxth	r3, r3
 801f650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f654:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 801f658:	807b      	strh	r3, [r7, #2]
    sel_area->y2 = sel_area->y1 + d;
 801f65a:	fa18 f383 	uxtah	r3, r8, r3
 801f65e:	80fb      	strh	r3, [r7, #6]
    lv_obj_get_coords(obj, &roller_coords);
 801f660:	4669      	mov	r1, sp
 801f662:	4630      	mov	r0, r6
 801f664:	f7f9 ffe1 	bl	801962a <lv_obj_get_coords>
    sel_area->x1 = roller_coords.x1;
 801f668:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f66c:	803b      	strh	r3, [r7, #0]
    sel_area->x2 = roller_coords.x2;
 801f66e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f672:	80bb      	strh	r3, [r7, #4]
}
 801f674:	b002      	add	sp, #8
 801f676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f67a <draw_main>:
{
 801f67a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f67e:	b09a      	sub	sp, #104	@ 0x68
 801f680:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 801f682:	f7f1 fb4f 	bl	8010d24 <lv_event_get_code>
 801f686:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801f688:	4628      	mov	r0, r5
 801f68a:	f7f1 fb47 	bl	8010d1c <lv_event_get_target>
 801f68e:	4606      	mov	r6, r0
    if(code == LV_EVENT_DRAW_MAIN) {
 801f690:	2c15      	cmp	r4, #21
 801f692:	d004      	beq.n	801f69e <draw_main+0x24>
    else if(code == LV_EVENT_DRAW_POST) {
 801f694:	2c18      	cmp	r4, #24
 801f696:	d019      	beq.n	801f6cc <draw_main+0x52>
}
 801f698:	b01a      	add	sp, #104	@ 0x68
 801f69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801f69e:	4628      	mov	r0, r5
 801f6a0:	f7f1 fbb4 	bl	8010e0c <lv_event_get_draw_ctx>
 801f6a4:	4604      	mov	r4, r0
        get_sel_area(obj, &sel_area);
 801f6a6:	a90a      	add	r1, sp, #40	@ 0x28
 801f6a8:	4630      	mov	r0, r6
 801f6aa:	f7ff ffa7 	bl	801f5fc <get_sel_area>
        lv_draw_rect_dsc_init(&sel_dsc);
 801f6ae:	a80c      	add	r0, sp, #48	@ 0x30
 801f6b0:	f7ea face 	bl	8009c50 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(obj, LV_PART_SELECTED, &sel_dsc);
 801f6b4:	aa0c      	add	r2, sp, #48	@ 0x30
 801f6b6:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 801f6ba:	4630      	mov	r0, r6
 801f6bc:	f7f9 fb02 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(draw_ctx, &sel_dsc, &sel_area);
 801f6c0:	aa0a      	add	r2, sp, #40	@ 0x28
 801f6c2:	a90c      	add	r1, sp, #48	@ 0x30
 801f6c4:	4620      	mov	r0, r4
 801f6c6:	f7ea fb05 	bl	8009cd4 <lv_draw_rect>
 801f6ca:	e7e5      	b.n	801f698 <draw_main+0x1e>
        lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801f6cc:	4628      	mov	r0, r5
 801f6ce:	f7f1 fb9d 	bl	8010e0c <lv_event_get_draw_ctx>
 801f6d2:	4605      	mov	r5, r0
        lv_draw_label_dsc_init(&label_dsc);
 801f6d4:	a80c      	add	r0, sp, #48	@ 0x30
 801f6d6:	f7e8 fc67 	bl	8007fa8 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_SELECTED, &label_dsc);
 801f6da:	aa0c      	add	r2, sp, #48	@ 0x30
 801f6dc:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 801f6e0:	4630      	mov	r0, r6
 801f6e2:	f7f9 fc41 	bl	8018f68 <lv_obj_init_draw_label_dsc>
        get_sel_area(obj, &sel_area);
 801f6e6:	a906      	add	r1, sp, #24
 801f6e8:	4630      	mov	r0, r6
 801f6ea:	f7ff ff87 	bl	801f5fc <get_sel_area>
        area_ok = _lv_area_intersect(&mask_sel, draw_ctx->clip_area, &sel_area);
 801f6ee:	aa06      	add	r2, sp, #24
 801f6f0:	68a9      	ldr	r1, [r5, #8]
 801f6f2:	a808      	add	r0, sp, #32
 801f6f4:	f7e2 f97e 	bl	80019f4 <_lv_area_intersect>
        if(area_ok) {
 801f6f8:	2800      	cmp	r0, #0
 801f6fa:	d0cd      	beq.n	801f698 <draw_main+0x1e>
            lv_obj_t * label = get_label(obj);
 801f6fc:	4630      	mov	r0, r6
 801f6fe:	f7ff fe60 	bl	801f3c2 <get_label>
 801f702:	4607      	mov	r7, r0
            if(lv_label_get_recolor(label)) label_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 801f704:	f7f5 fb52 	bl	8014dac <lv_label_get_recolor>
 801f708:	b128      	cbz	r0, 801f716 <draw_main+0x9c>
 801f70a:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 801f70e:	f043 0301 	orr.w	r3, r3, #1
 801f712:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            lv_txt_get_size(&res_p, lv_label_get_text(label), label_dsc.font, label_dsc.letter_space, label_dsc.line_space,
 801f716:	4638      	mov	r0, r7
 801f718:	f7f5 fb46 	bl	8014da8 <lv_label_get_text>
 801f71c:	4604      	mov	r4, r0
 801f71e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 801f722:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	@ 0x44
 801f726:	f9bd a042 	ldrsh.w	sl, [sp, #66]	@ 0x42
 801f72a:	4630      	mov	r0, r6
 801f72c:	f7f9 ffd0 	bl	80196d0 <lv_obj_get_width>
 801f730:	2302      	movs	r3, #2
 801f732:	9302      	str	r3, [sp, #8]
 801f734:	9001      	str	r0, [sp, #4]
 801f736:	f8cd a000 	str.w	sl, [sp]
 801f73a:	464b      	mov	r3, r9
 801f73c:	4642      	mov	r2, r8
 801f73e:	4621      	mov	r1, r4
 801f740:	a805      	add	r0, sp, #20
 801f742:	f008 f8e2 	bl	802790a <lv_txt_get_size>
            lv_coord_t roller_h = lv_obj_get_height(obj);
 801f746:	4630      	mov	r0, r6
 801f748:	f7f9 ffc9 	bl	80196de <lv_obj_get_height>
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801f74c:	f9b7 8016 	ldrsh.w	r8, [r7, #22]
 801f750:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801f754:	f340 044f 	sbfx	r4, r0, #1, #16
                                                       obj->coords.y1); /*label offset from the middle line of the roller*/
 801f758:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
            int32_t label_y_prop = label->coords.y1 - (roller_h / 2 +
 801f75c:	4423      	add	r3, r4
 801f75e:	eba8 0803 	sub.w	r8, r8, r3
            label_y_prop = (label_y_prop * 16384) / lv_obj_get_height(
 801f762:	ea4f 3888 	mov.w	r8, r8, lsl #14
 801f766:	4638      	mov	r0, r7
 801f768:	f7f9 ffb9 	bl	80196de <lv_obj_get_height>
 801f76c:	fb98 f8f0 	sdiv	r8, r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801f770:	2257      	movs	r2, #87	@ 0x57
 801f772:	2100      	movs	r1, #0
 801f774:	4630      	mov	r0, r6
 801f776:	f7fc ffbd 	bl	801c6f4 <lv_obj_get_style_prop>
            lv_coord_t corr = (label_dsc.font->line_height - normal_label_font->line_height) / 2;
 801f77a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f77c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f780:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801f784:	1ad2      	subs	r2, r2, r3
 801f786:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801f78a:	f342 014f 	sbfx	r1, r2, #1, #16
            res_p.y -= corr;
 801f78e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f792:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 801f796:	b21b      	sxth	r3, r3
 801f798:	f8ad 3016 	strh.w	r3, [sp, #22]
            int32_t label_sel_y = roller_h / 2 + obj->coords.y1;
 801f79c:	f9b6 2016 	ldrsh.w	r2, [r6, #22]
 801f7a0:	4414      	add	r4, r2
            label_sel_y += (label_y_prop * res_p.y) >> 14;
 801f7a2:	fb08 f303 	mul.w	r3, r8, r3
 801f7a6:	eb04 34a3 	add.w	r4, r4, r3, asr #14
            label_sel_y -= corr;
 801f7aa:	1a64      	subs	r4, r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 801f7ac:	2232      	movs	r2, #50	@ 0x32
 801f7ae:	2100      	movs	r1, #0
 801f7b0:	4630      	mov	r0, r6
 801f7b2:	f7fc ff9f 	bl	801c6f4 <lv_obj_get_style_prop>
 801f7b6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801f7b8:	2212      	movs	r2, #18
 801f7ba:	2100      	movs	r1, #0
 801f7bc:	4630      	mov	r0, r6
 801f7be:	f7fc ff99 	bl	801c6f4 <lv_obj_get_style_prop>
 801f7c2:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801f7c4:	2213      	movs	r2, #19
 801f7c6:	2100      	movs	r1, #0
 801f7c8:	4630      	mov	r0, r6
 801f7ca:	f7fc ff93 	bl	801c6f4 <lv_obj_get_style_prop>
            label_sel_area.x1 = obj->coords.x1 + pleft + bwidth;
 801f7ce:	8ab3      	ldrh	r3, [r6, #20]
 801f7d0:	444b      	add	r3, r9
 801f7d2:	fa1f f288 	uxth.w	r2, r8
 801f7d6:	fa12 f383 	uxtah	r3, r2, r3
 801f7da:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
            label_sel_area.y1 = label_sel_y;
 801f7de:	f8ad 402a 	strh.w	r4, [sp, #42]	@ 0x2a
            label_sel_area.x2 = obj->coords.x2 - pright - bwidth;
 801f7e2:	8b33      	ldrh	r3, [r6, #24]
 801f7e4:	1a18      	subs	r0, r3, r0
 801f7e6:	b280      	uxth	r0, r0
 801f7e8:	1a80      	subs	r0, r0, r2
 801f7ea:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
            label_sel_area.y2 = label_sel_area.y1 + res_p.y;
 801f7ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801f7f2:	fa13 f484 	uxtah	r4, r3, r4
 801f7f6:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
            label_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 801f7fa:	f89d 304d 	ldrb.w	r3, [sp, #77]	@ 0x4d
 801f7fe:	f043 0302 	orr.w	r3, r3, #2
 801f802:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
            const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801f806:	68ac      	ldr	r4, [r5, #8]
            draw_ctx->clip_area = &mask_sel;
 801f808:	ab08      	add	r3, sp, #32
 801f80a:	60ab      	str	r3, [r5, #8]
            lv_draw_label(draw_ctx, &label_dsc, &label_sel_area, lv_label_get_text(label), NULL);
 801f80c:	4638      	mov	r0, r7
 801f80e:	f7f5 facb 	bl	8014da8 <lv_label_get_text>
 801f812:	4603      	mov	r3, r0
 801f814:	2200      	movs	r2, #0
 801f816:	9200      	str	r2, [sp, #0]
 801f818:	aa0a      	add	r2, sp, #40	@ 0x28
 801f81a:	a90c      	add	r1, sp, #48	@ 0x30
 801f81c:	4628      	mov	r0, r5
 801f81e:	f7e8 fbf3 	bl	8008008 <lv_draw_label>
            draw_ctx->clip_area = clip_area_ori;
 801f822:	60ac      	str	r4, [r5, #8]
}
 801f824:	e738      	b.n	801f698 <draw_main+0x1e>

0801f826 <draw_label>:
{
 801f826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f82a:	b090      	sub	sp, #64	@ 0x40
 801f82c:	4605      	mov	r5, r0
    lv_obj_t * label_obj = lv_event_get_target(e);
 801f82e:	f7f1 fa75 	bl	8010d1c <lv_event_get_target>
 801f832:	4604      	mov	r4, r0
    lv_obj_t * roller = lv_obj_get_parent(label_obj);
 801f834:	f7fd fc9e 	bl	801d174 <lv_obj_get_parent>
 801f838:	4606      	mov	r6, r0
    lv_draw_label_dsc_init(&label_draw_dsc);
 801f83a:	a808      	add	r0, sp, #32
 801f83c:	f7e8 fbb4 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(roller, LV_PART_MAIN, &label_draw_dsc);
 801f840:	aa08      	add	r2, sp, #32
 801f842:	2100      	movs	r1, #0
 801f844:	4630      	mov	r0, r6
 801f846:	f7f9 fb8f 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    if(lv_label_get_recolor(label_obj)) label_draw_dsc.flag |= LV_TEXT_FLAG_RECOLOR;
 801f84a:	4620      	mov	r0, r4
 801f84c:	f7f5 faae 	bl	8014dac <lv_label_get_recolor>
 801f850:	b128      	cbz	r0, 801f85e <draw_label+0x38>
 801f852:	f89d 303d 	ldrb.w	r3, [sp, #61]	@ 0x3d
 801f856:	f043 0301 	orr.w	r3, r3, #1
 801f85a:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801f85e:	4628      	mov	r0, r5
 801f860:	f7f1 fad4 	bl	8010e0c <lv_event_get_draw_ctx>
 801f864:	4605      	mov	r5, r0
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 801f866:	6887      	ldr	r7, [r0, #8]
    if(!_lv_area_intersect(&roller_clip_area, draw_ctx->clip_area, &roller->coords)) return;
 801f868:	f106 0214 	add.w	r2, r6, #20
 801f86c:	4639      	mov	r1, r7
 801f86e:	a806      	add	r0, sp, #24
 801f870:	f7e2 f8c0 	bl	80019f4 <_lv_area_intersect>
 801f874:	b910      	cbnz	r0, 801f87c <draw_label+0x56>
}
 801f876:	b010      	add	sp, #64	@ 0x40
 801f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    draw_ctx->clip_area = &roller_clip_area;
 801f87c:	ab06      	add	r3, sp, #24
 801f87e:	60ab      	str	r3, [r5, #8]
    get_sel_area(roller, &sel_area);
 801f880:	a904      	add	r1, sp, #16
 801f882:	4630      	mov	r0, r6
 801f884:	f7ff feba 	bl	801f5fc <get_sel_area>
    clip2.x1 = label_obj->coords.x1;
 801f888:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f88c:	f8ad 3008 	strh.w	r3, [sp, #8]
    clip2.y1 = label_obj->coords.y1;
 801f890:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801f894:	f8ad 300a 	strh.w	r3, [sp, #10]
    clip2.x2 = label_obj->coords.x2;
 801f898:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801f89c:	f8ad 300c 	strh.w	r3, [sp, #12]
    clip2.y2 = sel_area.y1;
 801f8a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801f8a4:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 801f8a8:	aa02      	add	r2, sp, #8
 801f8aa:	68a9      	ldr	r1, [r5, #8]
 801f8ac:	4610      	mov	r0, r2
 801f8ae:	f7e2 f8a1 	bl	80019f4 <_lv_area_intersect>
 801f8b2:	b9b8      	cbnz	r0, 801f8e4 <draw_label+0xbe>
    clip2.x1 = label_obj->coords.x1;
 801f8b4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801f8b8:	f8ad 3008 	strh.w	r3, [sp, #8]
    clip2.y1 = sel_area.y2;
 801f8bc:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801f8c0:	f8ad 300a 	strh.w	r3, [sp, #10]
    clip2.x2 = label_obj->coords.x2;
 801f8c4:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 801f8c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    clip2.y2 = label_obj->coords.y2;
 801f8cc:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801f8d0:	f8ad 300e 	strh.w	r3, [sp, #14]
    if(_lv_area_intersect(&clip2, draw_ctx->clip_area, &clip2)) {
 801f8d4:	aa02      	add	r2, sp, #8
 801f8d6:	68a9      	ldr	r1, [r5, #8]
 801f8d8:	4610      	mov	r0, r2
 801f8da:	f7e2 f88b 	bl	80019f4 <_lv_area_intersect>
 801f8de:	b9a8      	cbnz	r0, 801f90c <draw_label+0xe6>
    draw_ctx->clip_area = clip_area_ori;
 801f8e0:	60af      	str	r7, [r5, #8]
 801f8e2:	e7c8      	b.n	801f876 <draw_label+0x50>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 801f8e4:	f8d5 8008 	ldr.w	r8, [r5, #8]
        draw_ctx->clip_area = &clip2;
 801f8e8:	ab02      	add	r3, sp, #8
 801f8ea:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801f8ec:	f104 0614 	add.w	r6, r4, #20
 801f8f0:	4620      	mov	r0, r4
 801f8f2:	f7f5 fa59 	bl	8014da8 <lv_label_get_text>
 801f8f6:	4603      	mov	r3, r0
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	9200      	str	r2, [sp, #0]
 801f8fc:	4632      	mov	r2, r6
 801f8fe:	a908      	add	r1, sp, #32
 801f900:	4628      	mov	r0, r5
 801f902:	f7e8 fb81 	bl	8008008 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 801f906:	f8c5 8008 	str.w	r8, [r5, #8]
 801f90a:	e7d3      	b.n	801f8b4 <draw_label+0x8e>
        const lv_area_t * clip_area_ori2 = draw_ctx->clip_area;
 801f90c:	68ae      	ldr	r6, [r5, #8]
        draw_ctx->clip_area = &clip2;
 801f90e:	ab02      	add	r3, sp, #8
 801f910:	60ab      	str	r3, [r5, #8]
        lv_draw_label(draw_ctx, &label_draw_dsc, &label_obj->coords, lv_label_get_text(label_obj), NULL);
 801f912:	f104 0814 	add.w	r8, r4, #20
 801f916:	4620      	mov	r0, r4
 801f918:	f7f5 fa46 	bl	8014da8 <lv_label_get_text>
 801f91c:	4603      	mov	r3, r0
 801f91e:	2200      	movs	r2, #0
 801f920:	9200      	str	r2, [sp, #0]
 801f922:	4642      	mov	r2, r8
 801f924:	a908      	add	r1, sp, #32
 801f926:	4628      	mov	r0, r5
 801f928:	f7e8 fb6e 	bl	8008008 <lv_draw_label>
        draw_ctx->clip_area = clip_area_ori2;
 801f92c:	60ae      	str	r6, [r5, #8]
 801f92e:	e7d7      	b.n	801f8e0 <draw_label+0xba>

0801f930 <lv_roller_label_event>:
{
 801f930:	b570      	push	{r4, r5, r6, lr}
 801f932:	460d      	mov	r5, r1
    lv_event_code_t code = lv_event_get_code(e);
 801f934:	4608      	mov	r0, r1
 801f936:	f7f1 f9f5 	bl	8010d24 <lv_event_get_code>
 801f93a:	4604      	mov	r4, r0
    if(code != LV_EVENT_DRAW_MAIN) {
 801f93c:	2815      	cmp	r0, #21
 801f93e:	d005      	beq.n	801f94c <lv_roller_label_event+0x1c>
        res = lv_obj_event_base(MY_CLASS_LABEL, e);
 801f940:	4629      	mov	r1, r5
 801f942:	4817      	ldr	r0, [pc, #92]	@ (801f9a0 <lv_roller_label_event+0x70>)
 801f944:	f7f1 f916 	bl	8010b74 <lv_obj_event_base>
        if(res != LV_RES_OK) return;
 801f948:	2801      	cmp	r0, #1
 801f94a:	d109      	bne.n	801f960 <lv_roller_label_event+0x30>
    lv_obj_t * label = lv_event_get_target(e);
 801f94c:	4628      	mov	r0, r5
 801f94e:	f7f1 f9e5 	bl	8010d1c <lv_event_get_target>
 801f952:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 801f954:	2c13      	cmp	r4, #19
 801f956:	d004      	beq.n	801f962 <lv_roller_label_event+0x32>
    else if(code == LV_EVENT_SIZE_CHANGED) {
 801f958:	2c29      	cmp	r4, #41	@ 0x29
 801f95a:	d017      	beq.n	801f98c <lv_roller_label_event+0x5c>
    else if(code == LV_EVENT_DRAW_MAIN) {
 801f95c:	2c15      	cmp	r4, #21
 801f95e:	d01b      	beq.n	801f998 <lv_roller_label_event+0x68>
}
 801f960:	bd70      	pop	{r4, r5, r6, pc}
        lv_coord_t * s = lv_event_get_param(e);
 801f962:	4628      	mov	r0, r5
 801f964:	f7f1 f9e2 	bl	8010d2c <lv_event_get_param>
 801f968:	4605      	mov	r5, r0
        lv_obj_t * obj = lv_obj_get_parent(label);
 801f96a:	4630      	mov	r0, r6
 801f96c:	f7fd fc02 	bl	801d174 <lv_obj_get_parent>
        lv_coord_t sel_w = get_selected_label_width(obj);
 801f970:	f7ff fd2c 	bl	801f3cc <get_selected_label_width>
 801f974:	4604      	mov	r4, r0
        lv_coord_t label_w = lv_obj_get_width(label);
 801f976:	4630      	mov	r0, r6
 801f978:	f7f9 feaa 	bl	80196d0 <lv_obj_get_width>
        *s = LV_MAX(*s, sel_w - label_w);
 801f97c:	1a24      	subs	r4, r4, r0
 801f97e:	f9b5 3000 	ldrsh.w	r3, [r5]
 801f982:	429c      	cmp	r4, r3
 801f984:	bfb8      	it	lt
 801f986:	461c      	movlt	r4, r3
 801f988:	802c      	strh	r4, [r5, #0]
 801f98a:	e7e9      	b.n	801f960 <lv_roller_label_event+0x30>
        refr_position(lv_obj_get_parent(label), LV_ANIM_OFF);
 801f98c:	f7fd fbf2 	bl	801d174 <lv_obj_get_parent>
 801f990:	2100      	movs	r1, #0
 801f992:	f7ff fd9d 	bl	801f4d0 <refr_position>
 801f996:	e7e3      	b.n	801f960 <lv_roller_label_event+0x30>
        draw_label(e);
 801f998:	4628      	mov	r0, r5
 801f99a:	f7ff ff44 	bl	801f826 <draw_label>
 801f99e:	e7df      	b.n	801f960 <lv_roller_label_event+0x30>
 801f9a0:	0802de7c 	.word	0x0802de7c

0801f9a4 <lv_roller_set_options>:
    LV_ASSERT_NULL(options);
 801f9a4:	b161      	cbz	r1, 801f9c0 <lv_roller_set_options+0x1c>
{
 801f9a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9aa:	4605      	mov	r5, r0
 801f9ac:	4617      	mov	r7, r2
 801f9ae:	460e      	mov	r6, r1
    lv_obj_t * label = get_label(obj);
 801f9b0:	f7ff fd07 	bl	801f3c2 <get_label>
 801f9b4:	4680      	mov	r8, r0
    roller->sel_opt_id     = 0;
 801f9b6:	2300      	movs	r3, #0
 801f9b8:	84eb      	strh	r3, [r5, #38]	@ 0x26
    roller->sel_opt_id_ori = 0;
 801f9ba:	852b      	strh	r3, [r5, #40]	@ 0x28
    roller->option_cnt = 0;
 801f9bc:	84ab      	strh	r3, [r5, #36]	@ 0x24
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801f9be:	e001      	b.n	801f9c4 <lv_roller_set_options+0x20>
    LV_ASSERT_NULL(options);
 801f9c0:	e7fe      	b.n	801f9c0 <lv_roller_set_options+0x1c>
    for(cnt = 0; options[cnt] != '\0'; cnt++) {
 801f9c2:	3301      	adds	r3, #1
 801f9c4:	5cf4      	ldrb	r4, [r6, r3]
 801f9c6:	b12c      	cbz	r4, 801f9d4 <lv_roller_set_options+0x30>
        if(options[cnt] == '\n') roller->option_cnt++;
 801f9c8:	2c0a      	cmp	r4, #10
 801f9ca:	d1fa      	bne.n	801f9c2 <lv_roller_set_options+0x1e>
 801f9cc:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 801f9ce:	3101      	adds	r1, #1
 801f9d0:	84a9      	strh	r1, [r5, #36]	@ 0x24
 801f9d2:	e7f6      	b.n	801f9c2 <lv_roller_set_options+0x1e>
    roller->option_cnt++; /*Last option has no `\n`*/
 801f9d4:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
 801f9d6:	3301      	adds	r3, #1
 801f9d8:	84ab      	strh	r3, [r5, #36]	@ 0x24
    if(mode == LV_ROLLER_MODE_NORMAL) {
 801f9da:	b987      	cbnz	r7, 801f9fe <lv_roller_set_options+0x5a>
        roller->mode = LV_ROLLER_MODE_NORMAL;
 801f9dc:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 801f9e0:	f023 0301 	bic.w	r3, r3, #1
 801f9e4:	f885 302a 	strb.w	r3, [r5, #42]	@ 0x2a
        lv_label_set_text(label, options);
 801f9e8:	4631      	mov	r1, r6
 801f9ea:	4640      	mov	r0, r8
 801f9ec:	f7f5 fe7c 	bl	80156e8 <lv_label_set_text>
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801f9f0:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 801f9f2:	852b      	strh	r3, [r5, #40]	@ 0x28
    lv_obj_refresh_ext_draw_size(label);
 801f9f4:	4640      	mov	r0, r8
 801f9f6:	f7f9 fc79 	bl	80192ec <lv_obj_refresh_ext_draw_size>
}
 801f9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        roller->mode = LV_ROLLER_MODE_INFINITE;
 801f9fe:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 801fa02:	f043 0301 	orr.w	r3, r3, #1
 801fa06:	f885 302a 	strb.w	r3, [r5, #42]	@ 0x2a
        size_t opt_len = strlen(options) + 1; /*+1 to add '\n' after option lists*/
 801fa0a:	4630      	mov	r0, r6
 801fa0c:	f7e0 fbc6 	bl	800019c <strlen>
 801fa10:	1c47      	adds	r7, r0, #1
        char * opt_extra = lv_mem_buf_get(opt_len * LV_ROLLER_INF_PAGES);
 801fa12:	ebc7 0ac7 	rsb	sl, r7, r7, lsl #3
 801fa16:	4650      	mov	r0, sl
 801fa18:	f7f6 ffd0 	bl	80169bc <lv_mem_buf_get>
 801fa1c:	4681      	mov	r9, r0
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801fa1e:	e00c      	b.n	801fa3a <lv_roller_set_options+0x96>
            strcpy(&opt_extra[opt_len * i], options);
 801fa20:	4631      	mov	r1, r6
 801fa22:	fb07 9004 	mla	r0, r7, r4, r9
 801fa26:	f009 fdd7 	bl	80295d8 <strcpy>
            opt_extra[opt_len * (i + 1) - 1] = '\n';
 801fa2a:	1c63      	adds	r3, r4, #1
 801fa2c:	fb04 7407 	mla	r4, r4, r7, r7
 801fa30:	3c01      	subs	r4, #1
 801fa32:	220a      	movs	r2, #10
 801fa34:	f809 2004 	strb.w	r2, [r9, r4]
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
 801fa38:	b2dc      	uxtb	r4, r3
 801fa3a:	2c06      	cmp	r4, #6
 801fa3c:	d9f0      	bls.n	801fa20 <lv_roller_set_options+0x7c>
        opt_extra[opt_len * LV_ROLLER_INF_PAGES - 1] = '\0';
 801fa3e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801fa42:	2300      	movs	r3, #0
 801fa44:	f809 300a 	strb.w	r3, [r9, sl]
        lv_label_set_text(label, opt_extra);
 801fa48:	4649      	mov	r1, r9
 801fa4a:	4640      	mov	r0, r8
 801fa4c:	f7f5 fe4c 	bl	80156e8 <lv_label_set_text>
        lv_mem_buf_release(opt_extra);
 801fa50:	4648      	mov	r0, r9
 801fa52:	f7f7 f815 	bl	8016a80 <lv_mem_buf_release>
        roller->sel_opt_id     = ((LV_ROLLER_INF_PAGES / 2) + 0) * roller->option_cnt;
 801fa56:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
 801fa58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801fa5c:	84ea      	strh	r2, [r5, #38]	@ 0x26
        roller->option_cnt = roller->option_cnt * LV_ROLLER_INF_PAGES;
 801fa5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801fa62:	84ab      	strh	r3, [r5, #36]	@ 0x24
        inf_normalize(obj);
 801fa64:	4628      	mov	r0, r5
 801fa66:	f7ff fcdb 	bl	801f420 <inf_normalize>
 801fa6a:	e7c1      	b.n	801f9f0 <lv_roller_set_options+0x4c>

0801fa6c <lv_roller_constructor>:
{
 801fa6c:	b538      	push	{r3, r4, r5, lr}
 801fa6e:	460c      	mov	r4, r1
    roller->mode = LV_ROLLER_MODE_NORMAL;
 801fa70:	f891 302a 	ldrb.w	r3, [r1, #42]	@ 0x2a
 801fa74:	f023 0301 	bic.w	r3, r3, #1
 801fa78:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
    roller->option_cnt = 0;
 801fa7c:	2500      	movs	r5, #0
 801fa7e:	848d      	strh	r5, [r1, #36]	@ 0x24
    roller->sel_opt_id = 0;
 801fa80:	84cd      	strh	r5, [r1, #38]	@ 0x26
    roller->sel_opt_id_ori = 0;
 801fa82:	850d      	strh	r5, [r1, #40]	@ 0x28
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 801fa84:	2110      	movs	r1, #16
 801fa86:	4620      	mov	r0, r4
 801fa88:	f7f8 fcaa 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN_VER);
 801fa8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801fa90:	4620      	mov	r0, r4
 801fa92:	f7f8 fca5 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_t * label = lv_obj_class_create_obj(&lv_roller_label_class, obj);
 801fa96:	4621      	mov	r1, r4
 801fa98:	4805      	ldr	r0, [pc, #20]	@ (801fab0 <lv_roller_constructor+0x44>)
 801fa9a:	f7f8 ffc3 	bl	8018a24 <lv_obj_class_create_obj>
    lv_obj_class_init_obj(label);
 801fa9e:	f7f9 f860 	bl	8018b62 <lv_obj_class_init_obj>
    lv_roller_set_options(obj, "Option 1\nOption 2\nOption 3\nOption 4\nOption 5", LV_ROLLER_MODE_NORMAL);
 801faa2:	462a      	mov	r2, r5
 801faa4:	4903      	ldr	r1, [pc, #12]	@ (801fab4 <lv_roller_constructor+0x48>)
 801faa6:	4620      	mov	r0, r4
 801faa8:	f7ff ff7c 	bl	801f9a4 <lv_roller_set_options>
}
 801faac:	bd38      	pop	{r3, r4, r5, pc}
 801faae:	bf00      	nop
 801fab0:	0802de7c 	.word	0x0802de7c
 801fab4:	08029e78 	.word	0x08029e78

0801fab8 <lv_roller_set_selected>:
{
 801fab8:	b538      	push	{r3, r4, r5, lr}
 801faba:	460b      	mov	r3, r1
 801fabc:	4611      	mov	r1, r2
    if(roller->mode == LV_ROLLER_MODE_INFINITE) {
 801fabe:	f890 202a 	ldrb.w	r2, [r0, #42]	@ 0x2a
 801fac2:	f012 0f01 	tst.w	r2, #1
 801fac6:	d024      	beq.n	801fb12 <lv_roller_set_selected+0x5a>
        uint32_t real_option_cnt = roller->option_cnt / LV_ROLLER_INF_PAGES;
 801fac8:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 801faca:	4c18      	ldr	r4, [pc, #96]	@ (801fb2c <lv_roller_set_selected+0x74>)
 801facc:	fba4 4c02 	umull	r4, ip, r4, r2
 801fad0:	eba2 020c 	sub.w	r2, r2, ip
 801fad4:	eb0c 0c52 	add.w	ip, ip, r2, lsr #1
 801fad8:	f3cc 0c8f 	ubfx	ip, ip, #2, #16
        uint16_t current_page = roller->sel_opt_id / real_option_cnt;
 801fadc:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 801fade:	fbb2 f4fc 	udiv	r4, r2, ip
        if(sel_opt < real_option_cnt) {
 801fae2:	459c      	cmp	ip, r3
 801fae4:	d915      	bls.n	801fb12 <lv_roller_set_selected+0x5a>
            uint16_t act_opt = roller->sel_opt_id - current_page * real_option_cnt;
 801fae6:	fb1c f404 	smulbb	r4, ip, r4
 801faea:	b2a4      	uxth	r4, r4
 801faec:	1b12      	subs	r2, r2, r4
 801faee:	b295      	uxth	r5, r2
            int32_t sel_opt_signed = sel_opt;
 801faf0:	469e      	mov	lr, r3
            if(LV_ABS((int16_t)act_opt - sel_opt) > real_option_cnt / 2) {
 801faf2:	b212      	sxth	r2, r2
 801faf4:	1ad2      	subs	r2, r2, r3
 801faf6:	2a00      	cmp	r2, #0
 801faf8:	bfb8      	it	lt
 801fafa:	4252      	neglt	r2, r2
 801fafc:	ebb2 0f5c 	cmp.w	r2, ip, lsr #1
 801fb00:	d903      	bls.n	801fb0a <lv_roller_set_selected+0x52>
                if(act_opt > sel_opt) sel_opt_signed += real_option_cnt;
 801fb02:	42ab      	cmp	r3, r5
 801fb04:	d20f      	bcs.n	801fb26 <lv_roller_set_selected+0x6e>
 801fb06:	eb03 0e0c 	add.w	lr, r3, ip
            sel_opt = sel_opt_signed + real_option_cnt * current_page;
 801fb0a:	fa14 fe8e 	uxtah	lr, r4, lr
 801fb0e:	fa1f f38e 	uxth.w	r3, lr
    roller->sel_opt_id     = sel_opt < roller->option_cnt ? sel_opt : roller->option_cnt - 1;
 801fb12:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 801fb14:	429a      	cmp	r2, r3
 801fb16:	d801      	bhi.n	801fb1c <lv_roller_set_selected+0x64>
 801fb18:	3a01      	subs	r2, #1
 801fb1a:	b293      	uxth	r3, r2
 801fb1c:	84c3      	strh	r3, [r0, #38]	@ 0x26
    roller->sel_opt_id_ori = roller->sel_opt_id;
 801fb1e:	8503      	strh	r3, [r0, #40]	@ 0x28
    refr_position(obj, anim);
 801fb20:	f7ff fcd6 	bl	801f4d0 <refr_position>
}
 801fb24:	bd38      	pop	{r3, r4, r5, pc}
                else sel_opt_signed -= real_option_cnt;
 801fb26:	eba3 0e0c 	sub.w	lr, r3, ip
 801fb2a:	e7ee      	b.n	801fb0a <lv_roller_set_selected+0x52>
 801fb2c:	24924925 	.word	0x24924925

0801fb30 <release_handler>:
{
 801fb30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801fb34:	b085      	sub	sp, #20
 801fb36:	4605      	mov	r5, r0
    lv_obj_t * label = get_label(obj);
 801fb38:	f7ff fc43 	bl	801f3c2 <get_label>
    if(label == NULL) return LV_RES_OK;
 801fb3c:	2800      	cmp	r0, #0
 801fb3e:	f000 809d 	beq.w	801fc7c <release_handler+0x14c>
 801fb42:	4680      	mov	r8, r0
    lv_indev_t * indev = lv_indev_get_act();
 801fb44:	f7f4 fe14 	bl	8014770 <lv_indev_get_act>
 801fb48:	4606      	mov	r6, r0
    lv_indev_type_t indev_type = lv_indev_get_type(indev);
 801fb4a:	f7f4 fe17 	bl	801477c <lv_indev_get_type>
    if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 801fb4e:	2804      	cmp	r0, #4
 801fb50:	d001      	beq.n	801fb56 <release_handler+0x26>
 801fb52:	2802      	cmp	r0, #2
 801fb54:	d103      	bne.n	801fb5e <release_handler+0x2e>
        roller->sel_opt_id_ori = roller->sel_opt_id;
 801fb56:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 801fb58:	852b      	strh	r3, [r5, #40]	@ 0x28
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801fb5a:	2804      	cmp	r0, #4
 801fb5c:	d029      	beq.n	801fbb2 <release_handler+0x82>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801fb5e:	4630      	mov	r0, r6
 801fb60:	f7f4 fe0c 	bl	801477c <lv_indev_get_type>
 801fb64:	2801      	cmp	r0, #1
 801fb66:	d131      	bne.n	801fbcc <release_handler+0x9c>
        if(roller->moved == 0) {
 801fb68:	f895 302a 	ldrb.w	r3, [r5, #42]	@ 0x2a
 801fb6c:	f013 0f02 	tst.w	r3, #2
 801fb70:	d143      	bne.n	801fbfa <release_handler+0xca>
            lv_indev_get_point(indev, &p);
 801fb72:	a901      	add	r1, sp, #4
 801fb74:	4630      	mov	r0, r6
 801fb76:	f7f4 fe72 	bl	801485e <lv_indev_get_point>
            p.y -= label->coords.y1;
 801fb7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801fb7e:	f8b8 2016 	ldrh.w	r2, [r8, #22]
 801fb82:	1a9b      	subs	r3, r3, r2
 801fb84:	f8ad 3006 	strh.w	r3, [sp, #6]
            p.x -= label->coords.x1;
 801fb88:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801fb8c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 801fb90:	1a9b      	subs	r3, r3, r2
 801fb92:	f8ad 3004 	strh.w	r3, [sp, #4]
            letter_i = lv_label_get_letter_on(label, &p);
 801fb96:	a901      	add	r1, sp, #4
 801fb98:	4640      	mov	r0, r8
 801fb9a:	f7f5 fa15 	bl	8014fc8 <lv_label_get_letter_on>
 801fb9e:	4607      	mov	r7, r0
            const char * txt  = lv_label_get_text(label);
 801fba0:	4640      	mov	r0, r8
 801fba2:	f7f5 f901 	bl	8014da8 <lv_label_get_text>
 801fba6:	4681      	mov	r9, r0
            uint32_t i        = 0;
 801fba8:	2400      	movs	r4, #0
 801fbaa:	9402      	str	r4, [sp, #8]
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801fbac:	4626      	mov	r6, r4
            uint32_t i_prev   = 0;
 801fbae:	46a0      	mov	r8, r4
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801fbb0:	e015      	b.n	801fbde <release_handler+0xae>
            lv_group_t * g      = lv_obj_get_group(obj);
 801fbb2:	4628      	mov	r0, r5
 801fbb4:	f7f8 fc7f 	bl	80184b6 <lv_obj_get_group>
 801fbb8:	4604      	mov	r4, r0
            if(lv_group_get_editing(g)) {
 801fbba:	f7f3 fa7d 	bl	80130b8 <lv_group_get_editing>
 801fbbe:	2800      	cmp	r0, #0
 801fbc0:	d0cd      	beq.n	801fb5e <release_handler+0x2e>
                lv_group_set_editing(g, false);
 801fbc2:	2100      	movs	r1, #0
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	f7f3 fa55 	bl	8013074 <lv_group_set_editing>
 801fbca:	e7c8      	b.n	801fb5e <release_handler+0x2e>
    if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 801fbcc:	4630      	mov	r0, r6
 801fbce:	f7f4 fdd5 	bl	801477c <lv_indev_get_type>
 801fbd2:	2803      	cmp	r0, #3
 801fbd4:	d140      	bne.n	801fc58 <release_handler+0x128>
 801fbd6:	e7c7      	b.n	801fb68 <release_handler+0x38>
                i_prev = i;
 801fbd8:	f8dd 8008 	ldr.w	r8, [sp, #8]
            for(letter_cnt = 0; letter_cnt < letter_i; letter_cnt++) {
 801fbdc:	3601      	adds	r6, #1
 801fbde:	42be      	cmp	r6, r7
 801fbe0:	d238      	bcs.n	801fc54 <release_handler+0x124>
                uint32_t letter = _lv_txt_encoded_next(txt, &i);
 801fbe2:	4b27      	ldr	r3, [pc, #156]	@ (801fc80 <release_handler+0x150>)
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	a902      	add	r1, sp, #8
 801fbe8:	4648      	mov	r0, r9
 801fbea:	4798      	blx	r3
                if(letter == '\n' && i_prev != letter_i) new_opt++;
 801fbec:	280a      	cmp	r0, #10
 801fbee:	d1f3      	bne.n	801fbd8 <release_handler+0xa8>
 801fbf0:	45b8      	cmp	r8, r7
 801fbf2:	d0f1      	beq.n	801fbd8 <release_handler+0xa8>
 801fbf4:	3401      	adds	r4, #1
 801fbf6:	b224      	sxth	r4, r4
 801fbf8:	e7ee      	b.n	801fbd8 <release_handler+0xa8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 801fbfa:	2257      	movs	r2, #87	@ 0x57
 801fbfc:	2100      	movs	r1, #0
 801fbfe:	4628      	mov	r0, r5
 801fc00:	f7fc fd78 	bl	801c6f4 <lv_obj_get_style_prop>
 801fc04:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 801fc06:	2259      	movs	r2, #89	@ 0x59
 801fc08:	2100      	movs	r1, #0
 801fc0a:	4628      	mov	r0, r5
 801fc0c:	f7fc fd72 	bl	801c6f4 <lv_obj_get_style_prop>
 801fc10:	f9b4 7008 	ldrsh.w	r7, [r4, #8]
            lv_coord_t label_unit = font_h + line_space;
 801fc14:	4407      	add	r7, r0
 801fc16:	b23f      	sxth	r7, r7
            lv_coord_t mid        = obj->coords.y1 + (obj->coords.y2 - obj->coords.y1) / 2;
 801fc18:	f9b5 4016 	ldrsh.w	r4, [r5, #22]
 801fc1c:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
 801fc20:	1b1b      	subs	r3, r3, r4
 801fc22:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801fc26:	105b      	asrs	r3, r3, #1
 801fc28:	fa13 f484 	uxtah	r4, r3, r4
 801fc2c:	b224      	sxth	r4, r4
            lv_coord_t label_y1 = label->coords.y1 + lv_indev_scroll_throw_predict(indev, LV_DIR_VER);
 801fc2e:	f8b8 8016 	ldrh.w	r8, [r8, #22]
 801fc32:	210c      	movs	r1, #12
 801fc34:	4630      	mov	r0, r6
 801fc36:	f7f4 fe67 	bl	8014908 <lv_indev_scroll_throw_predict>
 801fc3a:	fa18 f080 	uxtah	r0, r8, r0
 801fc3e:	b200      	sxth	r0, r0
            int32_t id = (mid - label_y1) / label_unit;
 801fc40:	1a24      	subs	r4, r4, r0
 801fc42:	fb94 f4f7 	sdiv	r4, r4, r7
            if(id < 0) id = 0;
 801fc46:	2c00      	cmp	r4, #0
 801fc48:	db10      	blt.n	801fc6c <release_handler+0x13c>
            if(id >= roller->option_cnt) id = roller->option_cnt - 1;
 801fc4a:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
 801fc4c:	42a3      	cmp	r3, r4
 801fc4e:	dc00      	bgt.n	801fc52 <release_handler+0x122>
 801fc50:	1e5c      	subs	r4, r3, #1
            new_opt = id;
 801fc52:	b224      	sxth	r4, r4
        if(new_opt >= 0) {
 801fc54:	2c00      	cmp	r4, #0
 801fc56:	da0b      	bge.n	801fc70 <release_handler+0x140>
    uint32_t id  = roller->sel_opt_id; /*Just to use uint32_t in event data*/
 801fc58:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 801fc5a:	9303      	str	r3, [sp, #12]
    lv_res_t res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, &id);
 801fc5c:	aa03      	add	r2, sp, #12
 801fc5e:	211c      	movs	r1, #28
 801fc60:	4628      	mov	r0, r5
 801fc62:	f7f1 f831 	bl	8010cc8 <lv_event_send>
}
 801fc66:	b005      	add	sp, #20
 801fc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if(id < 0) id = 0;
 801fc6c:	2400      	movs	r4, #0
 801fc6e:	e7ec      	b.n	801fc4a <release_handler+0x11a>
            lv_roller_set_selected(obj, new_opt, LV_ANIM_ON);
 801fc70:	2201      	movs	r2, #1
 801fc72:	b2a1      	uxth	r1, r4
 801fc74:	4628      	mov	r0, r5
 801fc76:	f7ff ff1f 	bl	801fab8 <lv_roller_set_selected>
 801fc7a:	e7ed      	b.n	801fc58 <release_handler+0x128>
    if(label == NULL) return LV_RES_OK;
 801fc7c:	2001      	movs	r0, #1
 801fc7e:	e7f2      	b.n	801fc66 <release_handler+0x136>
 801fc80:	20000084 	.word	0x20000084

0801fc84 <lv_roller_event>:
{
 801fc84:	b570      	push	{r4, r5, r6, lr}
 801fc86:	b082      	sub	sp, #8
 801fc88:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 801fc8a:	4888      	ldr	r0, [pc, #544]	@ (801feac <lv_roller_event+0x228>)
 801fc8c:	f7f0 ff72 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 801fc90:	2801      	cmp	r0, #1
 801fc92:	d001      	beq.n	801fc98 <lv_roller_event+0x14>
}
 801fc94:	b002      	add	sp, #8
 801fc96:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 801fc98:	4620      	mov	r0, r4
 801fc9a:	f7f1 f843 	bl	8010d24 <lv_event_get_code>
 801fc9e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801fca0:	4620      	mov	r0, r4
 801fca2:	f7f1 f83b 	bl	8010d1c <lv_event_get_target>
 801fca6:	4606      	mov	r6, r0
    if(code == LV_EVENT_GET_SELF_SIZE) {
 801fca8:	1e6b      	subs	r3, r5, #1
 801fcaa:	2b2b      	cmp	r3, #43	@ 0x2b
 801fcac:	d8f2      	bhi.n	801fc94 <lv_roller_event+0x10>
 801fcae:	a201      	add	r2, pc, #4	@ (adr r2, 801fcb4 <lv_roller_event+0x30>)
 801fcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcb4:	0801fd9d 	.word	0x0801fd9d
 801fcb8:	0801fdb5 	.word	0x0801fdb5
 801fcbc:	0801fdf3 	.word	0x0801fdf3
 801fcc0:	0801fc95 	.word	0x0801fc95
 801fcc4:	0801fc95 	.word	0x0801fc95
 801fcc8:	0801fc95 	.word	0x0801fc95
 801fccc:	0801fc95 	.word	0x0801fc95
 801fcd0:	0801fdf3 	.word	0x0801fdf3
 801fcd4:	0801fc95 	.word	0x0801fc95
 801fcd8:	0801fc95 	.word	0x0801fc95
 801fcdc:	0801fc95 	.word	0x0801fc95
 801fce0:	0801fc95 	.word	0x0801fc95
 801fce4:	0801fe47 	.word	0x0801fe47
 801fce8:	0801fdf9 	.word	0x0801fdf9
 801fcec:	0801fe33 	.word	0x0801fe33
 801fcf0:	0801fc95 	.word	0x0801fc95
 801fcf4:	0801fc95 	.word	0x0801fc95
 801fcf8:	0801fc95 	.word	0x0801fc95
 801fcfc:	0801fe99 	.word	0x0801fe99
 801fd00:	0801fc95 	.word	0x0801fc95
 801fd04:	0801fea3 	.word	0x0801fea3
 801fd08:	0801fc95 	.word	0x0801fc95
 801fd0c:	0801fc95 	.word	0x0801fc95
 801fd10:	0801fea3 	.word	0x0801fea3
 801fd14:	0801fc95 	.word	0x0801fc95
 801fd18:	0801fc95 	.word	0x0801fc95
 801fd1c:	0801fc95 	.word	0x0801fc95
 801fd20:	0801fc95 	.word	0x0801fc95
 801fd24:	0801fc95 	.word	0x0801fc95
 801fd28:	0801fc95 	.word	0x0801fc95
 801fd2c:	0801fc95 	.word	0x0801fc95
 801fd30:	0801fc95 	.word	0x0801fc95
 801fd34:	0801fc95 	.word	0x0801fc95
 801fd38:	0801fc95 	.word	0x0801fc95
 801fd3c:	0801fc95 	.word	0x0801fc95
 801fd40:	0801fc95 	.word	0x0801fc95
 801fd44:	0801fc95 	.word	0x0801fc95
 801fd48:	0801fc95 	.word	0x0801fc95
 801fd4c:	0801fc95 	.word	0x0801fc95
 801fd50:	0801fc95 	.word	0x0801fc95
 801fd54:	0801fd95 	.word	0x0801fd95
 801fd58:	0801fd77 	.word	0x0801fd77
 801fd5c:	0801fc95 	.word	0x0801fc95
 801fd60:	0801fd65 	.word	0x0801fd65
        lv_point_t * p = lv_event_get_param(e);
 801fd64:	4620      	mov	r0, r4
 801fd66:	f7f0 ffe1 	bl	8010d2c <lv_event_get_param>
 801fd6a:	4604      	mov	r4, r0
        p->x = get_selected_label_width(obj);
 801fd6c:	4630      	mov	r0, r6
 801fd6e:	f7ff fb2d 	bl	801f3cc <get_selected_label_width>
 801fd72:	8020      	strh	r0, [r4, #0]
 801fd74:	e78e      	b.n	801fc94 <lv_roller_event+0x10>
        lv_obj_t * label = get_label(obj);
 801fd76:	f7ff fb24 	bl	801f3c2 <get_label>
        if(label) lv_event_send(label, LV_EVENT_STYLE_CHANGED, NULL);
 801fd7a:	b118      	cbz	r0, 801fd84 <lv_roller_event+0x100>
 801fd7c:	2200      	movs	r2, #0
 801fd7e:	212a      	movs	r1, #42	@ 0x2a
 801fd80:	f7f0 ffa2 	bl	8010cc8 <lv_event_send>
        lv_obj_refresh_self_size(obj);
 801fd84:	4630      	mov	r0, r6
 801fd86:	f7f9 fedf 	bl	8019b48 <lv_obj_refresh_self_size>
        refr_position(obj, LV_ANIM_OFF);
 801fd8a:	2100      	movs	r1, #0
 801fd8c:	4630      	mov	r0, r6
 801fd8e:	f7ff fb9f 	bl	801f4d0 <refr_position>
 801fd92:	e77f      	b.n	801fc94 <lv_roller_event+0x10>
        refr_position(obj, LV_ANIM_OFF);
 801fd94:	2100      	movs	r1, #0
 801fd96:	f7ff fb9b 	bl	801f4d0 <refr_position>
 801fd9a:	e77b      	b.n	801fc94 <lv_roller_event+0x10>
        roller->moved = 0;
 801fd9c:	f890 302a 	ldrb.w	r3, [r0, #42]	@ 0x2a
 801fda0:	f023 0302 	bic.w	r3, r3, #2
 801fda4:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
        lv_anim_del(get_label(obj), set_y_anim);
 801fda8:	f7ff fb0b 	bl	801f3c2 <get_label>
 801fdac:	4940      	ldr	r1, [pc, #256]	@ (801feb0 <lv_roller_event+0x22c>)
 801fdae:	f7e0 fceb 	bl	8000788 <lv_anim_del>
 801fdb2:	e76f      	b.n	801fc94 <lv_roller_event+0x10>
        lv_indev_t * indev = lv_indev_get_act();
 801fdb4:	f7f4 fcdc 	bl	8014770 <lv_indev_get_act>
        lv_indev_get_vect(indev, &p);
 801fdb8:	a901      	add	r1, sp, #4
 801fdba:	f7f4 fd86 	bl	80148ca <lv_indev_get_vect>
        if(p.y) {
 801fdbe:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	f43f af66 	beq.w	801fc94 <lv_roller_event+0x10>
            lv_obj_t * label = get_label(obj);
 801fdc8:	4630      	mov	r0, r6
 801fdca:	f7ff fafa 	bl	801f3c2 <get_label>
 801fdce:	4604      	mov	r4, r0
            lv_obj_set_y(label, lv_obj_get_y(label) + p.y);
 801fdd0:	f7f9 fc5b 	bl	801968a <lv_obj_get_y>
 801fdd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801fdd8:	fa13 f180 	uxtah	r1, r3, r0
 801fddc:	b209      	sxth	r1, r1
 801fdde:	4620      	mov	r0, r4
 801fde0:	f7f9 fb61 	bl	80194a6 <lv_obj_set_y>
            roller->moved = 1;
 801fde4:	f896 302a 	ldrb.w	r3, [r6, #42]	@ 0x2a
 801fde8:	f043 0302 	orr.w	r3, r3, #2
 801fdec:	f886 302a 	strb.w	r3, [r6, #42]	@ 0x2a
 801fdf0:	e750      	b.n	801fc94 <lv_roller_event+0x10>
        release_handler(obj);
 801fdf2:	f7ff fe9d 	bl	801fb30 <release_handler>
 801fdf6:	e74d      	b.n	801fc94 <lv_roller_event+0x10>
        lv_group_t * g             = lv_obj_get_group(obj);
 801fdf8:	f7f8 fb5d 	bl	80184b6 <lv_obj_get_group>
        bool editing               = lv_group_get_editing(g);
 801fdfc:	f7f3 f95c 	bl	80130b8 <lv_group_get_editing>
 801fe00:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801fe02:	f7f4 fcb5 	bl	8014770 <lv_indev_get_act>
 801fe06:	f7f4 fcb9 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801fe0a:	2804      	cmp	r0, #4
 801fe0c:	d002      	beq.n	801fe14 <lv_roller_event+0x190>
            roller->sel_opt_id_ori = roller->sel_opt_id; /*Save the current value. Used to revert this state if
 801fe0e:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 801fe10:	8533      	strh	r3, [r6, #40]	@ 0x28
 801fe12:	e73f      	b.n	801fc94 <lv_roller_event+0x10>
            if(!editing) {
 801fe14:	b954      	cbnz	r4, 801fe2c <lv_roller_event+0x1a8>
                if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801fe16:	8cf2      	ldrh	r2, [r6, #38]	@ 0x26
 801fe18:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 801fe1a:	429a      	cmp	r2, r3
 801fe1c:	f43f af3a 	beq.w	801fc94 <lv_roller_event+0x10>
                    roller->sel_opt_id = roller->sel_opt_id_ori;
 801fe20:	84f3      	strh	r3, [r6, #38]	@ 0x26
                    refr_position(obj, LV_ANIM_ON);
 801fe22:	2101      	movs	r1, #1
 801fe24:	4630      	mov	r0, r6
 801fe26:	f7ff fb53 	bl	801f4d0 <refr_position>
 801fe2a:	e733      	b.n	801fc94 <lv_roller_event+0x10>
                roller->sel_opt_id_ori = roller->sel_opt_id;
 801fe2c:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 801fe2e:	8533      	strh	r3, [r6, #40]	@ 0x28
 801fe30:	e730      	b.n	801fc94 <lv_roller_event+0x10>
        if(roller->sel_opt_id != roller->sel_opt_id_ori) {
 801fe32:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 801fe34:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 801fe36:	429a      	cmp	r2, r3
 801fe38:	f43f af2c 	beq.w	801fc94 <lv_roller_event+0x10>
            roller->sel_opt_id = roller->sel_opt_id_ori;
 801fe3c:	84c3      	strh	r3, [r0, #38]	@ 0x26
            refr_position(obj, LV_ANIM_ON);
 801fe3e:	2101      	movs	r1, #1
 801fe40:	f7ff fb46 	bl	801f4d0 <refr_position>
 801fe44:	e726      	b.n	801fc94 <lv_roller_event+0x10>
        char c = *((char *)lv_event_get_param(e));
 801fe46:	4620      	mov	r0, r4
 801fe48:	f7f0 ff70 	bl	8010d2c <lv_event_get_param>
 801fe4c:	7802      	ldrb	r2, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_DOWN) {
 801fe4e:	f1a2 0312 	sub.w	r3, r2, #18
 801fe52:	b2db      	uxtb	r3, r3
 801fe54:	2b01      	cmp	r3, #1
 801fe56:	d911      	bls.n	801fe7c <lv_roller_event+0x1f8>
        else if(c == LV_KEY_LEFT || c == LV_KEY_UP) {
 801fe58:	2a14      	cmp	r2, #20
 801fe5a:	d002      	beq.n	801fe62 <lv_roller_event+0x1de>
 801fe5c:	2a11      	cmp	r2, #17
 801fe5e:	f47f af19 	bne.w	801fc94 <lv_roller_event+0x10>
            if(roller->sel_opt_id > 0) {
 801fe62:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	f43f af15 	beq.w	801fc94 <lv_roller_event+0x10>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801fe6a:	8d34      	ldrh	r4, [r6, #40]	@ 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id - 1, LV_ANIM_ON);
 801fe6c:	3b01      	subs	r3, #1
 801fe6e:	2201      	movs	r2, #1
 801fe70:	b299      	uxth	r1, r3
 801fe72:	4630      	mov	r0, r6
 801fe74:	f7ff fe20 	bl	801fab8 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 801fe78:	8534      	strh	r4, [r6, #40]	@ 0x28
 801fe7a:	e70b      	b.n	801fc94 <lv_roller_event+0x10>
            if(roller->sel_opt_id + 1 < roller->option_cnt) {
 801fe7c:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 801fe7e:	1c59      	adds	r1, r3, #1
 801fe80:	8cb2      	ldrh	r2, [r6, #36]	@ 0x24
 801fe82:	4291      	cmp	r1, r2
 801fe84:	f6bf af06 	bge.w	801fc94 <lv_roller_event+0x10>
                uint16_t ori_id = roller->sel_opt_id_ori; /*lv_roller_set_selected will overwrite this*/
 801fe88:	8d34      	ldrh	r4, [r6, #40]	@ 0x28
                lv_roller_set_selected(obj, roller->sel_opt_id + 1, LV_ANIM_ON);
 801fe8a:	2201      	movs	r2, #1
 801fe8c:	b289      	uxth	r1, r1
 801fe8e:	4630      	mov	r0, r6
 801fe90:	f7ff fe12 	bl	801fab8 <lv_roller_set_selected>
                roller->sel_opt_id_ori = ori_id;
 801fe94:	8534      	strh	r4, [r6, #40]	@ 0x28
 801fe96:	e6fd      	b.n	801fc94 <lv_roller_event+0x10>
        lv_obj_t * label = get_label(obj);
 801fe98:	f7ff fa93 	bl	801f3c2 <get_label>
        lv_obj_refresh_ext_draw_size(label);
 801fe9c:	f7f9 fa26 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 801fea0:	e6f8      	b.n	801fc94 <lv_roller_event+0x10>
        draw_main(e);
 801fea2:	4620      	mov	r0, r4
 801fea4:	f7ff fbe9 	bl	801f67a <draw_main>
 801fea8:	e6f4      	b.n	801fc94 <lv_roller_event+0x10>
 801feaa:	bf00      	nop
 801feac:	0802de98 	.word	0x0802de98
 801feb0:	0801f3b9 	.word	0x0801f3b9

0801feb4 <is_slider_horizontal>:
    knob_area->y1 -= knob_top + transf_h;
    knob_area->y2 += knob_bottom + transf_h;
}

static bool is_slider_horizontal(lv_obj_t * obj)
{
 801feb4:	b538      	push	{r3, r4, r5, lr}
 801feb6:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 801feb8:	f7f9 fc0a 	bl	80196d0 <lv_obj_get_width>
 801febc:	4604      	mov	r4, r0
 801febe:	4628      	mov	r0, r5
 801fec0:	f7f9 fc0d 	bl	80196de <lv_obj_get_height>
}
 801fec4:	4284      	cmp	r4, r0
 801fec6:	bfb4      	ite	lt
 801fec8:	2000      	movlt	r0, #0
 801feca:	2001      	movge	r0, #1
 801fecc:	bd38      	pop	{r3, r4, r5, pc}

0801fece <position_knob>:
{
 801fece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fed2:	4682      	mov	sl, r0
 801fed4:	460c      	mov	r4, r1
    if(hor) {
 801fed6:	2b00      	cmp	r3, #0
 801fed8:	d051      	beq.n	801ff7e <position_knob+0xb0>
        knob_area->x1 -= (knob_size >> 1);
 801feda:	880b      	ldrh	r3, [r1, #0]
 801fedc:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 801fee0:	b29b      	uxth	r3, r3
 801fee2:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = knob_area->x1 + knob_size - 1;
 801fee4:	4413      	add	r3, r2
 801fee6:	b29b      	uxth	r3, r3
 801fee8:	3b01      	subs	r3, #1
 801feea:	808b      	strh	r3, [r1, #4]
        knob_area->y1 = obj->coords.y1;
 801feec:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 801fef0:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = obj->coords.y2;
 801fef2:	f9b0 301a 	ldrsh.w	r3, [r0, #26]
 801fef6:	80cb      	strh	r3, [r1, #6]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 801fef8:	2212      	movs	r2, #18
 801fefa:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801fefe:	4650      	mov	r0, sl
 801ff00:	f7fc fbf8 	bl	801c6f4 <lv_obj_get_style_prop>
 801ff04:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 801ff06:	2213      	movs	r2, #19
 801ff08:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801ff0c:	4650      	mov	r0, sl
 801ff0e:	f7fc fbf1 	bl	801c6f4 <lv_obj_get_style_prop>
 801ff12:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 801ff14:	2210      	movs	r2, #16
 801ff16:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801ff1a:	4650      	mov	r0, sl
 801ff1c:	f7fc fbea 	bl	801c6f4 <lv_obj_get_style_prop>
 801ff20:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 801ff22:	2211      	movs	r2, #17
 801ff24:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801ff28:	4650      	mov	r0, sl
 801ff2a:	f7fc fbe3 	bl	801c6f4 <lv_obj_get_style_prop>
 801ff2e:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 801ff30:	2269      	movs	r2, #105	@ 0x69
 801ff32:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801ff36:	4650      	mov	r0, sl
 801ff38:	f7fc fbdc 	bl	801c6f4 <lv_obj_get_style_prop>
 801ff3c:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 801ff3e:	226a      	movs	r2, #106	@ 0x6a
 801ff40:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 801ff44:	4650      	mov	r0, sl
 801ff46:	f7fc fbd5 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_area->x1 -= knob_left + transf_w;
 801ff4a:	8822      	ldrh	r2, [r4, #0]
 801ff4c:	b2ab      	uxth	r3, r5
 801ff4e:	4498      	add	r8, r3
 801ff50:	fa1f f888 	uxth.w	r8, r8
 801ff54:	eba2 0208 	sub.w	r2, r2, r8
 801ff58:	8022      	strh	r2, [r4, #0]
    knob_area->x2 += knob_right + transf_w;
 801ff5a:	88a2      	ldrh	r2, [r4, #4]
 801ff5c:	444b      	add	r3, r9
 801ff5e:	fa12 f383 	uxtah	r3, r2, r3
 801ff62:	80a3      	strh	r3, [r4, #4]
    knob_area->y1 -= knob_top + transf_h;
 801ff64:	8862      	ldrh	r2, [r4, #2]
 801ff66:	b283      	uxth	r3, r0
 801ff68:	441e      	add	r6, r3
 801ff6a:	b2b6      	uxth	r6, r6
 801ff6c:	1b92      	subs	r2, r2, r6
 801ff6e:	8062      	strh	r2, [r4, #2]
    knob_area->y2 += knob_bottom + transf_h;
 801ff70:	88e2      	ldrh	r2, [r4, #6]
 801ff72:	443b      	add	r3, r7
 801ff74:	fa12 f383 	uxtah	r3, r2, r3
 801ff78:	80e3      	strh	r3, [r4, #6]
}
 801ff7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        knob_area->y1 -= (knob_size >> 1);
 801ff7e:	884b      	ldrh	r3, [r1, #2]
 801ff80:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 801ff84:	b29b      	uxth	r3, r3
 801ff86:	804b      	strh	r3, [r1, #2]
        knob_area->y2 = knob_area->y1 + knob_size - 1;
 801ff88:	4413      	add	r3, r2
 801ff8a:	b29b      	uxth	r3, r3
 801ff8c:	3b01      	subs	r3, #1
 801ff8e:	80cb      	strh	r3, [r1, #6]
        knob_area->x1 = obj->coords.x1;
 801ff90:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
 801ff94:	800b      	strh	r3, [r1, #0]
        knob_area->x2 = obj->coords.x2;
 801ff96:	f9b0 3018 	ldrsh.w	r3, [r0, #24]
 801ff9a:	808b      	strh	r3, [r1, #4]
 801ff9c:	e7ac      	b.n	801fef8 <position_knob+0x2a>

0801ff9e <lv_slider_get_mode>:
 * Get the mode of the slider.
 * @param obj       pointer to a bar object
 * @return          see ::lv_slider_mode_t
 */
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
{
 801ff9e:	b508      	push	{r3, lr}
    lv_bar_mode_t mode = lv_bar_get_mode(slider);
 801ffa0:	f7e2 fd22 	bl	80029e8 <lv_bar_get_mode>
    if(mode == LV_BAR_MODE_SYMMETRICAL) return LV_SLIDER_MODE_SYMMETRICAL;
 801ffa4:	2801      	cmp	r0, #1
 801ffa6:	d002      	beq.n	801ffae <lv_slider_get_mode+0x10>
    else if(mode == LV_BAR_MODE_RANGE) return LV_SLIDER_MODE_RANGE;
 801ffa8:	2802      	cmp	r0, #2
 801ffaa:	d000      	beq.n	801ffae <lv_slider_get_mode+0x10>
    else return LV_SLIDER_MODE_NORMAL;
 801ffac:	2000      	movs	r0, #0
}
 801ffae:	bd08      	pop	{r3, pc}

0801ffb0 <draw_knob>:
{
 801ffb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ffb4:	b0b0      	sub	sp, #192	@ 0xc0
 801ffb6:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 801ffb8:	f7f0 feb0 	bl	8010d1c <lv_event_get_target>
 801ffbc:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 801ffbe:	4628      	mov	r0, r5
 801ffc0:	f7f0 ff24 	bl	8010e0c <lv_event_get_draw_ctx>
 801ffc4:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 801ffc6:	2216      	movs	r2, #22
 801ffc8:	2100      	movs	r1, #0
 801ffca:	4620      	mov	r0, r4
 801ffcc:	f7fc fb92 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 801ffd0:	fa5f f980 	uxtb.w	r9, r0
    const bool is_horizontal = is_slider_horizontal(obj);
 801ffd4:	4620      	mov	r0, r4
 801ffd6:	f7ff ff6d 	bl	801feb4 <is_slider_horizontal>
 801ffda:	4605      	mov	r5, r0
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 801ffdc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801ffe0:	f003 0303 	and.w	r3, r3, #3
 801ffe4:	2b01      	cmp	r3, #1
 801ffe6:	d05e      	beq.n	80200a6 <draw_knob+0xf6>
    bool is_symmetrical = false;
 801ffe8:	f04f 0800 	mov.w	r8, #0
    if(is_horizontal) {
 801ffec:	2d00      	cmp	r5, #0
 801ffee:	d071      	beq.n	80200d4 <draw_knob+0x124>
        knob_size = lv_obj_get_height(obj);
 801fff0:	4620      	mov	r0, r4
 801fff2:	f7f9 fb74 	bl	80196de <lv_obj_get_height>
 801fff6:	4607      	mov	r7, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 801fff8:	f1b8 0f00 	cmp.w	r8, #0
 801fffc:	d002      	beq.n	8020004 <draw_knob+0x54>
 801fffe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8020000:	2b00      	cmp	r3, #0
 8020002:	db5f      	blt.n	80200c4 <draw_knob+0x114>
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 8020004:	f1b9 0f01 	cmp.w	r9, #1
 8020008:	d061      	beq.n	80200ce <draw_knob+0x11e>
 802000a:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	@ 0x38
 802000e:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8020012:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
 8020016:	4640      	mov	r0, r8
 8020018:	f7e9 fe1a 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802001c:	4642      	mov	r2, r8
 802001e:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8020022:	4620      	mov	r0, r4
 8020024:	f7f8 fe4e 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    position_knob(obj, &knob_area, knob_size, is_horizontal);
 8020028:	462b      	mov	r3, r5
 802002a:	463a      	mov	r2, r7
 802002c:	a92e      	add	r1, sp, #184	@ 0xb8
 802002e:	4620      	mov	r0, r4
 8020030:	f7ff ff4d 	bl	801fece <position_knob>
    dest->x1 = src->x1;
 8020034:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	@ 0xb8
 8020038:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    dest->y1 = src->y1;
 802003c:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	@ 0xba
 8020040:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    dest->x2 = src->x2;
 8020044:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	@ 0xbc
 8020048:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
    dest->y2 = src->y2;
 802004c:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	@ 0xbe
 8020050:	f8a4 306e 	strh.w	r3, [r4, #110]	@ 0x6e
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8020054:	4631      	mov	r1, r6
 8020056:	a80e      	add	r0, sp, #56	@ 0x38
 8020058:	f7f9 f939 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_KNOB;
 802005c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8020060:	931b      	str	r3, [sp, #108]	@ 0x6c
    part_draw_dsc.class_p = MY_CLASS;
 8020062:	4b52      	ldr	r3, [pc, #328]	@ (80201ac <draw_knob+0x1fc>)
 8020064:	930f      	str	r3, [sp, #60]	@ 0x3c
    part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB;
 8020066:	2300      	movs	r3, #0
 8020068:	9310      	str	r3, [sp, #64]	@ 0x40
    part_draw_dsc.id = 0;
 802006a:	931c      	str	r3, [sp, #112]	@ 0x70
    part_draw_dsc.draw_area = &slider->right_knob_area;
 802006c:	f104 0a68 	add.w	sl, r4, #104	@ 0x68
 8020070:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
    part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8020074:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
    if(lv_slider_get_mode(obj) != LV_SLIDER_MODE_RANGE) {
 8020078:	4620      	mov	r0, r4
 802007a:	f7ff ff90 	bl	801ff9e <lv_slider_get_mode>
 802007e:	2802      	cmp	r0, #2
 8020080:	d03c      	beq.n	80200fc <draw_knob+0x14c>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8020082:	aa0e      	add	r2, sp, #56	@ 0x38
 8020084:	211a      	movs	r1, #26
 8020086:	4620      	mov	r0, r4
 8020088:	f7f0 fe1e 	bl	8010cc8 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 802008c:	4652      	mov	r2, sl
 802008e:	4641      	mov	r1, r8
 8020090:	4630      	mov	r0, r6
 8020092:	f7e9 fe1f 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8020096:	aa0e      	add	r2, sp, #56	@ 0x38
 8020098:	211b      	movs	r1, #27
 802009a:	4620      	mov	r0, r4
 802009c:	f7f0 fe14 	bl	8010cc8 <lv_event_send>
}
 80200a0:	b030      	add	sp, #192	@ 0xc0
 80200a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 80200a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	db02      	blt.n	80200b2 <draw_knob+0x102>
    bool is_symmetrical = false;
 80200ac:	f04f 0800 	mov.w	r8, #0
 80200b0:	e79c      	b.n	801ffec <draw_knob+0x3c>
       slider->bar.max_value > 0) is_symmetrical = true;
 80200b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(slider->bar.mode == LV_BAR_MODE_SYMMETRICAL && slider->bar.min_value < 0 &&
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	dd02      	ble.n	80200be <draw_knob+0x10e>
       slider->bar.max_value > 0) is_symmetrical = true;
 80200b8:	f04f 0801 	mov.w	r8, #1
 80200bc:	e796      	b.n	801ffec <draw_knob+0x3c>
    bool is_symmetrical = false;
 80200be:	f04f 0800 	mov.w	r8, #0
 80200c2:	e793      	b.n	801ffec <draw_knob+0x3c>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.x1 = slider->bar.indic_area.x1;
 80200c4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 80200c8:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
 80200cc:	e7a1      	b.n	8020012 <draw_knob+0x62>
        else knob_area.x1 = LV_SLIDER_KNOB_COORD(is_rtl, slider->bar.indic_area);
 80200ce:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 80200d2:	e79c      	b.n	802000e <draw_knob+0x5e>
        knob_size = lv_obj_get_width(obj);
 80200d4:	4620      	mov	r0, r4
 80200d6:	f7f9 fafb 	bl	80196d0 <lv_obj_get_width>
 80200da:	4607      	mov	r7, r0
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 80200dc:	f1b8 0f00 	cmp.w	r8, #0
 80200e0:	d002      	beq.n	80200e8 <draw_knob+0x138>
 80200e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	db04      	blt.n	80200f2 <draw_knob+0x142>
        else knob_area.y1 = slider->bar.indic_area.y1;
 80200e8:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	@ 0x36
 80200ec:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
 80200f0:	e78f      	b.n	8020012 <draw_knob+0x62>
        if(is_symmetrical && slider->bar.cur_value < 0) knob_area.y1 = slider->bar.indic_area.y2;
 80200f2:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	@ 0x3a
 80200f6:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
 80200fa:	e78a      	b.n	8020012 <draw_knob+0x62>
        lv_memcpy(&knob_rect_dsc_tmp, &knob_rect_dsc, sizeof(lv_draw_rect_dsc_t));
 80200fc:	2238      	movs	r2, #56	@ 0x38
 80200fe:	a920      	add	r1, sp, #128	@ 0x80
 8020100:	4668      	mov	r0, sp
 8020102:	f7f6 fcf1 	bl	8016ae8 <lv_memcpy>
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8020106:	aa0e      	add	r2, sp, #56	@ 0x38
 8020108:	211a      	movs	r1, #26
 802010a:	4620      	mov	r0, r4
 802010c:	f7f0 fddc 	bl	8010cc8 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->right_knob_area);
 8020110:	4652      	mov	r2, sl
 8020112:	a920      	add	r1, sp, #128	@ 0x80
 8020114:	4630      	mov	r0, r6
 8020116:	f7e9 fddd 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 802011a:	aa0e      	add	r2, sp, #56	@ 0x38
 802011c:	211b      	movs	r1, #27
 802011e:	4620      	mov	r0, r4
 8020120:	f7f0 fdd2 	bl	8010cc8 <lv_event_send>
        if(is_horizontal) {
 8020124:	2d00      	cmp	r5, #0
 8020126:	d03c      	beq.n	80201a2 <draw_knob+0x1f2>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 8020128:	f1b9 0f01 	cmp.w	r9, #1
 802012c:	d036      	beq.n	802019c <draw_knob+0x1ec>
 802012e:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	@ 0x34
 8020132:	f8ad 30b8 	strh.w	r3, [sp, #184]	@ 0xb8
        position_knob(obj, &knob_area, knob_size, is_horizontal);
 8020136:	462b      	mov	r3, r5
 8020138:	463a      	mov	r2, r7
 802013a:	a92e      	add	r1, sp, #184	@ 0xb8
 802013c:	4620      	mov	r0, r4
 802013e:	f7ff fec6 	bl	801fece <position_knob>
    dest->x1 = src->x1;
 8020142:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	@ 0xb8
 8020146:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
    dest->y1 = src->y1;
 802014a:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	@ 0xba
 802014e:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    dest->x2 = src->x2;
 8020152:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	@ 0xbc
 8020156:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    dest->y2 = src->y2;
 802015a:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	@ 0xbe
 802015e:	f8a4 3066 	strh.w	r3, [r4, #102]	@ 0x66
        lv_memcpy(&knob_rect_dsc, &knob_rect_dsc_tmp, sizeof(lv_draw_rect_dsc_t));
 8020162:	ad20      	add	r5, sp, #128	@ 0x80
 8020164:	2238      	movs	r2, #56	@ 0x38
 8020166:	4669      	mov	r1, sp
 8020168:	4628      	mov	r0, r5
 802016a:	f7f6 fcbd 	bl	8016ae8 <lv_memcpy>
        part_draw_dsc.type = LV_SLIDER_DRAW_PART_KNOB_LEFT;
 802016e:	2301      	movs	r3, #1
 8020170:	9310      	str	r3, [sp, #64]	@ 0x40
        part_draw_dsc.draw_area = &slider->left_knob_area;
 8020172:	f104 0760 	add.w	r7, r4, #96	@ 0x60
 8020176:	9711      	str	r7, [sp, #68]	@ 0x44
        part_draw_dsc.rect_dsc = &knob_rect_dsc;
 8020178:	9512      	str	r5, [sp, #72]	@ 0x48
        part_draw_dsc.id = 1;
 802017a:	931c      	str	r3, [sp, #112]	@ 0x70
        lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 802017c:	aa0e      	add	r2, sp, #56	@ 0x38
 802017e:	211a      	movs	r1, #26
 8020180:	4620      	mov	r0, r4
 8020182:	f7f0 fda1 	bl	8010cc8 <lv_event_send>
        lv_draw_rect(draw_ctx, &knob_rect_dsc, &slider->left_knob_area);
 8020186:	463a      	mov	r2, r7
 8020188:	4629      	mov	r1, r5
 802018a:	4630      	mov	r0, r6
 802018c:	f7e9 fda2 	bl	8009cd4 <lv_draw_rect>
        lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8020190:	aa0e      	add	r2, sp, #56	@ 0x38
 8020192:	211b      	movs	r1, #27
 8020194:	4620      	mov	r0, r4
 8020196:	f7f0 fd97 	bl	8010cc8 <lv_event_send>
}
 802019a:	e781      	b.n	80200a0 <draw_knob+0xf0>
            knob_area.x1 = LV_SLIDER_KNOB_COORD(!is_rtl, slider->bar.indic_area);
 802019c:	f9b4 3038 	ldrsh.w	r3, [r4, #56]	@ 0x38
 80201a0:	e7c7      	b.n	8020132 <draw_knob+0x182>
            knob_area.y1 = slider->bar.indic_area.y2;
 80201a2:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	@ 0x3a
 80201a6:	f8ad 30ba 	strh.w	r3, [sp, #186]	@ 0xba
 80201aa:	e7c4      	b.n	8020136 <draw_knob+0x186>
 80201ac:	0802deb4 	.word	0x0802deb4

080201b0 <lv_slider_event>:
{
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	b087      	sub	sp, #28
 80201b6:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 80201b8:	48bc      	ldr	r0, [pc, #752]	@ (80204ac <lv_slider_event+0x2fc>)
 80201ba:	f7f0 fcdb 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80201be:	2801      	cmp	r0, #1
 80201c0:	d002      	beq.n	80201c8 <lv_slider_event+0x18>
}
 80201c2:	b007      	add	sp, #28
 80201c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80201c8:	4620      	mov	r0, r4
 80201ca:	f7f0 fdab 	bl	8010d24 <lv_event_get_code>
 80201ce:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80201d0:	4620      	mov	r0, r4
 80201d2:	f7f0 fda3 	bl	8010d1c <lv_event_get_target>
 80201d6:	4605      	mov	r5, r0
    lv_slider_mode_t type = lv_slider_get_mode(obj);
 80201d8:	f7ff fee1 	bl	801ff9e <lv_slider_get_mode>
 80201dc:	4607      	mov	r7, r0
    if(code == LV_EVENT_HIT_TEST) {
 80201de:	2e11      	cmp	r6, #17
 80201e0:	d05a      	beq.n	8020298 <lv_slider_event+0xe8>
    else if(code == LV_EVENT_PRESSED) {
 80201e2:	2e01      	cmp	r6, #1
 80201e4:	f000 80a0 	beq.w	8020328 <lv_slider_event+0x178>
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 80201e8:	2e02      	cmp	r6, #2
 80201ea:	f000 8161 	beq.w	80204b0 <lv_slider_event+0x300>
    else if(code == LV_EVENT_RELEASED || code == LV_EVENT_PRESS_LOST) {
 80201ee:	3e03      	subs	r6, #3
 80201f0:	2e26      	cmp	r6, #38	@ 0x26
 80201f2:	d8e6      	bhi.n	80201c2 <lv_slider_event+0x12>
 80201f4:	a301      	add	r3, pc, #4	@ (adr r3, 80201fc <lv_slider_event+0x4c>)
 80201f6:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 80201fa:	bf00      	nop
 80201fc:	080205e3 	.word	0x080205e3
 8020200:	080201c3 	.word	0x080201c3
 8020204:	080201c3 	.word	0x080201c3
 8020208:	080201c3 	.word	0x080201c3
 802020c:	080201c3 	.word	0x080201c3
 8020210:	080205e3 	.word	0x080205e3
 8020214:	080201c3 	.word	0x080201c3
 8020218:	080201c3 	.word	0x080201c3
 802021c:	080201c3 	.word	0x080201c3
 8020220:	080201c3 	.word	0x080201c3
 8020224:	08020777 	.word	0x08020777
 8020228:	08020659 	.word	0x08020659
 802022c:	080201c3 	.word	0x080201c3
 8020230:	080201c3 	.word	0x080201c3
 8020234:	080201c3 	.word	0x080201c3
 8020238:	080201c3 	.word	0x080201c3
 802023c:	08020681 	.word	0x08020681
 8020240:	080201c3 	.word	0x080201c3
 8020244:	080207f5 	.word	0x080207f5
 8020248:	080201c3 	.word	0x080201c3
 802024c:	080201c3 	.word	0x080201c3
 8020250:	080201c3 	.word	0x080201c3
 8020254:	080201c3 	.word	0x080201c3
 8020258:	080201c3 	.word	0x080201c3
 802025c:	080201c3 	.word	0x080201c3
 8020260:	080201c3 	.word	0x080201c3
 8020264:	080201c3 	.word	0x080201c3
 8020268:	080201c3 	.word	0x080201c3
 802026c:	080201c3 	.word	0x080201c3
 8020270:	080201c3 	.word	0x080201c3
 8020274:	080201c3 	.word	0x080201c3
 8020278:	080201c3 	.word	0x080201c3
 802027c:	080201c3 	.word	0x080201c3
 8020280:	080201c3 	.word	0x080201c3
 8020284:	080201c3 	.word	0x080201c3
 8020288:	080201c3 	.word	0x080201c3
 802028c:	080201c3 	.word	0x080201c3
 8020290:	080201c3 	.word	0x080201c3
 8020294:	08020679 	.word	0x08020679
        lv_hit_test_info_t * info = lv_event_get_param(e);
 8020298:	4620      	mov	r0, r4
 802029a:	f7f0 fd47 	bl	8010d2c <lv_event_get_param>
 802029e:	4604      	mov	r4, r0
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 80202a0:	68ab      	ldr	r3, [r5, #8]
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d03e      	beq.n	8020324 <lv_slider_event+0x174>
 80202a6:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
    dest->x1 = src->x1;
 80202aa:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 80202ae:	f8ad 3010 	strh.w	r3, [sp, #16]
    dest->y1 = src->y1;
 80202b2:	f9b5 306a 	ldrsh.w	r3, [r5, #106]	@ 0x6a
 80202b6:	f8ad 3012 	strh.w	r3, [sp, #18]
    dest->x2 = src->x2;
 80202ba:	f9b5 306c 	ldrsh.w	r3, [r5, #108]	@ 0x6c
 80202be:	f8ad 3014 	strh.w	r3, [sp, #20]
    dest->y2 = src->y2;
 80202c2:	f9b5 306e 	ldrsh.w	r3, [r5, #110]	@ 0x6e
 80202c6:	f8ad 3016 	strh.w	r3, [sp, #22]
        lv_area_increase(&a, ext_click_area, ext_click_area);
 80202ca:	4632      	mov	r2, r6
 80202cc:	4631      	mov	r1, r6
 80202ce:	a804      	add	r0, sp, #16
 80202d0:	f7e1 fb72 	bl	80019b8 <lv_area_increase>
        info->res = _lv_area_is_point_on(&a, info->point, 0);
 80202d4:	2200      	movs	r2, #0
 80202d6:	6821      	ldr	r1, [r4, #0]
 80202d8:	a804      	add	r0, sp, #16
 80202da:	f7e1 fbd9 	bl	8001a90 <_lv_area_is_point_on>
 80202de:	7120      	strb	r0, [r4, #4]
        if((info->res == false) && (type == LV_SLIDER_MODE_RANGE)) {
 80202e0:	2800      	cmp	r0, #0
 80202e2:	f47f af6e 	bne.w	80201c2 <lv_slider_event+0x12>
 80202e6:	2f02      	cmp	r7, #2
 80202e8:	f47f af6b 	bne.w	80201c2 <lv_slider_event+0x12>
    dest->x1 = src->x1;
 80202ec:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	@ 0x60
 80202f0:	f8ad 3010 	strh.w	r3, [sp, #16]
    dest->y1 = src->y1;
 80202f4:	f9b5 3062 	ldrsh.w	r3, [r5, #98]	@ 0x62
 80202f8:	f8ad 3012 	strh.w	r3, [sp, #18]
    dest->x2 = src->x2;
 80202fc:	f9b5 3064 	ldrsh.w	r3, [r5, #100]	@ 0x64
 8020300:	f8ad 3014 	strh.w	r3, [sp, #20]
    dest->y2 = src->y2;
 8020304:	f9b5 3066 	ldrsh.w	r3, [r5, #102]	@ 0x66
 8020308:	f8ad 3016 	strh.w	r3, [sp, #22]
            lv_area_increase(&a, ext_click_area, ext_click_area);
 802030c:	4632      	mov	r2, r6
 802030e:	4631      	mov	r1, r6
 8020310:	a804      	add	r0, sp, #16
 8020312:	f7e1 fb51 	bl	80019b8 <lv_area_increase>
            info->res = _lv_area_is_point_on(&a, info->point, 0);
 8020316:	2200      	movs	r2, #0
 8020318:	6821      	ldr	r1, [r4, #0]
 802031a:	a804      	add	r0, sp, #16
 802031c:	f7e1 fbb8 	bl	8001a90 <_lv_area_is_point_on>
 8020320:	7120      	strb	r0, [r4, #4]
 8020322:	e74e      	b.n	80201c2 <lv_slider_event+0x12>
        lv_coord_t ext_click_area = obj->spec_attr ? obj->spec_attr->ext_click_pad : 0;
 8020324:	2600      	movs	r6, #0
 8020326:	e7c0      	b.n	80202aa <lv_slider_event+0xfa>
        lv_obj_invalidate(obj);
 8020328:	4628      	mov	r0, r5
 802032a:	f7f9 fdbc 	bl	8019ea6 <lv_obj_invalidate>
        slider->dragging = true;
 802032e:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 8020332:	f043 0301 	orr.w	r3, r3, #1
 8020336:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
        if(type == LV_SLIDER_MODE_NORMAL || type == LV_SLIDER_MODE_SYMMETRICAL) {
 802033a:	2f01      	cmp	r7, #1
 802033c:	d951      	bls.n	80203e2 <lv_slider_event+0x232>
        else if(type == LV_SLIDER_MODE_RANGE) {
 802033e:	2f02      	cmp	r7, #2
 8020340:	f47f af3f 	bne.w	80201c2 <lv_slider_event+0x12>
            lv_indev_get_point(lv_indev_get_act(), &p);
 8020344:	f7f4 fa14 	bl	8014770 <lv_indev_get_act>
 8020348:	a904      	add	r1, sp, #16
 802034a:	f7f4 fa88 	bl	801485e <lv_indev_get_point>
            bool hor = lv_obj_get_width(obj) >= lv_obj_get_height(obj);
 802034e:	4628      	mov	r0, r5
 8020350:	f7f9 f9be 	bl	80196d0 <lv_obj_get_width>
 8020354:	4606      	mov	r6, r0
 8020356:	4628      	mov	r0, r5
 8020358:	f7f9 f9c1 	bl	80196de <lv_obj_get_height>
 802035c:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802035e:	2216      	movs	r2, #22
 8020360:	2100      	movs	r1, #0
 8020362:	4628      	mov	r0, r5
 8020364:	f7fc f9c6 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8020368:	b2c0      	uxtb	r0, r0
            if(hor) {
 802036a:	42a6      	cmp	r6, r4
 802036c:	db5d      	blt.n	802042a <lv_slider_event+0x27a>
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 802036e:	2801      	cmp	r0, #1
 8020370:	d03b      	beq.n	80203ea <lv_slider_event+0x23a>
 8020372:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020376:	f9b5 306c 	ldrsh.w	r3, [r5, #108]	@ 0x6c
 802037a:	429a      	cmp	r2, r3
 802037c:	dc3b      	bgt.n	80203f6 <lv_slider_event+0x246>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 802037e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020382:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	@ 0x60
 8020386:	429a      	cmp	r2, r3
 8020388:	db41      	blt.n	802040e <lv_slider_event+0x25e>
 802038a:	2801      	cmp	r0, #1
 802038c:	d039      	beq.n	8020402 <lv_slider_event+0x252>
                    dist_left = LV_ABS((slider->left_knob_area.x1 + (slider->left_knob_area.x2 - slider->left_knob_area.x1) / 2) - p.x);
 802038e:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	@ 0x60
 8020392:	f9b5 2064 	ldrsh.w	r2, [r5, #100]	@ 0x64
 8020396:	1ad2      	subs	r2, r2, r3
 8020398:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 802039c:	eb03 0262 	add.w	r2, r3, r2, asr #1
 80203a0:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80203a4:	1a12      	subs	r2, r2, r0
 80203a6:	2a00      	cmp	r2, #0
 80203a8:	bfb8      	it	lt
 80203aa:	4252      	neglt	r2, r2
 80203ac:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.x1 + (slider->right_knob_area.x2 - slider->right_knob_area.x1) / 2) - p.x);
 80203ae:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
 80203b2:	f9b5 106c 	ldrsh.w	r1, [r5, #108]	@ 0x6c
 80203b6:	1ac9      	subs	r1, r1, r3
 80203b8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80203bc:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80203c0:	1a1b      	subs	r3, r3, r0
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	bfb8      	it	lt
 80203c6:	425b      	neglt	r3, r3
 80203c8:	b21b      	sxth	r3, r3
                    if(dist_right < dist_left) {
 80203ca:	429a      	cmp	r2, r3
 80203cc:	dd23      	ble.n	8020416 <lv_slider_event+0x266>
                        slider->value_to_set = &slider->bar.cur_value;
 80203ce:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 80203d2:	672b      	str	r3, [r5, #112]	@ 0x70
                        slider->left_knob_focus = 0;
 80203d4:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 80203d8:	f023 0302 	bic.w	r3, r3, #2
 80203dc:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 80203e0:	e6ef      	b.n	80201c2 <lv_slider_event+0x12>
            slider->value_to_set = &slider->bar.cur_value;
 80203e2:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 80203e6:	672b      	str	r3, [r5, #112]	@ 0x70
 80203e8:	e6eb      	b.n	80201c2 <lv_slider_event+0x12>
                                                                                         p.x < slider->right_knob_area.x1)) {
 80203ea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80203ee:	f9b5 3068 	ldrsh.w	r3, [r5, #104]	@ 0x68
                if((base_dir != LV_BASE_DIR_RTL && p.x > slider->right_knob_area.x2) || (base_dir == LV_BASE_DIR_RTL &&
 80203f2:	429a      	cmp	r2, r3
 80203f4:	da03      	bge.n	80203fe <lv_slider_event+0x24e>
                    slider->value_to_set = &slider->bar.cur_value;
 80203f6:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 80203fa:	672b      	str	r3, [r5, #112]	@ 0x70
 80203fc:	e6e1      	b.n	80201c2 <lv_slider_event+0x12>
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 80203fe:	2801      	cmp	r0, #1
 8020400:	d1bd      	bne.n	802037e <lv_slider_event+0x1ce>
                                                                                             p.x > slider->left_knob_area.x2)) {
 8020402:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020406:	f9b5 3064 	ldrsh.w	r3, [r5, #100]	@ 0x64
                else if((base_dir != LV_BASE_DIR_RTL && p.x < slider->left_knob_area.x1) || (base_dir == LV_BASE_DIR_RTL &&
 802040a:	429a      	cmp	r2, r3
 802040c:	ddbf      	ble.n	802038e <lv_slider_event+0x1de>
                    slider->value_to_set = &slider->bar.start_value;
 802040e:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 8020412:	672b      	str	r3, [r5, #112]	@ 0x70
 8020414:	e6d5      	b.n	80201c2 <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 8020416:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 802041a:	672b      	str	r3, [r5, #112]	@ 0x70
                        slider->left_knob_focus = 1;
 802041c:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 8020420:	f043 0302 	orr.w	r3, r3, #2
 8020424:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 8020428:	e6cb      	b.n	80201c2 <lv_slider_event+0x12>
                if(p.y < slider->right_knob_area.y1) {
 802042a:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 802042e:	f9b5 306a 	ldrsh.w	r3, [r5, #106]	@ 0x6a
 8020432:	4299      	cmp	r1, r3
 8020434:	da03      	bge.n	802043e <lv_slider_event+0x28e>
                    slider->value_to_set = &slider->bar.cur_value;
 8020436:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 802043a:	672b      	str	r3, [r5, #112]	@ 0x70
 802043c:	e6c1      	b.n	80201c2 <lv_slider_event+0x12>
                else if(p.y > slider->left_knob_area.y2) {
 802043e:	f9b5 0066 	ldrsh.w	r0, [r5, #102]	@ 0x66
 8020442:	4281      	cmp	r1, r0
 8020444:	dd03      	ble.n	802044e <lv_slider_event+0x29e>
                    slider->value_to_set = &slider->bar.start_value;
 8020446:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 802044a:	672b      	str	r3, [r5, #112]	@ 0x70
 802044c:	e6b9      	b.n	80201c2 <lv_slider_event+0x12>
                    dist_left = LV_ABS((slider->left_knob_area.y1 + (slider->left_knob_area.y2 - slider->left_knob_area.y1) / 2) - p.y);
 802044e:	f9b5 2062 	ldrsh.w	r2, [r5, #98]	@ 0x62
 8020452:	1a80      	subs	r0, r0, r2
 8020454:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8020458:	eb02 0260 	add.w	r2, r2, r0, asr #1
 802045c:	1a52      	subs	r2, r2, r1
 802045e:	2a00      	cmp	r2, #0
 8020460:	bfb8      	it	lt
 8020462:	4252      	neglt	r2, r2
 8020464:	b212      	sxth	r2, r2
                    dist_right = LV_ABS((slider->right_knob_area.y1 + (slider->right_knob_area.y2 - slider->right_knob_area.y1) / 2) - p.y);
 8020466:	f9b5 006e 	ldrsh.w	r0, [r5, #110]	@ 0x6e
 802046a:	1ac0      	subs	r0, r0, r3
 802046c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8020470:	eb03 0360 	add.w	r3, r3, r0, asr #1
 8020474:	1a5b      	subs	r3, r3, r1
 8020476:	2b00      	cmp	r3, #0
 8020478:	bfb8      	it	lt
 802047a:	425b      	neglt	r3, r3
 802047c:	b21b      	sxth	r3, r3
                    if(dist_right < dist_left) {
 802047e:	429a      	cmp	r2, r3
 8020480:	dd09      	ble.n	8020496 <lv_slider_event+0x2e6>
                        slider->value_to_set = &slider->bar.cur_value;
 8020482:	f105 0324 	add.w	r3, r5, #36	@ 0x24
 8020486:	672b      	str	r3, [r5, #112]	@ 0x70
                        slider->left_knob_focus = 0;
 8020488:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 802048c:	f023 0302 	bic.w	r3, r3, #2
 8020490:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 8020494:	e695      	b.n	80201c2 <lv_slider_event+0x12>
                        slider->value_to_set = &slider->bar.start_value;
 8020496:	f105 0330 	add.w	r3, r5, #48	@ 0x30
 802049a:	672b      	str	r3, [r5, #112]	@ 0x70
                        slider->left_knob_focus = 1;
 802049c:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 80204a0:	f043 0302 	orr.w	r3, r3, #2
 80204a4:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 80204a8:	e68b      	b.n	80201c2 <lv_slider_event+0x12>
 80204aa:	bf00      	nop
 80204ac:	0802deb4 	.word	0x0802deb4
    else if(code == LV_EVENT_PRESSING && slider->value_to_set != NULL) {
 80204b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	f43f ae9b 	beq.w	80201ee <lv_slider_event+0x3e>
        lv_indev_t * indev = lv_indev_get_act();
 80204b8:	f7f4 f95a 	bl	8014770 <lv_indev_get_act>
 80204bc:	4604      	mov	r4, r0
        if(lv_indev_get_type(indev) != LV_INDEV_TYPE_POINTER) return;
 80204be:	f7f4 f95d 	bl	801477c <lv_indev_get_type>
 80204c2:	2801      	cmp	r0, #1
 80204c4:	f47f ae7d 	bne.w	80201c2 <lv_slider_event+0x12>
        lv_indev_get_point(indev, &p);
 80204c8:	a904      	add	r1, sp, #16
 80204ca:	4620      	mov	r0, r4
 80204cc:	f7f4 f9c7 	bl	801485e <lv_indev_get_point>
        const int32_t range = slider->bar.max_value - slider->bar.min_value;
 80204d0:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 80204d2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80204d4:	1ae4      	subs	r4, r4, r3
        if(is_slider_horizontal(obj)) {
 80204d6:	4628      	mov	r0, r5
 80204d8:	f7ff fcec 	bl	801feb4 <is_slider_horizontal>
 80204dc:	2800      	cmp	r0, #0
 80204de:	d053      	beq.n	8020588 <lv_slider_event+0x3d8>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80204e0:	2212      	movs	r2, #18
 80204e2:	2100      	movs	r1, #0
 80204e4:	4628      	mov	r0, r5
 80204e6:	f7fc f905 	bl	801c6f4 <lv_obj_get_style_prop>
 80204ea:	4606      	mov	r6, r0
    return (lv_coord_t)v.num;
 80204ec:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80204ee:	2213      	movs	r2, #19
 80204f0:	2100      	movs	r1, #0
 80204f2:	4628      	mov	r0, r5
 80204f4:	f7fc f8fe 	bl	801c6f4 <lv_obj_get_style_prop>
 80204f8:	4681      	mov	r9, r0
    return (lv_coord_t)v.num;
 80204fa:	fa0f f880 	sxth.w	r8, r0
            const lv_coord_t w = lv_obj_get_width(obj);
 80204fe:	4628      	mov	r0, r5
 8020500:	f7f9 f8e6 	bl	80196d0 <lv_obj_get_width>
            const lv_coord_t indic_w = w - bg_left - bg_right;
 8020504:	1b86      	subs	r6, r0, r6
 8020506:	b2b6      	uxth	r6, r6
 8020508:	eba6 0609 	sub.w	r6, r6, r9
 802050c:	b236      	sxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 802050e:	2216      	movs	r2, #22
 8020510:	2100      	movs	r1, #0
 8020512:	4628      	mov	r0, r5
 8020514:	f7fc f8ee 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8020518:	b2c3      	uxtb	r3, r0
            if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 802051a:	2b01      	cmp	r3, #1
 802051c:	d02c      	beq.n	8020578 <lv_slider_event+0x3c8>
                new_value = p.x - (obj->coords.x1 + bg_left);
 802051e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8020522:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
 8020526:	441f      	add	r7, r3
 8020528:	1bd2      	subs	r2, r2, r7
            new_value = (new_value * range + indic_w / 2) / indic_w;
 802052a:	eb06 73d6 	add.w	r3, r6, r6, lsr #31
 802052e:	105b      	asrs	r3, r3, #1
 8020530:	fb04 3302 	mla	r3, r4, r2, r3
 8020534:	fb93 f3f6 	sdiv	r3, r3, r6
            new_value += slider->bar.min_value;
 8020538:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 802053a:	4419      	add	r1, r3
        int32_t real_max_value = slider->bar.max_value;
 802053c:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
        int32_t real_min_value = slider->bar.min_value;
 802053e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
        if(slider->value_to_set == &slider->bar.start_value) {
 8020540:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8020542:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 8020546:	4293      	cmp	r3, r2
 8020548:	d044      	beq.n	80205d4 <lv_slider_event+0x424>
            real_min_value = slider->bar.start_value;
 802054a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
        new_value = LV_CLAMP(real_min_value, new_value, real_max_value);
 802054c:	42a1      	cmp	r1, r4
 802054e:	bfa8      	it	ge
 8020550:	4621      	movge	r1, r4
 8020552:	4281      	cmp	r1, r0
 8020554:	bfb8      	it	lt
 8020556:	4601      	movlt	r1, r0
        if(*slider->value_to_set != new_value) {
 8020558:	6818      	ldr	r0, [r3, #0]
 802055a:	4288      	cmp	r0, r1
 802055c:	f43f ae31 	beq.w	80201c2 <lv_slider_event+0x12>
            if(slider->value_to_set == &slider->bar.start_value) {
 8020560:	4293      	cmp	r3, r2
 8020562:	d039      	beq.n	80205d8 <lv_slider_event+0x428>
                lv_bar_set_value(obj, new_value, LV_ANIM_ON);
 8020564:	2201      	movs	r2, #1
 8020566:	4628      	mov	r0, r5
 8020568:	f7e2 f9be 	bl	80028e8 <lv_bar_set_value>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802056c:	2200      	movs	r2, #0
 802056e:	211c      	movs	r1, #28
 8020570:	4628      	mov	r0, r5
 8020572:	f7f0 fba9 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8020576:	e624      	b.n	80201c2 <lv_slider_event+0x12>
                new_value = (obj->coords.x2 - bg_right) - p.x;
 8020578:	f9b5 2018 	ldrsh.w	r2, [r5, #24]
 802057c:	eba2 0208 	sub.w	r2, r2, r8
 8020580:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020584:	1ad2      	subs	r2, r2, r3
 8020586:	e7d0      	b.n	802052a <lv_slider_event+0x37a>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8020588:	2210      	movs	r2, #16
 802058a:	2100      	movs	r1, #0
 802058c:	4628      	mov	r0, r5
 802058e:	f7fc f8b1 	bl	801c6f4 <lv_obj_get_style_prop>
 8020592:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8020594:	2211      	movs	r2, #17
 8020596:	2100      	movs	r1, #0
 8020598:	4628      	mov	r0, r5
 802059a:	f7fc f8ab 	bl	801c6f4 <lv_obj_get_style_prop>
 802059e:	4607      	mov	r7, r0
    return (lv_coord_t)v.num;
 80205a0:	b206      	sxth	r6, r0
            const lv_coord_t h = lv_obj_get_height(obj);
 80205a2:	4628      	mov	r0, r5
 80205a4:	f7f9 f89b 	bl	80196de <lv_obj_get_height>
            const lv_coord_t indic_h = h - bg_bottom - bg_top;
 80205a8:	1bc3      	subs	r3, r0, r7
 80205aa:	b29b      	uxth	r3, r3
 80205ac:	eba3 0308 	sub.w	r3, r3, r8
 80205b0:	b219      	sxth	r1, r3
            new_value = p.y - (obj->coords.y2 + bg_bottom);
 80205b2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80205b6:	f9b5 201a 	ldrsh.w	r2, [r5, #26]
 80205ba:	4432      	add	r2, r6
            new_value = (-new_value * range + indic_h / 2) / indic_h;
 80205bc:	1a12      	subs	r2, r2, r0
 80205be:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80205c2:	440b      	add	r3, r1
 80205c4:	105b      	asrs	r3, r3, #1
 80205c6:	fb04 3302 	mla	r3, r4, r2, r3
 80205ca:	fb93 f3f1 	sdiv	r3, r3, r1
            new_value += slider->bar.min_value;
 80205ce:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80205d0:	4419      	add	r1, r3
 80205d2:	e7b3      	b.n	802053c <lv_slider_event+0x38c>
            real_max_value = slider->bar.cur_value;
 80205d4:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80205d6:	e7b9      	b.n	802054c <lv_slider_event+0x39c>
                lv_bar_set_start_value(obj, new_value, LV_ANIM_ON);
 80205d8:	2201      	movs	r2, #1
 80205da:	4628      	mov	r0, r5
 80205dc:	f7e2 f9ca 	bl	8002974 <lv_bar_set_start_value>
 80205e0:	e7c4      	b.n	802056c <lv_slider_event+0x3bc>
        slider->dragging = false;
 80205e2:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 80205e6:	f023 0301 	bic.w	r3, r3, #1
 80205ea:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
        slider->value_to_set = NULL;
 80205ee:	2300      	movs	r3, #0
 80205f0:	672b      	str	r3, [r5, #112]	@ 0x70
        lv_obj_invalidate(obj);
 80205f2:	4628      	mov	r0, r5
 80205f4:	f7f9 fc57 	bl	8019ea6 <lv_obj_invalidate>
        lv_group_t * g   = lv_obj_get_group(obj);
 80205f8:	4628      	mov	r0, r5
 80205fa:	f7f7 ff5c 	bl	80184b6 <lv_obj_get_group>
 80205fe:	4606      	mov	r6, r0
        bool editing     = lv_group_get_editing(g);
 8020600:	f7f2 fd5a 	bl	80130b8 <lv_group_get_editing>
 8020604:	4604      	mov	r4, r0
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8020606:	f7f4 f8b3 	bl	8014770 <lv_indev_get_act>
 802060a:	f7f4 f8b7 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 802060e:	2804      	cmp	r0, #4
 8020610:	f47f add7 	bne.w	80201c2 <lv_slider_event+0x12>
            if(editing) {
 8020614:	2c00      	cmp	r4, #0
 8020616:	f43f add4 	beq.w	80201c2 <lv_slider_event+0x12>
                if(lv_slider_get_mode(obj) == LV_SLIDER_MODE_RANGE) {
 802061a:	4628      	mov	r0, r5
 802061c:	f7ff fcbf 	bl	801ff9e <lv_slider_get_mode>
 8020620:	2802      	cmp	r0, #2
 8020622:	d114      	bne.n	802064e <lv_slider_event+0x49e>
                    if(slider->left_knob_focus == 0) slider->left_knob_focus = 1;
 8020624:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 8020628:	f013 0f02 	tst.w	r3, #2
 802062c:	d104      	bne.n	8020638 <lv_slider_event+0x488>
 802062e:	f043 0302 	orr.w	r3, r3, #2
 8020632:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 8020636:	e5c4      	b.n	80201c2 <lv_slider_event+0x12>
                        slider->left_knob_focus = 0;
 8020638:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 802063c:	f023 0302 	bic.w	r3, r3, #2
 8020640:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
                        lv_group_set_editing(g, false);
 8020644:	2100      	movs	r1, #0
 8020646:	4630      	mov	r0, r6
 8020648:	f7f2 fd14 	bl	8013074 <lv_group_set_editing>
 802064c:	e5b9      	b.n	80201c2 <lv_slider_event+0x12>
                    lv_group_set_editing(g, false);
 802064e:	2100      	movs	r1, #0
 8020650:	4630      	mov	r0, r6
 8020652:	f7f2 fd0f 	bl	8013074 <lv_group_set_editing>
 8020656:	e5b4      	b.n	80201c2 <lv_slider_event+0x12>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8020658:	f7f4 f88a 	bl	8014770 <lv_indev_get_act>
 802065c:	f7f4 f88e 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_ENCODER || indev_type == LV_INDEV_TYPE_KEYPAD) {
 8020660:	2804      	cmp	r0, #4
 8020662:	d002      	beq.n	802066a <lv_slider_event+0x4ba>
 8020664:	2802      	cmp	r0, #2
 8020666:	f47f adac 	bne.w	80201c2 <lv_slider_event+0x12>
            slider->left_knob_focus = 0;
 802066a:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 802066e:	f023 0302 	bic.w	r3, r3, #2
 8020672:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
 8020676:	e5a4      	b.n	80201c2 <lv_slider_event+0x12>
        lv_obj_refresh_ext_draw_size(obj);
 8020678:	4628      	mov	r0, r5
 802067a:	f7f8 fe37 	bl	80192ec <lv_obj_refresh_ext_draw_size>
 802067e:	e5a0      	b.n	80201c2 <lv_slider_event+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8020680:	2212      	movs	r2, #18
 8020682:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8020686:	4628      	mov	r0, r5
 8020688:	f7fc f834 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802068c:	b203      	sxth	r3, r0
 802068e:	9301      	str	r3, [sp, #4]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8020690:	2213      	movs	r2, #19
 8020692:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8020696:	4628      	mov	r0, r5
 8020698:	f7fc f82c 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802069c:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802069e:	2210      	movs	r2, #16
 80206a0:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80206a4:	4628      	mov	r0, r5
 80206a6:	f7fc f825 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80206aa:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80206ae:	2211      	movs	r2, #17
 80206b0:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80206b4:	4628      	mov	r0, r5
 80206b6:	f7fc f81d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80206ba:	b206      	sxth	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_ZOOM);
 80206bc:	226d      	movs	r2, #109	@ 0x6d
 80206be:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80206c2:	4628      	mov	r0, r5
 80206c4:	f7fc f816 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80206c8:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_WIDTH);
 80206cc:	2269      	movs	r2, #105	@ 0x69
 80206ce:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80206d2:	4628      	mov	r0, r5
 80206d4:	f7fc f80e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80206d8:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TRANSFORM_HEIGHT);
 80206dc:	226a      	movs	r2, #106	@ 0x6a
 80206de:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80206e2:	4628      	mov	r0, r5
 80206e4:	f7fc f806 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80206e8:	fa0f f880 	sxth.w	r8, r0
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 80206ec:	4628      	mov	r0, r5
 80206ee:	f7f8 ffef 	bl	80196d0 <lv_obj_get_width>
 80206f2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80206f6:	9302      	str	r3, [sp, #8]
 80206f8:	eb00 0949 	add.w	r9, r0, r9, lsl #1
 80206fc:	4628      	mov	r0, r5
 80206fe:	f7f8 ffee 	bl	80196de <lv_obj_get_height>
 8020702:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8020706:	9203      	str	r2, [sp, #12]
 8020708:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 802070c:	4581      	cmp	r9, r0
 802070e:	da2a      	bge.n	8020766 <lv_slider_event+0x5b6>
 8020710:	4628      	mov	r0, r5
 8020712:	f7f8 ffdd 	bl	80196d0 <lv_obj_get_width>
 8020716:	9b02      	ldr	r3, [sp, #8]
 8020718:	4403      	add	r3, r0
 802071a:	f343 034f 	sbfx	r3, r3, #1, #16
        knob_size = (knob_size * zoom) >> 8;
 802071e:	fb0b f303 	mul.w	r3, fp, r3
        knob_size += LV_MAX(LV_MAX(knob_left, knob_right), LV_MAX(knob_bottom, knob_top));
 8020722:	4556      	cmp	r6, sl
 8020724:	bfb8      	it	lt
 8020726:	4656      	movlt	r6, sl
 8020728:	9a01      	ldr	r2, [sp, #4]
 802072a:	4297      	cmp	r7, r2
 802072c:	bfb8      	it	lt
 802072e:	4617      	movlt	r7, r2
 8020730:	42be      	cmp	r6, r7
 8020732:	bfb8      	it	lt
 8020734:	463e      	movlt	r6, r7
 8020736:	b2b6      	uxth	r6, r6
 8020738:	eb06 2623 	add.w	r6, r6, r3, asr #8
 802073c:	b2b6      	uxth	r6, r6
        knob_size += 2;         /*For rounding error*/
 802073e:	3602      	adds	r6, #2
 8020740:	b2b6      	uxth	r6, r6
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 8020742:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8020746:	4628      	mov	r0, r5
 8020748:	f7f8 fd55 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 802074c:	fa16 f580 	uxtah	r5, r6, r0
 8020750:	b22d      	sxth	r5, r5
        lv_coord_t * s = lv_event_get_param(e);
 8020752:	4620      	mov	r0, r4
 8020754:	f7f0 faea 	bl	8010d2c <lv_event_get_param>
        *s  = LV_MAX(*s, knob_size);
 8020758:	f9b0 3000 	ldrsh.w	r3, [r0]
 802075c:	42ab      	cmp	r3, r5
 802075e:	bfb8      	it	lt
 8020760:	462b      	movlt	r3, r5
 8020762:	8003      	strh	r3, [r0, #0]
 8020764:	e52d      	b.n	80201c2 <lv_slider_event+0x12>
        lv_coord_t knob_size = LV_MIN(lv_obj_get_width(obj) + 2 * trans_w, lv_obj_get_height(obj) + 2 * trans_h) >> 1;
 8020766:	4628      	mov	r0, r5
 8020768:	f7f8 ffb9 	bl	80196de <lv_obj_get_height>
 802076c:	9b03      	ldr	r3, [sp, #12]
 802076e:	4403      	add	r3, r0
 8020770:	f343 034f 	sbfx	r3, r3, #1, #16
 8020774:	e7d3      	b.n	802071e <lv_slider_event+0x56e>
        char c = *((char *)lv_event_get_param(e));
 8020776:	4620      	mov	r0, r4
 8020778:	f7f0 fad8 	bl	8010d2c <lv_event_get_param>
 802077c:	7803      	ldrb	r3, [r0, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
 802077e:	3b11      	subs	r3, #17
 8020780:	2b03      	cmp	r3, #3
 8020782:	f63f ad1e 	bhi.w	80201c2 <lv_slider_event+0x12>
 8020786:	e8df f003 	tbb	[pc, r3]
 802078a:	1e02      	.short	0x1e02
 802078c:	1e02      	.short	0x1e02
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) + 1, LV_ANIM_ON);
 802078e:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 8020792:	f013 0f02 	tst.w	r3, #2
 8020796:	d10d      	bne.n	80207b4 <lv_slider_event+0x604>
    return lv_bar_get_value(obj);
 8020798:	4628      	mov	r0, r5
 802079a:	f7e2 f90d 	bl	80029b8 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 802079e:	2201      	movs	r2, #1
 80207a0:	1881      	adds	r1, r0, r2
 80207a2:	4628      	mov	r0, r5
 80207a4:	f7e2 f8a0 	bl	80028e8 <lv_bar_set_value>
        res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80207a8:	2200      	movs	r2, #0
 80207aa:	211c      	movs	r1, #28
 80207ac:	4628      	mov	r0, r5
 80207ae:	f7f0 fa8b 	bl	8010cc8 <lv_event_send>
        if(res != LV_RES_OK) return;
 80207b2:	e506      	b.n	80201c2 <lv_slider_event+0x12>
    return lv_bar_get_start_value(obj);
 80207b4:	4628      	mov	r0, r5
 80207b6:	f7e2 f907 	bl	80029c8 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 80207ba:	2201      	movs	r2, #1
 80207bc:	1881      	adds	r1, r0, r2
 80207be:	4628      	mov	r0, r5
 80207c0:	f7e2 f8d8 	bl	8002974 <lv_bar_set_start_value>
}
 80207c4:	e7f0      	b.n	80207a8 <lv_slider_event+0x5f8>
            if(!slider->left_knob_focus) lv_slider_set_value(obj, lv_slider_get_value(obj) - 1, LV_ANIM_ON);
 80207c6:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 80207ca:	f013 0f02 	tst.w	r3, #2
 80207ce:	d108      	bne.n	80207e2 <lv_slider_event+0x632>
    return lv_bar_get_value(obj);
 80207d0:	4628      	mov	r0, r5
 80207d2:	f7e2 f8f1 	bl	80029b8 <lv_bar_get_value>
    lv_bar_set_value(obj, value, anim);
 80207d6:	2201      	movs	r2, #1
 80207d8:	1e41      	subs	r1, r0, #1
 80207da:	4628      	mov	r0, r5
 80207dc:	f7e2 f884 	bl	80028e8 <lv_bar_set_value>
}
 80207e0:	e7e2      	b.n	80207a8 <lv_slider_event+0x5f8>
    return lv_bar_get_start_value(obj);
 80207e2:	4628      	mov	r0, r5
 80207e4:	f7e2 f8f0 	bl	80029c8 <lv_bar_get_start_value>
    lv_bar_set_start_value(obj, value, anim);
 80207e8:	2201      	movs	r2, #1
 80207ea:	1e41      	subs	r1, r0, #1
 80207ec:	4628      	mov	r0, r5
 80207ee:	f7e2 f8c1 	bl	8002974 <lv_bar_set_start_value>
}
 80207f2:	e7d9      	b.n	80207a8 <lv_slider_event+0x5f8>
        draw_knob(e);
 80207f4:	4620      	mov	r0, r4
 80207f6:	f7ff fbdb 	bl	801ffb0 <draw_knob>
 80207fa:	e4e2      	b.n	80201c2 <lv_slider_event+0x12>

080207fc <lv_slider_constructor>:
{
 80207fc:	b538      	push	{r3, r4, r5, lr}
 80207fe:	460c      	mov	r4, r1
    slider->value_to_set = NULL;
 8020800:	2500      	movs	r5, #0
 8020802:	670d      	str	r5, [r1, #112]	@ 0x70
    slider->dragging = 0U;
 8020804:	f891 3074 	ldrb.w	r3, [r1, #116]	@ 0x74
 8020808:	f365 0300 	bfi	r3, r5, #0, #1
 802080c:	f881 3074 	strb.w	r3, [r1, #116]	@ 0x74
    slider->left_knob_focus = 0U;
 8020810:	b2db      	uxtb	r3, r3
 8020812:	f365 0341 	bfi	r3, r5, #1, #1
 8020816:	f881 3074 	strb.w	r3, [r1, #116]	@ 0x74
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 802081a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 802081e:	4620      	mov	r0, r4
 8020820:	f7f7 fdde 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8020824:	2110      	movs	r1, #16
 8020826:	4620      	mov	r0, r4
 8020828:	f7f7 fdda 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 802082c:	4628      	mov	r0, r5
 802082e:	f7f2 fd5b 	bl	80132e8 <lv_disp_get_dpi>
 8020832:	281d      	cmp	r0, #29
 8020834:	dc04      	bgt.n	8020840 <lv_slider_constructor+0x44>
 8020836:	2101      	movs	r1, #1
 8020838:	4620      	mov	r0, r4
 802083a:	f7f9 fd85 	bl	801a348 <lv_obj_set_ext_click_area>
}
 802083e:	bd38      	pop	{r3, r4, r5, pc}
    lv_obj_set_ext_click_area(obj, LV_DPX(8));
 8020840:	4628      	mov	r0, r5
 8020842:	f7f2 fd51 	bl	80132e8 <lv_disp_get_dpi>
 8020846:	300a      	adds	r0, #10
 8020848:	4b03      	ldr	r3, [pc, #12]	@ (8020858 <lv_slider_constructor+0x5c>)
 802084a:	fb83 2300 	smull	r2, r3, r3, r0
 802084e:	17c1      	asrs	r1, r0, #31
 8020850:	ebc1 01e3 	rsb	r1, r1, r3, asr #3
 8020854:	b209      	sxth	r1, r1
 8020856:	e7ef      	b.n	8020838 <lv_slider_constructor+0x3c>
 8020858:	66666667 	.word	0x66666667

0802085c <lv_spinbox_updatevalue>:
        }
    }
}

static void lv_spinbox_updatevalue(lv_obj_t * obj)
{
 802085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802085e:	b08b      	sub	sp, #44	@ 0x2c
 8020860:	4604      	mov	r4, r0
    lv_spinbox_t * spinbox = (lv_spinbox_t *)obj;

    char buf[LV_SPINBOX_MAX_DIGIT_COUNT + 8];
    lv_memset_00(buf, sizeof(buf));
 8020862:	2112      	movs	r1, #18
 8020864:	a805      	add	r0, sp, #20
 8020866:	f7f6 fa2d 	bl	8016cc4 <lv_memset_00>
    char * buf_p = buf;
    uint8_t cur_shift_left = 0;

    if(spinbox->range_min < 0) {  // hide sign if there are only positive values
 802086a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 802086c:	2b00      	cmp	r3, #0
 802086e:	db23      	blt.n	80208b8 <lv_spinbox_updatevalue+0x5c>
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
        buf_p++;
    }
    else {
        /*Cursor need shift to left*/
        cur_shift_left++;
 8020870:	2601      	movs	r6, #1
    char * buf_p = buf;
 8020872:	af05      	add	r7, sp, #20
    }

    int32_t i;
    char digits[LV_SPINBOX_MAX_DIGIT_COUNT + 4];
    /*Convert the numbers to string (the sign is already handled so always covert positive number)*/
    lv_snprintf(digits, sizeof(digits), "%" LV_PRId32, LV_ABS(spinbox->value));
 8020874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020876:	2b00      	cmp	r3, #0
 8020878:	bfb8      	it	lt
 802087a:	425b      	neglt	r3, r3
 802087c:	4a3f      	ldr	r2, [pc, #252]	@ (802097c <lv_spinbox_updatevalue+0x120>)
 802087e:	210e      	movs	r1, #14
 8020880:	a801      	add	r0, sp, #4
 8020882:	f7fd fabf 	bl	801de04 <lv_snprintf>

    /*Add leading zeros*/
    int lz_cnt = spinbox->digit_count - (int)strlen(digits);
 8020886:	f894 5074 	ldrb.w	r5, [r4, #116]	@ 0x74
 802088a:	f005 050f 	and.w	r5, r5, #15
 802088e:	a801      	add	r0, sp, #4
 8020890:	f7df fc84 	bl	800019c <strlen>
 8020894:	4603      	mov	r3, r0
 8020896:	1a28      	subs	r0, r5, r0
    if(lz_cnt > 0) {
 8020898:	2800      	cmp	r0, #0
 802089a:	dd24      	ble.n	80208e6 <lv_spinbox_updatevalue+0x8a>
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 802089c:	2b00      	cmp	r3, #0
 802089e:	db17      	blt.n	80208d0 <lv_spinbox_updatevalue+0x74>
            digits[i + lz_cnt] = digits[i];
 80208a0:	181a      	adds	r2, r3, r0
 80208a2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80208a6:	4469      	add	r1, sp
 80208a8:	f811 1c24 	ldrb.w	r1, [r1, #-36]
 80208ac:	3228      	adds	r2, #40	@ 0x28
 80208ae:	446a      	add	r2, sp
 80208b0:	f802 1c24 	strb.w	r1, [r2, #-36]
        for(i = (uint16_t)strlen(digits); i >= 0; i--) {
 80208b4:	3b01      	subs	r3, #1
 80208b6:	e7f1      	b.n	802089c <lv_spinbox_updatevalue+0x40>
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 80208b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	db06      	blt.n	80208cc <lv_spinbox_updatevalue+0x70>
 80208be:	232b      	movs	r3, #43	@ 0x2b
 80208c0:	f88d 3014 	strb.w	r3, [sp, #20]
    uint8_t cur_shift_left = 0;
 80208c4:	2600      	movs	r6, #0
        buf_p++;
 80208c6:	f10d 0715 	add.w	r7, sp, #21
 80208ca:	e7d3      	b.n	8020874 <lv_spinbox_updatevalue+0x18>
        (*buf_p) = spinbox->value >= 0 ? '+' : '-';
 80208cc:	232d      	movs	r3, #45	@ 0x2d
 80208ce:	e7f7      	b.n	80208c0 <lv_spinbox_updatevalue+0x64>
        }
        for(i = 0; i < lz_cnt; i++) {
 80208d0:	2300      	movs	r3, #0
 80208d2:	4283      	cmp	r3, r0
 80208d4:	da07      	bge.n	80208e6 <lv_spinbox_updatevalue+0x8a>
            digits[i] = '0';
 80208d6:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80208da:	446a      	add	r2, sp
 80208dc:	2130      	movs	r1, #48	@ 0x30
 80208de:	f802 1c24 	strb.w	r1, [r2, #-36]
        for(i = 0; i < lz_cnt; i++) {
 80208e2:	3301      	adds	r3, #1
 80208e4:	e7f5      	b.n	80208d2 <lv_spinbox_updatevalue+0x76>
        }
    }

    int32_t intDigits;
    intDigits = (spinbox->dec_point_pos == 0) ? spinbox->digit_count : spinbox->dec_point_pos;
 80208e6:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 80208ea:	2b0f      	cmp	r3, #15
 80208ec:	d900      	bls.n	80208f0 <lv_spinbox_updatevalue+0x94>
 80208ee:	091d      	lsrs	r5, r3, #4

    /*Add the decimal part*/
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80208f0:	2300      	movs	r3, #0
 80208f2:	e002      	b.n	80208fa <lv_spinbox_updatevalue+0x9e>
        (*buf_p) = digits[i];
 80208f4:	f807 2b01 	strb.w	r2, [r7], #1
    for(i = 0; i < intDigits && digits[i] != '\0'; i++) {
 80208f8:	3301      	adds	r3, #1
 80208fa:	42ab      	cmp	r3, r5
 80208fc:	da06      	bge.n	802090c <lv_spinbox_updatevalue+0xb0>
 80208fe:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8020902:	446a      	add	r2, sp
 8020904:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8020908:	2a00      	cmp	r2, #0
 802090a:	d1f3      	bne.n	80208f4 <lv_spinbox_updatevalue+0x98>
        buf_p++;
    }

    if(spinbox->dec_point_pos != 0) {
 802090c:	f894 2074 	ldrb.w	r2, [r4, #116]	@ 0x74
 8020910:	2a0f      	cmp	r2, #15
 8020912:	d913      	bls.n	802093c <lv_spinbox_updatevalue+0xe0>
        /*Insert the decimal point*/
        (*buf_p) = '.';
 8020914:	222e      	movs	r2, #46	@ 0x2e
 8020916:	f807 2b01 	strb.w	r2, [r7], #1
        buf_p++;

        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 802091a:	e002      	b.n	8020922 <lv_spinbox_updatevalue+0xc6>
            (*buf_p) = digits[i];
 802091c:	f807 2b01 	strb.w	r2, [r7], #1
        for(/*Leave i*/; i < spinbox->digit_count && digits[i] != '\0'; i++) {
 8020920:	3301      	adds	r3, #1
 8020922:	f894 2074 	ldrb.w	r2, [r4, #116]	@ 0x74
 8020926:	f002 020f 	and.w	r2, r2, #15
 802092a:	429a      	cmp	r2, r3
 802092c:	dd06      	ble.n	802093c <lv_spinbox_updatevalue+0xe0>
 802092e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8020932:	446a      	add	r2, sp
 8020934:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8020938:	2a00      	cmp	r2, #0
 802093a:	d1ef      	bne.n	802091c <lv_spinbox_updatevalue+0xc0>
            buf_p++;
        }
    }

    /*Refresh the text*/
    lv_textarea_set_text(obj, (char *)buf);
 802093c:	a905      	add	r1, sp, #20
 802093e:	4620      	mov	r0, r4
 8020940:	f002 fe74 	bl	802362c <lv_textarea_set_text>

    /*Set the cursor position*/
    int32_t step    = spinbox->step;
 8020944:	6f23      	ldr	r3, [r4, #112]	@ 0x70
    uint8_t cur_pos = (uint8_t)spinbox->digit_count;
 8020946:	f894 1074 	ldrb.w	r1, [r4, #116]	@ 0x74
 802094a:	f001 010f 	and.w	r1, r1, #15
    while(step >= 10) {
 802094e:	e007      	b.n	8020960 <lv_spinbox_updatevalue+0x104>
        step /= 10;
 8020950:	4a0b      	ldr	r2, [pc, #44]	@ (8020980 <lv_spinbox_updatevalue+0x124>)
 8020952:	fb82 0203 	smull	r0, r2, r2, r3
 8020956:	17db      	asrs	r3, r3, #31
 8020958:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
        cur_pos--;
 802095c:	3901      	subs	r1, #1
 802095e:	b2c9      	uxtb	r1, r1
    while(step >= 10) {
 8020960:	2b09      	cmp	r3, #9
 8020962:	dcf5      	bgt.n	8020950 <lv_spinbox_updatevalue+0xf4>
    }

    if(cur_pos > intDigits) cur_pos++; /*Skip the decimal point*/
 8020964:	42a9      	cmp	r1, r5
 8020966:	dd01      	ble.n	802096c <lv_spinbox_updatevalue+0x110>
 8020968:	3101      	adds	r1, #1
 802096a:	b2c9      	uxtb	r1, r1

    cur_pos -= cur_shift_left;
 802096c:	1b89      	subs	r1, r1, r6

    lv_textarea_set_cursor_pos(obj, cur_pos);
 802096e:	b2c9      	uxtb	r1, r1
 8020970:	4620      	mov	r0, r4
 8020972:	f002 faa5 	bl	8022ec0 <lv_textarea_set_cursor_pos>
}
 8020976:	b00b      	add	sp, #44	@ 0x2c
 8020978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802097a:	bf00      	nop
 802097c:	08029c7c 	.word	0x08029c7c
 8020980:	66666667 	.word	0x66666667

08020984 <lv_spinbox_constructor>:
{
 8020984:	b538      	push	{r3, r4, r5, lr}
 8020986:	460c      	mov	r4, r1
    spinbox->value              = 0;
 8020988:	2300      	movs	r3, #0
 802098a:	664b      	str	r3, [r1, #100]	@ 0x64
    spinbox->dec_point_pos      = 0;
 802098c:	f891 2074 	ldrb.w	r2, [r1, #116]	@ 0x74
 8020990:	f363 1207 	bfi	r2, r3, #4, #4
 8020994:	f881 2074 	strb.w	r2, [r1, #116]	@ 0x74
    spinbox->digit_count        = 5;
 8020998:	b2d2      	uxtb	r2, r2
 802099a:	2105      	movs	r1, #5
 802099c:	f361 0203 	bfi	r2, r1, #0, #4
 80209a0:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
    spinbox->step               = 1;
 80209a4:	2501      	movs	r5, #1
 80209a6:	6725      	str	r5, [r4, #112]	@ 0x70
    spinbox->range_max          = 99999;
 80209a8:	4a0d      	ldr	r2, [pc, #52]	@ (80209e0 <lv_spinbox_constructor+0x5c>)
 80209aa:	66a2      	str	r2, [r4, #104]	@ 0x68
    spinbox->range_min          = -99999;
 80209ac:	4a0d      	ldr	r2, [pc, #52]	@ (80209e4 <lv_spinbox_constructor+0x60>)
 80209ae:	66e2      	str	r2, [r4, #108]	@ 0x6c
    spinbox->rollover           = false;
 80209b0:	f894 2075 	ldrb.w	r2, [r4, #117]	@ 0x75
 80209b4:	f363 0200 	bfi	r2, r3, #0, #1
 80209b8:	f884 2075 	strb.w	r2, [r4, #117]	@ 0x75
    spinbox->digit_step_dir     = LV_DIR_RIGHT;
 80209bc:	b2d3      	uxtb	r3, r2
 80209be:	2202      	movs	r2, #2
 80209c0:	f362 0342 	bfi	r3, r2, #1, #2
 80209c4:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
    lv_textarea_set_one_line(obj, true);
 80209c8:	4629      	mov	r1, r5
 80209ca:	4620      	mov	r0, r4
 80209cc:	f002 f8bc 	bl	8022b48 <lv_textarea_set_one_line>
    lv_textarea_set_cursor_click_pos(obj, true);
 80209d0:	4629      	mov	r1, r5
 80209d2:	4620      	mov	r0, r4
 80209d4:	f002 f8b1 	bl	8022b3a <lv_textarea_set_cursor_click_pos>
    lv_spinbox_updatevalue(obj);
 80209d8:	4620      	mov	r0, r4
 80209da:	f7ff ff3f 	bl	802085c <lv_spinbox_updatevalue>
}
 80209de:	bd38      	pop	{r3, r4, r5, pc}
 80209e0:	0001869f 	.word	0x0001869f
 80209e4:	fffe7961 	.word	0xfffe7961

080209e8 <lv_spinbox_step_next>:
{
 80209e8:	b508      	push	{r3, lr}
    int32_t new_step = spinbox->step / 10;
 80209ea:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80209ec:	4a07      	ldr	r2, [pc, #28]	@ (8020a0c <lv_spinbox_step_next+0x24>)
 80209ee:	fb82 1203 	smull	r1, r2, r2, r3
 80209f2:	17d9      	asrs	r1, r3, #31
 80209f4:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
    if((new_step) > 0)
 80209f8:	2b09      	cmp	r3, #9
 80209fa:	dd03      	ble.n	8020a04 <lv_spinbox_step_next+0x1c>
        spinbox->step = new_step;
 80209fc:	6701      	str	r1, [r0, #112]	@ 0x70
    lv_spinbox_updatevalue(obj);
 80209fe:	f7ff ff2d 	bl	802085c <lv_spinbox_updatevalue>
}
 8020a02:	bd08      	pop	{r3, pc}
        spinbox->step = 1;
 8020a04:	2301      	movs	r3, #1
 8020a06:	6703      	str	r3, [r0, #112]	@ 0x70
 8020a08:	e7f9      	b.n	80209fe <lv_spinbox_step_next+0x16>
 8020a0a:	bf00      	nop
 8020a0c:	66666667 	.word	0x66666667

08020a10 <lv_spinbox_step_prev>:
{
 8020a10:	b508      	push	{r3, lr}
    step_limit       = LV_MAX(spinbox->range_max, (spinbox->range_min < 0 ? (-spinbox->range_min) : spinbox->range_min));
 8020a12:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	bfb8      	it	lt
 8020a18:	425b      	neglt	r3, r3
 8020a1a:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8020a1c:	4293      	cmp	r3, r2
 8020a1e:	bfb8      	it	lt
 8020a20:	4613      	movlt	r3, r2
    int32_t new_step = spinbox->step * 10;
 8020a22:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8020a24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    if(new_step <= step_limit) spinbox->step = new_step;
 8020a28:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8020a2c:	db01      	blt.n	8020a32 <lv_spinbox_step_prev+0x22>
 8020a2e:	0051      	lsls	r1, r2, #1
 8020a30:	6701      	str	r1, [r0, #112]	@ 0x70
    lv_spinbox_updatevalue(obj);
 8020a32:	f7ff ff13 	bl	802085c <lv_spinbox_updatevalue>
}
 8020a36:	bd08      	pop	{r3, pc}

08020a38 <lv_spinbox_increment>:
{
 8020a38:	b508      	push	{r3, lr}
    if(spinbox->value + spinbox->step <= spinbox->range_max) {
 8020a3a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8020a3c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8020a3e:	eb02 0c03 	add.w	ip, r2, r3
 8020a42:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8020a44:	458c      	cmp	ip, r1
 8020a46:	dc0d      	bgt.n	8020a64 <lv_spinbox_increment+0x2c>
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8020a48:	f1bc 0f00 	cmp.w	ip, #0
 8020a4c:	dd01      	ble.n	8020a52 <lv_spinbox_increment+0x1a>
 8020a4e:	2a00      	cmp	r2, #0
 8020a50:	db05      	blt.n	8020a5e <lv_spinbox_increment+0x26>
        spinbox->value += spinbox->step;
 8020a52:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8020a54:	4413      	add	r3, r2
 8020a56:	6643      	str	r3, [r0, #100]	@ 0x64
    lv_spinbox_updatevalue(obj);
 8020a58:	f7ff ff00 	bl	802085c <lv_spinbox_updatevalue>
}
 8020a5c:	bd08      	pop	{r3, pc}
        if((spinbox->value + spinbox->step) > 0 && spinbox->value < 0) spinbox->value = -spinbox->value;
 8020a5e:	4252      	negs	r2, r2
 8020a60:	6642      	str	r2, [r0, #100]	@ 0x64
 8020a62:	e7f6      	b.n	8020a52 <lv_spinbox_increment+0x1a>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_max))
 8020a64:	f890 3075 	ldrb.w	r3, [r0, #117]	@ 0x75
 8020a68:	f013 0f01 	tst.w	r3, #1
 8020a6c:	d001      	beq.n	8020a72 <lv_spinbox_increment+0x3a>
 8020a6e:	428a      	cmp	r2, r1
 8020a70:	d001      	beq.n	8020a76 <lv_spinbox_increment+0x3e>
            spinbox->value = spinbox->range_max;
 8020a72:	6641      	str	r1, [r0, #100]	@ 0x64
 8020a74:	e7f0      	b.n	8020a58 <lv_spinbox_increment+0x20>
            spinbox->value = spinbox->range_min;
 8020a76:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8020a78:	6643      	str	r3, [r0, #100]	@ 0x64
 8020a7a:	e7ed      	b.n	8020a58 <lv_spinbox_increment+0x20>

08020a7c <lv_spinbox_decrement>:
{
 8020a7c:	b508      	push	{r3, lr}
    if(spinbox->value - spinbox->step >= spinbox->range_min) {
 8020a7e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8020a80:	6f01      	ldr	r1, [r0, #112]	@ 0x70
 8020a82:	eba3 0c01 	sub.w	ip, r3, r1
 8020a86:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8020a88:	4594      	cmp	ip, r2
 8020a8a:	db0d      	blt.n	8020aa8 <lv_spinbox_decrement+0x2c>
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8020a8c:	f1bc 0f00 	cmp.w	ip, #0
 8020a90:	db05      	blt.n	8020a9e <lv_spinbox_decrement+0x22>
        spinbox->value -= spinbox->step;
 8020a92:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8020a94:	1a5b      	subs	r3, r3, r1
 8020a96:	6643      	str	r3, [r0, #100]	@ 0x64
    lv_spinbox_updatevalue(obj);
 8020a98:	f7ff fee0 	bl	802085c <lv_spinbox_updatevalue>
}
 8020a9c:	bd08      	pop	{r3, pc}
        if((spinbox->value - spinbox->step) < 0 && spinbox->value > 0) spinbox->value = -spinbox->value;
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	ddf7      	ble.n	8020a92 <lv_spinbox_decrement+0x16>
 8020aa2:	425b      	negs	r3, r3
 8020aa4:	6643      	str	r3, [r0, #100]	@ 0x64
 8020aa6:	e7f4      	b.n	8020a92 <lv_spinbox_decrement+0x16>
        if((spinbox->rollover) && (spinbox->value == spinbox->range_min))
 8020aa8:	f890 1075 	ldrb.w	r1, [r0, #117]	@ 0x75
 8020aac:	f011 0f01 	tst.w	r1, #1
 8020ab0:	d001      	beq.n	8020ab6 <lv_spinbox_decrement+0x3a>
 8020ab2:	4293      	cmp	r3, r2
 8020ab4:	d001      	beq.n	8020aba <lv_spinbox_decrement+0x3e>
            spinbox->value = spinbox->range_min;
 8020ab6:	6642      	str	r2, [r0, #100]	@ 0x64
 8020ab8:	e7ee      	b.n	8020a98 <lv_spinbox_decrement+0x1c>
            spinbox->value = spinbox->range_max;
 8020aba:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8020abc:	6643      	str	r3, [r0, #100]	@ 0x64
 8020abe:	e7eb      	b.n	8020a98 <lv_spinbox_decrement+0x1c>

08020ac0 <lv_spinbox_event>:
{
 8020ac0:	b570      	push	{r4, r5, r6, lr}
 8020ac2:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 8020ac4:	485d      	ldr	r0, [pc, #372]	@ (8020c3c <lv_spinbox_event+0x17c>)
 8020ac6:	f7f0 f855 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8020aca:	2801      	cmp	r0, #1
 8020acc:	d000      	beq.n	8020ad0 <lv_spinbox_event+0x10>
}
 8020ace:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8020ad0:	4620      	mov	r0, r4
 8020ad2:	f7f0 f927 	bl	8010d24 <lv_event_get_code>
 8020ad6:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8020ad8:	4620      	mov	r0, r4
 8020ada:	f7f0 f91f 	bl	8010d1c <lv_event_get_target>
 8020ade:	4605      	mov	r5, r0
    if(code == LV_EVENT_RELEASED) {
 8020ae0:	2e08      	cmp	r6, #8
 8020ae2:	d011      	beq.n	8020b08 <lv_spinbox_event+0x48>
    else if(code == LV_EVENT_KEY) {
 8020ae4:	2e0d      	cmp	r6, #13
 8020ae6:	d1f2      	bne.n	8020ace <lv_spinbox_event+0xe>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 8020ae8:	f7f3 fe42 	bl	8014770 <lv_indev_get_act>
 8020aec:	f7f3 fe46 	bl	801477c <lv_indev_get_type>
 8020af0:	4606      	mov	r6, r0
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 8020af2:	4620      	mov	r0, r4
 8020af4:	f7f0 f91a 	bl	8010d2c <lv_event_get_param>
 8020af8:	6803      	ldr	r3, [r0, #0]
        if(c == LV_KEY_RIGHT) {
 8020afa:	3b11      	subs	r3, #17
 8020afc:	2b03      	cmp	r3, #3
 8020afe:	d8e6      	bhi.n	8020ace <lv_spinbox_event+0xe>
 8020b00:	e8df f003 	tbb	[pc, r3]
 8020b04:	8a809894 	.word	0x8a809894
        lv_indev_t * indev = lv_indev_get_act();
 8020b08:	f7f3 fe32 	bl	8014770 <lv_indev_get_act>
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_ENCODER) {
 8020b0c:	f7f3 fe36 	bl	801477c <lv_indev_get_type>
 8020b10:	2804      	cmp	r0, #4
 8020b12:	d025      	beq.n	8020b60 <lv_spinbox_event+0xa0>
            const char * txt = lv_textarea_get_text(obj);
 8020b14:	4628      	mov	r0, r5
 8020b16:	f002 f84b 	bl	8022bb0 <lv_textarea_get_text>
 8020b1a:	4604      	mov	r4, r0
            size_t txt_len = strlen(txt);
 8020b1c:	f7df fb3e 	bl	800019c <strlen>
            if(txt[spinbox->ta.cursor.pos] == '.') {
 8020b20:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8020b22:	5ce2      	ldrb	r2, [r4, r3]
 8020b24:	2a2e      	cmp	r2, #46	@ 0x2e
 8020b26:	d053      	beq.n	8020bd0 <lv_spinbox_event+0x110>
            else if(spinbox->ta.cursor.pos == (uint32_t)txt_len) {
 8020b28:	4283      	cmp	r3, r0
 8020b2a:	d055      	beq.n	8020bd8 <lv_spinbox_event+0x118>
            else if(spinbox->ta.cursor.pos == 0 && spinbox->range_min < 0) {
 8020b2c:	b913      	cbnz	r3, 8020b34 <lv_spinbox_event+0x74>
 8020b2e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	db56      	blt.n	8020be2 <lv_spinbox_event+0x122>
            size_t len = spinbox->digit_count - 1;
 8020b34:	f895 0074 	ldrb.w	r0, [r5, #116]	@ 0x74
 8020b38:	f000 010f 	and.w	r1, r0, #15
 8020b3c:	3901      	subs	r1, #1
            uint16_t cp = spinbox->ta.cursor.pos;
 8020b3e:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8020b40:	b293      	uxth	r3, r2
            if(spinbox->ta.cursor.pos > spinbox->dec_point_pos && spinbox->dec_point_pos != 0) cp--;
 8020b42:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
 8020b46:	d903      	bls.n	8020b50 <lv_spinbox_event+0x90>
 8020b48:	280f      	cmp	r0, #15
 8020b4a:	d901      	bls.n	8020b50 <lv_spinbox_event+0x90>
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	b29b      	uxth	r3, r3
            uint32_t pos = len - cp;
 8020b50:	1ac9      	subs	r1, r1, r3
            if(spinbox->range_min < 0) pos++;
 8020b52:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	db49      	blt.n	8020bec <lv_spinbox_event+0x12c>
            spinbox->step = 1;
 8020b58:	2301      	movs	r3, #1
 8020b5a:	672b      	str	r3, [r5, #112]	@ 0x70
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	e04e      	b.n	8020bfe <lv_spinbox_event+0x13e>
            if(lv_group_get_editing(lv_obj_get_group(obj))) {
 8020b60:	4628      	mov	r0, r5
 8020b62:	f7f7 fca8 	bl	80184b6 <lv_obj_get_group>
 8020b66:	f7f2 faa7 	bl	80130b8 <lv_group_get_editing>
 8020b6a:	2800      	cmp	r0, #0
 8020b6c:	d0af      	beq.n	8020ace <lv_spinbox_event+0xe>
                if(spinbox->digit_count > 1) {
 8020b6e:	f895 2074 	ldrb.w	r2, [r5, #116]	@ 0x74
 8020b72:	f002 020f 	and.w	r2, r2, #15
 8020b76:	2a01      	cmp	r2, #1
 8020b78:	d9a9      	bls.n	8020ace <lv_spinbox_event+0xe>
                    if(spinbox->digit_step_dir == LV_DIR_RIGHT) {
 8020b7a:	f895 3075 	ldrb.w	r3, [r5, #117]	@ 0x75
 8020b7e:	f003 0306 	and.w	r3, r3, #6
 8020b82:	2b04      	cmp	r3, #4
 8020b84:	d110      	bne.n	8020ba8 <lv_spinbox_event+0xe8>
                        if(spinbox->step > 1) {
 8020b86:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8020b88:	2b01      	cmp	r3, #1
 8020b8a:	dd03      	ble.n	8020b94 <lv_spinbox_event+0xd4>
                            lv_spinbox_step_next(obj);
 8020b8c:	4628      	mov	r0, r5
 8020b8e:	f7ff ff2b 	bl	80209e8 <lv_spinbox_step_next>
 8020b92:	e79c      	b.n	8020ace <lv_spinbox_event+0xe>
                            spinbox->step = lv_pow(10, spinbox->digit_count - 2);
 8020b94:	3a02      	subs	r2, #2
 8020b96:	200a      	movs	r0, #10
 8020b98:	2100      	movs	r1, #0
 8020b9a:	f7f5 fe5b 	bl	8016854 <lv_pow>
 8020b9e:	6728      	str	r0, [r5, #112]	@ 0x70
                            lv_spinbox_step_prev(obj);
 8020ba0:	4628      	mov	r0, r5
 8020ba2:	f7ff ff35 	bl	8020a10 <lv_spinbox_step_prev>
 8020ba6:	e792      	b.n	8020ace <lv_spinbox_event+0xe>
                        if(spinbox->step < lv_pow(10, spinbox->digit_count - 1)) {
 8020ba8:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 8020baa:	17f4      	asrs	r4, r6, #31
 8020bac:	3a01      	subs	r2, #1
 8020bae:	200a      	movs	r0, #10
 8020bb0:	2100      	movs	r1, #0
 8020bb2:	f7f5 fe4f 	bl	8016854 <lv_pow>
 8020bb6:	4286      	cmp	r6, r0
 8020bb8:	418c      	sbcs	r4, r1
 8020bba:	da03      	bge.n	8020bc4 <lv_spinbox_event+0x104>
                            lv_spinbox_step_prev(obj);
 8020bbc:	4628      	mov	r0, r5
 8020bbe:	f7ff ff27 	bl	8020a10 <lv_spinbox_step_prev>
 8020bc2:	e784      	b.n	8020ace <lv_spinbox_event+0xe>
                            spinbox->step = 10;
 8020bc4:	230a      	movs	r3, #10
 8020bc6:	672b      	str	r3, [r5, #112]	@ 0x70
                            lv_spinbox_step_next(obj);
 8020bc8:	4628      	mov	r0, r5
 8020bca:	f7ff ff0d 	bl	80209e8 <lv_spinbox_step_next>
 8020bce:	e77e      	b.n	8020ace <lv_spinbox_event+0xe>
                lv_textarea_cursor_left(obj);
 8020bd0:	4628      	mov	r0, r5
 8020bd2:	f002 fda2 	bl	802371a <lv_textarea_cursor_left>
 8020bd6:	e7ad      	b.n	8020b34 <lv_spinbox_event+0x74>
                lv_textarea_set_cursor_pos(obj, txt_len - 1);
 8020bd8:	1e41      	subs	r1, r0, #1
 8020bda:	4628      	mov	r0, r5
 8020bdc:	f002 f970 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8020be0:	e7a8      	b.n	8020b34 <lv_spinbox_event+0x74>
                lv_textarea_set_cursor_pos(obj, 1);
 8020be2:	2101      	movs	r1, #1
 8020be4:	4628      	mov	r0, r5
 8020be6:	f002 f96b 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8020bea:	e7a3      	b.n	8020b34 <lv_spinbox_event+0x74>
            if(spinbox->range_min < 0) pos++;
 8020bec:	3101      	adds	r1, #1
 8020bee:	e7b3      	b.n	8020b58 <lv_spinbox_event+0x98>
            for(i = 0; i < pos; i++) spinbox->step *= 10;
 8020bf0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8020bf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020bf6:	005b      	lsls	r3, r3, #1
 8020bf8:	672b      	str	r3, [r5, #112]	@ 0x70
 8020bfa:	3201      	adds	r2, #1
 8020bfc:	b292      	uxth	r2, r2
 8020bfe:	428a      	cmp	r2, r1
 8020c00:	d3f6      	bcc.n	8020bf0 <lv_spinbox_event+0x130>
 8020c02:	e764      	b.n	8020ace <lv_spinbox_event+0xe>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8020c04:	2e04      	cmp	r6, #4
 8020c06:	d003      	beq.n	8020c10 <lv_spinbox_event+0x150>
                lv_spinbox_step_next(obj);
 8020c08:	4628      	mov	r0, r5
 8020c0a:	f7ff feed 	bl	80209e8 <lv_spinbox_step_next>
 8020c0e:	e75e      	b.n	8020ace <lv_spinbox_event+0xe>
                lv_spinbox_increment(obj);
 8020c10:	4628      	mov	r0, r5
 8020c12:	f7ff ff11 	bl	8020a38 <lv_spinbox_increment>
 8020c16:	e75a      	b.n	8020ace <lv_spinbox_event+0xe>
            if(indev_type == LV_INDEV_TYPE_ENCODER)
 8020c18:	2e04      	cmp	r6, #4
 8020c1a:	d003      	beq.n	8020c24 <lv_spinbox_event+0x164>
                lv_spinbox_step_prev(obj);
 8020c1c:	4628      	mov	r0, r5
 8020c1e:	f7ff fef7 	bl	8020a10 <lv_spinbox_step_prev>
 8020c22:	e754      	b.n	8020ace <lv_spinbox_event+0xe>
                lv_spinbox_decrement(obj);
 8020c24:	4628      	mov	r0, r5
 8020c26:	f7ff ff29 	bl	8020a7c <lv_spinbox_decrement>
 8020c2a:	e750      	b.n	8020ace <lv_spinbox_event+0xe>
            lv_spinbox_increment(obj);
 8020c2c:	4628      	mov	r0, r5
 8020c2e:	f7ff ff03 	bl	8020a38 <lv_spinbox_increment>
 8020c32:	e74c      	b.n	8020ace <lv_spinbox_event+0xe>
            lv_spinbox_decrement(obj);
 8020c34:	4628      	mov	r0, r5
 8020c36:	f7ff ff21 	bl	8020a7c <lv_spinbox_decrement>
 8020c3a:	e748      	b.n	8020ace <lv_spinbox_event+0xe>
 8020c3c:	0802ded0 	.word	0x0802ded0

08020c40 <lv_spinner_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_spinner_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8020c40:	b570      	push	{r4, r5, r6, lr}
 8020c42:	b092      	sub	sp, #72	@ 0x48
 8020c44:	460c      	mov	r4, r1
    LV_TRACE_OBJ_CREATE("begin");

    LV_UNUSED(class_p);

    lv_obj_clear_flag(obj, LV_OBJ_FLAG_CLICKABLE);
 8020c46:	2102      	movs	r1, #2
 8020c48:	4620      	mov	r0, r4
 8020c4a:	f7f7 fbc9 	bl	80183e0 <lv_obj_clear_flag>

    lv_anim_t a;
    lv_anim_init(&a);
 8020c4e:	a801      	add	r0, sp, #4
 8020c50:	f7df fd80 	bl	8000754 <lv_anim_init>
 * @param a     pointer to an initialized `lv_anim_t` variable
 * @param var   pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var = var;
 8020c54:	9401      	str	r4, [sp, #4]
 *                  LVGL's built-in functions can be used.
 *                  E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
 8020c56:	4b16      	ldr	r3, [pc, #88]	@ (8020cb0 <lv_spinner_constructor+0x70>)
 8020c58:	9302      	str	r3, [sp, #8]
 * @param a         pointer to an initialized `lv_anim_t` variable
 * @param cnt       repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt = cnt;
 8020c5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020c5e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
    lv_anim_set_var(&a, obj);
    lv_anim_set_exec_cb(&a, arc_anim_end_angle);
    lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
    lv_anim_set_time(&a, time_param);
 8020c62:	4b14      	ldr	r3, [pc, #80]	@ (8020cb4 <lv_spinner_constructor+0x74>)
 8020c64:	681b      	ldr	r3, [r3, #0]
    a->time = duration;
 8020c66:	930c      	str	r3, [sp, #48]	@ 0x30
    lv_anim_set_values(&a, arc_length_param, 360 + arc_length_param);
 8020c68:	4b13      	ldr	r3, [pc, #76]	@ (8020cb8 <lv_spinner_constructor+0x78>)
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
    a->start_value = start;
 8020c70:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 8020c72:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 8020c74:	920b      	str	r2, [sp, #44]	@ 0x2c
    lv_anim_start(&a);
 8020c76:	a801      	add	r0, sp, #4
 8020c78:	f7df fdb8 	bl	80007ec <lv_anim_start>
    a->path_cb = path_cb;
 8020c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8020cbc <lv_spinner_constructor+0x7c>)
 8020c7e:	9308      	str	r3, [sp, #32]
    a->start_value = start;
 8020c80:	2500      	movs	r5, #0
 8020c82:	9509      	str	r5, [sp, #36]	@ 0x24
    a->current_value = start;
 8020c84:	950a      	str	r5, [sp, #40]	@ 0x28
    a->end_value = end;
 8020c86:	f44f 76b4 	mov.w	r6, #360	@ 0x168
 8020c8a:	960b      	str	r6, [sp, #44]	@ 0x2c
    a->exec_cb = exec_cb;
 8020c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8020cc0 <lv_spinner_constructor+0x80>)
 8020c8e:	9302      	str	r3, [sp, #8]

    lv_anim_set_path_cb(&a, lv_anim_path_ease_in_out);
    lv_anim_set_values(&a, 0, 360);
    lv_anim_set_exec_cb(&a, arc_anim_start_angle);
    lv_anim_start(&a);
 8020c90:	a801      	add	r0, sp, #4
 8020c92:	f7df fdab 	bl	80007ec <lv_anim_start>

    lv_arc_set_bg_angles(obj, 0, 360);
 8020c96:	4632      	mov	r2, r6
 8020c98:	4629      	mov	r1, r5
 8020c9a:	4620      	mov	r0, r4
 8020c9c:	f7e0 fb64 	bl	8001368 <lv_arc_set_bg_angles>
    lv_arc_set_rotation(obj, 270);
 8020ca0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8020ca4:	4620      	mov	r0, r4
 8020ca6:	f7e0 fb6a 	bl	800137e <lv_arc_set_rotation>
}
 8020caa:	b012      	add	sp, #72	@ 0x48
 8020cac:	bd70      	pop	{r4, r5, r6, pc}
 8020cae:	bf00      	nop
 8020cb0:	08020ccf 	.word	0x08020ccf
 8020cb4:	200088ec 	.word	0x200088ec
 8020cb8:	200088e8 	.word	0x200088e8
 8020cbc:	08000905 	.word	0x08000905
 8020cc0:	08020cc5 	.word	0x08020cc5

08020cc4 <arc_anim_start_angle>:


static void arc_anim_start_angle(void * obj, int32_t v)
{
 8020cc4:	b508      	push	{r3, lr}
    lv_arc_set_start_angle(obj, (uint16_t) v);
 8020cc6:	b289      	uxth	r1, r1
 8020cc8:	f7e0 f9d5 	bl	8001076 <lv_arc_set_start_angle>
}
 8020ccc:	bd08      	pop	{r3, pc}

08020cce <arc_anim_end_angle>:


static void arc_anim_end_angle(void * obj, int32_t v)
{
 8020cce:	b508      	push	{r3, lr}
    lv_arc_set_end_angle(obj, (uint16_t) v);
 8020cd0:	b289      	uxth	r1, r1
 8020cd2:	f7e0 fa13 	bl	80010fc <lv_arc_set_end_angle>
}
 8020cd6:	bd08      	pop	{r3, pc}

08020cd8 <lv_spinner_create>:
{
 8020cd8:	b510      	push	{r4, lr}
    time_param = time;
 8020cda:	4b06      	ldr	r3, [pc, #24]	@ (8020cf4 <lv_spinner_create+0x1c>)
 8020cdc:	6019      	str	r1, [r3, #0]
    arc_length_param = arc_length;
 8020cde:	4b06      	ldr	r3, [pc, #24]	@ (8020cf8 <lv_spinner_create+0x20>)
 8020ce0:	601a      	str	r2, [r3, #0]
    lv_obj_t * obj = lv_obj_class_create_obj(&lv_spinner_class, parent);
 8020ce2:	4601      	mov	r1, r0
 8020ce4:	4805      	ldr	r0, [pc, #20]	@ (8020cfc <lv_spinner_create+0x24>)
 8020ce6:	f7f7 fe9d 	bl	8018a24 <lv_obj_class_create_obj>
 8020cea:	4604      	mov	r4, r0
    lv_obj_class_init_obj(obj);
 8020cec:	f7f7 ff39 	bl	8018b62 <lv_obj_class_init_obj>
}
 8020cf0:	4620      	mov	r0, r4
 8020cf2:	bd10      	pop	{r4, pc}
 8020cf4:	200088ec 	.word	0x200088ec
 8020cf8:	200088e8 	.word	0x200088e8
 8020cfc:	0802deec 	.word	0x0802deec

08020d00 <lv_style_set_prop_helper>:
 **********************/

static void lv_style_set_prop_helper(lv_style_prop_t prop, lv_style_value_t value, uint16_t * prop_storage,
                                     lv_style_value_t * value_storage)
{
    *prop_storage = prop;
 8020d00:	8010      	strh	r0, [r2, #0]
    *value_storage = value;
 8020d02:	6019      	str	r1, [r3, #0]
}
 8020d04:	4770      	bx	lr

08020d06 <lv_style_init>:
{
 8020d06:	b508      	push	{r3, lr}
    lv_memset_00(style, sizeof(lv_style_t));
 8020d08:	2108      	movs	r1, #8
 8020d0a:	f7f5 ffdb 	bl	8016cc4 <lv_memset_00>
}
 8020d0e:	bd08      	pop	{r3, pc}

08020d10 <lv_style_reset>:
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020d10:	8882      	ldrh	r2, [r0, #4]
 8020d12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020d16:	429a      	cmp	r2, r3
 8020d18:	d00d      	beq.n	8020d36 <lv_style_reset+0x26>
{
 8020d1a:	b510      	push	{r4, lr}
 8020d1c:	4604      	mov	r4, r0
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8020d1e:	79c3      	ldrb	r3, [r0, #7]
 8020d20:	2b01      	cmp	r3, #1
 8020d22:	d804      	bhi.n	8020d2e <lv_style_reset+0x1e>
    lv_memset_00(style, sizeof(lv_style_t));
 8020d24:	2108      	movs	r1, #8
 8020d26:	4620      	mov	r0, r4
 8020d28:	f7f5 ffcc 	bl	8016cc4 <lv_memset_00>
}
 8020d2c:	bd10      	pop	{r4, pc}
    if(style->prop_cnt > 1) lv_mem_free(style->v_p.values_and_props);
 8020d2e:	6800      	ldr	r0, [r0, #0]
 8020d30:	f7f5 fe10 	bl	8016954 <lv_mem_free>
 8020d34:	e7f6      	b.n	8020d24 <lv_style_reset+0x14>
 8020d36:	4770      	bx	lr

08020d38 <lv_style_register_prop>:
{
 8020d38:	b538      	push	{r3, r4, r5, lr}
 8020d3a:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) == NULL) {
 8020d3c:	4b19      	ldr	r3, [pc, #100]	@ (8020da4 <lv_style_register_prop+0x6c>)
 8020d3e:	6818      	ldr	r0, [r3, #0]
 8020d40:	b180      	cbz	r0, 8020d64 <lv_style_register_prop+0x2c>
    if(((last_custom_prop_id + 1) & LV_STYLE_PROP_META_MASK) != 0) {
 8020d42:	4b19      	ldr	r3, [pc, #100]	@ (8020da8 <lv_style_register_prop+0x70>)
 8020d44:	881b      	ldrh	r3, [r3, #0]
 8020d46:	1c5a      	adds	r2, r3, #1
 8020d48:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8020d4c:	d126      	bne.n	8020d9c <lv_style_register_prop+0x64>
    size_t required_size = (last_custom_prop_id + 1 - _LV_STYLE_LAST_BUILT_IN_PROP);
 8020d4e:	f1a3 026f 	sub.w	r2, r3, #111	@ 0x6f
    if(_lv_style_custom_prop_flag_lookup_table_size < required_size) {
 8020d52:	4916      	ldr	r1, [pc, #88]	@ (8020dac <lv_style_register_prop+0x74>)
 8020d54:	6809      	ldr	r1, [r1, #0]
 8020d56:	4291      	cmp	r1, r2
 8020d58:	d213      	bcs.n	8020d82 <lv_style_register_prop+0x4a>
        required_size = (required_size + 31) & ~31;
 8020d5a:	3b50      	subs	r3, #80	@ 0x50
        LV_ASSERT_MSG(required_size > 0, "required size has become 0?");
 8020d5c:	f033 041f 	bics.w	r4, r3, #31
 8020d60:	d107      	bne.n	8020d72 <lv_style_register_prop+0x3a>
 8020d62:	e7fe      	b.n	8020d62 <lv_style_register_prop+0x2a>
        _lv_style_custom_prop_flag_lookup_table_size = 0;
 8020d64:	4b11      	ldr	r3, [pc, #68]	@ (8020dac <lv_style_register_prop+0x74>)
 8020d66:	2200      	movs	r2, #0
 8020d68:	601a      	str	r2, [r3, #0]
        last_custom_prop_id = (uint16_t)_LV_STYLE_LAST_BUILT_IN_PROP;
 8020d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8020da8 <lv_style_register_prop+0x70>)
 8020d6c:	2270      	movs	r2, #112	@ 0x70
 8020d6e:	801a      	strh	r2, [r3, #0]
 8020d70:	e7e7      	b.n	8020d42 <lv_style_register_prop+0xa>
        uint8_t * new_p = lv_mem_realloc(old_p, required_size * sizeof(uint8_t));
 8020d72:	4621      	mov	r1, r4
 8020d74:	f7f5 fe0a 	bl	801698c <lv_mem_realloc>
        if(new_p == NULL) {
 8020d78:	b190      	cbz	r0, 8020da0 <lv_style_register_prop+0x68>
        LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) = new_p;
 8020d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8020da4 <lv_style_register_prop+0x6c>)
 8020d7c:	6018      	str	r0, [r3, #0]
        _lv_style_custom_prop_flag_lookup_table_size = required_size;
 8020d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8020dac <lv_style_register_prop+0x74>)
 8020d80:	601c      	str	r4, [r3, #0]
    last_custom_prop_id++;
 8020d82:	4a09      	ldr	r2, [pc, #36]	@ (8020da8 <lv_style_register_prop+0x70>)
 8020d84:	8813      	ldrh	r3, [r2, #0]
 8020d86:	3301      	adds	r3, #1
 8020d88:	b298      	uxth	r0, r3
 8020d8a:	8010      	strh	r0, [r2, #0]
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8020d8c:	4b05      	ldr	r3, [pc, #20]	@ (8020da4 <lv_style_register_prop+0x6c>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	b11b      	cbz	r3, 8020d9a <lv_style_register_prop+0x62>
    LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[last_custom_prop_id - _LV_STYLE_NUM_BUILT_IN_PROPS] = flag;
 8020d92:	f1a0 0271 	sub.w	r2, r0, #113	@ 0x71
 8020d96:	549d      	strb	r5, [r3, r2]
    return last_custom_prop_id;
 8020d98:	e001      	b.n	8020d9e <lv_style_register_prop+0x66>
    LV_ASSERT_NULL(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table));
 8020d9a:	e7fe      	b.n	8020d9a <lv_style_register_prop+0x62>
        return LV_STYLE_PROP_INV;
 8020d9c:	2000      	movs	r0, #0
}
 8020d9e:	bd38      	pop	{r3, r4, r5, pc}
            return LV_STYLE_PROP_INV;
 8020da0:	2000      	movs	r0, #0
 8020da2:	e7fc      	b.n	8020d9e <lv_style_register_prop+0x66>
 8020da4:	20006668 	.word	0x20006668
 8020da8:	20000072 	.word	0x20000072
 8020dac:	200088f0 	.word	0x200088f0

08020db0 <lv_style_remove_prop>:
{
 8020db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020db2:	8883      	ldrh	r3, [r0, #4]
 8020db4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020db8:	4293      	cmp	r3, r2
 8020dba:	d05b      	beq.n	8020e74 <lv_style_remove_prop+0xc4>
 8020dbc:	4605      	mov	r5, r0
 8020dbe:	460c      	mov	r4, r1
    if(style->prop_cnt == 0)  return false;
 8020dc0:	79c1      	ldrb	r1, [r0, #7]
 8020dc2:	2900      	cmp	r1, #0
 8020dc4:	d058      	beq.n	8020e78 <lv_style_remove_prop+0xc8>
    if(style->prop_cnt == 1) {
 8020dc6:	2901      	cmp	r1, #1
 8020dc8:	d00d      	beq.n	8020de6 <lv_style_remove_prop+0x36>
    uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020dca:	6807      	ldr	r7, [r0, #0]
 8020dcc:	eb07 0681 	add.w	r6, r7, r1, lsl #2
    for(i = 0; i < style->prop_cnt; i++) {
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	4299      	cmp	r1, r3
 8020dd4:	d94c      	bls.n	8020e70 <lv_style_remove_prop+0xc0>
        if(LV_STYLE_PROP_ID_MASK(old_props[i]) == prop) {
 8020dd6:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8020dda:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8020dde:	42a2      	cmp	r2, r4
 8020de0:	d00c      	beq.n	8020dfc <lv_style_remove_prop+0x4c>
    for(i = 0; i < style->prop_cnt; i++) {
 8020de2:	3301      	adds	r3, #1
 8020de4:	e7f5      	b.n	8020dd2 <lv_style_remove_prop+0x22>
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 8020de6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8020dea:	42a3      	cmp	r3, r4
 8020dec:	d001      	beq.n	8020df2 <lv_style_remove_prop+0x42>
        return false;
 8020dee:	2000      	movs	r0, #0
 8020df0:	e043      	b.n	8020e7a <lv_style_remove_prop+0xca>
            style->prop1 = LV_STYLE_PROP_INV;
 8020df2:	2300      	movs	r3, #0
 8020df4:	8083      	strh	r3, [r0, #4]
            style->prop_cnt = 0;
 8020df6:	71c3      	strb	r3, [r0, #7]
            return true;
 8020df8:	2001      	movs	r0, #1
 8020dfa:	e03e      	b.n	8020e7a <lv_style_remove_prop+0xca>
            if(style->prop_cnt == 2) {
 8020dfc:	2902      	cmp	r1, #2
 8020dfe:	d010      	beq.n	8020e22 <lv_style_remove_prop+0x72>
                size_t size = (style->prop_cnt - 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8020e00:	3901      	subs	r1, #1
 8020e02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
                uint8_t * new_values_and_props = lv_mem_alloc(size);
 8020e06:	0048      	lsls	r0, r1, #1
 8020e08:	f7f5 fd86 	bl	8016918 <lv_mem_alloc>
                if(new_values_and_props == NULL) return false;
 8020e0c:	4684      	mov	ip, r0
 8020e0e:	b3a8      	cbz	r0, 8020e7c <lv_style_remove_prop+0xcc>
                style->v_p.values_and_props = new_values_and_props;
 8020e10:	6028      	str	r0, [r5, #0]
                style->prop_cnt--;
 8020e12:	79e8      	ldrb	r0, [r5, #7]
 8020e14:	3801      	subs	r0, #1
 8020e16:	b2c0      	uxtb	r0, r0
 8020e18:	71e8      	strb	r0, [r5, #7]
                tmp = new_values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020e1a:	0080      	lsls	r0, r0, #2
                for(i = j = 0; j <= style->prop_cnt;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	461a      	mov	r2, r3
 8020e20:	e013      	b.n	8020e4a <lv_style_remove_prop+0x9a>
                style->prop_cnt = 1;
 8020e22:	2201      	movs	r2, #1
 8020e24:	71ea      	strb	r2, [r5, #7]
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8020e26:	b94b      	cbnz	r3, 8020e3c <lv_style_remove_prop+0x8c>
 8020e28:	8872      	ldrh	r2, [r6, #2]
 8020e2a:	80aa      	strh	r2, [r5, #4]
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8020e2c:	b94b      	cbnz	r3, 8020e42 <lv_style_remove_prop+0x92>
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	602b      	str	r3, [r5, #0]
            lv_mem_free(old_values);
 8020e32:	4638      	mov	r0, r7
 8020e34:	f7f5 fd8e 	bl	8016954 <lv_mem_free>
            return true;
 8020e38:	2001      	movs	r0, #1
 8020e3a:	e01e      	b.n	8020e7a <lv_style_remove_prop+0xca>
                style->prop1 = i == 0 ? old_props[1] : old_props[0];
 8020e3c:	f837 2021 	ldrh.w	r2, [r7, r1, lsl #2]
 8020e40:	e7f3      	b.n	8020e2a <lv_style_remove_prop+0x7a>
                style->v_p.value1 = i == 0 ? old_values[1] : old_values[0];
 8020e42:	683b      	ldr	r3, [r7, #0]
 8020e44:	602b      	str	r3, [r5, #0]
 8020e46:	e7f4      	b.n	8020e32 <lv_style_remove_prop+0x82>
                    j++) { /*<=: because prop_cnt already reduced but all the old props. needs to be checked.*/
 8020e48:	3301      	adds	r3, #1
                for(i = j = 0; j <= style->prop_cnt;
 8020e4a:	79e9      	ldrb	r1, [r5, #7]
 8020e4c:	4299      	cmp	r1, r3
 8020e4e:	d3f0      	bcc.n	8020e32 <lv_style_remove_prop+0x82>
                    if(old_props[j] != prop) {
 8020e50:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8020e54:	42a1      	cmp	r1, r4
 8020e56:	d0f7      	beq.n	8020e48 <lv_style_remove_prop+0x98>
                        new_values[i] = old_values[j];
 8020e58:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8020e5c:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
                        new_props[i++] = old_props[j];
 8020e60:	eb00 0142 	add.w	r1, r0, r2, lsl #1
 8020e64:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 8020e68:	f82c e001 	strh.w	lr, [ip, r1]
 8020e6c:	3201      	adds	r2, #1
 8020e6e:	e7eb      	b.n	8020e48 <lv_style_remove_prop+0x98>
    return false;
 8020e70:	2000      	movs	r0, #0
 8020e72:	e002      	b.n	8020e7a <lv_style_remove_prop+0xca>
        return false;
 8020e74:	2000      	movs	r0, #0
 8020e76:	e000      	b.n	8020e7a <lv_style_remove_prop+0xca>
    if(style->prop_cnt == 0)  return false;
 8020e78:	2000      	movs	r0, #0
}
 8020e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(new_values_and_props == NULL) return false;
 8020e7c:	2000      	movs	r0, #0
 8020e7e:	e7fc      	b.n	8020e7a <lv_style_remove_prop+0xca>

08020e80 <lv_style_transition_dsc_init>:
{
 8020e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e82:	4604      	mov	r4, r0
 8020e84:	460f      	mov	r7, r1
 8020e86:	4615      	mov	r5, r2
 8020e88:	461e      	mov	r6, r3
    lv_memset_00(tr, sizeof(lv_style_transition_dsc_t));
 8020e8a:	2114      	movs	r1, #20
 8020e8c:	f7f5 ff1a 	bl	8016cc4 <lv_memset_00>
    tr->props = props;
 8020e90:	6027      	str	r7, [r4, #0]
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 8020e92:	b135      	cbz	r5, 8020ea2 <lv_style_transition_dsc_init+0x22>
 8020e94:	60a5      	str	r5, [r4, #8]
    tr->time = time;
 8020e96:	60e6      	str	r6, [r4, #12]
    tr->delay = delay;
 8020e98:	9b06      	ldr	r3, [sp, #24]
 8020e9a:	6123      	str	r3, [r4, #16]
    tr->user_data = user_data;
 8020e9c:	9b07      	ldr	r3, [sp, #28]
 8020e9e:	6063      	str	r3, [r4, #4]
}
 8020ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tr->path_xcb = path_cb == NULL ? lv_anim_path_linear : path_cb;
 8020ea2:	4d01      	ldr	r5, [pc, #4]	@ (8020ea8 <lv_style_transition_dsc_init+0x28>)
 8020ea4:	e7f6      	b.n	8020e94 <lv_style_transition_dsc_init+0x14>
 8020ea6:	bf00      	nop
 8020ea8:	080006f5 	.word	0x080006f5

08020eac <lv_style_prop_get_default>:
    switch(prop) {
 8020eac:	2836      	cmp	r0, #54	@ 0x36
 8020eae:	d820      	bhi.n	8020ef2 <lv_style_prop_get_default+0x46>
 8020eb0:	2803      	cmp	r0, #3
 8020eb2:	d363      	bcc.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020eb4:	3803      	subs	r0, #3
 8020eb6:	2833      	cmp	r0, #51	@ 0x33
 8020eb8:	d860      	bhi.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020eba:	e8df f000 	tbb	[pc, r0]
 8020ebe:	5f5c      	.short	0x5f5c
 8020ec0:	5f5f5c5f 	.word	0x5f5f5c5f
 8020ec4:	5f5f5f5f 	.word	0x5f5f5f5f
 8020ec8:	5f5f5f5f 	.word	0x5f5f5f5f
 8020ecc:	5f5f5f5f 	.word	0x5f5f5f5f
 8020ed0:	5f5f5f5f 	.word	0x5f5f5f5f
 8020ed4:	5f5f5f5f 	.word	0x5f5f5f5f
 8020ed8:	425f5f5f 	.word	0x425f5f5f
 8020edc:	5f5f485f 	.word	0x5f5f485f
 8020ee0:	5f5f5f56 	.word	0x5f5f5f56
 8020ee4:	5f5f5f3d 	.word	0x5f5f5f3d
 8020ee8:	485f5f5f 	.word	0x485f5f5f
 8020eec:	5f585f3d 	.word	0x5f585f3d
 8020ef0:	485f      	.short	0x485f
 8020ef2:	2855      	cmp	r0, #85	@ 0x55
 8020ef4:	d914      	bls.n	8020f20 <lv_style_prop_get_default+0x74>
 8020ef6:	286d      	cmp	r0, #109	@ 0x6d
 8020ef8:	d840      	bhi.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020efa:	2856      	cmp	r0, #86	@ 0x56
 8020efc:	d33e      	bcc.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020efe:	3856      	subs	r0, #86	@ 0x56
 8020f00:	2817      	cmp	r0, #23
 8020f02:	d83b      	bhi.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020f04:	e8df f000 	tbb	[pc, r0]
 8020f08:	3a3a3518 	.word	0x3a3a3518
 8020f0c:	3a3a3a3a 	.word	0x3a3a3a3a
 8020f10:	18183a3a 	.word	0x18183a3a
 8020f14:	3a3a3a3a 	.word	0x3a3a3a3a
 8020f18:	3a3a3a3a 	.word	0x3a3a3a3a
 8020f1c:	1a3a3a3a 	.word	0x1a3a3a3a
 8020f20:	2837      	cmp	r0, #55	@ 0x37
 8020f22:	d32b      	bcc.n	8020f7c <lv_style_prop_get_default+0xd0>
 8020f24:	3837      	subs	r0, #55	@ 0x37
 8020f26:	b280      	uxth	r0, r0
 8020f28:	2301      	movs	r3, #1
 8020f2a:	4083      	lsls	r3, r0
 8020f2c:	4a14      	ldr	r2, [pc, #80]	@ (8020f80 <lv_style_prop_get_default+0xd4>)
 8020f2e:	401a      	ands	r2, r3
 8020f30:	b96a      	cbnz	r2, 8020f4e <lv_style_prop_get_default+0xa2>
 8020f32:	4a14      	ldr	r2, [pc, #80]	@ (8020f84 <lv_style_prop_get_default+0xd8>)
 8020f34:	401a      	ands	r2, r3
 8020f36:	b30a      	cbz	r2, 8020f7c <lv_style_prop_get_default+0xd0>
            value.num = LV_OPA_COVER;
 8020f38:	20ff      	movs	r0, #255	@ 0xff
            break;
 8020f3a:	4770      	bx	lr
            value.num = LV_IMG_ZOOM_NONE;
 8020f3c:	f44f 7080 	mov.w	r0, #256	@ 0x100
            break;
 8020f40:	4770      	bx	lr
 8020f42:	2000      	movs	r0, #0
 8020f44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020f48:	f363 000f 	bfi	r0, r3, #0, #16
/*Source: https://vuetifyjs.com/en/styles/colors/#material-colors*/

lv_color_t lv_palette_main(lv_palette_t p);
static inline lv_color_t lv_color_white(void)
{
    return lv_color_make(0xff, 0xff, 0xff);
 8020f4c:	4770      	bx	lr
    return _LV_COLOR_MAKE_TYPE_HELPER LV_COLOR_MAKE(r, g, b);
 8020f4e:	f04f 0300 	mov.w	r3, #0
 8020f52:	f023 0307 	bic.w	r3, r3, #7
 8020f56:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8020f5a:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8020f5e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8020f62:	2000      	movs	r0, #0
 8020f64:	f363 000f 	bfi	r0, r3, #0, #16
}
static inline lv_color_t lv_color_black(void)
{
    return lv_color_make(0x00, 0x0, 0x00);
 8020f68:	4770      	bx	lr
            value.num = 255;
 8020f6a:	20ff      	movs	r0, #255	@ 0xff
            break;
 8020f6c:	4770      	bx	lr
            value.num = LV_BORDER_SIDE_FULL;
 8020f6e:	200f      	movs	r0, #15
            break;
 8020f70:	4770      	bx	lr
            value.ptr = LV_FONT_DEFAULT;
 8020f72:	4805      	ldr	r0, [pc, #20]	@ (8020f88 <lv_style_prop_get_default+0xdc>)
            break;
 8020f74:	4770      	bx	lr
            value.num = LV_COORD_MAX;
 8020f76:	f641 70ff 	movw	r0, #8191	@ 0x1fff
            break;
 8020f7a:	4770      	bx	lr
            value.ptr = NULL;
 8020f7c:	2000      	movs	r0, #0
}
 8020f7e:	4770      	bx	lr
 8020f80:	48412000 	.word	0x48412000
 8020f84:	1080c001 	.word	0x1080c001
 8020f88:	0802a2b8 	.word	0x0802a2b8

08020f8c <lv_style_get_prop_inlined>:
 * @note For performance reasons there are no sanity check on `style`
 * @note This function is the same as ::lv_style_get_prop but inlined. Use it only on performance critical places
 */
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop,
                                                       lv_style_value_t * value)
{
 8020f8c:	b538      	push	{r3, r4, r5, lr}
 8020f8e:	4684      	mov	ip, r0
 8020f90:	4614      	mov	r4, r2
    if(style->prop1 == LV_STYLE_PROP_ANY) {
 8020f92:	8883      	ldrh	r3, [r0, #4]
 8020f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8020f98:	4293      	cmp	r3, r2
 8020f9a:	d019      	beq.n	8020fd0 <lv_style_get_prop_inlined+0x44>
            }
        }
        return LV_STYLE_RES_NOT_FOUND;
    }

    if(style->prop_cnt == 0) return LV_STYLE_RES_NOT_FOUND;
 8020f9c:	79c0      	ldrb	r0, [r0, #7]
 8020f9e:	b348      	cbz	r0, 8020ff4 <lv_style_get_prop_inlined+0x68>

    if(style->prop_cnt > 1) {
 8020fa0:	2801      	cmp	r0, #1
 8020fa2:	d942      	bls.n	802102a <lv_style_get_prop_inlined+0x9e>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8020fa4:	f8dc 5000 	ldr.w	r5, [ip]
 8020fa8:	4686      	mov	lr, r0
 8020faa:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
        uint16_t * props = (uint16_t *)tmp;
        uint32_t i;
        for(i = 0; i < style->prop_cnt; i++) {
 8020fae:	2300      	movs	r3, #0
 8020fb0:	e026      	b.n	8021000 <lv_style_get_prop_inlined+0x74>
                if(const_prop->prop & LV_STYLE_PROP_META_INHERIT)
 8020fb2:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8020fb6:	d14d      	bne.n	8021054 <lv_style_get_prop_inlined+0xc8>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8020fb8:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8020fbc:	d004      	beq.n	8020fc8 <lv_style_get_prop_inlined+0x3c>
 8020fbe:	f7ff ff75 	bl	8020eac <lv_style_prop_get_default>
 8020fc2:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8020fc4:	2001      	movs	r0, #1
 8020fc6:	e015      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
                *value = (const_prop->prop & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(prop_id) : const_prop->value;
 8020fc8:	f8de 3004 	ldr.w	r3, [lr, #4]
 8020fcc:	6023      	str	r3, [r4, #0]
 8020fce:	e7f9      	b.n	8020fc4 <lv_style_get_prop_inlined+0x38>
        for(i = 0; i < style->prop_cnt; i++) {
 8020fd0:	2300      	movs	r3, #0
 8020fd2:	f89c 2007 	ldrb.w	r2, [ip, #7]
 8020fd6:	429a      	cmp	r2, r3
 8020fd8:	d90b      	bls.n	8020ff2 <lv_style_get_prop_inlined+0x66>
            const_prop = style->v_p.const_props + i;
 8020fda:	f8dc 0000 	ldr.w	r0, [ip]
 8020fde:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(const_prop->prop);
 8020fe2:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8020fe6:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 8020fea:	4281      	cmp	r1, r0
 8020fec:	d0e1      	beq.n	8020fb2 <lv_style_get_prop_inlined+0x26>
        for(i = 0; i < style->prop_cnt; i++) {
 8020fee:	3301      	adds	r3, #1
 8020ff0:	e7ef      	b.n	8020fd2 <lv_style_get_prop_inlined+0x46>
        return LV_STYLE_RES_NOT_FOUND;
 8020ff2:	2000      	movs	r0, #0
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
                                                                                             style->prop1)) : style->v_p.value1;
        return LV_STYLE_RES_FOUND;
    }
    return LV_STYLE_RES_NOT_FOUND;
}
 8020ff4:	bd38      	pop	{r3, r4, r5, pc}
                    *value = values[i];
 8020ff6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020ffa:	6023      	str	r3, [r4, #0]
 8020ffc:	e011      	b.n	8021022 <lv_style_get_prop_inlined+0x96>
        for(i = 0; i < style->prop_cnt; i++) {
 8020ffe:	3301      	adds	r3, #1
 8021000:	459e      	cmp	lr, r3
 8021002:	d910      	bls.n	8021026 <lv_style_get_prop_inlined+0x9a>
            lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(props[i]);
 8021004:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
 8021008:	f3c2 000d 	ubfx	r0, r2, #0, #14
            if(prop_id == prop) {
 802100c:	4281      	cmp	r1, r0
 802100e:	d1f6      	bne.n	8020ffe <lv_style_get_prop_inlined+0x72>
                if(props[i] & LV_STYLE_PROP_META_INHERIT)
 8021010:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8021014:	d120      	bne.n	8021058 <lv_style_get_prop_inlined+0xcc>
                if(props[i] & LV_STYLE_PROP_META_INITIAL)
 8021016:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 802101a:	d0ec      	beq.n	8020ff6 <lv_style_get_prop_inlined+0x6a>
                    *value = lv_style_prop_get_default(prop_id);
 802101c:	f7ff ff46 	bl	8020eac <lv_style_prop_get_default>
 8021020:	6020      	str	r0, [r4, #0]
                return LV_STYLE_RES_FOUND;
 8021022:	2001      	movs	r0, #1
 8021024:	e7e6      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
    return LV_STYLE_RES_NOT_FOUND;
 8021026:	2000      	movs	r0, #0
 8021028:	e7e4      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
    else if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop) {
 802102a:	f3c3 000d 	ubfx	r0, r3, #0, #14
 802102e:	4281      	cmp	r1, r0
 8021030:	d001      	beq.n	8021036 <lv_style_get_prop_inlined+0xaa>
    return LV_STYLE_RES_NOT_FOUND;
 8021032:	2000      	movs	r0, #0
 8021034:	e7de      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
        if(style->prop1 & LV_STYLE_PROP_META_INHERIT)
 8021036:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 802103a:	d10f      	bne.n	802105c <lv_style_get_prop_inlined+0xd0>
                                                                                             style->prop1)) : style->v_p.value1;
 802103c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8021040:	d004      	beq.n	802104c <lv_style_get_prop_inlined+0xc0>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 8021042:	f7ff ff33 	bl	8020eac <lv_style_prop_get_default>
 8021046:	6020      	str	r0, [r4, #0]
        return LV_STYLE_RES_FOUND;
 8021048:	2001      	movs	r0, #1
 802104a:	e7d3      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
        *value = (style->prop1 & LV_STYLE_PROP_META_INITIAL) ? lv_style_prop_get_default(LV_STYLE_PROP_ID_MASK(
 802104c:	f8dc 3000 	ldr.w	r3, [ip]
 8021050:	6023      	str	r3, [r4, #0]
 8021052:	e7f9      	b.n	8021048 <lv_style_get_prop_inlined+0xbc>
                    return LV_STYLE_RES_INHERIT;
 8021054:	2002      	movs	r0, #2
 8021056:	e7cd      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
                    return LV_STYLE_RES_INHERIT;
 8021058:	2002      	movs	r0, #2
 802105a:	e7cb      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>
            return LV_STYLE_RES_INHERIT;
 802105c:	2002      	movs	r0, #2
 802105e:	e7c9      	b.n	8020ff4 <lv_style_get_prop_inlined+0x68>

08021060 <lv_style_get_prop>:
{
 8021060:	b508      	push	{r3, lr}
    return lv_style_get_prop_inlined(style, prop, value);
 8021062:	f7ff ff93 	bl	8020f8c <lv_style_get_prop_inlined>
}
 8021066:	bd08      	pop	{r3, pc}

08021068 <lv_style_is_empty>:
    return style->prop_cnt == 0 ? true : false;
 8021068:	79c0      	ldrb	r0, [r0, #7]
}
 802106a:	fab0 f080 	clz	r0, r0
 802106e:	0940      	lsrs	r0, r0, #5
 8021070:	4770      	bx	lr

08021072 <_lv_style_get_prop_group>:
    uint16_t group = (prop & 0x1FF) >> 4;
 8021072:	0903      	lsrs	r3, r0, #4
 8021074:	f3c0 1004 	ubfx	r0, r0, #4, #5
    if(group > 7) group = 7;    /*The MSB marks all the custom properties*/
 8021078:	f013 0f18 	tst.w	r3, #24
 802107c:	d000      	beq.n	8021080 <_lv_style_get_prop_group+0xe>
 802107e:	2007      	movs	r0, #7
}
 8021080:	4770      	bx	lr

08021082 <lv_style_set_prop_internal>:
    *prop_storage = prop; /* meta is OR-ed into the prop ID already */
}

static void lv_style_set_prop_internal(lv_style_t * style, lv_style_prop_t prop_and_meta, lv_style_value_t value,
                                       void (*value_adjustment_helper)(lv_style_prop_t, lv_style_value_t, uint16_t *, lv_style_value_t *))
{
 8021082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021086:	4690      	mov	r8, r2
 8021088:	461f      	mov	r7, r3
    LV_ASSERT_STYLE(style);

    if(style->prop1 == LV_STYLE_PROP_ANY) {
 802108a:	8882      	ldrh	r2, [r0, #4]
 802108c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021090:	429a      	cmp	r2, r3
 8021092:	d05a      	beq.n	802114a <lv_style_set_prop_internal+0xc8>
 8021094:	4604      	mov	r4, r0
 8021096:	460e      	mov	r6, r1
        LV_LOG_ERROR("Cannot set property of constant style");
        return;
    }

    lv_style_prop_t prop_id = LV_STYLE_PROP_ID_MASK(prop_and_meta);
 8021098:	f3c1 050d 	ubfx	r5, r1, #0, #14

    if(style->prop_cnt > 1) {
 802109c:	79c3      	ldrb	r3, [r0, #7]
 802109e:	2b01      	cmp	r3, #1
 80210a0:	d942      	bls.n	8021128 <lv_style_set_prop_internal+0xa6>
        uint8_t * tmp = style->v_p.values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80210a2:	6800      	ldr	r0, [r0, #0]
 80210a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
        uint16_t * props = (uint16_t *)tmp;
        int32_t i;
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80210a8:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
 80210ac:	f1bc 0f00 	cmp.w	ip, #0
 80210b0:	db10      	blt.n	80210d4 <lv_style_set_prop_internal+0x52>
            if(LV_STYLE_PROP_ID_MASK(props[i]) == prop_id) {
 80210b2:	eb01 024c 	add.w	r2, r1, ip, lsl #1
 80210b6:	f831 e01c 	ldrh.w	lr, [r1, ip, lsl #1]
 80210ba:	f3ce 0e0d 	ubfx	lr, lr, #0, #14
 80210be:	4575      	cmp	r5, lr
 80210c0:	d002      	beq.n	80210c8 <lv_style_set_prop_internal+0x46>
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80210c2:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80210c6:	e7f1      	b.n	80210ac <lv_style_set_prop_internal+0x2a>
                lv_style_value_t * values = (lv_style_value_t *)style->v_p.values_and_props;
                value_adjustment_helper(prop_and_meta, value, &props[i], &values[i]);
 80210c8:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 80210cc:	4641      	mov	r1, r8
 80210ce:	4630      	mov	r0, r6
 80210d0:	47b8      	blx	r7
                return;
 80210d2:	e03a      	b.n	802114a <lv_style_set_prop_internal+0xc8>
            }
        }

        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 80210d4:	1c59      	adds	r1, r3, #1
 80210d6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        uint8_t * values_and_props = lv_mem_realloc(style->v_p.values_and_props, size);
 80210da:	0049      	lsls	r1, r1, #1
 80210dc:	f7f5 fc56 	bl	801698c <lv_mem_realloc>
        if(values_and_props == NULL) return;
 80210e0:	4602      	mov	r2, r0
 80210e2:	b390      	cbz	r0, 802114a <lv_style_set_prop_internal+0xc8>
        style->v_p.values_and_props = values_and_props;
 80210e4:	6020      	str	r0, [r4, #0]

        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 80210e6:	79e3      	ldrb	r3, [r4, #7]
 80210e8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
        props = (uint16_t *)tmp;
        /*Shift all props to make place for the value before them*/
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80210ec:	3b01      	subs	r3, #1
 80210ee:	e005      	b.n	80210fc <lv_style_set_prop_internal+0x7a>
            props[i + sizeof(lv_style_value_t) / sizeof(uint16_t)] = props[i];
 80210f0:	1c98      	adds	r0, r3, #2
 80210f2:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 80210f6:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
        for(i = style->prop_cnt - 1; i >= 0; i--) {
 80210fa:	3b01      	subs	r3, #1
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	daf7      	bge.n	80210f0 <lv_style_set_prop_internal+0x6e>
        }
        style->prop_cnt++;
 8021100:	79e1      	ldrb	r1, [r4, #7]
 8021102:	3101      	adds	r1, #1
 8021104:	b2c9      	uxtb	r1, r1
 8021106:	71e1      	strb	r1, [r4, #7]
        tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
        props = (uint16_t *)tmp;
        lv_style_value_t * values = (lv_style_value_t *)values_and_props;

        /*Set the new property and value*/
        value_adjustment_helper(prop_and_meta, value, &props[style->prop_cnt - 1], &values[style->prop_cnt - 1]);
 8021108:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802110c:	3b01      	subs	r3, #1
 802110e:	005b      	lsls	r3, r3, #1
 8021110:	f101 4080 	add.w	r0, r1, #1073741824	@ 0x40000000
 8021114:	3801      	subs	r0, #1
 8021116:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 802111a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 802111e:	440a      	add	r2, r1
 8021120:	4641      	mov	r1, r8
 8021122:	4630      	mov	r0, r6
 8021124:	47b8      	blx	r7
 8021126:	e008      	b.n	802113a <lv_style_set_prop_internal+0xb8>
    }
    else if(style->prop_cnt == 1) {
 8021128:	2b01      	cmp	r3, #1
 802112a:	d010      	beq.n	802114e <lv_style_set_prop_internal+0xcc>
        props[0] = style->prop1;
        values[0] = value_tmp;
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
    }
    else {
        style->prop_cnt = 1;
 802112c:	2301      	movs	r3, #1
 802112e:	71c3      	strb	r3, [r0, #7]
        value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 8021130:	4603      	mov	r3, r0
 8021132:	1d02      	adds	r2, r0, #4
 8021134:	4641      	mov	r1, r8
 8021136:	4630      	mov	r0, r6
 8021138:	47b8      	blx	r7
    }

    uint8_t group = _lv_style_get_prop_group(prop_id);
 802113a:	4628      	mov	r0, r5
 802113c:	f7ff ff99 	bl	8021072 <_lv_style_get_prop_group>
    style->has_group |= 1 << group;
 8021140:	79a3      	ldrb	r3, [r4, #6]
 8021142:	2201      	movs	r2, #1
 8021144:	4082      	lsls	r2, r0
 8021146:	4313      	orrs	r3, r2
 8021148:	71a3      	strb	r3, [r4, #6]
}
 802114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(LV_STYLE_PROP_ID_MASK(style->prop1) == prop_id) {
 802114e:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8021152:	42aa      	cmp	r2, r5
 8021154:	d01b      	beq.n	802118e <lv_style_set_prop_internal+0x10c>
        size_t size = (style->prop_cnt + 1) * (sizeof(lv_style_value_t) + sizeof(uint16_t));
 8021156:	3301      	adds	r3, #1
 8021158:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        uint8_t * values_and_props = lv_mem_alloc(size);
 802115c:	0058      	lsls	r0, r3, #1
 802115e:	f7f5 fbdb 	bl	8016918 <lv_mem_alloc>
        if(values_and_props == NULL) return;
 8021162:	4603      	mov	r3, r0
 8021164:	2800      	cmp	r0, #0
 8021166:	d0f0      	beq.n	802114a <lv_style_set_prop_internal+0xc8>
        lv_style_value_t value_tmp = style->v_p.value1;
 8021168:	6820      	ldr	r0, [r4, #0]
        style->v_p.values_and_props = values_and_props;
 802116a:	6023      	str	r3, [r4, #0]
        style->prop_cnt++;
 802116c:	79e1      	ldrb	r1, [r4, #7]
 802116e:	3101      	adds	r1, #1
 8021170:	b2c9      	uxtb	r1, r1
 8021172:	71e1      	strb	r1, [r4, #7]
        uint8_t * tmp = values_and_props + style->prop_cnt * sizeof(lv_style_value_t);
 8021174:	eb03 0281 	add.w	r2, r3, r1, lsl #2
        props[0] = style->prop1;
 8021178:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 802117c:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
        values[0] = value_tmp;
 8021180:	f843 0b04 	str.w	r0, [r3], #4
        value_adjustment_helper(prop_and_meta, value, &props[1], &values[1]);
 8021184:	3202      	adds	r2, #2
 8021186:	4641      	mov	r1, r8
 8021188:	4630      	mov	r0, r6
 802118a:	47b8      	blx	r7
 802118c:	e7d5      	b.n	802113a <lv_style_set_prop_internal+0xb8>
            value_adjustment_helper(prop_and_meta, value, &style->prop1, &style->v_p.value1);
 802118e:	4603      	mov	r3, r0
 8021190:	1d02      	adds	r2, r0, #4
 8021192:	4641      	mov	r1, r8
 8021194:	4630      	mov	r0, r6
 8021196:	47b8      	blx	r7
            return;
 8021198:	e7d7      	b.n	802114a <lv_style_set_prop_internal+0xc8>
	...

0802119c <lv_style_set_prop>:
{
 802119c:	b508      	push	{r3, lr}
    lv_style_set_prop_internal(style, prop, value, lv_style_set_prop_helper);
 802119e:	4b02      	ldr	r3, [pc, #8]	@ (80211a8 <lv_style_set_prop+0xc>)
 80211a0:	f7ff ff6f 	bl	8021082 <lv_style_set_prop_internal>
}
 80211a4:	bd08      	pop	{r3, pc}
 80211a6:	bf00      	nop
 80211a8:	08020d01 	.word	0x08020d01

080211ac <_lv_style_prop_lookup_flags>:
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80211ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80211b0:	4298      	cmp	r0, r3
 80211b2:	d012      	beq.n	80211da <_lv_style_prop_lookup_flags+0x2e>
    if(prop == LV_STYLE_PROP_INV) return 0;
 80211b4:	b198      	cbz	r0, 80211de <_lv_style_prop_lookup_flags+0x32>
    if(prop < _LV_STYLE_NUM_BUILT_IN_PROPS)
 80211b6:	2870      	cmp	r0, #112	@ 0x70
 80211b8:	d90a      	bls.n	80211d0 <_lv_style_prop_lookup_flags+0x24>
    prop -= _LV_STYLE_NUM_BUILT_IN_PROPS;
 80211ba:	3871      	subs	r0, #113	@ 0x71
 80211bc:	b280      	uxth	r0, r0
    if(LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table) != NULL && prop < _lv_style_custom_prop_flag_lookup_table_size)
 80211be:	4b0a      	ldr	r3, [pc, #40]	@ (80211e8 <_lv_style_prop_lookup_flags+0x3c>)
 80211c0:	681b      	ldr	r3, [r3, #0]
 80211c2:	b173      	cbz	r3, 80211e2 <_lv_style_prop_lookup_flags+0x36>
 80211c4:	4a09      	ldr	r2, [pc, #36]	@ (80211ec <_lv_style_prop_lookup_flags+0x40>)
 80211c6:	6812      	ldr	r2, [r2, #0]
 80211c8:	4290      	cmp	r0, r2
 80211ca:	d304      	bcc.n	80211d6 <_lv_style_prop_lookup_flags+0x2a>
    return 0;
 80211cc:	2000      	movs	r0, #0
}
 80211ce:	4770      	bx	lr
        return _lv_style_builtin_prop_flag_lookup_table[prop];
 80211d0:	4b07      	ldr	r3, [pc, #28]	@ (80211f0 <_lv_style_prop_lookup_flags+0x44>)
 80211d2:	5c18      	ldrb	r0, [r3, r0]
 80211d4:	4770      	bx	lr
        return LV_GC_ROOT(_lv_style_custom_prop_flag_lookup_table)[prop];
 80211d6:	5c18      	ldrb	r0, [r3, r0]
 80211d8:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_ANY) return LV_STYLE_PROP_ALL; /*Any prop can have any flags*/
 80211da:	201f      	movs	r0, #31
 80211dc:	4770      	bx	lr
    if(prop == LV_STYLE_PROP_INV) return 0;
 80211de:	2000      	movs	r0, #0
 80211e0:	4770      	bx	lr
    return 0;
 80211e2:	2000      	movs	r0, #0
 80211e4:	4770      	bx	lr
 80211e6:	bf00      	nop
 80211e8:	20006668 	.word	0x20006668
 80211ec:	200088f0 	.word	0x200088f0
 80211f0:	0802df08 	.word	0x0802df08

080211f4 <lv_style_set_width>:
#include "lv_style.h"

void lv_style_set_width(lv_style_t * style, lv_coord_t value)
{
 80211f4:	b508      	push	{r3, lr}
 80211f6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_WIDTH, v);
 80211f8:	2101      	movs	r1, #1
 80211fa:	f7ff ffcf 	bl	802119c <lv_style_set_prop>
}
 80211fe:	bd08      	pop	{r3, pc}

08021200 <lv_style_set_max_width>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_WIDTH, v);
}

void lv_style_set_max_width(lv_style_t * style, lv_coord_t value)
{
 8021200:	b508      	push	{r3, lr}
 8021202:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_WIDTH, v);
 8021204:	2103      	movs	r1, #3
 8021206:	f7ff ffc9 	bl	802119c <lv_style_set_prop>
}
 802120a:	bd08      	pop	{r3, pc}

0802120c <lv_style_set_height>:

void lv_style_set_height(lv_style_t * style, lv_coord_t value)
{
 802120c:	b508      	push	{r3, lr}
 802120e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_HEIGHT, v);
 8021210:	2104      	movs	r1, #4
 8021212:	f7ff ffc3 	bl	802119c <lv_style_set_prop>
}
 8021216:	bd08      	pop	{r3, pc}

08021218 <lv_style_set_max_height>:
    };
    lv_style_set_prop(style, LV_STYLE_MIN_HEIGHT, v);
}

void lv_style_set_max_height(lv_style_t * style, lv_coord_t value)
{
 8021218:	b508      	push	{r3, lr}
 802121a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_MAX_HEIGHT, v);
 802121c:	2106      	movs	r1, #6
 802121e:	f7ff ffbd 	bl	802119c <lv_style_set_prop>
}
 8021222:	bd08      	pop	{r3, pc}

08021224 <lv_style_set_transform_width>:
    };
    lv_style_set_prop(style, LV_STYLE_ALIGN, v);
}

void lv_style_set_transform_width(lv_style_t * style, lv_coord_t value)
{
 8021224:	b508      	push	{r3, lr}
 8021226:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_WIDTH, v);
 8021228:	2169      	movs	r1, #105	@ 0x69
 802122a:	f7ff ffb7 	bl	802119c <lv_style_set_prop>
}
 802122e:	bd08      	pop	{r3, pc}

08021230 <lv_style_set_transform_height>:

void lv_style_set_transform_height(lv_style_t * style, lv_coord_t value)
{
 8021230:	b508      	push	{r3, lr}
 8021232:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_HEIGHT, v);
 8021234:	216a      	movs	r1, #106	@ 0x6a
 8021236:	f7ff ffb1 	bl	802119c <lv_style_set_prop>
}
 802123a:	bd08      	pop	{r3, pc}

0802123c <lv_style_set_pad_top>:
    };
    lv_style_set_prop(style, LV_STYLE_TRANSFORM_PIVOT_Y, v);
}

void lv_style_set_pad_top(lv_style_t * style, lv_coord_t value)
{
 802123c:	b508      	push	{r3, lr}
 802123e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_TOP, v);
 8021240:	2110      	movs	r1, #16
 8021242:	f7ff ffab 	bl	802119c <lv_style_set_prop>
}
 8021246:	bd08      	pop	{r3, pc}

08021248 <lv_style_set_pad_bottom>:

void lv_style_set_pad_bottom(lv_style_t * style, lv_coord_t value)
{
 8021248:	b508      	push	{r3, lr}
 802124a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_BOTTOM, v);
 802124c:	2111      	movs	r1, #17
 802124e:	f7ff ffa5 	bl	802119c <lv_style_set_prop>
}
 8021252:	bd08      	pop	{r3, pc}

08021254 <lv_style_set_pad_left>:

void lv_style_set_pad_left(lv_style_t * style, lv_coord_t value)
{
 8021254:	b508      	push	{r3, lr}
 8021256:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_LEFT, v);
 8021258:	2112      	movs	r1, #18
 802125a:	f7ff ff9f 	bl	802119c <lv_style_set_prop>
}
 802125e:	bd08      	pop	{r3, pc}

08021260 <lv_style_set_pad_right>:

void lv_style_set_pad_right(lv_style_t * style, lv_coord_t value)
{
 8021260:	b508      	push	{r3, lr}
 8021262:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_RIGHT, v);
 8021264:	2113      	movs	r1, #19
 8021266:	f7ff ff99 	bl	802119c <lv_style_set_prop>
}
 802126a:	bd08      	pop	{r3, pc}

0802126c <lv_style_set_pad_row>:

void lv_style_set_pad_row(lv_style_t * style, lv_coord_t value)
{
 802126c:	b508      	push	{r3, lr}
 802126e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_ROW, v);
 8021270:	2114      	movs	r1, #20
 8021272:	f7ff ff93 	bl	802119c <lv_style_set_prop>
}
 8021276:	bd08      	pop	{r3, pc}

08021278 <lv_style_set_pad_column>:

void lv_style_set_pad_column(lv_style_t * style, lv_coord_t value)
{
 8021278:	b508      	push	{r3, lr}
 802127a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_PAD_COLUMN, v);
 802127c:	2115      	movs	r1, #21
 802127e:	f7ff ff8d 	bl	802119c <lv_style_set_prop>
}
 8021282:	bd08      	pop	{r3, pc}

08021284 <lv_style_set_bg_color>:

void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
{
 8021284:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_COLOR, v);
 8021286:	b28a      	uxth	r2, r1
 8021288:	2120      	movs	r1, #32
 802128a:	f7ff ff87 	bl	802119c <lv_style_set_prop>
}
 802128e:	bd08      	pop	{r3, pc}

08021290 <lv_style_set_bg_opa>:

void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
{
 8021290:	b508      	push	{r3, lr}
 8021292:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BG_OPA, v);
 8021294:	2121      	movs	r1, #33	@ 0x21
 8021296:	f7ff ff81 	bl	802119c <lv_style_set_prop>
}
 802129a:	bd08      	pop	{r3, pc}

0802129c <lv_style_set_bg_grad_color>:

void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
{
 802129c:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_GRAD_COLOR, v);
 802129e:	b28a      	uxth	r2, r1
 80212a0:	2122      	movs	r1, #34	@ 0x22
 80212a2:	f7ff ff7b 	bl	802119c <lv_style_set_prop>
}
 80212a6:	bd08      	pop	{r3, pc}

080212a8 <lv_style_set_bg_img_src>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_DITHER_MODE, v);
}

void lv_style_set_bg_img_src(lv_style_t * style, const void * value)
{
 80212a8:	b508      	push	{r3, lr}
 80212aa:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_SRC, v);
 80212ac:	2128      	movs	r1, #40	@ 0x28
 80212ae:	f7ff ff75 	bl	802119c <lv_style_set_prop>
}
 80212b2:	bd08      	pop	{r3, pc}

080212b4 <lv_style_set_border_color>:
    };
    lv_style_set_prop(style, LV_STYLE_BG_IMG_TILED, v);
}

void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
{
 80212b4:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_COLOR, v);
 80212b6:	b28a      	uxth	r2, r1
 80212b8:	2130      	movs	r1, #48	@ 0x30
 80212ba:	f7ff ff6f 	bl	802119c <lv_style_set_prop>
}
 80212be:	bd08      	pop	{r3, pc}

080212c0 <lv_style_set_border_opa>:

void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
{
 80212c0:	b508      	push	{r3, lr}
 80212c2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_OPA, v);
 80212c4:	2131      	movs	r1, #49	@ 0x31
 80212c6:	f7ff ff69 	bl	802119c <lv_style_set_prop>
}
 80212ca:	bd08      	pop	{r3, pc}

080212cc <lv_style_set_border_width>:

void lv_style_set_border_width(lv_style_t * style, lv_coord_t value)
{
 80212cc:	b508      	push	{r3, lr}
 80212ce:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_WIDTH, v);
 80212d0:	2132      	movs	r1, #50	@ 0x32
 80212d2:	f7ff ff63 	bl	802119c <lv_style_set_prop>
}
 80212d6:	bd08      	pop	{r3, pc}

080212d8 <lv_style_set_border_side>:

void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
{
 80212d8:	b508      	push	{r3, lr}
 80212da:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_SIDE, v);
 80212dc:	2133      	movs	r1, #51	@ 0x33
 80212de:	f7ff ff5d 	bl	802119c <lv_style_set_prop>
}
 80212e2:	bd08      	pop	{r3, pc}

080212e4 <lv_style_set_border_post>:

void lv_style_set_border_post(lv_style_t * style, bool value)
{
 80212e4:	b508      	push	{r3, lr}
 80212e6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_BORDER_POST, v);
 80212e8:	2134      	movs	r1, #52	@ 0x34
 80212ea:	f7ff ff57 	bl	802119c <lv_style_set_prop>
}
 80212ee:	bd08      	pop	{r3, pc}

080212f0 <lv_style_set_outline_width>:

void lv_style_set_outline_width(lv_style_t * style, lv_coord_t value)
{
 80212f0:	b508      	push	{r3, lr}
 80212f2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_WIDTH, v);
 80212f4:	2135      	movs	r1, #53	@ 0x35
 80212f6:	f7ff ff51 	bl	802119c <lv_style_set_prop>
}
 80212fa:	bd08      	pop	{r3, pc}

080212fc <lv_style_set_outline_color>:

void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
{
 80212fc:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_COLOR, v);
 80212fe:	b28a      	uxth	r2, r1
 8021300:	2136      	movs	r1, #54	@ 0x36
 8021302:	f7ff ff4b 	bl	802119c <lv_style_set_prop>
}
 8021306:	bd08      	pop	{r3, pc}

08021308 <lv_style_set_outline_opa>:

void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
{
 8021308:	b508      	push	{r3, lr}
 802130a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_OPA, v);
 802130c:	2137      	movs	r1, #55	@ 0x37
 802130e:	f7ff ff45 	bl	802119c <lv_style_set_prop>
}
 8021312:	bd08      	pop	{r3, pc}

08021314 <lv_style_set_outline_pad>:

void lv_style_set_outline_pad(lv_style_t * style, lv_coord_t value)
{
 8021314:	b508      	push	{r3, lr}
 8021316:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_OUTLINE_PAD, v);
 8021318:	2138      	movs	r1, #56	@ 0x38
 802131a:	f7ff ff3f 	bl	802119c <lv_style_set_prop>
}
 802131e:	bd08      	pop	{r3, pc}

08021320 <lv_style_set_shadow_width>:

void lv_style_set_shadow_width(lv_style_t * style, lv_coord_t value)
{
 8021320:	b508      	push	{r3, lr}
 8021322:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_WIDTH, v);
 8021324:	2140      	movs	r1, #64	@ 0x40
 8021326:	f7ff ff39 	bl	802119c <lv_style_set_prop>
}
 802132a:	bd08      	pop	{r3, pc}

0802132c <lv_style_set_shadow_ofs_y>:
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_X, v);
}

void lv_style_set_shadow_ofs_y(lv_style_t * style, lv_coord_t value)
{
 802132c:	b508      	push	{r3, lr}
 802132e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OFS_Y, v);
 8021330:	2142      	movs	r1, #66	@ 0x42
 8021332:	f7ff ff33 	bl	802119c <lv_style_set_prop>
}
 8021336:	bd08      	pop	{r3, pc}

08021338 <lv_style_set_shadow_spread>:

void lv_style_set_shadow_spread(lv_style_t * style, lv_coord_t value)
{
 8021338:	b508      	push	{r3, lr}
 802133a:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_SPREAD, v);
 802133c:	2143      	movs	r1, #67	@ 0x43
 802133e:	f7ff ff2d 	bl	802119c <lv_style_set_prop>
}
 8021342:	bd08      	pop	{r3, pc}

08021344 <lv_style_set_shadow_color>:

void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
{
 8021344:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_COLOR, v);
 8021346:	b28a      	uxth	r2, r1
 8021348:	2144      	movs	r1, #68	@ 0x44
 802134a:	f7ff ff27 	bl	802119c <lv_style_set_prop>
}
 802134e:	bd08      	pop	{r3, pc}

08021350 <lv_style_set_shadow_opa>:

void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
{
 8021350:	b508      	push	{r3, lr}
 8021352:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_SHADOW_OPA, v);
 8021354:	2145      	movs	r1, #69	@ 0x45
 8021356:	f7ff ff21 	bl	802119c <lv_style_set_prop>
}
 802135a:	bd08      	pop	{r3, pc}

0802135c <lv_style_set_line_width>:
    };
    lv_style_set_prop(style, LV_STYLE_IMG_RECOLOR_OPA, v);
}

void lv_style_set_line_width(lv_style_t * style, lv_coord_t value)
{
 802135c:	b508      	push	{r3, lr}
 802135e:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_WIDTH, v);
 8021360:	2149      	movs	r1, #73	@ 0x49
 8021362:	f7ff ff1b 	bl	802119c <lv_style_set_prop>
}
 8021366:	bd08      	pop	{r3, pc}

08021368 <lv_style_set_line_color>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_ROUNDED, v);
}

void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
{
 8021368:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_LINE_COLOR, v);
 802136a:	b28a      	uxth	r2, r1
 802136c:	214d      	movs	r1, #77	@ 0x4d
 802136e:	f7ff ff15 	bl	802119c <lv_style_set_prop>
}
 8021372:	bd08      	pop	{r3, pc}

08021374 <lv_style_set_arc_width>:
    };
    lv_style_set_prop(style, LV_STYLE_LINE_OPA, v);
}

void lv_style_set_arc_width(lv_style_t * style, lv_coord_t value)
{
 8021374:	b508      	push	{r3, lr}
 8021376:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_WIDTH, v);
 8021378:	2150      	movs	r1, #80	@ 0x50
 802137a:	f7ff ff0f 	bl	802119c <lv_style_set_prop>
}
 802137e:	bd08      	pop	{r3, pc}

08021380 <lv_style_set_arc_rounded>:

void lv_style_set_arc_rounded(lv_style_t * style, bool value)
{
 8021380:	b508      	push	{r3, lr}
 8021382:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_ROUNDED, v);
 8021384:	2151      	movs	r1, #81	@ 0x51
 8021386:	f7ff ff09 	bl	802119c <lv_style_set_prop>
}
 802138a:	bd08      	pop	{r3, pc}

0802138c <lv_style_set_arc_color>:

void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
{
 802138c:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_ARC_COLOR, v);
 802138e:	b28a      	uxth	r2, r1
 8021390:	2152      	movs	r1, #82	@ 0x52
 8021392:	f7ff ff03 	bl	802119c <lv_style_set_prop>
}
 8021396:	bd08      	pop	{r3, pc}

08021398 <lv_style_set_text_color>:
    };
    lv_style_set_prop(style, LV_STYLE_ARC_IMG_SRC, v);
}

void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
{
 8021398:	b508      	push	{r3, lr}
    lv_style_value_t v = {
        .color = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_COLOR, v);
 802139a:	b28a      	uxth	r2, r1
 802139c:	2155      	movs	r1, #85	@ 0x55
 802139e:	f7ff fefd 	bl	802119c <lv_style_set_prop>
}
 80213a2:	bd08      	pop	{r3, pc}

080213a4 <lv_style_set_text_font>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_OPA, v);
}

void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
{
 80213a4:	b508      	push	{r3, lr}
 80213a6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_FONT, v);
 80213a8:	2157      	movs	r1, #87	@ 0x57
 80213aa:	f7ff fef7 	bl	802119c <lv_style_set_prop>
}
 80213ae:	bd08      	pop	{r3, pc}

080213b0 <lv_style_set_text_line_space>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LETTER_SPACE, v);
}

void lv_style_set_text_line_space(lv_style_t * style, lv_coord_t value)
{
 80213b0:	b508      	push	{r3, lr}
 80213b2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_LINE_SPACE, v);
 80213b4:	2159      	movs	r1, #89	@ 0x59
 80213b6:	f7ff fef1 	bl	802119c <lv_style_set_prop>
}
 80213ba:	bd08      	pop	{r3, pc}

080213bc <lv_style_set_text_align>:
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_DECOR, v);
}

void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
{
 80213bc:	b508      	push	{r3, lr}
 80213be:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_TEXT_ALIGN, v);
 80213c0:	215b      	movs	r1, #91	@ 0x5b
 80213c2:	f7ff feeb 	bl	802119c <lv_style_set_prop>
}
 80213c6:	bd08      	pop	{r3, pc}

080213c8 <lv_style_set_radius>:

void lv_style_set_radius(lv_style_t * style, lv_coord_t value)
{
 80213c8:	b508      	push	{r3, lr}
 80213ca:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_RADIUS, v);
 80213cc:	210b      	movs	r1, #11
 80213ce:	f7ff fee5 	bl	802119c <lv_style_set_prop>
}
 80213d2:	bd08      	pop	{r3, pc}

080213d4 <lv_style_set_clip_corner>:

void lv_style_set_clip_corner(lv_style_t * style, bool value)
{
 80213d4:	b508      	push	{r3, lr}
 80213d6:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_CLIP_CORNER, v);
 80213d8:	2117      	movs	r1, #23
 80213da:	f7ff fedf 	bl	802119c <lv_style_set_prop>
}
 80213de:	bd08      	pop	{r3, pc}

080213e0 <lv_style_set_color_filter_dsc>:
    };
    lv_style_set_prop(style, LV_STYLE_OPA_LAYERED, v);
}

void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
{
 80213e0:	b508      	push	{r3, lr}
 80213e2:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_DSC, v);
 80213e4:	2162      	movs	r1, #98	@ 0x62
 80213e6:	f7ff fed9 	bl	802119c <lv_style_set_prop>
}
 80213ea:	bd08      	pop	{r3, pc}

080213ec <lv_style_set_color_filter_opa>:

void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
{
 80213ec:	b508      	push	{r3, lr}
 80213ee:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_COLOR_FILTER_OPA, v);
 80213f0:	2163      	movs	r1, #99	@ 0x63
 80213f2:	f7ff fed3 	bl	802119c <lv_style_set_prop>
}
 80213f6:	bd08      	pop	{r3, pc}

080213f8 <lv_style_set_anim_time>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM, v);
}

void lv_style_set_anim_time(lv_style_t * style, uint32_t value)
{
 80213f8:	b508      	push	{r3, lr}
 80213fa:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .num = (int32_t)value
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_TIME, v);
 80213fc:	2165      	movs	r1, #101	@ 0x65
 80213fe:	f7ff fecd 	bl	802119c <lv_style_set_prop>
}
 8021402:	bd08      	pop	{r3, pc}

08021404 <lv_style_set_transition>:
    };
    lv_style_set_prop(style, LV_STYLE_ANIM_SPEED, v);
}

void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
{
 8021404:	b508      	push	{r3, lr}
 8021406:	460a      	mov	r2, r1
    lv_style_value_t v = {
        .ptr = value
    };
    lv_style_set_prop(style, LV_STYLE_TRANSITION, v);
 8021408:	2167      	movs	r1, #103	@ 0x67
 802140a:	f7ff fec7 	bl	802119c <lv_style_set_prop>
}
 802140e:	bd08      	pop	{r3, pc}

08021410 <lv_switch_anim_ready>:

/**
 * Resets the switch's animation state to "no animation in progress".
 */
static void lv_switch_anim_ready(lv_anim_t * a)
{
 8021410:	b508      	push	{r3, lr}
    lv_switch_t * sw = a->var;
 8021412:	6800      	ldr	r0, [r0, #0]
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 8021414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021418:	6243      	str	r3, [r0, #36]	@ 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 802141a:	f7f8 fd44 	bl	8019ea6 <lv_obj_invalidate>
}
 802141e:	bd08      	pop	{r3, pc}

08021420 <lv_switch_anim_exec_cb>:
{
 8021420:	b508      	push	{r3, lr}
    sw->anim_state = value;
 8021422:	6241      	str	r1, [r0, #36]	@ 0x24
    lv_obj_invalidate((lv_obj_t *)sw);
 8021424:	f7f8 fd3f 	bl	8019ea6 <lv_obj_invalidate>
}
 8021428:	bd08      	pop	{r3, pc}

0802142a <lv_switch_destructor>:
{
 802142a:	b508      	push	{r3, lr}
 802142c:	4608      	mov	r0, r1
    lv_anim_del(sw, NULL);
 802142e:	2100      	movs	r1, #0
 8021430:	f7df f9aa 	bl	8000788 <lv_anim_del>
}
 8021434:	bd08      	pop	{r3, pc}
	...

08021438 <lv_switch_trigger_anim>:
/**
 * Starts an animation for the switch knob. if the anim_time style property is greater than 0
 * @param obj the switch to animate
 */
static void lv_switch_trigger_anim(lv_obj_t * obj)
{
 8021438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802143c:	b092      	sub	sp, #72	@ 0x48
 802143e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 8021440:	2265      	movs	r2, #101	@ 0x65
 8021442:	2100      	movs	r1, #0
 8021444:	f7fb f956 	bl	801c6f4 <lv_obj_get_style_prop>
    LV_ASSERT_OBJ(obj, MY_CLASS);
    lv_switch_t * sw = (lv_switch_t *)obj;

    uint32_t anim_dur_full = lv_obj_get_style_anim_time(obj, LV_PART_MAIN);

    if(anim_dur_full > 0) {
 8021448:	b910      	cbnz	r0, 8021450 <lv_switch_trigger_anim+0x18>
        lv_anim_set_values(&a, anim_start, anim_end);
        lv_anim_set_ready_cb(&a, lv_switch_anim_ready);
        lv_anim_set_time(&a, anim_dur);
        lv_anim_start(&a);
    }
}
 802144a:	b012      	add	sp, #72	@ 0x48
 802144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021450:	4607      	mov	r7, r0
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 8021452:	4620      	mov	r0, r4
 8021454:	f7f7 f827 	bl	80184a6 <lv_obj_get_state>
 8021458:	f000 0001 	and.w	r0, r0, #1
        if(sw->anim_state == LV_SWITCH_ANIM_STATE_INV) {
 802145c:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 802145e:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8021462:	d01f      	beq.n	80214a4 <lv_switch_trigger_anim+0x6c>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 8021464:	b340      	cbz	r0, 80214b8 <lv_switch_trigger_anim+0x80>
 8021466:	f44f 7880 	mov.w	r8, #256	@ 0x100
        uint32_t anim_dur = (anim_dur_full * LV_ABS(anim_start - anim_end)) / LV_SWITCH_ANIM_STATE_END;
 802146a:	eba6 0508 	sub.w	r5, r6, r8
 802146e:	2d00      	cmp	r5, #0
 8021470:	bfb8      	it	lt
 8021472:	426d      	neglt	r5, r5
 8021474:	fb07 f505 	mul.w	r5, r7, r5
 8021478:	0a2d      	lsrs	r5, r5, #8
        lv_anim_del(sw, NULL);
 802147a:	2100      	movs	r1, #0
 802147c:	4620      	mov	r0, r4
 802147e:	f7df f983 	bl	8000788 <lv_anim_del>
        lv_anim_init(&a);
 8021482:	a801      	add	r0, sp, #4
 8021484:	f7df f966 	bl	8000754 <lv_anim_init>
    a->var = var;
 8021488:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 802148a:	4b0d      	ldr	r3, [pc, #52]	@ (80214c0 <lv_switch_trigger_anim+0x88>)
 802148c:	9302      	str	r3, [sp, #8]
    a->start_value = start;
 802148e:	9609      	str	r6, [sp, #36]	@ 0x24
    a->current_value = start;
 8021490:	960a      	str	r6, [sp, #40]	@ 0x28
    a->end_value = end;
 8021492:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    a->ready_cb = ready_cb;
 8021496:	4b0b      	ldr	r3, [pc, #44]	@ (80214c4 <lv_switch_trigger_anim+0x8c>)
 8021498:	9304      	str	r3, [sp, #16]
    a->time = duration;
 802149a:	950c      	str	r5, [sp, #48]	@ 0x30
        lv_anim_start(&a);
 802149c:	a801      	add	r0, sp, #4
 802149e:	f7df f9a5 	bl	80007ec <lv_anim_start>
}
 80214a2:	e7d2      	b.n	802144a <lv_switch_trigger_anim+0x12>
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80214a4:	b118      	cbz	r0, 80214ae <lv_switch_trigger_anim+0x76>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80214a6:	f44f 7880 	mov.w	r8, #256	@ 0x100
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80214aa:	2600      	movs	r6, #0
 80214ac:	e7dd      	b.n	802146a <lv_switch_trigger_anim+0x32>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80214ae:	f04f 0800 	mov.w	r8, #0
            anim_start = chk ? LV_SWITCH_ANIM_STATE_START : LV_SWITCH_ANIM_STATE_END;
 80214b2:	f44f 7680 	mov.w	r6, #256	@ 0x100
 80214b6:	e7d8      	b.n	802146a <lv_switch_trigger_anim+0x32>
            anim_end   = chk ? LV_SWITCH_ANIM_STATE_END : LV_SWITCH_ANIM_STATE_START;
 80214b8:	f04f 0800 	mov.w	r8, #0
 80214bc:	e7d5      	b.n	802146a <lv_switch_trigger_anim+0x32>
 80214be:	bf00      	nop
 80214c0:	08021421 	.word	0x08021421
 80214c4:	08021411 	.word	0x08021411

080214c8 <draw_main>:
{
 80214c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214cc:	b0a0      	sub	sp, #128	@ 0x80
 80214ce:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80214d0:	f7ef fc24 	bl	8010d1c <lv_event_get_target>
 80214d4:	4604      	mov	r4, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80214d6:	4628      	mov	r0, r5
 80214d8:	f7ef fc98 	bl	8010e0c <lv_event_get_draw_ctx>
 80214dc:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80214de:	2212      	movs	r2, #18
 80214e0:	2100      	movs	r1, #0
 80214e2:	4620      	mov	r0, r4
 80214e4:	f7fb f906 	bl	801c6f4 <lv_obj_get_style_prop>
 80214e8:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80214ea:	2213      	movs	r2, #19
 80214ec:	2100      	movs	r1, #0
 80214ee:	4620      	mov	r0, r4
 80214f0:	f7fb f900 	bl	801c6f4 <lv_obj_get_style_prop>
 80214f4:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80214f6:	2210      	movs	r2, #16
 80214f8:	2100      	movs	r1, #0
 80214fa:	4620      	mov	r0, r4
 80214fc:	f7fb f8fa 	bl	801c6f4 <lv_obj_get_style_prop>
 8021500:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8021502:	2211      	movs	r2, #17
 8021504:	2100      	movs	r1, #0
 8021506:	4620      	mov	r0, r4
 8021508:	f7fb f8f4 	bl	801c6f4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 802150c:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 8021510:	f8ad c078 	strh.w	ip, [sp, #120]	@ 0x78
    dest->y1 = src->y1;
 8021514:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8021518:	f8ad 107a 	strh.w	r1, [sp, #122]	@ 0x7a
    dest->x2 = src->x2;
 802151c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021520:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
    dest->y2 = src->y2;
 8021524:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021528:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
    indic_area.x1 += bg_left;
 802152c:	fa18 fc8c 	uxtah	ip, r8, ip
 8021530:	f8ad c078 	strh.w	ip, [sp, #120]	@ 0x78
    indic_area.x2 -= bg_right;
 8021534:	b292      	uxth	r2, r2
 8021536:	1bd2      	subs	r2, r2, r7
 8021538:	f8ad 207c 	strh.w	r2, [sp, #124]	@ 0x7c
    indic_area.y1 += bg_top;
 802153c:	fa15 f181 	uxtah	r1, r5, r1
 8021540:	f8ad 107a 	strh.w	r1, [sp, #122]	@ 0x7a
    indic_area.y2 -= bg_bottom;
 8021544:	b29b      	uxth	r3, r3
 8021546:	1a1b      	subs	r3, r3, r0
 8021548:	f8ad 307e 	strh.w	r3, [sp, #126]	@ 0x7e
    lv_draw_rect_dsc_init(&draw_indic_dsc);
 802154c:	a810      	add	r0, sp, #64	@ 0x40
 802154e:	f7e8 fb7f 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_INDICATOR, &draw_indic_dsc);
 8021552:	aa10      	add	r2, sp, #64	@ 0x40
 8021554:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8021558:	4620      	mov	r0, r4
 802155a:	f7f7 fbb3 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &draw_indic_dsc, &indic_area);
 802155e:	aa1e      	add	r2, sp, #120	@ 0x78
 8021560:	a910      	add	r1, sp, #64	@ 0x40
 8021562:	4630      	mov	r0, r6
 8021564:	f7e8 fbb6 	bl	8009cd4 <lv_draw_rect>
    lv_coord_t knob_size = lv_obj_get_height(obj);
 8021568:	4620      	mov	r0, r4
 802156a:	f7f8 f8b8 	bl	80196de <lv_obj_get_height>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 802156e:	8b25      	ldrh	r5, [r4, #24]
 8021570:	8aa3      	ldrh	r3, [r4, #20]
 8021572:	1aed      	subs	r5, r5, r3
 8021574:	b2ad      	uxth	r5, r5
 8021576:	3501      	adds	r5, #1
 8021578:	b2ad      	uxth	r5, r5
    lv_coord_t anim_length = lv_area_get_width(&obj->coords) - knob_size;
 802157a:	b287      	uxth	r7, r0
 802157c:	1bed      	subs	r5, r5, r7
 802157e:	fa1f f885 	uxth.w	r8, r5
 8021582:	b22d      	sxth	r5, r5
    if(LV_SWITCH_IS_ANIMATING(sw)) {
 8021584:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8021586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 802158a:	d060      	beq.n	802164e <draw_main+0x186>
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 802158c:	fb05 f303 	mul.w	r3, r5, r3
 8021590:	2b00      	cmp	r3, #0
 8021592:	db5a      	blt.n	802164a <draw_main+0x182>
 8021594:	f343 250f 	sbfx	r5, r3, #8, #16
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8021598:	2216      	movs	r2, #22
 802159a:	2100      	movs	r1, #0
 802159c:	4620      	mov	r0, r4
 802159e:	f7fb f8a9 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80215a2:	b2c0      	uxtb	r0, r0
    if(LV_BASE_DIR_RTL == lv_obj_get_style_base_dir(obj, LV_PART_MAIN)) {
 80215a4:	2801      	cmp	r0, #1
 80215a6:	d05a      	beq.n	802165e <draw_main+0x196>
    knob_area.x1 = obj->coords.x1 + anim_value_x;
 80215a8:	8aa3      	ldrh	r3, [r4, #20]
 80215aa:	442b      	add	r3, r5
 80215ac:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
    knob_area.x2 = knob_area.x1 + knob_size;
 80215b0:	fa17 f383 	uxtah	r3, r7, r3
 80215b4:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    knob_area.y1 = obj->coords.y1;
 80215b8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 80215bc:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    knob_area.y2 = obj->coords.y2;
 80215c0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80215c4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80215c8:	2212      	movs	r2, #18
 80215ca:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80215ce:	4620      	mov	r0, r4
 80215d0:	f7fb f890 	bl	801c6f4 <lv_obj_get_style_prop>
 80215d4:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80215d6:	2213      	movs	r2, #19
 80215d8:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80215dc:	4620      	mov	r0, r4
 80215de:	f7fb f889 	bl	801c6f4 <lv_obj_get_style_prop>
 80215e2:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80215e4:	2210      	movs	r2, #16
 80215e6:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80215ea:	4620      	mov	r0, r4
 80215ec:	f7fb f882 	bl	801c6f4 <lv_obj_get_style_prop>
 80215f0:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80215f2:	2211      	movs	r2, #17
 80215f4:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80215f8:	4620      	mov	r0, r4
 80215fa:	f7fb f87b 	bl	801c6f4 <lv_obj_get_style_prop>
    knob_area.x1 -= knob_left;
 80215fe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021602:	eba3 0308 	sub.w	r3, r3, r8
 8021606:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
    knob_area.x2 += knob_right;
 802160a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 802160e:	443b      	add	r3, r7
 8021610:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
    knob_area.y1 -= knob_top;
 8021614:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021618:	1b5b      	subs	r3, r3, r5
 802161a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
    knob_area.y2 += knob_bottom;
 802161e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 8021622:	4403      	add	r3, r0
 8021624:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
    lv_draw_rect_dsc_init(&knob_rect_dsc);
 8021628:	4668      	mov	r0, sp
 802162a:	f7e8 fb11 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_KNOB, &knob_rect_dsc);
 802162e:	466a      	mov	r2, sp
 8021630:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 8021634:	4620      	mov	r0, r4
 8021636:	f7f7 fb45 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_draw_rect(draw_ctx, &knob_rect_dsc, &knob_area);
 802163a:	aa0e      	add	r2, sp, #56	@ 0x38
 802163c:	4669      	mov	r1, sp
 802163e:	4630      	mov	r0, r6
 8021640:	f7e8 fb48 	bl	8009cd4 <lv_draw_rect>
}
 8021644:	b020      	add	sp, #128	@ 0x80
 8021646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        anim_value_x = (anim_length * sw->anim_state) / LV_SWITCH_ANIM_STATE_END;
 802164a:	33ff      	adds	r3, #255	@ 0xff
 802164c:	e7a2      	b.n	8021594 <draw_main+0xcc>
        bool chk = lv_obj_get_state(obj) & LV_STATE_CHECKED;
 802164e:	4620      	mov	r0, r4
 8021650:	f7f6 ff29 	bl	80184a6 <lv_obj_get_state>
        anim_value_x = chk ? anim_length : 0;
 8021654:	f010 0f01 	tst.w	r0, #1
 8021658:	d19e      	bne.n	8021598 <draw_main+0xd0>
 802165a:	2500      	movs	r5, #0
 802165c:	e79c      	b.n	8021598 <draw_main+0xd0>
        anim_value_x = anim_length - anim_value_x;
 802165e:	eba8 0805 	sub.w	r8, r8, r5
 8021662:	fa0f f588 	sxth.w	r5, r8
 8021666:	e79f      	b.n	80215a8 <draw_main+0xe0>

08021668 <lv_switch_event>:
{
 8021668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802166c:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802166e:	4835      	ldr	r0, [pc, #212]	@ (8021744 <lv_switch_event+0xdc>)
 8021670:	f7ef fa80 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8021674:	2801      	cmp	r0, #1
 8021676:	d001      	beq.n	802167c <lv_switch_event+0x14>
}
 8021678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_event_code_t code = lv_event_get_code(e);
 802167c:	4620      	mov	r0, r4
 802167e:	f7ef fb51 	bl	8010d24 <lv_event_get_code>
 8021682:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8021684:	4620      	mov	r0, r4
 8021686:	f7ef fb49 	bl	8010d1c <lv_event_get_target>
 802168a:	4606      	mov	r6, r0
    if(code == LV_EVENT_REFR_EXT_DRAW_SIZE) {
 802168c:	2d13      	cmp	r5, #19
 802168e:	d007      	beq.n	80216a0 <lv_switch_event+0x38>
    else if(code == LV_EVENT_VALUE_CHANGED) {
 8021690:	2d1c      	cmp	r5, #28
 8021692:	d050      	beq.n	8021736 <lv_switch_event+0xce>
    else if(code == LV_EVENT_DRAW_MAIN) {
 8021694:	2d15      	cmp	r5, #21
 8021696:	d1ef      	bne.n	8021678 <lv_switch_event+0x10>
        draw_main(e);
 8021698:	4620      	mov	r0, r4
 802169a:	f7ff ff15 	bl	80214c8 <draw_main>
 802169e:	e7eb      	b.n	8021678 <lv_switch_event+0x10>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80216a0:	2212      	movs	r2, #18
 80216a2:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80216a6:	f7fb f825 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80216aa:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80216ae:	2213      	movs	r2, #19
 80216b0:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80216b4:	4630      	mov	r0, r6
 80216b6:	f7fb f81d 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80216ba:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80216bc:	2210      	movs	r2, #16
 80216be:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80216c2:	4630      	mov	r0, r6
 80216c4:	f7fb f816 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80216c8:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80216cc:	2211      	movs	r2, #17
 80216ce:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80216d2:	4630      	mov	r0, r6
 80216d4:	f7fb f80e 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80216d8:	b205      	sxth	r5, r0
        lv_coord_t knob_size = LV_MAX4(knob_left, knob_right, knob_bottom, knob_top);
 80216da:	454d      	cmp	r5, r9
 80216dc:	bfb8      	it	lt
 80216de:	464d      	movlt	r5, r9
 80216e0:	4547      	cmp	r7, r8
 80216e2:	bfb8      	it	lt
 80216e4:	4647      	movlt	r7, r8
 80216e6:	42bd      	cmp	r5, r7
 80216e8:	bfb8      	it	lt
 80216ea:	463d      	movlt	r5, r7
        knob_size += _LV_SWITCH_KNOB_EXT_AREA_CORRECTION;
 80216ec:	3502      	adds	r5, #2
 80216ee:	b2ad      	uxth	r5, r5
        knob_size += lv_obj_calculate_ext_draw_size(obj, LV_PART_KNOB);
 80216f0:	f44f 3140 	mov.w	r1, #196608	@ 0x30000
 80216f4:	4630      	mov	r0, r6
 80216f6:	f7f7 fd7e 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 80216fa:	fa15 f580 	uxtah	r5, r5, r0
 80216fe:	b22d      	sxth	r5, r5
        lv_coord_t * s = lv_event_get_param(e);
 8021700:	4620      	mov	r0, r4
 8021702:	f7ef fb13 	bl	8010d2c <lv_event_get_param>
 8021706:	4604      	mov	r4, r0
        *s = LV_MAX(*s, knob_size);
 8021708:	f9b0 3000 	ldrsh.w	r3, [r0]
 802170c:	429d      	cmp	r5, r3
 802170e:	bfb8      	it	lt
 8021710:	461d      	movlt	r5, r3
 8021712:	8005      	strh	r5, [r0, #0]
        *s = LV_MAX(*s, lv_obj_calculate_ext_draw_size(obj, LV_PART_INDICATOR));
 8021714:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8021718:	4630      	mov	r0, r6
 802171a:	f7f7 fd6c 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 802171e:	4285      	cmp	r5, r0
 8021720:	dd03      	ble.n	802172a <lv_switch_event+0xc2>
 8021722:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021726:	8020      	strh	r0, [r4, #0]
 8021728:	e7a6      	b.n	8021678 <lv_switch_event+0x10>
 802172a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 802172e:	4630      	mov	r0, r6
 8021730:	f7f7 fd61 	bl	80191f6 <lv_obj_calculate_ext_draw_size>
 8021734:	e7f7      	b.n	8021726 <lv_switch_event+0xbe>
        lv_switch_trigger_anim(obj);
 8021736:	f7ff fe7f 	bl	8021438 <lv_switch_trigger_anim>
        lv_obj_invalidate(obj);
 802173a:	4630      	mov	r0, r6
 802173c:	f7f8 fbb3 	bl	8019ea6 <lv_obj_invalidate>
 8021740:	e79a      	b.n	8021678 <lv_switch_event+0x10>
 8021742:	bf00      	nop
 8021744:	0802df7c 	.word	0x0802df7c

08021748 <lv_switch_constructor>:
{
 8021748:	b510      	push	{r4, lr}
 802174a:	460c      	mov	r4, r1
    sw->anim_state = LV_SWITCH_ANIM_STATE_INV;
 802174c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021750:	624b      	str	r3, [r1, #36]	@ 0x24
    lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLLABLE);
 8021752:	2110      	movs	r1, #16
 8021754:	4620      	mov	r0, r4
 8021756:	f7f6 fe43 	bl	80183e0 <lv_obj_clear_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_CHECKABLE);
 802175a:	2108      	movs	r1, #8
 802175c:	4620      	mov	r0, r4
 802175e:	f7f7 f8cf 	bl	8018900 <lv_obj_add_flag>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 8021762:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8021766:	4620      	mov	r0, r4
 8021768:	f7f7 f8ca 	bl	8018900 <lv_obj_add_flag>
}
 802176c:	bd10      	pop	{r4, pc}

0802176e <get_row_height>:
}

static lv_coord_t get_row_height(lv_obj_t * obj, uint16_t row_id, const lv_font_t * font,
                                 lv_coord_t letter_space, lv_coord_t line_space,
                                 lv_coord_t cell_left, lv_coord_t cell_right, lv_coord_t cell_top, lv_coord_t cell_bottom)
{
 802176e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021772:	b091      	sub	sp, #68	@ 0x44
 8021774:	4680      	mov	r8, r0
 8021776:	9206      	str	r2, [sp, #24]
 8021778:	930a      	str	r3, [sp, #40]	@ 0x28
 802177a:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 802177e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021780:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8021784:	930c      	str	r3, [sp, #48]	@ 0x30
 8021786:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	@ 0x70
 802178a:	930d      	str	r3, [sp, #52]	@ 0x34
 802178c:	f9bd b074 	ldrsh.w	fp, [sp, #116]	@ 0x74
 8021790:	f9bd 3078 	ldrsh.w	r3, [sp, #120]	@ 0x78
 8021794:	9307      	str	r3, [sp, #28]
 8021796:	f9b2 7008 	ldrsh.w	r7, [r2, #8]
    lv_table_t * table = (lv_table_t *)obj;

    lv_coord_t h_max = lv_font_get_line_height(font) + cell_top + cell_bottom;
 802179a:	fa1f f28b 	uxth.w	r2, fp
 802179e:	9208      	str	r2, [sp, #32]
 80217a0:	fa12 f787 	uxtah	r7, r2, r7
 80217a4:	b29b      	uxth	r3, r3
 80217a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80217a8:	fa13 f787 	uxtah	r7, r3, r7
 80217ac:	b23f      	sxth	r7, r7
    /* Calculate the cell_data index where to start */
    uint16_t row_start = row_id * table->col_cnt;
 80217ae:	f8b0 9024 	ldrh.w	r9, [r0, #36]	@ 0x24
 80217b2:	fb19 f901 	smulbb	r9, r9, r1
 80217b6:	fa1f f989 	uxth.w	r9, r9

    /* Traverse the cells in the row_id row */
    uint16_t cell;
    uint16_t col;
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 80217ba:	464e      	mov	r6, r9
 80217bc:	2500      	movs	r5, #0
 80217be:	e018      	b.n	80217f2 <get_row_height+0x84>
            else {
                break;
            }
        }

        lv_table_cell_ctrl_t ctrl = (lv_table_cell_ctrl_t) cell_data->ctrl;
 80217c0:	9e05      	ldr	r6, [sp, #20]
 80217c2:	7802      	ldrb	r2, [r0, #0]

        /*When cropping the text we can assume the row height is equal to the line height*/
        if(ctrl & LV_TABLE_CELL_CTRL_TEXT_CROP) {
 80217c4:	f012 0f02 	tst.w	r2, #2
 80217c8:	d03d      	beq.n	8021846 <get_row_height+0xd8>
 80217ca:	9b06      	ldr	r3, [sp, #24]
 80217cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            h_max = LV_MAX(lv_font_get_line_height(font) + cell_top + cell_bottom,
 80217d0:	eb0b 0203 	add.w	r2, fp, r3
 80217d4:	9907      	ldr	r1, [sp, #28]
 80217d6:	440a      	add	r2, r1
 80217d8:	42ba      	cmp	r2, r7
 80217da:	dd06      	ble.n	80217ea <get_row_height+0x7c>
 80217dc:	9a08      	ldr	r2, [sp, #32]
 80217de:	fa12 f383 	uxtah	r3, r2, r3
 80217e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80217e4:	fa12 f383 	uxtah	r3, r2, r3
 80217e8:	b21f      	sxth	r7, r3
    for(cell = row_start, col = 0; cell < row_start + table->col_cnt; cell++, col++) {
 80217ea:	3601      	adds	r6, #1
 80217ec:	b2b6      	uxth	r6, r6
 80217ee:	3501      	adds	r5, #1
 80217f0:	b2ad      	uxth	r5, r5
 80217f2:	46b6      	mov	lr, r6
 80217f4:	f8b8 c024 	ldrh.w	ip, [r8, #36]	@ 0x24
 80217f8:	eb09 030c 	add.w	r3, r9, ip
 80217fc:	429e      	cmp	r6, r3
 80217fe:	da42      	bge.n	8021886 <get_row_height+0x118>
        lv_table_cell_t * cell_data = table->cell_data[cell];
 8021800:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8021804:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
        if(is_cell_empty(cell_data)) {
 8021808:	2800      	cmp	r0, #0
 802180a:	d0ee      	beq.n	80217ea <get_row_height+0x7c>
        lv_coord_t txt_w = table->col_w[col];
 802180c:	f8d8 a030 	ldr.w	sl, [r8, #48]	@ 0x30
 8021810:	f93a 3015 	ldrsh.w	r3, [sl, r5, lsl #1]
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8021814:	2400      	movs	r4, #0
 8021816:	9605      	str	r6, [sp, #20]
 8021818:	192a      	adds	r2, r5, r4
 802181a:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 802181e:	42b2      	cmp	r2, r6
 8021820:	dace      	bge.n	80217c0 <get_row_height+0x52>
            lv_table_cell_t * next_cell_data = table->cell_data[cell + col_merge];
 8021822:	eb04 060e 	add.w	r6, r4, lr
 8021826:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
            if(is_cell_empty(next_cell_data)) break;
 802182a:	2e00      	cmp	r6, #0
 802182c:	d0c8      	beq.n	80217c0 <get_row_height+0x52>
            lv_table_cell_ctrl_t ctrl = (lv_table_cell_ctrl_t) next_cell_data->ctrl;
 802182e:	7836      	ldrb	r6, [r6, #0]
            if(ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 8021830:	f016 0f01 	tst.w	r6, #1
 8021834:	d0c4      	beq.n	80217c0 <get_row_height+0x52>
                txt_w += table->col_w[col + col_merge + 1];
 8021836:	3201      	adds	r2, #1
 8021838:	f83a 2012 	ldrh.w	r2, [sl, r2, lsl #1]
 802183c:	4413      	add	r3, r2
 802183e:	b21b      	sxth	r3, r3
        for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8021840:	3401      	adds	r4, #1
 8021842:	b2a4      	uxth	r4, r4
 8021844:	e7e8      	b.n	8021818 <get_row_height+0xaa>
                           h_max);
        }
        /*Else we have to calculate the height of the cell text*/
        else {
            lv_point_t txt_size;
            txt_w -= cell_left + cell_right;
 8021846:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021848:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802184a:	440a      	add	r2, r1
 802184c:	b292      	uxth	r2, r2
 802184e:	1a9b      	subs	r3, r3, r2
 8021850:	b21b      	sxth	r3, r3

            lv_txt_get_size(&txt_size, table->cell_data[cell]->txt, font,
 8021852:	2200      	movs	r2, #0
 8021854:	9202      	str	r2, [sp, #8]
 8021856:	9301      	str	r3, [sp, #4]
 8021858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802185a:	9300      	str	r3, [sp, #0]
 802185c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802185e:	9a06      	ldr	r2, [sp, #24]
 8021860:	f100 0108 	add.w	r1, r0, #8
 8021864:	a80f      	add	r0, sp, #60	@ 0x3c
 8021866:	f006 f850 	bl	802790a <lv_txt_get_size>
                            letter_space, line_space, txt_w, LV_TEXT_FLAG_NONE);

            h_max = LV_MAX(txt_size.y + cell_top + cell_bottom, h_max);
 802186a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 802186e:	445b      	add	r3, fp
 8021870:	9a07      	ldr	r2, [sp, #28]
 8021872:	4413      	add	r3, r2
 8021874:	42bb      	cmp	r3, r7
 8021876:	bfb8      	it	lt
 8021878:	463b      	movlt	r3, r7
 802187a:	b21f      	sxth	r7, r3
            /*Skip until one element after the last merged column*/
            cell += col_merge;
 802187c:	4426      	add	r6, r4
 802187e:	b2b6      	uxth	r6, r6
            col += col_merge;
 8021880:	442c      	add	r4, r5
 8021882:	b2a5      	uxth	r5, r4
 8021884:	e7b1      	b.n	80217ea <get_row_height+0x7c>
        }
    }

    return h_max;
}
 8021886:	4638      	mov	r0, r7
 8021888:	b011      	add	sp, #68	@ 0x44
 802188a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802188e <refr_size_form_row>:
{
 802188e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021892:	b08b      	sub	sp, #44	@ 0x2c
 8021894:	4605      	mov	r5, r0
 8021896:	460c      	mov	r4, r1
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8021898:	2212      	movs	r2, #18
 802189a:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 802189e:	f7fa ff29 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218a2:	fa0f fb80 	sxth.w	fp, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 80218a6:	2213      	movs	r2, #19
 80218a8:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218ac:	4628      	mov	r0, r5
 80218ae:	f7fa ff21 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218b2:	fa0f fa80 	sxth.w	sl, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 80218b6:	2210      	movs	r2, #16
 80218b8:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218bc:	4628      	mov	r0, r5
 80218be:	f7fa ff19 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218c2:	fa0f f980 	sxth.w	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 80218c6:	2211      	movs	r2, #17
 80218c8:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218cc:	4628      	mov	r0, r5
 80218ce:	f7fa ff11 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218d2:	b203      	sxth	r3, r0
 80218d4:	9309      	str	r3, [sp, #36]	@ 0x24
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LETTER_SPACE);
 80218d6:	2258      	movs	r2, #88	@ 0x58
 80218d8:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218dc:	4628      	mov	r0, r5
 80218de:	f7fa ff09 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218e2:	b203      	sxth	r3, r0
 80218e4:	9308      	str	r3, [sp, #32]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80218e6:	2259      	movs	r2, #89	@ 0x59
 80218e8:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218ec:	4628      	mov	r0, r5
 80218ee:	f7fa ff01 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80218f2:	b207      	sxth	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80218f4:	2257      	movs	r2, #87	@ 0x57
 80218f6:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 80218fa:	4628      	mov	r0, r5
 80218fc:	f7fa fefa 	bl	801c6f4 <lv_obj_get_style_prop>
 8021900:	9007      	str	r0, [sp, #28]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MIN_HEIGHT);
 8021902:	2205      	movs	r2, #5
 8021904:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021908:	4628      	mov	r0, r5
 802190a:	f7fa fef3 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802190e:	fa0f f880 	sxth.w	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_MAX_HEIGHT);
 8021912:	2206      	movs	r2, #6
 8021914:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021918:	4628      	mov	r0, r5
 802191a:	f7fa feeb 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 802191e:	b206      	sxth	r6, r0
    for(i = start_row; i < table->row_cnt; i++) {
 8021920:	e019      	b.n	8021956 <refr_size_form_row+0xc8>
        lv_coord_t calculated_height = get_row_height(obj, i, font, letter_space, line_space,
 8021922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021924:	9304      	str	r3, [sp, #16]
 8021926:	f8cd 900c 	str.w	r9, [sp, #12]
 802192a:	f8cd a008 	str.w	sl, [sp, #8]
 802192e:	f8cd b004 	str.w	fp, [sp, #4]
 8021932:	9700      	str	r7, [sp, #0]
 8021934:	9b08      	ldr	r3, [sp, #32]
 8021936:	9a07      	ldr	r2, [sp, #28]
 8021938:	b2a1      	uxth	r1, r4
 802193a:	4628      	mov	r0, r5
 802193c:	f7ff ff17 	bl	802176e <get_row_height>
        table->row_h[i] = LV_CLAMP(minh, calculated_height, maxh);
 8021940:	42b0      	cmp	r0, r6
 8021942:	bfa8      	it	ge
 8021944:	4630      	movge	r0, r6
 8021946:	b200      	sxth	r0, r0
 8021948:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 802194a:	4540      	cmp	r0, r8
 802194c:	bfb8      	it	lt
 802194e:	4640      	movlt	r0, r8
 8021950:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for(i = start_row; i < table->row_cnt; i++) {
 8021954:	3401      	adds	r4, #1
 8021956:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 8021958:	42a3      	cmp	r3, r4
 802195a:	d8e2      	bhi.n	8021922 <refr_size_form_row+0x94>
    lv_obj_refresh_self_size(obj);
 802195c:	4628      	mov	r0, r5
 802195e:	f7f8 f8f3 	bl	8019b48 <lv_obj_refresh_self_size>
    lv_obj_invalidate(obj);
 8021962:	4628      	mov	r0, r5
 8021964:	f7f8 fa9f 	bl	8019ea6 <lv_obj_invalidate>
}
 8021968:	b00b      	add	sp, #44	@ 0x2c
 802196a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802196e <get_pressed_cell>:

static lv_res_t get_pressed_cell(lv_obj_t * obj, uint16_t * row, uint16_t * col)
{
 802196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021972:	b082      	sub	sp, #8
 8021974:	4604      	mov	r4, r0
 8021976:	460d      	mov	r5, r1
 8021978:	4616      	mov	r6, r2
    lv_table_t * table = (lv_table_t *)obj;

    lv_indev_type_t type = lv_indev_get_type(lv_indev_get_act());
 802197a:	f7f2 fef9 	bl	8014770 <lv_indev_get_act>
 802197e:	f7f2 fefd 	bl	801477c <lv_indev_get_type>
    if(type != LV_INDEV_TYPE_POINTER && type != LV_INDEV_TYPE_BUTTON) {
 8021982:	2801      	cmp	r0, #1
 8021984:	d00d      	beq.n	80219a2 <get_pressed_cell+0x34>
 8021986:	2803      	cmp	r0, #3
 8021988:	d00b      	beq.n	80219a2 <get_pressed_cell+0x34>
        if(col) *col = LV_TABLE_CELL_NONE;
 802198a:	b116      	cbz	r6, 8021992 <get_pressed_cell+0x24>
 802198c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021990:	8033      	strh	r3, [r6, #0]
        if(row) *row = LV_TABLE_CELL_NONE;
 8021992:	b115      	cbz	r5, 802199a <get_pressed_cell+0x2c>
 8021994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021998:	802b      	strh	r3, [r5, #0]
        return LV_RES_INV;
 802199a:	2000      	movs	r0, #0
            if(y < tmp) break;
        }
    }

    return LV_RES_OK;
}
 802199c:	b002      	add	sp, #8
 802199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_indev_get_point(lv_indev_get_act(), &p);
 80219a2:	f7f2 fee5 	bl	8014770 <lv_indev_get_act>
 80219a6:	a901      	add	r1, sp, #4
 80219a8:	f7f2 ff59 	bl	801485e <lv_indev_get_point>
    if(col) {
 80219ac:	2e00      	cmp	r6, #0
 80219ae:	d038      	beq.n	8021a22 <get_pressed_cell+0xb4>
        lv_coord_t x = p.x + lv_obj_get_scroll_x(obj);
 80219b0:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 80219b4:	4620      	mov	r0, r4
 80219b6:	f7f9 fa17 	bl	801ade8 <lv_obj_get_scroll_x>
 80219ba:	fa17 f780 	uxtah	r7, r7, r0
 80219be:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 80219c0:	2216      	movs	r2, #22
 80219c2:	2100      	movs	r1, #0
 80219c4:	4620      	mov	r0, r4
 80219c6:	f7fa fe95 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 80219ca:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL) {
 80219cc:	2801      	cmp	r0, #1
 80219ce:	d01a      	beq.n	8021a06 <get_pressed_cell+0x98>
            x -= obj->coords.x1;
 80219d0:	8aa3      	ldrh	r3, [r4, #20]
 80219d2:	1aff      	subs	r7, r7, r3
 80219d4:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 80219d6:	2212      	movs	r2, #18
 80219d8:	2100      	movs	r1, #0
 80219da:	4620      	mov	r0, r4
 80219dc:	f7fa fe8a 	bl	801c6f4 <lv_obj_get_style_prop>
            x -= lv_obj_get_style_pad_left(obj, LV_PART_MAIN);
 80219e0:	b280      	uxth	r0, r0
 80219e2:	1a38      	subs	r0, r7, r0
 80219e4:	b200      	sxth	r0, r0
        *col = 0;
 80219e6:	2100      	movs	r1, #0
 80219e8:	8031      	strh	r1, [r6, #0]
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 80219ea:	8833      	ldrh	r3, [r6, #0]
 80219ec:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
 80219ee:	4293      	cmp	r3, r2
 80219f0:	d217      	bcs.n	8021a22 <get_pressed_cell+0xb4>
            tmp += table->col_w[*col];
 80219f2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80219f4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80219f8:	4411      	add	r1, r2
 80219fa:	b209      	sxth	r1, r1
            if(x < tmp) break;
 80219fc:	4288      	cmp	r0, r1
 80219fe:	db10      	blt.n	8021a22 <get_pressed_cell+0xb4>
        for(*col = 0; *col < table->col_cnt; (*col)++) {
 8021a00:	3301      	adds	r3, #1
 8021a02:	8033      	strh	r3, [r6, #0]
 8021a04:	e7f1      	b.n	80219ea <get_pressed_cell+0x7c>
            x = obj->coords.x2 - lv_obj_get_style_pad_right(obj, LV_PART_MAIN) - x;
 8021a06:	f8b4 8018 	ldrh.w	r8, [r4, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8021a0a:	2213      	movs	r2, #19
 8021a0c:	2100      	movs	r1, #0
 8021a0e:	4620      	mov	r0, r4
 8021a10:	f7fa fe70 	bl	801c6f4 <lv_obj_get_style_prop>
 8021a14:	b280      	uxth	r0, r0
 8021a16:	eba8 0300 	sub.w	r3, r8, r0
 8021a1a:	b29b      	uxth	r3, r3
 8021a1c:	1bdb      	subs	r3, r3, r7
 8021a1e:	b218      	sxth	r0, r3
 8021a20:	e7e1      	b.n	80219e6 <get_pressed_cell+0x78>
    if(row) {
 8021a22:	b325      	cbz	r5, 8021a6e <get_pressed_cell+0x100>
        lv_coord_t y = p.y + lv_obj_get_scroll_y(obj);;
 8021a24:	f8bd 6006 	ldrh.w	r6, [sp, #6]
 8021a28:	4620      	mov	r0, r4
 8021a2a:	f7f9 f9e5 	bl	801adf8 <lv_obj_get_scroll_y>
 8021a2e:	fa16 f680 	uxtah	r6, r6, r0
 8021a32:	b2b6      	uxth	r6, r6
        y -= obj->coords.y1;
 8021a34:	8ae3      	ldrh	r3, [r4, #22]
 8021a36:	1af6      	subs	r6, r6, r3
 8021a38:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8021a3a:	2210      	movs	r2, #16
 8021a3c:	2100      	movs	r1, #0
 8021a3e:	4620      	mov	r0, r4
 8021a40:	f7fa fe58 	bl	801c6f4 <lv_obj_get_style_prop>
        y -= lv_obj_get_style_pad_top(obj, LV_PART_MAIN);
 8021a44:	b280      	uxth	r0, r0
 8021a46:	1a31      	subs	r1, r6, r0
 8021a48:	b209      	sxth	r1, r1
        *row = 0;
 8021a4a:	2200      	movs	r2, #0
 8021a4c:	802a      	strh	r2, [r5, #0]
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8021a4e:	882b      	ldrh	r3, [r5, #0]
 8021a50:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8021a52:	4283      	cmp	r3, r0
 8021a54:	d209      	bcs.n	8021a6a <get_pressed_cell+0xfc>
            tmp += table->row_h[*row];
 8021a56:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8021a58:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8021a5c:	4402      	add	r2, r0
 8021a5e:	b212      	sxth	r2, r2
            if(y < tmp) break;
 8021a60:	4291      	cmp	r1, r2
 8021a62:	db06      	blt.n	8021a72 <get_pressed_cell+0x104>
        for(*row = 0; *row < table->row_cnt; (*row)++) {
 8021a64:	3301      	adds	r3, #1
 8021a66:	802b      	strh	r3, [r5, #0]
 8021a68:	e7f1      	b.n	8021a4e <get_pressed_cell+0xe0>
    return LV_RES_OK;
 8021a6a:	2001      	movs	r0, #1
 8021a6c:	e796      	b.n	802199c <get_pressed_cell+0x2e>
 8021a6e:	2001      	movs	r0, #1
 8021a70:	e794      	b.n	802199c <get_pressed_cell+0x2e>
 8021a72:	2001      	movs	r0, #1
 8021a74:	e792      	b.n	802199c <get_pressed_cell+0x2e>

08021a76 <get_cell_area>:
    strcpy(dst->txt, txt);
#endif
}

static void get_cell_area(lv_obj_t * obj, uint16_t row, uint16_t col, lv_area_t * area)
{
 8021a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a7a:	4605      	mov	r5, r0
 8021a7c:	460e      	mov	r6, r1
 8021a7e:	4617      	mov	r7, r2
 8021a80:	461c      	mov	r4, r3
    lv_table_t * table = (lv_table_t *)obj;

    uint32_t c;
    area->x1 = 0;
 8021a82:	2300      	movs	r3, #0
 8021a84:	8023      	strh	r3, [r4, #0]
    for(c = 0; c < col; c++) {
 8021a86:	e006      	b.n	8021a96 <get_cell_area+0x20>
        area->x1 += table->col_w[c];
 8021a88:	8821      	ldrh	r1, [r4, #0]
 8021a8a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8021a8c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8021a90:	4411      	add	r1, r2
 8021a92:	8021      	strh	r1, [r4, #0]
    for(c = 0; c < col; c++) {
 8021a94:	3301      	adds	r3, #1
 8021a96:	429f      	cmp	r7, r3
 8021a98:	d8f6      	bhi.n	8021a88 <get_cell_area+0x12>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8021a9a:	2216      	movs	r2, #22
 8021a9c:	2100      	movs	r1, #0
 8021a9e:	4628      	mov	r0, r5
 8021aa0:	f7fa fe28 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8021aa4:	b2c0      	uxtb	r0, r0
    }

    bool rtl = lv_obj_get_style_base_dir(obj, LV_PART_MAIN) == LV_BASE_DIR_RTL;
    if(rtl) {
 8021aa6:	2801      	cmp	r0, #1
 8021aa8:	d01a      	beq.n	8021ae0 <get_cell_area+0x6a>
        lv_coord_t w = lv_obj_get_width(obj);
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
        area->x1 = area->x2 - table->col_w[col];
    }
    else {
        area->x1 -= lv_obj_get_scroll_x(obj);
 8021aaa:	4628      	mov	r0, r5
 8021aac:	f7f9 f99c 	bl	801ade8 <lv_obj_get_scroll_x>
 8021ab0:	8823      	ldrh	r3, [r4, #0]
 8021ab2:	b280      	uxth	r0, r0
 8021ab4:	1a1b      	subs	r3, r3, r0
 8021ab6:	8023      	strh	r3, [r4, #0]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8021ab8:	2212      	movs	r2, #18
 8021aba:	2100      	movs	r1, #0
 8021abc:	4628      	mov	r0, r5
 8021abe:	f7fa fe19 	bl	801c6f4 <lv_obj_get_style_prop>
        area->x1 += lv_obj_get_style_pad_left(obj, 0);
 8021ac2:	8823      	ldrh	r3, [r4, #0]
 8021ac4:	fa13 f080 	uxtah	r0, r3, r0
 8021ac8:	b280      	uxth	r0, r0
 8021aca:	8020      	strh	r0, [r4, #0]
        area->x2 = area->x1 + table->col_w[col] - 1;
 8021acc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021ace:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8021ad2:	4418      	add	r0, r3
 8021ad4:	b280      	uxth	r0, r0
 8021ad6:	3801      	subs	r0, #1
 8021ad8:	80a0      	strh	r0, [r4, #4]
    }

    uint32_t r;
    area->y1 = 0;
 8021ada:	2300      	movs	r3, #0
 8021adc:	8063      	strh	r3, [r4, #2]
    for(r = 0; r < row; r++) {
 8021ade:	e024      	b.n	8021b2a <get_cell_area+0xb4>
        area->x1 += lv_obj_get_scroll_x(obj);
 8021ae0:	4628      	mov	r0, r5
 8021ae2:	f7f9 f981 	bl	801ade8 <lv_obj_get_scroll_x>
 8021ae6:	8823      	ldrh	r3, [r4, #0]
 8021ae8:	fa13 f080 	uxtah	r0, r3, r0
 8021aec:	8020      	strh	r0, [r4, #0]
        lv_coord_t w = lv_obj_get_width(obj);
 8021aee:	4628      	mov	r0, r5
 8021af0:	f7f7 fdee 	bl	80196d0 <lv_obj_get_width>
        area->x2 = w - area->x1 - lv_obj_get_style_pad_right(obj, 0);
 8021af4:	8823      	ldrh	r3, [r4, #0]
 8021af6:	1ac3      	subs	r3, r0, r3
 8021af8:	fa1f f883 	uxth.w	r8, r3
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8021afc:	2213      	movs	r2, #19
 8021afe:	2100      	movs	r1, #0
 8021b00:	4628      	mov	r0, r5
 8021b02:	f7fa fdf7 	bl	801c6f4 <lv_obj_get_style_prop>
 8021b06:	b280      	uxth	r0, r0
 8021b08:	eba8 0300 	sub.w	r3, r8, r0
 8021b0c:	b29a      	uxth	r2, r3
 8021b0e:	80a3      	strh	r3, [r4, #4]
        area->x1 = area->x2 - table->col_w[col];
 8021b10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8021b12:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8021b16:	1ad3      	subs	r3, r2, r3
 8021b18:	8023      	strh	r3, [r4, #0]
 8021b1a:	e7de      	b.n	8021ada <get_cell_area+0x64>
        area->y1 += table->row_h[r];
 8021b1c:	8862      	ldrh	r2, [r4, #2]
 8021b1e:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8021b20:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8021b24:	440a      	add	r2, r1
 8021b26:	8062      	strh	r2, [r4, #2]
    for(r = 0; r < row; r++) {
 8021b28:	3301      	adds	r3, #1
 8021b2a:	429e      	cmp	r6, r3
 8021b2c:	d8f6      	bhi.n	8021b1c <get_cell_area+0xa6>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8021b2e:	2210      	movs	r2, #16
 8021b30:	2100      	movs	r1, #0
 8021b32:	4628      	mov	r0, r5
 8021b34:	f7fa fdde 	bl	801c6f4 <lv_obj_get_style_prop>
    }

    area->y1 += lv_obj_get_style_pad_top(obj, 0);
 8021b38:	8863      	ldrh	r3, [r4, #2]
 8021b3a:	fa13 f080 	uxtah	r0, r3, r0
 8021b3e:	8060      	strh	r0, [r4, #2]
    area->y1 -= lv_obj_get_scroll_y(obj);
 8021b40:	4628      	mov	r0, r5
 8021b42:	f7f9 f959 	bl	801adf8 <lv_obj_get_scroll_y>
 8021b46:	8863      	ldrh	r3, [r4, #2]
 8021b48:	b280      	uxth	r0, r0
 8021b4a:	1a1b      	subs	r3, r3, r0
 8021b4c:	b29b      	uxth	r3, r3
 8021b4e:	8063      	strh	r3, [r4, #2]
    area->y2 = area->y1 + table->row_h[row] - 1;
 8021b50:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8021b52:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8021b56:	4413      	add	r3, r2
 8021b58:	b29b      	uxth	r3, r3
 8021b5a:	3b01      	subs	r3, #1
 8021b5c:	80e3      	strh	r3, [r4, #6]

}
 8021b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08021b62 <scroll_to_selected_cell>:


static void scroll_to_selected_cell(lv_obj_t * obj)
{
 8021b62:	b530      	push	{r4, r5, lr}
 8021b64:	b083      	sub	sp, #12
 8021b66:	4604      	mov	r4, r0
    lv_table_t * table = (lv_table_t *)obj;

    lv_area_t a;
    get_cell_area(obj, table->row_act, table->col_act, &a);
 8021b68:	466b      	mov	r3, sp
 8021b6a:	8e82      	ldrh	r2, [r0, #52]	@ 0x34
 8021b6c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8021b6e:	f7ff ff82 	bl	8021a76 <get_cell_area>
    if(a.x1 < 0) {
 8021b72:	f9bd 1000 	ldrsh.w	r1, [sp]
 8021b76:	2900      	cmp	r1, #0
 8021b78:	db14      	blt.n	8021ba4 <scroll_to_selected_cell+0x42>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
    }
    else if(a.x2 > lv_obj_get_width(obj)) {
 8021b7a:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8021b7e:	4620      	mov	r0, r4
 8021b80:	f7f7 fda6 	bl	80196d0 <lv_obj_get_width>
 8021b84:	4285      	cmp	r5, r0
 8021b86:	dd15      	ble.n	8021bb4 <scroll_to_selected_cell+0x52>
        lv_obj_scroll_by_bounded(obj, lv_obj_get_width(obj) - a.x2, 0, LV_ANIM_ON);
 8021b88:	4620      	mov	r0, r4
 8021b8a:	f7f7 fda1 	bl	80196d0 <lv_obj_get_width>
 8021b8e:	b281      	uxth	r1, r0
 8021b90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8021b94:	1ac9      	subs	r1, r1, r3
 8021b96:	2301      	movs	r3, #1
 8021b98:	2200      	movs	r2, #0
 8021b9a:	b209      	sxth	r1, r1
 8021b9c:	4620      	mov	r0, r4
 8021b9e:	f7f9 fb61 	bl	801b264 <lv_obj_scroll_by_bounded>
 8021ba2:	e007      	b.n	8021bb4 <scroll_to_selected_cell+0x52>
        lv_obj_scroll_by_bounded(obj, -a.x1, 0, LV_ANIM_ON);
 8021ba4:	b289      	uxth	r1, r1
 8021ba6:	4249      	negs	r1, r1
 8021ba8:	2301      	movs	r3, #1
 8021baa:	2200      	movs	r2, #0
 8021bac:	b209      	sxth	r1, r1
 8021bae:	4620      	mov	r0, r4
 8021bb0:	f7f9 fb58 	bl	801b264 <lv_obj_scroll_by_bounded>
    }

    if(a.y1 < 0) {
 8021bb4:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8021bb8:	2a00      	cmp	r2, #0
 8021bba:	db14      	blt.n	8021be6 <scroll_to_selected_cell+0x84>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
    }
    else if(a.y2 > lv_obj_get_height(obj)) {
 8021bbc:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8021bc0:	4620      	mov	r0, r4
 8021bc2:	f7f7 fd8c 	bl	80196de <lv_obj_get_height>
 8021bc6:	4285      	cmp	r5, r0
 8021bc8:	dd15      	ble.n	8021bf6 <scroll_to_selected_cell+0x94>
        lv_obj_scroll_by_bounded(obj, 0, lv_obj_get_height(obj) - a.y2, LV_ANIM_ON);
 8021bca:	4620      	mov	r0, r4
 8021bcc:	f7f7 fd87 	bl	80196de <lv_obj_get_height>
 8021bd0:	b282      	uxth	r2, r0
 8021bd2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8021bd6:	1ad2      	subs	r2, r2, r3
 8021bd8:	2301      	movs	r3, #1
 8021bda:	b212      	sxth	r2, r2
 8021bdc:	2100      	movs	r1, #0
 8021bde:	4620      	mov	r0, r4
 8021be0:	f7f9 fb40 	bl	801b264 <lv_obj_scroll_by_bounded>
    }

}
 8021be4:	e007      	b.n	8021bf6 <scroll_to_selected_cell+0x94>
        lv_obj_scroll_by_bounded(obj, 0, -a.y1, LV_ANIM_ON);
 8021be6:	b292      	uxth	r2, r2
 8021be8:	4252      	negs	r2, r2
 8021bea:	2301      	movs	r3, #1
 8021bec:	b212      	sxth	r2, r2
 8021bee:	2100      	movs	r1, #0
 8021bf0:	4620      	mov	r0, r4
 8021bf2:	f7f9 fb37 	bl	801b264 <lv_obj_scroll_by_bounded>
}
 8021bf6:	b003      	add	sp, #12
 8021bf8:	bd30      	pop	{r4, r5, pc}
	...

08021bfc <draw_main>:
{
 8021bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c00:	b0df      	sub	sp, #380	@ 0x17c
 8021c02:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8021c04:	f7ef f88a 	bl	8010d1c <lv_event_get_target>
 8021c08:	4606      	mov	r6, r0
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8021c0a:	4620      	mov	r0, r4
 8021c0c:	f7ef f8fe 	bl	8010e0c <lv_event_get_draw_ctx>
 8021c10:	4604      	mov	r4, r0
    if(!_lv_area_intersect(&clip_area, &obj->coords, draw_ctx->clip_area)) return;
 8021c12:	6882      	ldr	r2, [r0, #8]
 8021c14:	f106 0114 	add.w	r1, r6, #20
 8021c18:	a85c      	add	r0, sp, #368	@ 0x170
 8021c1a:	f7df feeb 	bl	80019f4 <_lv_area_intersect>
 8021c1e:	b910      	cbnz	r0, 8021c26 <draw_main+0x2a>
}
 8021c20:	b05f      	add	sp, #380	@ 0x17c
 8021c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const lv_area_t * clip_area_ori = draw_ctx->clip_area;
 8021c26:	68a3      	ldr	r3, [r4, #8]
 8021c28:	9313      	str	r3, [sp, #76]	@ 0x4c
    draw_ctx->clip_area = &clip_area;
 8021c2a:	ab5c      	add	r3, sp, #368	@ 0x170
 8021c2c:	9408      	str	r4, [sp, #32]
 8021c2e:	60a3      	str	r3, [r4, #8]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8021c30:	2232      	movs	r2, #50	@ 0x32
 8021c32:	2100      	movs	r1, #0
 8021c34:	4630      	mov	r0, r6
 8021c36:	f7fa fd5d 	bl	801c6f4 <lv_obj_get_style_prop>
 8021c3a:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8021c3c:	2210      	movs	r2, #16
 8021c3e:	2100      	movs	r1, #0
 8021c40:	4630      	mov	r0, r6
 8021c42:	f7fa fd57 	bl	801c6f4 <lv_obj_get_style_prop>
 8021c46:	4605      	mov	r5, r0
    return (lv_coord_t)v.num;
 8021c48:	b203      	sxth	r3, r0
 8021c4a:	930c      	str	r3, [sp, #48]	@ 0x30
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8021c4c:	2211      	movs	r2, #17
 8021c4e:	2100      	movs	r1, #0
 8021c50:	4630      	mov	r0, r6
 8021c52:	f7fa fd4f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8021c56:	b203      	sxth	r3, r0
 8021c58:	930b      	str	r3, [sp, #44]	@ 0x2c
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8021c5a:	2212      	movs	r2, #18
 8021c5c:	2100      	movs	r1, #0
 8021c5e:	4630      	mov	r0, r6
 8021c60:	f7fa fd48 	bl	801c6f4 <lv_obj_get_style_prop>
 8021c64:	4682      	mov	sl, r0
    return (lv_coord_t)v.num;
 8021c66:	b203      	sxth	r3, r0
 8021c68:	930a      	str	r3, [sp, #40]	@ 0x28
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8021c6a:	2213      	movs	r2, #19
 8021c6c:	2100      	movs	r1, #0
 8021c6e:	4630      	mov	r0, r6
 8021c70:	f7fa fd40 	bl	801c6f4 <lv_obj_get_style_prop>
 8021c74:	9012      	str	r0, [sp, #72]	@ 0x48
    return (lv_coord_t)v.num;
 8021c76:	b203      	sxth	r3, r0
 8021c78:	9309      	str	r3, [sp, #36]	@ 0x24
    lv_state_t state_ori = obj->state;
 8021c7a:	8c33      	ldrh	r3, [r6, #32]
 8021c7c:	9310      	str	r3, [sp, #64]	@ 0x40
    obj->state = LV_STATE_DEFAULT;
 8021c7e:	2400      	movs	r4, #0
 8021c80:	8434      	strh	r4, [r6, #32]
    obj->skip_trans = 1;
 8021c82:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8021c86:	f043 0308 	orr.w	r3, r3, #8
 8021c8a:	f886 3022 	strb.w	r3, [r6, #34]	@ 0x22
    lv_draw_rect_dsc_init(&rect_dsc_def);
 8021c8e:	a84b      	add	r0, sp, #300	@ 0x12c
 8021c90:	f7e7 ffde 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_def);
 8021c94:	a84b      	add	r0, sp, #300	@ 0x12c
 8021c96:	4602      	mov	r2, r0
 8021c98:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021c9c:	4630      	mov	r0, r6
 8021c9e:	f7f7 f811 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    lv_draw_label_dsc_init(&label_dsc_def);
 8021ca2:	a835      	add	r0, sp, #212	@ 0xd4
 8021ca4:	f7e6 f980 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_def);
 8021ca8:	a835      	add	r0, sp, #212	@ 0xd4
 8021caa:	4602      	mov	r2, r0
 8021cac:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021cb0:	4630      	mov	r0, r6
 8021cb2:	f7f7 f959 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    obj->state = state_ori;
 8021cb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021cb8:	8433      	strh	r3, [r6, #32]
    obj->skip_trans = 0;
 8021cba:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8021cbe:	f364 03c3 	bfi	r3, r4, #3, #1
 8021cc2:	f886 3022 	strb.w	r3, [r6, #34]	@ 0x22
    cell_area.y2 = obj->coords.y1 + bg_top - 1 - lv_obj_get_scroll_y(obj) + border_width;
 8021cc6:	8af3      	ldrh	r3, [r6, #22]
 8021cc8:	441d      	add	r5, r3
 8021cca:	b2ad      	uxth	r5, r5
 8021ccc:	4630      	mov	r0, r6
 8021cce:	f7f9 f893 	bl	801adf8 <lv_obj_get_scroll_y>
 8021cd2:	1a2b      	subs	r3, r5, r0
 8021cd4:	b2bf      	uxth	r7, r7
 8021cd6:	fa17 f383 	uxtah	r3, r7, r3
 8021cda:	3b01      	subs	r3, #1
 8021cdc:	f8ad 316a 	strh.w	r3, [sp, #362]	@ 0x16a
    lv_coord_t scroll_x = lv_obj_get_scroll_x(obj) ;
 8021ce0:	4630      	mov	r0, r6
 8021ce2:	f7f9 f881 	bl	801ade8 <lv_obj_get_scroll_x>
 8021ce6:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8021ce8:	2216      	movs	r2, #22
 8021cea:	4621      	mov	r1, r4
 8021cec:	4630      	mov	r0, r6
 8021cee:	f7fa fd01 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 8021cf2:	fa5f f980 	uxtb.w	r9, r0
    lv_obj_draw_dsc_init(&part_draw_dsc, draw_ctx);
 8021cf6:	9908      	ldr	r1, [sp, #32]
 8021cf8:	a81b      	add	r0, sp, #108	@ 0x6c
 8021cfa:	f7f7 fae8 	bl	80192ce <lv_obj_draw_dsc_init>
    part_draw_dsc.part = LV_PART_ITEMS;
 8021cfe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8021d02:	9328      	str	r3, [sp, #160]	@ 0xa0
    part_draw_dsc.class_p = MY_CLASS;
 8021d04:	4bc1      	ldr	r3, [pc, #772]	@ (802200c <draw_main+0x410>)
 8021d06:	931c      	str	r3, [sp, #112]	@ 0x70
    part_draw_dsc.type = LV_TABLE_DRAW_PART_CELL;
 8021d08:	941d      	str	r4, [sp, #116]	@ 0x74
    part_draw_dsc.rect_dsc = &rect_dsc_act;
 8021d0a:	ab3d      	add	r3, sp, #244	@ 0xf4
 8021d0c:	931f      	str	r3, [sp, #124]	@ 0x7c
    part_draw_dsc.label_dsc = &label_dsc_act;
 8021d0e:	ab2d      	add	r3, sp, #180	@ 0xb4
 8021d10:	9320      	str	r3, [sp, #128]	@ 0x80
    uint16_t cell = 0;
 8021d12:	46a3      	mov	fp, r4
    for(row = 0; row < table->row_cnt; row++) {
 8021d14:	9405      	str	r4, [sp, #20]
 8021d16:	970e      	str	r7, [sp, #56]	@ 0x38
 8021d18:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
 8021d1c:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 8021d20:	e1d1      	b.n	80220c6 <draw_main+0x4ca>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 8021d22:	8b33      	ldrh	r3, [r6, #24]
 8021d24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021d26:	1a9b      	subs	r3, r3, r2
 8021d28:	b29b      	uxth	r3, r3
 8021d2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021d2c:	1a9b      	subs	r3, r3, r2
 8021d2e:	b29b      	uxth	r3, r3
 8021d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d32:	1a9b      	subs	r3, r3, r2
 8021d34:	3b01      	subs	r3, #1
 8021d36:	f8ad 3164 	strh.w	r3, [sp, #356]	@ 0x164
 8021d3a:	e1ed      	b.n	8022118 <draw_main+0x51c>
            lv_table_cell_ctrl_t ctrl = 0;
 8021d3c:	2300      	movs	r3, #0
 8021d3e:	9307      	str	r3, [sp, #28]
 8021d40:	e14f      	b.n	8021fe2 <draw_main+0x3e6>
                cell_area.x2 = cell_area.x1 - 1;
 8021d42:	f8bd 2164 	ldrh.w	r2, [sp, #356]	@ 0x164
 8021d46:	3a01      	subs	r2, #1
 8021d48:	b293      	uxth	r3, r2
 8021d4a:	f8ad 2168 	strh.w	r2, [sp, #360]	@ 0x168
                cell_area.x1 = cell_area.x2 - table->col_w[col] + 1;
 8021d4e:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 8021d50:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8021d54:	1a9b      	subs	r3, r3, r2
 8021d56:	b29b      	uxth	r3, r3
 8021d58:	3301      	adds	r3, #1
 8021d5a:	f8ad 3164 	strh.w	r3, [sp, #356]	@ 0x164
 8021d5e:	e152      	b.n	8022006 <draw_main+0x40a>
                    if(rtl) cell_area.x1 -= offset;
 8021d60:	f8bd 3164 	ldrh.w	r3, [sp, #356]	@ 0x164
 8021d64:	1a9b      	subs	r3, r3, r2
 8021d66:	f8ad 3164 	strh.w	r3, [sp, #356]	@ 0x164
            for(col_merge = 0; col_merge + col < table->col_cnt - 1; col_merge++) {
 8021d6a:	3401      	adds	r4, #1
 8021d6c:	b2a4      	uxth	r4, r4
 8021d6e:	462f      	mov	r7, r5
 8021d70:	1963      	adds	r3, r4, r5
 8021d72:	1e4a      	subs	r2, r1, #1
 8021d74:	4293      	cmp	r3, r2
 8021d76:	da15      	bge.n	8021da4 <draw_main+0x1a8>
                lv_table_cell_t * next_cell_data = table->cell_data[cell + col_merge];
 8021d78:	eb0b 0204 	add.w	r2, fp, r4
 8021d7c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                if(is_cell_empty(next_cell_data)) break;
 8021d80:	b182      	cbz	r2, 8021da4 <draw_main+0x1a8>
                lv_table_cell_ctrl_t merge_ctrl = (lv_table_cell_ctrl_t) next_cell_data->ctrl;
 8021d82:	7812      	ldrb	r2, [r2, #0]
                if(merge_ctrl & LV_TABLE_CELL_CTRL_MERGE_RIGHT) {
 8021d84:	f012 0f01 	tst.w	r2, #1
 8021d88:	d00c      	beq.n	8021da4 <draw_main+0x1a8>
                    lv_coord_t offset = table->col_w[col + col_merge + 1];
 8021d8a:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 8021d8c:	3301      	adds	r3, #1
 8021d8e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
                    if(rtl) cell_area.x1 -= offset;
 8021d92:	f1b9 0f01 	cmp.w	r9, #1
 8021d96:	d0e3      	beq.n	8021d60 <draw_main+0x164>
                    else cell_area.x2 += offset;
 8021d98:	f8bd 3168 	ldrh.w	r3, [sp, #360]	@ 0x168
 8021d9c:	4413      	add	r3, r2
 8021d9e:	f8ad 3168 	strh.w	r3, [sp, #360]	@ 0x168
 8021da2:	e7e2      	b.n	8021d6a <draw_main+0x16e>
            if(cell_area.y2 < clip_area.y1) {
 8021da4:	9706      	str	r7, [sp, #24]
 8021da6:	f9bd 316a 	ldrsh.w	r3, [sp, #362]	@ 0x16a
 8021daa:	f9bd 2172 	ldrsh.w	r2, [sp, #370]	@ 0x172
 8021dae:	4293      	cmp	r3, r2
 8021db0:	f2c0 812e 	blt.w	8022010 <draw_main+0x414>
    dest->x1 = src->x1;
 8021db4:	f9bd c164 	ldrsh.w	ip, [sp, #356]	@ 0x164
 8021db8:	f8ad c054 	strh.w	ip, [sp, #84]	@ 0x54
    dest->y1 = src->y1;
 8021dbc:	f9bd 1166 	ldrsh.w	r1, [sp, #358]	@ 0x166
 8021dc0:	f8ad 1056 	strh.w	r1, [sp, #86]	@ 0x56
    dest->x2 = src->x2;
 8021dc4:	f9bd 0168 	ldrsh.w	r0, [sp, #360]	@ 0x168
 8021dc8:	f8ad 0058 	strh.w	r0, [sp, #88]	@ 0x58
    dest->y2 = src->y2;
 8021dcc:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_LEFT) && cell_area_border.x1 > obj->coords.x1 + bg_left) {
 8021dd0:	f89d e14f 	ldrb.w	lr, [sp, #335]	@ 0x14f
 8021dd4:	f3ce 0244 	ubfx	r2, lr, #1, #5
 8021dd8:	f01e 0f08 	tst.w	lr, #8
 8021ddc:	d00f      	beq.n	8021dfe <draw_main+0x202>
 8021dde:	f9b6 e014 	ldrsh.w	lr, [r6, #20]
 8021de2:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021de4:	44be      	add	lr, r7
 8021de6:	45f4      	cmp	ip, lr
 8021de8:	dd09      	ble.n	8021dfe <draw_main+0x202>
                cell_area_border.x1 -= rect_dsc_def.border_width / 2;
 8021dea:	fa1f fc8c 	uxth.w	ip, ip
 8021dee:	f9bd e14c 	ldrsh.w	lr, [sp, #332]	@ 0x14c
 8021df2:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
 8021df6:	ebac 0c6e 	sub.w	ip, ip, lr, asr #1
 8021dfa:	f8ad c054 	strh.w	ip, [sp, #84]	@ 0x54
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_TOP) && cell_area_border.y1 > obj->coords.y1 + bg_top) {
 8021dfe:	f012 0f02 	tst.w	r2, #2
 8021e02:	d00e      	beq.n	8021e22 <draw_main+0x226>
 8021e04:	f9b6 c016 	ldrsh.w	ip, [r6, #22]
 8021e08:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8021e0a:	44bc      	add	ip, r7
 8021e0c:	4561      	cmp	r1, ip
 8021e0e:	dd08      	ble.n	8021e22 <draw_main+0x226>
                cell_area_border.y1 -= rect_dsc_def.border_width / 2;
 8021e10:	b289      	uxth	r1, r1
 8021e12:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	@ 0x14c
 8021e16:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8021e1a:	eba1 016c 	sub.w	r1, r1, ip, asr #1
 8021e1e:	f8ad 1056 	strh.w	r1, [sp, #86]	@ 0x56
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_RIGHT) && cell_area_border.x2 < obj->coords.x2 - bg_right - 1) {
 8021e22:	f012 0f08 	tst.w	r2, #8
 8021e26:	d013      	beq.n	8021e50 <draw_main+0x254>
 8021e28:	f9b6 1018 	ldrsh.w	r1, [r6, #24]
 8021e2c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021e2e:	1bc9      	subs	r1, r1, r7
 8021e30:	3901      	subs	r1, #1
 8021e32:	4288      	cmp	r0, r1
 8021e34:	da0c      	bge.n	8021e50 <draw_main+0x254>
                cell_area_border.x2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8021e36:	f9bd c14c 	ldrsh.w	ip, [sp, #332]	@ 0x14c
 8021e3a:	f00c 0101 	and.w	r1, ip, #1
 8021e3e:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
 8021e42:	eb01 016c 	add.w	r1, r1, ip, asr #1
 8021e46:	b289      	uxth	r1, r1
 8021e48:	fa11 f080 	uxtah	r0, r1, r0
 8021e4c:	f8ad 0058 	strh.w	r0, [sp, #88]	@ 0x58
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8021e50:	f012 0f01 	tst.w	r2, #1
 8021e54:	d013      	beq.n	8021e7e <draw_main+0x282>
               cell_area_border.y2 < obj->coords.y2 - bg_bottom - 1) {
 8021e56:	f9b6 201a 	ldrsh.w	r2, [r6, #26]
 8021e5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021e5c:	1a52      	subs	r2, r2, r1
 8021e5e:	3a01      	subs	r2, #1
            if((rect_dsc_def.border_side & LV_BORDER_SIDE_BOTTOM) &&
 8021e60:	4293      	cmp	r3, r2
 8021e62:	da0c      	bge.n	8021e7e <draw_main+0x282>
                cell_area_border.y2 += rect_dsc_def.border_width / 2 + (rect_dsc_def.border_width & 0x1);
 8021e64:	f9bd 114c 	ldrsh.w	r1, [sp, #332]	@ 0x14c
 8021e68:	f001 0201 	and.w	r2, r1, #1
 8021e6c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8021e70:	eb02 0261 	add.w	r2, r2, r1, asr #1
 8021e74:	b292      	uxth	r2, r2
 8021e76:	fa12 f383 	uxtah	r3, r2, r3
 8021e7a:	f8ad 305a 	strh.w	r3, [sp, #90]	@ 0x5a
            if(row == table->row_act && col == table->col_act) {
 8021e7e:	8ef3      	ldrh	r3, [r6, #54]	@ 0x36
 8021e80:	9a05      	ldr	r2, [sp, #20]
 8021e82:	4293      	cmp	r3, r2
 8021e84:	d103      	bne.n	8021e8e <draw_main+0x292>
 8021e86:	8eb3      	ldrh	r3, [r6, #52]	@ 0x34
 8021e88:	42ab      	cmp	r3, r5
 8021e8a:	f000 80cb 	beq.w	8022024 <draw_main+0x428>
                lv_memcpy(&rect_dsc_act, &rect_dsc_def, sizeof(lv_draw_rect_dsc_t));
 8021e8e:	2238      	movs	r2, #56	@ 0x38
 8021e90:	a94b      	add	r1, sp, #300	@ 0x12c
 8021e92:	a83d      	add	r0, sp, #244	@ 0xf4
 8021e94:	f7f4 fe28 	bl	8016ae8 <lv_memcpy>
                lv_memcpy(&label_dsc_act, &label_dsc_def, sizeof(lv_draw_label_dsc_t));
 8021e98:	2220      	movs	r2, #32
 8021e9a:	a935      	add	r1, sp, #212	@ 0xd4
 8021e9c:	a82d      	add	r0, sp, #180	@ 0xb4
 8021e9e:	f7f4 fe23 	bl	8016ae8 <lv_memcpy>
            part_draw_dsc.draw_area = &cell_area_border;
 8021ea2:	f10d 0854 	add.w	r8, sp, #84	@ 0x54
 8021ea6:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
            part_draw_dsc.id = row * table->col_cnt + col;
 8021eaa:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
 8021eac:	9a05      	ldr	r2, [sp, #20]
 8021eae:	9906      	ldr	r1, [sp, #24]
 8021eb0:	fb03 1702 	mla	r7, r3, r2, r1
 8021eb4:	9729      	str	r7, [sp, #164]	@ 0xa4
            lv_event_send(obj, LV_EVENT_DRAW_PART_BEGIN, &part_draw_dsc);
 8021eb6:	aa1b      	add	r2, sp, #108	@ 0x6c
 8021eb8:	211a      	movs	r1, #26
 8021eba:	4630      	mov	r0, r6
 8021ebc:	f7ee ff04 	bl	8010cc8 <lv_event_send>
            lv_draw_rect(draw_ctx, &rect_dsc_act, &cell_area_border);
 8021ec0:	4642      	mov	r2, r8
 8021ec2:	a93d      	add	r1, sp, #244	@ 0xf4
 8021ec4:	9808      	ldr	r0, [sp, #32]
 8021ec6:	f7e7 ff05 	bl	8009cd4 <lv_draw_rect>
            if(table->cell_data[cell]) {
 8021eca:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 8021ecc:	f853 300a 	ldr.w	r3, [r3, sl]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d069      	beq.n	8021fa8 <draw_main+0x3ac>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8021ed4:	2212      	movs	r2, #18
 8021ed6:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021eda:	4630      	mov	r0, r6
 8021edc:	f7fa fc0a 	bl	801c6f4 <lv_obj_get_style_prop>
 8021ee0:	9006      	str	r0, [sp, #24]
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8021ee2:	2213      	movs	r2, #19
 8021ee4:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021ee8:	4630      	mov	r0, r6
 8021eea:	f7fa fc03 	bl	801c6f4 <lv_obj_get_style_prop>
 8021eee:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8021ef0:	2210      	movs	r2, #16
 8021ef2:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021ef6:	4630      	mov	r0, r6
 8021ef8:	f7fa fbfc 	bl	801c6f4 <lv_obj_get_style_prop>
 8021efc:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8021efe:	2211      	movs	r2, #17
 8021f00:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 8021f04:	4630      	mov	r0, r6
 8021f06:	f7fa fbf5 	bl	801c6f4 <lv_obj_get_style_prop>
                txt_area.x1 = cell_area.x1 + cell_left;
 8021f0a:	f8bd 3164 	ldrh.w	r3, [sp, #356]	@ 0x164
 8021f0e:	9a06      	ldr	r2, [sp, #24]
 8021f10:	4413      	add	r3, r2
 8021f12:	fa1f fc83 	uxth.w	ip, r3
 8021f16:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
                txt_area.x2 = cell_area.x2 - cell_right;
 8021f1a:	f8bd 2168 	ldrh.w	r2, [sp, #360]	@ 0x168
 8021f1e:	eba2 0208 	sub.w	r2, r2, r8
 8021f22:	b293      	uxth	r3, r2
 8021f24:	f8ad 2060 	strh.w	r2, [sp, #96]	@ 0x60
                txt_area.y1 = cell_area.y1 + cell_top;
 8021f28:	f8bd 2166 	ldrh.w	r2, [sp, #358]	@ 0x166
 8021f2c:	443a      	add	r2, r7
 8021f2e:	f8ad 205e 	strh.w	r2, [sp, #94]	@ 0x5e
                txt_area.y2 = cell_area.y2 - cell_bottom;
 8021f32:	f8bd 216a 	ldrh.w	r2, [sp, #362]	@ 0x16a
 8021f36:	1a12      	subs	r2, r2, r0
 8021f38:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 8021f3c:	9a07      	ldr	r2, [sp, #28]
 8021f3e:	f012 0702 	ands.w	r7, r2, #2
 8021f42:	f040 80a9 	bne.w	8022098 <draw_main+0x49c>
                lv_text_flag_t txt_flags = LV_TEXT_FLAG_NONE;
 8021f46:	463a      	mov	r2, r7
                lv_txt_get_size(&txt_size, table->cell_data[cell]->txt, label_dsc_def.font,
 8021f48:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 8021f4a:	f851 100a 	ldr.w	r1, [r1, sl]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
 8021f4e:	eba3 030c 	sub.w	r3, r3, ip
 8021f52:	b29b      	uxth	r3, r3
 8021f54:	3301      	adds	r3, #1
 8021f56:	b21b      	sxth	r3, r3
 8021f58:	9202      	str	r2, [sp, #8]
 8021f5a:	9301      	str	r3, [sp, #4]
 8021f5c:	f9bd 30c6 	ldrsh.w	r3, [sp, #198]	@ 0xc6
 8021f60:	9300      	str	r3, [sp, #0]
 8021f62:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	@ 0xc8
 8021f66:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 8021f68:	3108      	adds	r1, #8
 8021f6a:	a85b      	add	r0, sp, #364	@ 0x16c
 8021f6c:	f005 fccd 	bl	802790a <lv_txt_get_size>
                if(!crop) {
 8021f70:	b99f      	cbnz	r7, 8021f9a <draw_main+0x39e>
                    txt_area.y1 = cell_area.y1 + h_row / 2 - txt_size.y / 2;
 8021f72:	f8bd 3166 	ldrh.w	r3, [sp, #358]	@ 0x166
 8021f76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021f78:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8021f7c:	eb03 0362 	add.w	r3, r3, r2, asr #1
 8021f80:	b29b      	uxth	r3, r3
 8021f82:	f9bd 216e 	ldrsh.w	r2, [sp, #366]	@ 0x16e
 8021f86:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8021f8a:	f3c2 024f 	ubfx	r2, r2, #1, #16
 8021f8e:	1a99      	subs	r1, r3, r2
 8021f90:	f8ad 105e 	strh.w	r1, [sp, #94]	@ 0x5e
                    txt_area.y2 = cell_area.y1 + h_row / 2 + txt_size.y / 2;
 8021f94:	4413      	add	r3, r2
 8021f96:	f8ad 3062 	strh.w	r3, [sp, #98]	@ 0x62
                label_mask_ok = _lv_area_intersect(&label_clip_area, &clip_area, &cell_area);
 8021f9a:	aa59      	add	r2, sp, #356	@ 0x164
 8021f9c:	a95c      	add	r1, sp, #368	@ 0x170
 8021f9e:	a819      	add	r0, sp, #100	@ 0x64
 8021fa0:	f7df fd28 	bl	80019f4 <_lv_area_intersect>
                if(label_mask_ok) {
 8021fa4:	2800      	cmp	r0, #0
 8021fa6:	d179      	bne.n	802209c <draw_main+0x4a0>
            lv_event_send(obj, LV_EVENT_DRAW_PART_END, &part_draw_dsc);
 8021fa8:	aa1b      	add	r2, sp, #108	@ 0x6c
 8021faa:	211b      	movs	r1, #27
 8021fac:	4630      	mov	r0, r6
 8021fae:	f7ee fe8b 	bl	8010cc8 <lv_event_send>
            cell += col_merge + 1;
 8021fb2:	44a3      	add	fp, r4
 8021fb4:	fa1f fb8b 	uxth.w	fp, fp
 8021fb8:	f10b 0b01 	add.w	fp, fp, #1
 8021fbc:	fa1f fb8b 	uxth.w	fp, fp
            col += col_merge;
 8021fc0:	442c      	add	r4, r5
 8021fc2:	b2a4      	uxth	r4, r4
        for(col = 0; col < table->col_cnt; col++) {
 8021fc4:	3401      	adds	r4, #1
 8021fc6:	b2a5      	uxth	r5, r4
 8021fc8:	8cb1      	ldrh	r1, [r6, #36]	@ 0x24
 8021fca:	42a9      	cmp	r1, r5
 8021fcc:	d977      	bls.n	80220be <draw_main+0x4c2>
            if(table->cell_data[cell]) ctrl = table->cell_data[cell]->ctrl;
 8021fce:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 8021fd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021fd4:	f850 302b 	ldr.w	r3, [r0, fp, lsl #2]
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	f43f aeaf 	beq.w	8021d3c <draw_main+0x140>
 8021fde:	781b      	ldrb	r3, [r3, #0]
 8021fe0:	9307      	str	r3, [sp, #28]
            if(rtl) {
 8021fe2:	f1b9 0f01 	cmp.w	r9, #1
 8021fe6:	f43f aeac 	beq.w	8021d42 <draw_main+0x146>
                cell_area.x1 = cell_area.x2 + 1;
 8021fea:	f8bd 3168 	ldrh.w	r3, [sp, #360]	@ 0x168
 8021fee:	3301      	adds	r3, #1
 8021ff0:	f8ad 3164 	strh.w	r3, [sp, #356]	@ 0x164
                cell_area.x2 = cell_area.x1 + table->col_w[col] - 1;
 8021ff4:	6b32      	ldr	r2, [r6, #48]	@ 0x30
 8021ff6:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8021ffa:	fa12 f383 	uxtah	r3, r2, r3
 8021ffe:	b29b      	uxth	r3, r3
 8022000:	3b01      	subs	r3, #1
 8022002:	f8ad 3168 	strh.w	r3, [sp, #360]	@ 0x168
            lv_table_cell_ctrl_t ctrl = 0;
 8022006:	2400      	movs	r4, #0
 8022008:	e6b1      	b.n	8021d6e <draw_main+0x172>
 802200a:	bf00      	nop
 802200c:	0802df98 	.word	0x0802df98
                cell += col_merge + 1;
 8022010:	44a3      	add	fp, r4
 8022012:	fa1f fb8b 	uxth.w	fp, fp
 8022016:	f10b 0b01 	add.w	fp, fp, #1
 802201a:	fa1f fb8b 	uxth.w	fp, fp
                col += col_merge;
 802201e:	442c      	add	r4, r5
 8022020:	b2a4      	uxth	r4, r4
                continue;
 8022022:	e7cf      	b.n	8021fc4 <draw_main+0x3c8>
                if(!(obj->state & LV_STATE_SCROLLED) && (obj->state & LV_STATE_PRESSED)) cell_state |= LV_STATE_PRESSED;
 8022024:	8c32      	ldrh	r2, [r6, #32]
 8022026:	f002 0360 	and.w	r3, r2, #96	@ 0x60
 802202a:	2b20      	cmp	r3, #32
 802202c:	d000      	beq.n	8022030 <draw_main+0x434>
            lv_state_t cell_state = LV_STATE_DEFAULT;
 802202e:	2300      	movs	r3, #0
                if(obj->state & LV_STATE_FOCUSED) cell_state |= LV_STATE_FOCUSED;
 8022030:	f012 0f02 	tst.w	r2, #2
 8022034:	d001      	beq.n	802203a <draw_main+0x43e>
 8022036:	f043 0302 	orr.w	r3, r3, #2
                if(obj->state & LV_STATE_FOCUS_KEY) cell_state |= LV_STATE_FOCUS_KEY;
 802203a:	f012 0f04 	tst.w	r2, #4
 802203e:	d001      	beq.n	8022044 <draw_main+0x448>
 8022040:	f043 0304 	orr.w	r3, r3, #4
                if(obj->state & LV_STATE_EDITED) cell_state |= LV_STATE_EDITED;
 8022044:	f012 0f08 	tst.w	r2, #8
 8022048:	d023      	beq.n	8022092 <draw_main+0x496>
 802204a:	f043 0308 	orr.w	r3, r3, #8
                obj->state = cell_state;
 802204e:	8433      	strh	r3, [r6, #32]
                obj->skip_trans = 1;
 8022050:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8022054:	f043 0308 	orr.w	r3, r3, #8
 8022058:	f886 3022 	strb.w	r3, [r6, #34]	@ 0x22
                lv_draw_rect_dsc_init(&rect_dsc_act);
 802205c:	a83d      	add	r0, sp, #244	@ 0xf4
 802205e:	f7e7 fdf7 	bl	8009c50 <lv_draw_rect_dsc_init>
                lv_draw_label_dsc_init(&label_dsc_act);
 8022062:	a82d      	add	r0, sp, #180	@ 0xb4
 8022064:	f7e5 ffa0 	bl	8007fa8 <lv_draw_label_dsc_init>
                lv_obj_init_draw_rect_dsc(obj, LV_PART_ITEMS, &rect_dsc_act);
 8022068:	aa3d      	add	r2, sp, #244	@ 0xf4
 802206a:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 802206e:	4630      	mov	r0, r6
 8022070:	f7f6 fe28 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
                lv_obj_init_draw_label_dsc(obj, LV_PART_ITEMS, &label_dsc_act);
 8022074:	aa2d      	add	r2, sp, #180	@ 0xb4
 8022076:	f44f 21a0 	mov.w	r1, #327680	@ 0x50000
 802207a:	4630      	mov	r0, r6
 802207c:	f7f6 ff74 	bl	8018f68 <lv_obj_init_draw_label_dsc>
                obj->state = state_ori;
 8022080:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8022082:	8433      	strh	r3, [r6, #32]
                obj->skip_trans = 0;
 8022084:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 8022088:	f023 0308 	bic.w	r3, r3, #8
 802208c:	f886 3022 	strb.w	r3, [r6, #34]	@ 0x22
 8022090:	e707      	b.n	8021ea2 <draw_main+0x2a6>
            if(cell_state == LV_STATE_DEFAULT) {
 8022092:	2b00      	cmp	r3, #0
 8022094:	d1db      	bne.n	802204e <draw_main+0x452>
 8022096:	e6fa      	b.n	8021e8e <draw_main+0x292>
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 8022098:	2202      	movs	r2, #2
 802209a:	e755      	b.n	8021f48 <draw_main+0x34c>
                    draw_ctx->clip_area = &label_clip_area;
 802209c:	ab19      	add	r3, sp, #100	@ 0x64
 802209e:	9f08      	ldr	r7, [sp, #32]
 80220a0:	4638      	mov	r0, r7
 80220a2:	60bb      	str	r3, [r7, #8]
                    lv_draw_label(draw_ctx, &label_dsc_act, &txt_area, table->cell_data[cell]->txt, NULL);
 80220a4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80220a6:	f853 300a 	ldr.w	r3, [r3, sl]
 80220aa:	2200      	movs	r2, #0
 80220ac:	9200      	str	r2, [sp, #0]
 80220ae:	3308      	adds	r3, #8
 80220b0:	aa17      	add	r2, sp, #92	@ 0x5c
 80220b2:	a92d      	add	r1, sp, #180	@ 0xb4
 80220b4:	f7e5 ffa8 	bl	8008008 <lv_draw_label>
                    draw_ctx->clip_area = &clip_area;
 80220b8:	ab5c      	add	r3, sp, #368	@ 0x170
 80220ba:	60bb      	str	r3, [r7, #8]
 80220bc:	e774      	b.n	8021fa8 <draw_main+0x3ac>
    for(row = 0; row < table->row_cnt; row++) {
 80220be:	9b05      	ldr	r3, [sp, #20]
 80220c0:	3301      	adds	r3, #1
 80220c2:	b29b      	uxth	r3, r3
 80220c4:	9305      	str	r3, [sp, #20]
 80220c6:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 80220c8:	9a05      	ldr	r2, [sp, #20]
 80220ca:	4293      	cmp	r3, r2
 80220cc:	d926      	bls.n	802211c <draw_main+0x520>
        lv_coord_t h_row = table->row_h[row];
 80220ce:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80220d0:	9a05      	ldr	r2, [sp, #20]
 80220d2:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 80220d6:	910d      	str	r1, [sp, #52]	@ 0x34
        cell_area.y1 = cell_area.y2 + 1;
 80220d8:	f8bd 316a 	ldrh.w	r3, [sp, #362]	@ 0x16a
 80220dc:	3301      	adds	r3, #1
 80220de:	b21a      	sxth	r2, r3
 80220e0:	f8ad 2166 	strh.w	r2, [sp, #358]	@ 0x166
        cell_area.y2 = cell_area.y1 + h_row - 1;
 80220e4:	fa11 f383 	uxtah	r3, r1, r3
 80220e8:	b29b      	uxth	r3, r3
 80220ea:	3b01      	subs	r3, #1
 80220ec:	f8ad 316a 	strh.w	r3, [sp, #362]	@ 0x16a
        if(cell_area.y1 > clip_area.y2) break;
 80220f0:	f9bd 3176 	ldrsh.w	r3, [sp, #374]	@ 0x176
 80220f4:	429a      	cmp	r2, r3
 80220f6:	dc11      	bgt.n	802211c <draw_main+0x520>
        if(rtl) cell_area.x1 = obj->coords.x2 - bg_right - 1 - scroll_x - border_width;
 80220f8:	f1b9 0f01 	cmp.w	r9, #1
 80220fc:	f43f ae11 	beq.w	8021d22 <draw_main+0x126>
        else cell_area.x2 = obj->coords.x1 + bg_left - 1 - scroll_x + border_width;
 8022100:	8ab3      	ldrh	r3, [r6, #20]
 8022102:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022104:	4413      	add	r3, r2
 8022106:	b29b      	uxth	r3, r3
 8022108:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802210a:	1a9b      	subs	r3, r3, r2
 802210c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802210e:	fa12 f383 	uxtah	r3, r2, r3
 8022112:	3b01      	subs	r3, #1
 8022114:	f8ad 3168 	strh.w	r3, [sp, #360]	@ 0x168
                if(crop) txt_flags = LV_TEXT_FLAG_EXPAND;
 8022118:	2500      	movs	r5, #0
 802211a:	e755      	b.n	8021fc8 <draw_main+0x3cc>
    draw_ctx->clip_area = clip_area_ori;
 802211c:	9b08      	ldr	r3, [sp, #32]
 802211e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022120:	609a      	str	r2, [r3, #8]
 8022122:	e57d      	b.n	8021c20 <draw_main+0x24>

08022124 <lv_table_event>:
{
 8022124:	b570      	push	{r4, r5, r6, lr}
 8022126:	b082      	sub	sp, #8
 8022128:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802212a:	489e      	ldr	r0, [pc, #632]	@ (80223a4 <lv_table_event+0x280>)
 802212c:	f7ee fd22 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8022130:	2801      	cmp	r0, #1
 8022132:	d001      	beq.n	8022138 <lv_table_event+0x14>
}
 8022134:	b002      	add	sp, #8
 8022136:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8022138:	4620      	mov	r0, r4
 802213a:	f7ee fdf3 	bl	8010d24 <lv_event_get_code>
 802213e:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8022140:	4620      	mov	r0, r4
 8022142:	f7ee fdeb 	bl	8010d1c <lv_event_get_target>
 8022146:	4605      	mov	r5, r0
    if(code == LV_EVENT_STYLE_CHANGED) {
 8022148:	1e70      	subs	r0, r6, #1
 802214a:	282b      	cmp	r0, #43	@ 0x2b
 802214c:	d8f2      	bhi.n	8022134 <lv_table_event+0x10>
 802214e:	a301      	add	r3, pc, #4	@ (adr r3, 8022154 <lv_table_event+0x30>)
 8022150:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022154:	0802224f 	.word	0x0802224f
 8022158:	0802224f 	.word	0x0802224f
 802215c:	08022135 	.word	0x08022135
 8022160:	08022135 	.word	0x08022135
 8022164:	08022135 	.word	0x08022135
 8022168:	08022135 	.word	0x08022135
 802216c:	08022135 	.word	0x08022135
 8022170:	08022287 	.word	0x08022287
 8022174:	08022135 	.word	0x08022135
 8022178:	08022135 	.word	0x08022135
 802217c:	08022135 	.word	0x08022135
 8022180:	08022135 	.word	0x08022135
 8022184:	080222dd 	.word	0x080222dd
 8022188:	080222d5 	.word	0x080222d5
 802218c:	08022135 	.word	0x08022135
 8022190:	08022135 	.word	0x08022135
 8022194:	08022135 	.word	0x08022135
 8022198:	08022135 	.word	0x08022135
 802219c:	08022135 	.word	0x08022135
 80221a0:	08022135 	.word	0x08022135
 80221a4:	0802239d 	.word	0x0802239d
 80221a8:	08022135 	.word	0x08022135
 80221ac:	08022135 	.word	0x08022135
 80221b0:	08022135 	.word	0x08022135
 80221b4:	08022135 	.word	0x08022135
 80221b8:	08022135 	.word	0x08022135
 80221bc:	08022135 	.word	0x08022135
 80221c0:	08022135 	.word	0x08022135
 80221c4:	08022135 	.word	0x08022135
 80221c8:	08022135 	.word	0x08022135
 80221cc:	08022135 	.word	0x08022135
 80221d0:	08022135 	.word	0x08022135
 80221d4:	08022135 	.word	0x08022135
 80221d8:	08022135 	.word	0x08022135
 80221dc:	08022135 	.word	0x08022135
 80221e0:	08022135 	.word	0x08022135
 80221e4:	08022135 	.word	0x08022135
 80221e8:	08022135 	.word	0x08022135
 80221ec:	08022135 	.word	0x08022135
 80221f0:	08022135 	.word	0x08022135
 80221f4:	08022135 	.word	0x08022135
 80221f8:	08022205 	.word	0x08022205
 80221fc:	08022135 	.word	0x08022135
 8022200:	0802220f 	.word	0x0802220f
        refr_size_form_row(obj, 0);
 8022204:	2100      	movs	r1, #0
 8022206:	4628      	mov	r0, r5
 8022208:	f7ff fb41 	bl	802188e <refr_size_form_row>
 802220c:	e792      	b.n	8022134 <lv_table_event+0x10>
        lv_point_t * p = lv_event_get_param(e);
 802220e:	4620      	mov	r0, r4
 8022210:	f7ee fd8c 	bl	8010d2c <lv_event_get_param>
        lv_coord_t w = 0;
 8022214:	2200      	movs	r2, #0
        for(i = 0; i < table->col_cnt; i++) w += table->col_w[i];
 8022216:	4613      	mov	r3, r2
 8022218:	e005      	b.n	8022226 <lv_table_event+0x102>
 802221a:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 802221c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8022220:	440a      	add	r2, r1
 8022222:	b212      	sxth	r2, r2
 8022224:	3301      	adds	r3, #1
 8022226:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
 8022228:	4299      	cmp	r1, r3
 802222a:	d8f6      	bhi.n	802221a <lv_table_event+0xf6>
        lv_coord_t h = 0;
 802222c:	2300      	movs	r3, #0
        for(i = 0; i < table->row_cnt; i++) h += table->row_h[i];
 802222e:	4619      	mov	r1, r3
 8022230:	e005      	b.n	802223e <lv_table_event+0x11a>
 8022232:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8022234:	f834 4011 	ldrh.w	r4, [r4, r1, lsl #1]
 8022238:	4423      	add	r3, r4
 802223a:	b21b      	sxth	r3, r3
 802223c:	3101      	adds	r1, #1
 802223e:	8cec      	ldrh	r4, [r5, #38]	@ 0x26
 8022240:	428c      	cmp	r4, r1
 8022242:	d8f6      	bhi.n	8022232 <lv_table_event+0x10e>
        p->x = w - 1;
 8022244:	3a01      	subs	r2, #1
 8022246:	8002      	strh	r2, [r0, #0]
        p->y = h - 1;
 8022248:	3b01      	subs	r3, #1
 802224a:	8043      	strh	r3, [r0, #2]
 802224c:	e772      	b.n	8022134 <lv_table_event+0x10>
        lv_res_t pr_res = get_pressed_cell(obj, &row, &col);
 802224e:	aa01      	add	r2, sp, #4
 8022250:	f10d 0106 	add.w	r1, sp, #6
 8022254:	4628      	mov	r0, r5
 8022256:	f7ff fb8a 	bl	802196e <get_pressed_cell>
        if(pr_res == LV_RES_OK && (table->col_act != col || table->row_act != row)) {
 802225a:	2801      	cmp	r0, #1
 802225c:	f47f af6a 	bne.w	8022134 <lv_table_event+0x10>
 8022260:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 8022262:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8022266:	429a      	cmp	r2, r3
 8022268:	d105      	bne.n	8022276 <lv_table_event+0x152>
 802226a:	8ee9      	ldrh	r1, [r5, #54]	@ 0x36
 802226c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8022270:	4291      	cmp	r1, r2
 8022272:	f43f af5f 	beq.w	8022134 <lv_table_event+0x10>
            table->col_act = col;
 8022276:	86ab      	strh	r3, [r5, #52]	@ 0x34
            table->row_act = row;
 8022278:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802227c:	86eb      	strh	r3, [r5, #54]	@ 0x36
            lv_obj_invalidate(obj);
 802227e:	4628      	mov	r0, r5
 8022280:	f7f7 fe11 	bl	8019ea6 <lv_obj_invalidate>
 8022284:	e756      	b.n	8022134 <lv_table_event+0x10>
        lv_obj_invalidate(obj);
 8022286:	4628      	mov	r0, r5
 8022288:	f7f7 fe0d 	bl	8019ea6 <lv_obj_invalidate>
        lv_indev_t * indev = lv_indev_get_act();
 802228c:	f7f2 fa70 	bl	8014770 <lv_indev_get_act>
        lv_obj_t * scroll_obj = lv_indev_get_scroll_obj(indev);
 8022290:	f7f2 fb0e 	bl	80148b0 <lv_indev_get_scroll_obj>
        if(table->col_act != LV_TABLE_CELL_NONE && table->row_act != LV_TABLE_CELL_NONE && scroll_obj == NULL) {
 8022294:	8eaa      	ldrh	r2, [r5, #52]	@ 0x34
 8022296:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802229a:	429a      	cmp	r2, r3
 802229c:	d003      	beq.n	80222a6 <lv_table_event+0x182>
 802229e:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 80222a0:	429a      	cmp	r2, r3
 80222a2:	d000      	beq.n	80222a6 <lv_table_event+0x182>
 80222a4:	b168      	cbz	r0, 80222c2 <lv_table_event+0x19e>
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 80222a6:	f7f2 fa63 	bl	8014770 <lv_indev_get_act>
 80222aa:	f7f2 fa67 	bl	801477c <lv_indev_get_type>
        if(indev_type == LV_INDEV_TYPE_POINTER || indev_type == LV_INDEV_TYPE_BUTTON) {
 80222ae:	2801      	cmp	r0, #1
 80222b0:	d002      	beq.n	80222b8 <lv_table_event+0x194>
 80222b2:	2803      	cmp	r0, #3
 80222b4:	f47f af3e 	bne.w	8022134 <lv_table_event+0x10>
            table->col_act = LV_TABLE_CELL_NONE;
 80222b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80222bc:	86ab      	strh	r3, [r5, #52]	@ 0x34
            table->row_act = LV_TABLE_CELL_NONE;
 80222be:	86eb      	strh	r3, [r5, #54]	@ 0x36
 80222c0:	e738      	b.n	8022134 <lv_table_event+0x10>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80222c2:	2200      	movs	r2, #0
 80222c4:	211c      	movs	r1, #28
 80222c6:	4628      	mov	r0, r5
 80222c8:	f7ee fcfe 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 80222cc:	2801      	cmp	r0, #1
 80222ce:	f47f af31 	bne.w	8022134 <lv_table_event+0x10>
 80222d2:	e7e8      	b.n	80222a6 <lv_table_event+0x182>
        lv_obj_invalidate(obj);
 80222d4:	4628      	mov	r0, r5
 80222d6:	f7f7 fde6 	bl	8019ea6 <lv_obj_invalidate>
 80222da:	e72b      	b.n	8022134 <lv_table_event+0x10>
        int32_t c = *((int32_t *)lv_event_get_param(e));
 80222dc:	4620      	mov	r0, r4
 80222de:	f7ee fd25 	bl	8010d2c <lv_event_get_param>
 80222e2:	6802      	ldr	r2, [r0, #0]
        int32_t col = table->col_act;
 80222e4:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
        int32_t row = table->row_act;
 80222e6:	8eec      	ldrh	r4, [r5, #54]	@ 0x36
        if(col == LV_TABLE_CELL_NONE || row == LV_TABLE_CELL_NONE) {
 80222e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80222ec:	4299      	cmp	r1, r3
 80222ee:	d012      	beq.n	8022316 <lv_table_event+0x1f2>
 80222f0:	429c      	cmp	r4, r3
 80222f2:	d010      	beq.n	8022316 <lv_table_event+0x1f2>
        if(col >= table->col_cnt) col = 0;
 80222f4:	f8b5 c024 	ldrh.w	ip, [r5, #36]	@ 0x24
 80222f8:	4561      	cmp	r1, ip
 80222fa:	d216      	bcs.n	802232a <lv_table_event+0x206>
        int32_t col = table->col_act;
 80222fc:	4608      	mov	r0, r1
        if(row >= table->row_cnt) row = 0;
 80222fe:	8cee      	ldrh	r6, [r5, #38]	@ 0x26
 8022300:	42b4      	cmp	r4, r6
 8022302:	d214      	bcs.n	802232e <lv_table_event+0x20a>
        int32_t row = table->row_act;
 8022304:	4623      	mov	r3, r4
        if(c == LV_KEY_LEFT) col--;
 8022306:	3a11      	subs	r2, #17
 8022308:	2a03      	cmp	r2, #3
 802230a:	f63f af13 	bhi.w	8022134 <lv_table_event+0x10>
 802230e:	e8df f002 	tbb	[pc, r2]
 8022312:	1d1b      	.short	0x1d1b
 8022314:	1019      	.short	0x1019
            table->col_act = 0;
 8022316:	2300      	movs	r3, #0
 8022318:	86ab      	strh	r3, [r5, #52]	@ 0x34
            table->row_act = 0;
 802231a:	86eb      	strh	r3, [r5, #54]	@ 0x36
            scroll_to_selected_cell(obj);
 802231c:	4628      	mov	r0, r5
 802231e:	f7ff fc20 	bl	8021b62 <scroll_to_selected_cell>
            lv_obj_invalidate(obj);
 8022322:	4628      	mov	r0, r5
 8022324:	f7f7 fdbf 	bl	8019ea6 <lv_obj_invalidate>
            return;
 8022328:	e704      	b.n	8022134 <lv_table_event+0x10>
        if(col >= table->col_cnt) col = 0;
 802232a:	2000      	movs	r0, #0
 802232c:	e7e7      	b.n	80222fe <lv_table_event+0x1da>
        if(row >= table->row_cnt) row = 0;
 802232e:	2300      	movs	r3, #0
 8022330:	e7e9      	b.n	8022306 <lv_table_event+0x1e2>
        if(c == LV_KEY_LEFT) col--;
 8022332:	3801      	subs	r0, #1
        if(col >= table->col_cnt) {
 8022334:	4584      	cmp	ip, r0
 8022336:	dc0e      	bgt.n	8022356 <lv_table_event+0x232>
            if(row < table->row_cnt - 1) {
 8022338:	1e72      	subs	r2, r6, #1
 802233a:	429a      	cmp	r2, r3
 802233c:	dd08      	ble.n	8022350 <lv_table_event+0x22c>
                row++;
 802233e:	3301      	adds	r3, #1
                col = 0;
 8022340:	2000      	movs	r0, #0
 8022342:	e00a      	b.n	802235a <lv_table_event+0x236>
        else if(c == LV_KEY_RIGHT) col++;
 8022344:	3001      	adds	r0, #1
 8022346:	e7f5      	b.n	8022334 <lv_table_event+0x210>
        else if(c == LV_KEY_UP) row--;
 8022348:	3b01      	subs	r3, #1
 802234a:	e7f3      	b.n	8022334 <lv_table_event+0x210>
        else if(c == LV_KEY_DOWN) row++;
 802234c:	3301      	adds	r3, #1
 802234e:	e7f1      	b.n	8022334 <lv_table_event+0x210>
                col = table->col_cnt - 1;
 8022350:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8022354:	e001      	b.n	802235a <lv_table_event+0x236>
        else if(col < 0) {
 8022356:	2800      	cmp	r0, #0
 8022358:	db15      	blt.n	8022386 <lv_table_event+0x262>
        if(row >= table->row_cnt) {
 802235a:	429e      	cmp	r6, r3
 802235c:	dc1a      	bgt.n	8022394 <lv_table_event+0x270>
            row = table->row_cnt - 1;
 802235e:	1e73      	subs	r3, r6, #1
        if(table->col_act != col || table->row_act != row) {
 8022360:	4288      	cmp	r0, r1
 8022362:	d102      	bne.n	802236a <lv_table_event+0x246>
 8022364:	42a3      	cmp	r3, r4
 8022366:	f43f aee5 	beq.w	8022134 <lv_table_event+0x10>
            table->col_act = col;
 802236a:	86a8      	strh	r0, [r5, #52]	@ 0x34
            table->row_act = row;
 802236c:	86eb      	strh	r3, [r5, #54]	@ 0x36
            lv_obj_invalidate(obj);
 802236e:	4628      	mov	r0, r5
 8022370:	f7f7 fd99 	bl	8019ea6 <lv_obj_invalidate>
            scroll_to_selected_cell(obj);
 8022374:	4628      	mov	r0, r5
 8022376:	f7ff fbf4 	bl	8021b62 <scroll_to_selected_cell>
            res = lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 802237a:	2200      	movs	r2, #0
 802237c:	211c      	movs	r1, #28
 802237e:	4628      	mov	r0, r5
 8022380:	f7ee fca2 	bl	8010cc8 <lv_event_send>
            if(res != LV_RES_OK) return;
 8022384:	e6d6      	b.n	8022134 <lv_table_event+0x10>
            if(row != 0) {
 8022386:	b11b      	cbz	r3, 8022390 <lv_table_event+0x26c>
                col = table->col_cnt - 1;
 8022388:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
                row--;
 802238c:	3b01      	subs	r3, #1
 802238e:	e7e4      	b.n	802235a <lv_table_event+0x236>
                col = 0;
 8022390:	4618      	mov	r0, r3
 8022392:	e7e2      	b.n	802235a <lv_table_event+0x236>
        else if(row < 0) {
 8022394:	2b00      	cmp	r3, #0
 8022396:	dae3      	bge.n	8022360 <lv_table_event+0x23c>
            row = 0;
 8022398:	2300      	movs	r3, #0
 802239a:	e7e1      	b.n	8022360 <lv_table_event+0x23c>
        draw_main(e);
 802239c:	4620      	mov	r0, r4
 802239e:	f7ff fc2d 	bl	8021bfc <draw_main>
 80223a2:	e6c7      	b.n	8022134 <lv_table_event+0x10>
 80223a4:	0802df98 	.word	0x0802df98

080223a8 <lv_table_destructor>:
{
 80223a8:	b570      	push	{r4, r5, r6, lr}
 80223aa:	460e      	mov	r6, r1
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80223ac:	2400      	movs	r4, #0
 80223ae:	e008      	b.n	80223c2 <lv_table_destructor+0x1a>
            lv_mem_free(table->cell_data[i]);
 80223b0:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80223b2:	5958      	ldr	r0, [r3, r5]
 80223b4:	f7f4 face 	bl	8016954 <lv_mem_free>
            table->cell_data[i] = NULL;
 80223b8:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80223ba:	2200      	movs	r2, #0
 80223bc:	515a      	str	r2, [r3, r5]
    for(i = 0; i < table->col_cnt * table->row_cnt; i++) {
 80223be:	3401      	adds	r4, #1
 80223c0:	b2a4      	uxth	r4, r4
 80223c2:	8cb3      	ldrh	r3, [r6, #36]	@ 0x24
 80223c4:	8cf2      	ldrh	r2, [r6, #38]	@ 0x26
 80223c6:	fb02 f303 	mul.w	r3, r2, r3
 80223ca:	429c      	cmp	r4, r3
 80223cc:	da0f      	bge.n	80223ee <lv_table_destructor+0x46>
        if(table->cell_data[i]) {
 80223ce:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80223d0:	00a5      	lsls	r5, r4, #2
 80223d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d0f1      	beq.n	80223be <lv_table_destructor+0x16>
            if(table->cell_data[i]->user_data) {
 80223da:	6858      	ldr	r0, [r3, #4]
 80223dc:	2800      	cmp	r0, #0
 80223de:	d0e7      	beq.n	80223b0 <lv_table_destructor+0x8>
                lv_mem_free(table->cell_data[i]->user_data);
 80223e0:	f7f4 fab8 	bl	8016954 <lv_mem_free>
                table->cell_data[i]->user_data = NULL;
 80223e4:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80223e6:	595b      	ldr	r3, [r3, r5]
 80223e8:	2200      	movs	r2, #0
 80223ea:	605a      	str	r2, [r3, #4]
 80223ec:	e7e0      	b.n	80223b0 <lv_table_destructor+0x8>
    if(table->cell_data) lv_mem_free(table->cell_data);
 80223ee:	6ab0      	ldr	r0, [r6, #40]	@ 0x28
 80223f0:	b108      	cbz	r0, 80223f6 <lv_table_destructor+0x4e>
 80223f2:	f7f4 faaf 	bl	8016954 <lv_mem_free>
    if(table->row_h) lv_mem_free(table->row_h);
 80223f6:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 80223f8:	b108      	cbz	r0, 80223fe <lv_table_destructor+0x56>
 80223fa:	f7f4 faab 	bl	8016954 <lv_mem_free>
    if(table->col_w) lv_mem_free(table->col_w);
 80223fe:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8022400:	b108      	cbz	r0, 8022406 <lv_table_destructor+0x5e>
 8022402:	f7f4 faa7 	bl	8016954 <lv_mem_free>
}
 8022406:	bd70      	pop	{r4, r5, r6, pc}

08022408 <lv_table_constructor>:
{
 8022408:	b510      	push	{r4, lr}
 802240a:	460c      	mov	r4, r1
    table->col_cnt = 1;
 802240c:	2301      	movs	r3, #1
 802240e:	848b      	strh	r3, [r1, #36]	@ 0x24
    table->row_cnt = 1;
 8022410:	84cb      	strh	r3, [r1, #38]	@ 0x26
    table->col_w = lv_mem_alloc(table->col_cnt * sizeof(table->col_w[0]));
 8022412:	2002      	movs	r0, #2
 8022414:	f7f4 fa80 	bl	8016918 <lv_mem_alloc>
 8022418:	6320      	str	r0, [r4, #48]	@ 0x30
    table->row_h = lv_mem_alloc(table->row_cnt * sizeof(table->row_h[0]));
 802241a:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 802241c:	0040      	lsls	r0, r0, #1
 802241e:	f7f4 fa7b 	bl	8016918 <lv_mem_alloc>
 8022422:	62e0      	str	r0, [r4, #44]	@ 0x2c
    table->col_w[0] = LV_DPI_DEF;
 8022424:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8022426:	2382      	movs	r3, #130	@ 0x82
 8022428:	8013      	strh	r3, [r2, #0]
    table->row_h[0] = LV_DPI_DEF;
 802242a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 802242c:	8013      	strh	r3, [r2, #0]
    table->cell_data = lv_mem_realloc(table->cell_data, table->row_cnt * table->col_cnt * sizeof(lv_table_cell_t *));
 802242e:	8ce1      	ldrh	r1, [r4, #38]	@ 0x26
 8022430:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
 8022432:	fb03 f101 	mul.w	r1, r3, r1
 8022436:	0089      	lsls	r1, r1, #2
 8022438:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802243a:	f7f4 faa7 	bl	801698c <lv_mem_realloc>
 802243e:	62a0      	str	r0, [r4, #40]	@ 0x28
    table->cell_data[0] = NULL;
 8022440:	2300      	movs	r3, #0
 8022442:	6003      	str	r3, [r0, #0]
}
 8022444:	bd10      	pop	{r4, pc}

08022446 <lv_tabview_destructor>:
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
}

static void lv_tabview_destructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8022446:	b538      	push	{r3, r4, r5, lr}
 8022448:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_tabview_t * tabview = (lv_tabview_t *)obj;

    uint32_t i;
    if(tabview->tab_pos & LV_DIR_VER) {
 802244a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 802244e:	f013 0f0c 	tst.w	r3, #12
 8022452:	d118      	bne.n	8022486 <lv_tabview_destructor+0x40>
        for(i = 0; i < tabview->tab_cnt; i++) {
            lv_mem_free((void *)tabview->map[i]);
            tabview->map[i] = NULL;
        }
    }
    if(tabview->tab_pos & LV_DIR_HOR) {
 8022454:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8022458:	f013 0f03 	tst.w	r3, #3
 802245c:	d123      	bne.n	80224a6 <lv_tabview_destructor+0x60>
            tabview->map[i * 2] = NULL;
        }
    }


    lv_mem_free(tabview->map);
 802245e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022460:	f7f4 fa78 	bl	8016954 <lv_mem_free>
    tabview->map = NULL;
 8022464:	2300      	movs	r3, #0
 8022466:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8022468:	bd38      	pop	{r3, r4, r5, pc}
            lv_mem_free((void *)tabview->map[i]);
 802246a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 802246c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022470:	f7f4 fa70 	bl	8016954 <lv_mem_free>
            tabview->map[i] = NULL;
 8022474:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8022476:	2200      	movs	r2, #0
 8022478:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
        for(i = 0; i < tabview->tab_cnt; i++) {
 802247c:	3501      	adds	r5, #1
 802247e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8022480:	42ab      	cmp	r3, r5
 8022482:	d8f2      	bhi.n	802246a <lv_tabview_destructor+0x24>
 8022484:	e7e6      	b.n	8022454 <lv_tabview_destructor+0xe>
 8022486:	2500      	movs	r5, #0
 8022488:	e7f9      	b.n	802247e <lv_tabview_destructor+0x38>
            lv_mem_free((void *)tabview->map[i * 2]);
 802248a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 802248c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
 8022490:	f7f4 fa60 	bl	8016954 <lv_mem_free>
            tabview->map[i * 2] = NULL;
 8022494:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8022496:	2200      	movs	r2, #0
 8022498:	f843 2035 	str.w	r2, [r3, r5, lsl #3]
        for(i = 0; i < tabview->tab_cnt; i++) {
 802249c:	3501      	adds	r5, #1
 802249e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80224a0:	42ab      	cmp	r3, r5
 80224a2:	d8f2      	bhi.n	802248a <lv_tabview_destructor+0x44>
 80224a4:	e7db      	b.n	802245e <lv_tabview_destructor+0x18>
 80224a6:	2500      	movs	r5, #0
 80224a8:	e7f9      	b.n	802249e <lv_tabview_destructor+0x58>
	...

080224ac <lv_tabview_constructor>:
{
 80224ac:	b570      	push	{r4, r5, r6, lr}
 80224ae:	460c      	mov	r4, r1
    tabview->tab_pos = tabpos_create;
 80224b0:	4b52      	ldr	r3, [pc, #328]	@ (80225fc <lv_tabview_constructor+0x150>)
 80224b2:	781b      	ldrb	r3, [r3, #0]
 80224b4:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c
    switch(tabview->tab_pos) {
 80224b8:	3b01      	subs	r3, #1
 80224ba:	2b07      	cmp	r3, #7
 80224bc:	d809      	bhi.n	80224d2 <lv_tabview_constructor+0x26>
 80224be:	e8df f003 	tbb	[pc, r3]
 80224c2:	5e59      	.short	0x5e59
 80224c4:	08080408 	.word	0x08080408
 80224c8:	5408      	.short	0x5408
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 80224ca:	2101      	movs	r1, #1
 80224cc:	4620      	mov	r0, r4
 80224ce:	f7ef fac7 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 80224d2:	f242 0264 	movw	r2, #8292	@ 0x2064
 80224d6:	4611      	mov	r1, r2
 80224d8:	4620      	mov	r0, r4
 80224da:	f7f7 f833 	bl	8019544 <lv_obj_set_size>
    btnm = lv_btnmatrix_create(obj);
 80224de:	4620      	mov	r0, r4
 80224e0:	f7e0 fece 	bl	8003280 <lv_btnmatrix_create>
 80224e4:	4606      	mov	r6, r0
    cont = lv_obj_create(obj);
 80224e6:	4620      	mov	r0, r4
 80224e8:	f7f5 ff6e 	bl	80183c8 <lv_obj_create>
 80224ec:	4605      	mov	r5, r0
    lv_btnmatrix_set_one_checked(btnm, true);
 80224ee:	2101      	movs	r1, #1
 80224f0:	4630      	mov	r0, r6
 80224f2:	f7e1 fc33 	bl	8003d5c <lv_btnmatrix_set_one_checked>
    tabview->map = lv_mem_alloc(sizeof(const char *));
 80224f6:	2004      	movs	r0, #4
 80224f8:	f7f4 fa0e 	bl	8016918 <lv_mem_alloc>
 80224fc:	6260      	str	r0, [r4, #36]	@ 0x24
    tabview->map[0] = "";
 80224fe:	4b40      	ldr	r3, [pc, #256]	@ (8022600 <lv_tabview_constructor+0x154>)
 8022500:	6003      	str	r3, [r0, #0]
    lv_btnmatrix_set_map(btnm, (const char **)tabview->map);
 8022502:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8022504:	4630      	mov	r0, r6
 8022506:	f7e0 fec7 	bl	8003298 <lv_btnmatrix_set_map>
    lv_obj_add_event_cb(btnm, btns_value_changed_event_cb, LV_EVENT_VALUE_CHANGED, NULL);
 802250a:	2300      	movs	r3, #0
 802250c:	221c      	movs	r2, #28
 802250e:	493d      	ldr	r1, [pc, #244]	@ (8022604 <lv_tabview_constructor+0x158>)
 8022510:	4630      	mov	r0, r6
 8022512:	f7ee fc23 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_add_flag(btnm, LV_OBJ_FLAG_EVENT_BUBBLE);
 8022516:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 802251a:	4630      	mov	r0, r6
 802251c:	f7f6 f9f0 	bl	8018900 <lv_obj_add_flag>
    lv_obj_add_event_cb(cont, cont_scroll_end_event_cb, LV_EVENT_ALL, NULL);
 8022520:	2300      	movs	r3, #0
 8022522:	461a      	mov	r2, r3
 8022524:	4938      	ldr	r1, [pc, #224]	@ (8022608 <lv_tabview_constructor+0x15c>)
 8022526:	4628      	mov	r0, r5
 8022528:	f7ee fc18 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_set_scrollbar_mode(cont, LV_SCROLLBAR_MODE_OFF);
 802252c:	2100      	movs	r1, #0
 802252e:	4628      	mov	r0, r5
 8022530:	f7f8 fc01 	bl	801ad36 <lv_obj_set_scrollbar_mode>
    switch(tabview->tab_pos) {
 8022534:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8022538:	2b04      	cmp	r3, #4
 802253a:	d027      	beq.n	802258c <lv_tabview_constructor+0xe0>
 802253c:	d824      	bhi.n	8022588 <lv_tabview_constructor+0xdc>
 802253e:	3b01      	subs	r3, #1
 8022540:	b2db      	uxtb	r3, r3
 8022542:	2b01      	cmp	r3, #1
 8022544:	d833      	bhi.n	80225ae <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, tabsize_create, LV_PCT(100));
 8022546:	f242 0264 	movw	r2, #8292	@ 0x2064
 802254a:	4b30      	ldr	r3, [pc, #192]	@ (802260c <lv_tabview_constructor+0x160>)
 802254c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8022550:	4630      	mov	r0, r6
 8022552:	f7f6 fff7 	bl	8019544 <lv_obj_set_size>
            lv_obj_set_height(cont, LV_PCT(100));
 8022556:	f242 0164 	movw	r1, #8292	@ 0x2064
 802255a:	4628      	mov	r0, r5
 802255c:	f7f6 ffdb 	bl	8019516 <lv_obj_set_height>
            lv_obj_set_flex_grow(cont, 1);
 8022560:	2101      	movs	r1, #1
 8022562:	4628      	mov	r0, r5
 8022564:	f7ef facc 	bl	8011b00 <lv_obj_set_flex_grow>
            break;
 8022568:	e021      	b.n	80225ae <lv_tabview_constructor+0x102>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN_REVERSE);
 802256a:	2109      	movs	r1, #9
 802256c:	4620      	mov	r0, r4
 802256e:	f7ef fa77 	bl	8011a60 <lv_obj_set_flex_flow>
            break;
 8022572:	e7ae      	b.n	80224d2 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW);
 8022574:	2100      	movs	r1, #0
 8022576:	4620      	mov	r0, r4
 8022578:	f7ef fa72 	bl	8011a60 <lv_obj_set_flex_flow>
            break;
 802257c:	e7a9      	b.n	80224d2 <lv_tabview_constructor+0x26>
            lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_ROW_REVERSE);
 802257e:	2108      	movs	r1, #8
 8022580:	4620      	mov	r0, r4
 8022582:	f7ef fa6d 	bl	8011a60 <lv_obj_set_flex_flow>
            break;
 8022586:	e7a4      	b.n	80224d2 <lv_tabview_constructor+0x26>
    switch(tabview->tab_pos) {
 8022588:	2b08      	cmp	r3, #8
 802258a:	d110      	bne.n	80225ae <lv_tabview_constructor+0x102>
            lv_obj_set_size(btnm, LV_PCT(100), tabsize_create);
 802258c:	4b1f      	ldr	r3, [pc, #124]	@ (802260c <lv_tabview_constructor+0x160>)
 802258e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022592:	f242 0164 	movw	r1, #8292	@ 0x2064
 8022596:	4630      	mov	r0, r6
 8022598:	f7f6 ffd4 	bl	8019544 <lv_obj_set_size>
            lv_obj_set_width(cont, LV_PCT(100));
 802259c:	f242 0164 	movw	r1, #8292	@ 0x2064
 80225a0:	4628      	mov	r0, r5
 80225a2:	f7f6 ffa1 	bl	80194e8 <lv_obj_set_width>
            lv_obj_set_flex_grow(cont, 1);
 80225a6:	2101      	movs	r1, #1
 80225a8:	4628      	mov	r0, r5
 80225aa:	f7ef faa9 	bl	8011b00 <lv_obj_set_flex_grow>
    lv_group_t * g = lv_group_get_default();
 80225ae:	f7f0 fc8d 	bl	8012ecc <lv_group_get_default>
    if(g) lv_group_add_obj(g, btnm);
 80225b2:	b110      	cbz	r0, 80225ba <lv_tabview_constructor+0x10e>
 80225b4:	4631      	mov	r1, r6
 80225b6:	f7f0 fd1a 	bl	8012fee <lv_group_add_obj>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 80225ba:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80225be:	f013 0f0c 	tst.w	r3, #12
 80225c2:	d011      	beq.n	80225e8 <lv_tabview_constructor+0x13c>
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_ROW);
 80225c4:	2100      	movs	r1, #0
 80225c6:	4628      	mov	r0, r5
 80225c8:	f7ef fa4a 	bl	8011a60 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_x(cont, LV_SCROLL_SNAP_CENTER);
 80225cc:	2103      	movs	r1, #3
 80225ce:	4628      	mov	r0, r5
 80225d0:	f7f8 fbd4 	bl	801ad7c <lv_obj_set_scroll_snap_x>
    lv_obj_add_flag(cont, LV_OBJ_FLAG_SCROLL_ONE);
 80225d4:	2180      	movs	r1, #128	@ 0x80
 80225d6:	4628      	mov	r0, r5
 80225d8:	f7f6 f992 	bl	8018900 <lv_obj_add_flag>
    lv_obj_clear_flag(cont, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80225dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80225e0:	4628      	mov	r0, r5
 80225e2:	f7f5 fefd 	bl	80183e0 <lv_obj_clear_flag>
}
 80225e6:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_set_flex_flow(cont, LV_FLEX_FLOW_COLUMN);
 80225e8:	2101      	movs	r1, #1
 80225ea:	4628      	mov	r0, r5
 80225ec:	f7ef fa38 	bl	8011a60 <lv_obj_set_flex_flow>
        lv_obj_set_scroll_snap_y(cont, LV_SCROLL_SNAP_CENTER);
 80225f0:	2103      	movs	r1, #3
 80225f2:	4628      	mov	r0, r5
 80225f4:	f7f8 fbcd 	bl	801ad92 <lv_obj_set_scroll_snap_y>
 80225f8:	e7ec      	b.n	80225d4 <lv_tabview_constructor+0x128>
 80225fa:	bf00      	nop
 80225fc:	200088f6 	.word	0x200088f6
 8022600:	08029930 	.word	0x08029930
 8022604:	0802280b 	.word	0x0802280b
 8022608:	08022725 	.word	0x08022725
 802260c:	200088f4 	.word	0x200088f4

08022610 <lv_tabview_get_tab_act>:
}
 8022610:	8d40      	ldrh	r0, [r0, #42]	@ 0x2a
 8022612:	4770      	bx	lr

08022614 <lv_tabview_get_content>:
{
 8022614:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 1);
 8022616:	2101      	movs	r1, #1
 8022618:	f7fa fdd6 	bl	801d1c8 <lv_obj_get_child>
}
 802261c:	bd08      	pop	{r3, pc}

0802261e <lv_tabview_get_tab_btns>:
{
 802261e:	b508      	push	{r3, lr}
    return lv_obj_get_child(tv, 0);
 8022620:	2100      	movs	r1, #0
 8022622:	f7fa fdd1 	bl	801d1c8 <lv_obj_get_child>
}
 8022626:	bd08      	pop	{r3, pc}

08022628 <lv_tabview_set_act>:
{
 8022628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(obj->being_deleted) return;
 802262c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8022630:	f013 0f10 	tst.w	r3, #16
 8022634:	d157      	bne.n	80226e6 <lv_tabview_set_act+0xbe>
 8022636:	4604      	mov	r4, r0
 8022638:	460d      	mov	r5, r1
 802263a:	4616      	mov	r6, r2
    if(id >= tabview->tab_cnt) {
 802263c:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 802263e:	428b      	cmp	r3, r1
 8022640:	d800      	bhi.n	8022644 <lv_tabview_set_act+0x1c>
        id = tabview->tab_cnt - 1;
 8022642:	1e5d      	subs	r5, r3, #1
    lv_obj_update_layout(obj);
 8022644:	4620      	mov	r0, r4
 8022646:	f7f8 f929 	bl	801a89c <lv_obj_update_layout>
    lv_obj_t * cont = lv_tabview_get_content(obj);
 802264a:	4620      	mov	r0, r4
 802264c:	f7ff ffe2 	bl	8022614 <lv_tabview_get_content>
    if(cont == NULL) return;
 8022650:	4607      	mov	r7, r0
 8022652:	2800      	cmp	r0, #0
 8022654:	d047      	beq.n	80226e6 <lv_tabview_set_act+0xbe>
    if((tabview->tab_pos & LV_DIR_VER) != 0) {
 8022656:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 802265a:	f013 0f0c 	tst.w	r3, #12
 802265e:	d026      	beq.n	80226ae <lv_tabview_set_act+0x86>
    return (lv_coord_t)v.num;
}

static inline lv_coord_t lv_obj_get_style_pad_column(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_COLUMN);
 8022660:	2215      	movs	r2, #21
 8022662:	2100      	movs	r1, #0
 8022664:	f7fa f846 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 8022668:	fa0f f880 	sxth.w	r8, r0
        lv_coord_t w = lv_obj_get_content_width(cont);
 802266c:	4638      	mov	r0, r7
 802266e:	f7f7 f849 	bl	8019704 <lv_obj_get_content_width>
 8022672:	4681      	mov	r9, r0
    return (uint16_t)v.num;
}

static inline lv_base_dir_t lv_obj_get_style_base_dir(const struct _lv_obj_t * obj, uint32_t part)
{
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8022674:	2216      	movs	r2, #22
 8022676:	2100      	movs	r1, #0
 8022678:	4620      	mov	r0, r4
 802267a:	f7fa f83b 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802267e:	b2c3      	uxtb	r3, r0
        if(lv_obj_get_style_base_dir(obj, LV_PART_MAIN) != LV_BASE_DIR_RTL) {
 8022680:	2b01      	cmp	r3, #1
 8022682:	d009      	beq.n	8022698 <lv_tabview_set_act+0x70>
            lv_obj_scroll_to_x(cont, id * (gap + w), anim_en);
 8022684:	eb08 0109 	add.w	r1, r8, r9
 8022688:	fb11 f105 	smulbb	r1, r1, r5
 802268c:	4632      	mov	r2, r6
 802268e:	b209      	sxth	r1, r1
 8022690:	4638      	mov	r0, r7
 8022692:	f7f8 fe65 	bl	801b360 <lv_obj_scroll_to_x>
 8022696:	e01c      	b.n	80226d2 <lv_tabview_set_act+0xaa>
            int32_t id_rtl = -(int32_t)id;
 8022698:	426b      	negs	r3, r5
            lv_obj_scroll_to_x(cont, (gap + w) * id_rtl, anim_en);
 802269a:	eb08 0009 	add.w	r0, r8, r9
 802269e:	fb10 f103 	smulbb	r1, r0, r3
 80226a2:	4632      	mov	r2, r6
 80226a4:	b209      	sxth	r1, r1
 80226a6:	4638      	mov	r0, r7
 80226a8:	f7f8 fe5a 	bl	801b360 <lv_obj_scroll_to_x>
 80226ac:	e011      	b.n	80226d2 <lv_tabview_set_act+0xaa>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_ROW);
 80226ae:	2214      	movs	r2, #20
 80226b0:	2100      	movs	r1, #0
 80226b2:	f7fa f81f 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_coord_t)v.num;
 80226b6:	fa0f f880 	sxth.w	r8, r0
        lv_coord_t h = lv_obj_get_content_height(cont);
 80226ba:	4638      	mov	r0, r7
 80226bc:	f7f7 f842 	bl	8019744 <lv_obj_get_content_height>
        lv_obj_scroll_to_y(cont, id * (gap + h), anim_en);
 80226c0:	eb08 0100 	add.w	r1, r8, r0
 80226c4:	fb11 f105 	smulbb	r1, r1, r5
 80226c8:	4632      	mov	r2, r6
 80226ca:	b209      	sxth	r1, r1
 80226cc:	4638      	mov	r0, r7
 80226ce:	f7f8 fe5b 	bl	801b388 <lv_obj_scroll_to_y>
    lv_obj_t * btns = lv_tabview_get_tab_btns(obj);
 80226d2:	4620      	mov	r0, r4
 80226d4:	f7ff ffa3 	bl	802261e <lv_tabview_get_tab_btns>
    lv_btnmatrix_set_btn_ctrl(btns, id, LV_BTNMATRIX_CTRL_CHECKED);
 80226d8:	b2ad      	uxth	r5, r5
 80226da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80226de:	4629      	mov	r1, r5
 80226e0:	f7e0 ff41 	bl	8003566 <lv_btnmatrix_set_btn_ctrl>
    tabview->tab_cur = id;
 80226e4:	8565      	strh	r5, [r4, #42]	@ 0x2a
}
 80226e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080226ec <lv_tabview_event>:

static void lv_tabview_event(const lv_obj_class_t * class_p, lv_event_t * e)
{
 80226ec:	b538      	push	{r3, r4, r5, lr}
 80226ee:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_res_t res = lv_obj_event_base(&lv_tabview_class, e);
 80226f0:	480b      	ldr	r0, [pc, #44]	@ (8022720 <lv_tabview_event+0x34>)
 80226f2:	f7ee fa3f 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 80226f6:	2801      	cmp	r0, #1
 80226f8:	d000      	beq.n	80226fc <lv_tabview_event+0x10>
    lv_obj_t * target = lv_event_get_target(e);

    if(code == LV_EVENT_SIZE_CHANGED) {
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
    }
}
 80226fa:	bd38      	pop	{r3, r4, r5, pc}
    lv_event_code_t code = lv_event_get_code(e);
 80226fc:	4620      	mov	r0, r4
 80226fe:	f7ee fb11 	bl	8010d24 <lv_event_get_code>
 8022702:	4605      	mov	r5, r0
    lv_obj_t * target = lv_event_get_target(e);
 8022704:	4620      	mov	r0, r4
 8022706:	f7ee fb09 	bl	8010d1c <lv_event_get_target>
 802270a:	4604      	mov	r4, r0
    if(code == LV_EVENT_SIZE_CHANGED) {
 802270c:	2d29      	cmp	r5, #41	@ 0x29
 802270e:	d1f4      	bne.n	80226fa <lv_tabview_event+0xe>
        lv_tabview_set_act(target, lv_tabview_get_tab_act(target), LV_ANIM_OFF);
 8022710:	f7ff ff7e 	bl	8022610 <lv_tabview_get_tab_act>
 8022714:	4601      	mov	r1, r0
 8022716:	2200      	movs	r2, #0
 8022718:	4620      	mov	r0, r4
 802271a:	f7ff ff85 	bl	8022628 <lv_tabview_set_act>
 802271e:	e7ec      	b.n	80226fa <lv_tabview_event+0xe>
 8022720:	0802dfb4 	.word	0x0802dfb4

08022724 <cont_scroll_end_event_cb>:
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
    lv_tabview_set_act(tv, id, LV_ANIM_OFF);
}

static void cont_scroll_end_event_cb(lv_event_t * e)
{
 8022724:	b570      	push	{r4, r5, r6, lr}
 8022726:	b082      	sub	sp, #8
 8022728:	4604      	mov	r4, r0
    lv_obj_t * cont = lv_event_get_target(e);
 802272a:	f7ee faf7 	bl	8010d1c <lv_event_get_target>
 802272e:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8022730:	4620      	mov	r0, r4
 8022732:	f7ee faf7 	bl	8010d24 <lv_event_get_code>
 8022736:	4604      	mov	r4, r0

    lv_obj_t * tv = lv_obj_get_parent(cont);
 8022738:	4628      	mov	r0, r5
 802273a:	f7fa fd1b 	bl	801d174 <lv_obj_get_parent>
 802273e:	4606      	mov	r6, r0
    lv_tabview_t * tv_obj = (lv_tabview_t *)tv;
    if(code == LV_EVENT_LAYOUT_CHANGED) {
 8022740:	2c2b      	cmp	r4, #43	@ 0x2b
 8022742:	d003      	beq.n	802274c <cont_scroll_end_event_cb+0x28>
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
    }
    else if(code == LV_EVENT_SCROLL_END) {
 8022744:	2c0a      	cmp	r4, #10
 8022746:	d009      	beq.n	802275c <cont_scroll_end_event_cb+0x38>
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
        lv_tabview_set_act(tv, t, LV_ANIM_ON);

        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
    }
}
 8022748:	b002      	add	sp, #8
 802274a:	bd70      	pop	{r4, r5, r6, pc}
        lv_tabview_set_act(tv, lv_tabview_get_tab_act(tv), LV_ANIM_OFF);
 802274c:	f7ff ff60 	bl	8022610 <lv_tabview_get_tab_act>
 8022750:	4601      	mov	r1, r0
 8022752:	2200      	movs	r2, #0
 8022754:	4630      	mov	r0, r6
 8022756:	f7ff ff67 	bl	8022628 <lv_tabview_set_act>
 802275a:	e7f5      	b.n	8022748 <cont_scroll_end_event_cb+0x24>
        lv_indev_t * indev = lv_indev_get_act();
 802275c:	f7f2 f808 	bl	8014770 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 8022760:	b110      	cbz	r0, 8022768 <cont_scroll_end_event_cb+0x44>
 8022762:	7903      	ldrb	r3, [r0, #4]
 8022764:	2b01      	cmp	r3, #1
 8022766:	d0ef      	beq.n	8022748 <cont_scroll_end_event_cb+0x24>
        lv_obj_get_scroll_end(cont, &p);
 8022768:	a901      	add	r1, sp, #4
 802276a:	4628      	mov	r0, r5
 802276c:	f7f8 fc86 	bl	801b07c <lv_obj_get_scroll_end>
        if((tv_obj->tab_pos & LV_DIR_VER) != 0) {
 8022770:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 8022774:	f013 0f0c 	tst.w	r3, #12
 8022778:	d021      	beq.n	80227be <cont_scroll_end_event_cb+0x9a>
            lv_coord_t w = lv_obj_get_content_width(cont);
 802277a:	4628      	mov	r0, r5
 802277c:	f7f6 ffc2 	bl	8019704 <lv_obj_get_content_width>
 8022780:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BASE_DIR);
 8022782:	2216      	movs	r2, #22
 8022784:	2100      	movs	r1, #0
 8022786:	4630      	mov	r0, r6
 8022788:	f7f9 ffb4 	bl	801c6f4 <lv_obj_get_style_prop>
    return (lv_base_dir_t)v.num;
 802278c:	b2c0      	uxtb	r0, r0
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 802278e:	2801      	cmp	r0, #1
 8022790:	d00a      	beq.n	80227a8 <cont_scroll_end_event_cb+0x84>
            else t = (p.x + w / 2) / w;
 8022792:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8022796:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 802279a:	f343 034f 	sbfx	r3, r3, #1, #16
 802279e:	441c      	add	r4, r3
 80227a0:	fb94 f4f5 	sdiv	r4, r4, r5
 80227a4:	b224      	sxth	r4, r4
 80227a6:	e017      	b.n	80227d8 <cont_scroll_end_event_cb+0xb4>
            if(lv_obj_get_style_base_dir(tv, LV_PART_MAIN) == LV_BASE_DIR_RTL)  t = -(p.x - w / 2) / w;
 80227a8:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 80227ac:	f344 044f 	sbfx	r4, r4, #1, #16
 80227b0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80227b4:	1ae4      	subs	r4, r4, r3
 80227b6:	fb94 f0f5 	sdiv	r0, r4, r5
 80227ba:	b204      	sxth	r4, r0
 80227bc:	e00c      	b.n	80227d8 <cont_scroll_end_event_cb+0xb4>
            lv_coord_t h = lv_obj_get_content_height(cont);
 80227be:	4628      	mov	r0, r5
 80227c0:	f7f6 ffc0 	bl	8019744 <lv_obj_get_content_height>
            t = (p.y + h / 2) / h;
 80227c4:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 80227c8:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 80227cc:	f343 034f 	sbfx	r3, r3, #1, #16
 80227d0:	441c      	add	r4, r3
 80227d2:	fb94 f4f0 	sdiv	r4, r4, r0
 80227d6:	b224      	sxth	r4, r4
        if(t < 0) t = 0;
 80227d8:	2c00      	cmp	r4, #0
 80227da:	db12      	blt.n	8022802 <cont_scroll_end_event_cb+0xde>
        if(t != lv_tabview_get_tab_act(tv)) new_tab = true;
 80227dc:	4630      	mov	r0, r6
 80227de:	f7ff ff17 	bl	8022610 <lv_tabview_get_tab_act>
 80227e2:	4284      	cmp	r4, r0
 80227e4:	d00f      	beq.n	8022806 <cont_scroll_end_event_cb+0xe2>
 80227e6:	2501      	movs	r5, #1
        lv_tabview_set_act(tv, t, LV_ANIM_ON);
 80227e8:	2201      	movs	r2, #1
 80227ea:	4621      	mov	r1, r4
 80227ec:	4630      	mov	r0, r6
 80227ee:	f7ff ff1b 	bl	8022628 <lv_tabview_set_act>
        if(new_tab) lv_event_send(tv, LV_EVENT_VALUE_CHANGED, NULL);
 80227f2:	2d00      	cmp	r5, #0
 80227f4:	d0a8      	beq.n	8022748 <cont_scroll_end_event_cb+0x24>
 80227f6:	2200      	movs	r2, #0
 80227f8:	211c      	movs	r1, #28
 80227fa:	4630      	mov	r0, r6
 80227fc:	f7ee fa64 	bl	8010cc8 <lv_event_send>
 8022800:	e7a2      	b.n	8022748 <cont_scroll_end_event_cb+0x24>
        if(t < 0) t = 0;
 8022802:	2400      	movs	r4, #0
 8022804:	e7ea      	b.n	80227dc <cont_scroll_end_event_cb+0xb8>
        bool new_tab = false;
 8022806:	2500      	movs	r5, #0
 8022808:	e7ee      	b.n	80227e8 <cont_scroll_end_event_cb+0xc4>

0802280a <btns_value_changed_event_cb>:
{
 802280a:	b538      	push	{r3, r4, r5, lr}
    lv_obj_t * btns = lv_event_get_target(e);
 802280c:	f7ee fa86 	bl	8010d1c <lv_event_get_target>
 8022810:	4605      	mov	r5, r0
    lv_obj_t * tv = lv_obj_get_parent(btns);
 8022812:	f7fa fcaf 	bl	801d174 <lv_obj_get_parent>
 8022816:	4604      	mov	r4, r0
    uint32_t id = lv_btnmatrix_get_selected_btn(btns);
 8022818:	4628      	mov	r0, r5
 802281a:	f7e0 fef7 	bl	800360c <lv_btnmatrix_get_selected_btn>
 802281e:	4601      	mov	r1, r0
    lv_tabview_set_act(tv, id, LV_ANIM_OFF);
 8022820:	2200      	movs	r2, #0
 8022822:	4620      	mov	r0, r4
 8022824:	f7ff ff00 	bl	8022628 <lv_tabview_set_act>
}
 8022828:	bd38      	pop	{r3, r4, r5, pc}

0802282a <pwd_char_hider_anim>:
 */
static void pwd_char_hider_anim(void * obj, int32_t x)
{
    LV_UNUSED(obj);
    LV_UNUSED(x);
}
 802282a:	4770      	bx	lr

0802282c <cursor_blink_anim_cb>:
    if(show != ta->cursor.show) {
 802282c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8022830:	f003 0301 	and.w	r3, r3, #1
 8022834:	428b      	cmp	r3, r1
 8022836:	d035      	beq.n	80228a4 <cursor_blink_anim_cb+0x78>
{
 8022838:	b510      	push	{r4, lr}
 802283a:	b082      	sub	sp, #8
        ta->cursor.show = show ? 1U : 0U;
 802283c:	b381      	cbz	r1, 80228a0 <cursor_blink_anim_cb+0x74>
 802283e:	2201      	movs	r2, #1
 8022840:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8022844:	f362 0300 	bfi	r3, r2, #0, #1
 8022848:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    dest->x1 = src->x1;
 802284c:	f9b0 c048 	ldrsh.w	ip, [r0, #72]	@ 0x48
 8022850:	f8ad c000 	strh.w	ip, [sp]
    dest->y1 = src->y1;
 8022854:	f9b0 104a 	ldrsh.w	r1, [r0, #74]	@ 0x4a
 8022858:	f8ad 1002 	strh.w	r1, [sp, #2]
    dest->x2 = src->x2;
 802285c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	@ 0x4c
 8022860:	f8ad 2004 	strh.w	r2, [sp, #4]
    dest->y2 = src->y2;
 8022864:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	@ 0x4e
 8022868:	f8ad 3006 	strh.w	r3, [sp, #6]
        area_tmp.x1 += ta->label->coords.x1;
 802286c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 802286e:	f8b4 e014 	ldrh.w	lr, [r4, #20]
 8022872:	fa1e fc8c 	uxtah	ip, lr, ip
 8022876:	f8ad c000 	strh.w	ip, [sp]
        area_tmp.y1 += ta->label->coords.y1;
 802287a:	f8b4 c016 	ldrh.w	ip, [r4, #22]
 802287e:	fa1c f181 	uxtah	r1, ip, r1
 8022882:	f8ad 1002 	strh.w	r1, [sp, #2]
        area_tmp.x2 += ta->label->coords.x1;
 8022886:	fa1e f282 	uxtah	r2, lr, r2
 802288a:	f8ad 2004 	strh.w	r2, [sp, #4]
        area_tmp.y2 += ta->label->coords.y1;
 802288e:	fa1c f383 	uxtah	r3, ip, r3
 8022892:	f8ad 3006 	strh.w	r3, [sp, #6]
        lv_obj_invalidate_area(obj, &area_tmp);
 8022896:	4669      	mov	r1, sp
 8022898:	f7f7 fadd 	bl	8019e56 <lv_obj_invalidate_area>
}
 802289c:	b002      	add	sp, #8
 802289e:	bd10      	pop	{r4, pc}
        ta->cursor.show = show ? 1U : 0U;
 80228a0:	2200      	movs	r2, #0
 80228a2:	e7cd      	b.n	8022840 <cursor_blink_anim_cb+0x14>
 80228a4:	4770      	bx	lr
	...

080228a8 <start_cursor_blink>:

    return false; /*The character wasn't in the list*/
}

static void start_cursor_blink(lv_obj_t * obj)
{
 80228a8:	b530      	push	{r4, r5, lr}
 80228aa:	b093      	sub	sp, #76	@ 0x4c
 80228ac:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_ANIM_TIME);
 80228ae:	2265      	movs	r2, #101	@ 0x65
 80228b0:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 80228b4:	f7f9 ff1e 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    uint32_t blink_time = lv_obj_get_style_anim_time(obj, LV_PART_CURSOR);
    if(blink_time == 0) {
 80228b8:	b958      	cbnz	r0, 80228d2 <start_cursor_blink+0x2a>
        lv_anim_del(obj, cursor_blink_anim_cb);
 80228ba:	4912      	ldr	r1, [pc, #72]	@ (8022904 <start_cursor_blink+0x5c>)
 80228bc:	4620      	mov	r0, r4
 80228be:	f7dd ff63 	bl	8000788 <lv_anim_del>
        ta->cursor.show = 1;
 80228c2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80228c6:	f043 0301 	orr.w	r3, r3, #1
 80228ca:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        lv_anim_set_values(&a, 1, 0);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_repeat_count(&a, LV_ANIM_REPEAT_INFINITE);
        lv_anim_start(&a);
    }
}
 80228ce:	b013      	add	sp, #76	@ 0x4c
 80228d0:	bd30      	pop	{r4, r5, pc}
 80228d2:	4605      	mov	r5, r0
        lv_anim_init(&a);
 80228d4:	a801      	add	r0, sp, #4
 80228d6:	f7dd ff3d 	bl	8000754 <lv_anim_init>
    a->var = var;
 80228da:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 80228dc:	4b09      	ldr	r3, [pc, #36]	@ (8022904 <start_cursor_blink+0x5c>)
 80228de:	9302      	str	r3, [sp, #8]
    a->time = duration;
 80228e0:	950c      	str	r5, [sp, #48]	@ 0x30
    a->playback_time = time;
 80228e2:	950f      	str	r5, [sp, #60]	@ 0x3c
    a->start_value = start;
 80228e4:	2301      	movs	r3, #1
 80228e6:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 80228e8:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 80228ea:	2300      	movs	r3, #0
 80228ec:	930b      	str	r3, [sp, #44]	@ 0x2c
    a->path_cb = path_cb;
 80228ee:	4b06      	ldr	r3, [pc, #24]	@ (8022908 <start_cursor_blink+0x60>)
 80228f0:	9308      	str	r3, [sp, #32]
    a->repeat_cnt = cnt;
 80228f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80228f6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
        lv_anim_start(&a);
 80228fa:	a801      	add	r0, sp, #4
 80228fc:	f7dd ff76 	bl	80007ec <lv_anim_start>
}
 8022900:	e7e5      	b.n	80228ce <start_cursor_blink+0x26>
 8022902:	bf00      	nop
 8022904:	0802282d 	.word	0x0802282d
 8022908:	0800093d 	.word	0x0800093d

0802290c <draw_placeholder>:

    return LV_RES_OK;
}

static void draw_placeholder(lv_event_t * e)
{
 802290c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802290e:	b08d      	sub	sp, #52	@ 0x34
 8022910:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8022912:	f7ee fa03 	bl	8010d1c <lv_event_get_target>
 8022916:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 8022918:	4628      	mov	r0, r5
 802291a:	f7ee fa77 	bl	8010e0c <lv_event_get_draw_ctx>
 802291e:	4605      	mov	r5, r0
    const char * txt = lv_label_get_text(ta->label);
 8022920:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022922:	f7f2 fa41 	bl	8014da8 <lv_label_get_text>

    /*Draw the place holder*/
    if(txt[0] == '\0' && ta->placeholder_txt && ta->placeholder_txt[0] != 0) {
 8022926:	7803      	ldrb	r3, [r0, #0]
 8022928:	b91b      	cbnz	r3, 8022932 <draw_placeholder+0x26>
 802292a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802292c:	b10b      	cbz	r3, 8022932 <draw_placeholder+0x26>
 802292e:	781b      	ldrb	r3, [r3, #0]
 8022930:	b90b      	cbnz	r3, 8022936 <draw_placeholder+0x2a>
        lv_area_t ph_coords;
        lv_area_copy(&ph_coords, &obj->coords);
        lv_area_move(&ph_coords, left + border_width, top + border_width);
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
    }
}
 8022932:	b00d      	add	sp, #52	@ 0x34
 8022934:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_draw_label_dsc_init(&ph_dsc);
 8022936:	a804      	add	r0, sp, #16
 8022938:	f7e5 fb36 	bl	8007fa8 <lv_draw_label_dsc_init>
        lv_obj_init_draw_label_dsc(obj, LV_PART_TEXTAREA_PLACEHOLDER, &ph_dsc);
 802293c:	aa04      	add	r2, sp, #16
 802293e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8022942:	4620      	mov	r0, r4
 8022944:	f7f6 fb10 	bl	8018f68 <lv_obj_init_draw_label_dsc>
        if(ta->one_line) ph_dsc.flag |= LV_TEXT_FLAG_EXPAND;
 8022948:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 802294c:	f013 0f08 	tst.w	r3, #8
 8022950:	d005      	beq.n	802295e <draw_placeholder+0x52>
 8022952:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8022956:	f043 0302 	orr.w	r3, r3, #2
 802295a:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 802295e:	2212      	movs	r2, #18
 8022960:	2100      	movs	r1, #0
 8022962:	4620      	mov	r0, r4
 8022964:	f7f9 fec6 	bl	801c6f4 <lv_obj_get_style_prop>
 8022968:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 802296a:	2210      	movs	r2, #16
 802296c:	2100      	movs	r1, #0
 802296e:	4620      	mov	r0, r4
 8022970:	f7f9 fec0 	bl	801c6f4 <lv_obj_get_style_prop>
 8022974:	4607      	mov	r7, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8022976:	2232      	movs	r2, #50	@ 0x32
 8022978:	2100      	movs	r1, #0
 802297a:	4620      	mov	r0, r4
 802297c:	f7f9 feba 	bl	801c6f4 <lv_obj_get_style_prop>
    dest->x1 = src->x1;
 8022980:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8022984:	f8ad 3008 	strh.w	r3, [sp, #8]
    dest->y1 = src->y1;
 8022988:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802298c:	f8ad 300a 	strh.w	r3, [sp, #10]
    dest->x2 = src->x2;
 8022990:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8022994:	f8ad 300c 	strh.w	r3, [sp, #12]
    dest->y2 = src->y2;
 8022998:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802299c:	f8ad 300e 	strh.w	r3, [sp, #14]
        lv_area_move(&ph_coords, left + border_width, top + border_width);
 80229a0:	b282      	uxth	r2, r0
 80229a2:	1991      	adds	r1, r2, r6
 80229a4:	443a      	add	r2, r7
 80229a6:	b212      	sxth	r2, r2
 80229a8:	b209      	sxth	r1, r1
 80229aa:	a802      	add	r0, sp, #8
 80229ac:	f7df f813 	bl	80019d6 <lv_area_move>
        lv_draw_label(draw_ctx, &ph_dsc, &ph_coords, ta->placeholder_txt, NULL);
 80229b0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80229b2:	2200      	movs	r2, #0
 80229b4:	9200      	str	r2, [sp, #0]
 80229b6:	aa02      	add	r2, sp, #8
 80229b8:	a904      	add	r1, sp, #16
 80229ba:	4628      	mov	r0, r5
 80229bc:	f7e5 fb24 	bl	8008008 <lv_draw_label>
}
 80229c0:	e7b7      	b.n	8022932 <draw_placeholder+0x26>
	...

080229c4 <draw_cursor>:

static void draw_cursor(lv_event_t * e)
{
 80229c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80229c8:	b09d      	sub	sp, #116	@ 0x74
 80229ca:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80229cc:	f7ee f9a6 	bl	8010d1c <lv_event_get_target>
 80229d0:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *)obj;
    lv_draw_ctx_t * draw_ctx = lv_event_get_draw_ctx(e);
 80229d2:	4628      	mov	r0, r5
 80229d4:	f7ee fa1a 	bl	8010e0c <lv_event_get_draw_ctx>
 80229d8:	4606      	mov	r6, r0
    const char * txt = lv_label_get_text(ta->label);
 80229da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80229dc:	f7f2 f9e4 	bl	8014da8 <lv_label_get_text>

    if(ta->cursor.show == 0) return;
 80229e0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 80229e4:	f013 0f01 	tst.w	r3, #1
 80229e8:	d102      	bne.n	80229f0 <draw_cursor+0x2c>
    lv_draw_label_dsc_init(&cur_label_dsc);
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
    }
}
 80229ea:	b01d      	add	sp, #116	@ 0x74
 80229ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80229f0:	4607      	mov	r7, r0
    lv_draw_rect_dsc_init(&cur_dsc);
 80229f2:	a80e      	add	r0, sp, #56	@ 0x38
 80229f4:	f7e7 f92c 	bl	8009c50 <lv_draw_rect_dsc_init>
    lv_obj_init_draw_rect_dsc(obj, LV_PART_CURSOR, &cur_dsc);
 80229f8:	aa0e      	add	r2, sp, #56	@ 0x38
 80229fa:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 80229fe:	4620      	mov	r0, r4
 8022a00:	f7f6 f960 	bl	8018cc4 <lv_obj_init_draw_rect_dsc>
    dest->x1 = src->x1;
 8022a04:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	@ 0x48
 8022a08:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
    dest->y1 = src->y1;
 8022a0c:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	@ 0x4a
 8022a10:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
    dest->x2 = src->x2;
 8022a14:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	@ 0x4c
 8022a18:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
    dest->y2 = src->y2;
 8022a1c:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	@ 0x4e
 8022a20:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    cur_area.x1 += ta->label->coords.x1;
 8022a24:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 8022a28:	f8bc 5014 	ldrh.w	r5, [ip, #20]
 8022a2c:	fa15 f080 	uxtah	r0, r5, r0
 8022a30:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
    cur_area.y1 += ta->label->coords.y1;
 8022a34:	f8bc 0016 	ldrh.w	r0, [ip, #22]
 8022a38:	fa10 f181 	uxtah	r1, r0, r1
 8022a3c:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
    cur_area.x2 += ta->label->coords.x1;
 8022a40:	fa15 f282 	uxtah	r2, r5, r2
 8022a44:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
    cur_area.y2 += ta->label->coords.y1;
 8022a48:	fa10 f383 	uxtah	r3, r0, r3
 8022a4c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
    lv_draw_rect(draw_ctx, &cur_dsc, &cur_area);
 8022a50:	aa0c      	add	r2, sp, #48	@ 0x30
 8022a52:	a90e      	add	r1, sp, #56	@ 0x38
 8022a54:	4630      	mov	r0, r6
 8022a56:	f7e7 f93d 	bl	8009cd4 <lv_draw_rect>
 8022a5a:	2232      	movs	r2, #50	@ 0x32
 8022a5c:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022a60:	4620      	mov	r0, r4
 8022a62:	f7f9 fe47 	bl	801c6f4 <lv_obj_get_style_prop>
 8022a66:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8022a68:	2212      	movs	r2, #18
 8022a6a:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022a6e:	4620      	mov	r0, r4
 8022a70:	f7f9 fe40 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 8022a74:	fa1f f888 	uxth.w	r8, r8
 8022a78:	fa18 f980 	uxtah	r9, r8, r0
 8022a7c:	fa1f f989 	uxth.w	r9, r9
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8022a80:	2210      	movs	r2, #16
 8022a82:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022a86:	4620      	mov	r0, r4
 8022a88:	f7f9 fe34 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 8022a8c:	fa18 f580 	uxtah	r5, r8, r0
 8022a90:	b2ad      	uxth	r5, r5
    char letter_buf[8] = {0};
 8022a92:	f04f 0800 	mov.w	r8, #0
 8022a96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8022a9a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    lv_memcpy(letter_buf, &txt[ta->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ta->cursor.txt_byte_pos]));
 8022a9e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8022aa0:	441f      	add	r7, r3
 8022aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8022b0c <draw_cursor+0x148>)
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	4638      	mov	r0, r7
 8022aa8:	4798      	blx	r3
 8022aaa:	4602      	mov	r2, r0
 8022aac:	4639      	mov	r1, r7
 8022aae:	a80a      	add	r0, sp, #40	@ 0x28
 8022ab0:	f7f4 f81a 	bl	8016ae8 <lv_memcpy>
    cur_area.x1 += left;
 8022ab4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8022ab8:	4499      	add	r9, r3
 8022aba:	f8ad 9030 	strh.w	r9, [sp, #48]	@ 0x30
    cur_area.y1 += top;
 8022abe:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022ac2:	441d      	add	r5, r3
 8022ac4:	f8ad 5032 	strh.w	r5, [sp, #50]	@ 0x32
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_COLOR);
 8022ac8:	2255      	movs	r2, #85	@ 0x55
 8022aca:	4641      	mov	r1, r8
 8022acc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022ace:	f7f9 fe11 	bl	801c6f4 <lv_obj_get_style_prop>
 8022ad2:	4605      	mov	r5, r0
    lv_draw_label_dsc_init(&cur_label_dsc);
 8022ad4:	a802      	add	r0, sp, #8
 8022ad6:	f7e5 fa67 	bl	8007fa8 <lv_draw_label_dsc_init>
    lv_obj_init_draw_label_dsc(obj, LV_PART_CURSOR, &cur_label_dsc);
 8022ada:	aa02      	add	r2, sp, #8
 8022adc:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022ae0:	4620      	mov	r0, r4
 8022ae2:	f7f6 fa41 	bl	8018f68 <lv_obj_init_draw_label_dsc>
    if(cur_dsc.bg_opa > LV_OPA_MIN || cur_label_dsc.color.full != label_color.full) {
 8022ae6:	f89d 303b 	ldrb.w	r3, [sp, #59]	@ 0x3b
 8022aea:	2b02      	cmp	r3, #2
 8022aec:	d805      	bhi.n	8022afa <draw_cursor+0x136>
 8022aee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8022af2:	b2a8      	uxth	r0, r5
 8022af4:	4283      	cmp	r3, r0
 8022af6:	f43f af78 	beq.w	80229ea <draw_cursor+0x26>
        lv_draw_label(draw_ctx, &cur_label_dsc, &cur_area, letter_buf, NULL);
 8022afa:	2300      	movs	r3, #0
 8022afc:	9300      	str	r3, [sp, #0]
 8022afe:	ab0a      	add	r3, sp, #40	@ 0x28
 8022b00:	aa0c      	add	r2, sp, #48	@ 0x30
 8022b02:	a902      	add	r1, sp, #8
 8022b04:	4630      	mov	r0, r6
 8022b06:	f7e5 fa7f 	bl	8008008 <lv_draw_label>
 8022b0a:	e76e      	b.n	80229ea <draw_cursor+0x26>
 8022b0c:	2000008c 	.word	0x2000008c

08022b10 <lv_textarea_destructor>:
{
 8022b10:	b510      	push	{r4, lr}
 8022b12:	460c      	mov	r4, r1
    if(ta->pwd_tmp != NULL) {
 8022b14:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8022b16:	b118      	cbz	r0, 8022b20 <lv_textarea_destructor+0x10>
        lv_mem_free(ta->pwd_tmp);
 8022b18:	f7f3 ff1c 	bl	8016954 <lv_mem_free>
        ta->pwd_tmp = NULL;
 8022b1c:	2300      	movs	r3, #0
 8022b1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if(ta->pwd_bullet != NULL) {
 8022b20:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8022b22:	b118      	cbz	r0, 8022b2c <lv_textarea_destructor+0x1c>
        lv_mem_free(ta->pwd_bullet);
 8022b24:	f7f3 ff16 	bl	8016954 <lv_mem_free>
        ta->pwd_bullet = NULL;
 8022b28:	2300      	movs	r3, #0
 8022b2a:	6323      	str	r3, [r4, #48]	@ 0x30
    if(ta->placeholder_txt != NULL) {
 8022b2c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8022b2e:	b118      	cbz	r0, 8022b38 <lv_textarea_destructor+0x28>
        lv_mem_free(ta->placeholder_txt);
 8022b30:	f7f3 ff10 	bl	8016954 <lv_mem_free>
        ta->placeholder_txt = NULL;
 8022b34:	2300      	movs	r3, #0
 8022b36:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8022b38:	bd10      	pop	{r4, pc}

08022b3a <lv_textarea_set_cursor_click_pos>:
    ta->cursor.click_pos = en ? 1U : 0U;
 8022b3a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8022b3e:	f361 0341 	bfi	r3, r1, #1, #1
 8022b42:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
}
 8022b46:	4770      	bx	lr

08022b48 <lv_textarea_set_one_line>:
    if(ta->one_line == en) return;
 8022b48:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8022b4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8022b50:	428b      	cmp	r3, r1
 8022b52:	d02c      	beq.n	8022bae <lv_textarea_set_one_line+0x66>
{
 8022b54:	b570      	push	{r4, r5, r6, lr}
 8022b56:	4604      	mov	r4, r0
 8022b58:	460d      	mov	r5, r1
    ta->one_line = en ? 1U : 0U;
 8022b5a:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8022b5e:	f361 03c3 	bfi	r3, r1, #3, #1
 8022b62:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8022b66:	b1c1      	cbz	r1, 8022b9a <lv_textarea_set_one_line+0x52>
 8022b68:	f242 71d1 	movw	r1, #10193	@ 0x27d1
    lv_coord_t min_width_value = en ? lv_pct(100) : 0;
 8022b6c:	f242 0664 	movw	r6, #8292	@ 0x2064
    lv_obj_set_width(ta->label, width);
 8022b70:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022b72:	f7f6 fcb9 	bl	80194e8 <lv_obj_set_width>
    lv_obj_set_style_min_width(ta->label, min_width_value, 0);
 8022b76:	2200      	movs	r2, #0
 8022b78:	4631      	mov	r1, r6
 8022b7a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022b7c:	f7fa fa8a 	bl	801d094 <lv_obj_set_style_min_width>
    if(en) {
 8022b80:	b17d      	cbz	r5, 8022ba2 <lv_textarea_set_one_line+0x5a>
        lv_obj_set_height(obj, LV_SIZE_CONTENT);
 8022b82:	f242 71d1 	movw	r1, #10193	@ 0x27d1
 8022b86:	4620      	mov	r0, r4
 8022b88:	f7f6 fcc5 	bl	8019516 <lv_obj_set_height>
    lv_obj_scroll_to(obj, 0, 0, LV_ANIM_OFF);
 8022b8c:	2300      	movs	r3, #0
 8022b8e:	461a      	mov	r2, r3
 8022b90:	4619      	mov	r1, r3
 8022b92:	4620      	mov	r0, r4
 8022b94:	f7f8 fc0c 	bl	801b3b0 <lv_obj_scroll_to>
}
 8022b98:	bd70      	pop	{r4, r5, r6, pc}
    lv_coord_t width = en ? LV_SIZE_CONTENT : lv_pct(100);
 8022b9a:	f242 0164 	movw	r1, #8292	@ 0x2064
    lv_coord_t min_width_value = en ? lv_pct(100) : 0;
 8022b9e:	2600      	movs	r6, #0
 8022ba0:	e7e6      	b.n	8022b70 <lv_textarea_set_one_line+0x28>
        lv_obj_remove_local_style_prop(obj, LV_STYLE_HEIGHT, LV_PART_MAIN);
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	2104      	movs	r1, #4
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	f7fa f820 	bl	801cbec <lv_obj_remove_local_style_prop>
 8022bac:	e7ee      	b.n	8022b8c <lv_textarea_set_one_line+0x44>
 8022bae:	4770      	bx	lr

08022bb0 <lv_textarea_get_text>:
{
 8022bb0:	b508      	push	{r3, lr}
    if(ta->pwd_mode == 0) {
 8022bb2:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8022bb6:	f013 0f04 	tst.w	r3, #4
 8022bba:	d001      	beq.n	8022bc0 <lv_textarea_get_text+0x10>
        txt = ta->pwd_tmp;
 8022bbc:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
}
 8022bbe:	bd08      	pop	{r3, pc}
        txt = lv_label_get_text(ta->label);
 8022bc0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8022bc2:	f7f2 f8f1 	bl	8014da8 <lv_label_get_text>
 8022bc6:	e7fa      	b.n	8022bbe <lv_textarea_get_text+0xe>

08022bc8 <char_is_accepted>:
{
 8022bc8:	b570      	push	{r4, r5, r6, lr}
 8022bca:	b082      	sub	sp, #8
 8022bcc:	4604      	mov	r4, r0
 8022bce:	460d      	mov	r5, r1
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 8022bd0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8022bd2:	b98b      	cbnz	r3, 8022bf8 <char_is_accepted+0x30>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 8022bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022bd6:	b1db      	cbz	r3, 8022c10 <char_is_accepted+0x48>
 8022bd8:	781b      	ldrb	r3, [r3, #0]
 8022bda:	b1db      	cbz	r3, 8022c14 <char_is_accepted+0x4c>
    uint32_t i = 0;
 8022bdc:	2300      	movs	r3, #0
 8022bde:	9301      	str	r3, [sp, #4]
    while(ta->accepted_chars[i] != '\0') {
 8022be0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8022be2:	9b01      	ldr	r3, [sp, #4]
 8022be4:	5cc3      	ldrb	r3, [r0, r3]
 8022be6:	b18b      	cbz	r3, 8022c0c <char_is_accepted+0x44>
        uint32_t a = _lv_txt_encoded_next(ta->accepted_chars, &i);
 8022be8:	4b0c      	ldr	r3, [pc, #48]	@ (8022c1c <char_is_accepted+0x54>)
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	a901      	add	r1, sp, #4
 8022bee:	4798      	blx	r3
        if(a == c) return true; /*Accepted*/
 8022bf0:	42a8      	cmp	r0, r5
 8022bf2:	d1f5      	bne.n	8022be0 <char_is_accepted+0x18>
 8022bf4:	2001      	movs	r0, #1
 8022bf6:	e00e      	b.n	8022c16 <char_is_accepted+0x4e>
    if(ta->max_length > 0 && _lv_txt_get_encoded_length(lv_textarea_get_text(obj)) >= ta->max_length) {
 8022bf8:	4b09      	ldr	r3, [pc, #36]	@ (8022c20 <char_is_accepted+0x58>)
 8022bfa:	681e      	ldr	r6, [r3, #0]
 8022bfc:	f7ff ffd8 	bl	8022bb0 <lv_textarea_get_text>
 8022c00:	47b0      	blx	r6
 8022c02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8022c04:	4298      	cmp	r0, r3
 8022c06:	d3e5      	bcc.n	8022bd4 <char_is_accepted+0xc>
        return false;
 8022c08:	2000      	movs	r0, #0
 8022c0a:	e004      	b.n	8022c16 <char_is_accepted+0x4e>
    return false; /*The character wasn't in the list*/
 8022c0c:	2000      	movs	r0, #0
 8022c0e:	e002      	b.n	8022c16 <char_is_accepted+0x4e>
    if(ta->accepted_chars == NULL || ta->accepted_chars[0] == '\0') return true;
 8022c10:	2001      	movs	r0, #1
 8022c12:	e000      	b.n	8022c16 <char_is_accepted+0x4e>
 8022c14:	2001      	movs	r0, #1
}
 8022c16:	b002      	add	sp, #8
 8022c18:	bd70      	pop	{r4, r5, r6, pc}
 8022c1a:	bf00      	nop
 8022c1c:	20000084 	.word	0x20000084
 8022c20:	20000074 	.word	0x20000074

08022c24 <lv_textarea_get_cursor_pos>:
}
 8022c24:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8022c26:	4770      	bx	lr

08022c28 <refr_cursor_area>:
{
 8022c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c2c:	b089      	sub	sp, #36	@ 0x24
 8022c2e:	4604      	mov	r4, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8022c30:	2257      	movs	r2, #87	@ 0x57
 8022c32:	2100      	movs	r1, #0
 8022c34:	f7f9 fd5e 	bl	801c6f4 <lv_obj_get_style_prop>
 8022c38:	4680      	mov	r8, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8022c3a:	2259      	movs	r2, #89	@ 0x59
 8022c3c:	2100      	movs	r1, #0
 8022c3e:	4620      	mov	r0, r4
 8022c40:	f7f9 fd58 	bl	801c6f4 <lv_obj_get_style_prop>
 8022c44:	9000      	str	r0, [sp, #0]
    uint32_t cur_pos = lv_textarea_get_cursor_pos(obj);
 8022c46:	4620      	mov	r0, r4
 8022c48:	f7ff ffec 	bl	8022c24 <lv_textarea_get_cursor_pos>
 8022c4c:	4681      	mov	r9, r0
    const char * txt = lv_label_get_text(ta->label);
 8022c4e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022c50:	f7f2 f8aa 	bl	8014da8 <lv_label_get_text>
 8022c54:	4605      	mov	r5, r0
 8022c56:	9001      	str	r0, [sp, #4]
    uint32_t byte_pos = _lv_txt_encoded_get_byte_id(txt, cur_pos);
 8022c58:	4b88      	ldr	r3, [pc, #544]	@ (8022e7c <refr_cursor_area+0x254>)
 8022c5a:	681b      	ldr	r3, [r3, #0]
 8022c5c:	4649      	mov	r1, r9
 8022c5e:	4798      	blx	r3
 8022c60:	4607      	mov	r7, r0
    uint32_t letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8022c62:	eb05 0b00 	add.w	fp, r5, r0
 8022c66:	4b86      	ldr	r3, [pc, #536]	@ (8022e80 <refr_cursor_area+0x258>)
 8022c68:	681b      	ldr	r3, [r3, #0]
 8022c6a:	2100      	movs	r1, #0
 8022c6c:	4658      	mov	r0, fp
 8022c6e:	4798      	blx	r3
 8022c70:	4606      	mov	r6, r0
 8022c72:	f9b8 a008 	ldrsh.w	sl, [r8, #8]
    if(is_valid_but_non_printable_char(letter)) {
 8022c76:	280d      	cmp	r0, #13
 8022c78:	d84e      	bhi.n	8022d18 <refr_cursor_area+0xf0>
 8022c7a:	f242 4301 	movw	r3, #9217	@ 0x2401
 8022c7e:	40c3      	lsrs	r3, r0
 8022c80:	f013 0f01 	tst.w	r3, #1
 8022c84:	d04a      	beq.n	8022d1c <refr_cursor_area+0xf4>
        letter_space = ' ';
 8022c86:	2120      	movs	r1, #32
    lv_coord_t letter_w = lv_font_get_glyph_width(font, letter_space, IGNORE_KERNING);
 8022c88:	2200      	movs	r2, #0
 8022c8a:	4640      	mov	r0, r8
 8022c8c:	f7ee ffa6 	bl	8011bdc <lv_font_get_glyph_width>
 8022c90:	b205      	sxth	r5, r0
    lv_label_get_letter_pos(ta->label, cur_pos, &letter_pos);
 8022c92:	aa07      	add	r2, sp, #28
 8022c94:	4649      	mov	r1, r9
 8022c96:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022c98:	f7f2 f88e 	bl	8014db8 <lv_label_get_letter_pos>
    lv_text_align_t align = lv_obj_calculate_style_text_align(ta->label, LV_PART_MAIN, lv_label_get_text(ta->label));
 8022c9c:	f8d4 9024 	ldr.w	r9, [r4, #36]	@ 0x24
 8022ca0:	4648      	mov	r0, r9
 8022ca2:	f7f2 f881 	bl	8014da8 <lv_label_get_text>
 8022ca6:	4602      	mov	r2, r0
 8022ca8:	2100      	movs	r1, #0
 8022caa:	4648      	mov	r0, r9
 8022cac:	f7fa f9a2 	bl	801cff4 <lv_obj_calculate_style_text_align>
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8022cb0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8022cb4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8022cb6:	f9b2 1014 	ldrsh.w	r1, [r2, #20]
 8022cba:	440b      	add	r3, r1
 8022cbc:	442b      	add	r3, r5
 8022cbe:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8022cc2:	4293      	cmp	r3, r2
 8022cc4:	dd32      	ble.n	8022d2c <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 8022cc6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
    if(((letter_pos.x + ta->label->coords.x1) + letter_w > ta->label->coords.x2) &&
 8022cca:	f013 0f08 	tst.w	r3, #8
 8022cce:	d12d      	bne.n	8022d2c <refr_cursor_area+0x104>
       (ta->one_line == 0 && align != LV_TEXT_ALIGN_RIGHT)) {
 8022cd0:	2803      	cmp	r0, #3
 8022cd2:	d02b      	beq.n	8022d2c <refr_cursor_area+0x104>
        letter_pos.x = 0;
 8022cd4:	2300      	movs	r3, #0
 8022cd6:	f8ad 301c 	strh.w	r3, [sp, #28]
        letter_pos.y += letter_h + line_space;
 8022cda:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8022cde:	9b00      	ldr	r3, [sp, #0]
 8022ce0:	4453      	add	r3, sl
 8022ce2:	fa12 f383 	uxtah	r3, r2, r3
 8022ce6:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(letter != '\0') {
 8022cea:	b1ce      	cbz	r6, 8022d20 <refr_cursor_area+0xf8>
            byte_pos += _lv_txt_encoded_size(&txt[byte_pos]);
 8022cec:	4b65      	ldr	r3, [pc, #404]	@ (8022e84 <refr_cursor_area+0x25c>)
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	4658      	mov	r0, fp
 8022cf2:	4798      	blx	r3
 8022cf4:	4407      	add	r7, r0
            letter = _lv_txt_encoded_next(&txt[byte_pos], NULL);
 8022cf6:	4b62      	ldr	r3, [pc, #392]	@ (8022e80 <refr_cursor_area+0x258>)
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	2100      	movs	r1, #0
 8022cfc:	9801      	ldr	r0, [sp, #4]
 8022cfe:	4438      	add	r0, r7
 8022d00:	4798      	blx	r3
 8022d02:	4601      	mov	r1, r0
        if(is_valid_but_non_printable_char(letter)) {
 8022d04:	280d      	cmp	r0, #13
 8022d06:	d80c      	bhi.n	8022d22 <refr_cursor_area+0xfa>
 8022d08:	f242 4301 	movw	r3, #9217	@ 0x2401
 8022d0c:	40c3      	lsrs	r3, r0
 8022d0e:	f013 0f01 	tst.w	r3, #1
 8022d12:	d006      	beq.n	8022d22 <refr_cursor_area+0xfa>
            tmp = ' ';
 8022d14:	2120      	movs	r1, #32
 8022d16:	e004      	b.n	8022d22 <refr_cursor_area+0xfa>
 8022d18:	4601      	mov	r1, r0
 8022d1a:	e7b5      	b.n	8022c88 <refr_cursor_area+0x60>
 8022d1c:	4601      	mov	r1, r0
 8022d1e:	e7b3      	b.n	8022c88 <refr_cursor_area+0x60>
 8022d20:	2120      	movs	r1, #32
        letter_w = lv_font_get_glyph_width(font, tmp, IGNORE_KERNING);
 8022d22:	2200      	movs	r2, #0
 8022d24:	4640      	mov	r0, r8
 8022d26:	f7ee ff59 	bl	8011bdc <lv_font_get_glyph_width>
 8022d2a:	b205      	sxth	r5, r0
    ta->cursor.txt_byte_pos = byte_pos;
 8022d2c:	6527      	str	r7, [r4, #80]	@ 0x50
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_BORDER_WIDTH);
 8022d2e:	2232      	movs	r2, #50	@ 0x32
 8022d30:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022d34:	4620      	mov	r0, r4
 8022d36:	f7f9 fcdd 	bl	801c6f4 <lv_obj_get_style_prop>
 8022d3a:	4681      	mov	r9, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_TOP);
 8022d3c:	2210      	movs	r2, #16
 8022d3e:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022d42:	4620      	mov	r0, r4
 8022d44:	f7f9 fcd6 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t top = lv_obj_get_style_pad_top(obj, LV_PART_CURSOR) + border_width;
 8022d48:	fa1f f989 	uxth.w	r9, r9
 8022d4c:	fa19 f780 	uxtah	r7, r9, r0
 8022d50:	b2bf      	uxth	r7, r7
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_BOTTOM);
 8022d52:	2211      	movs	r2, #17
 8022d54:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022d58:	4620      	mov	r0, r4
 8022d5a:	f7f9 fccb 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(obj, LV_PART_CURSOR) + border_width;
 8022d5e:	fa19 f680 	uxtah	r6, r9, r0
 8022d62:	b2b6      	uxth	r6, r6
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_LEFT);
 8022d64:	2212      	movs	r2, #18
 8022d66:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022d6a:	4620      	mov	r0, r4
 8022d6c:	f7f9 fcc2 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t left = lv_obj_get_style_pad_left(obj, LV_PART_CURSOR) + border_width;
 8022d70:	fa19 f880 	uxtah	r8, r9, r0
 8022d74:	fa1f f888 	uxth.w	r8, r8
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_PAD_RIGHT);
 8022d78:	2213      	movs	r2, #19
 8022d7a:	f44f 21e0 	mov.w	r1, #458752	@ 0x70000
 8022d7e:	4620      	mov	r0, r4
 8022d80:	f7f9 fcb8 	bl	801c6f4 <lv_obj_get_style_prop>
    lv_coord_t right = lv_obj_get_style_pad_right(obj, LV_PART_CURSOR) + border_width;
 8022d84:	fa19 f080 	uxtah	r0, r9, r0
    cur_area.x1 = letter_pos.x - left;
 8022d88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8022d8c:	eba2 0808 	sub.w	r8, r2, r8
 8022d90:	fa1f fb88 	uxth.w	fp, r8
 8022d94:	fa0f f888 	sxth.w	r8, r8
 8022d98:	f8ad 8014 	strh.w	r8, [sp, #20]
    cur_area.y1 = letter_pos.y - top;
 8022d9c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022da0:	1bdf      	subs	r7, r3, r7
 8022da2:	fa1f f987 	uxth.w	r9, r7
 8022da6:	b23f      	sxth	r7, r7
 8022da8:	f8ad 7016 	strh.w	r7, [sp, #22]
    cur_area.x2 = letter_pos.x + right + letter_w - 1;
 8022dac:	fa12 f080 	uxtah	r0, r2, r0
 8022db0:	fa15 f580 	uxtah	r5, r5, r0
 8022db4:	b2ad      	uxth	r5, r5
 8022db6:	3d01      	subs	r5, #1
 8022db8:	b2aa      	uxth	r2, r5
 8022dba:	9200      	str	r2, [sp, #0]
 8022dbc:	b22d      	sxth	r5, r5
 8022dbe:	f8ad 5018 	strh.w	r5, [sp, #24]
    cur_area.y2 = letter_pos.y + bottom + letter_h - 1;
 8022dc2:	441e      	add	r6, r3
 8022dc4:	fa1a f686 	uxtah	r6, sl, r6
 8022dc8:	b2b6      	uxth	r6, r6
 8022dca:	3e01      	subs	r6, #1
 8022dcc:	fa1f fa86 	uxth.w	sl, r6
 8022dd0:	b236      	sxth	r6, r6
 8022dd2:	f8ad 601a 	strh.w	r6, [sp, #26]
    dest->x1 = src->x1;
 8022dd6:	f9b4 0048 	ldrsh.w	r0, [r4, #72]	@ 0x48
 8022dda:	f8ad 000c 	strh.w	r0, [sp, #12]
    dest->y1 = src->y1;
 8022dde:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	@ 0x4a
 8022de2:	f8ad 100e 	strh.w	r1, [sp, #14]
    dest->x2 = src->x2;
 8022de6:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	@ 0x4c
 8022dea:	f8ad 2010 	strh.w	r2, [sp, #16]
    dest->y2 = src->y2;
 8022dee:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	@ 0x4e
 8022df2:	f8ad 3012 	strh.w	r3, [sp, #18]
    area_tmp.x1 += ta->label->coords.x1;
 8022df6:	f8d4 e024 	ldr.w	lr, [r4, #36]	@ 0x24
 8022dfa:	f8be c014 	ldrh.w	ip, [lr, #20]
 8022dfe:	fa1c f080 	uxtah	r0, ip, r0
 8022e02:	f8ad 000c 	strh.w	r0, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 8022e06:	f8be 0016 	ldrh.w	r0, [lr, #22]
 8022e0a:	fa10 f181 	uxtah	r1, r0, r1
 8022e0e:	f8ad 100e 	strh.w	r1, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 8022e12:	fa1c f282 	uxtah	r2, ip, r2
 8022e16:	f8ad 2010 	strh.w	r2, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 8022e1a:	fa10 f383 	uxtah	r3, r0, r3
 8022e1e:	f8ad 3012 	strh.w	r3, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 8022e22:	ab03      	add	r3, sp, #12
 8022e24:	4619      	mov	r1, r3
 8022e26:	4620      	mov	r0, r4
 8022e28:	f7f7 f815 	bl	8019e56 <lv_obj_invalidate_area>
    dest->x1 = src->x1;
 8022e2c:	f8a4 8048 	strh.w	r8, [r4, #72]	@ 0x48
    dest->y1 = src->y1;
 8022e30:	f8a4 704a 	strh.w	r7, [r4, #74]	@ 0x4a
    dest->x2 = src->x2;
 8022e34:	f8a4 504c 	strh.w	r5, [r4, #76]	@ 0x4c
    dest->y2 = src->y2;
 8022e38:	f8a4 604e 	strh.w	r6, [r4, #78]	@ 0x4e
    dest->x1 = src->x1;
 8022e3c:	f8ad 800c 	strh.w	r8, [sp, #12]
    dest->y1 = src->y1;
 8022e40:	f8ad 700e 	strh.w	r7, [sp, #14]
    dest->x2 = src->x2;
 8022e44:	f8ad 5010 	strh.w	r5, [sp, #16]
    dest->y2 = src->y2;
 8022e48:	f8ad 6012 	strh.w	r6, [sp, #18]
    area_tmp.x1 += ta->label->coords.x1;
 8022e4c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8022e4e:	8a93      	ldrh	r3, [r2, #20]
 8022e50:	449b      	add	fp, r3
 8022e52:	f8ad b00c 	strh.w	fp, [sp, #12]
    area_tmp.y1 += ta->label->coords.y1;
 8022e56:	8ad2      	ldrh	r2, [r2, #22]
 8022e58:	4491      	add	r9, r2
 8022e5a:	f8ad 900e 	strh.w	r9, [sp, #14]
    area_tmp.x2 += ta->label->coords.x1;
 8022e5e:	9900      	ldr	r1, [sp, #0]
 8022e60:	440b      	add	r3, r1
 8022e62:	f8ad 3010 	strh.w	r3, [sp, #16]
    area_tmp.y2 += ta->label->coords.y1;
 8022e66:	4492      	add	sl, r2
 8022e68:	f8ad a012 	strh.w	sl, [sp, #18]
    lv_obj_invalidate_area(obj, &area_tmp);
 8022e6c:	a903      	add	r1, sp, #12
 8022e6e:	4620      	mov	r0, r4
 8022e70:	f7f6 fff1 	bl	8019e56 <lv_obj_invalidate_area>
}
 8022e74:	b009      	add	sp, #36	@ 0x24
 8022e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e7a:	bf00      	nop
 8022e7c:	2000007c 	.word	0x2000007c
 8022e80:	20000084 	.word	0x20000084
 8022e84:	2000008c 	.word	0x2000008c

08022e88 <label_event_cb>:
{
 8022e88:	b570      	push	{r4, r5, r6, lr}
 8022e8a:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 8022e8c:	f7ed ff4a 	bl	8010d24 <lv_event_get_code>
 8022e90:	4604      	mov	r4, r0
    lv_obj_t * label = lv_event_get_target(e);
 8022e92:	4628      	mov	r0, r5
 8022e94:	f7ed ff42 	bl	8010d1c <lv_event_get_target>
 8022e98:	4606      	mov	r6, r0
    lv_obj_t * ta = lv_obj_get_parent(label);
 8022e9a:	f7fa f96b 	bl	801d174 <lv_obj_get_parent>
    if(code == LV_EVENT_STYLE_CHANGED || code == LV_EVENT_SIZE_CHANGED) {
 8022e9e:	3c29      	subs	r4, #41	@ 0x29
 8022ea0:	b2e4      	uxtb	r4, r4
 8022ea2:	2c01      	cmp	r4, #1
 8022ea4:	d900      	bls.n	8022ea8 <label_event_cb+0x20>
}
 8022ea6:	bd70      	pop	{r4, r5, r6, pc}
 8022ea8:	4605      	mov	r5, r0
        lv_label_set_text(label, NULL);
 8022eaa:	2100      	movs	r1, #0
 8022eac:	4630      	mov	r0, r6
 8022eae:	f7f2 fc1b 	bl	80156e8 <lv_label_set_text>
        refr_cursor_area(ta);
 8022eb2:	4628      	mov	r0, r5
 8022eb4:	f7ff feb8 	bl	8022c28 <refr_cursor_area>
        start_cursor_blink(ta);
 8022eb8:	4628      	mov	r0, r5
 8022eba:	f7ff fcf5 	bl	80228a8 <start_cursor_blink>
}
 8022ebe:	e7f2      	b.n	8022ea6 <label_event_cb+0x1e>

08022ec0 <lv_textarea_set_cursor_pos>:
    if((uint32_t)ta->cursor.pos == (uint32_t)pos) return;
 8022ec0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8022ec2:	428b      	cmp	r3, r1
 8022ec4:	d07e      	beq.n	8022fc4 <lv_textarea_set_cursor_pos+0x104>
{
 8022ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ec8:	b083      	sub	sp, #12
 8022eca:	4604      	mov	r4, r0
 8022ecc:	460d      	mov	r5, r1
    uint32_t len = _lv_txt_get_encoded_length(lv_label_get_text(ta->label));
 8022ece:	4b3e      	ldr	r3, [pc, #248]	@ (8022fc8 <lv_textarea_set_cursor_pos+0x108>)
 8022ed0:	681e      	ldr	r6, [r3, #0]
 8022ed2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8022ed4:	f7f1 ff68 	bl	8014da8 <lv_label_get_text>
 8022ed8:	47b0      	blx	r6
    if(pos < 0) pos = len + pos;
 8022eda:	2d00      	cmp	r5, #0
 8022edc:	db4c      	blt.n	8022f78 <lv_textarea_set_cursor_pos+0xb8>
    if(pos > (int32_t)len || pos == LV_TEXTAREA_CURSOR_LAST) pos = len;
 8022ede:	4606      	mov	r6, r0
 8022ee0:	42a8      	cmp	r0, r5
 8022ee2:	db04      	blt.n	8022eee <lv_textarea_set_cursor_pos+0x2e>
 8022ee4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8022ee8:	429d      	cmp	r5, r3
 8022eea:	d000      	beq.n	8022eee <lv_textarea_set_cursor_pos+0x2e>
 8022eec:	462e      	mov	r6, r5
    ta->cursor.pos = pos;
 8022eee:	6466      	str	r6, [r4, #68]	@ 0x44
    lv_obj_update_layout(obj);
 8022ef0:	4620      	mov	r0, r4
 8022ef2:	f7f7 fcd3 	bl	801a89c <lv_obj_update_layout>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8022ef6:	2257      	movs	r2, #87	@ 0x57
 8022ef8:	2100      	movs	r1, #0
 8022efa:	4620      	mov	r0, r4
 8022efc:	f7f9 fbfa 	bl	801c6f4 <lv_obj_get_style_prop>
 8022f00:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, pos, &cur_pos);
 8022f02:	aa01      	add	r2, sp, #4
 8022f04:	4631      	mov	r1, r6
 8022f06:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8022f08:	f7f1 ff56 	bl	8014db8 <lv_label_get_letter_pos>
 8022f0c:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
    if(cur_pos.y < lv_obj_get_scroll_top(obj)) {
 8022f10:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8022f14:	4620      	mov	r0, r4
 8022f16:	f7f7 ff77 	bl	801ae08 <lv_obj_get_scroll_top>
 8022f1a:	4285      	cmp	r5, r0
 8022f1c:	db2e      	blt.n	8022f7c <lv_textarea_set_cursor_pos+0xbc>
    lv_coord_t h = lv_obj_get_content_height(obj);
 8022f1e:	4620      	mov	r0, r4
 8022f20:	f7f6 fc10 	bl	8019744 <lv_obj_get_content_height>
 8022f24:	4607      	mov	r7, r0
    if(cur_pos.y + font_h - lv_obj_get_scroll_top(obj) > h) {
 8022f26:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8022f2a:	4435      	add	r5, r6
 8022f2c:	4620      	mov	r0, r4
 8022f2e:	f7f7 ff6b 	bl	801ae08 <lv_obj_get_scroll_top>
 8022f32:	1a2d      	subs	r5, r5, r0
 8022f34:	42bd      	cmp	r5, r7
 8022f36:	dc28      	bgt.n	8022f8a <lv_textarea_set_cursor_pos+0xca>
    if(cur_pos.x < lv_obj_get_scroll_left(obj)) {
 8022f38:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8022f3c:	4620      	mov	r0, r4
 8022f3e:	f7f7 ffc3 	bl	801aec8 <lv_obj_get_scroll_left>
 8022f42:	4285      	cmp	r5, r0
 8022f44:	db2c      	blt.n	8022fa0 <lv_textarea_set_cursor_pos+0xe0>
    lv_coord_t w = lv_obj_get_content_width(obj);
 8022f46:	4620      	mov	r0, r4
 8022f48:	f7f6 fbdc 	bl	8019704 <lv_obj_get_content_width>
 8022f4c:	4607      	mov	r7, r0
    if(cur_pos.x + font_h - lv_obj_get_scroll_left(obj) > w) {
 8022f4e:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8022f52:	4435      	add	r5, r6
 8022f54:	4620      	mov	r0, r4
 8022f56:	f7f7 ffb7 	bl	801aec8 <lv_obj_get_scroll_left>
 8022f5a:	1a2d      	subs	r5, r5, r0
 8022f5c:	42bd      	cmp	r5, r7
 8022f5e:	dc26      	bgt.n	8022fae <lv_textarea_set_cursor_pos+0xee>
    ta->cursor.valid_x = cur_pos.x;
 8022f60:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8022f64:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
    start_cursor_blink(obj);
 8022f68:	4620      	mov	r0, r4
 8022f6a:	f7ff fc9d 	bl	80228a8 <start_cursor_blink>
    refr_cursor_area(obj);
 8022f6e:	4620      	mov	r0, r4
 8022f70:	f7ff fe5a 	bl	8022c28 <refr_cursor_area>
}
 8022f74:	b003      	add	sp, #12
 8022f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(pos < 0) pos = len + pos;
 8022f78:	4405      	add	r5, r0
 8022f7a:	e7b0      	b.n	8022ede <lv_textarea_set_cursor_pos+0x1e>
        lv_obj_scroll_to_y(obj, cur_pos.y, LV_ANIM_ON);
 8022f7c:	2201      	movs	r2, #1
 8022f7e:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 8022f82:	4620      	mov	r0, r4
 8022f84:	f7f8 fa00 	bl	801b388 <lv_obj_scroll_to_y>
 8022f88:	e7c9      	b.n	8022f1e <lv_textarea_set_cursor_pos+0x5e>
        lv_obj_scroll_to_y(obj, cur_pos.y - h + font_h, LV_ANIM_ON);
 8022f8a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8022f8e:	1bc9      	subs	r1, r1, r7
 8022f90:	fa16 f181 	uxtah	r1, r6, r1
 8022f94:	2201      	movs	r2, #1
 8022f96:	b209      	sxth	r1, r1
 8022f98:	4620      	mov	r0, r4
 8022f9a:	f7f8 f9f5 	bl	801b388 <lv_obj_scroll_to_y>
 8022f9e:	e7cb      	b.n	8022f38 <lv_textarea_set_cursor_pos+0x78>
        lv_obj_scroll_to_x(obj, cur_pos.x, LV_ANIM_ON);
 8022fa0:	2201      	movs	r2, #1
 8022fa2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8022fa6:	4620      	mov	r0, r4
 8022fa8:	f7f8 f9da 	bl	801b360 <lv_obj_scroll_to_x>
 8022fac:	e7cb      	b.n	8022f46 <lv_textarea_set_cursor_pos+0x86>
        lv_obj_scroll_to_x(obj, cur_pos.x - w + font_h, LV_ANIM_ON);
 8022fae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022fb2:	1bc9      	subs	r1, r1, r7
 8022fb4:	fa16 f181 	uxtah	r1, r6, r1
 8022fb8:	2201      	movs	r2, #1
 8022fba:	b209      	sxth	r1, r1
 8022fbc:	4620      	mov	r0, r4
 8022fbe:	f7f8 f9cf 	bl	801b360 <lv_obj_scroll_to_x>
 8022fc2:	e7cd      	b.n	8022f60 <lv_textarea_set_cursor_pos+0xa0>
 8022fc4:	4770      	bx	lr
 8022fc6:	bf00      	nop
 8022fc8:	20000074 	.word	0x20000074

08022fcc <update_cursor_position_on_click>:
{
 8022fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022fce:	b087      	sub	sp, #28
 8022fd0:	4605      	mov	r5, r0
    lv_indev_t * click_source = lv_indev_get_act();
 8022fd2:	f7f1 fbcd 	bl	8014770 <lv_indev_get_act>
    if(click_source == NULL) return;
 8022fd6:	b148      	cbz	r0, 8022fec <update_cursor_position_on_click+0x20>
 8022fd8:	4606      	mov	r6, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8022fda:	4628      	mov	r0, r5
 8022fdc:	f7ed fe9e 	bl	8010d1c <lv_event_get_target>
 8022fe0:	4604      	mov	r4, r0
    if(ta->cursor.click_pos == 0) return;
 8022fe2:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8022fe6:	f013 0f02 	tst.w	r3, #2
 8022fea:	d101      	bne.n	8022ff0 <update_cursor_position_on_click+0x24>
}
 8022fec:	b007      	add	sp, #28
 8022fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8022ff0:	4630      	mov	r0, r6
 8022ff2:	f7f1 fbc3 	bl	801477c <lv_indev_get_type>
 8022ff6:	2802      	cmp	r0, #2
 8022ff8:	d0f8      	beq.n	8022fec <update_cursor_position_on_click+0x20>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 8022ffa:	4630      	mov	r0, r6
 8022ffc:	f7f1 fbbe 	bl	801477c <lv_indev_get_type>
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 8023000:	2804      	cmp	r0, #4
 8023002:	d0f3      	beq.n	8022fec <update_cursor_position_on_click+0x20>
    lv_obj_get_coords(ta->label, &label_coords);
 8023004:	a904      	add	r1, sp, #16
 8023006:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8023008:	f7f6 fb0f 	bl	801962a <lv_obj_get_coords>
    lv_indev_get_point(click_source, &point_act);
 802300c:	a903      	add	r1, sp, #12
 802300e:	4630      	mov	r0, r6
 8023010:	f7f1 fc25 	bl	801485e <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 8023014:	a902      	add	r1, sp, #8
 8023016:	4630      	mov	r0, r6
 8023018:	f7f1 fc57 	bl	80148ca <lv_indev_get_vect>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 802301c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023020:	2b00      	cmp	r3, #0
 8023022:	dbe3      	blt.n	8022fec <update_cursor_position_on_click+0x20>
 8023024:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8023028:	2a00      	cmp	r2, #0
 802302a:	dbdf      	blt.n	8022fec <update_cursor_position_on_click+0x20>
    rel_pos.x = point_act.x - label_coords.x1;
 802302c:	b29b      	uxth	r3, r3
 802302e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8023032:	1a5b      	subs	r3, r3, r1
 8023034:	f8ad 3004 	strh.w	r3, [sp, #4]
    rel_pos.y = point_act.y - label_coords.y1;
 8023038:	b292      	uxth	r2, r2
 802303a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 802303e:	1ad2      	subs	r2, r2, r3
 8023040:	f8ad 2006 	strh.w	r2, [sp, #6]
    const lv_event_code_t code = lv_event_get_code(e);
 8023044:	4628      	mov	r0, r5
 8023046:	f7ed fe6d 	bl	8010d24 <lv_event_get_code>
 802304a:	4605      	mov	r5, r0
    lv_coord_t label_width = lv_obj_get_width(ta->label);
 802304c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 802304e:	f7f6 fb3f 	bl	80196d0 <lv_obj_get_width>
    lv_label_t * label_data = (lv_label_t *)ta->label;
 8023052:	6a66      	ldr	r6, [r4, #36]	@ 0x24
    if(rel_pos.x < 0) {
 8023054:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8023058:	2b00      	cmp	r3, #0
 802305a:	db12      	blt.n	8023082 <update_cursor_position_on_click+0xb6>
    else if(rel_pos.x >= label_width) {
 802305c:	4283      	cmp	r3, r0
 802305e:	db03      	blt.n	8023068 <update_cursor_position_on_click+0x9c>
        click_outside_label = true;
 8023060:	2201      	movs	r2, #1
        char_id_at_click = LV_TEXTAREA_CURSOR_LAST;
 8023062:	f647 77ff 	movw	r7, #32767	@ 0x7fff
 8023066:	e00e      	b.n	8023086 <update_cursor_position_on_click+0xba>
        char_id_at_click = lv_label_get_letter_on(ta->label, &rel_pos);
 8023068:	a901      	add	r1, sp, #4
 802306a:	4630      	mov	r0, r6
 802306c:	f7f1 ffac 	bl	8014fc8 <lv_label_get_letter_on>
 8023070:	b287      	uxth	r7, r0
        click_outside_label = !lv_label_is_char_under_pos(ta->label, &rel_pos);
 8023072:	a901      	add	r1, sp, #4
 8023074:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8023076:	f7f2 fc2b 	bl	80158d0 <lv_label_is_char_under_pos>
 802307a:	f080 0201 	eor.w	r2, r0, #1
 802307e:	b2d2      	uxtb	r2, r2
 8023080:	e001      	b.n	8023086 <update_cursor_position_on_click+0xba>
        click_outside_label = true;
 8023082:	2201      	movs	r2, #1
        char_id_at_click = 0;
 8023084:	2700      	movs	r7, #0
    if(ta->text_sel_en) {
 8023086:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 802308a:	f013 0f02 	tst.w	r3, #2
 802308e:	d00d      	beq.n	80230ac <update_cursor_position_on_click+0xe0>
        if(!ta->text_sel_in_prog && !click_outside_label && code == LV_EVENT_PRESSED) {
 8023090:	f013 0301 	ands.w	r3, r3, #1
 8023094:	d102      	bne.n	802309c <update_cursor_position_on_click+0xd0>
 8023096:	b90a      	cbnz	r2, 802309c <update_cursor_position_on_click+0xd0>
 8023098:	2d01      	cmp	r5, #1
 802309a:	d033      	beq.n	8023104 <update_cursor_position_on_click+0x138>
        else if(ta->text_sel_in_prog && code == LV_EVENT_PRESSING) {
 802309c:	b10b      	cbz	r3, 80230a2 <update_cursor_position_on_click+0xd6>
 802309e:	2d02      	cmp	r5, #2
 80230a0:	d040      	beq.n	8023124 <update_cursor_position_on_click+0x158>
        else if(ta->text_sel_in_prog && (code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED)) {
 80230a2:	b11b      	cbz	r3, 80230ac <update_cursor_position_on_click+0xe0>
 80230a4:	2d03      	cmp	r5, #3
 80230a6:	d03f      	beq.n	8023128 <update_cursor_position_on_click+0x15c>
 80230a8:	2d08      	cmp	r5, #8
 80230aa:	d03d      	beq.n	8023128 <update_cursor_position_on_click+0x15c>
    if(ta->text_sel_in_prog || code == LV_EVENT_PRESSED) lv_textarea_set_cursor_pos(obj, char_id_at_click);
 80230ac:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80230b0:	f013 0f01 	tst.w	r3, #1
 80230b4:	d101      	bne.n	80230ba <update_cursor_position_on_click+0xee>
 80230b6:	2d01      	cmp	r5, #1
 80230b8:	d103      	bne.n	80230c2 <update_cursor_position_on_click+0xf6>
 80230ba:	4639      	mov	r1, r7
 80230bc:	4620      	mov	r0, r4
 80230be:	f7ff feff 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    if(ta->text_sel_in_prog) {
 80230c2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80230c6:	f013 0f01 	tst.w	r3, #1
 80230ca:	d08f      	beq.n	8022fec <update_cursor_position_on_click+0x20>
        if(ta->sel_start > ta->sel_end) {
 80230cc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80230ce:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80230d0:	429a      	cmp	r2, r3
 80230d2:	d92f      	bls.n	8023134 <update_cursor_position_on_click+0x168>
            if(label_data->sel_start != ta->sel_end || label_data->sel_end != ta->sel_start) {
 80230d4:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 80230d6:	428b      	cmp	r3, r1
 80230d8:	d102      	bne.n	80230e0 <update_cursor_position_on_click+0x114>
 80230da:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80230dc:	428a      	cmp	r2, r1
 80230de:	d005      	beq.n	80230ec <update_cursor_position_on_click+0x120>
                label_data->sel_start = ta->sel_end;
 80230e0:	63f3      	str	r3, [r6, #60]	@ 0x3c
                label_data->sel_end   = ta->sel_start;
 80230e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80230e4:	6433      	str	r3, [r6, #64]	@ 0x40
                lv_obj_invalidate(obj);
 80230e6:	4620      	mov	r0, r4
 80230e8:	f7f6 fedd 	bl	8019ea6 <lv_obj_invalidate>
        if(code == LV_EVENT_PRESS_LOST || code == LV_EVENT_RELEASED) {
 80230ec:	2d03      	cmp	r5, #3
 80230ee:	d002      	beq.n	80230f6 <update_cursor_position_on_click+0x12a>
 80230f0:	2d08      	cmp	r5, #8
 80230f2:	f47f af7b 	bne.w	8022fec <update_cursor_position_on_click+0x20>
            ta->text_sel_in_prog = 0;
 80230f6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80230fa:	f023 0301 	bic.w	r3, r3, #1
 80230fe:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8023102:	e773      	b.n	8022fec <update_cursor_position_on_click+0x20>
            ta->sel_start    = char_id_at_click;
 8023104:	65a7      	str	r7, [r4, #88]	@ 0x58
            ta->sel_end      = LV_LABEL_TEXT_SELECTION_OFF;
 8023106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802310a:	65e3      	str	r3, [r4, #92]	@ 0x5c
            ta->text_sel_in_prog = 1;
 802310c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8023110:	f043 0301 	orr.w	r3, r3, #1
 8023114:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
            lv_obj_clear_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8023118:	f44f 7140 	mov.w	r1, #768	@ 0x300
 802311c:	4620      	mov	r0, r4
 802311e:	f7f5 f95f 	bl	80183e0 <lv_obj_clear_flag>
 8023122:	e7c3      	b.n	80230ac <update_cursor_position_on_click+0xe0>
            ta->sel_end = char_id_at_click;
 8023124:	65e7      	str	r7, [r4, #92]	@ 0x5c
 8023126:	e7c1      	b.n	80230ac <update_cursor_position_on_click+0xe0>
            lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_CHAIN);
 8023128:	f44f 7140 	mov.w	r1, #768	@ 0x300
 802312c:	4620      	mov	r0, r4
 802312e:	f7f5 fbe7 	bl	8018900 <lv_obj_add_flag>
 8023132:	e7bb      	b.n	80230ac <update_cursor_position_on_click+0xe0>
        else if(ta->sel_start < ta->sel_end) {
 8023134:	429a      	cmp	r2, r3
 8023136:	d20c      	bcs.n	8023152 <update_cursor_position_on_click+0x186>
            if(label_data->sel_start != ta->sel_start || label_data->sel_end != ta->sel_end) {
 8023138:	6bf1      	ldr	r1, [r6, #60]	@ 0x3c
 802313a:	428a      	cmp	r2, r1
 802313c:	d102      	bne.n	8023144 <update_cursor_position_on_click+0x178>
 802313e:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 8023140:	428b      	cmp	r3, r1
 8023142:	d0d3      	beq.n	80230ec <update_cursor_position_on_click+0x120>
                label_data->sel_start = ta->sel_start;
 8023144:	63f2      	str	r2, [r6, #60]	@ 0x3c
                label_data->sel_end   = ta->sel_end;
 8023146:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8023148:	6433      	str	r3, [r6, #64]	@ 0x40
                lv_obj_invalidate(obj);
 802314a:	4620      	mov	r0, r4
 802314c:	f7f6 feab 	bl	8019ea6 <lv_obj_invalidate>
 8023150:	e7cc      	b.n	80230ec <update_cursor_position_on_click+0x120>
            if(label_data->sel_start != LV_DRAW_LABEL_NO_TXT_SEL || label_data->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
 8023152:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8023154:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023158:	429a      	cmp	r2, r3
 802315a:	d102      	bne.n	8023162 <update_cursor_position_on_click+0x196>
 802315c:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 802315e:	429a      	cmp	r2, r3
 8023160:	d0c4      	beq.n	80230ec <update_cursor_position_on_click+0x120>
                label_data->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
 8023162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023166:	63f3      	str	r3, [r6, #60]	@ 0x3c
                label_data->sel_end   = LV_DRAW_LABEL_NO_TXT_SEL;
 8023168:	6433      	str	r3, [r6, #64]	@ 0x40
                lv_obj_invalidate(obj);
 802316a:	4620      	mov	r0, r4
 802316c:	f7f6 fe9b 	bl	8019ea6 <lv_obj_invalidate>
 8023170:	e7bc      	b.n	80230ec <update_cursor_position_on_click+0x120>
	...

08023174 <lv_textarea_constructor>:
{
 8023174:	b538      	push	{r3, r4, r5, lr}
 8023176:	460c      	mov	r4, r1
    ta->pwd_mode          = 0;
 8023178:	f891 3060 	ldrb.w	r3, [r1, #96]	@ 0x60
 802317c:	f023 0304 	bic.w	r3, r3, #4
 8023180:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
    ta->pwd_tmp           = NULL;
 8023184:	2500      	movs	r5, #0
 8023186:	62cd      	str	r5, [r1, #44]	@ 0x2c
    ta->pwd_bullet        = NULL;
 8023188:	630d      	str	r5, [r1, #48]	@ 0x30
    ta->pwd_show_time     = LV_TEXTAREA_DEF_PWD_SHOW_TIME;
 802318a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 802318e:	878b      	strh	r3, [r1, #60]	@ 0x3c
    ta->accepted_chars    = NULL;
 8023190:	634d      	str	r5, [r1, #52]	@ 0x34
    ta->max_length        = 0;
 8023192:	638d      	str	r5, [r1, #56]	@ 0x38
    ta->cursor.show      = 1;
 8023194:	f891 3054 	ldrb.w	r3, [r1, #84]	@ 0x54
 8023198:	f043 0301 	orr.w	r3, r3, #1
 802319c:	f881 3054 	strb.w	r3, [r1, #84]	@ 0x54
    ta->cursor.pos        = 1;
 80231a0:	2301      	movs	r3, #1
 80231a2:	644b      	str	r3, [r1, #68]	@ 0x44
    ta->cursor.click_pos  = 1;
 80231a4:	f891 3054 	ldrb.w	r3, [r1, #84]	@ 0x54
 80231a8:	f043 0302 	orr.w	r3, r3, #2
 80231ac:	f881 3054 	strb.w	r3, [r1, #84]	@ 0x54
    ta->cursor.valid_x    = 0;
 80231b0:	f8a1 5040 	strh.w	r5, [r1, #64]	@ 0x40
    ta->one_line          = 0;
 80231b4:	f891 3060 	ldrb.w	r3, [r1, #96]	@ 0x60
 80231b8:	f365 03c3 	bfi	r3, r5, #3, #1
 80231bc:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
    ta->text_sel_en = 0;
 80231c0:	b2db      	uxtb	r3, r3
 80231c2:	f365 0341 	bfi	r3, r5, #1, #1
 80231c6:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
    ta->label       = NULL;
 80231ca:	624d      	str	r5, [r1, #36]	@ 0x24
    ta->placeholder_txt = NULL;
 80231cc:	628d      	str	r5, [r1, #40]	@ 0x28
    ta->label = lv_label_create(obj);
 80231ce:	4608      	mov	r0, r1
 80231d0:	f7f1 fdd4 	bl	8014d7c <lv_label_create>
 80231d4:	6260      	str	r0, [r4, #36]	@ 0x24
    lv_obj_set_width(ta->label, lv_pct(100));
 80231d6:	f242 0164 	movw	r1, #8292	@ 0x2064
 80231da:	f7f6 f985 	bl	80194e8 <lv_obj_set_width>
    lv_label_set_text(ta->label, "");
 80231de:	490b      	ldr	r1, [pc, #44]	@ (802320c <lv_textarea_constructor+0x98>)
 80231e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80231e2:	f7f2 fa81 	bl	80156e8 <lv_label_set_text>
    lv_obj_add_event_cb(ta->label, label_event_cb, LV_EVENT_ALL, NULL);
 80231e6:	462b      	mov	r3, r5
 80231e8:	462a      	mov	r2, r5
 80231ea:	4909      	ldr	r1, [pc, #36]	@ (8023210 <lv_textarea_constructor+0x9c>)
 80231ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80231ee:	f7ed fdb5 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ON_FOCUS);
 80231f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80231f6:	4620      	mov	r0, r4
 80231f8:	f7f5 fb82 	bl	8018900 <lv_obj_add_flag>
    lv_textarea_set_cursor_pos(obj, 0);
 80231fc:	4629      	mov	r1, r5
 80231fe:	4620      	mov	r0, r4
 8023200:	f7ff fe5e 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    start_cursor_blink(obj);
 8023204:	4620      	mov	r0, r4
 8023206:	f7ff fb4f 	bl	80228a8 <start_cursor_blink>
}
 802320a:	bd38      	pop	{r3, r4, r5, pc}
 802320c:	08029930 	.word	0x08029930
 8023210:	08022e89 	.word	0x08022e89

08023214 <lv_textarea_get_password_bullet>:
{
 8023214:	4603      	mov	r3, r0
    if(ta->pwd_bullet) return ta->pwd_bullet;
 8023216:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8023218:	b100      	cbz	r0, 802321c <lv_textarea_get_password_bullet+0x8>
}
 802321a:	4770      	bx	lr
{
 802321c:	b500      	push	{lr}
 802321e:	b085      	sub	sp, #20
 8023220:	2257      	movs	r2, #87	@ 0x57
 8023222:	2100      	movs	r1, #0
 8023224:	4618      	mov	r0, r3
 8023226:	f7f9 fa65 	bl	801c6f4 <lv_obj_get_style_prop>
    if(lv_font_get_glyph_dsc(font, &g, LV_TEXTAREA_PWD_BULLET_UNICODE, 0))
 802322a:	2300      	movs	r3, #0
 802322c:	f242 0222 	movw	r2, #8226	@ 0x2022
 8023230:	4669      	mov	r1, sp
 8023232:	f7ee fc76 	bl	8011b22 <lv_font_get_glyph_dsc>
 8023236:	b918      	cbnz	r0, 8023240 <lv_textarea_get_password_bullet+0x2c>
    return "*";
 8023238:	4802      	ldr	r0, [pc, #8]	@ (8023244 <lv_textarea_get_password_bullet+0x30>)
}
 802323a:	b005      	add	sp, #20
 802323c:	f85d fb04 	ldr.w	pc, [sp], #4
        return LV_SYMBOL_BULLET;
 8023240:	4801      	ldr	r0, [pc, #4]	@ (8023248 <lv_textarea_get_password_bullet+0x34>)
 8023242:	e7fa      	b.n	802323a <lv_textarea_get_password_bullet+0x26>
 8023244:	08029d1c 	.word	0x08029d1c
 8023248:	08029ea8 	.word	0x08029ea8

0802324c <pwd_char_hider>:
{
 802324c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(ta->pwd_mode == 0) {
 8023250:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8023254:	f013 0f04 	tst.w	r3, #4
 8023258:	d101      	bne.n	802325e <pwd_char_hider+0x12>
}
 802325a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802325e:	4605      	mov	r5, r0
    char * txt = lv_label_get_text(ta->label);
 8023260:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8023262:	f7f1 fda1 	bl	8014da8 <lv_label_get_text>
    uint32_t enc_len = _lv_txt_get_encoded_length(txt);
 8023266:	4b16      	ldr	r3, [pc, #88]	@ (80232c0 <pwd_char_hider+0x74>)
 8023268:	681b      	ldr	r3, [r3, #0]
 802326a:	4798      	blx	r3
    if(enc_len == 0) return;
 802326c:	4680      	mov	r8, r0
 802326e:	2800      	cmp	r0, #0
 8023270:	d0f3      	beq.n	802325a <pwd_char_hider+0xe>
    const char * bullet = lv_textarea_get_password_bullet(obj);
 8023272:	4628      	mov	r0, r5
 8023274:	f7ff ffce 	bl	8023214 <lv_textarea_get_password_bullet>
 8023278:	4681      	mov	r9, r0
    const size_t bullet_len = strlen(bullet);
 802327a:	f7dc ff8f 	bl	800019c <strlen>
 802327e:	4606      	mov	r6, r0
    char * txt_tmp = lv_mem_buf_get(enc_len * bullet_len + 1);
 8023280:	fb00 f008 	mul.w	r0, r0, r8
 8023284:	3001      	adds	r0, #1
 8023286:	f7f3 fb99 	bl	80169bc <lv_mem_buf_get>
 802328a:	4607      	mov	r7, r0
    for(i = 0; i < enc_len; i++) {
 802328c:	2400      	movs	r4, #0
 802328e:	e006      	b.n	802329e <pwd_char_hider+0x52>
        lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
 8023290:	4632      	mov	r2, r6
 8023292:	4649      	mov	r1, r9
 8023294:	fb06 7004 	mla	r0, r6, r4, r7
 8023298:	f7f3 fc26 	bl	8016ae8 <lv_memcpy>
    for(i = 0; i < enc_len; i++) {
 802329c:	3401      	adds	r4, #1
 802329e:	4544      	cmp	r4, r8
 80232a0:	d3f6      	bcc.n	8023290 <pwd_char_hider+0x44>
    txt_tmp[i * bullet_len] = '\0';
 80232a2:	fb06 f404 	mul.w	r4, r6, r4
 80232a6:	2300      	movs	r3, #0
 80232a8:	553b      	strb	r3, [r7, r4]
    lv_label_set_text(ta->label, txt_tmp);
 80232aa:	4639      	mov	r1, r7
 80232ac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80232ae:	f7f2 fa1b 	bl	80156e8 <lv_label_set_text>
    lv_mem_buf_release(txt_tmp);
 80232b2:	4638      	mov	r0, r7
 80232b4:	f7f3 fbe4 	bl	8016a80 <lv_mem_buf_release>
    refr_cursor_area(obj);
 80232b8:	4628      	mov	r0, r5
 80232ba:	f7ff fcb5 	bl	8022c28 <refr_cursor_area>
 80232be:	e7cc      	b.n	802325a <pwd_char_hider+0xe>
 80232c0:	20000074 	.word	0x20000074

080232c4 <auto_hide_characters>:

static void auto_hide_characters(lv_obj_t * obj)
{
 80232c4:	b510      	push	{r4, lr}
 80232c6:	b092      	sub	sp, #72	@ 0x48
 80232c8:	4604      	mov	r4, r0
    lv_textarea_t * ta = (lv_textarea_t *) obj;

    if(ta->pwd_show_time == 0) {
 80232ca:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 80232cc:	b91b      	cbnz	r3, 80232d6 <auto_hide_characters+0x12>
        pwd_char_hider(obj);
 80232ce:	f7ff ffbd 	bl	802324c <pwd_char_hider>
        lv_anim_set_values(&a, 0, 1);
        lv_anim_set_path_cb(&a, lv_anim_path_step);
        lv_anim_set_ready_cb(&a, pwd_char_hider_anim_ready);
        lv_anim_start(&a);
    }
}
 80232d2:	b012      	add	sp, #72	@ 0x48
 80232d4:	bd10      	pop	{r4, pc}
        lv_anim_init(&a);
 80232d6:	a801      	add	r0, sp, #4
 80232d8:	f7dd fa3c 	bl	8000754 <lv_anim_init>
    a->var = var;
 80232dc:	9401      	str	r4, [sp, #4]
    a->exec_cb = exec_cb;
 80232de:	4b08      	ldr	r3, [pc, #32]	@ (8023300 <auto_hide_characters+0x3c>)
 80232e0:	9302      	str	r3, [sp, #8]
        lv_anim_set_time(&a, ta->pwd_show_time);
 80232e2:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
    a->time = duration;
 80232e4:	930c      	str	r3, [sp, #48]	@ 0x30
    a->start_value = start;
 80232e6:	2300      	movs	r3, #0
 80232e8:	9309      	str	r3, [sp, #36]	@ 0x24
    a->current_value = start;
 80232ea:	930a      	str	r3, [sp, #40]	@ 0x28
    a->end_value = end;
 80232ec:	2301      	movs	r3, #1
 80232ee:	930b      	str	r3, [sp, #44]	@ 0x2c
    a->path_cb = path_cb;
 80232f0:	4b04      	ldr	r3, [pc, #16]	@ (8023304 <auto_hide_characters+0x40>)
 80232f2:	9308      	str	r3, [sp, #32]
    a->ready_cb = ready_cb;
 80232f4:	4b04      	ldr	r3, [pc, #16]	@ (8023308 <auto_hide_characters+0x44>)
 80232f6:	9304      	str	r3, [sp, #16]
        lv_anim_start(&a);
 80232f8:	a801      	add	r0, sp, #4
 80232fa:	f7dd fa77 	bl	80007ec <lv_anim_start>
}
 80232fe:	e7e8      	b.n	80232d2 <auto_hide_characters+0xe>
 8023300:	0802282b 	.word	0x0802282b
 8023304:	0800093d 	.word	0x0800093d
 8023308:	0802330d 	.word	0x0802330d

0802330c <pwd_char_hider_anim_ready>:
{
 802330c:	b508      	push	{r3, lr}
    pwd_char_hider(obj);
 802330e:	6800      	ldr	r0, [r0, #0]
 8023310:	f7ff ff9c 	bl	802324c <pwd_char_hider>
}
 8023314:	bd08      	pop	{r3, pc}

08023316 <lv_textarea_get_one_line>:
    return ta->one_line == 1U;
 8023316:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
}
 802331a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 802331e:	4770      	bx	lr

08023320 <lv_textarea_get_accepted_chars>:
}
 8023320:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8023322:	4770      	bx	lr

08023324 <lv_textarea_get_max_length>:
}
 8023324:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8023326:	4770      	bx	lr

08023328 <lv_textarea_clear_selection>:
{
 8023328:	b510      	push	{r4, lr}
 802332a:	4604      	mov	r4, r0
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 802332c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 802332e:	f7f2 fbca 	bl	8015ac6 <lv_label_get_text_selection_start>
 8023332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023336:	4298      	cmp	r0, r3
 8023338:	d00a      	beq.n	8023350 <lv_textarea_clear_selection+0x28>
        lv_label_set_text_sel_start(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 802333a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802333e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8023340:	f7f1 fd28 	bl	8014d94 <lv_label_set_text_sel_start>
        lv_label_set_text_sel_end(ta->label, LV_DRAW_LABEL_NO_TXT_SEL);
 8023344:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8023348:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 802334a:	f7f1 fd28 	bl	8014d9e <lv_label_set_text_sel_end>
}
 802334e:	bd10      	pop	{r4, pc}
       lv_label_get_text_selection_end(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL) {
 8023350:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8023352:	f7f2 fbba 	bl	8015aca <lv_label_get_text_selection_end>
    if(lv_label_get_text_selection_start(ta->label) != LV_DRAW_LABEL_NO_TXT_SEL ||
 8023356:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802335a:	4298      	cmp	r0, r3
 802335c:	d1ed      	bne.n	802333a <lv_textarea_clear_selection+0x12>
 802335e:	e7f6      	b.n	802334e <lv_textarea_clear_selection+0x26>

08023360 <lv_textarea_add_text>:
    LV_ASSERT_NULL(txt);
 8023360:	b179      	cbz	r1, 8023382 <lv_textarea_add_text+0x22>
{
 8023362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023364:	b083      	sub	sp, #12
 8023366:	4605      	mov	r5, r0
 8023368:	460c      	mov	r4, r1
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 802336a:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 802336e:	f013 0f04 	tst.w	r3, #4
 8023372:	d107      	bne.n	8023384 <lv_textarea_add_text+0x24>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 8023374:	4628      	mov	r0, r5
 8023376:	f7ff ffd3 	bl	8023320 <lv_textarea_get_accepted_chars>
 802337a:	b130      	cbz	r0, 802338a <lv_textarea_add_text+0x2a>
        uint32_t i = 0;
 802337c:	2300      	movs	r3, #0
 802337e:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 8023380:	e041      	b.n	8023406 <lv_textarea_add_text+0xa6>
    LV_ASSERT_NULL(txt);
 8023382:	e7fe      	b.n	8023382 <lv_textarea_add_text+0x22>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 8023384:	f7ff ff62 	bl	802324c <pwd_char_hider>
 8023388:	e7f4      	b.n	8023374 <lv_textarea_add_text+0x14>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802338a:	4628      	mov	r0, r5
 802338c:	f7ff ffca 	bl	8023324 <lv_textarea_get_max_length>
 8023390:	2800      	cmp	r0, #0
 8023392:	d1f3      	bne.n	802337c <lv_textarea_add_text+0x1c>
    lv_res_t res = insert_handler(obj, txt);
 8023394:	4621      	mov	r1, r4
 8023396:	4628      	mov	r0, r5
 8023398:	f000 f85e 	bl	8023458 <insert_handler>
    if(res != LV_RES_OK) return;
 802339c:	2801      	cmp	r0, #1
 802339e:	d136      	bne.n	802340e <lv_textarea_add_text+0xae>
    if(ta->placeholder_txt) {
 80233a0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80233a2:	b12b      	cbz	r3, 80233b0 <lv_textarea_add_text+0x50>
        const char * txt_act = lv_label_get_text(ta->label);
 80233a4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80233a6:	f7f1 fcff 	bl	8014da8 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 80233aa:	7803      	ldrb	r3, [r0, #0]
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	d030      	beq.n	8023412 <lv_textarea_add_text+0xb2>
    lv_label_ins_text(ta->label, ta->cursor.pos, txt);
 80233b0:	4622      	mov	r2, r4
 80233b2:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80233b4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80233b6:	f7f2 fd8f 	bl	8015ed8 <lv_label_ins_text>
    lv_textarea_clear_selection(obj);
 80233ba:	4628      	mov	r0, r5
 80233bc:	f7ff ffb4 	bl	8023328 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 80233c0:	f895 3060 	ldrb.w	r3, [r5, #96]	@ 0x60
 80233c4:	f013 0f04 	tst.w	r3, #4
 80233c8:	d127      	bne.n	802341a <lv_textarea_add_text+0xba>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + _lv_txt_get_encoded_length(txt));
 80233ca:	4628      	mov	r0, r5
 80233cc:	f7ff fc2a 	bl	8022c24 <lv_textarea_get_cursor_pos>
 80233d0:	4606      	mov	r6, r0
 80233d2:	4b1e      	ldr	r3, [pc, #120]	@ (802344c <lv_textarea_add_text+0xec>)
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	4620      	mov	r0, r4
 80233d8:	4798      	blx	r3
 80233da:	1831      	adds	r1, r6, r0
 80233dc:	4628      	mov	r0, r5
 80233de:	f7ff fd6f 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80233e2:	2200      	movs	r2, #0
 80233e4:	211c      	movs	r1, #28
 80233e6:	4628      	mov	r0, r5
 80233e8:	f7ed fc6e 	bl	8010cc8 <lv_event_send>
 80233ec:	e00f      	b.n	802340e <lv_textarea_add_text+0xae>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 80233ee:	4b18      	ldr	r3, [pc, #96]	@ (8023450 <lv_textarea_add_text+0xf0>)
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	a901      	add	r1, sp, #4
 80233f4:	4620      	mov	r0, r4
 80233f6:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 80233f8:	4b16      	ldr	r3, [pc, #88]	@ (8023454 <lv_textarea_add_text+0xf4>)
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	4798      	blx	r3
 80233fe:	4601      	mov	r1, r0
 8023400:	4628      	mov	r0, r5
 8023402:	f000 f849 	bl	8023498 <lv_textarea_add_char>
        while(txt[i] != '\0') {
 8023406:	9b01      	ldr	r3, [sp, #4]
 8023408:	5ce3      	ldrb	r3, [r4, r3]
 802340a:	2b00      	cmp	r3, #0
 802340c:	d1ef      	bne.n	80233ee <lv_textarea_add_text+0x8e>
}
 802340e:	b003      	add	sp, #12
 8023410:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 8023412:	4628      	mov	r0, r5
 8023414:	f7f6 fd47 	bl	8019ea6 <lv_obj_invalidate>
 8023418:	e7ca      	b.n	80233b0 <lv_textarea_add_text+0x50>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(txt) + 1;
 802341a:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 802341c:	4638      	mov	r0, r7
 802341e:	f7dc febd 	bl	800019c <strlen>
 8023422:	4606      	mov	r6, r0
 8023424:	4620      	mov	r0, r4
 8023426:	f7dc feb9 	bl	800019c <strlen>
 802342a:	1831      	adds	r1, r6, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 802342c:	3101      	adds	r1, #1
 802342e:	4638      	mov	r0, r7
 8023430:	f7f3 faac 	bl	801698c <lv_mem_realloc>
 8023434:	62e8      	str	r0, [r5, #44]	@ 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8023436:	b138      	cbz	r0, 8023448 <lv_textarea_add_text+0xe8>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, txt);
 8023438:	4622      	mov	r2, r4
 802343a:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 802343c:	f004 f994 	bl	8027768 <_lv_txt_ins>
        auto_hide_characters(obj);
 8023440:	4628      	mov	r0, r5
 8023442:	f7ff ff3f 	bl	80232c4 <auto_hide_characters>
 8023446:	e7c0      	b.n	80233ca <lv_textarea_add_text+0x6a>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8023448:	e7fe      	b.n	8023448 <lv_textarea_add_text+0xe8>
 802344a:	bf00      	nop
 802344c:	20000074 	.word	0x20000074
 8023450:	20000084 	.word	0x20000084
 8023454:	20000088 	.word	0x20000088

08023458 <insert_handler>:
{
 8023458:	b570      	push	{r4, r5, r6, lr}
 802345a:	4606      	mov	r6, r0
 802345c:	460c      	mov	r4, r1
    ta_insert_replace = NULL;
 802345e:	4d0d      	ldr	r5, [pc, #52]	@ (8023494 <insert_handler+0x3c>)
 8023460:	2300      	movs	r3, #0
 8023462:	602b      	str	r3, [r5, #0]
    lv_event_send(obj, LV_EVENT_INSERT, (char *)txt);
 8023464:	460a      	mov	r2, r1
 8023466:	211d      	movs	r1, #29
 8023468:	f7ed fc2e 	bl	8010cc8 <lv_event_send>
    if(ta_insert_replace && ta_insert_replace[0] == '\0')
 802346c:	682d      	ldr	r5, [r5, #0]
 802346e:	b10d      	cbz	r5, 8023474 <insert_handler+0x1c>
 8023470:	7828      	ldrb	r0, [r5, #0]
 8023472:	b130      	cbz	r0, 8023482 <insert_handler+0x2a>
    if(ta_insert_replace) {
 8023474:	b165      	cbz	r5, 8023490 <insert_handler+0x38>
        if(strcmp(ta_insert_replace, txt)) {
 8023476:	4621      	mov	r1, r4
 8023478:	4628      	mov	r0, r5
 802347a:	f7dc fe85 	bl	8000188 <strcmp>
 802347e:	b908      	cbnz	r0, 8023484 <insert_handler+0x2c>
    return LV_RES_OK;
 8023480:	2001      	movs	r0, #1
}
 8023482:	bd70      	pop	{r4, r5, r6, pc}
            lv_textarea_add_text(obj, ta_insert_replace);
 8023484:	4629      	mov	r1, r5
 8023486:	4630      	mov	r0, r6
 8023488:	f7ff ff6a 	bl	8023360 <lv_textarea_add_text>
            return LV_RES_INV;
 802348c:	2000      	movs	r0, #0
 802348e:	e7f8      	b.n	8023482 <insert_handler+0x2a>
    return LV_RES_OK;
 8023490:	2001      	movs	r0, #1
 8023492:	e7f6      	b.n	8023482 <insert_handler+0x2a>
 8023494:	200088f8 	.word	0x200088f8

08023498 <lv_textarea_add_char>:
{
 8023498:	b570      	push	{r4, r5, r6, lr}
 802349a:	b084      	sub	sp, #16
 802349c:	4604      	mov	r4, r0
 802349e:	9101      	str	r1, [sp, #4]
    if(ta->one_line && (c == '\n' || c == '\r')) {
 80234a0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80234a4:	f013 0f08 	tst.w	r3, #8
 80234a8:	d003      	beq.n	80234b2 <lv_textarea_add_char+0x1a>
 80234aa:	290a      	cmp	r1, #10
 80234ac:	d051      	beq.n	8023552 <lv_textarea_add_char+0xba>
 80234ae:	290d      	cmp	r1, #13
 80234b0:	d04f      	beq.n	8023552 <lv_textarea_add_char+0xba>
    u32_buf[0] = c;
 80234b2:	9b01      	ldr	r3, [sp, #4]
 80234b4:	9302      	str	r3, [sp, #8]
    u32_buf[1] = 0;
 80234b6:	2300      	movs	r3, #0
 80234b8:	9303      	str	r3, [sp, #12]
    lv_res_t res = insert_handler(obj, letter_buf);
 80234ba:	a902      	add	r1, sp, #8
 80234bc:	4620      	mov	r0, r4
 80234be:	f7ff ffcb 	bl	8023458 <insert_handler>
    if(res != LV_RES_OK) return;
 80234c2:	2801      	cmp	r0, #1
 80234c4:	d145      	bne.n	8023552 <lv_textarea_add_char+0xba>
    uint32_t c_uni = _lv_txt_encoded_next((const char *)&c, NULL);
 80234c6:	4b28      	ldr	r3, [pc, #160]	@ (8023568 <lv_textarea_add_char+0xd0>)
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	2100      	movs	r1, #0
 80234cc:	a801      	add	r0, sp, #4
 80234ce:	4798      	blx	r3
 80234d0:	4601      	mov	r1, r0
    if(char_is_accepted(obj, c_uni) == false) {
 80234d2:	4620      	mov	r0, r4
 80234d4:	f7ff fb78 	bl	8022bc8 <char_is_accepted>
 80234d8:	2800      	cmp	r0, #0
 80234da:	d03a      	beq.n	8023552 <lv_textarea_add_char+0xba>
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 80234dc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80234e0:	f013 0f04 	tst.w	r3, #4
 80234e4:	d137      	bne.n	8023556 <lv_textarea_add_char+0xbe>
    if(ta->placeholder_txt) {
 80234e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80234e8:	b123      	cbz	r3, 80234f4 <lv_textarea_add_char+0x5c>
        const char * txt = lv_label_get_text(ta->label);
 80234ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80234ec:	f7f1 fc5c 	bl	8014da8 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80234f0:	7803      	ldrb	r3, [r0, #0]
 80234f2:	b3a3      	cbz	r3, 802355e <lv_textarea_add_char+0xc6>
    lv_label_ins_text(ta->label, ta->cursor.pos, letter_buf); /*Insert the character*/
 80234f4:	aa02      	add	r2, sp, #8
 80234f6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80234f8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80234fa:	f7f2 fced 	bl	8015ed8 <lv_label_ins_text>
    lv_textarea_clear_selection(obj); /*Clear selection*/
 80234fe:	4620      	mov	r0, r4
 8023500:	f7ff ff12 	bl	8023328 <lv_textarea_clear_selection>
    if(ta->pwd_mode) {
 8023504:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8023508:	f013 0f04 	tst.w	r3, #4
 802350c:	d015      	beq.n	802353a <lv_textarea_add_char+0xa2>
        size_t realloc_size = strlen(ta->pwd_tmp) + strlen(letter_buf) + 1;
 802350e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023510:	4630      	mov	r0, r6
 8023512:	f7dc fe43 	bl	800019c <strlen>
 8023516:	4605      	mov	r5, r0
 8023518:	a802      	add	r0, sp, #8
 802351a:	f7dc fe3f 	bl	800019c <strlen>
 802351e:	1829      	adds	r1, r5, r0
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, realloc_size);
 8023520:	3101      	adds	r1, #1
 8023522:	4630      	mov	r0, r6
 8023524:	f7f3 fa32 	bl	801698c <lv_mem_realloc>
 8023528:	62e0      	str	r0, [r4, #44]	@ 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 802352a:	b1e0      	cbz	r0, 8023566 <lv_textarea_add_char+0xce>
        _lv_txt_ins(ta->pwd_tmp, ta->cursor.pos, (const char *)letter_buf);
 802352c:	aa02      	add	r2, sp, #8
 802352e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8023530:	f004 f91a 	bl	8027768 <_lv_txt_ins>
        auto_hide_characters(obj);
 8023534:	4620      	mov	r0, r4
 8023536:	f7ff fec5 	bl	80232c4 <auto_hide_characters>
    lv_textarea_set_cursor_pos(obj, lv_textarea_get_cursor_pos(obj) + 1);
 802353a:	4620      	mov	r0, r4
 802353c:	f7ff fb72 	bl	8022c24 <lv_textarea_get_cursor_pos>
 8023540:	1c41      	adds	r1, r0, #1
 8023542:	4620      	mov	r0, r4
 8023544:	f7ff fcbc 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8023548:	2200      	movs	r2, #0
 802354a:	211c      	movs	r1, #28
 802354c:	4620      	mov	r0, r4
 802354e:	f7ed fbbb 	bl	8010cc8 <lv_event_send>
}
 8023552:	b004      	add	sp, #16
 8023554:	bd70      	pop	{r4, r5, r6, pc}
    if(ta->pwd_mode) pwd_char_hider(obj); /*Make sure all the current text contains only '*'*/
 8023556:	4620      	mov	r0, r4
 8023558:	f7ff fe78 	bl	802324c <pwd_char_hider>
 802355c:	e7c3      	b.n	80234e6 <lv_textarea_add_char+0x4e>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 802355e:	4620      	mov	r0, r4
 8023560:	f7f6 fca1 	bl	8019ea6 <lv_obj_invalidate>
 8023564:	e7c6      	b.n	80234f4 <lv_textarea_add_char+0x5c>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8023566:	e7fe      	b.n	8023566 <lv_textarea_add_char+0xce>
 8023568:	20000084 	.word	0x20000084

0802356c <lv_textarea_del_char>:
    uint32_t cur_pos  = ta->cursor.pos;
 802356c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    if(cur_pos == 0) return;
 802356e:	b903      	cbnz	r3, 8023572 <lv_textarea_del_char+0x6>
 8023570:	4770      	bx	lr
{
 8023572:	b530      	push	{r4, r5, lr}
 8023574:	b083      	sub	sp, #12
 8023576:	4604      	mov	r4, r0
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8023578:	237f      	movs	r3, #127	@ 0x7f
 802357a:	f8ad 3004 	strh.w	r3, [sp, #4]
    lv_res_t res = insert_handler(obj, del_buf);
 802357e:	a901      	add	r1, sp, #4
 8023580:	f7ff ff6a 	bl	8023458 <insert_handler>
    if(res != LV_RES_OK) return;
 8023584:	2801      	cmp	r0, #1
 8023586:	d001      	beq.n	802358c <lv_textarea_del_char+0x20>
}
 8023588:	b003      	add	sp, #12
 802358a:	bd30      	pop	{r4, r5, pc}
    char * label_txt = lv_label_get_text(ta->label);
 802358c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 802358e:	f7f1 fc0b 	bl	8014da8 <lv_label_get_text>
 8023592:	4605      	mov	r5, r0
    _lv_txt_cut(label_txt, ta->cursor.pos - 1, 1);
 8023594:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8023596:	2201      	movs	r2, #1
 8023598:	3901      	subs	r1, #1
 802359a:	f004 f911 	bl	80277c0 <_lv_txt_cut>
    lv_label_set_text(ta->label, label_txt);
 802359e:	4629      	mov	r1, r5
 80235a0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80235a2:	f7f2 f8a1 	bl	80156e8 <lv_label_set_text>
    lv_textarea_clear_selection(obj);
 80235a6:	4620      	mov	r0, r4
 80235a8:	f7ff febe 	bl	8023328 <lv_textarea_clear_selection>
    if(ta->placeholder_txt) {
 80235ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80235ae:	b123      	cbz	r3, 80235ba <lv_textarea_del_char+0x4e>
        const char * txt = lv_label_get_text(ta->label);
 80235b0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80235b2:	f7f1 fbf9 	bl	8014da8 <lv_label_get_text>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80235b6:	7803      	ldrb	r3, [r0, #0]
 80235b8:	b1fb      	cbz	r3, 80235fa <lv_textarea_del_char+0x8e>
    if(ta->pwd_mode) {
 80235ba:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80235be:	f013 0f04 	tst.w	r3, #4
 80235c2:	d00f      	beq.n	80235e4 <lv_textarea_del_char+0x78>
        _lv_txt_cut(ta->pwd_tmp, ta->cursor.pos - 1, 1);
 80235c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80235c6:	2201      	movs	r2, #1
 80235c8:	3901      	subs	r1, #1
 80235ca:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80235cc:	f004 f8f8 	bl	80277c0 <_lv_txt_cut>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(ta->pwd_tmp) + 1);
 80235d0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80235d2:	4628      	mov	r0, r5
 80235d4:	f7dc fde2 	bl	800019c <strlen>
 80235d8:	1c41      	adds	r1, r0, #1
 80235da:	4628      	mov	r0, r5
 80235dc:	f7f3 f9d6 	bl	801698c <lv_mem_realloc>
 80235e0:	62e0      	str	r0, [r4, #44]	@ 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80235e2:	b170      	cbz	r0, 8023602 <lv_textarea_del_char+0x96>
    lv_textarea_set_cursor_pos(obj, ta->cursor.pos - 1);
 80235e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80235e6:	3901      	subs	r1, #1
 80235e8:	4620      	mov	r0, r4
 80235ea:	f7ff fc69 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80235ee:	2200      	movs	r2, #0
 80235f0:	211c      	movs	r1, #28
 80235f2:	4620      	mov	r0, r4
 80235f4:	f7ed fb68 	bl	8010cc8 <lv_event_send>
 80235f8:	e7c6      	b.n	8023588 <lv_textarea_del_char+0x1c>
        if(txt[0] == '\0') lv_obj_invalidate(obj);
 80235fa:	4620      	mov	r0, r4
 80235fc:	f7f6 fc53 	bl	8019ea6 <lv_obj_invalidate>
 8023600:	e7db      	b.n	80235ba <lv_textarea_del_char+0x4e>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 8023602:	e7fe      	b.n	8023602 <lv_textarea_del_char+0x96>

08023604 <lv_textarea_del_char_forward>:
{
 8023604:	b538      	push	{r3, r4, r5, lr}
 8023606:	4604      	mov	r4, r0
    uint32_t cp = lv_textarea_get_cursor_pos(obj);
 8023608:	f7ff fb0c 	bl	8022c24 <lv_textarea_get_cursor_pos>
 802360c:	4605      	mov	r5, r0
    lv_textarea_set_cursor_pos(obj, cp + 1);
 802360e:	1c41      	adds	r1, r0, #1
 8023610:	4620      	mov	r0, r4
 8023612:	f7ff fc55 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8023616:	4620      	mov	r0, r4
 8023618:	f7ff fb04 	bl	8022c24 <lv_textarea_get_cursor_pos>
 802361c:	42a8      	cmp	r0, r5
 802361e:	d100      	bne.n	8023622 <lv_textarea_del_char_forward+0x1e>
}
 8023620:	bd38      	pop	{r3, r4, r5, pc}
    if(cp != lv_textarea_get_cursor_pos(obj)) lv_textarea_del_char(obj);
 8023622:	4620      	mov	r0, r4
 8023624:	f7ff ffa2 	bl	802356c <lv_textarea_del_char>
}
 8023628:	e7fa      	b.n	8023620 <lv_textarea_del_char_forward+0x1c>
	...

0802362c <lv_textarea_set_text>:
    LV_ASSERT_NULL(txt);
 802362c:	b1e9      	cbz	r1, 802366a <lv_textarea_set_text+0x3e>
{
 802362e:	b570      	push	{r4, r5, r6, lr}
 8023630:	b082      	sub	sp, #8
 8023632:	4604      	mov	r4, r0
 8023634:	460d      	mov	r5, r1
    lv_textarea_clear_selection(obj);
 8023636:	f7ff fe77 	bl	8023328 <lv_textarea_clear_selection>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802363a:	4620      	mov	r0, r4
 802363c:	f7ff fe70 	bl	8023320 <lv_textarea_get_accepted_chars>
 8023640:	b1a0      	cbz	r0, 802366c <lv_textarea_set_text+0x40>
        lv_label_set_text(ta->label, "");
 8023642:	492e      	ldr	r1, [pc, #184]	@ (80236fc <lv_textarea_set_text+0xd0>)
 8023644:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8023646:	f7f2 f84f 	bl	80156e8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802364a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 802364e:	4620      	mov	r0, r4
 8023650:	f7ff fc36 	bl	8022ec0 <lv_textarea_set_cursor_pos>
        if(ta->pwd_mode) {
 8023654:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8023658:	f013 0f04 	tst.w	r3, #4
 802365c:	d002      	beq.n	8023664 <lv_textarea_set_text+0x38>
            ta->pwd_tmp[0] = '\0'; /*Clear the password too*/
 802365e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8023660:	2200      	movs	r2, #0
 8023662:	701a      	strb	r2, [r3, #0]
        uint32_t i = 0;
 8023664:	2300      	movs	r3, #0
 8023666:	9301      	str	r3, [sp, #4]
        while(txt[i] != '\0') {
 8023668:	e01b      	b.n	80236a2 <lv_textarea_set_text+0x76>
    LV_ASSERT_NULL(txt);
 802366a:	e7fe      	b.n	802366a <lv_textarea_set_text+0x3e>
    if(lv_textarea_get_accepted_chars(obj) || lv_textarea_get_max_length(obj)) {
 802366c:	4620      	mov	r0, r4
 802366e:	f7ff fe59 	bl	8023324 <lv_textarea_get_max_length>
 8023672:	2800      	cmp	r0, #0
 8023674:	d1e5      	bne.n	8023642 <lv_textarea_set_text+0x16>
        lv_label_set_text(ta->label, txt);
 8023676:	4629      	mov	r1, r5
 8023678:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 802367a:	f7f2 f835 	bl	80156e8 <lv_label_set_text>
        lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 802367e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8023682:	4620      	mov	r0, r4
 8023684:	f7ff fc1c 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8023688:	e00f      	b.n	80236aa <lv_textarea_set_text+0x7e>
            uint32_t c = _lv_txt_encoded_next(txt, &i);
 802368a:	4b1d      	ldr	r3, [pc, #116]	@ (8023700 <lv_textarea_set_text+0xd4>)
 802368c:	681b      	ldr	r3, [r3, #0]
 802368e:	a901      	add	r1, sp, #4
 8023690:	4628      	mov	r0, r5
 8023692:	4798      	blx	r3
            lv_textarea_add_char(obj, _lv_txt_unicode_to_encoded(c));
 8023694:	4b1b      	ldr	r3, [pc, #108]	@ (8023704 <lv_textarea_set_text+0xd8>)
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	4798      	blx	r3
 802369a:	4601      	mov	r1, r0
 802369c:	4620      	mov	r0, r4
 802369e:	f7ff fefb 	bl	8023498 <lv_textarea_add_char>
        while(txt[i] != '\0') {
 80236a2:	9b01      	ldr	r3, [sp, #4]
 80236a4:	5ceb      	ldrb	r3, [r5, r3]
 80236a6:	2b00      	cmp	r3, #0
 80236a8:	d1ef      	bne.n	802368a <lv_textarea_set_text+0x5e>
    if(ta->placeholder_txt) {
 80236aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80236ac:	b123      	cbz	r3, 80236b8 <lv_textarea_set_text+0x8c>
        const char * txt_act = lv_label_get_text(ta->label);
 80236ae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80236b0:	f7f1 fb7a 	bl	8014da8 <lv_label_get_text>
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 80236b4:	7803      	ldrb	r3, [r0, #0]
 80236b6:	b1db      	cbz	r3, 80236f0 <lv_textarea_set_text+0xc4>
    if(ta->pwd_mode) {
 80236b8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80236bc:	f013 0f04 	tst.w	r3, #4
 80236c0:	d00f      	beq.n	80236e2 <lv_textarea_set_text+0xb6>
        ta->pwd_tmp = lv_mem_realloc(ta->pwd_tmp, strlen(txt) + 1);
 80236c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80236c4:	4628      	mov	r0, r5
 80236c6:	f7dc fd69 	bl	800019c <strlen>
 80236ca:	1c41      	adds	r1, r0, #1
 80236cc:	4630      	mov	r0, r6
 80236ce:	f7f3 f95d 	bl	801698c <lv_mem_realloc>
 80236d2:	62e0      	str	r0, [r4, #44]	@ 0x2c
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80236d4:	b180      	cbz	r0, 80236f8 <lv_textarea_set_text+0xcc>
        strcpy(ta->pwd_tmp, txt);
 80236d6:	4629      	mov	r1, r5
 80236d8:	f005 ff7e 	bl	80295d8 <strcpy>
        auto_hide_characters(obj);
 80236dc:	4620      	mov	r0, r4
 80236de:	f7ff fdf1 	bl	80232c4 <auto_hide_characters>
    lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 80236e2:	2200      	movs	r2, #0
 80236e4:	211c      	movs	r1, #28
 80236e6:	4620      	mov	r0, r4
 80236e8:	f7ed faee 	bl	8010cc8 <lv_event_send>
}
 80236ec:	b002      	add	sp, #8
 80236ee:	bd70      	pop	{r4, r5, r6, pc}
        if(txt_act[0] == '\0') lv_obj_invalidate(obj);
 80236f0:	4620      	mov	r0, r4
 80236f2:	f7f6 fbd8 	bl	8019ea6 <lv_obj_invalidate>
 80236f6:	e7df      	b.n	80236b8 <lv_textarea_set_text+0x8c>
        LV_ASSERT_MALLOC(ta->pwd_tmp);
 80236f8:	e7fe      	b.n	80236f8 <lv_textarea_set_text+0xcc>
 80236fa:	bf00      	nop
 80236fc:	08029930 	.word	0x08029930
 8023700:	20000084 	.word	0x20000084
 8023704:	20000088 	.word	0x20000088

08023708 <lv_textarea_cursor_right>:
{
 8023708:	b510      	push	{r4, lr}
 802370a:	4604      	mov	r4, r0
    uint32_t cp = lv_textarea_get_cursor_pos(obj);
 802370c:	f7ff fa8a 	bl	8022c24 <lv_textarea_get_cursor_pos>
    lv_textarea_set_cursor_pos(obj, cp);
 8023710:	1c41      	adds	r1, r0, #1
 8023712:	4620      	mov	r0, r4
 8023714:	f7ff fbd4 	bl	8022ec0 <lv_textarea_set_cursor_pos>
}
 8023718:	bd10      	pop	{r4, pc}

0802371a <lv_textarea_cursor_left>:
{
 802371a:	b510      	push	{r4, lr}
 802371c:	4604      	mov	r4, r0
    uint32_t cp = lv_textarea_get_cursor_pos(obj);
 802371e:	f7ff fa81 	bl	8022c24 <lv_textarea_get_cursor_pos>
    if(cp > 0) {
 8023722:	b900      	cbnz	r0, 8023726 <lv_textarea_cursor_left+0xc>
}
 8023724:	bd10      	pop	{r4, pc}
        lv_textarea_set_cursor_pos(obj, cp);
 8023726:	1e41      	subs	r1, r0, #1
 8023728:	4620      	mov	r0, r4
 802372a:	f7ff fbc9 	bl	8022ec0 <lv_textarea_set_cursor_pos>
}
 802372e:	e7f9      	b.n	8023724 <lv_textarea_cursor_left+0xa>

08023730 <lv_textarea_cursor_down>:
{
 8023730:	b570      	push	{r4, r5, r6, lr}
 8023732:	b082      	sub	sp, #8
 8023734:	4605      	mov	r5, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 8023736:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8023738:	f7ff fa74 	bl	8022c24 <lv_textarea_get_cursor_pos>
 802373c:	4601      	mov	r1, r0
 802373e:	aa01      	add	r2, sp, #4
 8023740:	4620      	mov	r0, r4
 8023742:	f7f1 fb39 	bl	8014db8 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 8023746:	2259      	movs	r2, #89	@ 0x59
 8023748:	2100      	movs	r1, #0
 802374a:	4628      	mov	r0, r5
 802374c:	f7f8 ffd2 	bl	801c6f4 <lv_obj_get_style_prop>
 8023750:	4606      	mov	r6, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 8023752:	2257      	movs	r2, #87	@ 0x57
 8023754:	2100      	movs	r1, #0
 8023756:	4628      	mov	r0, r5
 8023758:	f7f8 ffcc 	bl	801c6f4 <lv_obj_get_style_prop>
 802375c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
    pos.y += font_h + line_space + 1;
 8023760:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8023764:	4434      	add	r4, r6
 8023766:	fa13 f484 	uxtah	r4, r3, r4
 802376a:	3401      	adds	r4, #1
 802376c:	b224      	sxth	r4, r4
 802376e:	f8ad 4006 	strh.w	r4, [sp, #6]
    pos.x = ta->cursor.valid_x;
 8023772:	f9b5 3040 	ldrsh.w	r3, [r5, #64]	@ 0x40
 8023776:	f8ad 3004 	strh.w	r3, [sp, #4]
    if(pos.y < lv_obj_get_height(ta->label)) {
 802377a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 802377c:	f7f5 ffaf 	bl	80196de <lv_obj_get_height>
 8023780:	4284      	cmp	r4, r0
 8023782:	db01      	blt.n	8023788 <lv_textarea_cursor_down+0x58>
}
 8023784:	b002      	add	sp, #8
 8023786:	bd70      	pop	{r4, r5, r6, pc}
        uint32_t new_cur_pos = lv_label_get_letter_on(ta->label, &pos);
 8023788:	a901      	add	r1, sp, #4
 802378a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 802378c:	f7f1 fc1c 	bl	8014fc8 <lv_label_get_letter_on>
 8023790:	4601      	mov	r1, r0
        lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 8023792:	f9b5 4040 	ldrsh.w	r4, [r5, #64]	@ 0x40
        lv_textarea_set_cursor_pos(obj, new_cur_pos);
 8023796:	4628      	mov	r0, r5
 8023798:	f7ff fb92 	bl	8022ec0 <lv_textarea_set_cursor_pos>
        ta->cursor.valid_x = cur_valid_x_tmp;
 802379c:	f8a5 4040 	strh.w	r4, [r5, #64]	@ 0x40
}
 80237a0:	e7f0      	b.n	8023784 <lv_textarea_cursor_down+0x54>

080237a2 <lv_textarea_cursor_up>:
{
 80237a2:	b530      	push	{r4, r5, lr}
 80237a4:	b083      	sub	sp, #12
 80237a6:	4604      	mov	r4, r0
    lv_label_get_letter_pos(ta->label, lv_textarea_get_cursor_pos(obj), &pos);
 80237a8:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80237aa:	f7ff fa3b 	bl	8022c24 <lv_textarea_get_cursor_pos>
 80237ae:	4601      	mov	r1, r0
 80237b0:	aa01      	add	r2, sp, #4
 80237b2:	4628      	mov	r0, r5
 80237b4:	f7f1 fb00 	bl	8014db8 <lv_label_get_letter_pos>
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_LINE_SPACE);
 80237b8:	2259      	movs	r2, #89	@ 0x59
 80237ba:	2100      	movs	r1, #0
 80237bc:	4620      	mov	r0, r4
 80237be:	f7f8 ff99 	bl	801c6f4 <lv_obj_get_style_prop>
 80237c2:	4605      	mov	r5, r0
    lv_style_value_t v = lv_obj_get_style_prop(obj, part, LV_STYLE_TEXT_FONT);
 80237c4:	2257      	movs	r2, #87	@ 0x57
 80237c6:	2100      	movs	r1, #0
 80237c8:	4620      	mov	r0, r4
 80237ca:	f7f8 ff93 	bl	801c6f4 <lv_obj_get_style_prop>
 80237ce:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
    pos.y -= font_h + line_space - 1;
 80237d2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80237d6:	4428      	add	r0, r5
 80237d8:	b280      	uxth	r0, r0
 80237da:	1a1b      	subs	r3, r3, r0
 80237dc:	3301      	adds	r3, #1
 80237de:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos.x = ta->cursor.valid_x;
 80237e2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 80237e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint32_t new_cur_pos       = lv_label_get_letter_on(ta->label, &pos);
 80237ea:	a901      	add	r1, sp, #4
 80237ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80237ee:	f7f1 fbeb 	bl	8014fc8 <lv_label_get_letter_on>
 80237f2:	4601      	mov	r1, r0
    lv_coord_t cur_valid_x_tmp = ta->cursor.valid_x; /*Cursor position set overwrites the valid position*/
 80237f4:	f9b4 5040 	ldrsh.w	r5, [r4, #64]	@ 0x40
    lv_textarea_set_cursor_pos(obj, new_cur_pos);
 80237f8:	4620      	mov	r0, r4
 80237fa:	f7ff fb61 	bl	8022ec0 <lv_textarea_set_cursor_pos>
    ta->cursor.valid_x = cur_valid_x_tmp;
 80237fe:	f8a4 5040 	strh.w	r5, [r4, #64]	@ 0x40
}
 8023802:	b003      	add	sp, #12
 8023804:	bd30      	pop	{r4, r5, pc}
	...

08023808 <lv_textarea_event>:
{
 8023808:	b570      	push	{r4, r5, r6, lr}
 802380a:	460c      	mov	r4, r1
    res = lv_obj_event_base(MY_CLASS, e);
 802380c:	484e      	ldr	r0, [pc, #312]	@ (8023948 <lv_textarea_event+0x140>)
 802380e:	f7ed f9b1 	bl	8010b74 <lv_obj_event_base>
    if(res != LV_RES_OK) return;
 8023812:	2801      	cmp	r0, #1
 8023814:	d000      	beq.n	8023818 <lv_textarea_event+0x10>
}
 8023816:	bd70      	pop	{r4, r5, r6, pc}
    lv_event_code_t code = lv_event_get_code(e);
 8023818:	4620      	mov	r0, r4
 802381a:	f7ed fa83 	bl	8010d24 <lv_event_get_code>
 802381e:	4605      	mov	r5, r0
    lv_obj_t * obj = lv_event_get_target(e);
 8023820:	4620      	mov	r0, r4
 8023822:	f7ed fa7b 	bl	8010d1c <lv_event_get_target>
 8023826:	4606      	mov	r6, r0
    if(code == LV_EVENT_FOCUSED) {
 8023828:	1e6b      	subs	r3, r5, #1
 802382a:	2b17      	cmp	r3, #23
 802382c:	d8f3      	bhi.n	8023816 <lv_textarea_event+0xe>
 802382e:	a201      	add	r2, pc, #4	@ (adr r2, 8023834 <lv_textarea_event+0x2c>)
 8023830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023834:	08023931 	.word	0x08023931
 8023838:	08023931 	.word	0x08023931
 802383c:	08023931 	.word	0x08023931
 8023840:	08023817 	.word	0x08023817
 8023844:	08023817 	.word	0x08023817
 8023848:	08023817 	.word	0x08023817
 802384c:	08023817 	.word	0x08023817
 8023850:	08023931 	.word	0x08023931
 8023854:	08023817 	.word	0x08023817
 8023858:	08023817 	.word	0x08023817
 802385c:	08023817 	.word	0x08023817
 8023860:	08023817 	.word	0x08023817
 8023864:	0802389b 	.word	0x0802389b
 8023868:	08023895 	.word	0x08023895
 802386c:	08023817 	.word	0x08023817
 8023870:	08023817 	.word	0x08023817
 8023874:	08023817 	.word	0x08023817
 8023878:	08023817 	.word	0x08023817
 802387c:	08023817 	.word	0x08023817
 8023880:	08023817 	.word	0x08023817
 8023884:	08023939 	.word	0x08023939
 8023888:	08023817 	.word	0x08023817
 802388c:	08023817 	.word	0x08023817
 8023890:	08023941 	.word	0x08023941
        start_cursor_blink(obj);
 8023894:	f7ff f808 	bl	80228a8 <start_cursor_blink>
 8023898:	e7bd      	b.n	8023816 <lv_textarea_event+0xe>
        uint32_t c = *((uint32_t *)lv_event_get_param(e)); /*uint32_t because can be UTF-8*/
 802389a:	4620      	mov	r0, r4
 802389c:	f7ed fa46 	bl	8010d2c <lv_event_get_param>
 80238a0:	6804      	ldr	r4, [r0, #0]
        if(c == LV_KEY_RIGHT)
 80238a2:	2c14      	cmp	r4, #20
 80238a4:	d810      	bhi.n	80238c8 <lv_textarea_event+0xc0>
 80238a6:	2c02      	cmp	r4, #2
 80238a8:	d337      	bcc.n	802391a <lv_textarea_event+0x112>
 80238aa:	1ea3      	subs	r3, r4, #2
 80238ac:	2b12      	cmp	r3, #18
 80238ae:	d834      	bhi.n	802391a <lv_textarea_event+0x112>
 80238b0:	e8df f003 	tbb	[pc, r3]
 80238b4:	33332924 	.word	0x33332924
 80238b8:	33203333 	.word	0x33203333
 80238bc:	3333332f 	.word	0x3333332f
 80238c0:	18333333 	.word	0x18333333
 80238c4:	101c      	.short	0x101c
 80238c6:	14          	.byte	0x14
 80238c7:	00          	.byte	0x00
 80238c8:	2c7f      	cmp	r4, #127	@ 0x7f
 80238ca:	d126      	bne.n	802391a <lv_textarea_event+0x112>
            lv_textarea_del_char_forward(obj);
 80238cc:	4630      	mov	r0, r6
 80238ce:	f7ff fe99 	bl	8023604 <lv_textarea_del_char_forward>
 80238d2:	e7a0      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_cursor_right(obj);
 80238d4:	4630      	mov	r0, r6
 80238d6:	f7ff ff17 	bl	8023708 <lv_textarea_cursor_right>
 80238da:	e79c      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_cursor_left(obj);
 80238dc:	4630      	mov	r0, r6
 80238de:	f7ff ff1c 	bl	802371a <lv_textarea_cursor_left>
 80238e2:	e798      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_cursor_up(obj);
 80238e4:	4630      	mov	r0, r6
 80238e6:	f7ff ff5c 	bl	80237a2 <lv_textarea_cursor_up>
 80238ea:	e794      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_cursor_down(obj);
 80238ec:	4630      	mov	r0, r6
 80238ee:	f7ff ff1f 	bl	8023730 <lv_textarea_cursor_down>
 80238f2:	e790      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_del_char(obj);
 80238f4:	4630      	mov	r0, r6
 80238f6:	f7ff fe39 	bl	802356c <lv_textarea_del_char>
 80238fa:	e78c      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_set_cursor_pos(obj, 0);
 80238fc:	2100      	movs	r1, #0
 80238fe:	4630      	mov	r0, r6
 8023900:	f7ff fade 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8023904:	e787      	b.n	8023816 <lv_textarea_event+0xe>
            lv_textarea_set_cursor_pos(obj, LV_TEXTAREA_CURSOR_LAST);
 8023906:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 802390a:	4630      	mov	r0, r6
 802390c:	f7ff fad8 	bl	8022ec0 <lv_textarea_set_cursor_pos>
 8023910:	e781      	b.n	8023816 <lv_textarea_event+0xe>
        else if(c == LV_KEY_ENTER && lv_textarea_get_one_line(obj))
 8023912:	4630      	mov	r0, r6
 8023914:	f7ff fcff 	bl	8023316 <lv_textarea_get_one_line>
 8023918:	b920      	cbnz	r0, 8023924 <lv_textarea_event+0x11c>
            lv_textarea_add_char(obj, c);
 802391a:	4621      	mov	r1, r4
 802391c:	4630      	mov	r0, r6
 802391e:	f7ff fdbb 	bl	8023498 <lv_textarea_add_char>
 8023922:	e778      	b.n	8023816 <lv_textarea_event+0xe>
            lv_event_send(obj, LV_EVENT_READY, NULL);
 8023924:	2200      	movs	r2, #0
 8023926:	211f      	movs	r1, #31
 8023928:	4630      	mov	r0, r6
 802392a:	f7ed f9cd 	bl	8010cc8 <lv_event_send>
 802392e:	e772      	b.n	8023816 <lv_textarea_event+0xe>
        update_cursor_position_on_click(e);
 8023930:	4620      	mov	r0, r4
 8023932:	f7ff fb4b 	bl	8022fcc <update_cursor_position_on_click>
 8023936:	e76e      	b.n	8023816 <lv_textarea_event+0xe>
        draw_placeholder(e);
 8023938:	4620      	mov	r0, r4
 802393a:	f7fe ffe7 	bl	802290c <draw_placeholder>
 802393e:	e76a      	b.n	8023816 <lv_textarea_event+0xe>
        draw_cursor(e);
 8023940:	4620      	mov	r0, r4
 8023942:	f7ff f83f 	bl	80229c4 <draw_cursor>
 8023946:	e766      	b.n	8023816 <lv_textarea_event+0xe>
 8023948:	0802dfd0 	.word	0x0802dfd0

0802394c <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj)
{
 802394c:	b538      	push	{r3, r4, r5, lr}
 802394e:	4604      	mov	r4, r0
 8023950:	460d      	mov	r5, r1
    if(th->parent) apply_theme(th->parent, obj);
 8023952:	6840      	ldr	r0, [r0, #4]
 8023954:	b108      	cbz	r0, 802395a <apply_theme+0xe>
 8023956:	f7ff fff9 	bl	802394c <apply_theme>
    if(th->apply_cb) th->apply_cb(th, obj);
 802395a:	6823      	ldr	r3, [r4, #0]
 802395c:	b113      	cbz	r3, 8023964 <apply_theme+0x18>
 802395e:	4629      	mov	r1, r5
 8023960:	4620      	mov	r0, r4
 8023962:	4798      	blx	r3
}
 8023964:	bd38      	pop	{r3, r4, r5, pc}

08023966 <lv_theme_get_from_obj>:
{
 8023966:	b508      	push	{r3, lr}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8023968:	b120      	cbz	r0, 8023974 <lv_theme_get_from_obj+0xe>
 802396a:	f7f9 fc0f 	bl	801d18c <lv_obj_get_disp>
    return lv_disp_get_theme(disp);
 802396e:	f7e3 fe81 	bl	8007674 <lv_disp_get_theme>
}
 8023972:	bd08      	pop	{r3, pc}
    lv_disp_t * disp = obj ? lv_obj_get_disp(obj) : lv_disp_get_default();
 8023974:	f7ef fc82 	bl	801327c <lv_disp_get_default>
 8023978:	e7f9      	b.n	802396e <lv_theme_get_from_obj+0x8>
	...

0802397c <lv_theme_apply>:
{
 802397c:	b538      	push	{r3, r4, r5, lr}
 802397e:	4604      	mov	r4, r0
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 8023980:	f7ff fff1 	bl	8023966 <lv_theme_get_from_obj>
    if(th == NULL) return;
 8023984:	b148      	cbz	r0, 802399a <lv_theme_apply+0x1e>
 8023986:	4605      	mov	r5, r0
 * Remove all styles from an object
 * @param obj       pointer to an object
 */
static inline void lv_obj_remove_style_all(struct _lv_obj_t * obj)
{
    lv_obj_remove_style(obj, NULL, LV_PART_ANY | LV_STATE_ANY);
 8023988:	4a04      	ldr	r2, [pc, #16]	@ (802399c <lv_theme_apply+0x20>)
 802398a:	2100      	movs	r1, #0
 802398c:	4620      	mov	r0, r4
 802398e:	f7f9 fa21 	bl	801cdd4 <lv_obj_remove_style>
    apply_theme(th, obj);    /*Apply the theme including the base theme(s)*/
 8023992:	4621      	mov	r1, r4
 8023994:	4628      	mov	r0, r5
 8023996:	f7ff ffd9 	bl	802394c <apply_theme>
}
 802399a:	bd38      	pop	{r3, r4, r5, pc}
 802399c:	000fffff 	.word	0x000fffff

080239a0 <lv_theme_get_color_primary>:
{
 80239a0:	b508      	push	{r3, lr}
    lv_theme_t * th = lv_theme_get_from_obj(obj);
 80239a2:	f7ff ffe0 	bl	8023966 <lv_theme_get_from_obj>
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80239a6:	b108      	cbz	r0, 80239ac <lv_theme_get_color_primary+0xc>
 80239a8:	8a00      	ldrh	r0, [r0, #16]
}
 80239aa:	bd08      	pop	{r3, pc}
    return th ? th->color_primary : lv_palette_main(LV_PALETTE_BLUE_GREY);
 80239ac:	2011      	movs	r0, #17
 80239ae:	f7e2 ffe3 	bl	8006978 <lv_palette_main>
 80239b2:	e7fa      	b.n	80239aa <lv_theme_get_color_primary+0xa>

080239b4 <lv_color_mix>:
{
    lv_color_t ret;

#if LV_COLOR_DEPTH == 16 && LV_COLOR_MIX_ROUND_OFS == 0
#if LV_COLOR_16_SWAP == 1
    c1.full = c1.full << 8 | c1.full >> 8;
 80239b4:	b283      	uxth	r3, r0
 80239b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80239ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c2.full = c2.full << 8 | c2.full >> 8;
 80239be:	b28b      	uxth	r3, r1
 80239c0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80239c4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
#endif
    /*Source: https://stackoverflow.com/a/50012418/1999969*/
    mix = (uint32_t)((uint32_t)mix + 4) >> 3;
 80239c8:	3204      	adds	r2, #4
    uint32_t bg = (uint32_t)((uint32_t)c2.full | ((uint32_t)c2.full << 16)) &
 80239ca:	040b      	lsls	r3, r1, #16
 80239cc:	fa13 f181 	uxtah	r1, r3, r1
 80239d0:	4b0a      	ldr	r3, [pc, #40]	@ (80239fc <lv_color_mix+0x48>)
 80239d2:	4019      	ands	r1, r3
                  0x7E0F81F; /*0b00000111111000001111100000011111*/
    uint32_t fg = (uint32_t)((uint32_t)c1.full | ((uint32_t)c1.full << 16)) & 0x7E0F81F;
 80239d4:	ea4f 4c00 	mov.w	ip, r0, lsl #16
 80239d8:	fa1c f080 	uxtah	r0, ip, r0
 80239dc:	4018      	ands	r0, r3
    uint32_t result = ((((fg - bg) * mix) >> 5) + bg) & 0x7E0F81F;
 80239de:	1a40      	subs	r0, r0, r1
 80239e0:	08d2      	lsrs	r2, r2, #3
 80239e2:	fb00 f202 	mul.w	r2, r0, r2
 80239e6:	eb01 1152 	add.w	r1, r1, r2, lsr #5
 80239ea:	4019      	ands	r1, r3
    ret.full = (uint16_t)((result >> 16) | result);
 80239ec:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
 80239f0:	b288      	uxth	r0, r1
#if LV_COLOR_16_SWAP == 1
    ret.full = ret.full << 8 | ret.full >> 8;
 80239f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
}
 80239f6:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80239fa:	4770      	bx	lr
 80239fc:	07e0f81f 	.word	0x07e0f81f

08023a00 <theme_apply>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
}


static void theme_apply(lv_theme_t * th, lv_obj_t * obj)
{
 8023a00:	b570      	push	{r4, r5, r6, lr}
 8023a02:	460c      	mov	r4, r1
    LV_UNUSED(th);

    if(lv_obj_get_parent(obj) == NULL) {
 8023a04:	4608      	mov	r0, r1
 8023a06:	f7f9 fbb5 	bl	801d174 <lv_obj_get_parent>
 8023a0a:	b178      	cbz	r0, 8023a2c <theme_apply+0x2c>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
        return;
    }

    if(lv_obj_check_type(obj, &lv_obj_class)) {
 8023a0c:	49b1      	ldr	r1, [pc, #708]	@ (8023cd4 <theme_apply+0x2d4>)
 8023a0e:	4620      	mov	r0, r4
 8023a10:	f7f4 ffde 	bl	80189d0 <lv_obj_check_type>
 8023a14:	2800      	cmp	r0, #0
 8023a16:	f000 8097 	beq.w	8023b48 <theme_apply+0x148>
#if LV_USE_TABVIEW
        lv_obj_t * parent = lv_obj_get_parent(obj);
 8023a1a:	4620      	mov	r0, r4
 8023a1c:	f7f9 fbaa 	bl	801d174 <lv_obj_get_parent>
 8023a20:	4605      	mov	r5, r0
        /*Tabview content area*/
        if(lv_obj_check_type(parent, &lv_tabview_class)) {
 8023a22:	49ad      	ldr	r1, [pc, #692]	@ (8023cd8 <theme_apply+0x2d8>)
 8023a24:	f7f4 ffd4 	bl	80189d0 <lv_obj_check_type>
 8023a28:	b1a0      	cbz	r0, 8023a54 <theme_apply+0x54>
#if LV_USE_LED
    else if(lv_obj_check_type(obj, &lv_led_class)) {
        lv_obj_add_style(obj, &styles->led, 0);
    }
#endif
}
 8023a2a:	bd70      	pop	{r4, r5, r6, pc}
        lv_obj_add_style(obj, &styles->scr, 0);
 8023a2c:	4dab      	ldr	r5, [pc, #684]	@ (8023cdc <theme_apply+0x2dc>)
 8023a2e:	2200      	movs	r2, #0
 8023a30:	6829      	ldr	r1, [r5, #0]
 8023a32:	4620      	mov	r0, r4
 8023a34:	f7f9 f82a 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8023a38:	6829      	ldr	r1, [r5, #0]
 8023a3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023a3e:	3108      	adds	r1, #8
 8023a40:	4620      	mov	r0, r4
 8023a42:	f7f9 f823 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8023a46:	6829      	ldr	r1, [r5, #0]
 8023a48:	4aa5      	ldr	r2, [pc, #660]	@ (8023ce0 <theme_apply+0x2e0>)
 8023a4a:	3110      	adds	r1, #16
 8023a4c:	4620      	mov	r0, r4
 8023a4e:	f7f9 f81d 	bl	801ca8c <lv_obj_add_style>
        return;
 8023a52:	e7ea      	b.n	8023a2a <theme_apply+0x2a>
        else if(lv_obj_check_type(lv_obj_get_parent(parent), &lv_tabview_class)) {
 8023a54:	4628      	mov	r0, r5
 8023a56:	f7f9 fb8d 	bl	801d174 <lv_obj_get_parent>
 8023a5a:	499f      	ldr	r1, [pc, #636]	@ (8023cd8 <theme_apply+0x2d8>)
 8023a5c:	f7f4 ffb8 	bl	80189d0 <lv_obj_check_type>
 8023a60:	bb68      	cbnz	r0, 8023abe <theme_apply+0xbe>
        if(lv_obj_get_index(obj) == 0 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8023a62:	4620      	mov	r0, r4
 8023a64:	f7f9 fbcb 	bl	801d1fe <lv_obj_get_index>
 8023a68:	b938      	cbnz	r0, 8023a7a <theme_apply+0x7a>
 8023a6a:	4620      	mov	r0, r4
 8023a6c:	f7f9 fb82 	bl	801d174 <lv_obj_get_parent>
 8023a70:	499c      	ldr	r1, [pc, #624]	@ (8023ce4 <theme_apply+0x2e4>)
 8023a72:	f7f4 ffad 	bl	80189d0 <lv_obj_check_type>
 8023a76:	2800      	cmp	r0, #0
 8023a78:	d136      	bne.n	8023ae8 <theme_apply+0xe8>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	f7f9 fbbf 	bl	801d1fe <lv_obj_get_index>
 8023a80:	2801      	cmp	r0, #1
 8023a82:	d03f      	beq.n	8023b04 <theme_apply+0x104>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 8023a84:	4620      	mov	r0, r4
 8023a86:	f7f9 fb75 	bl	801d174 <lv_obj_get_parent>
 8023a8a:	4997      	ldr	r1, [pc, #604]	@ (8023ce8 <theme_apply+0x2e8>)
 8023a8c:	f7f4 ffa0 	bl	80189d0 <lv_obj_check_type>
 8023a90:	2800      	cmp	r0, #0
 8023a92:	d1ca      	bne.n	8023a2a <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 8023a94:	4d91      	ldr	r5, [pc, #580]	@ (8023cdc <theme_apply+0x2dc>)
 8023a96:	6829      	ldr	r1, [r5, #0]
 8023a98:	2200      	movs	r2, #0
 8023a9a:	3118      	adds	r1, #24
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f7f8 fff5 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8023aa2:	6829      	ldr	r1, [r5, #0]
 8023aa4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023aa8:	3108      	adds	r1, #8
 8023aaa:	4620      	mov	r0, r4
 8023aac:	f7f8 ffee 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8023ab0:	6829      	ldr	r1, [r5, #0]
 8023ab2:	4a8b      	ldr	r2, [pc, #556]	@ (8023ce0 <theme_apply+0x2e0>)
 8023ab4:	3110      	adds	r1, #16
 8023ab6:	4620      	mov	r0, r4
 8023ab8:	f7f8 ffe8 	bl	801ca8c <lv_obj_add_style>
 8023abc:	e7b5      	b.n	8023a2a <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8023abe:	4d87      	ldr	r5, [pc, #540]	@ (8023cdc <theme_apply+0x2dc>)
 8023ac0:	6829      	ldr	r1, [r5, #0]
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	3180      	adds	r1, #128	@ 0x80
 8023ac6:	4620      	mov	r0, r4
 8023ac8:	f7f8 ffe0 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8023acc:	6829      	ldr	r1, [r5, #0]
 8023ace:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023ad2:	3108      	adds	r1, #8
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	f7f8 ffd9 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8023ada:	6829      	ldr	r1, [r5, #0]
 8023adc:	4a80      	ldr	r2, [pc, #512]	@ (8023ce0 <theme_apply+0x2e0>)
 8023ade:	3110      	adds	r1, #16
 8023ae0:	4620      	mov	r0, r4
 8023ae2:	f7f8 ffd3 	bl	801ca8c <lv_obj_add_style>
            return;
 8023ae6:	e7a0      	b.n	8023a2a <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8023ae8:	4d7c      	ldr	r5, [pc, #496]	@ (8023cdc <theme_apply+0x2dc>)
 8023aea:	6829      	ldr	r1, [r5, #0]
 8023aec:	2200      	movs	r2, #0
 8023aee:	3148      	adds	r1, #72	@ 0x48
 8023af0:	4620      	mov	r0, r4
 8023af2:	f7f8 ffcb 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_tiny, 0);
 8023af6:	6829      	ldr	r1, [r5, #0]
 8023af8:	2200      	movs	r2, #0
 8023afa:	3170      	adds	r1, #112	@ 0x70
 8023afc:	4620      	mov	r0, r4
 8023afe:	f7f8 ffc5 	bl	801ca8c <lv_obj_add_style>
            return;
 8023b02:	e792      	b.n	8023a2a <theme_apply+0x2a>
        else if(lv_obj_get_index(obj) == 1 && lv_obj_check_type(lv_obj_get_parent(obj), &lv_win_class)) {
 8023b04:	4620      	mov	r0, r4
 8023b06:	f7f9 fb35 	bl	801d174 <lv_obj_get_parent>
 8023b0a:	4976      	ldr	r1, [pc, #472]	@ (8023ce4 <theme_apply+0x2e4>)
 8023b0c:	f7f4 ff60 	bl	80189d0 <lv_obj_check_type>
 8023b10:	2800      	cmp	r0, #0
 8023b12:	d0b7      	beq.n	8023a84 <theme_apply+0x84>
            lv_obj_add_style(obj, &styles->scr, 0);
 8023b14:	4d71      	ldr	r5, [pc, #452]	@ (8023cdc <theme_apply+0x2dc>)
 8023b16:	2200      	movs	r2, #0
 8023b18:	6829      	ldr	r1, [r5, #0]
 8023b1a:	4620      	mov	r0, r4
 8023b1c:	f7f8 ffb6 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_normal, 0);
 8023b20:	6829      	ldr	r1, [r5, #0]
 8023b22:	2200      	movs	r2, #0
 8023b24:	3180      	adds	r1, #128	@ 0x80
 8023b26:	4620      	mov	r0, r4
 8023b28:	f7f8 ffb0 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8023b2c:	6829      	ldr	r1, [r5, #0]
 8023b2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023b32:	3108      	adds	r1, #8
 8023b34:	4620      	mov	r0, r4
 8023b36:	f7f8 ffa9 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8023b3a:	6829      	ldr	r1, [r5, #0]
 8023b3c:	4a68      	ldr	r2, [pc, #416]	@ (8023ce0 <theme_apply+0x2e0>)
 8023b3e:	3110      	adds	r1, #16
 8023b40:	4620      	mov	r0, r4
 8023b42:	f7f8 ffa3 	bl	801ca8c <lv_obj_add_style>
            return;
 8023b46:	e770      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btn_class)) {
 8023b48:	4968      	ldr	r1, [pc, #416]	@ (8023cec <theme_apply+0x2ec>)
 8023b4a:	4620      	mov	r0, r4
 8023b4c:	f7f4 ff40 	bl	80189d0 <lv_obj_check_type>
 8023b50:	2800      	cmp	r0, #0
 8023b52:	d056      	beq.n	8023c02 <theme_apply+0x202>
        lv_obj_add_style(obj, &styles->btn, 0);
 8023b54:	4d61      	ldr	r5, [pc, #388]	@ (8023cdc <theme_apply+0x2dc>)
 8023b56:	6829      	ldr	r1, [r5, #0]
 8023b58:	2200      	movs	r2, #0
 8023b5a:	3120      	adds	r1, #32
 8023b5c:	4620      	mov	r0, r4
 8023b5e:	f7f8 ff95 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, 0);
 8023b62:	6829      	ldr	r1, [r5, #0]
 8023b64:	2200      	movs	r2, #0
 8023b66:	3128      	adds	r1, #40	@ 0x28
 8023b68:	4620      	mov	r0, r4
 8023b6a:	f7f8 ff8f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 8023b6e:	6829      	ldr	r1, [r5, #0]
 8023b70:	2200      	movs	r2, #0
 8023b72:	31d0      	adds	r1, #208	@ 0xd0
 8023b74:	4620      	mov	r0, r4
 8023b76:	f7f8 ff89 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8023b7a:	6829      	ldr	r1, [r5, #0]
 8023b7c:	2220      	movs	r2, #32
 8023b7e:	3158      	adds	r1, #88	@ 0x58
 8023b80:	4620      	mov	r0, r4
 8023b82:	f7f8 ff83 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 8023b86:	6829      	ldr	r1, [r5, #0]
 8023b88:	2220      	movs	r2, #32
 8023b8a:	31d8      	adds	r1, #216	@ 0xd8
 8023b8c:	4620      	mov	r0, r4
 8023b8e:	f7f8 ff7d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023b92:	6829      	ldr	r1, [r5, #0]
 8023b94:	2204      	movs	r2, #4
 8023b96:	31a0      	adds	r1, #160	@ 0xa0
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f7f8 ff77 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_STATE_PRESSED);
 8023b9e:	6829      	ldr	r1, [r5, #0]
 8023ba0:	2220      	movs	r2, #32
 8023ba2:	31c8      	adds	r1, #200	@ 0xc8
 8023ba4:	4620      	mov	r0, r4
 8023ba6:	f7f8 ff71 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_STATE_CHECKED);
 8023baa:	6829      	ldr	r1, [r5, #0]
 8023bac:	2201      	movs	r2, #1
 8023bae:	3138      	adds	r1, #56	@ 0x38
 8023bb0:	4620      	mov	r0, r4
 8023bb2:	f7f8 ff6b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 8023bb6:	6829      	ldr	r1, [r5, #0]
 8023bb8:	2280      	movs	r2, #128	@ 0x80
 8023bba:	3160      	adds	r1, #96	@ 0x60
 8023bbc:	4620      	mov	r0, r4
 8023bbe:	f7f8 ff65 	bl	801ca8c <lv_obj_add_style>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 8023bc2:	4620      	mov	r0, r4
 8023bc4:	f7f9 fad6 	bl	801d174 <lv_obj_get_parent>
 8023bc8:	4949      	ldr	r1, [pc, #292]	@ (8023cf0 <theme_apply+0x2f0>)
 8023bca:	f7f4 ff01 	bl	80189d0 <lv_obj_check_type>
 8023bce:	b940      	cbnz	r0, 8023be2 <theme_apply+0x1e2>
           lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_main_header_cont_class)) {
 8023bd0:	4620      	mov	r0, r4
 8023bd2:	f7f9 facf 	bl	801d174 <lv_obj_get_parent>
 8023bd6:	4947      	ldr	r1, [pc, #284]	@ (8023cf4 <theme_apply+0x2f4>)
 8023bd8:	f7f4 fefa 	bl	80189d0 <lv_obj_check_type>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_menu_sidebar_header_cont_class) ||
 8023bdc:	2800      	cmp	r0, #0
 8023bde:	f43f af24 	beq.w	8023a2a <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->menu_header_btn, 0);
 8023be2:	4d3e      	ldr	r5, [pc, #248]	@ (8023cdc <theme_apply+0x2dc>)
 8023be4:	6829      	ldr	r1, [r5, #0]
 8023be6:	2200      	movs	r2, #0
 8023be8:	f501 71e8 	add.w	r1, r1, #464	@ 0x1d0
 8023bec:	4620      	mov	r0, r4
 8023bee:	f7f8 ff4d 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 8023bf2:	6829      	ldr	r1, [r5, #0]
 8023bf4:	2220      	movs	r2, #32
 8023bf6:	f501 71f0 	add.w	r1, r1, #480	@ 0x1e0
 8023bfa:	4620      	mov	r0, r4
 8023bfc:	f7f8 ff46 	bl	801ca8c <lv_obj_add_style>
 8023c00:	e713      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_line_class)) {
 8023c02:	493d      	ldr	r1, [pc, #244]	@ (8023cf8 <theme_apply+0x2f8>)
 8023c04:	4620      	mov	r0, r4
 8023c06:	f7f4 fee3 	bl	80189d0 <lv_obj_check_type>
 8023c0a:	b140      	cbz	r0, 8023c1e <theme_apply+0x21e>
        lv_obj_add_style(obj, &styles->line, 0);
 8023c0c:	4b33      	ldr	r3, [pc, #204]	@ (8023cdc <theme_apply+0x2dc>)
 8023c0e:	6819      	ldr	r1, [r3, #0]
 8023c10:	2200      	movs	r2, #0
 8023c12:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8023c16:	4620      	mov	r0, r4
 8023c18:	f7f8 ff38 	bl	801ca8c <lv_obj_add_style>
 8023c1c:	e705      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_btnmatrix_class)) {
 8023c1e:	4937      	ldr	r1, [pc, #220]	@ (8023cfc <theme_apply+0x2fc>)
 8023c20:	4620      	mov	r0, r4
 8023c22:	f7f4 fed5 	bl	80189d0 <lv_obj_check_type>
 8023c26:	2800      	cmp	r0, #0
 8023c28:	f000 811c 	beq.w	8023e64 <theme_apply+0x464>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_msgbox_class)) {
 8023c2c:	4620      	mov	r0, r4
 8023c2e:	f7f9 faa1 	bl	801d174 <lv_obj_get_parent>
 8023c32:	4933      	ldr	r1, [pc, #204]	@ (8023d00 <theme_apply+0x300>)
 8023c34:	f7f4 fecc 	bl	80189d0 <lv_obj_check_type>
 8023c38:	2800      	cmp	r0, #0
 8023c3a:	d16d      	bne.n	8023d18 <theme_apply+0x318>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_tabview_class)) {
 8023c3c:	4620      	mov	r0, r4
 8023c3e:	f7f9 fa99 	bl	801d174 <lv_obj_get_parent>
 8023c42:	4925      	ldr	r1, [pc, #148]	@ (8023cd8 <theme_apply+0x2d8>)
 8023c44:	f7f4 fec4 	bl	80189d0 <lv_obj_check_type>
 8023c48:	2800      	cmp	r0, #0
 8023c4a:	f040 8099 	bne.w	8023d80 <theme_apply+0x380>
        if(lv_obj_check_type(lv_obj_get_parent(obj), &lv_calendar_class)) {
 8023c4e:	4620      	mov	r0, r4
 8023c50:	f7f9 fa90 	bl	801d174 <lv_obj_get_parent>
 8023c54:	4924      	ldr	r1, [pc, #144]	@ (8023ce8 <theme_apply+0x2e8>)
 8023c56:	f7f4 febb 	bl	80189d0 <lv_obj_check_type>
 8023c5a:	2800      	cmp	r0, #0
 8023c5c:	f040 80cd 	bne.w	8023dfa <theme_apply+0x3fa>
        lv_obj_add_style(obj, &styles->card, 0);
 8023c60:	4d1e      	ldr	r5, [pc, #120]	@ (8023cdc <theme_apply+0x2dc>)
 8023c62:	6829      	ldr	r1, [r5, #0]
 8023c64:	2200      	movs	r2, #0
 8023c66:	3118      	adds	r1, #24
 8023c68:	4620      	mov	r0, r4
 8023c6a:	f7f8 ff0f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023c6e:	6829      	ldr	r1, [r5, #0]
 8023c70:	2204      	movs	r2, #4
 8023c72:	31a0      	adds	r1, #160	@ 0xa0
 8023c74:	4620      	mov	r0, r4
 8023c76:	f7f8 ff09 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8023c7a:	6829      	ldr	r1, [r5, #0]
 8023c7c:	2208      	movs	r2, #8
 8023c7e:	31a8      	adds	r1, #168	@ 0xa8
 8023c80:	4620      	mov	r0, r4
 8023c82:	f7f8 ff03 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8023c86:	6829      	ldr	r1, [r5, #0]
 8023c88:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023c8c:	3120      	adds	r1, #32
 8023c8e:	4620      	mov	r0, r4
 8023c90:	f7f8 fefc 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8023c94:	6829      	ldr	r1, [r5, #0]
 8023c96:	4a1b      	ldr	r2, [pc, #108]	@ (8023d04 <theme_apply+0x304>)
 8023c98:	3160      	adds	r1, #96	@ 0x60
 8023c9a:	4620      	mov	r0, r4
 8023c9c:	f7f8 fef6 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8023ca0:	6829      	ldr	r1, [r5, #0]
 8023ca2:	4a19      	ldr	r2, [pc, #100]	@ (8023d08 <theme_apply+0x308>)
 8023ca4:	3158      	adds	r1, #88	@ 0x58
 8023ca6:	4620      	mov	r0, r4
 8023ca8:	f7f8 fef0 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8023cac:	6829      	ldr	r1, [r5, #0]
 8023cae:	4a17      	ldr	r2, [pc, #92]	@ (8023d0c <theme_apply+0x30c>)
 8023cb0:	3128      	adds	r1, #40	@ 0x28
 8023cb2:	4620      	mov	r0, r4
 8023cb4:	f7f8 feea 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023cb8:	6829      	ldr	r1, [r5, #0]
 8023cba:	4a15      	ldr	r2, [pc, #84]	@ (8023d10 <theme_apply+0x310>)
 8023cbc:	31a0      	adds	r1, #160	@ 0xa0
 8023cbe:	4620      	mov	r0, r4
 8023cc0:	f7f8 fee4 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8023cc4:	6829      	ldr	r1, [r5, #0]
 8023cc6:	4a13      	ldr	r2, [pc, #76]	@ (8023d14 <theme_apply+0x314>)
 8023cc8:	31a8      	adds	r1, #168	@ 0xa8
 8023cca:	4620      	mov	r0, r4
 8023ccc:	f7f8 fede 	bl	801ca8c <lv_obj_add_style>
 8023cd0:	e6ab      	b.n	8023a2a <theme_apply+0x2a>
 8023cd2:	bf00      	nop
 8023cd4:	0802de60 	.word	0x0802de60
 8023cd8:	0802dfb4 	.word	0x0802dfb4
 8023cdc:	2000896c 	.word	0x2000896c
 8023ce0:	00010040 	.word	0x00010040
 8023ce4:	0802e03c 	.word	0x0802e03c
 8023ce8:	08029eec 	.word	0x08029eec
 8023cec:	0802990c 	.word	0x0802990c
 8023cf0:	0802dd10 	.word	0x0802dd10
 8023cf4:	0802dd2c 	.word	0x0802dd2c
 8023cf8:	0802dbe8 	.word	0x0802dbe8
 8023cfc:	08029eb4 	.word	0x08029eb4
 8023d00:	0802de44 	.word	0x0802de44
 8023d04:	00050080 	.word	0x00050080
 8023d08:	00050020 	.word	0x00050020
 8023d0c:	00050001 	.word	0x00050001
 8023d10:	00050004 	.word	0x00050004
 8023d14:	00050008 	.word	0x00050008
            lv_obj_add_style(obj, &styles->msgbox_btn_bg, 0);
 8023d18:	4dbb      	ldr	r5, [pc, #748]	@ (8024008 <theme_apply+0x608>)
 8023d1a:	6829      	ldr	r1, [r5, #0]
 8023d1c:	2200      	movs	r2, #0
 8023d1e:	f501 71fc 	add.w	r1, r1, #504	@ 0x1f8
 8023d22:	4620      	mov	r0, r4
 8023d24:	f7f8 feb2 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pad_gap, 0);
 8023d28:	6829      	ldr	r1, [r5, #0]
 8023d2a:	2200      	movs	r2, #0
 8023d2c:	3188      	adds	r1, #136	@ 0x88
 8023d2e:	4620      	mov	r0, r4
 8023d30:	f7f8 feac 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8023d34:	6829      	ldr	r1, [r5, #0]
 8023d36:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023d3a:	3120      	adds	r1, #32
 8023d3c:	4620      	mov	r0, r4
 8023d3e:	f7f8 fea5 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8023d42:	6829      	ldr	r1, [r5, #0]
 8023d44:	4ab1      	ldr	r2, [pc, #708]	@ (802400c <theme_apply+0x60c>)
 8023d46:	3158      	adds	r1, #88	@ 0x58
 8023d48:	4620      	mov	r0, r4
 8023d4a:	f7f8 fe9f 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8023d4e:	6829      	ldr	r1, [r5, #0]
 8023d50:	4aaf      	ldr	r2, [pc, #700]	@ (8024010 <theme_apply+0x610>)
 8023d52:	3160      	adds	r1, #96	@ 0x60
 8023d54:	4620      	mov	r0, r4
 8023d56:	f7f8 fe99 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_CHECKED);
 8023d5a:	6829      	ldr	r1, [r5, #0]
 8023d5c:	4aad      	ldr	r2, [pc, #692]	@ (8024014 <theme_apply+0x614>)
 8023d5e:	3128      	adds	r1, #40	@ 0x28
 8023d60:	4620      	mov	r0, r4
 8023d62:	f7f8 fe93 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023d66:	6829      	ldr	r1, [r5, #0]
 8023d68:	4aab      	ldr	r2, [pc, #684]	@ (8024018 <theme_apply+0x618>)
 8023d6a:	3130      	adds	r1, #48	@ 0x30
 8023d6c:	4620      	mov	r0, r4
 8023d6e:	f7f8 fe8d 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 8023d72:	6829      	ldr	r1, [r5, #0]
 8023d74:	4aa9      	ldr	r2, [pc, #676]	@ (802401c <theme_apply+0x61c>)
 8023d76:	3140      	adds	r1, #64	@ 0x40
 8023d78:	4620      	mov	r0, r4
 8023d7a:	f7f8 fe87 	bl	801ca8c <lv_obj_add_style>
            return;
 8023d7e:	e654      	b.n	8023a2a <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->bg_color_white, 0);
 8023d80:	4da1      	ldr	r5, [pc, #644]	@ (8024008 <theme_apply+0x608>)
 8023d82:	6829      	ldr	r1, [r5, #0]
 8023d84:	2200      	movs	r2, #0
 8023d86:	3150      	adds	r1, #80	@ 0x50
 8023d88:	4620      	mov	r0, r4
 8023d8a:	f7f8 fe7f 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023d8e:	6829      	ldr	r1, [r5, #0]
 8023d90:	2204      	movs	r2, #4
 8023d92:	31a0      	adds	r1, #160	@ 0xa0
 8023d94:	4620      	mov	r0, r4
 8023d96:	f7f8 fe79 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_STATE_FOCUS_KEY);
 8023d9a:	6829      	ldr	r1, [r5, #0]
 8023d9c:	2204      	movs	r2, #4
 8023d9e:	f501 710c 	add.w	r1, r1, #560	@ 0x230
 8023da2:	4620      	mov	r0, r4
 8023da4:	f7f8 fe72 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8023da8:	6829      	ldr	r1, [r5, #0]
 8023daa:	4a98      	ldr	r2, [pc, #608]	@ (802400c <theme_apply+0x60c>)
 8023dac:	3158      	adds	r1, #88	@ 0x58
 8023dae:	4620      	mov	r0, r4
 8023db0:	f7f8 fe6c 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_CHECKED);
 8023db4:	6829      	ldr	r1, [r5, #0]
 8023db6:	4e97      	ldr	r6, [pc, #604]	@ (8024014 <theme_apply+0x614>)
 8023db8:	4632      	mov	r2, r6
 8023dba:	3130      	adds	r1, #48	@ 0x30
 8023dbc:	4620      	mov	r0, r4
 8023dbe:	f7f8 fe65 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_btn, LV_PART_ITEMS | LV_STATE_CHECKED);
 8023dc2:	6829      	ldr	r1, [r5, #0]
 8023dc4:	4632      	mov	r2, r6
 8023dc6:	f501 710e 	add.w	r1, r1, #568	@ 0x238
 8023dca:	4620      	mov	r0, r4
 8023dcc:	f7f8 fe5e 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023dd0:	6829      	ldr	r1, [r5, #0]
 8023dd2:	3603      	adds	r6, #3
 8023dd4:	4632      	mov	r2, r6
 8023dd6:	31a0      	adds	r1, #160	@ 0xa0
 8023dd8:	4620      	mov	r0, r4
 8023dda:	f7f8 fe57 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8023dde:	6829      	ldr	r1, [r5, #0]
 8023de0:	4a8e      	ldr	r2, [pc, #568]	@ (802401c <theme_apply+0x61c>)
 8023de2:	31a8      	adds	r1, #168	@ 0xa8
 8023de4:	4620      	mov	r0, r4
 8023de6:	f7f8 fe51 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->tab_bg_focus, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023dea:	6829      	ldr	r1, [r5, #0]
 8023dec:	4632      	mov	r2, r6
 8023dee:	f501 710c 	add.w	r1, r1, #560	@ 0x230
 8023df2:	4620      	mov	r0, r4
 8023df4:	f7f8 fe4a 	bl	801ca8c <lv_obj_add_style>
            return;
 8023df8:	e617      	b.n	8023a2a <theme_apply+0x2a>
            lv_obj_add_style(obj, &styles->calendar_btnm_bg, 0);
 8023dfa:	4d83      	ldr	r5, [pc, #524]	@ (8024008 <theme_apply+0x608>)
 8023dfc:	6829      	ldr	r1, [r5, #0]
 8023dfe:	2200      	movs	r2, #0
 8023e00:	f501 71c0 	add.w	r1, r1, #384	@ 0x180
 8023e04:	4620      	mov	r0, r4
 8023e06:	f7f8 fe41 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023e0a:	6829      	ldr	r1, [r5, #0]
 8023e0c:	2204      	movs	r2, #4
 8023e0e:	31a0      	adds	r1, #160	@ 0xa0
 8023e10:	4620      	mov	r0, r4
 8023e12:	f7f8 fe3b 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8023e16:	6829      	ldr	r1, [r5, #0]
 8023e18:	2208      	movs	r2, #8
 8023e1a:	31a8      	adds	r1, #168	@ 0xa8
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	f7f8 fe35 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->calendar_btnm_day, LV_PART_ITEMS);
 8023e22:	6829      	ldr	r1, [r5, #0]
 8023e24:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023e28:	f501 71c4 	add.w	r1, r1, #392	@ 0x188
 8023e2c:	4620      	mov	r0, r4
 8023e2e:	f7f8 fe2d 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8023e32:	6829      	ldr	r1, [r5, #0]
 8023e34:	4a75      	ldr	r2, [pc, #468]	@ (802400c <theme_apply+0x60c>)
 8023e36:	3158      	adds	r1, #88	@ 0x58
 8023e38:	4620      	mov	r0, r4
 8023e3a:	f7f8 fe27 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 8023e3e:	6829      	ldr	r1, [r5, #0]
 8023e40:	4a73      	ldr	r2, [pc, #460]	@ (8024010 <theme_apply+0x610>)
 8023e42:	3160      	adds	r1, #96	@ 0x60
 8023e44:	4620      	mov	r0, r4
 8023e46:	f7f8 fe21 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023e4a:	6829      	ldr	r1, [r5, #0]
 8023e4c:	4a72      	ldr	r2, [pc, #456]	@ (8024018 <theme_apply+0x618>)
 8023e4e:	31a0      	adds	r1, #160	@ 0xa0
 8023e50:	4620      	mov	r0, r4
 8023e52:	f7f8 fe1b 	bl	801ca8c <lv_obj_add_style>
            lv_obj_add_style(obj, &styles->outline_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8023e56:	6829      	ldr	r1, [r5, #0]
 8023e58:	4a70      	ldr	r2, [pc, #448]	@ (802401c <theme_apply+0x61c>)
 8023e5a:	31a8      	adds	r1, #168	@ 0xa8
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	f7f8 fe15 	bl	801ca8c <lv_obj_add_style>
            return;
 8023e62:	e5e2      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_bar_class)) {
 8023e64:	496e      	ldr	r1, [pc, #440]	@ (8024020 <theme_apply+0x620>)
 8023e66:	4620      	mov	r0, r4
 8023e68:	f7f4 fdb2 	bl	80189d0 <lv_obj_check_type>
 8023e6c:	b338      	cbz	r0, 8023ebe <theme_apply+0x4be>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8023e6e:	4d66      	ldr	r5, [pc, #408]	@ (8024008 <theme_apply+0x608>)
 8023e70:	6829      	ldr	r1, [r5, #0]
 8023e72:	2200      	movs	r2, #0
 8023e74:	3130      	adds	r1, #48	@ 0x30
 8023e76:	4620      	mov	r0, r4
 8023e78:	f7f8 fe08 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8023e7c:	6829      	ldr	r1, [r5, #0]
 8023e7e:	2200      	movs	r2, #0
 8023e80:	31b0      	adds	r1, #176	@ 0xb0
 8023e82:	4620      	mov	r0, r4
 8023e84:	f7f8 fe02 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023e88:	6829      	ldr	r1, [r5, #0]
 8023e8a:	2204      	movs	r2, #4
 8023e8c:	31a0      	adds	r1, #160	@ 0xa0
 8023e8e:	4620      	mov	r0, r4
 8023e90:	f7f8 fdfc 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8023e94:	6829      	ldr	r1, [r5, #0]
 8023e96:	2208      	movs	r2, #8
 8023e98:	31a8      	adds	r1, #168	@ 0xa8
 8023e9a:	4620      	mov	r0, r4
 8023e9c:	f7f8 fdf6 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8023ea0:	6829      	ldr	r1, [r5, #0]
 8023ea2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8023ea6:	3128      	adds	r1, #40	@ 0x28
 8023ea8:	4620      	mov	r0, r4
 8023eaa:	f7f8 fdef 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8023eae:	6829      	ldr	r1, [r5, #0]
 8023eb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8023eb4:	31b0      	adds	r1, #176	@ 0xb0
 8023eb6:	4620      	mov	r0, r4
 8023eb8:	f7f8 fde8 	bl	801ca8c <lv_obj_add_style>
 8023ebc:	e5b5      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_slider_class)) {
 8023ebe:	4959      	ldr	r1, [pc, #356]	@ (8024024 <theme_apply+0x624>)
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	f7f4 fd85 	bl	80189d0 <lv_obj_check_type>
 8023ec6:	2800      	cmp	r0, #0
 8023ec8:	d042      	beq.n	8023f50 <theme_apply+0x550>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, 0);
 8023eca:	4d4f      	ldr	r5, [pc, #316]	@ (8024008 <theme_apply+0x608>)
 8023ecc:	6829      	ldr	r1, [r5, #0]
 8023ece:	2200      	movs	r2, #0
 8023ed0:	3130      	adds	r1, #48	@ 0x30
 8023ed2:	4620      	mov	r0, r4
 8023ed4:	f7f8 fdda 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8023ed8:	6829      	ldr	r1, [r5, #0]
 8023eda:	2200      	movs	r2, #0
 8023edc:	31b0      	adds	r1, #176	@ 0xb0
 8023ede:	4620      	mov	r0, r4
 8023ee0:	f7f8 fdd4 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023ee4:	6829      	ldr	r1, [r5, #0]
 8023ee6:	2204      	movs	r2, #4
 8023ee8:	31a0      	adds	r1, #160	@ 0xa0
 8023eea:	4620      	mov	r0, r4
 8023eec:	f7f8 fdce 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8023ef0:	6829      	ldr	r1, [r5, #0]
 8023ef2:	2208      	movs	r2, #8
 8023ef4:	31a8      	adds	r1, #168	@ 0xa8
 8023ef6:	4620      	mov	r0, r4
 8023ef8:	f7f8 fdc8 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR);
 8023efc:	6829      	ldr	r1, [r5, #0]
 8023efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8023f02:	3128      	adds	r1, #40	@ 0x28
 8023f04:	4620      	mov	r0, r4
 8023f06:	f7f8 fdc1 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8023f0a:	6829      	ldr	r1, [r5, #0]
 8023f0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8023f10:	31b0      	adds	r1, #176	@ 0xb0
 8023f12:	4620      	mov	r0, r4
 8023f14:	f7f8 fdba 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 8023f18:	6829      	ldr	r1, [r5, #0]
 8023f1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8023f1e:	31f0      	adds	r1, #240	@ 0xf0
 8023f20:	4620      	mov	r0, r4
 8023f22:	f7f8 fdb3 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_KNOB | LV_STATE_PRESSED);
 8023f26:	6829      	ldr	r1, [r5, #0]
 8023f28:	4e3f      	ldr	r6, [pc, #252]	@ (8024028 <theme_apply+0x628>)
 8023f2a:	4632      	mov	r2, r6
 8023f2c:	31c8      	adds	r1, #200	@ 0xc8
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f7f8 fdac 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_KNOB);
 8023f34:	6829      	ldr	r1, [r5, #0]
 8023f36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8023f3a:	31d0      	adds	r1, #208	@ 0xd0
 8023f3c:	4620      	mov	r0, r4
 8023f3e:	f7f8 fda5 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_KNOB | LV_STATE_PRESSED);
 8023f42:	6829      	ldr	r1, [r5, #0]
 8023f44:	4632      	mov	r2, r6
 8023f46:	31d8      	adds	r1, #216	@ 0xd8
 8023f48:	4620      	mov	r0, r4
 8023f4a:	f7f8 fd9f 	bl	801ca8c <lv_obj_add_style>
 8023f4e:	e56c      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_table_class)) {
 8023f50:	4936      	ldr	r1, [pc, #216]	@ (802402c <theme_apply+0x62c>)
 8023f52:	4620      	mov	r0, r4
 8023f54:	f7f4 fd3c 	bl	80189d0 <lv_obj_check_type>
 8023f58:	2800      	cmp	r0, #0
 8023f5a:	d06b      	beq.n	8024034 <theme_apply+0x634>
        lv_obj_add_style(obj, &styles->card, 0);
 8023f5c:	4d2a      	ldr	r5, [pc, #168]	@ (8024008 <theme_apply+0x608>)
 8023f5e:	6829      	ldr	r1, [r5, #0]
 8023f60:	2200      	movs	r2, #0
 8023f62:	3118      	adds	r1, #24
 8023f64:	4620      	mov	r0, r4
 8023f66:	f7f8 fd91 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8023f6a:	6829      	ldr	r1, [r5, #0]
 8023f6c:	2200      	movs	r2, #0
 8023f6e:	3168      	adds	r1, #104	@ 0x68
 8023f70:	4620      	mov	r0, r4
 8023f72:	f7f8 fd8b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->no_radius, 0);
 8023f76:	6829      	ldr	r1, [r5, #0]
 8023f78:	2200      	movs	r2, #0
 8023f7a:	31b8      	adds	r1, #184	@ 0xb8
 8023f7c:	4620      	mov	r0, r4
 8023f7e:	f7f8 fd85 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8023f82:	6829      	ldr	r1, [r5, #0]
 8023f84:	2204      	movs	r2, #4
 8023f86:	31a0      	adds	r1, #160	@ 0xa0
 8023f88:	4620      	mov	r0, r4
 8023f8a:	f7f8 fd7f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8023f8e:	6829      	ldr	r1, [r5, #0]
 8023f90:	2208      	movs	r2, #8
 8023f92:	31a8      	adds	r1, #168	@ 0xa8
 8023f94:	4620      	mov	r0, r4
 8023f96:	f7f8 fd79 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8023f9a:	6829      	ldr	r1, [r5, #0]
 8023f9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8023fa0:	3108      	adds	r1, #8
 8023fa2:	4620      	mov	r0, r4
 8023fa4:	f7f8 fd72 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8023fa8:	6829      	ldr	r1, [r5, #0]
 8023faa:	4a21      	ldr	r2, [pc, #132]	@ (8024030 <theme_apply+0x630>)
 8023fac:	3110      	adds	r1, #16
 8023fae:	4620      	mov	r0, r4
 8023fb0:	f7f8 fd6c 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 8023fb4:	6829      	ldr	r1, [r5, #0]
 8023fb6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023fba:	3150      	adds	r1, #80	@ 0x50
 8023fbc:	4620      	mov	r0, r4
 8023fbe:	f7f8 fd65 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->table_cell, LV_PART_ITEMS);
 8023fc2:	6829      	ldr	r1, [r5, #0]
 8023fc4:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023fc8:	f501 71ac 	add.w	r1, r1, #344	@ 0x158
 8023fcc:	4620      	mov	r0, r4
 8023fce:	f7f8 fd5d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_ITEMS);
 8023fd2:	6829      	ldr	r1, [r5, #0]
 8023fd4:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8023fd8:	3180      	adds	r1, #128	@ 0x80
 8023fda:	4620      	mov	r0, r4
 8023fdc:	f7f8 fd56 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 8023fe0:	6829      	ldr	r1, [r5, #0]
 8023fe2:	4a0a      	ldr	r2, [pc, #40]	@ (802400c <theme_apply+0x60c>)
 8023fe4:	3158      	adds	r1, #88	@ 0x58
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	f7f8 fd50 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 8023fec:	6829      	ldr	r1, [r5, #0]
 8023fee:	4a0a      	ldr	r2, [pc, #40]	@ (8024018 <theme_apply+0x618>)
 8023ff0:	3128      	adds	r1, #40	@ 0x28
 8023ff2:	4620      	mov	r0, r4
 8023ff4:	f7f8 fd4a 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary, LV_PART_ITEMS | LV_STATE_EDITED);
 8023ff8:	6829      	ldr	r1, [r5, #0]
 8023ffa:	4a08      	ldr	r2, [pc, #32]	@ (802401c <theme_apply+0x61c>)
 8023ffc:	3138      	adds	r1, #56	@ 0x38
 8023ffe:	4620      	mov	r0, r4
 8024000:	f7f8 fd44 	bl	801ca8c <lv_obj_add_style>
 8024004:	e511      	b.n	8023a2a <theme_apply+0x2a>
 8024006:	bf00      	nop
 8024008:	2000896c 	.word	0x2000896c
 802400c:	00050020 	.word	0x00050020
 8024010:	00050080 	.word	0x00050080
 8024014:	00050001 	.word	0x00050001
 8024018:	00050004 	.word	0x00050004
 802401c:	00050008 	.word	0x00050008
 8024020:	080298f0 	.word	0x080298f0
 8024024:	0802deb4 	.word	0x0802deb4
 8024028:	00030020 	.word	0x00030020
 802402c:	0802df98 	.word	0x0802df98
 8024030:	00010040 	.word	0x00010040
    else if(lv_obj_check_type(obj, &lv_checkbox_class)) {
 8024034:	49b0      	ldr	r1, [pc, #704]	@ (80242f8 <theme_apply+0x8f8>)
 8024036:	4620      	mov	r0, r4
 8024038:	f7f4 fcca 	bl	80189d0 <lv_obj_check_type>
 802403c:	2800      	cmp	r0, #0
 802403e:	d043      	beq.n	80240c8 <theme_apply+0x6c8>
        lv_obj_add_style(obj, &styles->pad_gap, 0);
 8024040:	4dae      	ldr	r5, [pc, #696]	@ (80242fc <theme_apply+0x8fc>)
 8024042:	6829      	ldr	r1, [r5, #0]
 8024044:	2200      	movs	r2, #0
 8024046:	3188      	adds	r1, #136	@ 0x88
 8024048:	4620      	mov	r0, r4
 802404a:	f7f8 fd1f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 802404e:	6829      	ldr	r1, [r5, #0]
 8024050:	2204      	movs	r2, #4
 8024052:	31a0      	adds	r1, #160	@ 0xa0
 8024054:	4620      	mov	r0, r4
 8024056:	f7f8 fd19 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 802405a:	6829      	ldr	r1, [r5, #0]
 802405c:	4aa8      	ldr	r2, [pc, #672]	@ (8024300 <theme_apply+0x900>)
 802405e:	3160      	adds	r1, #96	@ 0x60
 8024060:	4620      	mov	r0, r4
 8024062:	f7f8 fd13 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker, LV_PART_INDICATOR);
 8024066:	6829      	ldr	r1, [r5, #0]
 8024068:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 802406c:	f501 719c 	add.w	r1, r1, #312	@ 0x138
 8024070:	4620      	mov	r0, r4
 8024072:	f7f8 fd0b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8024076:	6829      	ldr	r1, [r5, #0]
 8024078:	4ea2      	ldr	r6, [pc, #648]	@ (8024304 <theme_apply+0x904>)
 802407a:	4632      	mov	r2, r6
 802407c:	3128      	adds	r1, #40	@ 0x28
 802407e:	4620      	mov	r0, r4
 8024080:	f7f8 fd04 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->cb_marker_checked, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8024084:	6829      	ldr	r1, [r5, #0]
 8024086:	4632      	mov	r2, r6
 8024088:	f501 71a0 	add.w	r1, r1, #320	@ 0x140
 802408c:	4620      	mov	r0, r4
 802408e:	f7f8 fcfd 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_INDICATOR | LV_STATE_PRESSED);
 8024092:	6829      	ldr	r1, [r5, #0]
 8024094:	361f      	adds	r6, #31
 8024096:	4632      	mov	r2, r6
 8024098:	3158      	adds	r1, #88	@ 0x58
 802409a:	4620      	mov	r0, r4
 802409c:	f7f8 fcf6 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->grow, LV_PART_INDICATOR | LV_STATE_PRESSED);
 80240a0:	6829      	ldr	r1, [r5, #0]
 80240a2:	4632      	mov	r2, r6
 80240a4:	31c8      	adds	r1, #200	@ 0xc8
 80240a6:	4620      	mov	r0, r4
 80240a8:	f7f8 fcf0 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_PRESSED);
 80240ac:	6829      	ldr	r1, [r5, #0]
 80240ae:	4632      	mov	r2, r6
 80240b0:	31d8      	adds	r1, #216	@ 0xd8
 80240b2:	4620      	mov	r0, r4
 80240b4:	f7f8 fcea 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, LV_PART_INDICATOR);
 80240b8:	6829      	ldr	r1, [r5, #0]
 80240ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80240be:	31d0      	adds	r1, #208	@ 0xd0
 80240c0:	4620      	mov	r0, r4
 80240c2:	f7f8 fce3 	bl	801ca8c <lv_obj_add_style>
 80240c6:	e4b0      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_switch_class)) {
 80240c8:	498f      	ldr	r1, [pc, #572]	@ (8024308 <theme_apply+0x908>)
 80240ca:	4620      	mov	r0, r4
 80240cc:	f7f4 fc80 	bl	80189d0 <lv_obj_check_type>
 80240d0:	2800      	cmp	r0, #0
 80240d2:	d05c      	beq.n	802418e <theme_apply+0x78e>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 80240d4:	4d89      	ldr	r5, [pc, #548]	@ (80242fc <theme_apply+0x8fc>)
 80240d6:	6829      	ldr	r1, [r5, #0]
 80240d8:	2200      	movs	r2, #0
 80240da:	3148      	adds	r1, #72	@ 0x48
 80240dc:	4620      	mov	r0, r4
 80240de:	f7f8 fcd5 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 80240e2:	6829      	ldr	r1, [r5, #0]
 80240e4:	2200      	movs	r2, #0
 80240e6:	31b0      	adds	r1, #176	@ 0xb0
 80240e8:	4620      	mov	r0, r4
 80240ea:	f7f8 fccf 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim_fast, 0);
 80240ee:	6829      	ldr	r1, [r5, #0]
 80240f0:	2200      	movs	r2, #0
 80240f2:	31e8      	adds	r1, #232	@ 0xe8
 80240f4:	4620      	mov	r0, r4
 80240f6:	f7f8 fcc9 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 80240fa:	6829      	ldr	r1, [r5, #0]
 80240fc:	2280      	movs	r2, #128	@ 0x80
 80240fe:	3160      	adds	r1, #96	@ 0x60
 8024100:	4620      	mov	r0, r4
 8024102:	f7f8 fcc3 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8024106:	6829      	ldr	r1, [r5, #0]
 8024108:	2204      	movs	r2, #4
 802410a:	31a0      	adds	r1, #160	@ 0xa0
 802410c:	4620      	mov	r0, r4
 802410e:	f7f8 fcbd 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8024112:	6829      	ldr	r1, [r5, #0]
 8024114:	4e7b      	ldr	r6, [pc, #492]	@ (8024304 <theme_apply+0x904>)
 8024116:	4632      	mov	r2, r6
 8024118:	3128      	adds	r1, #40	@ 0x28
 802411a:	4620      	mov	r0, r4
 802411c:	f7f8 fcb6 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, LV_PART_INDICATOR);
 8024120:	6829      	ldr	r1, [r5, #0]
 8024122:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024126:	31b0      	adds	r1, #176	@ 0xb0
 8024128:	4620      	mov	r0, r4
 802412a:	f7f8 fcaf 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_INDICATOR | LV_STATE_DISABLED);
 802412e:	6829      	ldr	r1, [r5, #0]
 8024130:	4a73      	ldr	r2, [pc, #460]	@ (8024300 <theme_apply+0x900>)
 8024132:	3160      	adds	r1, #96	@ 0x60
 8024134:	4620      	mov	r0, r4
 8024136:	f7f8 fca9 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 802413a:	6829      	ldr	r1, [r5, #0]
 802413c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8024140:	31f0      	adds	r1, #240	@ 0xf0
 8024142:	4620      	mov	r0, r4
 8024144:	f7f8 fca2 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8024148:	6829      	ldr	r1, [r5, #0]
 802414a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 802414e:	3150      	adds	r1, #80	@ 0x50
 8024150:	4620      	mov	r0, r4
 8024152:	f7f8 fc9b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->switch_knob, LV_PART_KNOB);
 8024156:	6829      	ldr	r1, [r5, #0]
 8024158:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 802415c:	f501 71a4 	add.w	r1, r1, #328	@ 0x148
 8024160:	4620      	mov	r0, r4
 8024162:	f7f8 fc93 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_KNOB | LV_STATE_DISABLED);
 8024166:	6829      	ldr	r1, [r5, #0]
 8024168:	4a68      	ldr	r2, [pc, #416]	@ (802430c <theme_apply+0x90c>)
 802416a:	3160      	adds	r1, #96	@ 0x60
 802416c:	4620      	mov	r0, r4
 802416e:	f7f8 fc8d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR | LV_STATE_CHECKED);
 8024172:	6829      	ldr	r1, [r5, #0]
 8024174:	4632      	mov	r2, r6
 8024176:	31d8      	adds	r1, #216	@ 0xd8
 8024178:	4620      	mov	r0, r4
 802417a:	f7f8 fc87 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 802417e:	6829      	ldr	r1, [r5, #0]
 8024180:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024184:	31d8      	adds	r1, #216	@ 0xd8
 8024186:	4620      	mov	r0, r4
 8024188:	f7f8 fc80 	bl	801ca8c <lv_obj_add_style>
 802418c:	e44d      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_chart_class)) {
 802418e:	4960      	ldr	r1, [pc, #384]	@ (8024310 <theme_apply+0x910>)
 8024190:	4620      	mov	r0, r4
 8024192:	f7f4 fc1d 	bl	80189d0 <lv_obj_check_type>
 8024196:	2800      	cmp	r0, #0
 8024198:	d041      	beq.n	802421e <theme_apply+0x81e>
        lv_obj_add_style(obj, &styles->card, 0);
 802419a:	4d58      	ldr	r5, [pc, #352]	@ (80242fc <theme_apply+0x8fc>)
 802419c:	6829      	ldr	r1, [r5, #0]
 802419e:	2200      	movs	r2, #0
 80241a0:	3118      	adds	r1, #24
 80241a2:	4620      	mov	r0, r4
 80241a4:	f7f8 fc72 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 80241a8:	6829      	ldr	r1, [r5, #0]
 80241aa:	2200      	movs	r2, #0
 80241ac:	3178      	adds	r1, #120	@ 0x78
 80241ae:	4620      	mov	r0, r4
 80241b0:	f7f8 fc6c 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_bg, 0);
 80241b4:	6829      	ldr	r1, [r5, #0]
 80241b6:	2200      	movs	r2, #0
 80241b8:	f501 7194 	add.w	r1, r1, #296	@ 0x128
 80241bc:	4620      	mov	r0, r4
 80241be:	f7f8 fc65 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80241c2:	6829      	ldr	r1, [r5, #0]
 80241c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80241c8:	3108      	adds	r1, #8
 80241ca:	4620      	mov	r0, r4
 80241cc:	f7f8 fc5e 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80241d0:	6829      	ldr	r1, [r5, #0]
 80241d2:	4a50      	ldr	r2, [pc, #320]	@ (8024314 <theme_apply+0x914>)
 80241d4:	3110      	adds	r1, #16
 80241d6:	4620      	mov	r0, r4
 80241d8:	f7f8 fc58 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_ITEMS);
 80241dc:	6829      	ldr	r1, [r5, #0]
 80241de:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80241e2:	f501 7188 	add.w	r1, r1, #272	@ 0x110
 80241e6:	4620      	mov	r0, r4
 80241e8:	f7f8 fc50 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_indic, LV_PART_INDICATOR);
 80241ec:	6829      	ldr	r1, [r5, #0]
 80241ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80241f2:	f501 718c 	add.w	r1, r1, #280	@ 0x118
 80241f6:	4620      	mov	r0, r4
 80241f8:	f7f8 fc48 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_ticks, LV_PART_TICKS);
 80241fc:	6829      	ldr	r1, [r5, #0]
 80241fe:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8024202:	f501 7190 	add.w	r1, r1, #288	@ 0x120
 8024206:	4620      	mov	r0, r4
 8024208:	f7f8 fc40 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->chart_series, LV_PART_CURSOR);
 802420c:	6829      	ldr	r1, [r5, #0]
 802420e:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8024212:	f501 7188 	add.w	r1, r1, #272	@ 0x110
 8024216:	4620      	mov	r0, r4
 8024218:	f7f8 fc38 	bl	801ca8c <lv_obj_add_style>
 802421c:	e405      	b.n	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_roller_class)) {
 802421e:	493e      	ldr	r1, [pc, #248]	@ (8024318 <theme_apply+0x918>)
 8024220:	4620      	mov	r0, r4
 8024222:	f7f4 fbd5 	bl	80189d0 <lv_obj_check_type>
 8024226:	b368      	cbz	r0, 8024284 <theme_apply+0x884>
        lv_obj_add_style(obj, &styles->card, 0);
 8024228:	4d34      	ldr	r5, [pc, #208]	@ (80242fc <theme_apply+0x8fc>)
 802422a:	6829      	ldr	r1, [r5, #0]
 802422c:	2200      	movs	r2, #0
 802422e:	3118      	adds	r1, #24
 8024230:	4620      	mov	r0, r4
 8024232:	f7f8 fc2b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->anim, 0);
 8024236:	6829      	ldr	r1, [r5, #0]
 8024238:	2200      	movs	r2, #0
 802423a:	31e0      	adds	r1, #224	@ 0xe0
 802423c:	4620      	mov	r0, r4
 802423e:	f7f8 fc25 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8024242:	6829      	ldr	r1, [r5, #0]
 8024244:	2200      	movs	r2, #0
 8024246:	3190      	adds	r1, #144	@ 0x90
 8024248:	4620      	mov	r0, r4
 802424a:	f7f8 fc1f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->text_align_center, 0);
 802424e:	6829      	ldr	r1, [r5, #0]
 8024250:	2200      	movs	r2, #0
 8024252:	3198      	adds	r1, #152	@ 0x98
 8024254:	4620      	mov	r0, r4
 8024256:	f7f8 fc19 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 802425a:	6829      	ldr	r1, [r5, #0]
 802425c:	2204      	movs	r2, #4
 802425e:	31a0      	adds	r1, #160	@ 0xa0
 8024260:	4620      	mov	r0, r4
 8024262:	f7f8 fc13 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8024266:	6829      	ldr	r1, [r5, #0]
 8024268:	2208      	movs	r2, #8
 802426a:	31a8      	adds	r1, #168	@ 0xa8
 802426c:	4620      	mov	r0, r4
 802426e:	f7f8 fc0d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED);
 8024272:	6829      	ldr	r1, [r5, #0]
 8024274:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8024278:	3128      	adds	r1, #40	@ 0x28
 802427a:	4620      	mov	r0, r4
 802427c:	f7f8 fc06 	bl	801ca8c <lv_obj_add_style>
 8024280:	f7ff bbd3 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_dropdown_class)) {
 8024284:	4925      	ldr	r1, [pc, #148]	@ (802431c <theme_apply+0x91c>)
 8024286:	4620      	mov	r0, r4
 8024288:	f7f4 fba2 	bl	80189d0 <lv_obj_check_type>
 802428c:	2800      	cmp	r0, #0
 802428e:	d047      	beq.n	8024320 <theme_apply+0x920>
        lv_obj_add_style(obj, &styles->card, 0);
 8024290:	4d1a      	ldr	r5, [pc, #104]	@ (80242fc <theme_apply+0x8fc>)
 8024292:	6829      	ldr	r1, [r5, #0]
 8024294:	2200      	movs	r2, #0
 8024296:	3118      	adds	r1, #24
 8024298:	4620      	mov	r0, r4
 802429a:	f7f8 fbf7 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 802429e:	6829      	ldr	r1, [r5, #0]
 80242a0:	2200      	movs	r2, #0
 80242a2:	3178      	adds	r1, #120	@ 0x78
 80242a4:	4620      	mov	r0, r4
 80242a6:	f7f8 fbf1 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_delayed, 0);
 80242aa:	6829      	ldr	r1, [r5, #0]
 80242ac:	2200      	movs	r2, #0
 80242ae:	31d0      	adds	r1, #208	@ 0xd0
 80242b0:	4620      	mov	r0, r4
 80242b2:	f7f8 fbeb 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_STATE_PRESSED);
 80242b6:	6829      	ldr	r1, [r5, #0]
 80242b8:	2220      	movs	r2, #32
 80242ba:	31d8      	adds	r1, #216	@ 0xd8
 80242bc:	4620      	mov	r0, r4
 80242be:	f7f8 fbe5 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 80242c2:	6829      	ldr	r1, [r5, #0]
 80242c4:	2220      	movs	r2, #32
 80242c6:	3158      	adds	r1, #88	@ 0x58
 80242c8:	4620      	mov	r0, r4
 80242ca:	f7f8 fbdf 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 80242ce:	6829      	ldr	r1, [r5, #0]
 80242d0:	2204      	movs	r2, #4
 80242d2:	31a0      	adds	r1, #160	@ 0xa0
 80242d4:	4620      	mov	r0, r4
 80242d6:	f7f8 fbd9 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80242da:	6829      	ldr	r1, [r5, #0]
 80242dc:	2208      	movs	r2, #8
 80242de:	31a8      	adds	r1, #168	@ 0xa8
 80242e0:	4620      	mov	r0, r4
 80242e2:	f7f8 fbd3 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->transition_normal, LV_PART_INDICATOR);
 80242e6:	6829      	ldr	r1, [r5, #0]
 80242e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80242ec:	31d8      	adds	r1, #216	@ 0xd8
 80242ee:	4620      	mov	r0, r4
 80242f0:	f7f8 fbcc 	bl	801ca8c <lv_obj_add_style>
 80242f4:	f7ff bb99 	b.w	8023a2a <theme_apply+0x2a>
 80242f8:	08029f8c 	.word	0x08029f8c
 80242fc:	2000896c 	.word	0x2000896c
 8024300:	00020080 	.word	0x00020080
 8024304:	00020001 	.word	0x00020001
 8024308:	0802df7c 	.word	0x0802df7c
 802430c:	00030080 	.word	0x00030080
 8024310:	08029f70 	.word	0x08029f70
 8024314:	00010040 	.word	0x00010040
 8024318:	0802de98 	.word	0x0802de98
 802431c:	0802a29c 	.word	0x0802a29c
    else if(lv_obj_check_type(obj, &lv_dropdownlist_class)) {
 8024320:	49ba      	ldr	r1, [pc, #744]	@ (802460c <theme_apply+0xc0c>)
 8024322:	4620      	mov	r0, r4
 8024324:	f7f4 fb54 	bl	80189d0 <lv_obj_check_type>
 8024328:	2800      	cmp	r0, #0
 802432a:	d03b      	beq.n	80243a4 <theme_apply+0x9a4>
        lv_obj_add_style(obj, &styles->card, 0);
 802432c:	4db8      	ldr	r5, [pc, #736]	@ (8024610 <theme_apply+0xc10>)
 802432e:	6829      	ldr	r1, [r5, #0]
 8024330:	2200      	movs	r2, #0
 8024332:	3118      	adds	r1, #24
 8024334:	4620      	mov	r0, r4
 8024336:	f7f8 fba9 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 802433a:	6829      	ldr	r1, [r5, #0]
 802433c:	2200      	movs	r2, #0
 802433e:	31c0      	adds	r1, #192	@ 0xc0
 8024340:	4620      	mov	r0, r4
 8024342:	f7f8 fba3 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->line_space_large, 0);
 8024346:	6829      	ldr	r1, [r5, #0]
 8024348:	2200      	movs	r2, #0
 802434a:	3190      	adds	r1, #144	@ 0x90
 802434c:	4620      	mov	r0, r4
 802434e:	f7f8 fb9d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->dropdown_list, 0);
 8024352:	6829      	ldr	r1, [r5, #0]
 8024354:	2200      	movs	r2, #0
 8024356:	f501 7198 	add.w	r1, r1, #304	@ 0x130
 802435a:	4620      	mov	r0, r4
 802435c:	f7f8 fb96 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8024360:	6829      	ldr	r1, [r5, #0]
 8024362:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024366:	3108      	adds	r1, #8
 8024368:	4620      	mov	r0, r4
 802436a:	f7f8 fb8f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 802436e:	6829      	ldr	r1, [r5, #0]
 8024370:	4aa8      	ldr	r2, [pc, #672]	@ (8024614 <theme_apply+0xc14>)
 8024372:	3110      	adds	r1, #16
 8024374:	4620      	mov	r0, r4
 8024376:	f7f8 fb89 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_SELECTED);
 802437a:	6829      	ldr	r1, [r5, #0]
 802437c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8024380:	3150      	adds	r1, #80	@ 0x50
 8024382:	4620      	mov	r0, r4
 8024384:	f7f8 fb82 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_SELECTED | LV_STATE_CHECKED);
 8024388:	6829      	ldr	r1, [r5, #0]
 802438a:	4aa3      	ldr	r2, [pc, #652]	@ (8024618 <theme_apply+0xc18>)
 802438c:	3128      	adds	r1, #40	@ 0x28
 802438e:	4620      	mov	r0, r4
 8024390:	f7f8 fb7c 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_SELECTED | LV_STATE_PRESSED);
 8024394:	6829      	ldr	r1, [r5, #0]
 8024396:	4aa1      	ldr	r2, [pc, #644]	@ (802461c <theme_apply+0xc1c>)
 8024398:	3158      	adds	r1, #88	@ 0x58
 802439a:	4620      	mov	r0, r4
 802439c:	f7f8 fb76 	bl	801ca8c <lv_obj_add_style>
 80243a0:	f7ff bb43 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_arc_class)) {
 80243a4:	499e      	ldr	r1, [pc, #632]	@ (8024620 <theme_apply+0xc20>)
 80243a6:	4620      	mov	r0, r4
 80243a8:	f7f4 fb12 	bl	80189d0 <lv_obj_check_type>
 80243ac:	b300      	cbz	r0, 80243f0 <theme_apply+0x9f0>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 80243ae:	4d98      	ldr	r5, [pc, #608]	@ (8024610 <theme_apply+0xc10>)
 80243b0:	6829      	ldr	r1, [r5, #0]
 80243b2:	2200      	movs	r2, #0
 80243b4:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80243b8:	4620      	mov	r0, r4
 80243ba:	f7f8 fb67 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 80243be:	6829      	ldr	r1, [r5, #0]
 80243c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80243c4:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 80243c8:	4620      	mov	r0, r4
 80243ca:	f7f8 fb5f 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 80243ce:	6829      	ldr	r1, [r5, #0]
 80243d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80243d4:	f501 7184 	add.w	r1, r1, #264	@ 0x108
 80243d8:	4620      	mov	r0, r4
 80243da:	f7f8 fb57 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->knob, LV_PART_KNOB);
 80243de:	6829      	ldr	r1, [r5, #0]
 80243e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80243e4:	31f0      	adds	r1, #240	@ 0xf0
 80243e6:	4620      	mov	r0, r4
 80243e8:	f7f8 fb50 	bl	801ca8c <lv_obj_add_style>
 80243ec:	f7ff bb1d 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_spinner_class)) {
 80243f0:	498c      	ldr	r1, [pc, #560]	@ (8024624 <theme_apply+0xc24>)
 80243f2:	4620      	mov	r0, r4
 80243f4:	f7f4 faec 	bl	80189d0 <lv_obj_check_type>
 80243f8:	b1c8      	cbz	r0, 802442e <theme_apply+0xa2e>
        lv_obj_add_style(obj, &styles->arc_indic, 0);
 80243fa:	4d85      	ldr	r5, [pc, #532]	@ (8024610 <theme_apply+0xc10>)
 80243fc:	6829      	ldr	r1, [r5, #0]
 80243fe:	2200      	movs	r2, #0
 8024400:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8024404:	4620      	mov	r0, r4
 8024406:	f7f8 fb41 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic, LV_PART_INDICATOR);
 802440a:	6829      	ldr	r1, [r5, #0]
 802440c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024410:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8024414:	4620      	mov	r0, r4
 8024416:	f7f8 fb39 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->arc_indic_primary, LV_PART_INDICATOR);
 802441a:	6829      	ldr	r1, [r5, #0]
 802441c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024420:	f501 7184 	add.w	r1, r1, #264	@ 0x108
 8024424:	4620      	mov	r0, r4
 8024426:	f7f8 fb31 	bl	801ca8c <lv_obj_add_style>
 802442a:	f7ff bafe 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_meter_class)) {
 802442e:	497e      	ldr	r1, [pc, #504]	@ (8024628 <theme_apply+0xc28>)
 8024430:	4620      	mov	r0, r4
 8024432:	f7f4 facd 	bl	80189d0 <lv_obj_check_type>
 8024436:	b1b0      	cbz	r0, 8024466 <theme_apply+0xa66>
        lv_obj_add_style(obj, &styles->card, 0);
 8024438:	4d75      	ldr	r5, [pc, #468]	@ (8024610 <theme_apply+0xc10>)
 802443a:	6829      	ldr	r1, [r5, #0]
 802443c:	2200      	movs	r2, #0
 802443e:	3118      	adds	r1, #24
 8024440:	4620      	mov	r0, r4
 8024442:	f7f8 fb23 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->circle, 0);
 8024446:	6829      	ldr	r1, [r5, #0]
 8024448:	2200      	movs	r2, #0
 802444a:	31b0      	adds	r1, #176	@ 0xb0
 802444c:	4620      	mov	r0, r4
 802444e:	f7f8 fb1d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->meter_indic, LV_PART_INDICATOR);
 8024452:	6829      	ldr	r1, [r5, #0]
 8024454:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8024458:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 802445c:	4620      	mov	r0, r4
 802445e:	f7f8 fb15 	bl	801ca8c <lv_obj_add_style>
 8024462:	f7ff bae2 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_textarea_class)) {
 8024466:	4971      	ldr	r1, [pc, #452]	@ (802462c <theme_apply+0xc2c>)
 8024468:	4620      	mov	r0, r4
 802446a:	f7f4 fab1 	bl	80189d0 <lv_obj_check_type>
 802446e:	2800      	cmp	r0, #0
 8024470:	d03c      	beq.n	80244ec <theme_apply+0xaec>
        lv_obj_add_style(obj, &styles->card, 0);
 8024472:	4d67      	ldr	r5, [pc, #412]	@ (8024610 <theme_apply+0xc10>)
 8024474:	6829      	ldr	r1, [r5, #0]
 8024476:	2200      	movs	r2, #0
 8024478:	3118      	adds	r1, #24
 802447a:	4620      	mov	r0, r4
 802447c:	f7f8 fb06 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8024480:	6829      	ldr	r1, [r5, #0]
 8024482:	2200      	movs	r2, #0
 8024484:	3178      	adds	r1, #120	@ 0x78
 8024486:	4620      	mov	r0, r4
 8024488:	f7f8 fb00 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_STATE_DISABLED);
 802448c:	6829      	ldr	r1, [r5, #0]
 802448e:	2280      	movs	r2, #128	@ 0x80
 8024490:	3160      	adds	r1, #96	@ 0x60
 8024492:	4620      	mov	r0, r4
 8024494:	f7f8 fafa 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 8024498:	6829      	ldr	r1, [r5, #0]
 802449a:	2204      	movs	r2, #4
 802449c:	31a0      	adds	r1, #160	@ 0xa0
 802449e:	4620      	mov	r0, r4
 80244a0:	f7f8 faf4 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 80244a4:	6829      	ldr	r1, [r5, #0]
 80244a6:	2208      	movs	r2, #8
 80244a8:	31a8      	adds	r1, #168	@ 0xa8
 80244aa:	4620      	mov	r0, r4
 80244ac:	f7f8 faee 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80244b0:	6829      	ldr	r1, [r5, #0]
 80244b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80244b6:	3108      	adds	r1, #8
 80244b8:	4620      	mov	r0, r4
 80244ba:	f7f8 fae7 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80244be:	6829      	ldr	r1, [r5, #0]
 80244c0:	4a54      	ldr	r2, [pc, #336]	@ (8024614 <theme_apply+0xc14>)
 80244c2:	3110      	adds	r1, #16
 80244c4:	4620      	mov	r0, r4
 80244c6:	f7f8 fae1 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_cursor, LV_PART_CURSOR | LV_STATE_FOCUSED);
 80244ca:	6829      	ldr	r1, [r5, #0]
 80244cc:	4a58      	ldr	r2, [pc, #352]	@ (8024630 <theme_apply+0xc30>)
 80244ce:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 80244d2:	4620      	mov	r0, r4
 80244d4:	f7f8 fada 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->ta_placeholder, LV_PART_TEXTAREA_PLACEHOLDER);
 80244d8:	6829      	ldr	r1, [r5, #0]
 80244da:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80244de:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 80244e2:	4620      	mov	r0, r4
 80244e4:	f7f8 fad2 	bl	801ca8c <lv_obj_add_style>
 80244e8:	f7ff ba9f 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_calendar_class)) {
 80244ec:	4951      	ldr	r1, [pc, #324]	@ (8024634 <theme_apply+0xc34>)
 80244ee:	4620      	mov	r0, r4
 80244f0:	f7f4 fa6e 	bl	80189d0 <lv_obj_check_type>
 80244f4:	b170      	cbz	r0, 8024514 <theme_apply+0xb14>
        lv_obj_add_style(obj, &styles->card, 0);
 80244f6:	4d46      	ldr	r5, [pc, #280]	@ (8024610 <theme_apply+0xc10>)
 80244f8:	6829      	ldr	r1, [r5, #0]
 80244fa:	2200      	movs	r2, #0
 80244fc:	3118      	adds	r1, #24
 80244fe:	4620      	mov	r0, r4
 8024500:	f7f8 fac4 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8024504:	6829      	ldr	r1, [r5, #0]
 8024506:	2200      	movs	r2, #0
 8024508:	3168      	adds	r1, #104	@ 0x68
 802450a:	4620      	mov	r0, r4
 802450c:	f7f8 fabe 	bl	801ca8c <lv_obj_add_style>
 8024510:	f7ff ba8b 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_calendar_header_arrow_class)) {
 8024514:	4948      	ldr	r1, [pc, #288]	@ (8024638 <theme_apply+0xc38>)
 8024516:	4620      	mov	r0, r4
 8024518:	f7f4 fa5a 	bl	80189d0 <lv_obj_check_type>
 802451c:	b148      	cbz	r0, 8024532 <theme_apply+0xb32>
        lv_obj_add_style(obj, &styles->calendar_header, 0);
 802451e:	4b3c      	ldr	r3, [pc, #240]	@ (8024610 <theme_apply+0xc10>)
 8024520:	6819      	ldr	r1, [r3, #0]
 8024522:	2200      	movs	r2, #0
 8024524:	f501 71c8 	add.w	r1, r1, #400	@ 0x190
 8024528:	4620      	mov	r0, r4
 802452a:	f7f8 faaf 	bl	801ca8c <lv_obj_add_style>
 802452e:	f7ff ba7c 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_calendar_header_dropdown_class)) {
 8024532:	4942      	ldr	r1, [pc, #264]	@ (802463c <theme_apply+0xc3c>)
 8024534:	4620      	mov	r0, r4
 8024536:	f7f4 fa4b 	bl	80189d0 <lv_obj_check_type>
 802453a:	b148      	cbz	r0, 8024550 <theme_apply+0xb50>
        lv_obj_add_style(obj, &styles->calendar_header, 0);
 802453c:	4b34      	ldr	r3, [pc, #208]	@ (8024610 <theme_apply+0xc10>)
 802453e:	6819      	ldr	r1, [r3, #0]
 8024540:	2200      	movs	r2, #0
 8024542:	f501 71c8 	add.w	r1, r1, #400	@ 0x190
 8024546:	4620      	mov	r0, r4
 8024548:	f7f8 faa0 	bl	801ca8c <lv_obj_add_style>
 802454c:	f7ff ba6d 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_keyboard_class)) {
 8024550:	493b      	ldr	r1, [pc, #236]	@ (8024640 <theme_apply+0xc40>)
 8024552:	4620      	mov	r0, r4
 8024554:	f7f4 fa3c 	bl	80189d0 <lv_obj_check_type>
 8024558:	2800      	cmp	r0, #0
 802455a:	d07f      	beq.n	802465c <theme_apply+0xc5c>
        lv_obj_add_style(obj, &styles->scr, 0);
 802455c:	2200      	movs	r2, #0
 802455e:	4b2c      	ldr	r3, [pc, #176]	@ (8024610 <theme_apply+0xc10>)
 8024560:	6819      	ldr	r1, [r3, #0]
 8024562:	4620      	mov	r0, r4
 8024564:	f7f8 fa92 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 8024568:	4b36      	ldr	r3, [pc, #216]	@ (8024644 <theme_apply+0xc44>)
 802456a:	781b      	ldrb	r3, [r3, #0]
 802456c:	2b01      	cmp	r3, #1
 802456e:	d049      	beq.n	8024604 <theme_apply+0xc04>
 8024570:	4b27      	ldr	r3, [pc, #156]	@ (8024610 <theme_apply+0xc10>)
 8024572:	6819      	ldr	r1, [r3, #0]
 8024574:	3170      	adds	r1, #112	@ 0x70
 8024576:	2200      	movs	r2, #0
 8024578:	4620      	mov	r0, r4
 802457a:	f7f8 fa87 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 802457e:	4d24      	ldr	r5, [pc, #144]	@ (8024610 <theme_apply+0xc10>)
 8024580:	6829      	ldr	r1, [r5, #0]
 8024582:	2204      	movs	r2, #4
 8024584:	31a0      	adds	r1, #160	@ 0xa0
 8024586:	4620      	mov	r0, r4
 8024588:	f7f8 fa80 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 802458c:	6829      	ldr	r1, [r5, #0]
 802458e:	2208      	movs	r2, #8
 8024590:	31a8      	adds	r1, #168	@ 0xa8
 8024592:	4620      	mov	r0, r4
 8024594:	f7f8 fa7a 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->btn, LV_PART_ITEMS);
 8024598:	6829      	ldr	r1, [r5, #0]
 802459a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 802459e:	3120      	adds	r1, #32
 80245a0:	4620      	mov	r0, r4
 80245a2:	f7f8 fa73 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->disabled, LV_PART_ITEMS | LV_STATE_DISABLED);
 80245a6:	6829      	ldr	r1, [r5, #0]
 80245a8:	4a27      	ldr	r2, [pc, #156]	@ (8024648 <theme_apply+0xc48>)
 80245aa:	3160      	adds	r1, #96	@ 0x60
 80245ac:	4620      	mov	r0, r4
 80245ae:	f7f8 fa6d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_ITEMS);
 80245b2:	6829      	ldr	r1, [r5, #0]
 80245b4:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80245b8:	3150      	adds	r1, #80	@ 0x50
 80245ba:	4620      	mov	r0, r4
 80245bc:	f7f8 fa66 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->keyboard_btn_bg, LV_PART_ITEMS);
 80245c0:	6829      	ldr	r1, [r5, #0]
 80245c2:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80245c6:	f501 7102 	add.w	r1, r1, #520	@ 0x208
 80245ca:	4620      	mov	r0, r4
 80245cc:	f7f8 fa5e 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_PART_ITEMS | LV_STATE_PRESSED);
 80245d0:	6829      	ldr	r1, [r5, #0]
 80245d2:	4a1e      	ldr	r2, [pc, #120]	@ (802464c <theme_apply+0xc4c>)
 80245d4:	3158      	adds	r1, #88	@ 0x58
 80245d6:	4620      	mov	r0, r4
 80245d8:	f7f8 fa58 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_grey, LV_PART_ITEMS | LV_STATE_CHECKED);
 80245dc:	6829      	ldr	r1, [r5, #0]
 80245de:	4a1c      	ldr	r2, [pc, #112]	@ (8024650 <theme_apply+0xc50>)
 80245e0:	3148      	adds	r1, #72	@ 0x48
 80245e2:	4620      	mov	r0, r4
 80245e4:	f7f8 fa52 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_PART_ITEMS | LV_STATE_FOCUS_KEY);
 80245e8:	6829      	ldr	r1, [r5, #0]
 80245ea:	4a1a      	ldr	r2, [pc, #104]	@ (8024654 <theme_apply+0xc54>)
 80245ec:	3130      	adds	r1, #48	@ 0x30
 80245ee:	4620      	mov	r0, r4
 80245f0:	f7f8 fa4c 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_secondary_muted, LV_PART_ITEMS | LV_STATE_EDITED);
 80245f4:	6829      	ldr	r1, [r5, #0]
 80245f6:	4a18      	ldr	r2, [pc, #96]	@ (8024658 <theme_apply+0xc58>)
 80245f8:	3140      	adds	r1, #64	@ 0x40
 80245fa:	4620      	mov	r0, r4
 80245fc:	f7f8 fa46 	bl	801ca8c <lv_obj_add_style>
 8024600:	f7ff ba13 	b.w	8023a2a <theme_apply+0x2a>
        lv_obj_add_style(obj, disp_size == DISP_LARGE ? &styles->pad_small : &styles->pad_tiny, 0);
 8024604:	4b02      	ldr	r3, [pc, #8]	@ (8024610 <theme_apply+0xc10>)
 8024606:	6819      	ldr	r1, [r3, #0]
 8024608:	3178      	adds	r1, #120	@ 0x78
 802460a:	e7b4      	b.n	8024576 <theme_apply+0xb76>
 802460c:	0802a280 	.word	0x0802a280
 8024610:	2000896c 	.word	0x2000896c
 8024614:	00010040 	.word	0x00010040
 8024618:	00040001 	.word	0x00040001
 802461c:	00040020 	.word	0x00040020
 8024620:	080298d4 	.word	0x080298d4
 8024624:	0802deec 	.word	0x0802deec
 8024628:	0802de0c 	.word	0x0802de0c
 802462c:	0802dfd0 	.word	0x0802dfd0
 8024630:	00070002 	.word	0x00070002
 8024634:	08029eec 	.word	0x08029eec
 8024638:	08029f38 	.word	0x08029f38
 802463c:	08029f54 	.word	0x08029f54
 8024640:	0802db94 	.word	0x0802db94
 8024644:	20008946 	.word	0x20008946
 8024648:	00050080 	.word	0x00050080
 802464c:	00050020 	.word	0x00050020
 8024650:	00050001 	.word	0x00050001
 8024654:	00050004 	.word	0x00050004
 8024658:	00050008 	.word	0x00050008
    else if(lv_obj_check_type(obj, &lv_list_class)) {
 802465c:	49ba      	ldr	r1, [pc, #744]	@ (8024948 <theme_apply+0xf48>)
 802465e:	4620      	mov	r0, r4
 8024660:	f7f4 f9b6 	bl	80189d0 <lv_obj_check_type>
 8024664:	b9a0      	cbnz	r0, 8024690 <theme_apply+0xc90>
    else if(lv_obj_check_type(obj, &lv_list_text_class)) {
 8024666:	49b9      	ldr	r1, [pc, #740]	@ (802494c <theme_apply+0xf4c>)
 8024668:	4620      	mov	r0, r4
 802466a:	f7f4 f9b1 	bl	80189d0 <lv_obj_check_type>
 802466e:	b360      	cbz	r0, 80246ca <theme_apply+0xcca>
        lv_obj_add_style(obj, &styles->bg_color_grey, 0);
 8024670:	4db7      	ldr	r5, [pc, #732]	@ (8024950 <theme_apply+0xf50>)
 8024672:	6829      	ldr	r1, [r5, #0]
 8024674:	2200      	movs	r2, #0
 8024676:	3148      	adds	r1, #72	@ 0x48
 8024678:	4620      	mov	r0, r4
 802467a:	f7f8 fa07 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, 0);
 802467e:	6829      	ldr	r1, [r5, #0]
 8024680:	2200      	movs	r2, #0
 8024682:	f501 7108 	add.w	r1, r1, #544	@ 0x220
 8024686:	4620      	mov	r0, r4
 8024688:	f7f8 fa00 	bl	801ca8c <lv_obj_add_style>
 802468c:	f7ff b9cd 	b.w	8023a2a <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->card, 0);
 8024690:	4daf      	ldr	r5, [pc, #700]	@ (8024950 <theme_apply+0xf50>)
 8024692:	6829      	ldr	r1, [r5, #0]
 8024694:	2200      	movs	r2, #0
 8024696:	3118      	adds	r1, #24
 8024698:	4620      	mov	r0, r4
 802469a:	f7f8 f9f7 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_bg, 0);
 802469e:	6829      	ldr	r1, [r5, #0]
 80246a0:	2200      	movs	r2, #0
 80246a2:	f501 7104 	add.w	r1, r1, #528	@ 0x210
 80246a6:	4620      	mov	r0, r4
 80246a8:	f7f8 f9f0 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80246ac:	6829      	ldr	r1, [r5, #0]
 80246ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80246b2:	3108      	adds	r1, #8
 80246b4:	4620      	mov	r0, r4
 80246b6:	f7f8 f9e9 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80246ba:	6829      	ldr	r1, [r5, #0]
 80246bc:	4aa5      	ldr	r2, [pc, #660]	@ (8024954 <theme_apply+0xf54>)
 80246be:	3110      	adds	r1, #16
 80246c0:	4620      	mov	r0, r4
 80246c2:	f7f8 f9e3 	bl	801ca8c <lv_obj_add_style>
        return;
 80246c6:	f7ff b9b0 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_list_btn_class)) {
 80246ca:	49a3      	ldr	r1, [pc, #652]	@ (8024958 <theme_apply+0xf58>)
 80246cc:	4620      	mov	r0, r4
 80246ce:	f7f4 f97f 	bl	80189d0 <lv_obj_check_type>
 80246d2:	b348      	cbz	r0, 8024728 <theme_apply+0xd28>
        lv_obj_add_style(obj, &styles->bg_color_white, 0);
 80246d4:	4d9e      	ldr	r5, [pc, #632]	@ (8024950 <theme_apply+0xf50>)
 80246d6:	6829      	ldr	r1, [r5, #0]
 80246d8:	2200      	movs	r2, #0
 80246da:	3150      	adds	r1, #80	@ 0x50
 80246dc:	4620      	mov	r0, r4
 80246de:	f7f8 f9d5 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_btn, 0);
 80246e2:	6829      	ldr	r1, [r5, #0]
 80246e4:	2200      	movs	r2, #0
 80246e6:	f501 7106 	add.w	r1, r1, #536	@ 0x218
 80246ea:	4620      	mov	r0, r4
 80246ec:	f7f8 f9ce 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 80246f0:	6829      	ldr	r1, [r5, #0]
 80246f2:	2204      	movs	r2, #4
 80246f4:	3128      	adds	r1, #40	@ 0x28
 80246f6:	4620      	mov	r0, r4
 80246f8:	f7f8 f9c8 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_FOCUS_KEY);
 80246fc:	6829      	ldr	r1, [r5, #0]
 80246fe:	2204      	movs	r2, #4
 8024700:	f501 7108 	add.w	r1, r1, #544	@ 0x220
 8024704:	4620      	mov	r0, r4
 8024706:	f7f8 f9c1 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->list_item_grow, LV_STATE_PRESSED);
 802470a:	6829      	ldr	r1, [r5, #0]
 802470c:	2220      	movs	r2, #32
 802470e:	f501 7108 	add.w	r1, r1, #544	@ 0x220
 8024712:	4620      	mov	r0, r4
 8024714:	f7f8 f9ba 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pressed, LV_STATE_PRESSED);
 8024718:	6829      	ldr	r1, [r5, #0]
 802471a:	2220      	movs	r2, #32
 802471c:	3158      	adds	r1, #88	@ 0x58
 802471e:	4620      	mov	r0, r4
 8024720:	f7f8 f9b4 	bl	801ca8c <lv_obj_add_style>
 8024724:	f7ff b981 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_class)) {
 8024728:	498c      	ldr	r1, [pc, #560]	@ (802495c <theme_apply+0xf5c>)
 802472a:	4620      	mov	r0, r4
 802472c:	f7f4 f950 	bl	80189d0 <lv_obj_check_type>
 8024730:	b178      	cbz	r0, 8024752 <theme_apply+0xd52>
        lv_obj_add_style(obj, &styles->card, 0);
 8024732:	4d87      	ldr	r5, [pc, #540]	@ (8024950 <theme_apply+0xf50>)
 8024734:	6829      	ldr	r1, [r5, #0]
 8024736:	2200      	movs	r2, #0
 8024738:	3118      	adds	r1, #24
 802473a:	4620      	mov	r0, r4
 802473c:	f7f8 f9a6 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_bg, 0);
 8024740:	6829      	ldr	r1, [r5, #0]
 8024742:	2200      	movs	r2, #0
 8024744:	f501 71d0 	add.w	r1, r1, #416	@ 0x1a0
 8024748:	4620      	mov	r0, r4
 802474a:	f7f8 f99f 	bl	801ca8c <lv_obj_add_style>
 802474e:	f7ff b96c 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_cont_class)) {
 8024752:	4983      	ldr	r1, [pc, #524]	@ (8024960 <theme_apply+0xf60>)
 8024754:	4620      	mov	r0, r4
 8024756:	f7f4 f93b 	bl	80189d0 <lv_obj_check_type>
 802475a:	b1b0      	cbz	r0, 802478a <theme_apply+0xd8a>
        lv_obj_add_style(obj, &styles->menu_sidebar_cont, 0);
 802475c:	4d7c      	ldr	r5, [pc, #496]	@ (8024950 <theme_apply+0xf50>)
 802475e:	6829      	ldr	r1, [r5, #0]
 8024760:	2200      	movs	r2, #0
 8024762:	f501 71d8 	add.w	r1, r1, #432	@ 0x1b0
 8024766:	4620      	mov	r0, r4
 8024768:	f7f8 f990 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 802476c:	6829      	ldr	r1, [r5, #0]
 802476e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8024772:	3108      	adds	r1, #8
 8024774:	4620      	mov	r0, r4
 8024776:	f7f8 f989 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 802477a:	6829      	ldr	r1, [r5, #0]
 802477c:	4a75      	ldr	r2, [pc, #468]	@ (8024954 <theme_apply+0xf54>)
 802477e:	3110      	adds	r1, #16
 8024780:	4620      	mov	r0, r4
 8024782:	f7f8 f983 	bl	801ca8c <lv_obj_add_style>
 8024786:	f7ff b950 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_main_cont_class)) {
 802478a:	4976      	ldr	r1, [pc, #472]	@ (8024964 <theme_apply+0xf64>)
 802478c:	4620      	mov	r0, r4
 802478e:	f7f4 f91f 	bl	80189d0 <lv_obj_check_type>
 8024792:	b1b0      	cbz	r0, 80247c2 <theme_apply+0xdc2>
        lv_obj_add_style(obj, &styles->menu_main_cont, 0);
 8024794:	4d6e      	ldr	r5, [pc, #440]	@ (8024950 <theme_apply+0xf50>)
 8024796:	6829      	ldr	r1, [r5, #0]
 8024798:	2200      	movs	r2, #0
 802479a:	f501 71dc 	add.w	r1, r1, #440	@ 0x1b8
 802479e:	4620      	mov	r0, r4
 80247a0:	f7f8 f974 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80247a4:	6829      	ldr	r1, [r5, #0]
 80247a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80247aa:	3108      	adds	r1, #8
 80247ac:	4620      	mov	r0, r4
 80247ae:	f7f8 f96d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80247b2:	6829      	ldr	r1, [r5, #0]
 80247b4:	4a67      	ldr	r2, [pc, #412]	@ (8024954 <theme_apply+0xf54>)
 80247b6:	3110      	adds	r1, #16
 80247b8:	4620      	mov	r0, r4
 80247ba:	f7f8 f967 	bl	801ca8c <lv_obj_add_style>
 80247be:	f7ff b934 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_cont_class)) {
 80247c2:	4969      	ldr	r1, [pc, #420]	@ (8024968 <theme_apply+0xf68>)
 80247c4:	4620      	mov	r0, r4
 80247c6:	f7f4 f903 	bl	80189d0 <lv_obj_check_type>
 80247ca:	b310      	cbz	r0, 8024812 <theme_apply+0xe12>
        lv_obj_add_style(obj, &styles->menu_cont, 0);
 80247cc:	4d60      	ldr	r5, [pc, #384]	@ (8024950 <theme_apply+0xf50>)
 80247ce:	6829      	ldr	r1, [r5, #0]
 80247d0:	2200      	movs	r2, #0
 80247d2:	f501 71d4 	add.w	r1, r1, #424	@ 0x1a8
 80247d6:	4620      	mov	r0, r4
 80247d8:	f7f8 f958 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->menu_pressed, LV_STATE_PRESSED);
 80247dc:	6829      	ldr	r1, [r5, #0]
 80247de:	2220      	movs	r2, #32
 80247e0:	f501 71f0 	add.w	r1, r1, #480	@ 0x1e0
 80247e4:	4620      	mov	r0, r4
 80247e6:	f7f8 f951 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_PRESSED | LV_STATE_CHECKED);
 80247ea:	6829      	ldr	r1, [r5, #0]
 80247ec:	2221      	movs	r2, #33	@ 0x21
 80247ee:	3130      	adds	r1, #48	@ 0x30
 80247f0:	4620      	mov	r0, r4
 80247f2:	f7f8 f94b 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary_muted, LV_STATE_CHECKED);
 80247f6:	6829      	ldr	r1, [r5, #0]
 80247f8:	2201      	movs	r2, #1
 80247fa:	3130      	adds	r1, #48	@ 0x30
 80247fc:	4620      	mov	r0, r4
 80247fe:	f7f8 f945 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_STATE_FOCUS_KEY);
 8024802:	6829      	ldr	r1, [r5, #0]
 8024804:	2204      	movs	r2, #4
 8024806:	3128      	adds	r1, #40	@ 0x28
 8024808:	4620      	mov	r0, r4
 802480a:	f7f8 f93f 	bl	801ca8c <lv_obj_add_style>
 802480e:	f7ff b90c 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 8024812:	4956      	ldr	r1, [pc, #344]	@ (802496c <theme_apply+0xf6c>)
 8024814:	4620      	mov	r0, r4
 8024816:	f7f4 f8db 	bl	80189d0 <lv_obj_check_type>
 802481a:	b920      	cbnz	r0, 8024826 <theme_apply+0xe26>
            lv_obj_check_type(obj, &lv_menu_main_header_cont_class)) {
 802481c:	4954      	ldr	r1, [pc, #336]	@ (8024970 <theme_apply+0xf70>)
 802481e:	4620      	mov	r0, r4
 8024820:	f7f4 f8d6 	bl	80189d0 <lv_obj_check_type>
    else if(lv_obj_check_type(obj, &lv_menu_sidebar_header_cont_class) ||
 8024824:	b148      	cbz	r0, 802483a <theme_apply+0xe3a>
        lv_obj_add_style(obj, &styles->menu_header_cont, 0);
 8024826:	4b4a      	ldr	r3, [pc, #296]	@ (8024950 <theme_apply+0xf50>)
 8024828:	6819      	ldr	r1, [r3, #0]
 802482a:	2200      	movs	r2, #0
 802482c:	f501 71e4 	add.w	r1, r1, #456	@ 0x1c8
 8024830:	4620      	mov	r0, r4
 8024832:	f7f8 f92b 	bl	801ca8c <lv_obj_add_style>
 8024836:	f7ff b8f8 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_page_class)) {
 802483a:	494e      	ldr	r1, [pc, #312]	@ (8024974 <theme_apply+0xf74>)
 802483c:	4620      	mov	r0, r4
 802483e:	f7f4 f8c7 	bl	80189d0 <lv_obj_check_type>
 8024842:	b1b0      	cbz	r0, 8024872 <theme_apply+0xe72>
        lv_obj_add_style(obj, &styles->menu_page, 0);
 8024844:	4d42      	ldr	r5, [pc, #264]	@ (8024950 <theme_apply+0xf50>)
 8024846:	6829      	ldr	r1, [r5, #0]
 8024848:	2200      	movs	r2, #0
 802484a:	f501 71e0 	add.w	r1, r1, #448	@ 0x1c0
 802484e:	4620      	mov	r0, r4
 8024850:	f7f8 f91c 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 8024854:	6829      	ldr	r1, [r5, #0]
 8024856:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802485a:	3108      	adds	r1, #8
 802485c:	4620      	mov	r0, r4
 802485e:	f7f8 f915 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 8024862:	6829      	ldr	r1, [r5, #0]
 8024864:	4a3b      	ldr	r2, [pc, #236]	@ (8024954 <theme_apply+0xf54>)
 8024866:	3110      	adds	r1, #16
 8024868:	4620      	mov	r0, r4
 802486a:	f7f8 f90f 	bl	801ca8c <lv_obj_add_style>
 802486e:	f7ff b8dc 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_section_class)) {
 8024872:	4941      	ldr	r1, [pc, #260]	@ (8024978 <theme_apply+0xf78>)
 8024874:	4620      	mov	r0, r4
 8024876:	f7f4 f8ab 	bl	80189d0 <lv_obj_check_type>
 802487a:	b148      	cbz	r0, 8024890 <theme_apply+0xe90>
        lv_obj_add_style(obj, &styles->menu_section, 0);
 802487c:	4b34      	ldr	r3, [pc, #208]	@ (8024950 <theme_apply+0xf50>)
 802487e:	6819      	ldr	r1, [r3, #0]
 8024880:	2200      	movs	r2, #0
 8024882:	f501 71ec 	add.w	r1, r1, #472	@ 0x1d8
 8024886:	4620      	mov	r0, r4
 8024888:	f7f8 f900 	bl	801ca8c <lv_obj_add_style>
 802488c:	f7ff b8cd 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_menu_separator_class)) {
 8024890:	493a      	ldr	r1, [pc, #232]	@ (802497c <theme_apply+0xf7c>)
 8024892:	4620      	mov	r0, r4
 8024894:	f7f4 f89c 	bl	80189d0 <lv_obj_check_type>
 8024898:	b148      	cbz	r0, 80248ae <theme_apply+0xeae>
        lv_obj_add_style(obj, &styles->menu_separator, 0);
 802489a:	4b2d      	ldr	r3, [pc, #180]	@ (8024950 <theme_apply+0xf50>)
 802489c:	6819      	ldr	r1, [r3, #0]
 802489e:	2200      	movs	r2, #0
 80248a0:	f501 71f4 	add.w	r1, r1, #488	@ 0x1e8
 80248a4:	4620      	mov	r0, r4
 80248a6:	f7f8 f8f1 	bl	801ca8c <lv_obj_add_style>
 80248aa:	f7ff b8be 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_msgbox_class)) {
 80248ae:	4934      	ldr	r1, [pc, #208]	@ (8024980 <theme_apply+0xf80>)
 80248b0:	4620      	mov	r0, r4
 80248b2:	f7f4 f88d 	bl	80189d0 <lv_obj_check_type>
 80248b6:	b178      	cbz	r0, 80248d8 <theme_apply+0xed8>
        lv_obj_add_style(obj, &styles->card, 0);
 80248b8:	4d25      	ldr	r5, [pc, #148]	@ (8024950 <theme_apply+0xf50>)
 80248ba:	6829      	ldr	r1, [r5, #0]
 80248bc:	2200      	movs	r2, #0
 80248be:	3118      	adds	r1, #24
 80248c0:	4620      	mov	r0, r4
 80248c2:	f7f8 f8e3 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->msgbox_bg, 0);
 80248c6:	6829      	ldr	r1, [r5, #0]
 80248c8:	2200      	movs	r2, #0
 80248ca:	f501 71f8 	add.w	r1, r1, #496	@ 0x1f0
 80248ce:	4620      	mov	r0, r4
 80248d0:	f7f8 f8dc 	bl	801ca8c <lv_obj_add_style>
        return;
 80248d4:	f7ff b8a9 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_msgbox_backdrop_class)) {
 80248d8:	492a      	ldr	r1, [pc, #168]	@ (8024984 <theme_apply+0xf84>)
 80248da:	4620      	mov	r0, r4
 80248dc:	f7f4 f878 	bl	80189d0 <lv_obj_check_type>
 80248e0:	b148      	cbz	r0, 80248f6 <theme_apply+0xef6>
        lv_obj_add_style(obj, &styles->msgbox_backdrop_bg, 0);
 80248e2:	4b1b      	ldr	r3, [pc, #108]	@ (8024950 <theme_apply+0xf50>)
 80248e4:	6819      	ldr	r1, [r3, #0]
 80248e6:	2200      	movs	r2, #0
 80248e8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80248ec:	4620      	mov	r0, r4
 80248ee:	f7f8 f8cd 	bl	801ca8c <lv_obj_add_style>
 80248f2:	f7ff b89a 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_spinbox_class)) {
 80248f6:	4924      	ldr	r1, [pc, #144]	@ (8024988 <theme_apply+0xf88>)
 80248f8:	4620      	mov	r0, r4
 80248fa:	f7f4 f869 	bl	80189d0 <lv_obj_check_type>
 80248fe:	2800      	cmp	r0, #0
 8024900:	d044      	beq.n	802498c <theme_apply+0xf8c>
        lv_obj_add_style(obj, &styles->card, 0);
 8024902:	4d13      	ldr	r5, [pc, #76]	@ (8024950 <theme_apply+0xf50>)
 8024904:	6829      	ldr	r1, [r5, #0]
 8024906:	2200      	movs	r2, #0
 8024908:	3118      	adds	r1, #24
 802490a:	4620      	mov	r0, r4
 802490c:	f7f8 f8be 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_small, 0);
 8024910:	6829      	ldr	r1, [r5, #0]
 8024912:	2200      	movs	r2, #0
 8024914:	3178      	adds	r1, #120	@ 0x78
 8024916:	4620      	mov	r0, r4
 8024918:	f7f8 f8b8 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_primary, LV_STATE_FOCUS_KEY);
 802491c:	6829      	ldr	r1, [r5, #0]
 802491e:	2204      	movs	r2, #4
 8024920:	31a0      	adds	r1, #160	@ 0xa0
 8024922:	4620      	mov	r0, r4
 8024924:	f7f8 f8b2 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->outline_secondary, LV_STATE_EDITED);
 8024928:	6829      	ldr	r1, [r5, #0]
 802492a:	2208      	movs	r2, #8
 802492c:	31a8      	adds	r1, #168	@ 0xa8
 802492e:	4620      	mov	r0, r4
 8024930:	f7f8 f8ac 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_primary, LV_PART_CURSOR);
 8024934:	6829      	ldr	r1, [r5, #0]
 8024936:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 802493a:	3128      	adds	r1, #40	@ 0x28
 802493c:	4620      	mov	r0, r4
 802493e:	f7f8 f8a5 	bl	801ca8c <lv_obj_add_style>
 8024942:	f7ff b872 	b.w	8023a2a <theme_apply+0x2a>
 8024946:	bf00      	nop
 8024948:	0802dc3c 	.word	0x0802dc3c
 802494c:	0802dc04 	.word	0x0802dc04
 8024950:	2000896c 	.word	0x2000896c
 8024954:	00010040 	.word	0x00010040
 8024958:	0802dc20 	.word	0x0802dc20
 802495c:	0802ddf0 	.word	0x0802ddf0
 8024960:	0802dd64 	.word	0x0802dd64
 8024964:	0802dd48 	.word	0x0802dd48
 8024968:	0802ddb8 	.word	0x0802ddb8
 802496c:	0802dd10 	.word	0x0802dd10
 8024970:	0802dd2c 	.word	0x0802dd2c
 8024974:	0802ddd4 	.word	0x0802ddd4
 8024978:	0802dd9c 	.word	0x0802dd9c
 802497c:	0802dd80 	.word	0x0802dd80
 8024980:	0802de44 	.word	0x0802de44
 8024984:	0802de28 	.word	0x0802de28
 8024988:	0802ded0 	.word	0x0802ded0
    else if(lv_obj_check_type(obj, &lv_tileview_class)) {
 802498c:	4941      	ldr	r1, [pc, #260]	@ (8024a94 <theme_apply+0x1094>)
 802498e:	4620      	mov	r0, r4
 8024990:	f7f4 f81e 	bl	80189d0 <lv_obj_check_type>
 8024994:	b1a0      	cbz	r0, 80249c0 <theme_apply+0xfc0>
        lv_obj_add_style(obj, &styles->scr, 0);
 8024996:	4d40      	ldr	r5, [pc, #256]	@ (8024a98 <theme_apply+0x1098>)
 8024998:	2200      	movs	r2, #0
 802499a:	6829      	ldr	r1, [r5, #0]
 802499c:	4620      	mov	r0, r4
 802499e:	f7f8 f875 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80249a2:	6829      	ldr	r1, [r5, #0]
 80249a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80249a8:	3108      	adds	r1, #8
 80249aa:	4620      	mov	r0, r4
 80249ac:	f7f8 f86e 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80249b0:	6829      	ldr	r1, [r5, #0]
 80249b2:	4a3a      	ldr	r2, [pc, #232]	@ (8024a9c <theme_apply+0x109c>)
 80249b4:	3110      	adds	r1, #16
 80249b6:	4620      	mov	r0, r4
 80249b8:	f7f8 f868 	bl	801ca8c <lv_obj_add_style>
 80249bc:	f7ff b835 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tileview_tile_class)) {
 80249c0:	4937      	ldr	r1, [pc, #220]	@ (8024aa0 <theme_apply+0x10a0>)
 80249c2:	4620      	mov	r0, r4
 80249c4:	f7f4 f804 	bl	80189d0 <lv_obj_check_type>
 80249c8:	b178      	cbz	r0, 80249ea <theme_apply+0xfea>
        lv_obj_add_style(obj, &styles->scrollbar, LV_PART_SCROLLBAR);
 80249ca:	4d33      	ldr	r5, [pc, #204]	@ (8024a98 <theme_apply+0x1098>)
 80249cc:	6829      	ldr	r1, [r5, #0]
 80249ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80249d2:	3108      	adds	r1, #8
 80249d4:	4620      	mov	r0, r4
 80249d6:	f7f8 f859 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->scrollbar_scrolled, LV_PART_SCROLLBAR | LV_STATE_SCROLLED);
 80249da:	6829      	ldr	r1, [r5, #0]
 80249dc:	4a2f      	ldr	r2, [pc, #188]	@ (8024a9c <theme_apply+0x109c>)
 80249de:	3110      	adds	r1, #16
 80249e0:	4620      	mov	r0, r4
 80249e2:	f7f8 f853 	bl	801ca8c <lv_obj_add_style>
 80249e6:	f7ff b820 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_tabview_class)) {
 80249ea:	492e      	ldr	r1, [pc, #184]	@ (8024aa4 <theme_apply+0x10a4>)
 80249ec:	4620      	mov	r0, r4
 80249ee:	f7f3 ffef 	bl	80189d0 <lv_obj_check_type>
 80249f2:	b168      	cbz	r0, 8024a10 <theme_apply+0x1010>
        lv_obj_add_style(obj, &styles->scr, 0);
 80249f4:	4d28      	ldr	r5, [pc, #160]	@ (8024a98 <theme_apply+0x1098>)
 80249f6:	2200      	movs	r2, #0
 80249f8:	6829      	ldr	r1, [r5, #0]
 80249fa:	4620      	mov	r0, r4
 80249fc:	f7f8 f846 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_zero, 0);
 8024a00:	6829      	ldr	r1, [r5, #0]
 8024a02:	2200      	movs	r2, #0
 8024a04:	3168      	adds	r1, #104	@ 0x68
 8024a06:	4620      	mov	r0, r4
 8024a08:	f7f8 f840 	bl	801ca8c <lv_obj_add_style>
 8024a0c:	f7ff b80d 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_win_class)) {
 8024a10:	4925      	ldr	r1, [pc, #148]	@ (8024aa8 <theme_apply+0x10a8>)
 8024a12:	4620      	mov	r0, r4
 8024a14:	f7f3 ffdc 	bl	80189d0 <lv_obj_check_type>
 8024a18:	b140      	cbz	r0, 8024a2c <theme_apply+0x102c>
        lv_obj_add_style(obj, &styles->clip_corner, 0);
 8024a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8024a98 <theme_apply+0x1098>)
 8024a1c:	6819      	ldr	r1, [r3, #0]
 8024a1e:	2200      	movs	r2, #0
 8024a20:	31c0      	adds	r1, #192	@ 0xc0
 8024a22:	4620      	mov	r0, r4
 8024a24:	f7f8 f832 	bl	801ca8c <lv_obj_add_style>
 8024a28:	f7fe bfff 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_colorwheel_class)) {
 8024a2c:	491f      	ldr	r1, [pc, #124]	@ (8024aac <theme_apply+0x10ac>)
 8024a2e:	4620      	mov	r0, r4
 8024a30:	f7f3 ffce 	bl	80189d0 <lv_obj_check_type>
 8024a34:	b1e8      	cbz	r0, 8024a72 <theme_apply+0x1072>
        lv_obj_add_style(obj, &styles->colorwheel_main, 0);
 8024a36:	4d18      	ldr	r5, [pc, #96]	@ (8024a98 <theme_apply+0x1098>)
 8024a38:	6829      	ldr	r1, [r5, #0]
 8024a3a:	2200      	movs	r2, #0
 8024a3c:	f501 71cc 	add.w	r1, r1, #408	@ 0x198
 8024a40:	4620      	mov	r0, r4
 8024a42:	f7f8 f823 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, 0);
 8024a46:	6829      	ldr	r1, [r5, #0]
 8024a48:	2200      	movs	r2, #0
 8024a4a:	3180      	adds	r1, #128	@ 0x80
 8024a4c:	4620      	mov	r0, r4
 8024a4e:	f7f8 f81d 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->bg_color_white, LV_PART_KNOB);
 8024a52:	6829      	ldr	r1, [r5, #0]
 8024a54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8024a58:	3150      	adds	r1, #80	@ 0x50
 8024a5a:	4620      	mov	r0, r4
 8024a5c:	f7f8 f816 	bl	801ca8c <lv_obj_add_style>
        lv_obj_add_style(obj, &styles->pad_normal, LV_PART_KNOB);
 8024a60:	6829      	ldr	r1, [r5, #0]
 8024a62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8024a66:	3180      	adds	r1, #128	@ 0x80
 8024a68:	4620      	mov	r0, r4
 8024a6a:	f7f8 f80f 	bl	801ca8c <lv_obj_add_style>
 8024a6e:	f7fe bfdc 	b.w	8023a2a <theme_apply+0x2a>
    else if(lv_obj_check_type(obj, &lv_led_class)) {
 8024a72:	490f      	ldr	r1, [pc, #60]	@ (8024ab0 <theme_apply+0x10b0>)
 8024a74:	4620      	mov	r0, r4
 8024a76:	f7f3 ffab 	bl	80189d0 <lv_obj_check_type>
 8024a7a:	2800      	cmp	r0, #0
 8024a7c:	f43e afd5 	beq.w	8023a2a <theme_apply+0x2a>
        lv_obj_add_style(obj, &styles->led, 0);
 8024a80:	4b05      	ldr	r3, [pc, #20]	@ (8024a98 <theme_apply+0x1098>)
 8024a82:	6819      	ldr	r1, [r3, #0]
 8024a84:	2200      	movs	r2, #0
 8024a86:	f501 7110 	add.w	r1, r1, #576	@ 0x240
 8024a8a:	4620      	mov	r0, r4
 8024a8c:	f7f7 fffe 	bl	801ca8c <lv_obj_add_style>
 8024a90:	f7fe bfcb 	b.w	8023a2a <theme_apply+0x2a>
 8024a94:	0802e020 	.word	0x0802e020
 8024a98:	2000896c 	.word	0x2000896c
 8024a9c:	00010040 	.word	0x00010040
 8024aa0:	0802e004 	.word	0x0802e004
 8024aa4:	0802dfb4 	.word	0x0802dfb4
 8024aa8:	0802e03c 	.word	0x0802e03c
 8024aac:	0802a128 	.word	0x0802a128
 8024ab0:	0802dbcc 	.word	0x0802dbcc

08024ab4 <grey_filter_cb>:
{
 8024ab4:	b538      	push	{r3, r4, r5, lr}
 8024ab6:	460c      	mov	r4, r1
 8024ab8:	4615      	mov	r5, r2
    if(theme.flags & MODE_DARK) return lv_color_mix(lv_palette_darken(LV_PALETTE_GREY, 2), color, opa);
 8024aba:	4b0b      	ldr	r3, [pc, #44]	@ (8024ae8 <grey_filter_cb+0x34>)
 8024abc:	6a1b      	ldr	r3, [r3, #32]
 8024abe:	f013 0f01 	tst.w	r3, #1
 8024ac2:	d008      	beq.n	8024ad6 <grey_filter_cb+0x22>
 8024ac4:	2102      	movs	r1, #2
 8024ac6:	2012      	movs	r0, #18
 8024ac8:	f7e1 ff90 	bl	80069ec <lv_palette_darken>
 8024acc:	462a      	mov	r2, r5
 8024ace:	4621      	mov	r1, r4
 8024ad0:	f7fe ff70 	bl	80239b4 <lv_color_mix>
}
 8024ad4:	bd38      	pop	{r3, r4, r5, pc}
    else return lv_color_mix(lv_palette_lighten(LV_PALETTE_GREY, 2), color, opa);
 8024ad6:	2102      	movs	r1, #2
 8024ad8:	2012      	movs	r0, #18
 8024ada:	f7e1 ff61 	bl	80069a0 <lv_palette_lighten>
 8024ade:	462a      	mov	r2, r5
 8024ae0:	4621      	mov	r1, r4
 8024ae2:	f7fe ff67 	bl	80239b4 <lv_color_mix>
 8024ae6:	e7f5      	b.n	8024ad4 <grey_filter_cb+0x20>
 8024ae8:	20008948 	.word	0x20008948

08024aec <lv_style_set_pad_gap>:
    lv_style_set_pad_top(style, value);
    lv_style_set_pad_bottom(style, value);
}

static inline void lv_style_set_pad_gap(lv_style_t * style, lv_coord_t value)
{
 8024aec:	b538      	push	{r3, r4, r5, lr}
 8024aee:	4604      	mov	r4, r0
 8024af0:	460d      	mov	r5, r1
    lv_style_set_pad_row(style, value);
 8024af2:	f7fc fbbb 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(style, value);
 8024af6:	4629      	mov	r1, r5
 8024af8:	4620      	mov	r0, r4
 8024afa:	f7fc fbbd 	bl	8021278 <lv_style_set_pad_column>
}
 8024afe:	bd38      	pop	{r3, r4, r5, pc}

08024b00 <lv_disp_dpx>:
 * @param obj   a display whose dpi should be considered
 * @param n     the number of pixels to scale
 * @return      `n x current_dpi/160`
 */
static inline lv_coord_t lv_disp_dpx(const lv_disp_t * disp, lv_coord_t n)
{
 8024b00:	b538      	push	{r3, r4, r5, lr}
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8024b02:	460c      	mov	r4, r1
 8024b04:	b909      	cbnz	r1, 8024b0a <lv_disp_dpx+0xa>
}
 8024b06:	4620      	mov	r0, r4
 8024b08:	bd38      	pop	{r3, r4, r5, pc}
 8024b0a:	4605      	mov	r5, r0
    return _LV_DPX_CALC(lv_disp_get_dpi(disp), n);
 8024b0c:	f7ee fbec 	bl	80132e8 <lv_disp_get_dpi>
 8024b10:	fb04 f000 	mul.w	r0, r4, r0
 8024b14:	28ef      	cmp	r0, #239	@ 0xef
 8024b16:	dc01      	bgt.n	8024b1c <lv_disp_dpx+0x1c>
 8024b18:	2401      	movs	r4, #1
 8024b1a:	e7f4      	b.n	8024b06 <lv_disp_dpx+0x6>
 8024b1c:	4628      	mov	r0, r5
 8024b1e:	f7ee fbe3 	bl	80132e8 <lv_disp_get_dpi>
 8024b22:	fb00 f404 	mul.w	r4, r0, r4
 8024b26:	3450      	adds	r4, #80	@ 0x50
 8024b28:	4b03      	ldr	r3, [pc, #12]	@ (8024b38 <lv_disp_dpx+0x38>)
 8024b2a:	fb83 2304 	smull	r2, r3, r3, r4
 8024b2e:	17e4      	asrs	r4, r4, #31
 8024b30:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
 8024b34:	b224      	sxth	r4, r4
 8024b36:	e7e6      	b.n	8024b06 <lv_disp_dpx+0x6>
 8024b38:	66666667 	.word	0x66666667

08024b3c <lv_style_set_pad_ver>:
{
 8024b3c:	b538      	push	{r3, r4, r5, lr}
 8024b3e:	4604      	mov	r4, r0
 8024b40:	460d      	mov	r5, r1
    lv_style_set_pad_top(style, value);
 8024b42:	f7fc fb7b 	bl	802123c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8024b46:	4629      	mov	r1, r5
 8024b48:	4620      	mov	r0, r4
 8024b4a:	f7fc fb7d 	bl	8021248 <lv_style_set_pad_bottom>
}
 8024b4e:	bd38      	pop	{r3, r4, r5, pc}

08024b50 <dark_color_filter_cb>:
{
 8024b50:	b508      	push	{r3, lr}
 8024b52:	4608      	mov	r0, r1
    return lv_color_darken(c, opa);
 8024b54:	4611      	mov	r1, r2
 8024b56:	f7e1 fe74 	bl	8006842 <lv_color_darken>
}
 8024b5a:	bd08      	pop	{r3, pc}

08024b5c <lv_style_set_size>:
{
 8024b5c:	b538      	push	{r3, r4, r5, lr}
 8024b5e:	4604      	mov	r4, r0
 8024b60:	460d      	mov	r5, r1
    lv_style_set_width(style, value);
 8024b62:	f7fc fb47 	bl	80211f4 <lv_style_set_width>
    lv_style_set_height(style, value);
 8024b66:	4629      	mov	r1, r5
 8024b68:	4620      	mov	r0, r4
 8024b6a:	f7fc fb4f 	bl	802120c <lv_style_set_height>
}
 8024b6e:	bd38      	pop	{r3, r4, r5, pc}

08024b70 <lv_style_set_pad_hor>:
{
 8024b70:	b538      	push	{r3, r4, r5, lr}
 8024b72:	4604      	mov	r4, r0
 8024b74:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 8024b76:	f7fc fb6d 	bl	8021254 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8024b7a:	4629      	mov	r1, r5
 8024b7c:	4620      	mov	r0, r4
 8024b7e:	f7fc fb6f 	bl	8021260 <lv_style_set_pad_right>
}
 8024b82:	bd38      	pop	{r3, r4, r5, pc}

08024b84 <lv_style_set_pad_all>:
{
 8024b84:	b538      	push	{r3, r4, r5, lr}
 8024b86:	4604      	mov	r4, r0
 8024b88:	460d      	mov	r5, r1
    lv_style_set_pad_left(style, value);
 8024b8a:	f7fc fb63 	bl	8021254 <lv_style_set_pad_left>
    lv_style_set_pad_right(style, value);
 8024b8e:	4629      	mov	r1, r5
 8024b90:	4620      	mov	r0, r4
 8024b92:	f7fc fb65 	bl	8021260 <lv_style_set_pad_right>
    lv_style_set_pad_top(style, value);
 8024b96:	4629      	mov	r1, r5
 8024b98:	4620      	mov	r0, r4
 8024b9a:	f7fc fb4f 	bl	802123c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(style, value);
 8024b9e:	4629      	mov	r1, r5
 8024ba0:	4620      	mov	r0, r4
 8024ba2:	f7fc fb51 	bl	8021248 <lv_style_set_pad_bottom>
}
 8024ba6:	bd38      	pop	{r3, r4, r5, pc}

08024ba8 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
 8024ba8:	b508      	push	{r3, lr}
    if(inited) {
 8024baa:	4b04      	ldr	r3, [pc, #16]	@ (8024bbc <style_init_reset+0x14>)
 8024bac:	781b      	ldrb	r3, [r3, #0]
 8024bae:	b113      	cbz	r3, 8024bb6 <style_init_reset+0xe>
        lv_style_reset(style);
 8024bb0:	f7fc f8ae 	bl	8020d10 <lv_style_reset>
    }
    else {
        lv_style_init(style);
    }
}
 8024bb4:	bd08      	pop	{r3, pc}
        lv_style_init(style);
 8024bb6:	f7fc f8a6 	bl	8020d06 <lv_style_init>
}
 8024bba:	e7fb      	b.n	8024bb4 <style_init_reset+0xc>
 8024bbc:	20008934 	.word	0x20008934

08024bc0 <style_init>:
{
 8024bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024bc4:	b083      	sub	sp, #12
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8024bc6:	4bbe      	ldr	r3, [pc, #760]	@ (8024ec0 <style_init+0x300>)
 8024bc8:	6a1b      	ldr	r3, [r3, #32]
 8024bca:	f013 0f01 	tst.w	r3, #1
 8024bce:	f001 820c 	beq.w	8025fea <style_init+0x142a>
 8024bd2:	f24a 3210 	movw	r2, #41744	@ 0xa310
 8024bd6:	4bbb      	ldr	r3, [pc, #748]	@ (8024ec4 <style_init+0x304>)
 8024bd8:	801a      	strh	r2, [r3, #0]
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8024bda:	4bb9      	ldr	r3, [pc, #740]	@ (8024ec0 <style_init+0x300>)
 8024bdc:	6a1b      	ldr	r3, [r3, #32]
 8024bde:	f013 0f01 	tst.w	r3, #1
 8024be2:	f001 820a 	beq.w	8025ffa <style_init+0x143a>
 8024be6:	2105      	movs	r1, #5
 8024be8:	2012      	movs	r0, #18
 8024bea:	f7e1 fed9 	bl	80069a0 <lv_palette_lighten>
 8024bee:	4bb6      	ldr	r3, [pc, #728]	@ (8024ec8 <style_init+0x308>)
 8024bf0:	8018      	strh	r0, [r3, #0]
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 8024bf2:	4bb3      	ldr	r3, [pc, #716]	@ (8024ec0 <style_init+0x300>)
 8024bf4:	6a1b      	ldr	r3, [r3, #32]
 8024bf6:	f013 0301 	ands.w	r3, r3, #1
 8024bfa:	f001 8206 	beq.w	802600a <style_init+0x144a>
 8024bfe:	f244 6129 	movw	r1, #17961	@ 0x4629
 8024c02:	4ab2      	ldr	r2, [pc, #712]	@ (8024ecc <style_init+0x30c>)
 8024c04:	8011      	strh	r1, [r2, #0]
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 8024c06:	2b00      	cmp	r3, #0
 8024c08:	f001 8205 	beq.w	8026016 <style_init+0x1456>
 8024c0c:	f248 6229 	movw	r2, #34345	@ 0x8629
 8024c10:	4baf      	ldr	r3, [pc, #700]	@ (8024ed0 <style_init+0x310>)
 8024c12:	801a      	strh	r2, [r3, #0]
    style_init_reset(&styles->transition_delayed);
 8024c14:	4caf      	ldr	r4, [pc, #700]	@ (8024ed4 <style_init+0x314>)
 8024c16:	6820      	ldr	r0, [r4, #0]
 8024c18:	30d0      	adds	r0, #208	@ 0xd0
 8024c1a:	f7ff ffc5 	bl	8024ba8 <style_init_reset>
    style_init_reset(&styles->transition_normal);
 8024c1e:	6820      	ldr	r0, [r4, #0]
 8024c20:	30d8      	adds	r0, #216	@ 0xd8
 8024c22:	f7ff ffc1 	bl	8024ba8 <style_init_reset>
    lv_style_transition_dsc_init(&trans_delayed, trans_props, lv_anim_path_linear, TRANSITION_TIME, 70, NULL);
 8024c26:	f8df 92bc 	ldr.w	r9, [pc, #700]	@ 8024ee4 <style_init+0x324>
 8024c2a:	f8df 82bc 	ldr.w	r8, [pc, #700]	@ 8024ee8 <style_init+0x328>
 8024c2e:	4faa      	ldr	r7, [pc, #680]	@ (8024ed8 <style_init+0x318>)
 8024c30:	2500      	movs	r5, #0
 8024c32:	9501      	str	r5, [sp, #4]
 8024c34:	2346      	movs	r3, #70	@ 0x46
 8024c36:	9300      	str	r3, [sp, #0]
 8024c38:	2350      	movs	r3, #80	@ 0x50
 8024c3a:	464a      	mov	r2, r9
 8024c3c:	4641      	mov	r1, r8
 8024c3e:	4638      	mov	r0, r7
 8024c40:	f7fc f91e 	bl	8020e80 <lv_style_transition_dsc_init>
    lv_style_transition_dsc_init(&trans_normal, trans_props, lv_anim_path_linear, TRANSITION_TIME, 0, NULL);
 8024c44:	4ea5      	ldr	r6, [pc, #660]	@ (8024edc <style_init+0x31c>)
 8024c46:	9501      	str	r5, [sp, #4]
 8024c48:	9500      	str	r5, [sp, #0]
 8024c4a:	2350      	movs	r3, #80	@ 0x50
 8024c4c:	464a      	mov	r2, r9
 8024c4e:	4641      	mov	r1, r8
 8024c50:	4630      	mov	r0, r6
 8024c52:	f7fc f915 	bl	8020e80 <lv_style_transition_dsc_init>
    lv_style_set_transition(&styles->transition_delayed, &trans_delayed); /*Go back to default state with delay*/
 8024c56:	6820      	ldr	r0, [r4, #0]
 8024c58:	4639      	mov	r1, r7
 8024c5a:	30d0      	adds	r0, #208	@ 0xd0
 8024c5c:	f7fc fbd2 	bl	8021404 <lv_style_set_transition>
    lv_style_set_transition(&styles->transition_normal, &trans_normal); /*Go back to default state with delay*/
 8024c60:	6820      	ldr	r0, [r4, #0]
 8024c62:	4631      	mov	r1, r6
 8024c64:	30d8      	adds	r0, #216	@ 0xd8
 8024c66:	f7fc fbcd 	bl	8021404 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar);
 8024c6a:	6820      	ldr	r0, [r4, #0]
 8024c6c:	3008      	adds	r0, #8
 8024c6e:	f7ff ff9b 	bl	8024ba8 <style_init_reset>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 8024c72:	4b93      	ldr	r3, [pc, #588]	@ (8024ec0 <style_init+0x300>)
 8024c74:	6a1b      	ldr	r3, [r3, #32]
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 8024c76:	f013 0f01 	tst.w	r3, #1
 8024c7a:	f001 81d4 	beq.w	8026026 <style_init+0x1466>
    lv_color_t sb_color = (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 8024c7e:	2102      	movs	r1, #2
 8024c80:	2012      	movs	r0, #18
 8024c82:	f7e1 feb3 	bl	80069ec <lv_palette_darken>
 8024c86:	4601      	mov	r1, r0
    lv_style_set_bg_color(&styles->scrollbar, sb_color);
 8024c88:	4c92      	ldr	r4, [pc, #584]	@ (8024ed4 <style_init+0x314>)
 8024c8a:	6820      	ldr	r0, [r4, #0]
 8024c8c:	3008      	adds	r0, #8
 8024c8e:	f7fc faf9 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_radius(&styles->scrollbar, LV_RADIUS_CIRCLE);
 8024c92:	6820      	ldr	r0, [r4, #0]
 8024c94:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8024c98:	3008      	adds	r0, #8
 8024c9a:	f7fc fb95 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_pad_all(&styles->scrollbar, lv_disp_dpx(theme.disp, 7));
 8024c9e:	6826      	ldr	r6, [r4, #0]
 8024ca0:	4d87      	ldr	r5, [pc, #540]	@ (8024ec0 <style_init+0x300>)
 8024ca2:	2107      	movs	r1, #7
 8024ca4:	68e8      	ldr	r0, [r5, #12]
 8024ca6:	f7ff ff2b 	bl	8024b00 <lv_disp_dpx>
 8024caa:	4601      	mov	r1, r0
 8024cac:	f106 0008 	add.w	r0, r6, #8
 8024cb0:	f7ff ff68 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_width(&styles->scrollbar,  lv_disp_dpx(theme.disp, 5));
 8024cb4:	6826      	ldr	r6, [r4, #0]
 8024cb6:	2105      	movs	r1, #5
 8024cb8:	68e8      	ldr	r0, [r5, #12]
 8024cba:	f7ff ff21 	bl	8024b00 <lv_disp_dpx>
 8024cbe:	4601      	mov	r1, r0
 8024cc0:	f106 0008 	add.w	r0, r6, #8
 8024cc4:	f7fc fa96 	bl	80211f4 <lv_style_set_width>
    lv_style_set_bg_opa(&styles->scrollbar,  LV_OPA_40);
 8024cc8:	6820      	ldr	r0, [r4, #0]
 8024cca:	2166      	movs	r1, #102	@ 0x66
 8024ccc:	3008      	adds	r0, #8
 8024cce:	f7fc fadf 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_transition(&styles->scrollbar, &trans_normal);
 8024cd2:	6820      	ldr	r0, [r4, #0]
 8024cd4:	4981      	ldr	r1, [pc, #516]	@ (8024edc <style_init+0x31c>)
 8024cd6:	3008      	adds	r0, #8
 8024cd8:	f7fc fb94 	bl	8021404 <lv_style_set_transition>
    style_init_reset(&styles->scrollbar_scrolled);
 8024cdc:	6820      	ldr	r0, [r4, #0]
 8024cde:	3010      	adds	r0, #16
 8024ce0:	f7ff ff62 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_opa(&styles->scrollbar_scrolled,  LV_OPA_COVER);
 8024ce4:	6820      	ldr	r0, [r4, #0]
 8024ce6:	21ff      	movs	r1, #255	@ 0xff
 8024ce8:	3010      	adds	r0, #16
 8024cea:	f7fc fad1 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->scr);
 8024cee:	6820      	ldr	r0, [r4, #0]
 8024cf0:	f7ff ff5a 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_opa(&styles->scr, LV_OPA_COVER);
 8024cf4:	21ff      	movs	r1, #255	@ 0xff
 8024cf6:	6820      	ldr	r0, [r4, #0]
 8024cf8:	f7fc faca 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->scr, color_scr);
 8024cfc:	4b71      	ldr	r3, [pc, #452]	@ (8024ec4 <style_init+0x304>)
 8024cfe:	8819      	ldrh	r1, [r3, #0]
 8024d00:	6820      	ldr	r0, [r4, #0]
 8024d02:	f7fc fabf 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->scr, color_text);
 8024d06:	4b70      	ldr	r3, [pc, #448]	@ (8024ec8 <style_init+0x308>)
 8024d08:	8819      	ldrh	r1, [r3, #0]
 8024d0a:	6820      	ldr	r0, [r4, #0]
 8024d0c:	f7fc fb44 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8024d10:	6824      	ldr	r4, [r4, #0]
 8024d12:	4b73      	ldr	r3, [pc, #460]	@ (8024ee0 <style_init+0x320>)
 8024d14:	781b      	ldrb	r3, [r3, #0]
 8024d16:	2b01      	cmp	r3, #1
 8024d18:	f001 818b 	beq.w	8026032 <style_init+0x1472>
 8024d1c:	2b02      	cmp	r3, #2
 8024d1e:	f001 818f 	beq.w	8026040 <style_init+0x1480>
 8024d22:	210a      	movs	r1, #10
 8024d24:	4b66      	ldr	r3, [pc, #408]	@ (8024ec0 <style_init+0x300>)
 8024d26:	68d8      	ldr	r0, [r3, #12]
 8024d28:	f7ff feea 	bl	8024b00 <lv_disp_dpx>
 8024d2c:	4601      	mov	r1, r0
 8024d2e:	4620      	mov	r0, r4
 8024d30:	f7fc fa9c 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 8024d34:	4b67      	ldr	r3, [pc, #412]	@ (8024ed4 <style_init+0x314>)
 8024d36:	681c      	ldr	r4, [r3, #0]
 8024d38:	4b69      	ldr	r3, [pc, #420]	@ (8024ee0 <style_init+0x320>)
 8024d3a:	781b      	ldrb	r3, [r3, #0]
 8024d3c:	2b01      	cmp	r3, #1
 8024d3e:	f001 8187 	beq.w	8026050 <style_init+0x1490>
 8024d42:	2b02      	cmp	r3, #2
 8024d44:	f001 818c 	beq.w	8026060 <style_init+0x14a0>
 8024d48:	210a      	movs	r1, #10
 8024d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8024ec0 <style_init+0x300>)
 8024d4c:	68d8      	ldr	r0, [r3, #12]
 8024d4e:	f7ff fed7 	bl	8024b00 <lv_disp_dpx>
 8024d52:	4601      	mov	r1, r0
 8024d54:	4620      	mov	r0, r4
 8024d56:	f7fc fa8f 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->card);
 8024d5a:	4c5e      	ldr	r4, [pc, #376]	@ (8024ed4 <style_init+0x314>)
 8024d5c:	6820      	ldr	r0, [r4, #0]
 8024d5e:	3018      	adds	r0, #24
 8024d60:	f7ff ff22 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 8024d64:	6824      	ldr	r4, [r4, #0]
 8024d66:	3418      	adds	r4, #24
 8024d68:	4b5d      	ldr	r3, [pc, #372]	@ (8024ee0 <style_init+0x320>)
 8024d6a:	781b      	ldrb	r3, [r3, #0]
 8024d6c:	2b01      	cmp	r3, #1
 8024d6e:	f001 817f 	beq.w	8026070 <style_init+0x14b0>
 8024d72:	2108      	movs	r1, #8
 8024d74:	4b52      	ldr	r3, [pc, #328]	@ (8024ec0 <style_init+0x300>)
 8024d76:	68d8      	ldr	r0, [r3, #12]
 8024d78:	f7ff fec2 	bl	8024b00 <lv_disp_dpx>
 8024d7c:	4601      	mov	r1, r0
 8024d7e:	4620      	mov	r0, r4
 8024d80:	f7fc fb22 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->card, LV_OPA_COVER);
 8024d84:	4c53      	ldr	r4, [pc, #332]	@ (8024ed4 <style_init+0x314>)
 8024d86:	6820      	ldr	r0, [r4, #0]
 8024d88:	21ff      	movs	r1, #255	@ 0xff
 8024d8a:	3018      	adds	r0, #24
 8024d8c:	f7fc fa80 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->card, color_card);
 8024d90:	6820      	ldr	r0, [r4, #0]
 8024d92:	4b4e      	ldr	r3, [pc, #312]	@ (8024ecc <style_init+0x30c>)
 8024d94:	8819      	ldrh	r1, [r3, #0]
 8024d96:	3018      	adds	r0, #24
 8024d98:	f7fc fa74 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_border_color(&styles->card, color_grey);
 8024d9c:	6820      	ldr	r0, [r4, #0]
 8024d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8024ed0 <style_init+0x310>)
 8024da0:	8819      	ldrh	r1, [r3, #0]
 8024da2:	3018      	adds	r0, #24
 8024da4:	f7fc fa86 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->card, BORDER_WIDTH);
 8024da8:	6825      	ldr	r5, [r4, #0]
 8024daa:	2102      	movs	r1, #2
 8024dac:	4b44      	ldr	r3, [pc, #272]	@ (8024ec0 <style_init+0x300>)
 8024dae:	68d8      	ldr	r0, [r3, #12]
 8024db0:	f7ff fea6 	bl	8024b00 <lv_disp_dpx>
 8024db4:	4601      	mov	r1, r0
 8024db6:	f105 0018 	add.w	r0, r5, #24
 8024dba:	f7fc fa87 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_post(&styles->card, true);
 8024dbe:	6820      	ldr	r0, [r4, #0]
 8024dc0:	2101      	movs	r1, #1
 8024dc2:	3018      	adds	r0, #24
 8024dc4:	f7fc fa8e 	bl	80212e4 <lv_style_set_border_post>
    lv_style_set_text_color(&styles->card, color_text);
 8024dc8:	6820      	ldr	r0, [r4, #0]
 8024dca:	4b3f      	ldr	r3, [pc, #252]	@ (8024ec8 <style_init+0x308>)
 8024dcc:	8819      	ldrh	r1, [r3, #0]
 8024dce:	3018      	adds	r0, #24
 8024dd0:	f7fc fae2 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8024dd4:	6824      	ldr	r4, [r4, #0]
 8024dd6:	3418      	adds	r4, #24
 8024dd8:	4b41      	ldr	r3, [pc, #260]	@ (8024ee0 <style_init+0x320>)
 8024dda:	781b      	ldrb	r3, [r3, #0]
 8024ddc:	2b01      	cmp	r3, #1
 8024dde:	f001 814f 	beq.w	8026080 <style_init+0x14c0>
 8024de2:	2b02      	cmp	r3, #2
 8024de4:	f001 8154 	beq.w	8026090 <style_init+0x14d0>
 8024de8:	2110      	movs	r1, #16
 8024dea:	4b35      	ldr	r3, [pc, #212]	@ (8024ec0 <style_init+0x300>)
 8024dec:	68d8      	ldr	r0, [r3, #12]
 8024dee:	f7ff fe87 	bl	8024b00 <lv_disp_dpx>
 8024df2:	4601      	mov	r1, r0
 8024df4:	4620      	mov	r0, r4
 8024df6:	f7ff fec5 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 8024dfa:	4b36      	ldr	r3, [pc, #216]	@ (8024ed4 <style_init+0x314>)
 8024dfc:	681c      	ldr	r4, [r3, #0]
 8024dfe:	3418      	adds	r4, #24
 8024e00:	4b37      	ldr	r3, [pc, #220]	@ (8024ee0 <style_init+0x320>)
 8024e02:	781b      	ldrb	r3, [r3, #0]
 8024e04:	2b01      	cmp	r3, #1
 8024e06:	f001 814b 	beq.w	80260a0 <style_init+0x14e0>
 8024e0a:	2b02      	cmp	r3, #2
 8024e0c:	f001 8150 	beq.w	80260b0 <style_init+0x14f0>
 8024e10:	210a      	movs	r1, #10
 8024e12:	4b2b      	ldr	r3, [pc, #172]	@ (8024ec0 <style_init+0x300>)
 8024e14:	68d8      	ldr	r0, [r3, #12]
 8024e16:	f7ff fe73 	bl	8024b00 <lv_disp_dpx>
 8024e1a:	4601      	mov	r1, r0
 8024e1c:	4620      	mov	r0, r4
 8024e1e:	f7fc fa25 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 8024e22:	4b2c      	ldr	r3, [pc, #176]	@ (8024ed4 <style_init+0x314>)
 8024e24:	681c      	ldr	r4, [r3, #0]
 8024e26:	3418      	adds	r4, #24
 8024e28:	4b2d      	ldr	r3, [pc, #180]	@ (8024ee0 <style_init+0x320>)
 8024e2a:	781b      	ldrb	r3, [r3, #0]
 8024e2c:	2b01      	cmp	r3, #1
 8024e2e:	f001 8147 	beq.w	80260c0 <style_init+0x1500>
 8024e32:	2b02      	cmp	r3, #2
 8024e34:	f001 814c 	beq.w	80260d0 <style_init+0x1510>
 8024e38:	210a      	movs	r1, #10
 8024e3a:	4b21      	ldr	r3, [pc, #132]	@ (8024ec0 <style_init+0x300>)
 8024e3c:	68d8      	ldr	r0, [r3, #12]
 8024e3e:	f7ff fe5f 	bl	8024b00 <lv_disp_dpx>
 8024e42:	4601      	mov	r1, r0
 8024e44:	4620      	mov	r0, r4
 8024e46:	f7fc fa17 	bl	8021278 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->card, lv_palette_main(LV_PALETTE_GREY));
 8024e4a:	4c22      	ldr	r4, [pc, #136]	@ (8024ed4 <style_init+0x314>)
 8024e4c:	6825      	ldr	r5, [r4, #0]
 8024e4e:	2012      	movs	r0, #18
 8024e50:	f7e1 fd92 	bl	8006978 <lv_palette_main>
 8024e54:	4601      	mov	r1, r0
 8024e56:	f105 0018 	add.w	r0, r5, #24
 8024e5a:	f7fc fa85 	bl	8021368 <lv_style_set_line_color>
    lv_style_set_line_width(&styles->card, lv_disp_dpx(theme.disp, 1));
 8024e5e:	6826      	ldr	r6, [r4, #0]
 8024e60:	4d17      	ldr	r5, [pc, #92]	@ (8024ec0 <style_init+0x300>)
 8024e62:	2101      	movs	r1, #1
 8024e64:	68e8      	ldr	r0, [r5, #12]
 8024e66:	f7ff fe4b 	bl	8024b00 <lv_disp_dpx>
 8024e6a:	4601      	mov	r1, r0
 8024e6c:	f106 0018 	add.w	r0, r6, #24
 8024e70:	f7fc fa74 	bl	802135c <lv_style_set_line_width>
    style_init_reset(&styles->outline_primary);
 8024e74:	6820      	ldr	r0, [r4, #0]
 8024e76:	30a0      	adds	r0, #160	@ 0xa0
 8024e78:	f7ff fe96 	bl	8024ba8 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_primary, theme.color_primary);
 8024e7c:	6820      	ldr	r0, [r4, #0]
 8024e7e:	8a29      	ldrh	r1, [r5, #16]
 8024e80:	30a0      	adds	r0, #160	@ 0xa0
 8024e82:	f7fc fa3b 	bl	80212fc <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_primary, OUTLINE_WIDTH);
 8024e86:	6826      	ldr	r6, [r4, #0]
 8024e88:	2103      	movs	r1, #3
 8024e8a:	68e8      	ldr	r0, [r5, #12]
 8024e8c:	f7ff fe38 	bl	8024b00 <lv_disp_dpx>
 8024e90:	4601      	mov	r1, r0
 8024e92:	f106 00a0 	add.w	r0, r6, #160	@ 0xa0
 8024e96:	f7fc fa2b 	bl	80212f0 <lv_style_set_outline_width>
    lv_style_set_outline_pad(&styles->outline_primary, OUTLINE_WIDTH);
 8024e9a:	6826      	ldr	r6, [r4, #0]
 8024e9c:	2103      	movs	r1, #3
 8024e9e:	68e8      	ldr	r0, [r5, #12]
 8024ea0:	f7ff fe2e 	bl	8024b00 <lv_disp_dpx>
 8024ea4:	4601      	mov	r1, r0
 8024ea6:	f106 00a0 	add.w	r0, r6, #160	@ 0xa0
 8024eaa:	f7fc fa33 	bl	8021314 <lv_style_set_outline_pad>
    lv_style_set_outline_opa(&styles->outline_primary, LV_OPA_50);
 8024eae:	6820      	ldr	r0, [r4, #0]
 8024eb0:	217f      	movs	r1, #127	@ 0x7f
 8024eb2:	30a0      	adds	r0, #160	@ 0xa0
 8024eb4:	f7fc fa28 	bl	8021308 <lv_style_set_outline_opa>
    style_init_reset(&styles->outline_secondary);
 8024eb8:	6820      	ldr	r0, [r4, #0]
 8024eba:	30a8      	adds	r0, #168	@ 0xa8
 8024ebc:	e016      	b.n	8024eec <style_init+0x32c>
 8024ebe:	bf00      	nop
 8024ec0:	20008948 	.word	0x20008948
 8024ec4:	20008944 	.word	0x20008944
 8024ec8:	20008940 	.word	0x20008940
 8024ecc:	2000893c 	.word	0x2000893c
 8024ed0:	20008938 	.word	0x20008938
 8024ed4:	2000896c 	.word	0x2000896c
 8024ed8:	20008920 	.word	0x20008920
 8024edc:	2000890c 	.word	0x2000890c
 8024ee0:	20008946 	.word	0x20008946
 8024ee4:	080006f5 	.word	0x080006f5
 8024ee8:	0802dfec 	.word	0x0802dfec
 8024eec:	f7ff fe5c 	bl	8024ba8 <style_init_reset>
    lv_style_set_outline_color(&styles->outline_secondary, theme.color_secondary);
 8024ef0:	6820      	ldr	r0, [r4, #0]
 8024ef2:	8a69      	ldrh	r1, [r5, #18]
 8024ef4:	30a8      	adds	r0, #168	@ 0xa8
 8024ef6:	f7fc fa01 	bl	80212fc <lv_style_set_outline_color>
    lv_style_set_outline_width(&styles->outline_secondary, OUTLINE_WIDTH);
 8024efa:	6826      	ldr	r6, [r4, #0]
 8024efc:	2103      	movs	r1, #3
 8024efe:	68e8      	ldr	r0, [r5, #12]
 8024f00:	f7ff fdfe 	bl	8024b00 <lv_disp_dpx>
 8024f04:	4601      	mov	r1, r0
 8024f06:	f106 00a8 	add.w	r0, r6, #168	@ 0xa8
 8024f0a:	f7fc f9f1 	bl	80212f0 <lv_style_set_outline_width>
    lv_style_set_outline_opa(&styles->outline_secondary, LV_OPA_50);
 8024f0e:	6820      	ldr	r0, [r4, #0]
 8024f10:	217f      	movs	r1, #127	@ 0x7f
 8024f12:	30a8      	adds	r0, #168	@ 0xa8
 8024f14:	f7fc f9f8 	bl	8021308 <lv_style_set_outline_opa>
    style_init_reset(&styles->btn);
 8024f18:	6820      	ldr	r0, [r4, #0]
 8024f1a:	3020      	adds	r0, #32
 8024f1c:	f7ff fe44 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 8024f20:	6824      	ldr	r4, [r4, #0]
 8024f22:	3420      	adds	r4, #32
 8024f24:	4bbb      	ldr	r3, [pc, #748]	@ (8025214 <style_init+0x654>)
 8024f26:	781b      	ldrb	r3, [r3, #0]
 8024f28:	2b01      	cmp	r3, #1
 8024f2a:	f001 80d9 	beq.w	80260e0 <style_init+0x1520>
 8024f2e:	2b02      	cmp	r3, #2
 8024f30:	f001 80dd 	beq.w	80260ee <style_init+0x152e>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 8024f34:	2108      	movs	r1, #8
 8024f36:	4bb8      	ldr	r3, [pc, #736]	@ (8025218 <style_init+0x658>)
 8024f38:	68d8      	ldr	r0, [r3, #12]
 8024f3a:	f7ff fde1 	bl	8024b00 <lv_disp_dpx>
 8024f3e:	4601      	mov	r1, r0
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 8024f40:	4620      	mov	r0, r4
 8024f42:	f7fc fa41 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_bg_opa(&styles->btn, LV_OPA_COVER);
 8024f46:	4cb5      	ldr	r4, [pc, #724]	@ (802521c <style_init+0x65c>)
 8024f48:	6820      	ldr	r0, [r4, #0]
 8024f4a:	21ff      	movs	r1, #255	@ 0xff
 8024f4c:	3020      	adds	r0, #32
 8024f4e:	f7fc f99f 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->btn, color_grey);
 8024f52:	6820      	ldr	r0, [r4, #0]
 8024f54:	4bb2      	ldr	r3, [pc, #712]	@ (8025220 <style_init+0x660>)
 8024f56:	8819      	ldrh	r1, [r3, #0]
 8024f58:	3020      	adds	r0, #32
 8024f5a:	f7fc f993 	bl	8021284 <lv_style_set_bg_color>
    if(!(theme.flags & MODE_DARK)) {
 8024f5e:	4bae      	ldr	r3, [pc, #696]	@ (8025218 <style_init+0x658>)
 8024f60:	6a1b      	ldr	r3, [r3, #32]
 8024f62:	f013 0f01 	tst.w	r3, #1
 8024f66:	f001 80ca 	beq.w	80260fe <style_init+0x153e>
    lv_style_set_text_color(&styles->btn, color_text);
 8024f6a:	4cac      	ldr	r4, [pc, #688]	@ (802521c <style_init+0x65c>)
 8024f6c:	6820      	ldr	r0, [r4, #0]
 8024f6e:	4bad      	ldr	r3, [pc, #692]	@ (8025224 <style_init+0x664>)
 8024f70:	8819      	ldrh	r1, [r3, #0]
 8024f72:	3020      	adds	r0, #32
 8024f74:	f7fc fa10 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8024f78:	6824      	ldr	r4, [r4, #0]
 8024f7a:	3420      	adds	r4, #32
 8024f7c:	4ba5      	ldr	r3, [pc, #660]	@ (8025214 <style_init+0x654>)
 8024f7e:	781b      	ldrb	r3, [r3, #0]
 8024f80:	2b01      	cmp	r3, #1
 8024f82:	f001 8106 	beq.w	8026192 <style_init+0x15d2>
 8024f86:	2b02      	cmp	r3, #2
 8024f88:	f001 810b 	beq.w	80261a2 <style_init+0x15e2>
 8024f8c:	2110      	movs	r1, #16
 8024f8e:	4ba2      	ldr	r3, [pc, #648]	@ (8025218 <style_init+0x658>)
 8024f90:	68d8      	ldr	r0, [r3, #12]
 8024f92:	f7ff fdb5 	bl	8024b00 <lv_disp_dpx>
 8024f96:	4601      	mov	r1, r0
 8024f98:	4620      	mov	r0, r4
 8024f9a:	f7ff fde9 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 8024f9e:	4b9f      	ldr	r3, [pc, #636]	@ (802521c <style_init+0x65c>)
 8024fa0:	681c      	ldr	r4, [r3, #0]
 8024fa2:	3420      	adds	r4, #32
 8024fa4:	4b9b      	ldr	r3, [pc, #620]	@ (8025214 <style_init+0x654>)
 8024fa6:	781b      	ldrb	r3, [r3, #0]
 8024fa8:	2b01      	cmp	r3, #1
 8024faa:	f001 8102 	beq.w	80261b2 <style_init+0x15f2>
 8024fae:	2b02      	cmp	r3, #2
 8024fb0:	f001 8107 	beq.w	80261c2 <style_init+0x1602>
 8024fb4:	210a      	movs	r1, #10
 8024fb6:	4b98      	ldr	r3, [pc, #608]	@ (8025218 <style_init+0x658>)
 8024fb8:	68d8      	ldr	r0, [r3, #12]
 8024fba:	f7ff fda1 	bl	8024b00 <lv_disp_dpx>
 8024fbe:	4601      	mov	r1, r0
 8024fc0:	4620      	mov	r0, r4
 8024fc2:	f7ff fdbb 	bl	8024b3c <lv_style_set_pad_ver>
    lv_style_set_pad_column(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8024fc6:	4c95      	ldr	r4, [pc, #596]	@ (802521c <style_init+0x65c>)
 8024fc8:	6826      	ldr	r6, [r4, #0]
 8024fca:	4d93      	ldr	r5, [pc, #588]	@ (8025218 <style_init+0x658>)
 8024fcc:	2105      	movs	r1, #5
 8024fce:	68e8      	ldr	r0, [r5, #12]
 8024fd0:	f7ff fd96 	bl	8024b00 <lv_disp_dpx>
 8024fd4:	4601      	mov	r1, r0
 8024fd6:	f106 0020 	add.w	r0, r6, #32
 8024fda:	f7fc f94d 	bl	8021278 <lv_style_set_pad_column>
    lv_style_set_pad_row(&styles->btn, lv_disp_dpx(theme.disp, 5));
 8024fde:	6826      	ldr	r6, [r4, #0]
 8024fe0:	2105      	movs	r1, #5
 8024fe2:	68e8      	ldr	r0, [r5, #12]
 8024fe4:	f7ff fd8c 	bl	8024b00 <lv_disp_dpx>
 8024fe8:	4601      	mov	r1, r0
 8024fea:	f106 0020 	add.w	r0, r6, #32
 8024fee:	f7fc f93d 	bl	802126c <lv_style_set_pad_row>
                         (uint8_t)((c & 0xF) | ((c & 0xF) << 4)));
}

static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)
{
    dsc->filter_cb = cb;
 8024ff2:	4d8d      	ldr	r5, [pc, #564]	@ (8025228 <style_init+0x668>)
 8024ff4:	4b8d      	ldr	r3, [pc, #564]	@ (802522c <style_init+0x66c>)
 8024ff6:	602b      	str	r3, [r5, #0]
 8024ff8:	4e8d      	ldr	r6, [pc, #564]	@ (8025230 <style_init+0x670>)
 8024ffa:	4b8e      	ldr	r3, [pc, #568]	@ (8025234 <style_init+0x674>)
 8024ffc:	6033      	str	r3, [r6, #0]
    style_init_reset(&styles->pressed);
 8024ffe:	6820      	ldr	r0, [r4, #0]
 8025000:	3058      	adds	r0, #88	@ 0x58
 8025002:	f7ff fdd1 	bl	8024ba8 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->pressed, &dark_filter);
 8025006:	6820      	ldr	r0, [r4, #0]
 8025008:	4629      	mov	r1, r5
 802500a:	3058      	adds	r0, #88	@ 0x58
 802500c:	f7fc f9e8 	bl	80213e0 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->pressed, 35);
 8025010:	6820      	ldr	r0, [r4, #0]
 8025012:	2123      	movs	r1, #35	@ 0x23
 8025014:	3058      	adds	r0, #88	@ 0x58
 8025016:	f7fc f9e9 	bl	80213ec <lv_style_set_color_filter_opa>
    style_init_reset(&styles->disabled);
 802501a:	6820      	ldr	r0, [r4, #0]
 802501c:	3060      	adds	r0, #96	@ 0x60
 802501e:	f7ff fdc3 	bl	8024ba8 <style_init_reset>
    lv_style_set_color_filter_dsc(&styles->disabled, &grey_filter);
 8025022:	6820      	ldr	r0, [r4, #0]
 8025024:	4631      	mov	r1, r6
 8025026:	3060      	adds	r0, #96	@ 0x60
 8025028:	f7fc f9da 	bl	80213e0 <lv_style_set_color_filter_dsc>
    lv_style_set_color_filter_opa(&styles->disabled, LV_OPA_50);
 802502c:	6820      	ldr	r0, [r4, #0]
 802502e:	217f      	movs	r1, #127	@ 0x7f
 8025030:	3060      	adds	r0, #96	@ 0x60
 8025032:	f7fc f9db 	bl	80213ec <lv_style_set_color_filter_opa>
    style_init_reset(&styles->clip_corner);
 8025036:	6820      	ldr	r0, [r4, #0]
 8025038:	30c0      	adds	r0, #192	@ 0xc0
 802503a:	f7ff fdb5 	bl	8024ba8 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, true);
 802503e:	6820      	ldr	r0, [r4, #0]
 8025040:	2101      	movs	r1, #1
 8025042:	30c0      	adds	r0, #192	@ 0xc0
 8025044:	f7fc f9c6 	bl	80213d4 <lv_style_set_clip_corner>
    lv_style_set_border_post(&styles->clip_corner, true);
 8025048:	6820      	ldr	r0, [r4, #0]
 802504a:	2101      	movs	r1, #1
 802504c:	30c0      	adds	r0, #192	@ 0xc0
 802504e:	f7fc f949 	bl	80212e4 <lv_style_set_border_post>
    style_init_reset(&styles->pad_normal);
 8025052:	6820      	ldr	r0, [r4, #0]
 8025054:	3080      	adds	r0, #128	@ 0x80
 8025056:	f7ff fda7 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 802505a:	6824      	ldr	r4, [r4, #0]
 802505c:	3480      	adds	r4, #128	@ 0x80
 802505e:	4b6d      	ldr	r3, [pc, #436]	@ (8025214 <style_init+0x654>)
 8025060:	781b      	ldrb	r3, [r3, #0]
 8025062:	2b01      	cmp	r3, #1
 8025064:	f001 80b5 	beq.w	80261d2 <style_init+0x1612>
 8025068:	2b02      	cmp	r3, #2
 802506a:	f001 80ba 	beq.w	80261e2 <style_init+0x1622>
 802506e:	2110      	movs	r1, #16
 8025070:	4b69      	ldr	r3, [pc, #420]	@ (8025218 <style_init+0x658>)
 8025072:	68d8      	ldr	r0, [r3, #12]
 8025074:	f7ff fd44 	bl	8024b00 <lv_disp_dpx>
 8025078:	4601      	mov	r1, r0
 802507a:	4620      	mov	r0, r4
 802507c:	f7ff fd82 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 8025080:	4b66      	ldr	r3, [pc, #408]	@ (802521c <style_init+0x65c>)
 8025082:	681c      	ldr	r4, [r3, #0]
 8025084:	3480      	adds	r4, #128	@ 0x80
 8025086:	4b63      	ldr	r3, [pc, #396]	@ (8025214 <style_init+0x654>)
 8025088:	781b      	ldrb	r3, [r3, #0]
 802508a:	2b01      	cmp	r3, #1
 802508c:	f001 80b1 	beq.w	80261f2 <style_init+0x1632>
 8025090:	2b02      	cmp	r3, #2
 8025092:	f001 80b6 	beq.w	8026202 <style_init+0x1642>
 8025096:	2110      	movs	r1, #16
 8025098:	4b5f      	ldr	r3, [pc, #380]	@ (8025218 <style_init+0x658>)
 802509a:	68d8      	ldr	r0, [r3, #12]
 802509c:	f7ff fd30 	bl	8024b00 <lv_disp_dpx>
 80250a0:	4601      	mov	r1, r0
 80250a2:	4620      	mov	r0, r4
 80250a4:	f7fc f8e2 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 80250a8:	4b5c      	ldr	r3, [pc, #368]	@ (802521c <style_init+0x65c>)
 80250aa:	681c      	ldr	r4, [r3, #0]
 80250ac:	3480      	adds	r4, #128	@ 0x80
 80250ae:	4b59      	ldr	r3, [pc, #356]	@ (8025214 <style_init+0x654>)
 80250b0:	781b      	ldrb	r3, [r3, #0]
 80250b2:	2b01      	cmp	r3, #1
 80250b4:	f001 80ad 	beq.w	8026212 <style_init+0x1652>
 80250b8:	2b02      	cmp	r3, #2
 80250ba:	f001 80b2 	beq.w	8026222 <style_init+0x1662>
 80250be:	2110      	movs	r1, #16
 80250c0:	4b55      	ldr	r3, [pc, #340]	@ (8025218 <style_init+0x658>)
 80250c2:	68d8      	ldr	r0, [r3, #12]
 80250c4:	f7ff fd1c 	bl	8024b00 <lv_disp_dpx>
 80250c8:	4601      	mov	r1, r0
 80250ca:	4620      	mov	r0, r4
 80250cc:	f7fc f8d4 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_small);
 80250d0:	4c52      	ldr	r4, [pc, #328]	@ (802521c <style_init+0x65c>)
 80250d2:	6820      	ldr	r0, [r4, #0]
 80250d4:	3078      	adds	r0, #120	@ 0x78
 80250d6:	f7ff fd67 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 80250da:	6824      	ldr	r4, [r4, #0]
 80250dc:	3478      	adds	r4, #120	@ 0x78
 80250de:	4b4d      	ldr	r3, [pc, #308]	@ (8025214 <style_init+0x654>)
 80250e0:	781b      	ldrb	r3, [r3, #0]
 80250e2:	2b01      	cmp	r3, #1
 80250e4:	f001 80a5 	beq.w	8026232 <style_init+0x1672>
 80250e8:	2b02      	cmp	r3, #2
 80250ea:	f001 80aa 	beq.w	8026242 <style_init+0x1682>
 80250ee:	210a      	movs	r1, #10
 80250f0:	4b49      	ldr	r3, [pc, #292]	@ (8025218 <style_init+0x658>)
 80250f2:	68d8      	ldr	r0, [r3, #12]
 80250f4:	f7ff fd04 	bl	8024b00 <lv_disp_dpx>
 80250f8:	4601      	mov	r1, r0
 80250fa:	4620      	mov	r0, r4
 80250fc:	f7ff fd42 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8025100:	4b46      	ldr	r3, [pc, #280]	@ (802521c <style_init+0x65c>)
 8025102:	681c      	ldr	r4, [r3, #0]
 8025104:	3478      	adds	r4, #120	@ 0x78
 8025106:	4b43      	ldr	r3, [pc, #268]	@ (8025214 <style_init+0x654>)
 8025108:	781b      	ldrb	r3, [r3, #0]
 802510a:	2b01      	cmp	r3, #1
 802510c:	f001 80a1 	beq.w	8026252 <style_init+0x1692>
 8025110:	2b02      	cmp	r3, #2
 8025112:	f001 80a6 	beq.w	8026262 <style_init+0x16a2>
 8025116:	210a      	movs	r1, #10
 8025118:	4b3f      	ldr	r3, [pc, #252]	@ (8025218 <style_init+0x658>)
 802511a:	68d8      	ldr	r0, [r3, #12]
 802511c:	f7ff fcf0 	bl	8024b00 <lv_disp_dpx>
 8025120:	4601      	mov	r1, r0
 8025122:	4620      	mov	r0, r4
 8025124:	f7ff fce2 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->pad_gap);
 8025128:	4c3c      	ldr	r4, [pc, #240]	@ (802521c <style_init+0x65c>)
 802512a:	6820      	ldr	r0, [r4, #0]
 802512c:	3088      	adds	r0, #136	@ 0x88
 802512e:	f7ff fd3b 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_row(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8025132:	6826      	ldr	r6, [r4, #0]
 8025134:	4d38      	ldr	r5, [pc, #224]	@ (8025218 <style_init+0x658>)
 8025136:	210a      	movs	r1, #10
 8025138:	68e8      	ldr	r0, [r5, #12]
 802513a:	f7ff fce1 	bl	8024b00 <lv_disp_dpx>
 802513e:	4601      	mov	r1, r0
 8025140:	f106 0088 	add.w	r0, r6, #136	@ 0x88
 8025144:	f7fc f892 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_gap, lv_disp_dpx(theme.disp, 10));
 8025148:	6826      	ldr	r6, [r4, #0]
 802514a:	210a      	movs	r1, #10
 802514c:	68e8      	ldr	r0, [r5, #12]
 802514e:	f7ff fcd7 	bl	8024b00 <lv_disp_dpx>
 8025152:	4601      	mov	r1, r0
 8025154:	f106 0088 	add.w	r0, r6, #136	@ 0x88
 8025158:	f7fc f88e 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->line_space_large);
 802515c:	6820      	ldr	r0, [r4, #0]
 802515e:	3090      	adds	r0, #144	@ 0x90
 8025160:	f7ff fd22 	bl	8024ba8 <style_init_reset>
    lv_style_set_text_line_space(&styles->line_space_large, lv_disp_dpx(theme.disp, 20));
 8025164:	6826      	ldr	r6, [r4, #0]
 8025166:	2114      	movs	r1, #20
 8025168:	68e8      	ldr	r0, [r5, #12]
 802516a:	f7ff fcc9 	bl	8024b00 <lv_disp_dpx>
 802516e:	4601      	mov	r1, r0
 8025170:	f106 0090 	add.w	r0, r6, #144	@ 0x90
 8025174:	f7fc f91c 	bl	80213b0 <lv_style_set_text_line_space>
    style_init_reset(&styles->text_align_center);
 8025178:	6820      	ldr	r0, [r4, #0]
 802517a:	3098      	adds	r0, #152	@ 0x98
 802517c:	f7ff fd14 	bl	8024ba8 <style_init_reset>
    lv_style_set_text_align(&styles->text_align_center, LV_TEXT_ALIGN_CENTER);
 8025180:	6820      	ldr	r0, [r4, #0]
 8025182:	2102      	movs	r1, #2
 8025184:	3098      	adds	r0, #152	@ 0x98
 8025186:	f7fc f919 	bl	80213bc <lv_style_set_text_align>
    style_init_reset(&styles->pad_zero);
 802518a:	6820      	ldr	r0, [r4, #0]
 802518c:	3068      	adds	r0, #104	@ 0x68
 802518e:	f7ff fd0b 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_zero, 0);
 8025192:	6820      	ldr	r0, [r4, #0]
 8025194:	2100      	movs	r1, #0
 8025196:	3068      	adds	r0, #104	@ 0x68
 8025198:	f7ff fcf4 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_zero, 0);
 802519c:	6820      	ldr	r0, [r4, #0]
 802519e:	2100      	movs	r1, #0
 80251a0:	3068      	adds	r0, #104	@ 0x68
 80251a2:	f7fc f863 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_zero, 0);
 80251a6:	6820      	ldr	r0, [r4, #0]
 80251a8:	2100      	movs	r1, #0
 80251aa:	3068      	adds	r0, #104	@ 0x68
 80251ac:	f7fc f864 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->pad_tiny);
 80251b0:	6820      	ldr	r0, [r4, #0]
 80251b2:	3070      	adds	r0, #112	@ 0x70
 80251b4:	f7ff fcf8 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 80251b8:	6824      	ldr	r4, [r4, #0]
 80251ba:	3470      	adds	r4, #112	@ 0x70
 80251bc:	4b15      	ldr	r3, [pc, #84]	@ (8025214 <style_init+0x654>)
 80251be:	781b      	ldrb	r3, [r3, #0]
 80251c0:	2b01      	cmp	r3, #1
 80251c2:	f001 8056 	beq.w	8026272 <style_init+0x16b2>
 80251c6:	2b02      	cmp	r3, #2
 80251c8:	f001 805a 	beq.w	8026280 <style_init+0x16c0>
 80251cc:	2102      	movs	r1, #2
 80251ce:	4b12      	ldr	r3, [pc, #72]	@ (8025218 <style_init+0x658>)
 80251d0:	68d8      	ldr	r0, [r3, #12]
 80251d2:	f7ff fc95 	bl	8024b00 <lv_disp_dpx>
 80251d6:	4601      	mov	r1, r0
 80251d8:	4620      	mov	r0, r4
 80251da:	f7ff fcd3 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 80251de:	4b0f      	ldr	r3, [pc, #60]	@ (802521c <style_init+0x65c>)
 80251e0:	681c      	ldr	r4, [r3, #0]
 80251e2:	3470      	adds	r4, #112	@ 0x70
 80251e4:	4b0b      	ldr	r3, [pc, #44]	@ (8025214 <style_init+0x654>)
 80251e6:	781b      	ldrb	r3, [r3, #0]
 80251e8:	2b01      	cmp	r3, #1
 80251ea:	f001 8051 	beq.w	8026290 <style_init+0x16d0>
 80251ee:	2b02      	cmp	r3, #2
 80251f0:	f001 8064 	beq.w	80262bc <style_init+0x16fc>
 80251f4:	2102      	movs	r1, #2
 80251f6:	4b08      	ldr	r3, [pc, #32]	@ (8025218 <style_init+0x658>)
 80251f8:	68d8      	ldr	r0, [r3, #12]
 80251fa:	f7ff fc81 	bl	8024b00 <lv_disp_dpx>
 80251fe:	4601      	mov	r1, r0
 8025200:	4620      	mov	r0, r4
 8025202:	f7fc f833 	bl	802126c <lv_style_set_pad_row>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 8025206:	4b05      	ldr	r3, [pc, #20]	@ (802521c <style_init+0x65c>)
 8025208:	681c      	ldr	r4, [r3, #0]
 802520a:	3470      	adds	r4, #112	@ 0x70
 802520c:	4b01      	ldr	r3, [pc, #4]	@ (8025214 <style_init+0x654>)
 802520e:	781b      	ldrb	r3, [r3, #0]
 8025210:	2b01      	cmp	r3, #1
 8025212:	e011      	b.n	8025238 <style_init+0x678>
 8025214:	20008946 	.word	0x20008946
 8025218:	20008948 	.word	0x20008948
 802521c:	2000896c 	.word	0x2000896c
 8025220:	20008938 	.word	0x20008938
 8025224:	20008940 	.word	0x20008940
 8025228:	20008904 	.word	0x20008904
 802522c:	08024b51 	.word	0x08024b51
 8025230:	200088fc 	.word	0x200088fc
 8025234:	08024ab5 	.word	0x08024ab5
 8025238:	f001 8048 	beq.w	80262cc <style_init+0x170c>
 802523c:	2b02      	cmp	r3, #2
 802523e:	f001 804d 	beq.w	80262dc <style_init+0x171c>
 8025242:	2102      	movs	r1, #2
 8025244:	4bcb      	ldr	r3, [pc, #812]	@ (8025574 <style_init+0x9b4>)
 8025246:	68d8      	ldr	r0, [r3, #12]
 8025248:	f7ff fc5a 	bl	8024b00 <lv_disp_dpx>
 802524c:	4601      	mov	r1, r0
 802524e:	4620      	mov	r0, r4
 8025250:	f7fc f812 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->bg_color_primary);
 8025254:	4cc8      	ldr	r4, [pc, #800]	@ (8025578 <style_init+0x9b8>)
 8025256:	6820      	ldr	r0, [r4, #0]
 8025258:	3028      	adds	r0, #40	@ 0x28
 802525a:	f7ff fca5 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary, theme.color_primary);
 802525e:	6820      	ldr	r0, [r4, #0]
 8025260:	4dc4      	ldr	r5, [pc, #784]	@ (8025574 <style_init+0x9b4>)
 8025262:	8a29      	ldrh	r1, [r5, #16]
 8025264:	3028      	adds	r0, #40	@ 0x28
 8025266:	f7fc f80d 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary, lv_color_white());
 802526a:	6820      	ldr	r0, [r4, #0]
 802526c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8025270:	3028      	adds	r0, #40	@ 0x28
 8025272:	f7fc f891 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary, LV_OPA_COVER);
 8025276:	6820      	ldr	r0, [r4, #0]
 8025278:	21ff      	movs	r1, #255	@ 0xff
 802527a:	3028      	adds	r0, #40	@ 0x28
 802527c:	f7fc f808 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_primary_muted);
 8025280:	6820      	ldr	r0, [r4, #0]
 8025282:	3030      	adds	r0, #48	@ 0x30
 8025284:	f7ff fc90 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_primary_muted, theme.color_primary);
 8025288:	6820      	ldr	r0, [r4, #0]
 802528a:	8a29      	ldrh	r1, [r5, #16]
 802528c:	3030      	adds	r0, #48	@ 0x30
 802528e:	f7fb fff9 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_primary_muted, theme.color_primary);
 8025292:	6820      	ldr	r0, [r4, #0]
 8025294:	8a29      	ldrh	r1, [r5, #16]
 8025296:	3030      	adds	r0, #48	@ 0x30
 8025298:	f7fc f87e 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_primary_muted, LV_OPA_20);
 802529c:	6820      	ldr	r0, [r4, #0]
 802529e:	2133      	movs	r1, #51	@ 0x33
 80252a0:	3030      	adds	r0, #48	@ 0x30
 80252a2:	f7fb fff5 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary);
 80252a6:	6820      	ldr	r0, [r4, #0]
 80252a8:	3038      	adds	r0, #56	@ 0x38
 80252aa:	f7ff fc7d 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary, theme.color_secondary);
 80252ae:	6820      	ldr	r0, [r4, #0]
 80252b0:	8a69      	ldrh	r1, [r5, #18]
 80252b2:	3038      	adds	r0, #56	@ 0x38
 80252b4:	f7fb ffe6 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary, lv_color_white());
 80252b8:	6820      	ldr	r0, [r4, #0]
 80252ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80252be:	3038      	adds	r0, #56	@ 0x38
 80252c0:	f7fc f86a 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary, LV_OPA_COVER);
 80252c4:	6820      	ldr	r0, [r4, #0]
 80252c6:	21ff      	movs	r1, #255	@ 0xff
 80252c8:	3038      	adds	r0, #56	@ 0x38
 80252ca:	f7fb ffe1 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_secondary_muted);
 80252ce:	6820      	ldr	r0, [r4, #0]
 80252d0:	3040      	adds	r0, #64	@ 0x40
 80252d2:	f7ff fc69 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 80252d6:	6820      	ldr	r0, [r4, #0]
 80252d8:	8a69      	ldrh	r1, [r5, #18]
 80252da:	3040      	adds	r0, #64	@ 0x40
 80252dc:	f7fb ffd2 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->bg_color_secondary_muted, theme.color_secondary);
 80252e0:	6820      	ldr	r0, [r4, #0]
 80252e2:	8a69      	ldrh	r1, [r5, #18]
 80252e4:	3040      	adds	r0, #64	@ 0x40
 80252e6:	f7fc f857 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_bg_opa(&styles->bg_color_secondary_muted, LV_OPA_20);
 80252ea:	6820      	ldr	r0, [r4, #0]
 80252ec:	2133      	movs	r1, #51	@ 0x33
 80252ee:	3040      	adds	r0, #64	@ 0x40
 80252f0:	f7fb ffce 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->bg_color_grey);
 80252f4:	6820      	ldr	r0, [r4, #0]
 80252f6:	3048      	adds	r0, #72	@ 0x48
 80252f8:	f7ff fc56 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_grey, color_grey);
 80252fc:	6820      	ldr	r0, [r4, #0]
 80252fe:	4f9f      	ldr	r7, [pc, #636]	@ (802557c <style_init+0x9bc>)
 8025300:	8839      	ldrh	r1, [r7, #0]
 8025302:	3048      	adds	r0, #72	@ 0x48
 8025304:	f7fb ffbe 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_grey, LV_OPA_COVER);
 8025308:	6820      	ldr	r0, [r4, #0]
 802530a:	21ff      	movs	r1, #255	@ 0xff
 802530c:	3048      	adds	r0, #72	@ 0x48
 802530e:	f7fb ffbf 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_grey, color_text);
 8025312:	6820      	ldr	r0, [r4, #0]
 8025314:	f8df 8274 	ldr.w	r8, [pc, #628]	@ 802558c <style_init+0x9cc>
 8025318:	f8b8 1000 	ldrh.w	r1, [r8]
 802531c:	3048      	adds	r0, #72	@ 0x48
 802531e:	f7fc f83b 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->bg_color_white);
 8025322:	6820      	ldr	r0, [r4, #0]
 8025324:	3050      	adds	r0, #80	@ 0x50
 8025326:	f7ff fc3f 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->bg_color_white, color_card);
 802532a:	6820      	ldr	r0, [r4, #0]
 802532c:	4e94      	ldr	r6, [pc, #592]	@ (8025580 <style_init+0x9c0>)
 802532e:	8831      	ldrh	r1, [r6, #0]
 8025330:	3050      	adds	r0, #80	@ 0x50
 8025332:	f7fb ffa7 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->bg_color_white, LV_OPA_COVER);
 8025336:	6820      	ldr	r0, [r4, #0]
 8025338:	21ff      	movs	r1, #255	@ 0xff
 802533a:	3050      	adds	r0, #80	@ 0x50
 802533c:	f7fb ffa8 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->bg_color_white, color_text);
 8025340:	6820      	ldr	r0, [r4, #0]
 8025342:	f8b8 1000 	ldrh.w	r1, [r8]
 8025346:	3050      	adds	r0, #80	@ 0x50
 8025348:	f7fc f826 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->circle);
 802534c:	6820      	ldr	r0, [r4, #0]
 802534e:	30b0      	adds	r0, #176	@ 0xb0
 8025350:	f7ff fc2a 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->circle, LV_RADIUS_CIRCLE);
 8025354:	6820      	ldr	r0, [r4, #0]
 8025356:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 802535a:	30b0      	adds	r0, #176	@ 0xb0
 802535c:	f7fc f834 	bl	80213c8 <lv_style_set_radius>
    style_init_reset(&styles->no_radius);
 8025360:	6820      	ldr	r0, [r4, #0]
 8025362:	30b8      	adds	r0, #184	@ 0xb8
 8025364:	f7ff fc20 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, 0);
 8025368:	6820      	ldr	r0, [r4, #0]
 802536a:	2100      	movs	r1, #0
 802536c:	30b8      	adds	r0, #184	@ 0xb8
 802536e:	f7fc f82b 	bl	80213c8 <lv_style_set_radius>
    style_init_reset(&styles->grow);
 8025372:	6820      	ldr	r0, [r4, #0]
 8025374:	30c8      	adds	r0, #200	@ 0xc8
 8025376:	f7ff fc17 	bl	8024ba8 <style_init_reset>
    lv_style_set_transform_width(&styles->grow, lv_disp_dpx(theme.disp, 3));
 802537a:	f8d4 8000 	ldr.w	r8, [r4]
 802537e:	2103      	movs	r1, #3
 8025380:	68e8      	ldr	r0, [r5, #12]
 8025382:	f7ff fbbd 	bl	8024b00 <lv_disp_dpx>
 8025386:	4601      	mov	r1, r0
 8025388:	f108 00c8 	add.w	r0, r8, #200	@ 0xc8
 802538c:	f7fb ff4a 	bl	8021224 <lv_style_set_transform_width>
    lv_style_set_transform_height(&styles->grow, lv_disp_dpx(theme.disp, 3));
 8025390:	f8d4 8000 	ldr.w	r8, [r4]
 8025394:	2103      	movs	r1, #3
 8025396:	68e8      	ldr	r0, [r5, #12]
 8025398:	f7ff fbb2 	bl	8024b00 <lv_disp_dpx>
 802539c:	4601      	mov	r1, r0
 802539e:	f108 00c8 	add.w	r0, r8, #200	@ 0xc8
 80253a2:	f7fb ff45 	bl	8021230 <lv_style_set_transform_height>
    style_init_reset(&styles->knob);
 80253a6:	6820      	ldr	r0, [r4, #0]
 80253a8:	30f0      	adds	r0, #240	@ 0xf0
 80253aa:	f7ff fbfd 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->knob, theme.color_primary);
 80253ae:	6820      	ldr	r0, [r4, #0]
 80253b0:	8a29      	ldrh	r1, [r5, #16]
 80253b2:	30f0      	adds	r0, #240	@ 0xf0
 80253b4:	f7fb ff66 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->knob, LV_OPA_COVER);
 80253b8:	6820      	ldr	r0, [r4, #0]
 80253ba:	21ff      	movs	r1, #255	@ 0xff
 80253bc:	30f0      	adds	r0, #240	@ 0xf0
 80253be:	f7fb ff67 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_pad_all(&styles->knob, lv_disp_dpx(theme.disp, 6));
 80253c2:	f8d4 8000 	ldr.w	r8, [r4]
 80253c6:	2106      	movs	r1, #6
 80253c8:	68e8      	ldr	r0, [r5, #12]
 80253ca:	f7ff fb99 	bl	8024b00 <lv_disp_dpx>
 80253ce:	4601      	mov	r1, r0
 80253d0:	f108 00f0 	add.w	r0, r8, #240	@ 0xf0
 80253d4:	f7ff fbd6 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_radius(&styles->knob, LV_RADIUS_CIRCLE);
 80253d8:	6820      	ldr	r0, [r4, #0]
 80253da:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80253de:	30f0      	adds	r0, #240	@ 0xf0
 80253e0:	f7fb fff2 	bl	80213c8 <lv_style_set_radius>
    style_init_reset(&styles->anim);
 80253e4:	6820      	ldr	r0, [r4, #0]
 80253e6:	30e0      	adds	r0, #224	@ 0xe0
 80253e8:	f7ff fbde 	bl	8024ba8 <style_init_reset>
    lv_style_set_anim_time(&styles->anim, 200);
 80253ec:	6820      	ldr	r0, [r4, #0]
 80253ee:	21c8      	movs	r1, #200	@ 0xc8
 80253f0:	30e0      	adds	r0, #224	@ 0xe0
 80253f2:	f7fc f801 	bl	80213f8 <lv_style_set_anim_time>
    style_init_reset(&styles->anim_fast);
 80253f6:	6820      	ldr	r0, [r4, #0]
 80253f8:	30e8      	adds	r0, #232	@ 0xe8
 80253fa:	f7ff fbd5 	bl	8024ba8 <style_init_reset>
    lv_style_set_anim_time(&styles->anim_fast, 120);
 80253fe:	6820      	ldr	r0, [r4, #0]
 8025400:	2178      	movs	r1, #120	@ 0x78
 8025402:	30e8      	adds	r0, #232	@ 0xe8
 8025404:	f7fb fff8 	bl	80213f8 <lv_style_set_anim_time>
    style_init_reset(&styles->arc_indic);
 8025408:	6820      	ldr	r0, [r4, #0]
 802540a:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802540e:	f7ff fbcb 	bl	8024ba8 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic, color_grey);
 8025412:	6820      	ldr	r0, [r4, #0]
 8025414:	8839      	ldrh	r1, [r7, #0]
 8025416:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802541a:	f7fb ffb7 	bl	802138c <lv_style_set_arc_color>
    lv_style_set_arc_width(&styles->arc_indic, lv_disp_dpx(theme.disp, 15));
 802541e:	6827      	ldr	r7, [r4, #0]
 8025420:	210f      	movs	r1, #15
 8025422:	68e8      	ldr	r0, [r5, #12]
 8025424:	f7ff fb6c 	bl	8024b00 <lv_disp_dpx>
 8025428:	4601      	mov	r1, r0
 802542a:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 802542e:	f7fb ffa1 	bl	8021374 <lv_style_set_arc_width>
    lv_style_set_arc_rounded(&styles->arc_indic, true);
 8025432:	6820      	ldr	r0, [r4, #0]
 8025434:	2101      	movs	r1, #1
 8025436:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 802543a:	f7fb ffa1 	bl	8021380 <lv_style_set_arc_rounded>
    style_init_reset(&styles->arc_indic_primary);
 802543e:	6820      	ldr	r0, [r4, #0]
 8025440:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 8025444:	f7ff fbb0 	bl	8024ba8 <style_init_reset>
    lv_style_set_arc_color(&styles->arc_indic_primary, theme.color_primary);
 8025448:	6820      	ldr	r0, [r4, #0]
 802544a:	8a29      	ldrh	r1, [r5, #16]
 802544c:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 8025450:	f7fb ff9c 	bl	802138c <lv_style_set_arc_color>
    style_init_reset(&styles->dropdown_list);
 8025454:	6820      	ldr	r0, [r4, #0]
 8025456:	f500 7098 	add.w	r0, r0, #304	@ 0x130
 802545a:	f7ff fba5 	bl	8024ba8 <style_init_reset>
    lv_style_set_max_height(&styles->dropdown_list, LV_DPI_DEF * 2);
 802545e:	6820      	ldr	r0, [r4, #0]
 8025460:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8025464:	f500 7098 	add.w	r0, r0, #304	@ 0x130
 8025468:	f7fb fed6 	bl	8021218 <lv_style_set_max_height>
    style_init_reset(&styles->cb_marker);
 802546c:	6820      	ldr	r0, [r4, #0]
 802546e:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 8025472:	f7ff fb99 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->cb_marker, lv_disp_dpx(theme.disp, 3));
 8025476:	6827      	ldr	r7, [r4, #0]
 8025478:	2103      	movs	r1, #3
 802547a:	68e8      	ldr	r0, [r5, #12]
 802547c:	f7ff fb40 	bl	8024b00 <lv_disp_dpx>
 8025480:	4601      	mov	r1, r0
 8025482:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8025486:	f7ff fb7d 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_border_width(&styles->cb_marker, BORDER_WIDTH);
 802548a:	6827      	ldr	r7, [r4, #0]
 802548c:	2102      	movs	r1, #2
 802548e:	68e8      	ldr	r0, [r5, #12]
 8025490:	f7ff fb36 	bl	8024b00 <lv_disp_dpx>
 8025494:	4601      	mov	r1, r0
 8025496:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 802549a:	f7fb ff17 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->cb_marker, theme.color_primary);
 802549e:	6820      	ldr	r0, [r4, #0]
 80254a0:	8a29      	ldrh	r1, [r5, #16]
 80254a2:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 80254a6:	f7fb ff05 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->cb_marker, color_card);
 80254aa:	6820      	ldr	r0, [r4, #0]
 80254ac:	8831      	ldrh	r1, [r6, #0]
 80254ae:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 80254b2:	f7fb fee7 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->cb_marker, LV_OPA_COVER);
 80254b6:	6820      	ldr	r0, [r4, #0]
 80254b8:	21ff      	movs	r1, #255	@ 0xff
 80254ba:	f500 709c 	add.w	r0, r0, #312	@ 0x138
 80254be:	f7fb fee7 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 80254c2:	6824      	ldr	r4, [r4, #0]
 80254c4:	f504 749c 	add.w	r4, r4, #312	@ 0x138
 80254c8:	4b2e      	ldr	r3, [pc, #184]	@ (8025584 <style_init+0x9c4>)
 80254ca:	781b      	ldrb	r3, [r3, #0]
 80254cc:	2b01      	cmp	r3, #1
 80254ce:	f000 870d 	beq.w	80262ec <style_init+0x172c>
 80254d2:	2108      	movs	r1, #8
 80254d4:	4b27      	ldr	r3, [pc, #156]	@ (8025574 <style_init+0x9b4>)
 80254d6:	68d8      	ldr	r0, [r3, #12]
 80254d8:	f7ff fb12 	bl	8024b00 <lv_disp_dpx>
 80254dc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80254e0:	f340 014f 	sbfx	r1, r0, #1, #16
 80254e4:	4620      	mov	r0, r4
 80254e6:	f7fb ff6f 	bl	80213c8 <lv_style_set_radius>
    style_init_reset(&styles->cb_marker_checked);
 80254ea:	4c23      	ldr	r4, [pc, #140]	@ (8025578 <style_init+0x9b8>)
 80254ec:	6820      	ldr	r0, [r4, #0]
 80254ee:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 80254f2:	f7ff fb59 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_img_src(&styles->cb_marker_checked, LV_SYMBOL_OK);
 80254f6:	6820      	ldr	r0, [r4, #0]
 80254f8:	4923      	ldr	r1, [pc, #140]	@ (8025588 <style_init+0x9c8>)
 80254fa:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 80254fe:	f7fb fed3 	bl	80212a8 <lv_style_set_bg_img_src>
    lv_style_set_text_color(&styles->cb_marker_checked, lv_color_white());
 8025502:	6820      	ldr	r0, [r4, #0]
 8025504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8025508:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 802550c:	f7fb ff44 	bl	8021398 <lv_style_set_text_color>
    lv_style_set_text_font(&styles->cb_marker_checked, theme.font_small);
 8025510:	6820      	ldr	r0, [r4, #0]
 8025512:	4d18      	ldr	r5, [pc, #96]	@ (8025574 <style_init+0x9b4>)
 8025514:	6969      	ldr	r1, [r5, #20]
 8025516:	f500 70a0 	add.w	r0, r0, #320	@ 0x140
 802551a:	f7fb ff43 	bl	80213a4 <lv_style_set_text_font>
    style_init_reset(&styles->switch_knob);
 802551e:	6820      	ldr	r0, [r4, #0]
 8025520:	f500 70a4 	add.w	r0, r0, #328	@ 0x148
 8025524:	f7ff fb40 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->switch_knob, - lv_disp_dpx(theme.disp, 4));
 8025528:	6826      	ldr	r6, [r4, #0]
 802552a:	2104      	movs	r1, #4
 802552c:	68e8      	ldr	r0, [r5, #12]
 802552e:	f7ff fae7 	bl	8024b00 <lv_disp_dpx>
 8025532:	b281      	uxth	r1, r0
 8025534:	4249      	negs	r1, r1
 8025536:	b209      	sxth	r1, r1
 8025538:	f506 70a4 	add.w	r0, r6, #328	@ 0x148
 802553c:	f7ff fb22 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_bg_color(&styles->switch_knob, lv_color_white());
 8025540:	6820      	ldr	r0, [r4, #0]
 8025542:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8025546:	f500 70a4 	add.w	r0, r0, #328	@ 0x148
 802554a:	f7fb fe9b 	bl	8021284 <lv_style_set_bg_color>
    style_init_reset(&styles->line);
 802554e:	6820      	ldr	r0, [r4, #0]
 8025550:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8025554:	f7ff fb28 	bl	8024ba8 <style_init_reset>
    lv_style_set_line_width(&styles->line, 1);
 8025558:	6820      	ldr	r0, [r4, #0]
 802555a:	2101      	movs	r1, #1
 802555c:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8025560:	f7fb fefc 	bl	802135c <lv_style_set_line_width>
    lv_style_set_line_color(&styles->line, color_text);
 8025564:	6820      	ldr	r0, [r4, #0]
 8025566:	4e09      	ldr	r6, [pc, #36]	@ (802558c <style_init+0x9cc>)
 8025568:	8831      	ldrh	r1, [r6, #0]
 802556a:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 802556e:	f7fb fefb 	bl	8021368 <lv_style_set_line_color>
 8025572:	e00d      	b.n	8025590 <style_init+0x9d0>
 8025574:	20008948 	.word	0x20008948
 8025578:	2000896c 	.word	0x2000896c
 802557c:	20008938 	.word	0x20008938
 8025580:	2000893c 	.word	0x2000893c
 8025584:	20008946 	.word	0x20008946
 8025588:	08029ccc 	.word	0x08029ccc
 802558c:	20008940 	.word	0x20008940
    style_init_reset(&styles->chart_bg);
 8025590:	6820      	ldr	r0, [r4, #0]
 8025592:	f500 7094 	add.w	r0, r0, #296	@ 0x128
 8025596:	f7ff fb07 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_post(&styles->chart_bg, false);
 802559a:	6820      	ldr	r0, [r4, #0]
 802559c:	2100      	movs	r1, #0
 802559e:	f500 7094 	add.w	r0, r0, #296	@ 0x128
 80255a2:	f7fb fe9f 	bl	80212e4 <lv_style_set_border_post>
    lv_style_set_pad_column(&styles->chart_bg, lv_disp_dpx(theme.disp, 10));
 80255a6:	6827      	ldr	r7, [r4, #0]
 80255a8:	210a      	movs	r1, #10
 80255aa:	68e8      	ldr	r0, [r5, #12]
 80255ac:	f7ff faa8 	bl	8024b00 <lv_disp_dpx>
 80255b0:	4601      	mov	r1, r0
 80255b2:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80255b6:	f7fb fe5f 	bl	8021278 <lv_style_set_pad_column>
    lv_style_set_line_color(&styles->chart_bg, color_grey);
 80255ba:	6820      	ldr	r0, [r4, #0]
 80255bc:	4bc8      	ldr	r3, [pc, #800]	@ (80258e0 <style_init+0xd20>)
 80255be:	8819      	ldrh	r1, [r3, #0]
 80255c0:	f500 7094 	add.w	r0, r0, #296	@ 0x128
 80255c4:	f7fb fed0 	bl	8021368 <lv_style_set_line_color>
    style_init_reset(&styles->chart_series);
 80255c8:	6820      	ldr	r0, [r4, #0]
 80255ca:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80255ce:	f7ff faeb 	bl	8024ba8 <style_init_reset>
    lv_style_set_line_width(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80255d2:	6827      	ldr	r7, [r4, #0]
 80255d4:	2103      	movs	r1, #3
 80255d6:	68e8      	ldr	r0, [r5, #12]
 80255d8:	f7ff fa92 	bl	8024b00 <lv_disp_dpx>
 80255dc:	4601      	mov	r1, r0
 80255de:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80255e2:	f7fb febb 	bl	802135c <lv_style_set_line_width>
    lv_style_set_radius(&styles->chart_series, lv_disp_dpx(theme.disp, 3));
 80255e6:	6827      	ldr	r7, [r4, #0]
 80255e8:	2103      	movs	r1, #3
 80255ea:	68e8      	ldr	r0, [r5, #12]
 80255ec:	f7ff fa88 	bl	8024b00 <lv_disp_dpx>
 80255f0:	4601      	mov	r1, r0
 80255f2:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80255f6:	f7fb fee7 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_series, lv_disp_dpx(theme.disp, 8));
 80255fa:	6827      	ldr	r7, [r4, #0]
 80255fc:	2108      	movs	r1, #8
 80255fe:	68e8      	ldr	r0, [r5, #12]
 8025600:	f7ff fa7e 	bl	8024b00 <lv_disp_dpx>
 8025604:	4601      	mov	r1, r0
 8025606:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 802560a:	f7ff faa7 	bl	8024b5c <lv_style_set_size>
    lv_style_set_pad_column(&styles->chart_series, lv_disp_dpx(theme.disp, 2));
 802560e:	6827      	ldr	r7, [r4, #0]
 8025610:	2102      	movs	r1, #2
 8025612:	68e8      	ldr	r0, [r5, #12]
 8025614:	f7ff fa74 	bl	8024b00 <lv_disp_dpx>
 8025618:	4601      	mov	r1, r0
 802561a:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 802561e:	f7fb fe2b 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->chart_indic);
 8025622:	6820      	ldr	r0, [r4, #0]
 8025624:	f500 708c 	add.w	r0, r0, #280	@ 0x118
 8025628:	f7ff fabe 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->chart_indic, LV_RADIUS_CIRCLE);
 802562c:	6820      	ldr	r0, [r4, #0]
 802562e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8025632:	f500 708c 	add.w	r0, r0, #280	@ 0x118
 8025636:	f7fb fec7 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_size(&styles->chart_indic, lv_disp_dpx(theme.disp, 8));
 802563a:	6827      	ldr	r7, [r4, #0]
 802563c:	2108      	movs	r1, #8
 802563e:	68e8      	ldr	r0, [r5, #12]
 8025640:	f7ff fa5e 	bl	8024b00 <lv_disp_dpx>
 8025644:	4601      	mov	r1, r0
 8025646:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 802564a:	f7ff fa87 	bl	8024b5c <lv_style_set_size>
    lv_style_set_bg_color(&styles->chart_indic, theme.color_primary);
 802564e:	6820      	ldr	r0, [r4, #0]
 8025650:	8a29      	ldrh	r1, [r5, #16]
 8025652:	f500 708c 	add.w	r0, r0, #280	@ 0x118
 8025656:	f7fb fe15 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->chart_indic, LV_OPA_COVER);
 802565a:	6820      	ldr	r0, [r4, #0]
 802565c:	21ff      	movs	r1, #255	@ 0xff
 802565e:	f500 708c 	add.w	r0, r0, #280	@ 0x118
 8025662:	f7fb fe15 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->chart_ticks);
 8025666:	6820      	ldr	r0, [r4, #0]
 8025668:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 802566c:	f7ff fa9c 	bl	8024ba8 <style_init_reset>
    lv_style_set_line_width(&styles->chart_ticks, lv_disp_dpx(theme.disp, 1));
 8025670:	6827      	ldr	r7, [r4, #0]
 8025672:	2101      	movs	r1, #1
 8025674:	68e8      	ldr	r0, [r5, #12]
 8025676:	f7ff fa43 	bl	8024b00 <lv_disp_dpx>
 802567a:	4601      	mov	r1, r0
 802567c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8025680:	f7fb fe6c 	bl	802135c <lv_style_set_line_width>
    lv_style_set_line_color(&styles->chart_ticks, color_text);
 8025684:	6820      	ldr	r0, [r4, #0]
 8025686:	8831      	ldrh	r1, [r6, #0]
 8025688:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 802568c:	f7fb fe6c 	bl	8021368 <lv_style_set_line_color>
    lv_style_set_pad_all(&styles->chart_ticks, lv_disp_dpx(theme.disp, 2));
 8025690:	6826      	ldr	r6, [r4, #0]
 8025692:	2102      	movs	r1, #2
 8025694:	68e8      	ldr	r0, [r5, #12]
 8025696:	f7ff fa33 	bl	8024b00 <lv_disp_dpx>
 802569a:	4601      	mov	r1, r0
 802569c:	f506 7090 	add.w	r0, r6, #288	@ 0x120
 80256a0:	f7ff fa70 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_text_color(&styles->chart_ticks, lv_palette_main(LV_PALETTE_GREY));
 80256a4:	6825      	ldr	r5, [r4, #0]
 80256a6:	2012      	movs	r0, #18
 80256a8:	f7e1 f966 	bl	8006978 <lv_palette_main>
 80256ac:	4601      	mov	r1, r0
 80256ae:	f505 7090 	add.w	r0, r5, #288	@ 0x120
 80256b2:	f7fb fe71 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->menu_bg);
 80256b6:	6820      	ldr	r0, [r4, #0]
 80256b8:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256bc:	f7ff fa74 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_bg, 0);
 80256c0:	6820      	ldr	r0, [r4, #0]
 80256c2:	2100      	movs	r1, #0
 80256c4:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256c8:	f7ff fa5c 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_bg, 0);
 80256cc:	6820      	ldr	r0, [r4, #0]
 80256ce:	2100      	movs	r1, #0
 80256d0:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256d4:	f7ff fa0a 	bl	8024aec <lv_style_set_pad_gap>
    lv_style_set_radius(&styles->menu_bg, 0);
 80256d8:	6820      	ldr	r0, [r4, #0]
 80256da:	2100      	movs	r1, #0
 80256dc:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256e0:	f7fb fe72 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_bg, true);
 80256e4:	6820      	ldr	r0, [r4, #0]
 80256e6:	2101      	movs	r1, #1
 80256e8:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256ec:	f7fb fe72 	bl	80213d4 <lv_style_set_clip_corner>
    lv_style_set_border_side(&styles->menu_bg, LV_BORDER_SIDE_NONE);
 80256f0:	6820      	ldr	r0, [r4, #0]
 80256f2:	2100      	movs	r1, #0
 80256f4:	f500 70d0 	add.w	r0, r0, #416	@ 0x1a0
 80256f8:	f7fb fdee 	bl	80212d8 <lv_style_set_border_side>
    style_init_reset(&styles->menu_section);
 80256fc:	6820      	ldr	r0, [r4, #0]
 80256fe:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8025702:	f7ff fa51 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 8025706:	6824      	ldr	r4, [r4, #0]
 8025708:	f504 74ec 	add.w	r4, r4, #472	@ 0x1d8
 802570c:	4b75      	ldr	r3, [pc, #468]	@ (80258e4 <style_init+0xd24>)
 802570e:	781b      	ldrb	r3, [r3, #0]
 8025710:	2b01      	cmp	r3, #1
 8025712:	f000 85f5 	beq.w	8026300 <style_init+0x1740>
 8025716:	2108      	movs	r1, #8
 8025718:	4b73      	ldr	r3, [pc, #460]	@ (80258e8 <style_init+0xd28>)
 802571a:	68d8      	ldr	r0, [r3, #12]
 802571c:	f7ff f9f0 	bl	8024b00 <lv_disp_dpx>
 8025720:	4601      	mov	r1, r0
 8025722:	4620      	mov	r0, r4
 8025724:	f7fb fe50 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_clip_corner(&styles->menu_section, true);
 8025728:	4c70      	ldr	r4, [pc, #448]	@ (80258ec <style_init+0xd2c>)
 802572a:	6820      	ldr	r0, [r4, #0]
 802572c:	2101      	movs	r1, #1
 802572e:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 8025732:	f7fb fe4f 	bl	80213d4 <lv_style_set_clip_corner>
    lv_style_set_bg_opa(&styles->menu_section, LV_OPA_COVER);
 8025736:	6820      	ldr	r0, [r4, #0]
 8025738:	21ff      	movs	r1, #255	@ 0xff
 802573a:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 802573e:	f7fb fda7 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_section, color_card);
 8025742:	6820      	ldr	r0, [r4, #0]
 8025744:	4b6a      	ldr	r3, [pc, #424]	@ (80258f0 <style_init+0xd30>)
 8025746:	8819      	ldrh	r1, [r3, #0]
 8025748:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 802574c:	f7fb fd9a 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_text_color(&styles->menu_section, color_text);
 8025750:	6820      	ldr	r0, [r4, #0]
 8025752:	4b68      	ldr	r3, [pc, #416]	@ (80258f4 <style_init+0xd34>)
 8025754:	8819      	ldrh	r1, [r3, #0]
 8025756:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
 802575a:	f7fb fe1d 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->menu_cont);
 802575e:	6820      	ldr	r0, [r4, #0]
 8025760:	f500 70d4 	add.w	r0, r0, #424	@ 0x1a8
 8025764:	f7ff fa20 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 8025768:	6824      	ldr	r4, [r4, #0]
 802576a:	f504 74d4 	add.w	r4, r4, #424	@ 0x1a8
 802576e:	4b5d      	ldr	r3, [pc, #372]	@ (80258e4 <style_init+0xd24>)
 8025770:	781b      	ldrb	r3, [r3, #0]
 8025772:	2b01      	cmp	r3, #1
 8025774:	f000 85cc 	beq.w	8026310 <style_init+0x1750>
 8025778:	2b02      	cmp	r3, #2
 802577a:	f000 85d1 	beq.w	8026320 <style_init+0x1760>
 802577e:	210a      	movs	r1, #10
 8025780:	4b59      	ldr	r3, [pc, #356]	@ (80258e8 <style_init+0xd28>)
 8025782:	68d8      	ldr	r0, [r3, #12]
 8025784:	f7ff f9bc 	bl	8024b00 <lv_disp_dpx>
 8025788:	4601      	mov	r1, r0
 802578a:	4620      	mov	r0, r4
 802578c:	f7ff f9f0 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 8025790:	4b56      	ldr	r3, [pc, #344]	@ (80258ec <style_init+0xd2c>)
 8025792:	681c      	ldr	r4, [r3, #0]
 8025794:	f504 74d4 	add.w	r4, r4, #424	@ 0x1a8
 8025798:	4b52      	ldr	r3, [pc, #328]	@ (80258e4 <style_init+0xd24>)
 802579a:	781b      	ldrb	r3, [r3, #0]
 802579c:	2b01      	cmp	r3, #1
 802579e:	f000 85c7 	beq.w	8026330 <style_init+0x1770>
 80257a2:	2b02      	cmp	r3, #2
 80257a4:	f000 85cc 	beq.w	8026340 <style_init+0x1780>
 80257a8:	210a      	movs	r1, #10
 80257aa:	4b4f      	ldr	r3, [pc, #316]	@ (80258e8 <style_init+0xd28>)
 80257ac:	68d8      	ldr	r0, [r3, #12]
 80257ae:	f7ff f9a7 	bl	8024b00 <lv_disp_dpx>
 80257b2:	4601      	mov	r1, r0
 80257b4:	4620      	mov	r0, r4
 80257b6:	f7ff f9c1 	bl	8024b3c <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 80257ba:	4b4c      	ldr	r3, [pc, #304]	@ (80258ec <style_init+0xd2c>)
 80257bc:	681c      	ldr	r4, [r3, #0]
 80257be:	f504 74d4 	add.w	r4, r4, #424	@ 0x1a8
 80257c2:	4b48      	ldr	r3, [pc, #288]	@ (80258e4 <style_init+0xd24>)
 80257c4:	781b      	ldrb	r3, [r3, #0]
 80257c6:	2b01      	cmp	r3, #1
 80257c8:	f000 85c2 	beq.w	8026350 <style_init+0x1790>
 80257cc:	2b02      	cmp	r3, #2
 80257ce:	f000 85c7 	beq.w	8026360 <style_init+0x17a0>
 80257d2:	210a      	movs	r1, #10
 80257d4:	4b44      	ldr	r3, [pc, #272]	@ (80258e8 <style_init+0xd28>)
 80257d6:	68d8      	ldr	r0, [r3, #12]
 80257d8:	f7ff f992 	bl	8024b00 <lv_disp_dpx>
 80257dc:	4601      	mov	r1, r0
 80257de:	4620      	mov	r0, r4
 80257e0:	f7ff f984 	bl	8024aec <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_cont, lv_disp_dpx(theme.disp, 1));
 80257e4:	4c41      	ldr	r4, [pc, #260]	@ (80258ec <style_init+0xd2c>)
 80257e6:	6825      	ldr	r5, [r4, #0]
 80257e8:	4e3f      	ldr	r6, [pc, #252]	@ (80258e8 <style_init+0xd28>)
 80257ea:	2101      	movs	r1, #1
 80257ec:	68f0      	ldr	r0, [r6, #12]
 80257ee:	f7ff f987 	bl	8024b00 <lv_disp_dpx>
 80257f2:	4601      	mov	r1, r0
 80257f4:	f505 70d4 	add.w	r0, r5, #424	@ 0x1a8
 80257f8:	f7fb fd68 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_cont, LV_OPA_10);
 80257fc:	6820      	ldr	r0, [r4, #0]
 80257fe:	2119      	movs	r1, #25
 8025800:	f500 70d4 	add.w	r0, r0, #424	@ 0x1a8
 8025804:	f7fb fd5c 	bl	80212c0 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_cont, color_text);
 8025808:	6820      	ldr	r0, [r4, #0]
 802580a:	4d3a      	ldr	r5, [pc, #232]	@ (80258f4 <style_init+0xd34>)
 802580c:	8829      	ldrh	r1, [r5, #0]
 802580e:	f500 70d4 	add.w	r0, r0, #424	@ 0x1a8
 8025812:	f7fb fd4f 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_cont, LV_BORDER_SIDE_NONE);
 8025816:	6820      	ldr	r0, [r4, #0]
 8025818:	2100      	movs	r1, #0
 802581a:	f500 70d4 	add.w	r0, r0, #424	@ 0x1a8
 802581e:	f7fb fd5b 	bl	80212d8 <lv_style_set_border_side>
    style_init_reset(&styles->menu_sidebar_cont);
 8025822:	6820      	ldr	r0, [r4, #0]
 8025824:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 8025828:	f7ff f9be 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_sidebar_cont, 0);
 802582c:	6820      	ldr	r0, [r4, #0]
 802582e:	2100      	movs	r1, #0
 8025830:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 8025834:	f7ff f9a6 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_sidebar_cont, 0);
 8025838:	6820      	ldr	r0, [r4, #0]
 802583a:	2100      	movs	r1, #0
 802583c:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 8025840:	f7ff f954 	bl	8024aec <lv_style_set_pad_gap>
    lv_style_set_border_width(&styles->menu_sidebar_cont, lv_disp_dpx(theme.disp, 1));
 8025844:	6827      	ldr	r7, [r4, #0]
 8025846:	2101      	movs	r1, #1
 8025848:	68f0      	ldr	r0, [r6, #12]
 802584a:	f7ff f959 	bl	8024b00 <lv_disp_dpx>
 802584e:	4601      	mov	r1, r0
 8025850:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 8025854:	f7fb fd3a 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_opa(&styles->menu_sidebar_cont, LV_OPA_10);
 8025858:	6820      	ldr	r0, [r4, #0]
 802585a:	2119      	movs	r1, #25
 802585c:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 8025860:	f7fb fd2e 	bl	80212c0 <lv_style_set_border_opa>
    lv_style_set_border_color(&styles->menu_sidebar_cont, color_text);
 8025864:	6820      	ldr	r0, [r4, #0]
 8025866:	8829      	ldrh	r1, [r5, #0]
 8025868:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 802586c:	f7fb fd22 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->menu_sidebar_cont, LV_BORDER_SIDE_RIGHT);
 8025870:	6820      	ldr	r0, [r4, #0]
 8025872:	2108      	movs	r1, #8
 8025874:	f500 70d8 	add.w	r0, r0, #432	@ 0x1b0
 8025878:	f7fb fd2e 	bl	80212d8 <lv_style_set_border_side>
    style_init_reset(&styles->menu_main_cont);
 802587c:	6820      	ldr	r0, [r4, #0]
 802587e:	f500 70dc 	add.w	r0, r0, #440	@ 0x1b8
 8025882:	f7ff f991 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->menu_main_cont, 0);
 8025886:	6820      	ldr	r0, [r4, #0]
 8025888:	2100      	movs	r1, #0
 802588a:	f500 70dc 	add.w	r0, r0, #440	@ 0x1b8
 802588e:	f7ff f979 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->menu_main_cont, 0);
 8025892:	6820      	ldr	r0, [r4, #0]
 8025894:	2100      	movs	r1, #0
 8025896:	f500 70dc 	add.w	r0, r0, #440	@ 0x1b8
 802589a:	f7ff f927 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_cont);
 802589e:	6820      	ldr	r0, [r4, #0]
 80258a0:	f500 70e4 	add.w	r0, r0, #456	@ 0x1c8
 80258a4:	f7ff f980 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 80258a8:	6824      	ldr	r4, [r4, #0]
 80258aa:	f504 74e4 	add.w	r4, r4, #456	@ 0x1c8
 80258ae:	4b0d      	ldr	r3, [pc, #52]	@ (80258e4 <style_init+0xd24>)
 80258b0:	781b      	ldrb	r3, [r3, #0]
 80258b2:	2b01      	cmp	r3, #1
 80258b4:	f000 855c 	beq.w	8026370 <style_init+0x17b0>
 80258b8:	2b02      	cmp	r3, #2
 80258ba:	f000 8560 	beq.w	802637e <style_init+0x17be>
 80258be:	210a      	movs	r1, #10
 80258c0:	4b09      	ldr	r3, [pc, #36]	@ (80258e8 <style_init+0xd28>)
 80258c2:	68d8      	ldr	r0, [r3, #12]
 80258c4:	f7ff f91c 	bl	8024b00 <lv_disp_dpx>
 80258c8:	4601      	mov	r1, r0
 80258ca:	4620      	mov	r0, r4
 80258cc:	f7ff f950 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 80258d0:	4b06      	ldr	r3, [pc, #24]	@ (80258ec <style_init+0xd2c>)
 80258d2:	681c      	ldr	r4, [r3, #0]
 80258d4:	f504 74e4 	add.w	r4, r4, #456	@ 0x1c8
 80258d8:	4b02      	ldr	r3, [pc, #8]	@ (80258e4 <style_init+0xd24>)
 80258da:	781b      	ldrb	r3, [r3, #0]
 80258dc:	2b01      	cmp	r3, #1
 80258de:	e00b      	b.n	80258f8 <style_init+0xd38>
 80258e0:	20008938 	.word	0x20008938
 80258e4:	20008946 	.word	0x20008946
 80258e8:	20008948 	.word	0x20008948
 80258ec:	2000896c 	.word	0x2000896c
 80258f0:	2000893c 	.word	0x2000893c
 80258f4:	20008940 	.word	0x20008940
 80258f8:	f000 8549 	beq.w	802638e <style_init+0x17ce>
 80258fc:	2b02      	cmp	r3, #2
 80258fe:	f000 854e 	beq.w	802639e <style_init+0x17de>
 8025902:	2102      	movs	r1, #2
 8025904:	4bc6      	ldr	r3, [pc, #792]	@ (8025c20 <style_init+0x1060>)
 8025906:	68d8      	ldr	r0, [r3, #12]
 8025908:	f7ff f8fa 	bl	8024b00 <lv_disp_dpx>
 802590c:	4601      	mov	r1, r0
 802590e:	4620      	mov	r0, r4
 8025910:	f7ff f914 	bl	8024b3c <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 8025914:	4bc3      	ldr	r3, [pc, #780]	@ (8025c24 <style_init+0x1064>)
 8025916:	681c      	ldr	r4, [r3, #0]
 8025918:	f504 74e4 	add.w	r4, r4, #456	@ 0x1c8
 802591c:	4bc2      	ldr	r3, [pc, #776]	@ (8025c28 <style_init+0x1068>)
 802591e:	781b      	ldrb	r3, [r3, #0]
 8025920:	2b01      	cmp	r3, #1
 8025922:	f000 8544 	beq.w	80263ae <style_init+0x17ee>
 8025926:	2b02      	cmp	r3, #2
 8025928:	f000 8549 	beq.w	80263be <style_init+0x17fe>
 802592c:	210a      	movs	r1, #10
 802592e:	4bbc      	ldr	r3, [pc, #752]	@ (8025c20 <style_init+0x1060>)
 8025930:	68d8      	ldr	r0, [r3, #12]
 8025932:	f7ff f8e5 	bl	8024b00 <lv_disp_dpx>
 8025936:	4601      	mov	r1, r0
 8025938:	4620      	mov	r0, r4
 802593a:	f7ff f8d7 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_header_btn);
 802593e:	4cb9      	ldr	r4, [pc, #740]	@ (8025c24 <style_init+0x1064>)
 8025940:	6820      	ldr	r0, [r4, #0]
 8025942:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 8025946:	f7ff f92f 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 802594a:	6824      	ldr	r4, [r4, #0]
 802594c:	f504 74e8 	add.w	r4, r4, #464	@ 0x1d0
 8025950:	4bb5      	ldr	r3, [pc, #724]	@ (8025c28 <style_init+0x1068>)
 8025952:	781b      	ldrb	r3, [r3, #0]
 8025954:	2b01      	cmp	r3, #1
 8025956:	f000 853a 	beq.w	80263ce <style_init+0x180e>
 802595a:	2b02      	cmp	r3, #2
 802595c:	f000 853f 	beq.w	80263de <style_init+0x181e>
 8025960:	2102      	movs	r1, #2
 8025962:	4baf      	ldr	r3, [pc, #700]	@ (8025c20 <style_init+0x1060>)
 8025964:	68d8      	ldr	r0, [r3, #12]
 8025966:	f7ff f8cb 	bl	8024b00 <lv_disp_dpx>
 802596a:	4601      	mov	r1, r0
 802596c:	4620      	mov	r0, r4
 802596e:	f7ff f8ff 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 8025972:	4bac      	ldr	r3, [pc, #688]	@ (8025c24 <style_init+0x1064>)
 8025974:	681c      	ldr	r4, [r3, #0]
 8025976:	f504 74e8 	add.w	r4, r4, #464	@ 0x1d0
 802597a:	4bab      	ldr	r3, [pc, #684]	@ (8025c28 <style_init+0x1068>)
 802597c:	781b      	ldrb	r3, [r3, #0]
 802597e:	2b01      	cmp	r3, #1
 8025980:	f000 8535 	beq.w	80263ee <style_init+0x182e>
 8025984:	2b02      	cmp	r3, #2
 8025986:	f000 853a 	beq.w	80263fe <style_init+0x183e>
 802598a:	2102      	movs	r1, #2
 802598c:	4ba4      	ldr	r3, [pc, #656]	@ (8025c20 <style_init+0x1060>)
 802598e:	68d8      	ldr	r0, [r3, #12]
 8025990:	f7ff f8b6 	bl	8024b00 <lv_disp_dpx>
 8025994:	4601      	mov	r1, r0
 8025996:	4620      	mov	r0, r4
 8025998:	f7ff f8d0 	bl	8024b3c <lv_style_set_pad_ver>
    lv_style_set_shadow_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 802599c:	4ca1      	ldr	r4, [pc, #644]	@ (8025c24 <style_init+0x1064>)
 802599e:	6820      	ldr	r0, [r4, #0]
 80259a0:	2100      	movs	r1, #0
 80259a2:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80259a6:	f7fb fcd3 	bl	8021350 <lv_style_set_shadow_opa>
    lv_style_set_bg_opa(&styles->menu_header_btn, LV_OPA_TRANSP);
 80259aa:	6820      	ldr	r0, [r4, #0]
 80259ac:	2100      	movs	r1, #0
 80259ae:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80259b2:	f7fb fc6d 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_text_color(&styles->menu_header_btn, color_text);
 80259b6:	6820      	ldr	r0, [r4, #0]
 80259b8:	4b9c      	ldr	r3, [pc, #624]	@ (8025c2c <style_init+0x106c>)
 80259ba:	8819      	ldrh	r1, [r3, #0]
 80259bc:	f500 70e8 	add.w	r0, r0, #464	@ 0x1d0
 80259c0:	f7fb fcea 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->menu_page);
 80259c4:	6820      	ldr	r0, [r4, #0]
 80259c6:	f500 70e0 	add.w	r0, r0, #448	@ 0x1c0
 80259ca:	f7ff f8ed 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->menu_page, 0);
 80259ce:	6820      	ldr	r0, [r4, #0]
 80259d0:	2100      	movs	r1, #0
 80259d2:	f500 70e0 	add.w	r0, r0, #448	@ 0x1c0
 80259d6:	f7ff f8cb 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_gap(&styles->menu_page, 0);
 80259da:	6820      	ldr	r0, [r4, #0]
 80259dc:	2100      	movs	r1, #0
 80259de:	f500 70e0 	add.w	r0, r0, #448	@ 0x1c0
 80259e2:	f7ff f883 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->menu_pressed);
 80259e6:	6820      	ldr	r0, [r4, #0]
 80259e8:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 80259ec:	f7ff f8dc 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_pressed, LV_OPA_20);
 80259f0:	6820      	ldr	r0, [r4, #0]
 80259f2:	2133      	movs	r1, #51	@ 0x33
 80259f4:	f500 70f0 	add.w	r0, r0, #480	@ 0x1e0
 80259f8:	f7fb fc4a 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->menu_pressed, lv_palette_main(LV_PALETTE_GREY));
 80259fc:	6825      	ldr	r5, [r4, #0]
 80259fe:	2012      	movs	r0, #18
 8025a00:	f7e0 ffba 	bl	8006978 <lv_palette_main>
 8025a04:	4601      	mov	r1, r0
 8025a06:	f505 70f0 	add.w	r0, r5, #480	@ 0x1e0
 8025a0a:	f7fb fc3b 	bl	8021284 <lv_style_set_bg_color>
    style_init_reset(&styles->menu_separator);
 8025a0e:	6820      	ldr	r0, [r4, #0]
 8025a10:	f500 70f4 	add.w	r0, r0, #488	@ 0x1e8
 8025a14:	f7ff f8c8 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_opa(&styles->menu_separator, LV_OPA_TRANSP);
 8025a18:	6820      	ldr	r0, [r4, #0]
 8025a1a:	2100      	movs	r1, #0
 8025a1c:	f500 70f4 	add.w	r0, r0, #488	@ 0x1e8
 8025a20:	f7fb fc36 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 8025a24:	6824      	ldr	r4, [r4, #0]
 8025a26:	f504 74f4 	add.w	r4, r4, #488	@ 0x1e8
 8025a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8025c28 <style_init+0x1068>)
 8025a2c:	781b      	ldrb	r3, [r3, #0]
 8025a2e:	2b01      	cmp	r3, #1
 8025a30:	f000 84ed 	beq.w	802640e <style_init+0x184e>
 8025a34:	2b02      	cmp	r3, #2
 8025a36:	f000 84f2 	beq.w	802641e <style_init+0x185e>
 8025a3a:	2102      	movs	r1, #2
 8025a3c:	4b78      	ldr	r3, [pc, #480]	@ (8025c20 <style_init+0x1060>)
 8025a3e:	68d8      	ldr	r0, [r3, #12]
 8025a40:	f7ff f85e 	bl	8024b00 <lv_disp_dpx>
 8025a44:	4601      	mov	r1, r0
 8025a46:	4620      	mov	r0, r4
 8025a48:	f7ff f878 	bl	8024b3c <lv_style_set_pad_ver>
    style_init_reset(&styles->meter_marker);
 8025a4c:	4c75      	ldr	r4, [pc, #468]	@ (8025c24 <style_init+0x1064>)
 8025a4e:	6820      	ldr	r0, [r4, #0]
 8025a50:	f500 70b0 	add.w	r0, r0, #352	@ 0x160
 8025a54:	f7ff f8a8 	bl	8024ba8 <style_init_reset>
    lv_style_set_line_width(&styles->meter_marker, lv_disp_dpx(theme.disp, 5));
 8025a58:	6826      	ldr	r6, [r4, #0]
 8025a5a:	4d71      	ldr	r5, [pc, #452]	@ (8025c20 <style_init+0x1060>)
 8025a5c:	2105      	movs	r1, #5
 8025a5e:	68e8      	ldr	r0, [r5, #12]
 8025a60:	f7ff f84e 	bl	8024b00 <lv_disp_dpx>
 8025a64:	4601      	mov	r1, r0
 8025a66:	f506 70b0 	add.w	r0, r6, #352	@ 0x160
 8025a6a:	f7fb fc77 	bl	802135c <lv_style_set_line_width>
    lv_style_set_line_color(&styles->meter_marker, color_text);
 8025a6e:	6820      	ldr	r0, [r4, #0]
 8025a70:	4e6e      	ldr	r6, [pc, #440]	@ (8025c2c <style_init+0x106c>)
 8025a72:	8831      	ldrh	r1, [r6, #0]
 8025a74:	f500 70b0 	add.w	r0, r0, #352	@ 0x160
 8025a78:	f7fb fc76 	bl	8021368 <lv_style_set_line_color>
    lv_style_set_size(&styles->meter_marker, lv_disp_dpx(theme.disp, 20));
 8025a7c:	6827      	ldr	r7, [r4, #0]
 8025a7e:	2114      	movs	r1, #20
 8025a80:	68e8      	ldr	r0, [r5, #12]
 8025a82:	f7ff f83d 	bl	8024b00 <lv_disp_dpx>
 8025a86:	4601      	mov	r1, r0
 8025a88:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8025a8c:	f7ff f866 	bl	8024b5c <lv_style_set_size>
    lv_style_set_pad_left(&styles->meter_marker, lv_disp_dpx(theme.disp, 15));
 8025a90:	6827      	ldr	r7, [r4, #0]
 8025a92:	210f      	movs	r1, #15
 8025a94:	68e8      	ldr	r0, [r5, #12]
 8025a96:	f7ff f833 	bl	8024b00 <lv_disp_dpx>
 8025a9a:	4601      	mov	r1, r0
 8025a9c:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8025aa0:	f7fb fbd8 	bl	8021254 <lv_style_set_pad_left>
    style_init_reset(&styles->meter_indic);
 8025aa4:	6820      	ldr	r0, [r4, #0]
 8025aa6:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8025aaa:	f7ff f87d 	bl	8024ba8 <style_init_reset>
    lv_style_set_radius(&styles->meter_indic, LV_RADIUS_CIRCLE);
 8025aae:	6820      	ldr	r0, [r4, #0]
 8025ab0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8025ab4:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8025ab8:	f7fb fc86 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_bg_color(&styles->meter_indic, color_text);
 8025abc:	6820      	ldr	r0, [r4, #0]
 8025abe:	8831      	ldrh	r1, [r6, #0]
 8025ac0:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8025ac4:	f7fb fbde 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->meter_indic, LV_OPA_COVER);
 8025ac8:	6820      	ldr	r0, [r4, #0]
 8025aca:	21ff      	movs	r1, #255	@ 0xff
 8025acc:	f500 70b4 	add.w	r0, r0, #360	@ 0x168
 8025ad0:	f7fb fbde 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_size(&styles->meter_indic, lv_disp_dpx(theme.disp, 15));
 8025ad4:	6827      	ldr	r7, [r4, #0]
 8025ad6:	210f      	movs	r1, #15
 8025ad8:	68e8      	ldr	r0, [r5, #12]
 8025ada:	f7ff f811 	bl	8024b00 <lv_disp_dpx>
 8025ade:	4601      	mov	r1, r0
 8025ae0:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8025ae4:	f7ff f83a 	bl	8024b5c <lv_style_set_size>
    style_init_reset(&styles->table_cell);
 8025ae8:	6820      	ldr	r0, [r4, #0]
 8025aea:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8025aee:	f7ff f85b 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_width(&styles->table_cell, lv_disp_dpx(theme.disp, 1));
 8025af2:	6827      	ldr	r7, [r4, #0]
 8025af4:	2101      	movs	r1, #1
 8025af6:	68e8      	ldr	r0, [r5, #12]
 8025af8:	f7ff f802 	bl	8024b00 <lv_disp_dpx>
 8025afc:	4601      	mov	r1, r0
 8025afe:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8025b02:	f7fb fbe3 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->table_cell, color_grey);
 8025b06:	6820      	ldr	r0, [r4, #0]
 8025b08:	4b49      	ldr	r3, [pc, #292]	@ (8025c30 <style_init+0x1070>)
 8025b0a:	8819      	ldrh	r1, [r3, #0]
 8025b0c:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8025b10:	f7fb fbd0 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->table_cell, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
 8025b14:	6820      	ldr	r0, [r4, #0]
 8025b16:	2103      	movs	r1, #3
 8025b18:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 8025b1c:	f7fb fbdc 	bl	80212d8 <lv_style_set_border_side>
    style_init_reset(&styles->ta_cursor);
 8025b20:	6820      	ldr	r0, [r4, #0]
 8025b22:	f500 70b8 	add.w	r0, r0, #368	@ 0x170
 8025b26:	f7ff f83f 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_color(&styles->ta_cursor, color_text);
 8025b2a:	6820      	ldr	r0, [r4, #0]
 8025b2c:	8831      	ldrh	r1, [r6, #0]
 8025b2e:	f500 70b8 	add.w	r0, r0, #368	@ 0x170
 8025b32:	f7fb fbbf 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->ta_cursor, lv_disp_dpx(theme.disp, 2));
 8025b36:	6826      	ldr	r6, [r4, #0]
 8025b38:	2102      	movs	r1, #2
 8025b3a:	68e8      	ldr	r0, [r5, #12]
 8025b3c:	f7fe ffe0 	bl	8024b00 <lv_disp_dpx>
 8025b40:	4601      	mov	r1, r0
 8025b42:	f506 70b8 	add.w	r0, r6, #368	@ 0x170
 8025b46:	f7fb fbc1 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_pad_left(&styles->ta_cursor, - lv_disp_dpx(theme.disp, 1));
 8025b4a:	6826      	ldr	r6, [r4, #0]
 8025b4c:	2101      	movs	r1, #1
 8025b4e:	68e8      	ldr	r0, [r5, #12]
 8025b50:	f7fe ffd6 	bl	8024b00 <lv_disp_dpx>
 8025b54:	b281      	uxth	r1, r0
 8025b56:	4249      	negs	r1, r1
 8025b58:	b209      	sxth	r1, r1
 8025b5a:	f506 70b8 	add.w	r0, r6, #368	@ 0x170
 8025b5e:	f7fb fb79 	bl	8021254 <lv_style_set_pad_left>
    lv_style_set_border_side(&styles->ta_cursor, LV_BORDER_SIDE_LEFT);
 8025b62:	6820      	ldr	r0, [r4, #0]
 8025b64:	2104      	movs	r1, #4
 8025b66:	f500 70b8 	add.w	r0, r0, #368	@ 0x170
 8025b6a:	f7fb fbb5 	bl	80212d8 <lv_style_set_border_side>
    lv_style_set_anim_time(&styles->ta_cursor, 400);
 8025b6e:	6820      	ldr	r0, [r4, #0]
 8025b70:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8025b74:	f500 70b8 	add.w	r0, r0, #368	@ 0x170
 8025b78:	f7fb fc3e 	bl	80213f8 <lv_style_set_anim_time>
    style_init_reset(&styles->ta_placeholder);
 8025b7c:	6820      	ldr	r0, [r4, #0]
 8025b7e:	f500 70bc 	add.w	r0, r0, #376	@ 0x178
 8025b82:	f7ff f811 	bl	8024ba8 <style_init_reset>
    lv_style_set_text_color(&styles->ta_placeholder, (theme.flags & MODE_DARK) ? lv_palette_darken(LV_PALETTE_GREY,
 8025b86:	6824      	ldr	r4, [r4, #0]
 8025b88:	f504 74bc 	add.w	r4, r4, #376	@ 0x178
 8025b8c:	6a2b      	ldr	r3, [r5, #32]
 8025b8e:	f013 0f01 	tst.w	r3, #1
 8025b92:	f000 844c 	beq.w	802642e <style_init+0x186e>
 8025b96:	2102      	movs	r1, #2
 8025b98:	2012      	movs	r0, #18
 8025b9a:	f7e0 ff27 	bl	80069ec <lv_palette_darken>
 8025b9e:	4601      	mov	r1, r0
 8025ba0:	4620      	mov	r0, r4
 8025ba2:	f7fb fbf9 	bl	8021398 <lv_style_set_text_color>
    style_init_reset(&styles->calendar_btnm_bg);
 8025ba6:	4c1f      	ldr	r4, [pc, #124]	@ (8025c24 <style_init+0x1064>)
 8025ba8:	6820      	ldr	r0, [r4, #0]
 8025baa:	f500 70c0 	add.w	r0, r0, #384	@ 0x180
 8025bae:	f7fe fffb 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 8025bb2:	6824      	ldr	r4, [r4, #0]
 8025bb4:	f504 74c0 	add.w	r4, r4, #384	@ 0x180
 8025bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8025c28 <style_init+0x1068>)
 8025bba:	781b      	ldrb	r3, [r3, #0]
 8025bbc:	2b01      	cmp	r3, #1
 8025bbe:	f000 843d 	beq.w	802643c <style_init+0x187c>
 8025bc2:	2b02      	cmp	r3, #2
 8025bc4:	f000 8442 	beq.w	802644c <style_init+0x188c>
 8025bc8:	210a      	movs	r1, #10
 8025bca:	4b15      	ldr	r3, [pc, #84]	@ (8025c20 <style_init+0x1060>)
 8025bcc:	68d8      	ldr	r0, [r3, #12]
 8025bce:	f7fe ff97 	bl	8024b00 <lv_disp_dpx>
 8025bd2:	4601      	mov	r1, r0
 8025bd4:	4620      	mov	r0, r4
 8025bd6:	f7fe ffd5 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 8025bda:	4b12      	ldr	r3, [pc, #72]	@ (8025c24 <style_init+0x1064>)
 8025bdc:	681c      	ldr	r4, [r3, #0]
 8025bde:	f504 74c0 	add.w	r4, r4, #384	@ 0x180
 8025be2:	4b11      	ldr	r3, [pc, #68]	@ (8025c28 <style_init+0x1068>)
 8025be4:	781b      	ldrb	r3, [r3, #0]
 8025be6:	2b01      	cmp	r3, #1
 8025be8:	f000 8438 	beq.w	802645c <style_init+0x189c>
 8025bec:	2b02      	cmp	r3, #2
 8025bee:	f000 8440 	beq.w	8026472 <style_init+0x18b2>
 8025bf2:	210a      	movs	r1, #10
 8025bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8025c20 <style_init+0x1060>)
 8025bf6:	68d8      	ldr	r0, [r3, #12]
 8025bf8:	f7fe ff82 	bl	8024b00 <lv_disp_dpx>
 8025bfc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8025c00:	f340 014f 	sbfx	r1, r0, #1, #16
 8025c04:	4620      	mov	r0, r4
 8025c06:	f7fe ff71 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->calendar_btnm_day);
 8025c0a:	4c06      	ldr	r4, [pc, #24]	@ (8025c24 <style_init+0x1064>)
 8025c0c:	6820      	ldr	r0, [r4, #0]
 8025c0e:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 8025c12:	f7fe ffc9 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_width(&styles->calendar_btnm_day, lv_disp_dpx(theme.disp, 1));
 8025c16:	6825      	ldr	r5, [r4, #0]
 8025c18:	2101      	movs	r1, #1
 8025c1a:	4b01      	ldr	r3, [pc, #4]	@ (8025c20 <style_init+0x1060>)
 8025c1c:	68d8      	ldr	r0, [r3, #12]
 8025c1e:	e009      	b.n	8025c34 <style_init+0x1074>
 8025c20:	20008948 	.word	0x20008948
 8025c24:	2000896c 	.word	0x2000896c
 8025c28:	20008946 	.word	0x20008946
 8025c2c:	20008940 	.word	0x20008940
 8025c30:	20008938 	.word	0x20008938
 8025c34:	f7fe ff64 	bl	8024b00 <lv_disp_dpx>
 8025c38:	4601      	mov	r1, r0
 8025c3a:	f505 70c4 	add.w	r0, r5, #392	@ 0x188
 8025c3e:	f7fb fb45 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->calendar_btnm_day, color_grey);
 8025c42:	6820      	ldr	r0, [r4, #0]
 8025c44:	4bc1      	ldr	r3, [pc, #772]	@ (8025f4c <style_init+0x138c>)
 8025c46:	8819      	ldrh	r1, [r3, #0]
 8025c48:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 8025c4c:	f7fb fb32 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_bg_color(&styles->calendar_btnm_day, color_card);
 8025c50:	6820      	ldr	r0, [r4, #0]
 8025c52:	4bbf      	ldr	r3, [pc, #764]	@ (8025f50 <style_init+0x1390>)
 8025c54:	8819      	ldrh	r1, [r3, #0]
 8025c56:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 8025c5a:	f7fb fb13 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->calendar_btnm_day, LV_OPA_20);
 8025c5e:	6820      	ldr	r0, [r4, #0]
 8025c60:	2133      	movs	r1, #51	@ 0x33
 8025c62:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 8025c66:	f7fb fb13 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->calendar_header);
 8025c6a:	6820      	ldr	r0, [r4, #0]
 8025c6c:	f500 70c8 	add.w	r0, r0, #400	@ 0x190
 8025c70:	f7fe ff9a 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 8025c74:	6824      	ldr	r4, [r4, #0]
 8025c76:	f504 74c8 	add.w	r4, r4, #400	@ 0x190
 8025c7a:	4bb6      	ldr	r3, [pc, #728]	@ (8025f54 <style_init+0x1394>)
 8025c7c:	781b      	ldrb	r3, [r3, #0]
 8025c7e:	2b01      	cmp	r3, #1
 8025c80:	f000 8402 	beq.w	8026488 <style_init+0x18c8>
 8025c84:	2b02      	cmp	r3, #2
 8025c86:	f000 8407 	beq.w	8026498 <style_init+0x18d8>
 8025c8a:	210a      	movs	r1, #10
 8025c8c:	4bb2      	ldr	r3, [pc, #712]	@ (8025f58 <style_init+0x1398>)
 8025c8e:	68d8      	ldr	r0, [r3, #12]
 8025c90:	f7fe ff36 	bl	8024b00 <lv_disp_dpx>
 8025c94:	4601      	mov	r1, r0
 8025c96:	4620      	mov	r0, r4
 8025c98:	f7fe ff6a 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 8025c9c:	4baf      	ldr	r3, [pc, #700]	@ (8025f5c <style_init+0x139c>)
 8025c9e:	681c      	ldr	r4, [r3, #0]
 8025ca0:	f504 74c8 	add.w	r4, r4, #400	@ 0x190
 8025ca4:	4bab      	ldr	r3, [pc, #684]	@ (8025f54 <style_init+0x1394>)
 8025ca6:	781b      	ldrb	r3, [r3, #0]
 8025ca8:	2b01      	cmp	r3, #1
 8025caa:	f000 83fd 	beq.w	80264a8 <style_init+0x18e8>
 8025cae:	2b02      	cmp	r3, #2
 8025cb0:	f000 8401 	beq.w	80264b6 <style_init+0x18f6>
 8025cb4:	210a      	movs	r1, #10
 8025cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8025f58 <style_init+0x1398>)
 8025cb8:	68d8      	ldr	r0, [r3, #12]
 8025cba:	f7fe ff21 	bl	8024b00 <lv_disp_dpx>
 8025cbe:	4601      	mov	r1, r0
 8025cc0:	4620      	mov	r0, r4
 8025cc2:	f7fb fabb 	bl	802123c <lv_style_set_pad_top>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 8025cc6:	4ba5      	ldr	r3, [pc, #660]	@ (8025f5c <style_init+0x139c>)
 8025cc8:	681c      	ldr	r4, [r3, #0]
 8025cca:	f504 74c8 	add.w	r4, r4, #400	@ 0x190
 8025cce:	4ba1      	ldr	r3, [pc, #644]	@ (8025f54 <style_init+0x1394>)
 8025cd0:	781b      	ldrb	r3, [r3, #0]
 8025cd2:	2b01      	cmp	r3, #1
 8025cd4:	f000 83f7 	beq.w	80264c6 <style_init+0x1906>
 8025cd8:	2b02      	cmp	r3, #2
 8025cda:	f000 83fb 	beq.w	80264d4 <style_init+0x1914>
 8025cde:	2102      	movs	r1, #2
 8025ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8025f58 <style_init+0x1398>)
 8025ce2:	68d8      	ldr	r0, [r3, #12]
 8025ce4:	f7fe ff0c 	bl	8024b00 <lv_disp_dpx>
 8025ce8:	4601      	mov	r1, r0
 8025cea:	4620      	mov	r0, r4
 8025cec:	f7fb faac 	bl	8021248 <lv_style_set_pad_bottom>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 8025cf0:	4b9a      	ldr	r3, [pc, #616]	@ (8025f5c <style_init+0x139c>)
 8025cf2:	681c      	ldr	r4, [r3, #0]
 8025cf4:	f504 74c8 	add.w	r4, r4, #400	@ 0x190
 8025cf8:	4b96      	ldr	r3, [pc, #600]	@ (8025f54 <style_init+0x1394>)
 8025cfa:	781b      	ldrb	r3, [r3, #0]
 8025cfc:	2b01      	cmp	r3, #1
 8025cfe:	f000 83f0 	beq.w	80264e2 <style_init+0x1922>
 8025d02:	2b02      	cmp	r3, #2
 8025d04:	f000 83f4 	beq.w	80264f0 <style_init+0x1930>
 8025d08:	210a      	movs	r1, #10
 8025d0a:	4b93      	ldr	r3, [pc, #588]	@ (8025f58 <style_init+0x1398>)
 8025d0c:	68d8      	ldr	r0, [r3, #12]
 8025d0e:	f7fe fef7 	bl	8024b00 <lv_disp_dpx>
 8025d12:	4601      	mov	r1, r0
 8025d14:	4620      	mov	r0, r4
 8025d16:	f7fe fee9 	bl	8024aec <lv_style_set_pad_gap>
    style_init_reset(&styles->colorwheel_main);
 8025d1a:	4c90      	ldr	r4, [pc, #576]	@ (8025f5c <style_init+0x139c>)
 8025d1c:	6820      	ldr	r0, [r4, #0]
 8025d1e:	f500 70cc 	add.w	r0, r0, #408	@ 0x198
 8025d22:	f7fe ff41 	bl	8024ba8 <style_init_reset>
    lv_style_set_arc_width(&styles->colorwheel_main, lv_disp_dpx(theme.disp, 10));
 8025d26:	6826      	ldr	r6, [r4, #0]
 8025d28:	4d8b      	ldr	r5, [pc, #556]	@ (8025f58 <style_init+0x1398>)
 8025d2a:	210a      	movs	r1, #10
 8025d2c:	68e8      	ldr	r0, [r5, #12]
 8025d2e:	f7fe fee7 	bl	8024b00 <lv_disp_dpx>
 8025d32:	4601      	mov	r1, r0
 8025d34:	f506 70cc 	add.w	r0, r6, #408	@ 0x198
 8025d38:	f7fb fb1c 	bl	8021374 <lv_style_set_arc_width>
    style_init_reset(&styles->msgbox_btn_bg);
 8025d3c:	6820      	ldr	r0, [r4, #0]
 8025d3e:	f500 70fc 	add.w	r0, r0, #504	@ 0x1f8
 8025d42:	f7fe ff31 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_all(&styles->msgbox_btn_bg, lv_disp_dpx(theme.disp, 4));
 8025d46:	6826      	ldr	r6, [r4, #0]
 8025d48:	2104      	movs	r1, #4
 8025d4a:	68e8      	ldr	r0, [r5, #12]
 8025d4c:	f7fe fed8 	bl	8024b00 <lv_disp_dpx>
 8025d50:	4601      	mov	r1, r0
 8025d52:	f506 70fc 	add.w	r0, r6, #504	@ 0x1f8
 8025d56:	f7fe ff15 	bl	8024b84 <lv_style_set_pad_all>
    style_init_reset(&styles->msgbox_bg);
 8025d5a:	6820      	ldr	r0, [r4, #0]
 8025d5c:	f500 70f8 	add.w	r0, r0, #496	@ 0x1f0
 8025d60:	f7fe ff22 	bl	8024ba8 <style_init_reset>
    lv_style_set_max_width(&styles->msgbox_bg, lv_pct(100));
 8025d64:	6820      	ldr	r0, [r4, #0]
 8025d66:	f242 0164 	movw	r1, #8292	@ 0x2064
 8025d6a:	f500 70f8 	add.w	r0, r0, #496	@ 0x1f0
 8025d6e:	f7fb fa47 	bl	8021200 <lv_style_set_max_width>
    style_init_reset(&styles->msgbox_backdrop_bg);
 8025d72:	6820      	ldr	r0, [r4, #0]
 8025d74:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 8025d78:	f7fe ff16 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_color(&styles->msgbox_backdrop_bg, lv_palette_main(LV_PALETTE_GREY));
 8025d7c:	6825      	ldr	r5, [r4, #0]
 8025d7e:	2012      	movs	r0, #18
 8025d80:	f7e0 fdfa 	bl	8006978 <lv_palette_main>
 8025d84:	4601      	mov	r1, r0
 8025d86:	f505 7000 	add.w	r0, r5, #512	@ 0x200
 8025d8a:	f7fb fa7b 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_opa(&styles->msgbox_backdrop_bg, LV_OPA_50);
 8025d8e:	6820      	ldr	r0, [r4, #0]
 8025d90:	217f      	movs	r1, #127	@ 0x7f
 8025d92:	f500 7000 	add.w	r0, r0, #512	@ 0x200
 8025d96:	f7fb fa7b 	bl	8021290 <lv_style_set_bg_opa>
    style_init_reset(&styles->keyboard_btn_bg);
 8025d9a:	6820      	ldr	r0, [r4, #0]
 8025d9c:	f500 7002 	add.w	r0, r0, #520	@ 0x208
 8025da0:	f7fe ff02 	bl	8024ba8 <style_init_reset>
    lv_style_set_shadow_width(&styles->keyboard_btn_bg, 0);
 8025da4:	6820      	ldr	r0, [r4, #0]
 8025da6:	2100      	movs	r1, #0
 8025da8:	f500 7002 	add.w	r0, r0, #520	@ 0x208
 8025dac:	f7fb fab8 	bl	8021320 <lv_style_set_shadow_width>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 8025db0:	6824      	ldr	r4, [r4, #0]
 8025db2:	f504 7402 	add.w	r4, r4, #520	@ 0x208
 8025db6:	4b67      	ldr	r3, [pc, #412]	@ (8025f54 <style_init+0x1394>)
 8025db8:	781b      	ldrb	r3, [r3, #0]
 8025dba:	2b03      	cmp	r3, #3
 8025dbc:	f000 839f 	beq.w	80264fe <style_init+0x193e>
 8025dc0:	2b01      	cmp	r3, #1
 8025dc2:	f000 83b2 	beq.w	802652a <style_init+0x196a>
 8025dc6:	2108      	movs	r1, #8
 8025dc8:	4b63      	ldr	r3, [pc, #396]	@ (8025f58 <style_init+0x1398>)
 8025dca:	68d8      	ldr	r0, [r3, #12]
 8025dcc:	f7fe fe98 	bl	8024b00 <lv_disp_dpx>
 8025dd0:	4601      	mov	r1, r0
 8025dd2:	4620      	mov	r0, r4
 8025dd4:	f7fb faf8 	bl	80213c8 <lv_style_set_radius>
    style_init_reset(&styles->tab_btn);
 8025dd8:	4c60      	ldr	r4, [pc, #384]	@ (8025f5c <style_init+0x139c>)
 8025dda:	6820      	ldr	r0, [r4, #0]
 8025ddc:	f500 700e 	add.w	r0, r0, #568	@ 0x238
 8025de0:	f7fe fee2 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_color(&styles->tab_btn, theme.color_primary);
 8025de4:	6820      	ldr	r0, [r4, #0]
 8025de6:	4d5c      	ldr	r5, [pc, #368]	@ (8025f58 <style_init+0x1398>)
 8025de8:	8a29      	ldrh	r1, [r5, #16]
 8025dea:	f500 700e 	add.w	r0, r0, #568	@ 0x238
 8025dee:	f7fb fa61 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_width(&styles->tab_btn, BORDER_WIDTH * 2);
 8025df2:	6826      	ldr	r6, [r4, #0]
 8025df4:	2102      	movs	r1, #2
 8025df6:	68e8      	ldr	r0, [r5, #12]
 8025df8:	f7fe fe82 	bl	8024b00 <lv_disp_dpx>
 8025dfc:	b281      	uxth	r1, r0
 8025dfe:	0049      	lsls	r1, r1, #1
 8025e00:	b209      	sxth	r1, r1
 8025e02:	f506 700e 	add.w	r0, r6, #568	@ 0x238
 8025e06:	f7fb fa61 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_side(&styles->tab_btn, LV_BORDER_SIDE_BOTTOM);
 8025e0a:	6820      	ldr	r0, [r4, #0]
 8025e0c:	2101      	movs	r1, #1
 8025e0e:	f500 700e 	add.w	r0, r0, #568	@ 0x238
 8025e12:	f7fb fa61 	bl	80212d8 <lv_style_set_border_side>
    style_init_reset(&styles->tab_bg_focus);
 8025e16:	6820      	ldr	r0, [r4, #0]
 8025e18:	f500 700c 	add.w	r0, r0, #560	@ 0x230
 8025e1c:	f7fe fec4 	bl	8024ba8 <style_init_reset>
    lv_style_set_outline_pad(&styles->tab_bg_focus, -BORDER_WIDTH);
 8025e20:	6826      	ldr	r6, [r4, #0]
 8025e22:	2102      	movs	r1, #2
 8025e24:	68e8      	ldr	r0, [r5, #12]
 8025e26:	f7fe fe6b 	bl	8024b00 <lv_disp_dpx>
 8025e2a:	b281      	uxth	r1, r0
 8025e2c:	4249      	negs	r1, r1
 8025e2e:	b209      	sxth	r1, r1
 8025e30:	f506 700c 	add.w	r0, r6, #560	@ 0x230
 8025e34:	f7fb fa6e 	bl	8021314 <lv_style_set_outline_pad>
    style_init_reset(&styles->list_bg);
 8025e38:	6820      	ldr	r0, [r4, #0]
 8025e3a:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 8025e3e:	f7fe feb3 	bl	8024ba8 <style_init_reset>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 8025e42:	6824      	ldr	r4, [r4, #0]
 8025e44:	f504 7404 	add.w	r4, r4, #528	@ 0x210
 8025e48:	4b42      	ldr	r3, [pc, #264]	@ (8025f54 <style_init+0x1394>)
 8025e4a:	781b      	ldrb	r3, [r3, #0]
 8025e4c:	2b01      	cmp	r3, #1
 8025e4e:	f000 8373 	beq.w	8026538 <style_init+0x1978>
 8025e52:	2b02      	cmp	r3, #2
 8025e54:	f000 8376 	beq.w	8026544 <style_init+0x1984>
 8025e58:	2110      	movs	r1, #16
 8025e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8025f58 <style_init+0x1398>)
 8025e5c:	68d8      	ldr	r0, [r3, #12]
 8025e5e:	f7fe fe4f 	bl	8024b00 <lv_disp_dpx>
 8025e62:	4601      	mov	r1, r0
 8025e64:	4620      	mov	r0, r4
 8025e66:	f7fe fe83 	bl	8024b70 <lv_style_set_pad_hor>
    lv_style_set_pad_ver(&styles->list_bg, 0);
 8025e6a:	4c3c      	ldr	r4, [pc, #240]	@ (8025f5c <style_init+0x139c>)
 8025e6c:	6820      	ldr	r0, [r4, #0]
 8025e6e:	2100      	movs	r1, #0
 8025e70:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 8025e74:	f7fe fe62 	bl	8024b3c <lv_style_set_pad_ver>
    lv_style_set_pad_gap(&styles->list_bg, 0);
 8025e78:	6820      	ldr	r0, [r4, #0]
 8025e7a:	2100      	movs	r1, #0
 8025e7c:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 8025e80:	f7fe fe34 	bl	8024aec <lv_style_set_pad_gap>
    lv_style_set_clip_corner(&styles->list_bg, true);
 8025e84:	6820      	ldr	r0, [r4, #0]
 8025e86:	2101      	movs	r1, #1
 8025e88:	f500 7004 	add.w	r0, r0, #528	@ 0x210
 8025e8c:	f7fb faa2 	bl	80213d4 <lv_style_set_clip_corner>
    style_init_reset(&styles->list_btn);
 8025e90:	6820      	ldr	r0, [r4, #0]
 8025e92:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8025e96:	f7fe fe87 	bl	8024ba8 <style_init_reset>
    lv_style_set_border_width(&styles->list_btn, lv_disp_dpx(theme.disp, 1));
 8025e9a:	6825      	ldr	r5, [r4, #0]
 8025e9c:	2101      	movs	r1, #1
 8025e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8025f58 <style_init+0x1398>)
 8025ea0:	68d8      	ldr	r0, [r3, #12]
 8025ea2:	f7fe fe2d 	bl	8024b00 <lv_disp_dpx>
 8025ea6:	4601      	mov	r1, r0
 8025ea8:	f505 7006 	add.w	r0, r5, #536	@ 0x218
 8025eac:	f7fb fa0e 	bl	80212cc <lv_style_set_border_width>
    lv_style_set_border_color(&styles->list_btn, color_grey);
 8025eb0:	6820      	ldr	r0, [r4, #0]
 8025eb2:	4b26      	ldr	r3, [pc, #152]	@ (8025f4c <style_init+0x138c>)
 8025eb4:	8819      	ldrh	r1, [r3, #0]
 8025eb6:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8025eba:	f7fb f9fb 	bl	80212b4 <lv_style_set_border_color>
    lv_style_set_border_side(&styles->list_btn, LV_BORDER_SIDE_BOTTOM);
 8025ebe:	6820      	ldr	r0, [r4, #0]
 8025ec0:	2101      	movs	r1, #1
 8025ec2:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8025ec6:	f7fb fa07 	bl	80212d8 <lv_style_set_border_side>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 8025eca:	6824      	ldr	r4, [r4, #0]
 8025ecc:	f504 7406 	add.w	r4, r4, #536	@ 0x218
 8025ed0:	4b20      	ldr	r3, [pc, #128]	@ (8025f54 <style_init+0x1394>)
 8025ed2:	781b      	ldrb	r3, [r3, #0]
 8025ed4:	2b01      	cmp	r3, #1
 8025ed6:	f000 833c 	beq.w	8026552 <style_init+0x1992>
 8025eda:	2b02      	cmp	r3, #2
 8025edc:	f000 8340 	beq.w	8026560 <style_init+0x19a0>
 8025ee0:	210a      	movs	r1, #10
 8025ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8025f58 <style_init+0x1398>)
 8025ee4:	68d8      	ldr	r0, [r3, #12]
 8025ee6:	f7fe fe0b 	bl	8024b00 <lv_disp_dpx>
 8025eea:	4601      	mov	r1, r0
 8025eec:	4620      	mov	r0, r4
 8025eee:	f7fe fe49 	bl	8024b84 <lv_style_set_pad_all>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 8025ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8025f5c <style_init+0x139c>)
 8025ef4:	681c      	ldr	r4, [r3, #0]
 8025ef6:	f504 7406 	add.w	r4, r4, #536	@ 0x218
 8025efa:	4b16      	ldr	r3, [pc, #88]	@ (8025f54 <style_init+0x1394>)
 8025efc:	781b      	ldrb	r3, [r3, #0]
 8025efe:	2b01      	cmp	r3, #1
 8025f00:	f000 8335 	beq.w	802656e <style_init+0x19ae>
 8025f04:	2b02      	cmp	r3, #2
 8025f06:	f000 8339 	beq.w	802657c <style_init+0x19bc>
 8025f0a:	210a      	movs	r1, #10
 8025f0c:	4b12      	ldr	r3, [pc, #72]	@ (8025f58 <style_init+0x1398>)
 8025f0e:	68d8      	ldr	r0, [r3, #12]
 8025f10:	f7fe fdf6 	bl	8024b00 <lv_disp_dpx>
 8025f14:	4601      	mov	r1, r0
 8025f16:	4620      	mov	r0, r4
 8025f18:	f7fb f9ae 	bl	8021278 <lv_style_set_pad_column>
    style_init_reset(&styles->list_item_grow);
 8025f1c:	4c0f      	ldr	r4, [pc, #60]	@ (8025f5c <style_init+0x139c>)
 8025f1e:	6820      	ldr	r0, [r4, #0]
 8025f20:	f500 7008 	add.w	r0, r0, #544	@ 0x220
 8025f24:	f7fe fe40 	bl	8024ba8 <style_init_reset>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 8025f28:	6824      	ldr	r4, [r4, #0]
 8025f2a:	f504 7408 	add.w	r4, r4, #544	@ 0x220
 8025f2e:	4b09      	ldr	r3, [pc, #36]	@ (8025f54 <style_init+0x1394>)
 8025f30:	781b      	ldrb	r3, [r3, #0]
 8025f32:	2b01      	cmp	r3, #1
 8025f34:	f000 8329 	beq.w	802658a <style_init+0x19ca>
 8025f38:	2b02      	cmp	r3, #2
 8025f3a:	f000 832d 	beq.w	8026598 <style_init+0x19d8>
 8025f3e:	2110      	movs	r1, #16
 8025f40:	4b05      	ldr	r3, [pc, #20]	@ (8025f58 <style_init+0x1398>)
 8025f42:	68d8      	ldr	r0, [r3, #12]
 8025f44:	f7fe fddc 	bl	8024b00 <lv_disp_dpx>
 8025f48:	4601      	mov	r1, r0
 8025f4a:	e009      	b.n	8025f60 <style_init+0x13a0>
 8025f4c:	20008938 	.word	0x20008938
 8025f50:	2000893c 	.word	0x2000893c
 8025f54:	20008946 	.word	0x20008946
 8025f58:	20008948 	.word	0x20008948
 8025f5c:	2000896c 	.word	0x2000896c
 8025f60:	4620      	mov	r0, r4
 8025f62:	f7fb f95f 	bl	8021224 <lv_style_set_transform_width>
    style_init_reset(&styles->led);
 8025f66:	4cce      	ldr	r4, [pc, #824]	@ (80262a0 <style_init+0x16e0>)
 8025f68:	6820      	ldr	r0, [r4, #0]
 8025f6a:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 8025f6e:	f7fe fe1b 	bl	8024ba8 <style_init_reset>
    lv_style_set_bg_opa(&styles->led, LV_OPA_COVER);
 8025f72:	6820      	ldr	r0, [r4, #0]
 8025f74:	21ff      	movs	r1, #255	@ 0xff
 8025f76:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 8025f7a:	f7fb f989 	bl	8021290 <lv_style_set_bg_opa>
    lv_style_set_bg_color(&styles->led, lv_color_white());
 8025f7e:	6820      	ldr	r0, [r4, #0]
 8025f80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8025f84:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 8025f88:	f7fb f97c 	bl	8021284 <lv_style_set_bg_color>
    lv_style_set_bg_grad_color(&styles->led, lv_palette_main(LV_PALETTE_GREY));
 8025f8c:	6825      	ldr	r5, [r4, #0]
 8025f8e:	2012      	movs	r0, #18
 8025f90:	f7e0 fcf2 	bl	8006978 <lv_palette_main>
 8025f94:	4601      	mov	r1, r0
 8025f96:	f505 7010 	add.w	r0, r5, #576	@ 0x240
 8025f9a:	f7fb f97f 	bl	802129c <lv_style_set_bg_grad_color>
    lv_style_set_radius(&styles->led, LV_RADIUS_CIRCLE);
 8025f9e:	6820      	ldr	r0, [r4, #0]
 8025fa0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8025fa4:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 8025fa8:	f7fb fa0e 	bl	80213c8 <lv_style_set_radius>
    lv_style_set_shadow_width(&styles->led, lv_disp_dpx(theme.disp, 15));
 8025fac:	6826      	ldr	r6, [r4, #0]
 8025fae:	4dbd      	ldr	r5, [pc, #756]	@ (80262a4 <style_init+0x16e4>)
 8025fb0:	210f      	movs	r1, #15
 8025fb2:	68e8      	ldr	r0, [r5, #12]
 8025fb4:	f7fe fda4 	bl	8024b00 <lv_disp_dpx>
 8025fb8:	4601      	mov	r1, r0
 8025fba:	f506 7010 	add.w	r0, r6, #576	@ 0x240
 8025fbe:	f7fb f9af 	bl	8021320 <lv_style_set_shadow_width>
    lv_style_set_shadow_color(&styles->led, lv_color_white());
 8025fc2:	6820      	ldr	r0, [r4, #0]
 8025fc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8025fc8:	f500 7010 	add.w	r0, r0, #576	@ 0x240
 8025fcc:	f7fb f9ba 	bl	8021344 <lv_style_set_shadow_color>
    lv_style_set_shadow_spread(&styles->led, lv_disp_dpx(theme.disp, 5));
 8025fd0:	6824      	ldr	r4, [r4, #0]
 8025fd2:	2105      	movs	r1, #5
 8025fd4:	68e8      	ldr	r0, [r5, #12]
 8025fd6:	f7fe fd93 	bl	8024b00 <lv_disp_dpx>
 8025fda:	4601      	mov	r1, r0
 8025fdc:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 8025fe0:	f7fb f9aa 	bl	8021338 <lv_style_set_shadow_spread>
}
 8025fe4:	b003      	add	sp, #12
 8025fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    color_scr = theme.flags & MODE_DARK ? DARK_COLOR_SCR : LIGHT_COLOR_SCR;
 8025fea:	2104      	movs	r1, #4
 8025fec:	2012      	movs	r0, #18
 8025fee:	f7e0 fcd7 	bl	80069a0 <lv_palette_lighten>
 8025ff2:	4bad      	ldr	r3, [pc, #692]	@ (80262a8 <style_init+0x16e8>)
 8025ff4:	8018      	strh	r0, [r3, #0]
 8025ff6:	f7fe bdf0 	b.w	8024bda <style_init+0x1a>
    color_text = theme.flags & MODE_DARK ? DARK_COLOR_TEXT : LIGHT_COLOR_TEXT;
 8025ffa:	2104      	movs	r1, #4
 8025ffc:	2012      	movs	r0, #18
 8025ffe:	f7e0 fcf5 	bl	80069ec <lv_palette_darken>
 8026002:	4baa      	ldr	r3, [pc, #680]	@ (80262ac <style_init+0x16ec>)
 8026004:	8018      	strh	r0, [r3, #0]
 8026006:	f7fe bdf4 	b.w	8024bf2 <style_init+0x32>
    color_card = theme.flags & MODE_DARK ? DARK_COLOR_CARD : LIGHT_COLOR_CARD;
 802600a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 802600e:	4aa8      	ldr	r2, [pc, #672]	@ (80262b0 <style_init+0x16f0>)
 8026010:	8011      	strh	r1, [r2, #0]
 8026012:	f7fe bdf8 	b.w	8024c06 <style_init+0x46>
    color_grey = theme.flags & MODE_DARK ? DARK_COLOR_GREY : LIGHT_COLOR_GREY;
 8026016:	2102      	movs	r1, #2
 8026018:	2012      	movs	r0, #18
 802601a:	f7e0 fcc1 	bl	80069a0 <lv_palette_lighten>
 802601e:	4ba5      	ldr	r3, [pc, #660]	@ (80262b4 <style_init+0x16f4>)
 8026020:	8018      	strh	r0, [r3, #0]
 8026022:	f7fe bdf7 	b.w	8024c14 <style_init+0x54>
                                                                        2) : lv_palette_main(LV_PALETTE_GREY);
 8026026:	2012      	movs	r0, #18
 8026028:	f7e0 fca6 	bl	8006978 <lv_palette_main>
 802602c:	4601      	mov	r1, r0
 802602e:	f7fe be2b 	b.w	8024c88 <style_init+0xc8>
    lv_style_set_pad_row(&styles->scr, PAD_SMALL);
 8026032:	210e      	movs	r1, #14
 8026034:	68e8      	ldr	r0, [r5, #12]
 8026036:	f7fe fd63 	bl	8024b00 <lv_disp_dpx>
 802603a:	4601      	mov	r1, r0
 802603c:	f7fe be77 	b.w	8024d2e <style_init+0x16e>
 8026040:	210c      	movs	r1, #12
 8026042:	4b98      	ldr	r3, [pc, #608]	@ (80262a4 <style_init+0x16e4>)
 8026044:	68d8      	ldr	r0, [r3, #12]
 8026046:	f7fe fd5b 	bl	8024b00 <lv_disp_dpx>
 802604a:	4601      	mov	r1, r0
 802604c:	f7fe be6f 	b.w	8024d2e <style_init+0x16e>
    lv_style_set_pad_column(&styles->scr, PAD_SMALL);
 8026050:	210e      	movs	r1, #14
 8026052:	4b94      	ldr	r3, [pc, #592]	@ (80262a4 <style_init+0x16e4>)
 8026054:	68d8      	ldr	r0, [r3, #12]
 8026056:	f7fe fd53 	bl	8024b00 <lv_disp_dpx>
 802605a:	4601      	mov	r1, r0
 802605c:	f7fe be7a 	b.w	8024d54 <style_init+0x194>
 8026060:	210c      	movs	r1, #12
 8026062:	4b90      	ldr	r3, [pc, #576]	@ (80262a4 <style_init+0x16e4>)
 8026064:	68d8      	ldr	r0, [r3, #12]
 8026066:	f7fe fd4b 	bl	8024b00 <lv_disp_dpx>
 802606a:	4601      	mov	r1, r0
 802606c:	f7fe be72 	b.w	8024d54 <style_init+0x194>
    lv_style_set_radius(&styles->card, RADIUS_DEFAULT);
 8026070:	210c      	movs	r1, #12
 8026072:	4b8c      	ldr	r3, [pc, #560]	@ (80262a4 <style_init+0x16e4>)
 8026074:	68d8      	ldr	r0, [r3, #12]
 8026076:	f7fe fd43 	bl	8024b00 <lv_disp_dpx>
 802607a:	4601      	mov	r1, r0
 802607c:	f7fe be7f 	b.w	8024d7e <style_init+0x1be>
    lv_style_set_pad_all(&styles->card, PAD_DEF);
 8026080:	2118      	movs	r1, #24
 8026082:	4b88      	ldr	r3, [pc, #544]	@ (80262a4 <style_init+0x16e4>)
 8026084:	68d8      	ldr	r0, [r3, #12]
 8026086:	f7fe fd3b 	bl	8024b00 <lv_disp_dpx>
 802608a:	4601      	mov	r1, r0
 802608c:	f7fe beb2 	b.w	8024df4 <style_init+0x234>
 8026090:	2114      	movs	r1, #20
 8026092:	4b84      	ldr	r3, [pc, #528]	@ (80262a4 <style_init+0x16e4>)
 8026094:	68d8      	ldr	r0, [r3, #12]
 8026096:	f7fe fd33 	bl	8024b00 <lv_disp_dpx>
 802609a:	4601      	mov	r1, r0
 802609c:	f7fe beaa 	b.w	8024df4 <style_init+0x234>
    lv_style_set_pad_row(&styles->card, PAD_SMALL);
 80260a0:	210e      	movs	r1, #14
 80260a2:	4b80      	ldr	r3, [pc, #512]	@ (80262a4 <style_init+0x16e4>)
 80260a4:	68d8      	ldr	r0, [r3, #12]
 80260a6:	f7fe fd2b 	bl	8024b00 <lv_disp_dpx>
 80260aa:	4601      	mov	r1, r0
 80260ac:	f7fe beb6 	b.w	8024e1c <style_init+0x25c>
 80260b0:	210c      	movs	r1, #12
 80260b2:	4b7c      	ldr	r3, [pc, #496]	@ (80262a4 <style_init+0x16e4>)
 80260b4:	68d8      	ldr	r0, [r3, #12]
 80260b6:	f7fe fd23 	bl	8024b00 <lv_disp_dpx>
 80260ba:	4601      	mov	r1, r0
 80260bc:	f7fe beae 	b.w	8024e1c <style_init+0x25c>
    lv_style_set_pad_column(&styles->card, PAD_SMALL);
 80260c0:	210e      	movs	r1, #14
 80260c2:	4b78      	ldr	r3, [pc, #480]	@ (80262a4 <style_init+0x16e4>)
 80260c4:	68d8      	ldr	r0, [r3, #12]
 80260c6:	f7fe fd1b 	bl	8024b00 <lv_disp_dpx>
 80260ca:	4601      	mov	r1, r0
 80260cc:	f7fe beba 	b.w	8024e44 <style_init+0x284>
 80260d0:	210c      	movs	r1, #12
 80260d2:	4b74      	ldr	r3, [pc, #464]	@ (80262a4 <style_init+0x16e4>)
 80260d4:	68d8      	ldr	r0, [r3, #12]
 80260d6:	f7fe fd13 	bl	8024b00 <lv_disp_dpx>
 80260da:	4601      	mov	r1, r0
 80260dc:	f7fe beb2 	b.w	8024e44 <style_init+0x284>
    lv_style_set_radius(&styles->btn, (disp_size == DISP_LARGE ? lv_disp_dpx(theme.disp,
 80260e0:	2110      	movs	r1, #16
 80260e2:	68e8      	ldr	r0, [r5, #12]
 80260e4:	f7fe fd0c 	bl	8024b00 <lv_disp_dpx>
 80260e8:	4601      	mov	r1, r0
 80260ea:	f7fe bf29 	b.w	8024f40 <style_init+0x380>
                                                                             16) : disp_size == DISP_MEDIUM ? lv_disp_dpx(theme.disp, 12) : lv_disp_dpx(theme.disp, 8)));
 80260ee:	210c      	movs	r1, #12
 80260f0:	4b6c      	ldr	r3, [pc, #432]	@ (80262a4 <style_init+0x16e4>)
 80260f2:	68d8      	ldr	r0, [r3, #12]
 80260f4:	f7fe fd04 	bl	8024b00 <lv_disp_dpx>
 80260f8:	4601      	mov	r1, r0
 80260fa:	f7fe bf21 	b.w	8024f40 <style_init+0x380>
        lv_style_set_shadow_color(&styles->btn, lv_palette_main(LV_PALETTE_GREY));
 80260fe:	6825      	ldr	r5, [r4, #0]
 8026100:	2012      	movs	r0, #18
 8026102:	f7e0 fc39 	bl	8006978 <lv_palette_main>
 8026106:	4601      	mov	r1, r0
 8026108:	f105 0020 	add.w	r0, r5, #32
 802610c:	f7fb f91a 	bl	8021344 <lv_style_set_shadow_color>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 8026110:	6824      	ldr	r4, [r4, #0]
 8026112:	3420      	adds	r4, #32
 8026114:	2000      	movs	r0, #0
 8026116:	f7ed f8e7 	bl	80132e8 <lv_disp_get_dpi>
 802611a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802611e:	28ef      	cmp	r0, #239	@ 0xef
 8026120:	dc1c      	bgt.n	802615c <style_init+0x159c>
 8026122:	2101      	movs	r1, #1
 8026124:	4620      	mov	r0, r4
 8026126:	f7fb f8fb 	bl	8021320 <lv_style_set_shadow_width>
        lv_style_set_shadow_opa(&styles->btn, LV_OPA_50);
 802612a:	4c5d      	ldr	r4, [pc, #372]	@ (80262a0 <style_init+0x16e0>)
 802612c:	6820      	ldr	r0, [r4, #0]
 802612e:	217f      	movs	r1, #127	@ 0x7f
 8026130:	3020      	adds	r0, #32
 8026132:	f7fb f90d 	bl	8021350 <lv_style_set_shadow_opa>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 8026136:	6824      	ldr	r4, [r4, #0]
 8026138:	3420      	adds	r4, #32
 802613a:	4b5a      	ldr	r3, [pc, #360]	@ (80262a4 <style_init+0x16e4>)
 802613c:	68dd      	ldr	r5, [r3, #12]
 802613e:	2000      	movs	r0, #0
 8026140:	f7ed f8d2 	bl	80132e8 <lv_disp_get_dpi>
 8026144:	283b      	cmp	r0, #59	@ 0x3b
 8026146:	dc18      	bgt.n	802617a <style_init+0x15ba>
 8026148:	2101      	movs	r1, #1
 802614a:	4628      	mov	r0, r5
 802614c:	f7fe fcd8 	bl	8024b00 <lv_disp_dpx>
 8026150:	4601      	mov	r1, r0
 8026152:	4620      	mov	r0, r4
 8026154:	f7fb f8ea 	bl	802132c <lv_style_set_shadow_ofs_y>
 8026158:	f7fe bf07 	b.w	8024f6a <style_init+0x3aa>
        lv_style_set_shadow_width(&styles->btn, LV_DPX(3));
 802615c:	2000      	movs	r0, #0
 802615e:	f7ed f8c3 	bl	80132e8 <lv_disp_get_dpi>
 8026162:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026166:	f100 0150 	add.w	r1, r0, #80	@ 0x50
 802616a:	4b53      	ldr	r3, [pc, #332]	@ (80262b8 <style_init+0x16f8>)
 802616c:	fb83 2301 	smull	r2, r3, r3, r1
 8026170:	17c9      	asrs	r1, r1, #31
 8026172:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 8026176:	b209      	sxth	r1, r1
 8026178:	e7d4      	b.n	8026124 <style_init+0x1564>
        lv_style_set_shadow_ofs_y(&styles->btn, lv_disp_dpx(theme.disp, LV_DPX(4)));
 802617a:	2000      	movs	r0, #0
 802617c:	f7ed f8b4 	bl	80132e8 <lv_disp_get_dpi>
 8026180:	3014      	adds	r0, #20
 8026182:	4b4d      	ldr	r3, [pc, #308]	@ (80262b8 <style_init+0x16f8>)
 8026184:	fb83 2300 	smull	r2, r3, r3, r0
 8026188:	17c1      	asrs	r1, r0, #31
 802618a:	ebc1 1123 	rsb	r1, r1, r3, asr #4
 802618e:	b209      	sxth	r1, r1
 8026190:	e7db      	b.n	802614a <style_init+0x158a>
    lv_style_set_pad_hor(&styles->btn, PAD_DEF);
 8026192:	2118      	movs	r1, #24
 8026194:	4b43      	ldr	r3, [pc, #268]	@ (80262a4 <style_init+0x16e4>)
 8026196:	68d8      	ldr	r0, [r3, #12]
 8026198:	f7fe fcb2 	bl	8024b00 <lv_disp_dpx>
 802619c:	4601      	mov	r1, r0
 802619e:	f7fe befb 	b.w	8024f98 <style_init+0x3d8>
 80261a2:	2114      	movs	r1, #20
 80261a4:	4b3f      	ldr	r3, [pc, #252]	@ (80262a4 <style_init+0x16e4>)
 80261a6:	68d8      	ldr	r0, [r3, #12]
 80261a8:	f7fe fcaa 	bl	8024b00 <lv_disp_dpx>
 80261ac:	4601      	mov	r1, r0
 80261ae:	f7fe bef3 	b.w	8024f98 <style_init+0x3d8>
    lv_style_set_pad_ver(&styles->btn, PAD_SMALL);
 80261b2:	210e      	movs	r1, #14
 80261b4:	4b3b      	ldr	r3, [pc, #236]	@ (80262a4 <style_init+0x16e4>)
 80261b6:	68d8      	ldr	r0, [r3, #12]
 80261b8:	f7fe fca2 	bl	8024b00 <lv_disp_dpx>
 80261bc:	4601      	mov	r1, r0
 80261be:	f7fe beff 	b.w	8024fc0 <style_init+0x400>
 80261c2:	210c      	movs	r1, #12
 80261c4:	4b37      	ldr	r3, [pc, #220]	@ (80262a4 <style_init+0x16e4>)
 80261c6:	68d8      	ldr	r0, [r3, #12]
 80261c8:	f7fe fc9a 	bl	8024b00 <lv_disp_dpx>
 80261cc:	4601      	mov	r1, r0
 80261ce:	f7fe bef7 	b.w	8024fc0 <style_init+0x400>
    lv_style_set_pad_all(&styles->pad_normal, PAD_DEF);
 80261d2:	2118      	movs	r1, #24
 80261d4:	4b33      	ldr	r3, [pc, #204]	@ (80262a4 <style_init+0x16e4>)
 80261d6:	68d8      	ldr	r0, [r3, #12]
 80261d8:	f7fe fc92 	bl	8024b00 <lv_disp_dpx>
 80261dc:	4601      	mov	r1, r0
 80261de:	f7fe bf4c 	b.w	802507a <style_init+0x4ba>
 80261e2:	2114      	movs	r1, #20
 80261e4:	4b2f      	ldr	r3, [pc, #188]	@ (80262a4 <style_init+0x16e4>)
 80261e6:	68d8      	ldr	r0, [r3, #12]
 80261e8:	f7fe fc8a 	bl	8024b00 <lv_disp_dpx>
 80261ec:	4601      	mov	r1, r0
 80261ee:	f7fe bf44 	b.w	802507a <style_init+0x4ba>
    lv_style_set_pad_row(&styles->pad_normal, PAD_DEF);
 80261f2:	2118      	movs	r1, #24
 80261f4:	4b2b      	ldr	r3, [pc, #172]	@ (80262a4 <style_init+0x16e4>)
 80261f6:	68d8      	ldr	r0, [r3, #12]
 80261f8:	f7fe fc82 	bl	8024b00 <lv_disp_dpx>
 80261fc:	4601      	mov	r1, r0
 80261fe:	f7fe bf50 	b.w	80250a2 <style_init+0x4e2>
 8026202:	2114      	movs	r1, #20
 8026204:	4b27      	ldr	r3, [pc, #156]	@ (80262a4 <style_init+0x16e4>)
 8026206:	68d8      	ldr	r0, [r3, #12]
 8026208:	f7fe fc7a 	bl	8024b00 <lv_disp_dpx>
 802620c:	4601      	mov	r1, r0
 802620e:	f7fe bf48 	b.w	80250a2 <style_init+0x4e2>
    lv_style_set_pad_column(&styles->pad_normal, PAD_DEF);
 8026212:	2118      	movs	r1, #24
 8026214:	4b23      	ldr	r3, [pc, #140]	@ (80262a4 <style_init+0x16e4>)
 8026216:	68d8      	ldr	r0, [r3, #12]
 8026218:	f7fe fc72 	bl	8024b00 <lv_disp_dpx>
 802621c:	4601      	mov	r1, r0
 802621e:	f7fe bf54 	b.w	80250ca <style_init+0x50a>
 8026222:	2114      	movs	r1, #20
 8026224:	4b1f      	ldr	r3, [pc, #124]	@ (80262a4 <style_init+0x16e4>)
 8026226:	68d8      	ldr	r0, [r3, #12]
 8026228:	f7fe fc6a 	bl	8024b00 <lv_disp_dpx>
 802622c:	4601      	mov	r1, r0
 802622e:	f7fe bf4c 	b.w	80250ca <style_init+0x50a>
    lv_style_set_pad_all(&styles->pad_small, PAD_SMALL);
 8026232:	210e      	movs	r1, #14
 8026234:	4b1b      	ldr	r3, [pc, #108]	@ (80262a4 <style_init+0x16e4>)
 8026236:	68d8      	ldr	r0, [r3, #12]
 8026238:	f7fe fc62 	bl	8024b00 <lv_disp_dpx>
 802623c:	4601      	mov	r1, r0
 802623e:	f7fe bf5c 	b.w	80250fa <style_init+0x53a>
 8026242:	210c      	movs	r1, #12
 8026244:	4b17      	ldr	r3, [pc, #92]	@ (80262a4 <style_init+0x16e4>)
 8026246:	68d8      	ldr	r0, [r3, #12]
 8026248:	f7fe fc5a 	bl	8024b00 <lv_disp_dpx>
 802624c:	4601      	mov	r1, r0
 802624e:	f7fe bf54 	b.w	80250fa <style_init+0x53a>
    lv_style_set_pad_gap(&styles->pad_small, PAD_SMALL);
 8026252:	210e      	movs	r1, #14
 8026254:	4b13      	ldr	r3, [pc, #76]	@ (80262a4 <style_init+0x16e4>)
 8026256:	68d8      	ldr	r0, [r3, #12]
 8026258:	f7fe fc52 	bl	8024b00 <lv_disp_dpx>
 802625c:	4601      	mov	r1, r0
 802625e:	f7fe bf60 	b.w	8025122 <style_init+0x562>
 8026262:	210c      	movs	r1, #12
 8026264:	4b0f      	ldr	r3, [pc, #60]	@ (80262a4 <style_init+0x16e4>)
 8026266:	68d8      	ldr	r0, [r3, #12]
 8026268:	f7fe fc4a 	bl	8024b00 <lv_disp_dpx>
 802626c:	4601      	mov	r1, r0
 802626e:	f7fe bf58 	b.w	8025122 <style_init+0x562>
    lv_style_set_pad_all(&styles->pad_tiny, PAD_TINY);
 8026272:	2108      	movs	r1, #8
 8026274:	68e8      	ldr	r0, [r5, #12]
 8026276:	f7fe fc43 	bl	8024b00 <lv_disp_dpx>
 802627a:	4601      	mov	r1, r0
 802627c:	f7fe bfac 	b.w	80251d8 <style_init+0x618>
 8026280:	2106      	movs	r1, #6
 8026282:	4b08      	ldr	r3, [pc, #32]	@ (80262a4 <style_init+0x16e4>)
 8026284:	68d8      	ldr	r0, [r3, #12]
 8026286:	f7fe fc3b 	bl	8024b00 <lv_disp_dpx>
 802628a:	4601      	mov	r1, r0
 802628c:	f7fe bfa4 	b.w	80251d8 <style_init+0x618>
    lv_style_set_pad_row(&styles->pad_tiny, PAD_TINY);
 8026290:	2108      	movs	r1, #8
 8026292:	4b04      	ldr	r3, [pc, #16]	@ (80262a4 <style_init+0x16e4>)
 8026294:	68d8      	ldr	r0, [r3, #12]
 8026296:	f7fe fc33 	bl	8024b00 <lv_disp_dpx>
 802629a:	4601      	mov	r1, r0
 802629c:	f7fe bfb0 	b.w	8025200 <style_init+0x640>
 80262a0:	2000896c 	.word	0x2000896c
 80262a4:	20008948 	.word	0x20008948
 80262a8:	20008944 	.word	0x20008944
 80262ac:	20008940 	.word	0x20008940
 80262b0:	2000893c 	.word	0x2000893c
 80262b4:	20008938 	.word	0x20008938
 80262b8:	66666667 	.word	0x66666667
 80262bc:	2106      	movs	r1, #6
 80262be:	4bba      	ldr	r3, [pc, #744]	@ (80265a8 <style_init+0x19e8>)
 80262c0:	68d8      	ldr	r0, [r3, #12]
 80262c2:	f7fe fc1d 	bl	8024b00 <lv_disp_dpx>
 80262c6:	4601      	mov	r1, r0
 80262c8:	f7fe bf9a 	b.w	8025200 <style_init+0x640>
    lv_style_set_pad_column(&styles->pad_tiny, PAD_TINY);
 80262cc:	2108      	movs	r1, #8
 80262ce:	4bb6      	ldr	r3, [pc, #728]	@ (80265a8 <style_init+0x19e8>)
 80262d0:	68d8      	ldr	r0, [r3, #12]
 80262d2:	f7fe fc15 	bl	8024b00 <lv_disp_dpx>
 80262d6:	4601      	mov	r1, r0
 80262d8:	f7fe bfb9 	b.w	802524e <style_init+0x68e>
 80262dc:	2106      	movs	r1, #6
 80262de:	4bb2      	ldr	r3, [pc, #712]	@ (80265a8 <style_init+0x19e8>)
 80262e0:	68d8      	ldr	r0, [r3, #12]
 80262e2:	f7fe fc0d 	bl	8024b00 <lv_disp_dpx>
 80262e6:	4601      	mov	r1, r0
 80262e8:	f7fe bfb1 	b.w	802524e <style_init+0x68e>
    lv_style_set_radius(&styles->cb_marker, RADIUS_DEFAULT / 2);
 80262ec:	210c      	movs	r1, #12
 80262ee:	68e8      	ldr	r0, [r5, #12]
 80262f0:	f7fe fc06 	bl	8024b00 <lv_disp_dpx>
 80262f4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80262f8:	f340 014f 	sbfx	r1, r0, #1, #16
 80262fc:	f7ff b8f2 	b.w	80254e4 <style_init+0x924>
    lv_style_set_radius(&styles->menu_section, RADIUS_DEFAULT);
 8026300:	210c      	movs	r1, #12
 8026302:	4ba9      	ldr	r3, [pc, #676]	@ (80265a8 <style_init+0x19e8>)
 8026304:	68d8      	ldr	r0, [r3, #12]
 8026306:	f7fe fbfb 	bl	8024b00 <lv_disp_dpx>
 802630a:	4601      	mov	r1, r0
 802630c:	f7ff ba09 	b.w	8025722 <style_init+0xb62>
    lv_style_set_pad_hor(&styles->menu_cont, PAD_SMALL);
 8026310:	210e      	movs	r1, #14
 8026312:	4ba5      	ldr	r3, [pc, #660]	@ (80265a8 <style_init+0x19e8>)
 8026314:	68d8      	ldr	r0, [r3, #12]
 8026316:	f7fe fbf3 	bl	8024b00 <lv_disp_dpx>
 802631a:	4601      	mov	r1, r0
 802631c:	f7ff ba35 	b.w	802578a <style_init+0xbca>
 8026320:	210c      	movs	r1, #12
 8026322:	4ba1      	ldr	r3, [pc, #644]	@ (80265a8 <style_init+0x19e8>)
 8026324:	68d8      	ldr	r0, [r3, #12]
 8026326:	f7fe fbeb 	bl	8024b00 <lv_disp_dpx>
 802632a:	4601      	mov	r1, r0
 802632c:	f7ff ba2d 	b.w	802578a <style_init+0xbca>
    lv_style_set_pad_ver(&styles->menu_cont, PAD_SMALL);
 8026330:	210e      	movs	r1, #14
 8026332:	4b9d      	ldr	r3, [pc, #628]	@ (80265a8 <style_init+0x19e8>)
 8026334:	68d8      	ldr	r0, [r3, #12]
 8026336:	f7fe fbe3 	bl	8024b00 <lv_disp_dpx>
 802633a:	4601      	mov	r1, r0
 802633c:	f7ff ba3a 	b.w	80257b4 <style_init+0xbf4>
 8026340:	210c      	movs	r1, #12
 8026342:	4b99      	ldr	r3, [pc, #612]	@ (80265a8 <style_init+0x19e8>)
 8026344:	68d8      	ldr	r0, [r3, #12]
 8026346:	f7fe fbdb 	bl	8024b00 <lv_disp_dpx>
 802634a:	4601      	mov	r1, r0
 802634c:	f7ff ba32 	b.w	80257b4 <style_init+0xbf4>
    lv_style_set_pad_gap(&styles->menu_cont, PAD_SMALL);
 8026350:	210e      	movs	r1, #14
 8026352:	4b95      	ldr	r3, [pc, #596]	@ (80265a8 <style_init+0x19e8>)
 8026354:	68d8      	ldr	r0, [r3, #12]
 8026356:	f7fe fbd3 	bl	8024b00 <lv_disp_dpx>
 802635a:	4601      	mov	r1, r0
 802635c:	f7ff ba3f 	b.w	80257de <style_init+0xc1e>
 8026360:	210c      	movs	r1, #12
 8026362:	4b91      	ldr	r3, [pc, #580]	@ (80265a8 <style_init+0x19e8>)
 8026364:	68d8      	ldr	r0, [r3, #12]
 8026366:	f7fe fbcb 	bl	8024b00 <lv_disp_dpx>
 802636a:	4601      	mov	r1, r0
 802636c:	f7ff ba37 	b.w	80257de <style_init+0xc1e>
    lv_style_set_pad_hor(&styles->menu_header_cont, PAD_SMALL);
 8026370:	210e      	movs	r1, #14
 8026372:	68f0      	ldr	r0, [r6, #12]
 8026374:	f7fe fbc4 	bl	8024b00 <lv_disp_dpx>
 8026378:	4601      	mov	r1, r0
 802637a:	f7ff baa6 	b.w	80258ca <style_init+0xd0a>
 802637e:	210c      	movs	r1, #12
 8026380:	4b89      	ldr	r3, [pc, #548]	@ (80265a8 <style_init+0x19e8>)
 8026382:	68d8      	ldr	r0, [r3, #12]
 8026384:	f7fe fbbc 	bl	8024b00 <lv_disp_dpx>
 8026388:	4601      	mov	r1, r0
 802638a:	f7ff ba9e 	b.w	80258ca <style_init+0xd0a>
    lv_style_set_pad_ver(&styles->menu_header_cont, PAD_TINY);
 802638e:	2108      	movs	r1, #8
 8026390:	4b85      	ldr	r3, [pc, #532]	@ (80265a8 <style_init+0x19e8>)
 8026392:	68d8      	ldr	r0, [r3, #12]
 8026394:	f7fe fbb4 	bl	8024b00 <lv_disp_dpx>
 8026398:	4601      	mov	r1, r0
 802639a:	f7ff bab8 	b.w	802590e <style_init+0xd4e>
 802639e:	2106      	movs	r1, #6
 80263a0:	4b81      	ldr	r3, [pc, #516]	@ (80265a8 <style_init+0x19e8>)
 80263a2:	68d8      	ldr	r0, [r3, #12]
 80263a4:	f7fe fbac 	bl	8024b00 <lv_disp_dpx>
 80263a8:	4601      	mov	r1, r0
 80263aa:	f7ff bab0 	b.w	802590e <style_init+0xd4e>
    lv_style_set_pad_gap(&styles->menu_header_cont, PAD_SMALL);
 80263ae:	210e      	movs	r1, #14
 80263b0:	4b7d      	ldr	r3, [pc, #500]	@ (80265a8 <style_init+0x19e8>)
 80263b2:	68d8      	ldr	r0, [r3, #12]
 80263b4:	f7fe fba4 	bl	8024b00 <lv_disp_dpx>
 80263b8:	4601      	mov	r1, r0
 80263ba:	f7ff babd 	b.w	8025938 <style_init+0xd78>
 80263be:	210c      	movs	r1, #12
 80263c0:	4b79      	ldr	r3, [pc, #484]	@ (80265a8 <style_init+0x19e8>)
 80263c2:	68d8      	ldr	r0, [r3, #12]
 80263c4:	f7fe fb9c 	bl	8024b00 <lv_disp_dpx>
 80263c8:	4601      	mov	r1, r0
 80263ca:	f7ff bab5 	b.w	8025938 <style_init+0xd78>
    lv_style_set_pad_hor(&styles->menu_header_btn, PAD_TINY);
 80263ce:	2108      	movs	r1, #8
 80263d0:	4b75      	ldr	r3, [pc, #468]	@ (80265a8 <style_init+0x19e8>)
 80263d2:	68d8      	ldr	r0, [r3, #12]
 80263d4:	f7fe fb94 	bl	8024b00 <lv_disp_dpx>
 80263d8:	4601      	mov	r1, r0
 80263da:	f7ff bac7 	b.w	802596c <style_init+0xdac>
 80263de:	2106      	movs	r1, #6
 80263e0:	4b71      	ldr	r3, [pc, #452]	@ (80265a8 <style_init+0x19e8>)
 80263e2:	68d8      	ldr	r0, [r3, #12]
 80263e4:	f7fe fb8c 	bl	8024b00 <lv_disp_dpx>
 80263e8:	4601      	mov	r1, r0
 80263ea:	f7ff babf 	b.w	802596c <style_init+0xdac>
    lv_style_set_pad_ver(&styles->menu_header_btn, PAD_TINY);
 80263ee:	2108      	movs	r1, #8
 80263f0:	4b6d      	ldr	r3, [pc, #436]	@ (80265a8 <style_init+0x19e8>)
 80263f2:	68d8      	ldr	r0, [r3, #12]
 80263f4:	f7fe fb84 	bl	8024b00 <lv_disp_dpx>
 80263f8:	4601      	mov	r1, r0
 80263fa:	f7ff bacc 	b.w	8025996 <style_init+0xdd6>
 80263fe:	2106      	movs	r1, #6
 8026400:	4b69      	ldr	r3, [pc, #420]	@ (80265a8 <style_init+0x19e8>)
 8026402:	68d8      	ldr	r0, [r3, #12]
 8026404:	f7fe fb7c 	bl	8024b00 <lv_disp_dpx>
 8026408:	4601      	mov	r1, r0
 802640a:	f7ff bac4 	b.w	8025996 <style_init+0xdd6>
    lv_style_set_pad_ver(&styles->menu_separator, PAD_TINY);
 802640e:	2108      	movs	r1, #8
 8026410:	4b65      	ldr	r3, [pc, #404]	@ (80265a8 <style_init+0x19e8>)
 8026412:	68d8      	ldr	r0, [r3, #12]
 8026414:	f7fe fb74 	bl	8024b00 <lv_disp_dpx>
 8026418:	4601      	mov	r1, r0
 802641a:	f7ff bb14 	b.w	8025a46 <style_init+0xe86>
 802641e:	2106      	movs	r1, #6
 8026420:	4b61      	ldr	r3, [pc, #388]	@ (80265a8 <style_init+0x19e8>)
 8026422:	68d8      	ldr	r0, [r3, #12]
 8026424:	f7fe fb6c 	bl	8024b00 <lv_disp_dpx>
 8026428:	4601      	mov	r1, r0
 802642a:	f7ff bb0c 	b.w	8025a46 <style_init+0xe86>
                                                                                                   2) : lv_palette_lighten(LV_PALETTE_GREY, 1));
 802642e:	2101      	movs	r1, #1
 8026430:	2012      	movs	r0, #18
 8026432:	f7e0 fab5 	bl	80069a0 <lv_palette_lighten>
 8026436:	4601      	mov	r1, r0
 8026438:	f7ff bbb2 	b.w	8025ba0 <style_init+0xfe0>
    lv_style_set_pad_all(&styles->calendar_btnm_bg, PAD_SMALL);
 802643c:	210e      	movs	r1, #14
 802643e:	4b5a      	ldr	r3, [pc, #360]	@ (80265a8 <style_init+0x19e8>)
 8026440:	68d8      	ldr	r0, [r3, #12]
 8026442:	f7fe fb5d 	bl	8024b00 <lv_disp_dpx>
 8026446:	4601      	mov	r1, r0
 8026448:	f7ff bbc4 	b.w	8025bd4 <style_init+0x1014>
 802644c:	210c      	movs	r1, #12
 802644e:	4b56      	ldr	r3, [pc, #344]	@ (80265a8 <style_init+0x19e8>)
 8026450:	68d8      	ldr	r0, [r3, #12]
 8026452:	f7fe fb55 	bl	8024b00 <lv_disp_dpx>
 8026456:	4601      	mov	r1, r0
 8026458:	f7ff bbbc 	b.w	8025bd4 <style_init+0x1014>
    lv_style_set_pad_gap(&styles->calendar_btnm_bg, PAD_SMALL / 2);
 802645c:	210e      	movs	r1, #14
 802645e:	4b52      	ldr	r3, [pc, #328]	@ (80265a8 <style_init+0x19e8>)
 8026460:	68d8      	ldr	r0, [r3, #12]
 8026462:	f7fe fb4d 	bl	8024b00 <lv_disp_dpx>
 8026466:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 802646a:	f340 014f 	sbfx	r1, r0, #1, #16
 802646e:	f7ff bbc9 	b.w	8025c04 <style_init+0x1044>
 8026472:	210c      	movs	r1, #12
 8026474:	4b4c      	ldr	r3, [pc, #304]	@ (80265a8 <style_init+0x19e8>)
 8026476:	68d8      	ldr	r0, [r3, #12]
 8026478:	f7fe fb42 	bl	8024b00 <lv_disp_dpx>
 802647c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8026480:	f340 014f 	sbfx	r1, r0, #1, #16
 8026484:	f7ff bbbe 	b.w	8025c04 <style_init+0x1044>
    lv_style_set_pad_hor(&styles->calendar_header, PAD_SMALL);
 8026488:	210e      	movs	r1, #14
 802648a:	4b47      	ldr	r3, [pc, #284]	@ (80265a8 <style_init+0x19e8>)
 802648c:	68d8      	ldr	r0, [r3, #12]
 802648e:	f7fe fb37 	bl	8024b00 <lv_disp_dpx>
 8026492:	4601      	mov	r1, r0
 8026494:	f7ff bbff 	b.w	8025c96 <style_init+0x10d6>
 8026498:	210c      	movs	r1, #12
 802649a:	4b43      	ldr	r3, [pc, #268]	@ (80265a8 <style_init+0x19e8>)
 802649c:	68d8      	ldr	r0, [r3, #12]
 802649e:	f7fe fb2f 	bl	8024b00 <lv_disp_dpx>
 80264a2:	4601      	mov	r1, r0
 80264a4:	f7ff bbf7 	b.w	8025c96 <style_init+0x10d6>
    lv_style_set_pad_top(&styles->calendar_header, PAD_SMALL);
 80264a8:	210e      	movs	r1, #14
 80264aa:	4b3f      	ldr	r3, [pc, #252]	@ (80265a8 <style_init+0x19e8>)
 80264ac:	68d8      	ldr	r0, [r3, #12]
 80264ae:	f7fe fb27 	bl	8024b00 <lv_disp_dpx>
 80264b2:	4601      	mov	r1, r0
 80264b4:	e404      	b.n	8025cc0 <style_init+0x1100>
 80264b6:	210c      	movs	r1, #12
 80264b8:	4b3b      	ldr	r3, [pc, #236]	@ (80265a8 <style_init+0x19e8>)
 80264ba:	68d8      	ldr	r0, [r3, #12]
 80264bc:	f7fe fb20 	bl	8024b00 <lv_disp_dpx>
 80264c0:	4601      	mov	r1, r0
 80264c2:	f7ff bbfd 	b.w	8025cc0 <style_init+0x1100>
    lv_style_set_pad_bottom(&styles->calendar_header, PAD_TINY);
 80264c6:	2108      	movs	r1, #8
 80264c8:	4b37      	ldr	r3, [pc, #220]	@ (80265a8 <style_init+0x19e8>)
 80264ca:	68d8      	ldr	r0, [r3, #12]
 80264cc:	f7fe fb18 	bl	8024b00 <lv_disp_dpx>
 80264d0:	4601      	mov	r1, r0
 80264d2:	e40a      	b.n	8025cea <style_init+0x112a>
 80264d4:	2106      	movs	r1, #6
 80264d6:	4b34      	ldr	r3, [pc, #208]	@ (80265a8 <style_init+0x19e8>)
 80264d8:	68d8      	ldr	r0, [r3, #12]
 80264da:	f7fe fb11 	bl	8024b00 <lv_disp_dpx>
 80264de:	4601      	mov	r1, r0
 80264e0:	e403      	b.n	8025cea <style_init+0x112a>
    lv_style_set_pad_gap(&styles->calendar_header, PAD_SMALL);
 80264e2:	210e      	movs	r1, #14
 80264e4:	4b30      	ldr	r3, [pc, #192]	@ (80265a8 <style_init+0x19e8>)
 80264e6:	68d8      	ldr	r0, [r3, #12]
 80264e8:	f7fe fb0a 	bl	8024b00 <lv_disp_dpx>
 80264ec:	4601      	mov	r1, r0
 80264ee:	e411      	b.n	8025d14 <style_init+0x1154>
 80264f0:	210c      	movs	r1, #12
 80264f2:	4b2d      	ldr	r3, [pc, #180]	@ (80265a8 <style_init+0x19e8>)
 80264f4:	68d8      	ldr	r0, [r3, #12]
 80264f6:	f7fe fb03 	bl	8024b00 <lv_disp_dpx>
 80264fa:	4601      	mov	r1, r0
 80264fc:	e40a      	b.n	8025d14 <style_init+0x1154>
    lv_style_set_radius(&styles->keyboard_btn_bg, disp_size == DISP_SMALL ? RADIUS_DEFAULT / 2 : RADIUS_DEFAULT);
 80264fe:	2b01      	cmp	r3, #1
 8026500:	d009      	beq.n	8026516 <style_init+0x1956>
 8026502:	2108      	movs	r1, #8
 8026504:	4b28      	ldr	r3, [pc, #160]	@ (80265a8 <style_init+0x19e8>)
 8026506:	68d8      	ldr	r0, [r3, #12]
 8026508:	f7fe fafa 	bl	8024b00 <lv_disp_dpx>
 802650c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8026510:	f340 014f 	sbfx	r1, r0, #1, #16
 8026514:	e45d      	b.n	8025dd2 <style_init+0x1212>
 8026516:	210c      	movs	r1, #12
 8026518:	4b23      	ldr	r3, [pc, #140]	@ (80265a8 <style_init+0x19e8>)
 802651a:	68d8      	ldr	r0, [r3, #12]
 802651c:	f7fe faf0 	bl	8024b00 <lv_disp_dpx>
 8026520:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8026524:	f340 014f 	sbfx	r1, r0, #1, #16
 8026528:	e453      	b.n	8025dd2 <style_init+0x1212>
 802652a:	210c      	movs	r1, #12
 802652c:	4b1e      	ldr	r3, [pc, #120]	@ (80265a8 <style_init+0x19e8>)
 802652e:	68d8      	ldr	r0, [r3, #12]
 8026530:	f7fe fae6 	bl	8024b00 <lv_disp_dpx>
 8026534:	4601      	mov	r1, r0
 8026536:	e44c      	b.n	8025dd2 <style_init+0x1212>
    lv_style_set_pad_hor(&styles->list_bg, PAD_DEF);
 8026538:	2118      	movs	r1, #24
 802653a:	68e8      	ldr	r0, [r5, #12]
 802653c:	f7fe fae0 	bl	8024b00 <lv_disp_dpx>
 8026540:	4601      	mov	r1, r0
 8026542:	e48f      	b.n	8025e64 <style_init+0x12a4>
 8026544:	2114      	movs	r1, #20
 8026546:	4b18      	ldr	r3, [pc, #96]	@ (80265a8 <style_init+0x19e8>)
 8026548:	68d8      	ldr	r0, [r3, #12]
 802654a:	f7fe fad9 	bl	8024b00 <lv_disp_dpx>
 802654e:	4601      	mov	r1, r0
 8026550:	e488      	b.n	8025e64 <style_init+0x12a4>
    lv_style_set_pad_all(&styles->list_btn, PAD_SMALL);
 8026552:	210e      	movs	r1, #14
 8026554:	4b14      	ldr	r3, [pc, #80]	@ (80265a8 <style_init+0x19e8>)
 8026556:	68d8      	ldr	r0, [r3, #12]
 8026558:	f7fe fad2 	bl	8024b00 <lv_disp_dpx>
 802655c:	4601      	mov	r1, r0
 802655e:	e4c5      	b.n	8025eec <style_init+0x132c>
 8026560:	210c      	movs	r1, #12
 8026562:	4b11      	ldr	r3, [pc, #68]	@ (80265a8 <style_init+0x19e8>)
 8026564:	68d8      	ldr	r0, [r3, #12]
 8026566:	f7fe facb 	bl	8024b00 <lv_disp_dpx>
 802656a:	4601      	mov	r1, r0
 802656c:	e4be      	b.n	8025eec <style_init+0x132c>
    lv_style_set_pad_column(&styles->list_btn, PAD_SMALL);
 802656e:	210e      	movs	r1, #14
 8026570:	4b0d      	ldr	r3, [pc, #52]	@ (80265a8 <style_init+0x19e8>)
 8026572:	68d8      	ldr	r0, [r3, #12]
 8026574:	f7fe fac4 	bl	8024b00 <lv_disp_dpx>
 8026578:	4601      	mov	r1, r0
 802657a:	e4cc      	b.n	8025f16 <style_init+0x1356>
 802657c:	210c      	movs	r1, #12
 802657e:	4b0a      	ldr	r3, [pc, #40]	@ (80265a8 <style_init+0x19e8>)
 8026580:	68d8      	ldr	r0, [r3, #12]
 8026582:	f7fe fabd 	bl	8024b00 <lv_disp_dpx>
 8026586:	4601      	mov	r1, r0
 8026588:	e4c5      	b.n	8025f16 <style_init+0x1356>
    lv_style_set_transform_width(&styles->list_item_grow, PAD_DEF);
 802658a:	2118      	movs	r1, #24
 802658c:	4b06      	ldr	r3, [pc, #24]	@ (80265a8 <style_init+0x19e8>)
 802658e:	68d8      	ldr	r0, [r3, #12]
 8026590:	f7fe fab6 	bl	8024b00 <lv_disp_dpx>
 8026594:	4601      	mov	r1, r0
 8026596:	e4e3      	b.n	8025f60 <style_init+0x13a0>
 8026598:	2114      	movs	r1, #20
 802659a:	4b03      	ldr	r3, [pc, #12]	@ (80265a8 <style_init+0x19e8>)
 802659c:	68d8      	ldr	r0, [r3, #12]
 802659e:	f7fe faaf 	bl	8024b00 <lv_disp_dpx>
 80265a2:	4601      	mov	r1, r0
 80265a4:	e4dc      	b.n	8025f60 <style_init+0x13a0>
 80265a6:	bf00      	nop
 80265a8:	20008948 	.word	0x20008948

080265ac <lv_theme_default_is_inited>:
    return  LV_GC_ROOT(_lv_theme_default_styles) == NULL ? false : true;
 80265ac:	4b02      	ldr	r3, [pc, #8]	@ (80265b8 <lv_theme_default_is_inited+0xc>)
 80265ae:	6818      	ldr	r0, [r3, #0]
}
 80265b0:	3800      	subs	r0, #0
 80265b2:	bf18      	it	ne
 80265b4:	2001      	movne	r0, #1
 80265b6:	4770      	bx	lr
 80265b8:	20006670 	.word	0x20006670

080265bc <lv_theme_default_init>:
{
 80265bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80265c0:	4605      	mov	r5, r0
 80265c2:	4689      	mov	r9, r1
 80265c4:	4690      	mov	r8, r2
 80265c6:	461e      	mov	r6, r3
 80265c8:	9f08      	ldr	r7, [sp, #32]
    if(!lv_theme_default_is_inited()) {
 80265ca:	f7ff ffef 	bl	80265ac <lv_theme_default_is_inited>
 80265ce:	b330      	cbz	r0, 802661e <lv_theme_default_init+0x62>
    if(LV_HOR_RES <= 320) disp_size = DISP_SMALL;
 80265d0:	f7ec fe54 	bl	801327c <lv_disp_get_default>
 80265d4:	f7ec fe58 	bl	8013288 <lv_disp_get_hor_res>
 80265d8:	f5b0 7fa0 	cmp.w	r0, #320	@ 0x140
 80265dc:	dc2b      	bgt.n	8026636 <lv_theme_default_init+0x7a>
 80265de:	4b1d      	ldr	r3, [pc, #116]	@ (8026654 <lv_theme_default_init+0x98>)
 80265e0:	2203      	movs	r2, #3
 80265e2:	701a      	strb	r2, [r3, #0]
    theme.disp = disp;
 80265e4:	4c1c      	ldr	r4, [pc, #112]	@ (8026658 <lv_theme_default_init+0x9c>)
 80265e6:	60e5      	str	r5, [r4, #12]
    theme.color_primary = color_primary;
 80265e8:	f8a4 9010 	strh.w	r9, [r4, #16]
    theme.color_secondary = color_secondary;
 80265ec:	f8a4 8012 	strh.w	r8, [r4, #18]
    theme.font_small = font;
 80265f0:	6167      	str	r7, [r4, #20]
    theme.font_normal = font;
 80265f2:	61a7      	str	r7, [r4, #24]
    theme.font_large = font;
 80265f4:	61e7      	str	r7, [r4, #28]
    theme.apply_cb = theme_apply;
 80265f6:	4b19      	ldr	r3, [pc, #100]	@ (802665c <lv_theme_default_init+0xa0>)
 80265f8:	6023      	str	r3, [r4, #0]
    theme.flags = dark ? MODE_DARK : 0;
 80265fa:	6226      	str	r6, [r4, #32]
    style_init();
 80265fc:	f7fe fae0 	bl	8024bc0 <style_init>
    if(disp == NULL || lv_disp_get_theme(disp) == &theme) lv_obj_report_style_change(NULL);
 8026600:	b125      	cbz	r5, 802660c <lv_theme_default_init+0x50>
 8026602:	4628      	mov	r0, r5
 8026604:	f7e1 f836 	bl	8007674 <lv_disp_get_theme>
 8026608:	4284      	cmp	r4, r0
 802660a:	d102      	bne.n	8026612 <lv_theme_default_init+0x56>
 802660c:	2000      	movs	r0, #0
 802660e:	f7f6 fabb 	bl	801cb88 <lv_obj_report_style_change>
    inited = true;
 8026612:	4b13      	ldr	r3, [pc, #76]	@ (8026660 <lv_theme_default_init+0xa4>)
 8026614:	2201      	movs	r2, #1
 8026616:	701a      	strb	r2, [r3, #0]
}
 8026618:	480f      	ldr	r0, [pc, #60]	@ (8026658 <lv_theme_default_init+0x9c>)
 802661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        inited = false;
 802661e:	4b10      	ldr	r3, [pc, #64]	@ (8026660 <lv_theme_default_init+0xa4>)
 8026620:	2200      	movs	r2, #0
 8026622:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_theme_default_styles) = lv_mem_alloc(sizeof(my_theme_styles_t));
 8026624:	f44f 7012 	mov.w	r0, #584	@ 0x248
 8026628:	f7f0 f976 	bl	8016918 <lv_mem_alloc>
 802662c:	4b0d      	ldr	r3, [pc, #52]	@ (8026664 <lv_theme_default_init+0xa8>)
 802662e:	6018      	str	r0, [r3, #0]
        styles = (my_theme_styles_t *)LV_GC_ROOT(_lv_theme_default_styles);
 8026630:	4b0d      	ldr	r3, [pc, #52]	@ (8026668 <lv_theme_default_init+0xac>)
 8026632:	6018      	str	r0, [r3, #0]
 8026634:	e7cc      	b.n	80265d0 <lv_theme_default_init+0x14>
    else if(LV_HOR_RES < 720) disp_size = DISP_MEDIUM;
 8026636:	f7ec fe21 	bl	801327c <lv_disp_get_default>
 802663a:	f7ec fe25 	bl	8013288 <lv_disp_get_hor_res>
 802663e:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8026642:	da03      	bge.n	802664c <lv_theme_default_init+0x90>
 8026644:	4b03      	ldr	r3, [pc, #12]	@ (8026654 <lv_theme_default_init+0x98>)
 8026646:	2202      	movs	r2, #2
 8026648:	701a      	strb	r2, [r3, #0]
 802664a:	e7cb      	b.n	80265e4 <lv_theme_default_init+0x28>
    else disp_size = DISP_LARGE;
 802664c:	4b01      	ldr	r3, [pc, #4]	@ (8026654 <lv_theme_default_init+0x98>)
 802664e:	2201      	movs	r2, #1
 8026650:	701a      	strb	r2, [r3, #0]
 8026652:	e7c7      	b.n	80265e4 <lv_theme_default_init+0x28>
 8026654:	20008946 	.word	0x20008946
 8026658:	20008948 	.word	0x20008948
 802665c:	08023a01 	.word	0x08023a01
 8026660:	20008934 	.word	0x20008934
 8026664:	20006670 	.word	0x20006670
 8026668:	2000896c 	.word	0x2000896c

0802666c <lv_theme_default_get>:
{
 802666c:	b508      	push	{r3, lr}
    if(!lv_theme_default_is_inited()) {
 802666e:	f7ff ff9d 	bl	80265ac <lv_theme_default_is_inited>
 8026672:	b108      	cbz	r0, 8026678 <lv_theme_default_get+0xc>
    return (lv_theme_t *)&theme;
 8026674:	4801      	ldr	r0, [pc, #4]	@ (802667c <lv_theme_default_get+0x10>)
}
 8026676:	bd08      	pop	{r3, pc}
        return NULL;
 8026678:	2000      	movs	r0, #0
 802667a:	e7fc      	b.n	8026676 <lv_theme_default_get+0xa>
 802667c:	20008948 	.word	0x20008948

08026680 <lv_tileview_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_tileview_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8026680:	b510      	push	{r4, lr}
 8026682:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 8026684:	f242 0264 	movw	r2, #8292	@ 0x2064
 8026688:	4611      	mov	r1, r2
 802668a:	4620      	mov	r0, r4
 802668c:	f7f2 ff5a 	bl	8019544 <lv_obj_set_size>
    lv_obj_add_event_cb(obj, tileview_event_cb, LV_EVENT_ALL, NULL);
 8026690:	2300      	movs	r3, #0
 8026692:	461a      	mov	r2, r3
 8026694:	4908      	ldr	r1, [pc, #32]	@ (80266b8 <lv_tileview_constructor+0x38>)
 8026696:	4620      	mov	r0, r4
 8026698:	f7ea fb60 	bl	8010d5c <lv_obj_add_event_cb>
    lv_obj_add_flag(obj, LV_OBJ_FLAG_SCROLL_ONE);
 802669c:	2180      	movs	r1, #128	@ 0x80
 802669e:	4620      	mov	r0, r4
 80266a0:	f7f2 f92e 	bl	8018900 <lv_obj_add_flag>
    lv_obj_set_scroll_snap_x(obj, LV_SCROLL_SNAP_CENTER);
 80266a4:	2103      	movs	r1, #3
 80266a6:	4620      	mov	r0, r4
 80266a8:	f7f4 fb68 	bl	801ad7c <lv_obj_set_scroll_snap_x>
    lv_obj_set_scroll_snap_y(obj, LV_SCROLL_SNAP_CENTER);
 80266ac:	2103      	movs	r1, #3
 80266ae:	4620      	mov	r0, r4
 80266b0:	f7f4 fb6f 	bl	801ad92 <lv_obj_set_scroll_snap_y>

}
 80266b4:	bd10      	pop	{r4, pc}
 80266b6:	bf00      	nop
 80266b8:	080266bd 	.word	0x080266bd

080266bc <tileview_event_cb>:
        lv_obj_set_scroll_dir(parent, create_dir);
    }
}

static void tileview_event_cb(lv_event_t * e)
{
 80266bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80266c0:	b083      	sub	sp, #12
 80266c2:	4605      	mov	r5, r0
    lv_event_code_t code = lv_event_get_code(e);
 80266c4:	f7ea fb2e 	bl	8010d24 <lv_event_get_code>
 80266c8:	4604      	mov	r4, r0
    lv_obj_t * obj = lv_event_get_target(e);
 80266ca:	4628      	mov	r0, r5
 80266cc:	f7ea fb26 	bl	8010d1c <lv_event_get_target>
    lv_tileview_t * tv = (lv_tileview_t *) obj;

    if(code == LV_EVENT_SCROLL_END) {
 80266d0:	2c0a      	cmp	r4, #10
 80266d2:	d002      	beq.n	80266da <tileview_event_cb+0x1e>
                break;
            }
        }
        lv_obj_set_scroll_dir(obj, dir);
    }
}
 80266d4:	b003      	add	sp, #12
 80266d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80266da:	4607      	mov	r7, r0
        lv_indev_t * indev = lv_indev_get_act();
 80266dc:	f7ee f848 	bl	8014770 <lv_indev_get_act>
        if(indev && indev->proc.state == LV_INDEV_STATE_PRESSED) {
 80266e0:	b110      	cbz	r0, 80266e8 <tileview_event_cb+0x2c>
 80266e2:	7903      	ldrb	r3, [r0, #4]
 80266e4:	2b01      	cmp	r3, #1
 80266e6:	d0f5      	beq.n	80266d4 <tileview_event_cb+0x18>
        lv_coord_t w = lv_obj_get_content_width(obj);
 80266e8:	4638      	mov	r0, r7
 80266ea:	f7f3 f80b 	bl	8019704 <lv_obj_get_content_width>
 80266ee:	4605      	mov	r5, r0
        lv_coord_t h = lv_obj_get_content_height(obj);
 80266f0:	4638      	mov	r0, r7
 80266f2:	f7f3 f827 	bl	8019744 <lv_obj_get_content_height>
 80266f6:	4604      	mov	r4, r0
        lv_obj_get_scroll_end(obj, &scroll_end);
 80266f8:	a901      	add	r1, sp, #4
 80266fa:	4638      	mov	r0, r7
 80266fc:	f7f4 fcbe 	bl	801b07c <lv_obj_get_scroll_end>
        lv_coord_t left = scroll_end.x;
 8026700:	f9bd 8004 	ldrsh.w	r8, [sp, #4]
        lv_coord_t top = scroll_end.y;
 8026704:	f9bd 9006 	ldrsh.w	r9, [sp, #6]
        lv_coord_t tx = ((left + (w / 2)) / w) * w;
 8026708:	eb05 73d5 	add.w	r3, r5, r5, lsr #31
 802670c:	f343 034f 	sbfx	r3, r3, #1, #16
 8026710:	4498      	add	r8, r3
 8026712:	fb98 f8f5 	sdiv	r8, r8, r5
 8026716:	fb18 f805 	smulbb	r8, r8, r5
 802671a:	fa0f f888 	sxth.w	r8, r8
        lv_coord_t ty = ((top + (h / 2)) / h) * h;
 802671e:	eb04 73d4 	add.w	r3, r4, r4, lsr #31
 8026722:	f343 034f 	sbfx	r3, r3, #1, #16
 8026726:	4499      	add	r9, r3
 8026728:	fb99 f9f4 	sdiv	r9, r9, r4
 802672c:	fb19 f904 	smulbb	r9, r9, r4
 8026730:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < lv_obj_get_child_cnt(obj); i++) {
 8026734:	2400      	movs	r4, #0
 8026736:	e000      	b.n	802673a <tileview_event_cb+0x7e>
 8026738:	3401      	adds	r4, #1
 802673a:	4638      	mov	r0, r7
 802673c:	f7f6 fd59 	bl	801d1f2 <lv_obj_get_child_cnt>
 8026740:	42a0      	cmp	r0, r4
 8026742:	d917      	bls.n	8026774 <tileview_event_cb+0xb8>
            lv_obj_t * tile_obj = lv_obj_get_child(obj, i);
 8026744:	4621      	mov	r1, r4
 8026746:	4638      	mov	r0, r7
 8026748:	f7f6 fd3e 	bl	801d1c8 <lv_obj_get_child>
 802674c:	4605      	mov	r5, r0
            lv_coord_t x = lv_obj_get_x(tile_obj);
 802674e:	f7f2 ff79 	bl	8019644 <lv_obj_get_x>
 8026752:	4606      	mov	r6, r0
            lv_coord_t y = lv_obj_get_y(tile_obj);
 8026754:	4628      	mov	r0, r5
 8026756:	f7f2 ff98 	bl	801968a <lv_obj_get_y>
            if(x == tx && y == ty) {
 802675a:	45b0      	cmp	r8, r6
 802675c:	d1ec      	bne.n	8026738 <tileview_event_cb+0x7c>
 802675e:	4581      	cmp	r9, r0
 8026760:	d1ea      	bne.n	8026738 <tileview_event_cb+0x7c>
                tv->tile_act = (lv_obj_t *)tile;
 8026762:	627d      	str	r5, [r7, #36]	@ 0x24
                dir = tile->dir;
 8026764:	f895 4024 	ldrb.w	r4, [r5, #36]	@ 0x24
                lv_event_send(obj, LV_EVENT_VALUE_CHANGED, NULL);
 8026768:	2200      	movs	r2, #0
 802676a:	211c      	movs	r1, #28
 802676c:	4638      	mov	r0, r7
 802676e:	f7ea faab 	bl	8010cc8 <lv_event_send>
                break;
 8026772:	e000      	b.n	8026776 <tileview_event_cb+0xba>
        lv_dir_t dir = LV_DIR_ALL;
 8026774:	240f      	movs	r4, #15
        lv_obj_set_scroll_dir(obj, dir);
 8026776:	4621      	mov	r1, r4
 8026778:	4638      	mov	r0, r7
 802677a:	f7f4 faef 	bl	801ad5c <lv_obj_set_scroll_dir>
 802677e:	e7a9      	b.n	80266d4 <tileview_event_cb+0x18>

08026780 <lv_tileview_tile_constructor>:
{
 8026780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026782:	460c      	mov	r4, r1
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8026784:	4608      	mov	r0, r1
 8026786:	f7f6 fcf5 	bl	801d174 <lv_obj_get_parent>
 802678a:	4606      	mov	r6, r0
    lv_obj_set_size(obj, LV_PCT(100), LV_PCT(100));
 802678c:	f242 0264 	movw	r2, #8292	@ 0x2064
 8026790:	4611      	mov	r1, r2
 8026792:	4620      	mov	r0, r4
 8026794:	f7f2 fed6 	bl	8019544 <lv_obj_set_size>
    lv_obj_update_layout(obj);  /*Be sure the size is correct*/
 8026798:	4620      	mov	r0, r4
 802679a:	f7f4 f87f 	bl	801a89c <lv_obj_update_layout>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 802679e:	4630      	mov	r0, r6
 80267a0:	f7f2 ffb0 	bl	8019704 <lv_obj_get_content_width>
 80267a4:	4f0f      	ldr	r7, [pc, #60]	@ (80267e4 <lv_tileview_tile_constructor+0x64>)
 80267a6:	683d      	ldr	r5, [r7, #0]
 80267a8:	fb15 f500 	smulbb	r5, r5, r0
 80267ac:	b22d      	sxth	r5, r5
                   create_row_id * lv_obj_get_content_height(parent));
 80267ae:	4630      	mov	r0, r6
 80267b0:	f7f2 ffc8 	bl	8019744 <lv_obj_get_content_height>
    lv_obj_set_pos(obj, create_col_id * lv_obj_get_content_width(parent),
 80267b4:	4b0c      	ldr	r3, [pc, #48]	@ (80267e8 <lv_tileview_tile_constructor+0x68>)
 80267b6:	681a      	ldr	r2, [r3, #0]
 80267b8:	fb12 f200 	smulbb	r2, r2, r0
 80267bc:	b212      	sxth	r2, r2
 80267be:	4629      	mov	r1, r5
 80267c0:	4620      	mov	r0, r4
 80267c2:	f7f2 fe87 	bl	80194d4 <lv_obj_set_pos>
    tile->dir = create_dir;
 80267c6:	4b09      	ldr	r3, [pc, #36]	@ (80267ec <lv_tileview_tile_constructor+0x6c>)
 80267c8:	7819      	ldrb	r1, [r3, #0]
 80267ca:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
    if(create_col_id == 0 && create_row_id == 0) {
 80267ce:	683b      	ldr	r3, [r7, #0]
 80267d0:	b913      	cbnz	r3, 80267d8 <lv_tileview_tile_constructor+0x58>
 80267d2:	4b05      	ldr	r3, [pc, #20]	@ (80267e8 <lv_tileview_tile_constructor+0x68>)
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	b103      	cbz	r3, 80267da <lv_tileview_tile_constructor+0x5a>
}
 80267d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_set_scroll_dir(parent, create_dir);
 80267da:	4630      	mov	r0, r6
 80267dc:	f7f4 fabe 	bl	801ad5c <lv_obj_set_scroll_dir>
}
 80267e0:	e7fa      	b.n	80267d8 <lv_tileview_tile_constructor+0x58>
 80267e2:	bf00      	nop
 80267e4:	20008974 	.word	0x20008974
 80267e8:	20008970 	.word	0x20008970
 80267ec:	20008978 	.word	0x20008978

080267f0 <lv_timer_time_remaining>:
 * Find out how much time remains before a timer must be run.
 * @param timer pointer to lv_timer
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_timer_time_remaining(lv_timer_t * timer)
{
 80267f0:	b510      	push	{r4, lr}
 80267f2:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(timer->last_run);
 80267f4:	6840      	ldr	r0, [r0, #4]
 80267f6:	f7ec fdc7 	bl	8013388 <lv_tick_elaps>
    if(elp >= timer->period)
 80267fa:	6823      	ldr	r3, [r4, #0]
 80267fc:	4283      	cmp	r3, r0
 80267fe:	d901      	bls.n	8026804 <lv_timer_time_remaining+0x14>
        return 0;
    return timer->period - elp;
 8026800:	1a18      	subs	r0, r3, r0
}
 8026802:	bd10      	pop	{r4, pc}
        return 0;
 8026804:	2000      	movs	r0, #0
 8026806:	e7fc      	b.n	8026802 <lv_timer_time_remaining+0x12>

08026808 <lv_timer_create>:
{
 8026808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802680a:	4606      	mov	r6, r0
 802680c:	460f      	mov	r7, r1
 802680e:	4615      	mov	r5, r2
    new_timer = _lv_ll_ins_head(&LV_GC_ROOT(_lv_timer_ll));
 8026810:	480b      	ldr	r0, [pc, #44]	@ (8026840 <lv_timer_create+0x38>)
 8026812:	f7ef fe68 	bl	80164e6 <_lv_ll_ins_head>
    LV_ASSERT_MALLOC(new_timer);
 8026816:	b190      	cbz	r0, 802683e <lv_timer_create+0x36>
 8026818:	4604      	mov	r4, r0
    new_timer->period = period;
 802681a:	6007      	str	r7, [r0, #0]
    new_timer->timer_cb = timer_xcb;
 802681c:	6086      	str	r6, [r0, #8]
    new_timer->repeat_count = -1;
 802681e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026822:	6103      	str	r3, [r0, #16]
    new_timer->paused = 0;
 8026824:	7d03      	ldrb	r3, [r0, #20]
 8026826:	f023 0301 	bic.w	r3, r3, #1
 802682a:	7503      	strb	r3, [r0, #20]
    new_timer->last_run = lv_tick_get();
 802682c:	f7ec fd9e 	bl	801336c <lv_tick_get>
 8026830:	6060      	str	r0, [r4, #4]
    new_timer->user_data = user_data;
 8026832:	60e5      	str	r5, [r4, #12]
    timer_created = true;
 8026834:	4b03      	ldr	r3, [pc, #12]	@ (8026844 <lv_timer_create+0x3c>)
 8026836:	2201      	movs	r2, #1
 8026838:	701a      	strb	r2, [r3, #0]
}
 802683a:	4620      	mov	r0, r4
 802683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LV_ASSERT_MALLOC(new_timer);
 802683e:	e7fe      	b.n	802683e <lv_timer_create+0x36>
 8026840:	2000686c 	.word	0x2000686c
 8026844:	20008989 	.word	0x20008989

08026848 <lv_timer_del>:
{
 8026848:	b510      	push	{r4, lr}
 802684a:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_timer_ll), timer);
 802684c:	4601      	mov	r1, r0
 802684e:	4805      	ldr	r0, [pc, #20]	@ (8026864 <lv_timer_del+0x1c>)
 8026850:	f7ef fec9 	bl	80165e6 <_lv_ll_remove>
    timer_deleted = true;
 8026854:	4b04      	ldr	r3, [pc, #16]	@ (8026868 <lv_timer_del+0x20>)
 8026856:	2201      	movs	r2, #1
 8026858:	701a      	strb	r2, [r3, #0]
    lv_mem_free(timer);
 802685a:	4620      	mov	r0, r4
 802685c:	f7f0 f87a 	bl	8016954 <lv_mem_free>
}
 8026860:	bd10      	pop	{r4, pc}
 8026862:	bf00      	nop
 8026864:	2000686c 	.word	0x2000686c
 8026868:	2000898a 	.word	0x2000898a

0802686c <lv_timer_exec>:
{
 802686c:	b538      	push	{r3, r4, r5, lr}
    if(timer->paused) return false;
 802686e:	7d03      	ldrb	r3, [r0, #20]
 8026870:	f013 0f01 	tst.w	r3, #1
 8026874:	d002      	beq.n	802687c <lv_timer_exec+0x10>
 8026876:	2500      	movs	r5, #0
}
 8026878:	4628      	mov	r0, r5
 802687a:	bd38      	pop	{r3, r4, r5, pc}
 802687c:	4604      	mov	r4, r0
    if(lv_timer_time_remaining(timer) == 0) {
 802687e:	f7ff ffb7 	bl	80267f0 <lv_timer_time_remaining>
 8026882:	b970      	cbnz	r0, 80268a2 <lv_timer_exec+0x36>
        int32_t original_repeat_count = timer->repeat_count;
 8026884:	6925      	ldr	r5, [r4, #16]
        if(timer->repeat_count > 0) timer->repeat_count--;
 8026886:	2d00      	cmp	r5, #0
 8026888:	dd01      	ble.n	802688e <lv_timer_exec+0x22>
 802688a:	1e6b      	subs	r3, r5, #1
 802688c:	6123      	str	r3, [r4, #16]
        timer->last_run = lv_tick_get();
 802688e:	f7ec fd6d 	bl	801336c <lv_tick_get>
 8026892:	6060      	str	r0, [r4, #4]
        if(timer->timer_cb && original_repeat_count != 0) timer->timer_cb(timer);
 8026894:	68a3      	ldr	r3, [r4, #8]
 8026896:	b183      	cbz	r3, 80268ba <lv_timer_exec+0x4e>
 8026898:	b18d      	cbz	r5, 80268be <lv_timer_exec+0x52>
 802689a:	4620      	mov	r0, r4
 802689c:	4798      	blx	r3
        exec = true;
 802689e:	2501      	movs	r5, #1
 80268a0:	e000      	b.n	80268a4 <lv_timer_exec+0x38>
    bool exec = false;
 80268a2:	2500      	movs	r5, #0
    if(timer_deleted == false) { /*The timer might be deleted by itself as well*/
 80268a4:	4b07      	ldr	r3, [pc, #28]	@ (80268c4 <lv_timer_exec+0x58>)
 80268a6:	781b      	ldrb	r3, [r3, #0]
 80268a8:	2b00      	cmp	r3, #0
 80268aa:	d1e5      	bne.n	8026878 <lv_timer_exec+0xc>
        if(timer->repeat_count == 0) { /*The repeat count is over, delete the timer*/
 80268ac:	6923      	ldr	r3, [r4, #16]
 80268ae:	2b00      	cmp	r3, #0
 80268b0:	d1e2      	bne.n	8026878 <lv_timer_exec+0xc>
            lv_timer_del(timer);
 80268b2:	4620      	mov	r0, r4
 80268b4:	f7ff ffc8 	bl	8026848 <lv_timer_del>
 80268b8:	e7de      	b.n	8026878 <lv_timer_exec+0xc>
        exec = true;
 80268ba:	2501      	movs	r5, #1
 80268bc:	e7f2      	b.n	80268a4 <lv_timer_exec+0x38>
 80268be:	2501      	movs	r5, #1
 80268c0:	e7f0      	b.n	80268a4 <lv_timer_exec+0x38>
 80268c2:	bf00      	nop
 80268c4:	2000898a 	.word	0x2000898a

080268c8 <lv_timer_handler>:
{
 80268c8:	b570      	push	{r4, r5, r6, lr}
    if(already_running) {
 80268ca:	4b44      	ldr	r3, [pc, #272]	@ (80269dc <lv_timer_handler+0x114>)
 80268cc:	781b      	ldrb	r3, [r3, #0]
 80268ce:	2b00      	cmp	r3, #0
 80268d0:	f040 8081 	bne.w	80269d6 <lv_timer_handler+0x10e>
    already_running = true;
 80268d4:	4b41      	ldr	r3, [pc, #260]	@ (80269dc <lv_timer_handler+0x114>)
 80268d6:	2201      	movs	r2, #1
 80268d8:	701a      	strb	r2, [r3, #0]
    if(lv_timer_run == false) {
 80268da:	4b41      	ldr	r3, [pc, #260]	@ (80269e0 <lv_timer_handler+0x118>)
 80268dc:	781b      	ldrb	r3, [r3, #0]
 80268de:	b923      	cbnz	r3, 80268ea <lv_timer_handler+0x22>
        already_running = false; /*Release mutex*/
 80268e0:	4b3e      	ldr	r3, [pc, #248]	@ (80269dc <lv_timer_handler+0x114>)
 80268e2:	2200      	movs	r2, #0
 80268e4:	701a      	strb	r2, [r3, #0]
        return 1;
 80268e6:	2601      	movs	r6, #1
 80268e8:	e076      	b.n	80269d8 <lv_timer_handler+0x110>
    uint32_t handler_start = lv_tick_get();
 80268ea:	f7ec fd3f 	bl	801336c <lv_tick_get>
    if(handler_start == 0) {
 80268ee:	4605      	mov	r5, r0
 80268f0:	bb10      	cbnz	r0, 8026938 <lv_timer_handler+0x70>
        run_cnt++;
 80268f2:	4a3c      	ldr	r2, [pc, #240]	@ (80269e4 <lv_timer_handler+0x11c>)
 80268f4:	6813      	ldr	r3, [r2, #0]
 80268f6:	3301      	adds	r3, #1
 80268f8:	6013      	str	r3, [r2, #0]
        if(run_cnt > 100) {
 80268fa:	2b64      	cmp	r3, #100	@ 0x64
 80268fc:	d91c      	bls.n	8026938 <lv_timer_handler+0x70>
            run_cnt = 0;
 80268fe:	4613      	mov	r3, r2
 8026900:	2200      	movs	r2, #0
 8026902:	601a      	str	r2, [r3, #0]
 8026904:	e018      	b.n	8026938 <lv_timer_handler+0x70>
            LV_GC_ROOT(_lv_timer_act) = next; /*Load the next timer*/
 8026906:	4b38      	ldr	r3, [pc, #224]	@ (80269e8 <lv_timer_handler+0x120>)
 8026908:	601c      	str	r4, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 802690a:	4b37      	ldr	r3, [pc, #220]	@ (80269e8 <lv_timer_handler+0x120>)
 802690c:	6819      	ldr	r1, [r3, #0]
 802690e:	b181      	cbz	r1, 8026932 <lv_timer_handler+0x6a>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), LV_GC_ROOT(_lv_timer_act));
 8026910:	4836      	ldr	r0, [pc, #216]	@ (80269ec <lv_timer_handler+0x124>)
 8026912:	f7ef fe2e 	bl	8016572 <_lv_ll_get_next>
 8026916:	4604      	mov	r4, r0
            if(lv_timer_exec(LV_GC_ROOT(_lv_timer_act))) {
 8026918:	4b33      	ldr	r3, [pc, #204]	@ (80269e8 <lv_timer_handler+0x120>)
 802691a:	6818      	ldr	r0, [r3, #0]
 802691c:	f7ff ffa6 	bl	802686c <lv_timer_exec>
 8026920:	2800      	cmp	r0, #0
 8026922:	d0f0      	beq.n	8026906 <lv_timer_handler+0x3e>
                if(timer_created || timer_deleted) {
 8026924:	4b32      	ldr	r3, [pc, #200]	@ (80269f0 <lv_timer_handler+0x128>)
 8026926:	781b      	ldrb	r3, [r3, #0]
 8026928:	b91b      	cbnz	r3, 8026932 <lv_timer_handler+0x6a>
 802692a:	4b32      	ldr	r3, [pc, #200]	@ (80269f4 <lv_timer_handler+0x12c>)
 802692c:	781b      	ldrb	r3, [r3, #0]
 802692e:	2b00      	cmp	r3, #0
 8026930:	d0e9      	beq.n	8026906 <lv_timer_handler+0x3e>
    } while(LV_GC_ROOT(_lv_timer_act));
 8026932:	4b2d      	ldr	r3, [pc, #180]	@ (80269e8 <lv_timer_handler+0x120>)
 8026934:	681b      	ldr	r3, [r3, #0]
 8026936:	b153      	cbz	r3, 802694e <lv_timer_handler+0x86>
        timer_deleted             = false;
 8026938:	2300      	movs	r3, #0
 802693a:	4a2e      	ldr	r2, [pc, #184]	@ (80269f4 <lv_timer_handler+0x12c>)
 802693c:	7013      	strb	r3, [r2, #0]
        timer_created             = false;
 802693e:	4a2c      	ldr	r2, [pc, #176]	@ (80269f0 <lv_timer_handler+0x128>)
 8026940:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_timer_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 8026942:	482a      	ldr	r0, [pc, #168]	@ (80269ec <lv_timer_handler+0x124>)
 8026944:	f7ef fe0d 	bl	8016562 <_lv_ll_get_head>
 8026948:	4b27      	ldr	r3, [pc, #156]	@ (80269e8 <lv_timer_handler+0x120>)
 802694a:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_timer_act)) {
 802694c:	e7dd      	b.n	802690a <lv_timer_handler+0x42>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_timer_ll));
 802694e:	4827      	ldr	r0, [pc, #156]	@ (80269ec <lv_timer_handler+0x124>)
 8026950:	f7ef fe07 	bl	8016562 <_lv_ll_get_head>
 8026954:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TIMER_READY;
 8026956:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
    while(next) {
 802695a:	e004      	b.n	8026966 <lv_timer_handler+0x9e>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_timer_ll), next); /*Find the next timer*/
 802695c:	4621      	mov	r1, r4
 802695e:	4823      	ldr	r0, [pc, #140]	@ (80269ec <lv_timer_handler+0x124>)
 8026960:	f7ef fe07 	bl	8016572 <_lv_ll_get_next>
 8026964:	4604      	mov	r4, r0
    while(next) {
 8026966:	b154      	cbz	r4, 802697e <lv_timer_handler+0xb6>
        if(!next->paused) {
 8026968:	7d23      	ldrb	r3, [r4, #20]
 802696a:	f013 0f01 	tst.w	r3, #1
 802696e:	d1f5      	bne.n	802695c <lv_timer_handler+0x94>
            uint32_t delay = lv_timer_time_remaining(next);
 8026970:	4620      	mov	r0, r4
 8026972:	f7ff ff3d 	bl	80267f0 <lv_timer_time_remaining>
            if(delay < time_till_next)
 8026976:	4286      	cmp	r6, r0
 8026978:	d9f0      	bls.n	802695c <lv_timer_handler+0x94>
                time_till_next = delay;
 802697a:	4606      	mov	r6, r0
 802697c:	e7ee      	b.n	802695c <lv_timer_handler+0x94>
    busy_time += lv_tick_elaps(handler_start);
 802697e:	4628      	mov	r0, r5
 8026980:	f7ec fd02 	bl	8013388 <lv_tick_elaps>
 8026984:	4a1c      	ldr	r2, [pc, #112]	@ (80269f8 <lv_timer_handler+0x130>)
 8026986:	6813      	ldr	r3, [r2, #0]
 8026988:	4403      	add	r3, r0
 802698a:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 802698c:	4b1b      	ldr	r3, [pc, #108]	@ (80269fc <lv_timer_handler+0x134>)
 802698e:	6818      	ldr	r0, [r3, #0]
 8026990:	f7ec fcfa 	bl	8013388 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8026994:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8026998:	d317      	bcc.n	80269ca <lv_timer_handler+0x102>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
 802699a:	4b17      	ldr	r3, [pc, #92]	@ (80269f8 <lv_timer_handler+0x130>)
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	2264      	movs	r2, #100	@ 0x64
 80269a0:	fb02 f303 	mul.w	r3, r2, r3
 80269a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80269a8:	b2db      	uxtb	r3, r3
 80269aa:	4a15      	ldr	r2, [pc, #84]	@ (8026a00 <lv_timer_handler+0x138>)
 80269ac:	7013      	strb	r3, [r2, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 80269ae:	2b64      	cmp	r3, #100	@ 0x64
 80269b0:	d80f      	bhi.n	80269d2 <lv_timer_handler+0x10a>
 80269b2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80269b6:	b2db      	uxtb	r3, r3
 80269b8:	4a11      	ldr	r2, [pc, #68]	@ (8026a00 <lv_timer_handler+0x138>)
 80269ba:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 80269bc:	4b0e      	ldr	r3, [pc, #56]	@ (80269f8 <lv_timer_handler+0x130>)
 80269be:	2200      	movs	r2, #0
 80269c0:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 80269c2:	f7ec fcd3 	bl	801336c <lv_tick_get>
 80269c6:	4b0d      	ldr	r3, [pc, #52]	@ (80269fc <lv_timer_handler+0x134>)
 80269c8:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
 80269ca:	4b04      	ldr	r3, [pc, #16]	@ (80269dc <lv_timer_handler+0x114>)
 80269cc:	2200      	movs	r2, #0
 80269ce:	701a      	strb	r2, [r3, #0]
    return time_till_next;
 80269d0:	e002      	b.n	80269d8 <lv_timer_handler+0x110>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
 80269d2:	2300      	movs	r3, #0
 80269d4:	e7f0      	b.n	80269b8 <lv_timer_handler+0xf0>
        return 1;
 80269d6:	2601      	movs	r6, #1
}
 80269d8:	4630      	mov	r0, r6
 80269da:	bd70      	pop	{r4, r5, r6, pc}
 80269dc:	20008988 	.word	0x20008988
 80269e0:	2000898c 	.word	0x2000898c
 80269e4:	20008984 	.word	0x20008984
 80269e8:	200067e4 	.word	0x200067e4
 80269ec:	2000686c 	.word	0x2000686c
 80269f0:	20008989 	.word	0x20008989
 80269f4:	2000898a 	.word	0x2000898a
 80269f8:	20008980 	.word	0x20008980
 80269fc:	2000897c 	.word	0x2000897c
 8026a00:	2000898b 	.word	0x2000898b

08026a04 <lv_timer_pause>:
    timer->paused = true;
 8026a04:	7d03      	ldrb	r3, [r0, #20]
 8026a06:	f043 0301 	orr.w	r3, r3, #1
 8026a0a:	7503      	strb	r3, [r0, #20]
}
 8026a0c:	4770      	bx	lr

08026a0e <lv_timer_resume>:
    timer->paused = false;
 8026a0e:	7d03      	ldrb	r3, [r0, #20]
 8026a10:	f023 0301 	bic.w	r3, r3, #1
 8026a14:	7503      	strb	r3, [r0, #20]
}
 8026a16:	4770      	bx	lr

08026a18 <lv_timer_ready>:
{
 8026a18:	b510      	push	{r4, lr}
 8026a1a:	4604      	mov	r4, r0
    timer->last_run = lv_tick_get() - timer->period - 1;
 8026a1c:	f7ec fca6 	bl	801336c <lv_tick_get>
 8026a20:	6823      	ldr	r3, [r4, #0]
 8026a22:	1ac3      	subs	r3, r0, r3
 8026a24:	3b01      	subs	r3, #1
 8026a26:	6063      	str	r3, [r4, #4]
}
 8026a28:	bd10      	pop	{r4, pc}
	...

08026a2c <lv_timer_enable>:
    lv_timer_run = en;
 8026a2c:	4b01      	ldr	r3, [pc, #4]	@ (8026a34 <lv_timer_enable+0x8>)
 8026a2e:	7018      	strb	r0, [r3, #0]
}
 8026a30:	4770      	bx	lr
 8026a32:	bf00      	nop
 8026a34:	2000898c 	.word	0x2000898c

08026a38 <_lv_timer_core_init>:
{
 8026a38:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_timer_ll), sizeof(lv_timer_t));
 8026a3a:	2118      	movs	r1, #24
 8026a3c:	4803      	ldr	r0, [pc, #12]	@ (8026a4c <_lv_timer_core_init+0x14>)
 8026a3e:	f7ef fd4a 	bl	80164d6 <_lv_ll_init>
    lv_timer_enable(true);
 8026a42:	2001      	movs	r0, #1
 8026a44:	f7ff fff2 	bl	8026a2c <lv_timer_enable>
}
 8026a48:	bd08      	pop	{r3, pc}
 8026a4a:	bf00      	nop
 8026a4c:	2000686c 	.word	0x2000686c

08026a50 <lv_timer_get_idle>:
}
 8026a50:	4b01      	ldr	r3, [pc, #4]	@ (8026a58 <lv_timer_get_idle+0x8>)
 8026a52:	7818      	ldrb	r0, [r3, #0]
 8026a54:	4770      	bx	lr
 8026a56:	bf00      	nop
 8026a58:	2000898b 	.word	0x2000898b

08026a5c <block_size>:
** block_header_t member functions.
*/

static size_t block_size(const block_header_t * block)
{
    return block->size & ~(block_header_free_bit | block_header_prev_free_bit);
 8026a5c:	6840      	ldr	r0, [r0, #4]
}
 8026a5e:	f020 0003 	bic.w	r0, r0, #3
 8026a62:	4770      	bx	lr

08026a64 <block_set_size>:

static void block_set_size(block_header_t * block, size_t size)
{
    const size_t oldsize = block->size;
 8026a64:	6843      	ldr	r3, [r0, #4]
    block->size = size | (oldsize & (block_header_free_bit | block_header_prev_free_bit));
 8026a66:	f003 0303 	and.w	r3, r3, #3
 8026a6a:	430b      	orrs	r3, r1
 8026a6c:	6043      	str	r3, [r0, #4]
}
 8026a6e:	4770      	bx	lr

08026a70 <block_is_last>:

static int block_is_last(const block_header_t * block)
{
 8026a70:	b508      	push	{r3, lr}
    return block_size(block) == 0;
 8026a72:	f7ff fff3 	bl	8026a5c <block_size>
}
 8026a76:	fab0 f080 	clz	r0, r0
 8026a7a:	0940      	lsrs	r0, r0, #5
 8026a7c:	bd08      	pop	{r3, pc}

08026a7e <block_is_free>:

static int block_is_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_free_bit);
 8026a7e:	6840      	ldr	r0, [r0, #4]
}
 8026a80:	f000 0001 	and.w	r0, r0, #1
 8026a84:	4770      	bx	lr

08026a86 <block_set_free>:

static void block_set_free(block_header_t * block)
{
    block->size |= block_header_free_bit;
 8026a86:	6843      	ldr	r3, [r0, #4]
 8026a88:	f043 0301 	orr.w	r3, r3, #1
 8026a8c:	6043      	str	r3, [r0, #4]
}
 8026a8e:	4770      	bx	lr

08026a90 <block_set_used>:

static void block_set_used(block_header_t * block)
{
    block->size &= ~block_header_free_bit;
 8026a90:	6843      	ldr	r3, [r0, #4]
 8026a92:	f023 0301 	bic.w	r3, r3, #1
 8026a96:	6043      	str	r3, [r0, #4]
}
 8026a98:	4770      	bx	lr

08026a9a <block_is_prev_free>:

static int block_is_prev_free(const block_header_t * block)
{
    return tlsf_cast(int, block->size & block_header_prev_free_bit);
 8026a9a:	6840      	ldr	r0, [r0, #4]
}
 8026a9c:	f000 0002 	and.w	r0, r0, #2
 8026aa0:	4770      	bx	lr

08026aa2 <block_set_prev_free>:

static void block_set_prev_free(block_header_t * block)
{
    block->size |= block_header_prev_free_bit;
 8026aa2:	6843      	ldr	r3, [r0, #4]
 8026aa4:	f043 0302 	orr.w	r3, r3, #2
 8026aa8:	6043      	str	r3, [r0, #4]
}
 8026aaa:	4770      	bx	lr

08026aac <block_set_prev_used>:

static void block_set_prev_used(block_header_t * block)
{
    block->size &= ~block_header_prev_free_bit;
 8026aac:	6843      	ldr	r3, [r0, #4]
 8026aae:	f023 0302 	bic.w	r3, r3, #2
 8026ab2:	6043      	str	r3, [r0, #4]
}
 8026ab4:	4770      	bx	lr

08026ab6 <block_from_ptr>:

static block_header_t * block_from_ptr(const void * ptr)
{
    return tlsf_cast(block_header_t *,
                     tlsf_cast(unsigned char *, ptr) - block_start_offset);
}
 8026ab6:	3808      	subs	r0, #8
 8026ab8:	4770      	bx	lr

08026aba <block_to_ptr>:

static void * block_to_ptr(const block_header_t * block)
{
    return tlsf_cast(void *,
                     tlsf_cast(unsigned char *, block) + block_start_offset);
}
 8026aba:	3008      	adds	r0, #8
 8026abc:	4770      	bx	lr

08026abe <offset_to_block>:

/* Return location of next block after block of given size. */
static block_header_t * offset_to_block(const void * ptr, size_t size)
{
    return tlsf_cast(block_header_t *, tlsf_cast(tlsfptr_t, ptr) + size);
}
 8026abe:	4408      	add	r0, r1
 8026ac0:	4770      	bx	lr

08026ac2 <block_prev>:

/* Return location of previous block. */
static block_header_t * block_prev(const block_header_t * block)
{
 8026ac2:	b510      	push	{r4, lr}
 8026ac4:	4604      	mov	r4, r0
    tlsf_assert(block_is_prev_free(block) && "previous block must be free");
 8026ac6:	f7ff ffe8 	bl	8026a9a <block_is_prev_free>
 8026aca:	b900      	cbnz	r0, 8026ace <block_prev+0xc>
 8026acc:	e7fe      	b.n	8026acc <block_prev+0xa>
    return block->prev_phys_block;
}
 8026ace:	6820      	ldr	r0, [r4, #0]
 8026ad0:	bd10      	pop	{r4, pc}

08026ad2 <block_next>:

/* Return location of next existing block. */
static block_header_t * block_next(const block_header_t * block)
{
 8026ad2:	b538      	push	{r3, r4, r5, lr}
 8026ad4:	4604      	mov	r4, r0
    block_header_t * next = offset_to_block(block_to_ptr(block),
 8026ad6:	f7ff fff0 	bl	8026aba <block_to_ptr>
 8026ada:	4605      	mov	r5, r0
                                            block_size(block) - block_header_overhead);
 8026adc:	4620      	mov	r0, r4
 8026ade:	f7ff ffbd 	bl	8026a5c <block_size>
    block_header_t * next = offset_to_block(block_to_ptr(block),
 8026ae2:	1f01      	subs	r1, r0, #4
 8026ae4:	4628      	mov	r0, r5
 8026ae6:	f7ff ffea 	bl	8026abe <offset_to_block>
 8026aea:	4605      	mov	r5, r0
    tlsf_assert(!block_is_last(block));
 8026aec:	4620      	mov	r0, r4
 8026aee:	f7ff ffbf 	bl	8026a70 <block_is_last>
 8026af2:	b100      	cbz	r0, 8026af6 <block_next+0x24>
 8026af4:	e7fe      	b.n	8026af4 <block_next+0x22>
    return next;
}
 8026af6:	4628      	mov	r0, r5
 8026af8:	bd38      	pop	{r3, r4, r5, pc}

08026afa <block_link_next>:

/* Link a new block with its physical neighbor, return the neighbor. */
static block_header_t * block_link_next(block_header_t * block)
{
 8026afa:	b510      	push	{r4, lr}
 8026afc:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 8026afe:	f7ff ffe8 	bl	8026ad2 <block_next>
    next->prev_phys_block = block;
 8026b02:	6004      	str	r4, [r0, #0]
    return next;
}
 8026b04:	bd10      	pop	{r4, pc}

08026b06 <block_mark_as_free>:

static void block_mark_as_free(block_header_t * block)
{
 8026b06:	b510      	push	{r4, lr}
 8026b08:	4604      	mov	r4, r0
    /* Link the block to the next block, first. */
    block_header_t * next = block_link_next(block);
 8026b0a:	f7ff fff6 	bl	8026afa <block_link_next>
    block_set_prev_free(next);
 8026b0e:	f7ff ffc8 	bl	8026aa2 <block_set_prev_free>
    block_set_free(block);
 8026b12:	4620      	mov	r0, r4
 8026b14:	f7ff ffb7 	bl	8026a86 <block_set_free>
}
 8026b18:	bd10      	pop	{r4, pc}

08026b1a <block_mark_as_used>:

static void block_mark_as_used(block_header_t * block)
{
 8026b1a:	b510      	push	{r4, lr}
 8026b1c:	4604      	mov	r4, r0
    block_header_t * next = block_next(block);
 8026b1e:	f7ff ffd8 	bl	8026ad2 <block_next>
    block_set_prev_used(next);
 8026b22:	f7ff ffc3 	bl	8026aac <block_set_prev_used>
    block_set_used(block);
 8026b26:	4620      	mov	r0, r4
 8026b28:	f7ff ffb2 	bl	8026a90 <block_set_used>
}
 8026b2c:	bd10      	pop	{r4, pc}

08026b2e <align_up>:

static size_t align_up(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8026b2e:	1e4b      	subs	r3, r1, #1
 8026b30:	420b      	tst	r3, r1
 8026b32:	d000      	beq.n	8026b36 <align_up+0x8>
 8026b34:	e7fe      	b.n	8026b34 <align_up+0x6>
    return (x + (align - 1)) & ~(align - 1);
 8026b36:	4408      	add	r0, r1
 8026b38:	3801      	subs	r0, #1
 8026b3a:	4249      	negs	r1, r1
}
 8026b3c:	4008      	ands	r0, r1
 8026b3e:	4770      	bx	lr

08026b40 <align_down>:

static size_t align_down(size_t x, size_t align)
{
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8026b40:	1e4b      	subs	r3, r1, #1
 8026b42:	420b      	tst	r3, r1
 8026b44:	d000      	beq.n	8026b48 <align_down+0x8>
 8026b46:	e7fe      	b.n	8026b46 <align_down+0x6>
    return x - (x & (align - 1));
 8026b48:	4249      	negs	r1, r1
}
 8026b4a:	4008      	ands	r0, r1
 8026b4c:	4770      	bx	lr

08026b4e <align_ptr>:

static void * align_ptr(const void * ptr, size_t align)
{
    const tlsfptr_t aligned =
        (tlsf_cast(tlsfptr_t, ptr) + (align - 1)) & ~(align - 1);
 8026b4e:	4408      	add	r0, r1
 8026b50:	3801      	subs	r0, #1
 8026b52:	424b      	negs	r3, r1
 8026b54:	4018      	ands	r0, r3
    tlsf_assert(0 == (align & (align - 1)) && "must align to a power of two");
 8026b56:	1e4b      	subs	r3, r1, #1
 8026b58:	420b      	tst	r3, r1
 8026b5a:	d000      	beq.n	8026b5e <align_ptr+0x10>
 8026b5c:	e7fe      	b.n	8026b5c <align_ptr+0xe>
    return tlsf_cast(void *, aligned);
}
 8026b5e:	4770      	bx	lr

08026b60 <adjust_request_size>:
/*
** Adjust an allocation size to be aligned to word size, and no smaller
** than internal minimum.
*/
static size_t adjust_request_size(size_t size, size_t align)
{
 8026b60:	b508      	push	{r3, lr}
    size_t adjust = 0;
    if(size) {
 8026b62:	b900      	cbnz	r0, 8026b66 <adjust_request_size+0x6>
        if(aligned < block_size_max) {
            adjust = tlsf_max(aligned, block_size_min);
        }
    }
    return adjust;
}
 8026b64:	bd08      	pop	{r3, pc}
        const size_t aligned = align_up(size, align);
 8026b66:	f7ff ffe2 	bl	8026b2e <align_up>
        if(aligned < block_size_max) {
 8026b6a:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8026b6e:	d203      	bcs.n	8026b78 <adjust_request_size+0x18>
            adjust = tlsf_max(aligned, block_size_min);
 8026b70:	280c      	cmp	r0, #12
 8026b72:	bf38      	it	cc
 8026b74:	200c      	movcc	r0, #12
 8026b76:	e7f5      	b.n	8026b64 <adjust_request_size+0x4>
    size_t adjust = 0;
 8026b78:	2000      	movs	r0, #0
 8026b7a:	e7f3      	b.n	8026b64 <adjust_request_size+0x4>

08026b7c <remove_free_block>:
    return control->blocks[fl][sl];
}

/* Remove a free block from the free list.*/
static void remove_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8026b7c:	b500      	push	{lr}
 8026b7e:	4696      	mov	lr, r2
 8026b80:	469c      	mov	ip, r3
    block_header_t * prev = block->prev_free;
 8026b82:	68cb      	ldr	r3, [r1, #12]
    block_header_t * next = block->next_free;
 8026b84:	688a      	ldr	r2, [r1, #8]
    tlsf_assert(prev && "prev_free field can not be null");
 8026b86:	b15b      	cbz	r3, 8026ba0 <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 8026b88:	b15a      	cbz	r2, 8026ba2 <remove_free_block+0x26>
    next->prev_free = prev;
 8026b8a:	60d3      	str	r3, [r2, #12]
    prev->next_free = next;
 8026b8c:	609a      	str	r2, [r3, #8]

    /* If this block is the head of the free list, set new head. */
    if(control->blocks[fl][sl] == block) {
 8026b8e:	eb0c 134e 	add.w	r3, ip, lr, lsl #5
 8026b92:	330c      	adds	r3, #12
 8026b94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8026b98:	428b      	cmp	r3, r1
 8026b9a:	d003      	beq.n	8026ba4 <remove_free_block+0x28>
            if(!control->sl_bitmap[fl]) {
                control->fl_bitmap &= ~(1U << fl);
            }
        }
    }
}
 8026b9c:	f85d fb04 	ldr.w	pc, [sp], #4
    tlsf_assert(prev && "prev_free field can not be null");
 8026ba0:	e7fe      	b.n	8026ba0 <remove_free_block+0x24>
    tlsf_assert(next && "next_free field can not be null");
 8026ba2:	e7fe      	b.n	8026ba2 <remove_free_block+0x26>
        control->blocks[fl][sl] = next;
 8026ba4:	eb0c 134e 	add.w	r3, ip, lr, lsl #5
 8026ba8:	330c      	adds	r3, #12
 8026baa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if(next == &control->block_null) {
 8026bae:	4290      	cmp	r0, r2
 8026bb0:	d1f4      	bne.n	8026b9c <remove_free_block+0x20>
            control->sl_bitmap[fl] &= ~(1U << sl);
 8026bb2:	f10e 0204 	add.w	r2, lr, #4
 8026bb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8026bba:	6853      	ldr	r3, [r2, #4]
 8026bbc:	2101      	movs	r1, #1
 8026bbe:	fa01 f10c 	lsl.w	r1, r1, ip
 8026bc2:	ea23 0301 	bic.w	r3, r3, r1
 8026bc6:	6053      	str	r3, [r2, #4]
            if(!control->sl_bitmap[fl]) {
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	d1e7      	bne.n	8026b9c <remove_free_block+0x20>
                control->fl_bitmap &= ~(1U << fl);
 8026bcc:	6903      	ldr	r3, [r0, #16]
 8026bce:	2201      	movs	r2, #1
 8026bd0:	fa02 f20e 	lsl.w	r2, r2, lr
 8026bd4:	ea23 0302 	bic.w	r3, r3, r2
 8026bd8:	6103      	str	r3, [r0, #16]
}
 8026bda:	e7df      	b.n	8026b9c <remove_free_block+0x20>

08026bdc <insert_free_block>:

/* Insert a free block into the free block list. */
static void insert_free_block(control_t * control, block_header_t * block, int fl, int sl)
{
 8026bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026be0:	4616      	mov	r6, r2
 8026be2:	461f      	mov	r7, r3
    block_header_t * current = control->blocks[fl][sl];
 8026be4:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 8026be8:	320c      	adds	r2, #12
 8026bea:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    tlsf_assert(current && "free list cannot have a null entry");
 8026bee:	b17b      	cbz	r3, 8026c10 <insert_free_block+0x34>
 8026bf0:	4605      	mov	r5, r0
 8026bf2:	460c      	mov	r4, r1
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8026bf4:	b169      	cbz	r1, 8026c12 <insert_free_block+0x36>
    block->next_free = current;
 8026bf6:	608b      	str	r3, [r1, #8]
    block->prev_free = &control->block_null;
 8026bf8:	60c8      	str	r0, [r1, #12]
    current->prev_free = block;
 8026bfa:	60d9      	str	r1, [r3, #12]

    tlsf_assert(block_to_ptr(block) == align_ptr(block_to_ptr(block), ALIGN_SIZE)
 8026bfc:	4608      	mov	r0, r1
 8026bfe:	f7ff ff5c 	bl	8026aba <block_to_ptr>
 8026c02:	4680      	mov	r8, r0
 8026c04:	2104      	movs	r1, #4
 8026c06:	f7ff ffa2 	bl	8026b4e <align_ptr>
 8026c0a:	4580      	cmp	r8, r0
 8026c0c:	d002      	beq.n	8026c14 <insert_free_block+0x38>
 8026c0e:	e7fe      	b.n	8026c0e <insert_free_block+0x32>
    tlsf_assert(current && "free list cannot have a null entry");
 8026c10:	e7fe      	b.n	8026c10 <insert_free_block+0x34>
    tlsf_assert(block && "cannot insert a null entry into the free list");
 8026c12:	e7fe      	b.n	8026c12 <insert_free_block+0x36>
                && "block not aligned properly");
    /*
    ** Insert the new block at the head of the list, and mark the first-
    ** and second-level bitmaps appropriately.
    */
    control->blocks[fl][sl] = block;
 8026c14:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8026c18:	330c      	adds	r3, #12
 8026c1a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
    control->fl_bitmap |= (1U << fl);
 8026c1e:	692a      	ldr	r2, [r5, #16]
 8026c20:	2301      	movs	r3, #1
 8026c22:	fa03 f106 	lsl.w	r1, r3, r6
 8026c26:	430a      	orrs	r2, r1
 8026c28:	612a      	str	r2, [r5, #16]
    control->sl_bitmap[fl] |= (1U << sl);
 8026c2a:	3604      	adds	r6, #4
 8026c2c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8026c30:	686a      	ldr	r2, [r5, #4]
 8026c32:	40bb      	lsls	r3, r7
 8026c34:	431a      	orrs	r2, r3
 8026c36:	606a      	str	r2, [r5, #4]
}
 8026c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08026c3c <block_can_split>:
    mapping_insert(block_size(block), &fl, &sl);
    insert_free_block(control, block, fl, sl);
}

static int block_can_split(block_header_t * block, size_t size)
{
 8026c3c:	b510      	push	{r4, lr}
 8026c3e:	460c      	mov	r4, r1
    return block_size(block) >= sizeof(block_header_t) + size;
 8026c40:	f7ff ff0c 	bl	8026a5c <block_size>
 8026c44:	3410      	adds	r4, #16
}
 8026c46:	42a0      	cmp	r0, r4
 8026c48:	bf34      	ite	cc
 8026c4a:	2000      	movcc	r0, #0
 8026c4c:	2001      	movcs	r0, #1
 8026c4e:	bd10      	pop	{r4, pc}

08026c50 <block_split>:

/* Split a block into two, the second of which is free. */
static block_header_t * block_split(block_header_t * block, size_t size)
{
 8026c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c54:	4607      	mov	r7, r0
 8026c56:	460c      	mov	r4, r1
    /* Calculate the amount of space left in the remaining block. */
    block_header_t * remaining =
        offset_to_block(block_to_ptr(block), size - block_header_overhead);
 8026c58:	f7ff ff2f 	bl	8026aba <block_to_ptr>
 8026c5c:	1f21      	subs	r1, r4, #4
 8026c5e:	f7ff ff2e 	bl	8026abe <offset_to_block>
 8026c62:	4605      	mov	r5, r0

    const size_t remain_size = block_size(block) - (size + block_header_overhead);
 8026c64:	4638      	mov	r0, r7
 8026c66:	f7ff fef9 	bl	8026a5c <block_size>
 8026c6a:	4606      	mov	r6, r0
 8026c6c:	1b03      	subs	r3, r0, r4
 8026c6e:	f1a3 0904 	sub.w	r9, r3, #4

    tlsf_assert(block_to_ptr(remaining) == align_ptr(block_to_ptr(remaining), ALIGN_SIZE)
 8026c72:	4628      	mov	r0, r5
 8026c74:	f7ff ff21 	bl	8026aba <block_to_ptr>
 8026c78:	4680      	mov	r8, r0
 8026c7a:	2104      	movs	r1, #4
 8026c7c:	f7ff ff67 	bl	8026b4e <align_ptr>
 8026c80:	4580      	cmp	r8, r0
 8026c82:	d000      	beq.n	8026c86 <block_split+0x36>
 8026c84:	e7fe      	b.n	8026c84 <block_split+0x34>
                && "remaining block not aligned properly");

    tlsf_assert(block_size(block) == remain_size + size + block_header_overhead);
 8026c86:	eb04 0309 	add.w	r3, r4, r9
 8026c8a:	3304      	adds	r3, #4
 8026c8c:	429e      	cmp	r6, r3
 8026c8e:	d000      	beq.n	8026c92 <block_split+0x42>
 8026c90:	e7fe      	b.n	8026c90 <block_split+0x40>
    block_set_size(remaining, remain_size);
 8026c92:	4649      	mov	r1, r9
 8026c94:	4628      	mov	r0, r5
 8026c96:	f7ff fee5 	bl	8026a64 <block_set_size>
    tlsf_assert(block_size(remaining) >= block_size_min && "block split with invalid size");
 8026c9a:	4628      	mov	r0, r5
 8026c9c:	f7ff fede 	bl	8026a5c <block_size>
 8026ca0:	280b      	cmp	r0, #11
 8026ca2:	d800      	bhi.n	8026ca6 <block_split+0x56>
 8026ca4:	e7fe      	b.n	8026ca4 <block_split+0x54>

    block_set_size(block, size);
 8026ca6:	4621      	mov	r1, r4
 8026ca8:	4638      	mov	r0, r7
 8026caa:	f7ff fedb 	bl	8026a64 <block_set_size>
    block_mark_as_free(remaining);
 8026cae:	4628      	mov	r0, r5
 8026cb0:	f7ff ff29 	bl	8026b06 <block_mark_as_free>

    return remaining;
}
 8026cb4:	4628      	mov	r0, r5
 8026cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08026cba <block_absorb>:

/* Absorb a free block's storage into an adjacent previous free block. */
static block_header_t * block_absorb(block_header_t * prev, block_header_t * block)
{
 8026cba:	b538      	push	{r3, r4, r5, lr}
 8026cbc:	4604      	mov	r4, r0
 8026cbe:	460d      	mov	r5, r1
    tlsf_assert(!block_is_last(prev) && "previous block can't be last");
 8026cc0:	f7ff fed6 	bl	8026a70 <block_is_last>
 8026cc4:	b100      	cbz	r0, 8026cc8 <block_absorb+0xe>
 8026cc6:	e7fe      	b.n	8026cc6 <block_absorb+0xc>
    /* Note: Leaves flags untouched. */
    prev->size += block_size(block) + block_header_overhead;
 8026cc8:	4628      	mov	r0, r5
 8026cca:	f7ff fec7 	bl	8026a5c <block_size>
 8026cce:	1d02      	adds	r2, r0, #4
 8026cd0:	6863      	ldr	r3, [r4, #4]
 8026cd2:	4413      	add	r3, r2
 8026cd4:	6063      	str	r3, [r4, #4]
    block_link_next(prev);
 8026cd6:	4620      	mov	r0, r4
 8026cd8:	f7ff ff0f 	bl	8026afa <block_link_next>
    return prev;
}
 8026cdc:	4620      	mov	r0, r4
 8026cde:	bd38      	pop	{r3, r4, r5, pc}

08026ce0 <control_constructor>:
/* Clear structure and point all empty lists at the null block. */
static void control_constructor(control_t * control)
{
    int i, j;

    control->block_null.next_free = &control->block_null;
 8026ce0:	6080      	str	r0, [r0, #8]
    control->block_null.prev_free = &control->block_null;
 8026ce2:	60c0      	str	r0, [r0, #12]

    control->fl_bitmap = 0;
 8026ce4:	2100      	movs	r1, #0
 8026ce6:	6101      	str	r1, [r0, #16]
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8026ce8:	e008      	b.n	8026cfc <control_constructor+0x1c>
        control->sl_bitmap[i] = 0;
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
            control->blocks[i][j] = &control->block_null;
 8026cea:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8026cee:	320c      	adds	r2, #12
 8026cf0:	f840 0022 	str.w	r0, [r0, r2, lsl #2]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8026cf4:	3301      	adds	r3, #1
 8026cf6:	2b1f      	cmp	r3, #31
 8026cf8:	ddf7      	ble.n	8026cea <control_constructor+0xa>
    for(i = 0; i < FL_INDEX_COUNT; ++i) {
 8026cfa:	3101      	adds	r1, #1
 8026cfc:	2906      	cmp	r1, #6
 8026cfe:	dc05      	bgt.n	8026d0c <control_constructor+0x2c>
        control->sl_bitmap[i] = 0;
 8026d00:	1d0a      	adds	r2, r1, #4
 8026d02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8026d06:	2300      	movs	r3, #0
 8026d08:	6053      	str	r3, [r2, #4]
        for(j = 0; j < SL_INDEX_COUNT; ++j) {
 8026d0a:	e7f4      	b.n	8026cf6 <control_constructor+0x16>
        }
    }
}
 8026d0c:	4770      	bx	lr

08026d0e <default_walker>:

static void default_walker(void * ptr, size_t size, int used, void * user)
{
    LV_UNUSED(user);
    printf("\t%p %s size: %x (%p)\n", ptr, used ? "used" : "free", (unsigned int)size, (void *)block_from_ptr(ptr));
}
 8026d0e:	4770      	bx	lr

08026d10 <tlsf_fls>:
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8026d10:	b128      	cbz	r0, 8026d1e <tlsf_fls+0xe>
 8026d12:	fab0 f080 	clz	r0, r0
 8026d16:	f1c0 0020 	rsb	r0, r0, #32
}
 8026d1a:	3801      	subs	r0, #1
 8026d1c:	4770      	bx	lr
    const int bit = word ? 32 - __builtin_clz(word) : 0;
 8026d1e:	2000      	movs	r0, #0
 8026d20:	e7fb      	b.n	8026d1a <tlsf_fls+0xa>

08026d22 <mapping_insert>:
{
 8026d22:	b570      	push	{r4, r5, r6, lr}
 8026d24:	4604      	mov	r4, r0
 8026d26:	460d      	mov	r5, r1
 8026d28:	4616      	mov	r6, r2
    if(size < SMALL_BLOCK_SIZE) {
 8026d2a:	287f      	cmp	r0, #127	@ 0x7f
 8026d2c:	d809      	bhi.n	8026d42 <mapping_insert+0x20>
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8026d2e:	4603      	mov	r3, r0
 8026d30:	2800      	cmp	r0, #0
 8026d32:	db04      	blt.n	8026d3e <mapping_insert+0x1c>
 8026d34:	109c      	asrs	r4, r3, #2
        fl = 0;
 8026d36:	2000      	movs	r0, #0
    *fli = fl;
 8026d38:	6028      	str	r0, [r5, #0]
    *sli = sl;
 8026d3a:	6034      	str	r4, [r6, #0]
}
 8026d3c:	bd70      	pop	{r4, r5, r6, pc}
        sl = tlsf_cast(int, size) / (SMALL_BLOCK_SIZE / SL_INDEX_COUNT);
 8026d3e:	1cc3      	adds	r3, r0, #3
 8026d40:	e7f8      	b.n	8026d34 <mapping_insert+0x12>
        fl = tlsf_fls_sizet(size);
 8026d42:	f7ff ffe5 	bl	8026d10 <tlsf_fls>
        sl = tlsf_cast(int, size >> (fl - SL_INDEX_COUNT_LOG2)) ^ (1 << SL_INDEX_COUNT_LOG2);
 8026d46:	1f43      	subs	r3, r0, #5
 8026d48:	40dc      	lsrs	r4, r3
 8026d4a:	f084 0420 	eor.w	r4, r4, #32
        fl -= (FL_INDEX_SHIFT - 1);
 8026d4e:	3806      	subs	r0, #6
 8026d50:	e7f2      	b.n	8026d38 <mapping_insert+0x16>

08026d52 <block_insert>:
{
 8026d52:	b530      	push	{r4, r5, lr}
 8026d54:	b083      	sub	sp, #12
 8026d56:	4605      	mov	r5, r0
 8026d58:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 8026d5a:	4608      	mov	r0, r1
 8026d5c:	f7ff fe7e 	bl	8026a5c <block_size>
 8026d60:	466a      	mov	r2, sp
 8026d62:	a901      	add	r1, sp, #4
 8026d64:	f7ff ffdd 	bl	8026d22 <mapping_insert>
    insert_free_block(control, block, fl, sl);
 8026d68:	9b00      	ldr	r3, [sp, #0]
 8026d6a:	9a01      	ldr	r2, [sp, #4]
 8026d6c:	4621      	mov	r1, r4
 8026d6e:	4628      	mov	r0, r5
 8026d70:	f7ff ff34 	bl	8026bdc <insert_free_block>
}
 8026d74:	b003      	add	sp, #12
 8026d76:	bd30      	pop	{r4, r5, pc}

08026d78 <block_trim_free>:
{
 8026d78:	b570      	push	{r4, r5, r6, lr}
 8026d7a:	4606      	mov	r6, r0
 8026d7c:	460c      	mov	r4, r1
 8026d7e:	4615      	mov	r5, r2
    tlsf_assert(block_is_free(block) && "block must be free");
 8026d80:	4608      	mov	r0, r1
 8026d82:	f7ff fe7c 	bl	8026a7e <block_is_free>
 8026d86:	b900      	cbnz	r0, 8026d8a <block_trim_free+0x12>
 8026d88:	e7fe      	b.n	8026d88 <block_trim_free+0x10>
    if(block_can_split(block, size)) {
 8026d8a:	4629      	mov	r1, r5
 8026d8c:	4620      	mov	r0, r4
 8026d8e:	f7ff ff55 	bl	8026c3c <block_can_split>
 8026d92:	b900      	cbnz	r0, 8026d96 <block_trim_free+0x1e>
}
 8026d94:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 8026d96:	4629      	mov	r1, r5
 8026d98:	4620      	mov	r0, r4
 8026d9a:	f7ff ff59 	bl	8026c50 <block_split>
 8026d9e:	4605      	mov	r5, r0
        block_link_next(block);
 8026da0:	4620      	mov	r0, r4
 8026da2:	f7ff feaa 	bl	8026afa <block_link_next>
        block_set_prev_free(remaining_block);
 8026da6:	4628      	mov	r0, r5
 8026da8:	f7ff fe7b 	bl	8026aa2 <block_set_prev_free>
        block_insert(control, remaining_block);
 8026dac:	4629      	mov	r1, r5
 8026dae:	4630      	mov	r0, r6
 8026db0:	f7ff ffcf 	bl	8026d52 <block_insert>
}
 8026db4:	e7ee      	b.n	8026d94 <block_trim_free+0x1c>

08026db6 <block_prepare_used>:
{
 8026db6:	b510      	push	{r4, lr}
    if(block) {
 8026db8:	460c      	mov	r4, r1
 8026dba:	b151      	cbz	r1, 8026dd2 <block_prepare_used+0x1c>
        tlsf_assert(size && "size must be non-zero");
 8026dbc:	b902      	cbnz	r2, 8026dc0 <block_prepare_used+0xa>
 8026dbe:	e7fe      	b.n	8026dbe <block_prepare_used+0x8>
        block_trim_free(control, block, size);
 8026dc0:	f7ff ffda 	bl	8026d78 <block_trim_free>
        block_mark_as_used(block);
 8026dc4:	4620      	mov	r0, r4
 8026dc6:	f7ff fea8 	bl	8026b1a <block_mark_as_used>
        p = block_to_ptr(block);
 8026dca:	4620      	mov	r0, r4
 8026dcc:	f7ff fe75 	bl	8026aba <block_to_ptr>
}
 8026dd0:	bd10      	pop	{r4, pc}
    void * p = 0;
 8026dd2:	4608      	mov	r0, r1
    return p;
 8026dd4:	e7fc      	b.n	8026dd0 <block_prepare_used+0x1a>

08026dd6 <block_remove>:
{
 8026dd6:	b530      	push	{r4, r5, lr}
 8026dd8:	b083      	sub	sp, #12
 8026dda:	4605      	mov	r5, r0
 8026ddc:	460c      	mov	r4, r1
    mapping_insert(block_size(block), &fl, &sl);
 8026dde:	4608      	mov	r0, r1
 8026de0:	f7ff fe3c 	bl	8026a5c <block_size>
 8026de4:	466a      	mov	r2, sp
 8026de6:	a901      	add	r1, sp, #4
 8026de8:	f7ff ff9b 	bl	8026d22 <mapping_insert>
    remove_free_block(control, block, fl, sl);
 8026dec:	9b00      	ldr	r3, [sp, #0]
 8026dee:	9a01      	ldr	r2, [sp, #4]
 8026df0:	4621      	mov	r1, r4
 8026df2:	4628      	mov	r0, r5
 8026df4:	f7ff fec2 	bl	8026b7c <remove_free_block>
}
 8026df8:	b003      	add	sp, #12
 8026dfa:	bd30      	pop	{r4, r5, pc}

08026dfc <block_merge_prev>:
{
 8026dfc:	b570      	push	{r4, r5, r6, lr}
 8026dfe:	4605      	mov	r5, r0
 8026e00:	460c      	mov	r4, r1
    if(block_is_prev_free(block)) {
 8026e02:	4608      	mov	r0, r1
 8026e04:	f7ff fe49 	bl	8026a9a <block_is_prev_free>
 8026e08:	b908      	cbnz	r0, 8026e0e <block_merge_prev+0x12>
}
 8026e0a:	4620      	mov	r0, r4
 8026e0c:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * prev = block_prev(block);
 8026e0e:	4620      	mov	r0, r4
 8026e10:	f7ff fe57 	bl	8026ac2 <block_prev>
        tlsf_assert(prev && "prev physical block can't be null");
 8026e14:	4606      	mov	r6, r0
 8026e16:	b118      	cbz	r0, 8026e20 <block_merge_prev+0x24>
        tlsf_assert(block_is_free(prev) && "prev block is not free though marked as such");
 8026e18:	f7ff fe31 	bl	8026a7e <block_is_free>
 8026e1c:	b908      	cbnz	r0, 8026e22 <block_merge_prev+0x26>
 8026e1e:	e7fe      	b.n	8026e1e <block_merge_prev+0x22>
        tlsf_assert(prev && "prev physical block can't be null");
 8026e20:	e7fe      	b.n	8026e20 <block_merge_prev+0x24>
        block_remove(control, prev);
 8026e22:	4631      	mov	r1, r6
 8026e24:	4628      	mov	r0, r5
 8026e26:	f7ff ffd6 	bl	8026dd6 <block_remove>
        block = block_absorb(prev, block);
 8026e2a:	4621      	mov	r1, r4
 8026e2c:	4630      	mov	r0, r6
 8026e2e:	f7ff ff44 	bl	8026cba <block_absorb>
 8026e32:	4604      	mov	r4, r0
 8026e34:	e7e9      	b.n	8026e0a <block_merge_prev+0xe>

08026e36 <block_merge_next>:
{
 8026e36:	b570      	push	{r4, r5, r6, lr}
 8026e38:	4605      	mov	r5, r0
 8026e3a:	460c      	mov	r4, r1
    block_header_t * next = block_next(block);
 8026e3c:	4608      	mov	r0, r1
 8026e3e:	f7ff fe48 	bl	8026ad2 <block_next>
    tlsf_assert(next && "next physical block can't be null");
 8026e42:	b140      	cbz	r0, 8026e56 <block_merge_next+0x20>
 8026e44:	4606      	mov	r6, r0
    if(block_is_free(next)) {
 8026e46:	f7ff fe1a 	bl	8026a7e <block_is_free>
 8026e4a:	b170      	cbz	r0, 8026e6a <block_merge_next+0x34>
        tlsf_assert(!block_is_last(block) && "previous block can't be last");
 8026e4c:	4620      	mov	r0, r4
 8026e4e:	f7ff fe0f 	bl	8026a70 <block_is_last>
 8026e52:	b108      	cbz	r0, 8026e58 <block_merge_next+0x22>
 8026e54:	e7fe      	b.n	8026e54 <block_merge_next+0x1e>
    tlsf_assert(next && "next physical block can't be null");
 8026e56:	e7fe      	b.n	8026e56 <block_merge_next+0x20>
        block_remove(control, next);
 8026e58:	4631      	mov	r1, r6
 8026e5a:	4628      	mov	r0, r5
 8026e5c:	f7ff ffbb 	bl	8026dd6 <block_remove>
        block = block_absorb(block, next);
 8026e60:	4631      	mov	r1, r6
 8026e62:	4620      	mov	r0, r4
 8026e64:	f7ff ff29 	bl	8026cba <block_absorb>
 8026e68:	4604      	mov	r4, r0
}
 8026e6a:	4620      	mov	r0, r4
 8026e6c:	bd70      	pop	{r4, r5, r6, pc}

08026e6e <block_trim_used>:
{
 8026e6e:	b570      	push	{r4, r5, r6, lr}
 8026e70:	4606      	mov	r6, r0
 8026e72:	460c      	mov	r4, r1
 8026e74:	4615      	mov	r5, r2
    tlsf_assert(!block_is_free(block) && "block must be used");
 8026e76:	4608      	mov	r0, r1
 8026e78:	f7ff fe01 	bl	8026a7e <block_is_free>
 8026e7c:	b100      	cbz	r0, 8026e80 <block_trim_used+0x12>
 8026e7e:	e7fe      	b.n	8026e7e <block_trim_used+0x10>
    if(block_can_split(block, size)) {
 8026e80:	4629      	mov	r1, r5
 8026e82:	4620      	mov	r0, r4
 8026e84:	f7ff feda 	bl	8026c3c <block_can_split>
 8026e88:	b900      	cbnz	r0, 8026e8c <block_trim_used+0x1e>
}
 8026e8a:	bd70      	pop	{r4, r5, r6, pc}
        block_header_t * remaining_block = block_split(block, size);
 8026e8c:	4629      	mov	r1, r5
 8026e8e:	4620      	mov	r0, r4
 8026e90:	f7ff fede 	bl	8026c50 <block_split>
 8026e94:	4604      	mov	r4, r0
        block_set_prev_used(remaining_block);
 8026e96:	f7ff fe09 	bl	8026aac <block_set_prev_used>
        remaining_block = block_merge_next(control, remaining_block);
 8026e9a:	4621      	mov	r1, r4
 8026e9c:	4630      	mov	r0, r6
 8026e9e:	f7ff ffca 	bl	8026e36 <block_merge_next>
 8026ea2:	4601      	mov	r1, r0
        block_insert(control, remaining_block);
 8026ea4:	4630      	mov	r0, r6
 8026ea6:	f7ff ff54 	bl	8026d52 <block_insert>
}
 8026eaa:	e7ee      	b.n	8026e8a <block_trim_used+0x1c>

08026eac <mapping_search>:
{
 8026eac:	b570      	push	{r4, r5, r6, lr}
 8026eae:	4604      	mov	r4, r0
 8026eb0:	460d      	mov	r5, r1
 8026eb2:	4616      	mov	r6, r2
    if(size >= SMALL_BLOCK_SIZE) {
 8026eb4:	287f      	cmp	r0, #127	@ 0x7f
 8026eb6:	d906      	bls.n	8026ec6 <mapping_search+0x1a>
        const size_t round = (1 << (tlsf_fls_sizet(size) - SL_INDEX_COUNT_LOG2)) - 1;
 8026eb8:	f7ff ff2a 	bl	8026d10 <tlsf_fls>
 8026ebc:	3805      	subs	r0, #5
 8026ebe:	2301      	movs	r3, #1
 8026ec0:	4083      	lsls	r3, r0
 8026ec2:	3b01      	subs	r3, #1
        size += round;
 8026ec4:	441c      	add	r4, r3
    mapping_insert(size, fli, sli);
 8026ec6:	4632      	mov	r2, r6
 8026ec8:	4629      	mov	r1, r5
 8026eca:	4620      	mov	r0, r4
 8026ecc:	f7ff ff29 	bl	8026d22 <mapping_insert>
}
 8026ed0:	bd70      	pop	{r4, r5, r6, pc}

08026ed2 <tlsf_ffs>:
{
 8026ed2:	4603      	mov	r3, r0
    return __builtin_ffs(word) - 1;
 8026ed4:	fa90 f0a0 	rbit	r0, r0
 8026ed8:	fab0 f080 	clz	r0, r0
 8026edc:	b90b      	cbnz	r3, 8026ee2 <tlsf_ffs+0x10>
 8026ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8026ee2:	4770      	bx	lr

08026ee4 <search_suitable_block>:
{
 8026ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ee6:	4605      	mov	r5, r0
 8026ee8:	4616      	mov	r6, r2
    int fl = *fli;
 8026eea:	680c      	ldr	r4, [r1, #0]
    int sl = *sli;
 8026eec:	6812      	ldr	r2, [r2, #0]
    unsigned int sl_map = control->sl_bitmap[fl] & (~0U << sl);
 8026eee:	1d23      	adds	r3, r4, #4
 8026ef0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8026ef4:	6858      	ldr	r0, [r3, #4]
 8026ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026efa:	4093      	lsls	r3, r2
    if(!sl_map) {
 8026efc:	4018      	ands	r0, r3
 8026efe:	d111      	bne.n	8026f24 <search_suitable_block+0x40>
 8026f00:	460f      	mov	r7, r1
        const unsigned int fl_map = control->fl_bitmap & (~0U << (fl + 1));
 8026f02:	6928      	ldr	r0, [r5, #16]
 8026f04:	3401      	adds	r4, #1
 8026f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8026f0a:	40a3      	lsls	r3, r4
        if(!fl_map) {
 8026f0c:	4018      	ands	r0, r3
 8026f0e:	d012      	beq.n	8026f36 <search_suitable_block+0x52>
        fl = tlsf_ffs(fl_map);
 8026f10:	f7ff ffdf 	bl	8026ed2 <tlsf_ffs>
 8026f14:	4604      	mov	r4, r0
        *fli = fl;
 8026f16:	6038      	str	r0, [r7, #0]
        sl_map = control->sl_bitmap[fl];
 8026f18:	1d03      	adds	r3, r0, #4
 8026f1a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8026f1e:	6858      	ldr	r0, [r3, #4]
    tlsf_assert(sl_map && "internal error - second level bitmap is null");
 8026f20:	b900      	cbnz	r0, 8026f24 <search_suitable_block+0x40>
 8026f22:	e7fe      	b.n	8026f22 <search_suitable_block+0x3e>
    sl = tlsf_ffs(sl_map);
 8026f24:	f7ff ffd5 	bl	8026ed2 <tlsf_ffs>
    *sli = sl;
 8026f28:	6030      	str	r0, [r6, #0]
    return control->blocks[fl][sl];
 8026f2a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 8026f2e:	330c      	adds	r3, #12
 8026f30:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
}
 8026f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
 8026f36:	2000      	movs	r0, #0
 8026f38:	e7fc      	b.n	8026f34 <search_suitable_block+0x50>

08026f3a <block_locate_free>:
{
 8026f3a:	b570      	push	{r4, r5, r6, lr}
 8026f3c:	b082      	sub	sp, #8
    int fl = 0, sl = 0;
 8026f3e:	2300      	movs	r3, #0
 8026f40:	9301      	str	r3, [sp, #4]
 8026f42:	9300      	str	r3, [sp, #0]
    if(size) {
 8026f44:	b1e1      	cbz	r1, 8026f80 <block_locate_free+0x46>
 8026f46:	4604      	mov	r4, r0
 8026f48:	460e      	mov	r6, r1
        mapping_search(size, &fl, &sl);
 8026f4a:	466a      	mov	r2, sp
 8026f4c:	a901      	add	r1, sp, #4
 8026f4e:	4630      	mov	r0, r6
 8026f50:	f7ff ffac 	bl	8026eac <mapping_search>
        if(fl < FL_INDEX_COUNT) {
 8026f54:	9b01      	ldr	r3, [sp, #4]
 8026f56:	2b06      	cmp	r3, #6
 8026f58:	dc16      	bgt.n	8026f88 <block_locate_free+0x4e>
            block = search_suitable_block(control, &fl, &sl);
 8026f5a:	466a      	mov	r2, sp
 8026f5c:	a901      	add	r1, sp, #4
 8026f5e:	4620      	mov	r0, r4
 8026f60:	f7ff ffc0 	bl	8026ee4 <search_suitable_block>
    if(block) {
 8026f64:	4605      	mov	r5, r0
 8026f66:	b160      	cbz	r0, 8026f82 <block_locate_free+0x48>
        tlsf_assert(block_size(block) >= size);
 8026f68:	f7ff fd78 	bl	8026a5c <block_size>
 8026f6c:	42b0      	cmp	r0, r6
 8026f6e:	d200      	bcs.n	8026f72 <block_locate_free+0x38>
 8026f70:	e7fe      	b.n	8026f70 <block_locate_free+0x36>
        remove_free_block(control, block, fl, sl);
 8026f72:	9b00      	ldr	r3, [sp, #0]
 8026f74:	9a01      	ldr	r2, [sp, #4]
 8026f76:	4629      	mov	r1, r5
 8026f78:	4620      	mov	r0, r4
 8026f7a:	f7ff fdff 	bl	8026b7c <remove_free_block>
 8026f7e:	e000      	b.n	8026f82 <block_locate_free+0x48>
    block_header_t * block = 0;
 8026f80:	2500      	movs	r5, #0
}
 8026f82:	4628      	mov	r0, r5
 8026f84:	b002      	add	sp, #8
 8026f86:	bd70      	pop	{r4, r5, r6, pc}
    block_header_t * block = 0;
 8026f88:	2500      	movs	r5, #0
    return block;
 8026f8a:	e7fa      	b.n	8026f82 <block_locate_free+0x48>

08026f8c <lv_tlsf_walk_pool>:

void lv_tlsf_walk_pool(lv_pool_t pool, lv_tlsf_walker walker, void * user)
{
 8026f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026f90:	4617      	mov	r7, r2
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 8026f92:	4688      	mov	r8, r1
 8026f94:	b129      	cbz	r1, 8026fa2 <lv_tlsf_walk_pool+0x16>
    block_header_t * block =
        offset_to_block(pool, -(int)block_header_overhead);
 8026f96:	f06f 0103 	mvn.w	r1, #3
 8026f9a:	f7ff fd90 	bl	8026abe <offset_to_block>
 8026f9e:	4604      	mov	r4, r0

    while(block && !block_is_last(block)) {
 8026fa0:	e018      	b.n	8026fd4 <lv_tlsf_walk_pool+0x48>
    lv_tlsf_walker pool_walker = walker ? walker : default_walker;
 8026fa2:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8026fe4 <lv_tlsf_walk_pool+0x58>
 8026fa6:	e7f6      	b.n	8026f96 <lv_tlsf_walk_pool+0xa>
        pool_walker(
 8026fa8:	4620      	mov	r0, r4
 8026faa:	f7ff fd86 	bl	8026aba <block_to_ptr>
 8026fae:	4605      	mov	r5, r0
 8026fb0:	4620      	mov	r0, r4
 8026fb2:	f7ff fd53 	bl	8026a5c <block_size>
 8026fb6:	4606      	mov	r6, r0
            block_to_ptr(block),
            block_size(block),
            !block_is_free(block),
 8026fb8:	4620      	mov	r0, r4
 8026fba:	f7ff fd60 	bl	8026a7e <block_is_free>
        pool_walker(
 8026fbe:	463b      	mov	r3, r7
 8026fc0:	fab0 f280 	clz	r2, r0
 8026fc4:	0952      	lsrs	r2, r2, #5
 8026fc6:	4631      	mov	r1, r6
 8026fc8:	4628      	mov	r0, r5
 8026fca:	47c0      	blx	r8
            user);
        block = block_next(block);
 8026fcc:	4620      	mov	r0, r4
 8026fce:	f7ff fd80 	bl	8026ad2 <block_next>
 8026fd2:	4604      	mov	r4, r0
    while(block && !block_is_last(block)) {
 8026fd4:	b124      	cbz	r4, 8026fe0 <lv_tlsf_walk_pool+0x54>
 8026fd6:	4620      	mov	r0, r4
 8026fd8:	f7ff fd4a 	bl	8026a70 <block_is_last>
 8026fdc:	2800      	cmp	r0, #0
 8026fde:	d0e3      	beq.n	8026fa8 <lv_tlsf_walk_pool+0x1c>
    }
}
 8026fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026fe4:	08026d0f 	.word	0x08026d0f

08026fe8 <lv_tlsf_size>:
** lv_tlsf_create, equal to the size of a control_t
*/
size_t lv_tlsf_size(void)
{
    return sizeof(control_t);
}
 8026fe8:	f44f 706c 	mov.w	r0, #944	@ 0x3b0
 8026fec:	4770      	bx	lr

08026fee <lv_tlsf_pool_overhead>:
** sentinel block.
*/
size_t lv_tlsf_pool_overhead(void)
{
    return 2 * block_header_overhead;
}
 8026fee:	2008      	movs	r0, #8
 8026ff0:	4770      	bx	lr

08026ff2 <lv_tlsf_add_pool>:
{
    return block_header_overhead;
}

lv_pool_t lv_tlsf_add_pool(lv_tlsf_t tlsf, void * mem, size_t bytes)
{
 8026ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026ff4:	4607      	mov	r7, r0
 8026ff6:	460c      	mov	r4, r1
 8026ff8:	4615      	mov	r5, r2
    block_header_t * block;
    block_header_t * next;

    const size_t pool_overhead = lv_tlsf_pool_overhead();
 8026ffa:	f7ff fff8 	bl	8026fee <lv_tlsf_pool_overhead>
    const size_t pool_bytes = align_down(bytes - pool_overhead, ALIGN_SIZE);
 8026ffe:	2104      	movs	r1, #4
 8027000:	1a28      	subs	r0, r5, r0
 8027002:	f7ff fd9d 	bl	8026b40 <align_down>

    if(((ptrdiff_t)mem % ALIGN_SIZE) != 0) {
 8027006:	f014 0f03 	tst.w	r4, #3
 802700a:	d128      	bne.n	802705e <lv_tlsf_add_pool+0x6c>
 802700c:	4605      	mov	r5, r0
        printf("lv_tlsf_add_pool: Memory must be aligned by %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    if(pool_bytes < block_size_min || pool_bytes > block_size_max) {
 802700e:	f1a0 020c 	sub.w	r2, r0, #12
 8027012:	f641 73f4 	movw	r3, #8180	@ 0x1ff4
 8027016:	429a      	cmp	r2, r3
 8027018:	d823      	bhi.n	8027062 <lv_tlsf_add_pool+0x70>
    /*
    ** Create the main free block. Offset the start of the block slightly
    ** so that the prev_phys_block field falls outside of the pool -
    ** it will never be used.
    */
    block = offset_to_block(mem, -(tlsfptr_t)block_header_overhead);
 802701a:	f06f 0103 	mvn.w	r1, #3
 802701e:	4620      	mov	r0, r4
 8027020:	f7ff fd4d 	bl	8026abe <offset_to_block>
 8027024:	4606      	mov	r6, r0
    block_set_size(block, pool_bytes);
 8027026:	4629      	mov	r1, r5
 8027028:	f7ff fd1c 	bl	8026a64 <block_set_size>
    block_set_free(block);
 802702c:	4630      	mov	r0, r6
 802702e:	f7ff fd2a 	bl	8026a86 <block_set_free>
    block_set_prev_used(block);
 8027032:	4630      	mov	r0, r6
 8027034:	f7ff fd3a 	bl	8026aac <block_set_prev_used>
    block_insert(tlsf_cast(control_t *, tlsf), block);
 8027038:	4631      	mov	r1, r6
 802703a:	4638      	mov	r0, r7
 802703c:	f7ff fe89 	bl	8026d52 <block_insert>

    /* Split the block to create a zero-size sentinel block. */
    next = block_link_next(block);
 8027040:	4630      	mov	r0, r6
 8027042:	f7ff fd5a 	bl	8026afa <block_link_next>
 8027046:	4605      	mov	r5, r0
    block_set_size(next, 0);
 8027048:	2100      	movs	r1, #0
 802704a:	f7ff fd0b 	bl	8026a64 <block_set_size>
    block_set_used(next);
 802704e:	4628      	mov	r0, r5
 8027050:	f7ff fd1e 	bl	8026a90 <block_set_used>
    block_set_prev_free(next);
 8027054:	4628      	mov	r0, r5
 8027056:	f7ff fd24 	bl	8026aa2 <block_set_prev_free>

    return mem;
 802705a:	4620      	mov	r0, r4
}
 802705c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 802705e:	2000      	movs	r0, #0
 8027060:	e7fc      	b.n	802705c <lv_tlsf_add_pool+0x6a>
        return 0;
 8027062:	2000      	movs	r0, #0
 8027064:	e7fa      	b.n	802705c <lv_tlsf_add_pool+0x6a>

08027066 <lv_tlsf_create>:
    if(test_ffs_fls()) {
        return 0;
    }
#endif

    if(((tlsfptr_t)mem % ALIGN_SIZE) != 0) {
 8027066:	f010 0f03 	tst.w	r0, #3
 802706a:	d105      	bne.n	8027078 <lv_tlsf_create+0x12>
{
 802706c:	b510      	push	{r4, lr}
 802706e:	4604      	mov	r4, r0
        printf("lv_tlsf_create: Memory must be aligned to %u bytes.\n",
               (unsigned int)ALIGN_SIZE);
        return 0;
    }

    control_constructor(tlsf_cast(control_t *, mem));
 8027070:	f7ff fe36 	bl	8026ce0 <control_constructor>

    return tlsf_cast(lv_tlsf_t, mem);
 8027074:	4620      	mov	r0, r4
}
 8027076:	bd10      	pop	{r4, pc}
        return 0;
 8027078:	2000      	movs	r0, #0
}
 802707a:	4770      	bx	lr

0802707c <lv_tlsf_create_with_pool>:

lv_tlsf_t lv_tlsf_create_with_pool(void * mem, size_t bytes)
{
 802707c:	b570      	push	{r4, r5, r6, lr}
 802707e:	4605      	mov	r5, r0
 8027080:	460e      	mov	r6, r1
    lv_tlsf_t tlsf = lv_tlsf_create(mem);
 8027082:	f7ff fff0 	bl	8027066 <lv_tlsf_create>
 8027086:	4604      	mov	r4, r0
    lv_tlsf_add_pool(tlsf, (char *)mem + lv_tlsf_size(), bytes - lv_tlsf_size());
 8027088:	f7ff ffae 	bl	8026fe8 <lv_tlsf_size>
 802708c:	1a32      	subs	r2, r6, r0
 802708e:	1829      	adds	r1, r5, r0
 8027090:	4620      	mov	r0, r4
 8027092:	f7ff ffae 	bl	8026ff2 <lv_tlsf_add_pool>
    return tlsf;
}
 8027096:	4620      	mov	r0, r4
 8027098:	bd70      	pop	{r4, r5, r6, pc}

0802709a <lv_tlsf_get_pool>:
    /* Nothing to do. */
    LV_UNUSED(tlsf);
}

lv_pool_t lv_tlsf_get_pool(lv_tlsf_t tlsf)
{
 802709a:	b510      	push	{r4, lr}
 802709c:	4604      	mov	r4, r0
    return tlsf_cast(lv_pool_t, (char *)tlsf + lv_tlsf_size());
 802709e:	f7ff ffa3 	bl	8026fe8 <lv_tlsf_size>
}
 80270a2:	4420      	add	r0, r4
 80270a4:	bd10      	pop	{r4, pc}

080270a6 <lv_tlsf_malloc>:

void * lv_tlsf_malloc(lv_tlsf_t tlsf, size_t size)
{
 80270a6:	b538      	push	{r3, r4, r5, lr}
 80270a8:	4604      	mov	r4, r0
 80270aa:	4608      	mov	r0, r1
    control_t * control = tlsf_cast(control_t *, tlsf);
    const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 80270ac:	2104      	movs	r1, #4
 80270ae:	f7ff fd57 	bl	8026b60 <adjust_request_size>
 80270b2:	4605      	mov	r5, r0
    block_header_t * block = block_locate_free(control, adjust);
 80270b4:	4601      	mov	r1, r0
 80270b6:	4620      	mov	r0, r4
 80270b8:	f7ff ff3f 	bl	8026f3a <block_locate_free>
 80270bc:	4601      	mov	r1, r0
    return block_prepare_used(control, block, adjust);
 80270be:	462a      	mov	r2, r5
 80270c0:	4620      	mov	r0, r4
 80270c2:	f7ff fe78 	bl	8026db6 <block_prepare_used>
}
 80270c6:	bd38      	pop	{r3, r4, r5, pc}

080270c8 <lv_tlsf_free>:

    return block_prepare_used(control, block, adjust);
}

size_t lv_tlsf_free(lv_tlsf_t tlsf, const void * ptr)
{
 80270c8:	b570      	push	{r4, r5, r6, lr}
    size_t size = 0;
    /* Don't attempt to free a NULL pointer. */
    if(ptr) {
 80270ca:	b1c9      	cbz	r1, 8027100 <lv_tlsf_free+0x38>
 80270cc:	4605      	mov	r5, r0
 80270ce:	4608      	mov	r0, r1
        control_t * control = tlsf_cast(control_t *, tlsf);
        block_header_t * block = block_from_ptr(ptr);
 80270d0:	f7ff fcf1 	bl	8026ab6 <block_from_ptr>
 80270d4:	4604      	mov	r4, r0
        tlsf_assert(!block_is_free(block) && "block already marked as free");
 80270d6:	f7ff fcd2 	bl	8026a7e <block_is_free>
 80270da:	b100      	cbz	r0, 80270de <lv_tlsf_free+0x16>
 80270dc:	e7fe      	b.n	80270dc <lv_tlsf_free+0x14>
        size = block->size;
 80270de:	6866      	ldr	r6, [r4, #4]
        block_mark_as_free(block);
 80270e0:	4620      	mov	r0, r4
 80270e2:	f7ff fd10 	bl	8026b06 <block_mark_as_free>
        block = block_merge_prev(control, block);
 80270e6:	4621      	mov	r1, r4
 80270e8:	4628      	mov	r0, r5
 80270ea:	f7ff fe87 	bl	8026dfc <block_merge_prev>
 80270ee:	4601      	mov	r1, r0
        block = block_merge_next(control, block);
 80270f0:	4628      	mov	r0, r5
 80270f2:	f7ff fea0 	bl	8026e36 <block_merge_next>
 80270f6:	4601      	mov	r1, r0
        block_insert(control, block);
 80270f8:	4628      	mov	r0, r5
 80270fa:	f7ff fe2a 	bl	8026d52 <block_insert>
 80270fe:	e000      	b.n	8027102 <lv_tlsf_free+0x3a>
    size_t size = 0;
 8027100:	2600      	movs	r6, #0
    }

    return size;
}
 8027102:	4630      	mov	r0, r6
 8027104:	bd70      	pop	{r4, r5, r6, pc}

08027106 <lv_tlsf_realloc>:
**   untouched
** - an extended buffer size will leave the newly-allocated area with
**   contents undefined
*/
void * lv_tlsf_realloc(lv_tlsf_t tlsf, void * ptr, size_t size)
{
 8027106:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802710a:	4605      	mov	r5, r0
 802710c:	4614      	mov	r4, r2
    control_t * control = tlsf_cast(control_t *, tlsf);
    void * p = 0;

    /* Zero-size requests are treated as free. */
    if(ptr && size == 0) {
 802710e:	b329      	cbz	r1, 802715c <lv_tlsf_realloc+0x56>
 8027110:	4689      	mov	r9, r1
 8027112:	b1ea      	cbz	r2, 8027150 <lv_tlsf_realloc+0x4a>
    /* Requests with NULL pointers are treated as malloc. */
    else if(!ptr) {
        p = lv_tlsf_malloc(tlsf, size);
    }
    else {
        block_header_t * block = block_from_ptr(ptr);
 8027114:	4608      	mov	r0, r1
 8027116:	f7ff fcce 	bl	8026ab6 <block_from_ptr>
 802711a:	4607      	mov	r7, r0
        block_header_t * next = block_next(block);
 802711c:	f7ff fcd9 	bl	8026ad2 <block_next>
 8027120:	4682      	mov	sl, r0

        const size_t cursize = block_size(block);
 8027122:	4638      	mov	r0, r7
 8027124:	f7ff fc9a 	bl	8026a5c <block_size>
 8027128:	4606      	mov	r6, r0
        const size_t combined = cursize + block_size(next) + block_header_overhead;
 802712a:	4650      	mov	r0, sl
 802712c:	f7ff fc96 	bl	8026a5c <block_size>
 8027130:	1983      	adds	r3, r0, r6
 8027132:	f103 0b04 	add.w	fp, r3, #4
        const size_t adjust = adjust_request_size(size, ALIGN_SIZE);
 8027136:	2104      	movs	r1, #4
 8027138:	4620      	mov	r0, r4
 802713a:	f7ff fd11 	bl	8026b60 <adjust_request_size>
 802713e:	4680      	mov	r8, r0
        if(size > cursize && adjust == 0) {
 8027140:	42b4      	cmp	r4, r6
 8027142:	d900      	bls.n	8027146 <lv_tlsf_realloc+0x40>
 8027144:	b3d8      	cbz	r0, 80271be <lv_tlsf_realloc+0xb8>
            /* The request is probably too large, fail */
            return NULL;
        }

        tlsf_assert(!block_is_free(block) && "block already marked as free");
 8027146:	4638      	mov	r0, r7
 8027148:	f7ff fc99 	bl	8026a7e <block_is_free>
 802714c:	b158      	cbz	r0, 8027166 <lv_tlsf_realloc+0x60>
 802714e:	e7fe      	b.n	802714e <lv_tlsf_realloc+0x48>
        lv_tlsf_free(tlsf, ptr);
 8027150:	f7ff ffba 	bl	80270c8 <lv_tlsf_free>
    void * p = 0;
 8027154:	2700      	movs	r7, #0
            p = ptr;
        }
    }

    return p;
}
 8027156:	4638      	mov	r0, r7
 8027158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        p = lv_tlsf_malloc(tlsf, size);
 802715c:	4611      	mov	r1, r2
 802715e:	f7ff ffa2 	bl	80270a6 <lv_tlsf_malloc>
 8027162:	4607      	mov	r7, r0
 8027164:	e7f7      	b.n	8027156 <lv_tlsf_realloc+0x50>
        if(adjust > cursize && (!block_is_free(next) || adjust > combined)) {
 8027166:	4546      	cmp	r6, r8
 8027168:	d218      	bcs.n	802719c <lv_tlsf_realloc+0x96>
 802716a:	4650      	mov	r0, sl
 802716c:	f7ff fc87 	bl	8026a7e <block_is_free>
 8027170:	b108      	cbz	r0, 8027176 <lv_tlsf_realloc+0x70>
 8027172:	45c3      	cmp	fp, r8
 8027174:	d212      	bcs.n	802719c <lv_tlsf_realloc+0x96>
            p = lv_tlsf_malloc(tlsf, size);
 8027176:	4621      	mov	r1, r4
 8027178:	4628      	mov	r0, r5
 802717a:	f7ff ff94 	bl	80270a6 <lv_tlsf_malloc>
            if(p) {
 802717e:	4607      	mov	r7, r0
 8027180:	2800      	cmp	r0, #0
 8027182:	d0e8      	beq.n	8027156 <lv_tlsf_realloc+0x50>
                lv_memcpy(p, ptr, minsize);
 8027184:	4622      	mov	r2, r4
 8027186:	42b4      	cmp	r4, r6
 8027188:	bf28      	it	cs
 802718a:	4632      	movcs	r2, r6
 802718c:	4649      	mov	r1, r9
 802718e:	f7ef fcab 	bl	8016ae8 <lv_memcpy>
                lv_tlsf_free(tlsf, ptr);
 8027192:	4649      	mov	r1, r9
 8027194:	4628      	mov	r0, r5
 8027196:	f7ff ff97 	bl	80270c8 <lv_tlsf_free>
 802719a:	e7dc      	b.n	8027156 <lv_tlsf_realloc+0x50>
            if(adjust > cursize) {
 802719c:	4546      	cmp	r6, r8
 802719e:	d306      	bcc.n	80271ae <lv_tlsf_realloc+0xa8>
            block_trim_used(control, block, adjust);
 80271a0:	4642      	mov	r2, r8
 80271a2:	4639      	mov	r1, r7
 80271a4:	4628      	mov	r0, r5
 80271a6:	f7ff fe62 	bl	8026e6e <block_trim_used>
            p = ptr;
 80271aa:	464f      	mov	r7, r9
 80271ac:	e7d3      	b.n	8027156 <lv_tlsf_realloc+0x50>
                block_merge_next(control, block);
 80271ae:	4639      	mov	r1, r7
 80271b0:	4628      	mov	r0, r5
 80271b2:	f7ff fe40 	bl	8026e36 <block_merge_next>
                block_mark_as_used(block);
 80271b6:	4638      	mov	r0, r7
 80271b8:	f7ff fcaf 	bl	8026b1a <block_mark_as_used>
 80271bc:	e7f0      	b.n	80271a0 <lv_tlsf_realloc+0x9a>
            return NULL;
 80271be:	2700      	movs	r7, #0
 80271c0:	e7c9      	b.n	8027156 <lv_tlsf_realloc+0x50>

080271c2 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4), 0 on invalid code.
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if(LV_IS_ASCII(str[0]))
 80271c2:	7803      	ldrb	r3, [r0, #0]
 80271c4:	f990 2000 	ldrsb.w	r2, [r0]
 80271c8:	2a00      	cmp	r2, #0
 80271ca:	da0d      	bge.n	80271e8 <lv_txt_utf8_size+0x26>
        return 1;
    else if(LV_IS_2BYTES_UTF8_CODE(str[0]))
 80271cc:	f003 02e0 	and.w	r2, r3, #224	@ 0xe0
 80271d0:	2ac0      	cmp	r2, #192	@ 0xc0
 80271d2:	d00b      	beq.n	80271ec <lv_txt_utf8_size+0x2a>
        return 2;
    else if(LV_IS_3BYTES_UTF8_CODE(str[0]))
 80271d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80271d8:	2ae0      	cmp	r2, #224	@ 0xe0
 80271da:	d009      	beq.n	80271f0 <lv_txt_utf8_size+0x2e>
        return 3;
    else if(LV_IS_4BYTES_UTF8_CODE(str[0]))
 80271dc:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80271e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80271e2:	d007      	beq.n	80271f4 <lv_txt_utf8_size+0x32>
        return 4;
    return 0;
 80271e4:	2000      	movs	r0, #0
 80271e6:	4770      	bx	lr
        return 1;
 80271e8:	2001      	movs	r0, #1
 80271ea:	4770      	bx	lr
        return 2;
 80271ec:	2002      	movs	r0, #2
 80271ee:	4770      	bx	lr
        return 3;
 80271f0:	2003      	movs	r0, #3
 80271f2:	4770      	bx	lr
        return 4;
 80271f4:	2004      	movs	r0, #4
}
 80271f6:	4770      	bx	lr

080271f8 <lv_txt_unicode_to_utf8>:
 * @param letter_uni a Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
    if(letter_uni < 128) return letter_uni;
 80271f8:	287f      	cmp	r0, #127	@ 0x7f
 80271fa:	d94e      	bls.n	802729a <lv_txt_unicode_to_utf8+0xa2>
{
 80271fc:	b082      	sub	sp, #8
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
 80271fe:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8027202:	d213      	bcs.n	802722c <lv_txt_unicode_to_utf8+0x34>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8027204:	f3c0 1384 	ubfx	r3, r0, #6, #5
 8027208:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 802720c:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8027210:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8027214:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8027218:	f88d 0005 	strb.w	r0, [sp, #5]
        bytes[2] = 0;
 802721c:	2300      	movs	r3, #0
 802721e:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = 0;
 8027222:	f88d 3007 	strb.w	r3, [sp, #7]
    else {
        return 0;
    }

    uint32_t * res_p = (uint32_t *)bytes;
    return *res_p;
 8027226:	9801      	ldr	r0, [sp, #4]
}
 8027228:	b002      	add	sp, #8
 802722a:	4770      	bx	lr
    else if(letter_uni < 0x010000) {
 802722c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8027230:	d215      	bcs.n	802725e <lv_txt_unicode_to_utf8+0x66>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8027232:	f3c0 3303 	ubfx	r3, r0, #12, #4
 8027236:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 802723a:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 802723e:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8027242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027246:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 802724a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802724e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8027252:	f88d 0006 	strb.w	r0, [sp, #6]
        bytes[3] = 0;
 8027256:	2300      	movs	r3, #0
 8027258:	f88d 3007 	strb.w	r3, [sp, #7]
 802725c:	e7e3      	b.n	8027226 <lv_txt_unicode_to_utf8+0x2e>
    else if(letter_uni < 0x110000) {
 802725e:	f5b0 1f88 	cmp.w	r0, #1114112	@ 0x110000
 8027262:	d218      	bcs.n	8027296 <lv_txt_unicode_to_utf8+0x9e>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8027264:	f3c0 4382 	ubfx	r3, r0, #18, #3
 8027268:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 802726c:	f88d 3004 	strb.w	r3, [sp, #4]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8027270:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8027274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027278:	f88d 3005 	strb.w	r3, [sp, #5]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 802727c:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8027280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027284:	f88d 3006 	strb.w	r3, [sp, #6]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8027288:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802728c:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8027290:	f88d 0007 	strb.w	r0, [sp, #7]
 8027294:	e7c7      	b.n	8027226 <lv_txt_unicode_to_utf8+0x2e>
        return 0;
 8027296:	2000      	movs	r0, #0
 8027298:	e7c6      	b.n	8027228 <lv_txt_unicode_to_utf8+0x30>
}
 802729a:	4770      	bx	lr

0802729c <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 802729c:	b500      	push	{lr}
 802729e:	b083      	sub	sp, #12
 80272a0:	4686      	mov	lr, r0
     */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 80272a2:	2300      	movs	r3, #0
 80272a4:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
 80272a6:	468c      	mov	ip, r1
 80272a8:	b169      	cbz	r1, 80272c6 <lv_txt_utf8_next+0x2a>

    /*Normal ASCII*/
    if(LV_IS_ASCII(txt[*i])) {
 80272aa:	f8dc 2000 	ldr.w	r2, [ip]
 80272ae:	f81e 0002 	ldrb.w	r0, [lr, r2]
 80272b2:	f91e 3002 	ldrsb.w	r3, [lr, r2]
 80272b6:	2b00      	cmp	r3, #0
 80272b8:	db08      	blt.n	80272cc <lv_txt_utf8_next+0x30>
        result = txt[*i];
        (*i)++;
 80272ba:	3201      	adds	r2, #1
 80272bc:	f8cc 2000 	str.w	r2, [ip]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
 80272c0:	b003      	add	sp, #12
 80272c2:	f85d fb04 	ldr.w	pc, [sp], #4
    if(i == NULL) i = &i_tmp;
 80272c6:	f10d 0c04 	add.w	ip, sp, #4
 80272ca:	e7ee      	b.n	80272aa <lv_txt_utf8_next+0xe>
        if(LV_IS_2BYTES_UTF8_CODE(txt[*i])) {
 80272cc:	f000 03e0 	and.w	r3, r0, #224	@ 0xe0
 80272d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80272d2:	d00c      	beq.n	80272ee <lv_txt_utf8_next+0x52>
        else if(LV_IS_3BYTES_UTF8_CODE(txt[*i])) {
 80272d4:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80272d8:	2be0      	cmp	r3, #224	@ 0xe0
 80272da:	d01b      	beq.n	8027314 <lv_txt_utf8_next+0x78>
        else if(LV_IS_4BYTES_UTF8_CODE(txt[*i])) {
 80272dc:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80272e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80272e2:	d036      	beq.n	8027352 <lv_txt_utf8_next+0xb6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
 80272e4:	3201      	adds	r2, #1
 80272e6:	f8cc 2000 	str.w	r2, [ip]
    uint32_t result = 0;
 80272ea:	2000      	movs	r0, #0
 80272ec:	e7e8      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 80272ee:	0183      	lsls	r3, r0, #6
 80272f0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
            (*i)++;
 80272f4:	1c51      	adds	r1, r2, #1
 80272f6:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80272fa:	f81e 1001 	ldrb.w	r1, [lr, r1]
 80272fe:	f001 00c0 	and.w	r0, r1, #192	@ 0xc0
 8027302:	2880      	cmp	r0, #128	@ 0x80
 8027304:	d152      	bne.n	80273ac <lv_txt_utf8_next+0x110>
            result += (txt[*i] & 0x3F);
 8027306:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 802730a:	18c8      	adds	r0, r1, r3
            (*i)++;
 802730c:	3202      	adds	r2, #2
 802730e:	f8cc 2000 	str.w	r2, [ip]
 8027312:	e7d5      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8027314:	0303      	lsls	r3, r0, #12
 8027316:	b29b      	uxth	r3, r3
            (*i)++;
 8027318:	1c51      	adds	r1, r2, #1
 802731a:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802731e:	f81e 1001 	ldrb.w	r1, [lr, r1]
 8027322:	f001 00c0 	and.w	r0, r1, #192	@ 0xc0
 8027326:	2880      	cmp	r0, #128	@ 0x80
 8027328:	d142      	bne.n	80273b0 <lv_txt_utf8_next+0x114>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 802732a:	0189      	lsls	r1, r1, #6
 802732c:	f401 617c 	and.w	r1, r1, #4032	@ 0xfc0
 8027330:	4419      	add	r1, r3
            (*i)++;
 8027332:	1c93      	adds	r3, r2, #2
 8027334:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8027338:	f81e 0003 	ldrb.w	r0, [lr, r3]
 802733c:	f000 03c0 	and.w	r3, r0, #192	@ 0xc0
 8027340:	2b80      	cmp	r3, #128	@ 0x80
 8027342:	d137      	bne.n	80273b4 <lv_txt_utf8_next+0x118>
            result += (txt[*i] & 0x3F);
 8027344:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8027348:	4408      	add	r0, r1
            (*i)++;
 802734a:	3203      	adds	r2, #3
 802734c:	f8cc 2000 	str.w	r2, [ip]
 8027350:	e7b6      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 8027352:	0483      	lsls	r3, r0, #18
 8027354:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
            (*i)++;
 8027358:	1c51      	adds	r1, r2, #1
 802735a:	f8cc 1000 	str.w	r1, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 802735e:	f81e 1001 	ldrb.w	r1, [lr, r1]
 8027362:	f001 00c0 	and.w	r0, r1, #192	@ 0xc0
 8027366:	2880      	cmp	r0, #128	@ 0x80
 8027368:	d126      	bne.n	80273b8 <lv_txt_utf8_next+0x11c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 802736a:	0309      	lsls	r1, r1, #12
 802736c:	f401 317c 	and.w	r1, r1, #258048	@ 0x3f000
 8027370:	4319      	orrs	r1, r3
            (*i)++;
 8027372:	1c93      	adds	r3, r2, #2
 8027374:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8027378:	f81e 3003 	ldrb.w	r3, [lr, r3]
 802737c:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 8027380:	2880      	cmp	r0, #128	@ 0x80
 8027382:	d11b      	bne.n	80273bc <lv_txt_utf8_next+0x120>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8027384:	019b      	lsls	r3, r3, #6
 8027386:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 802738a:	4419      	add	r1, r3
            (*i)++;
 802738c:	1cd3      	adds	r3, r2, #3
 802738e:	f8cc 3000 	str.w	r3, [ip]
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 8027392:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8027396:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 802739a:	2880      	cmp	r0, #128	@ 0x80
 802739c:	d110      	bne.n	80273c0 <lv_txt_utf8_next+0x124>
            result += txt[*i] & 0x3F;
 802739e:	f003 003f 	and.w	r0, r3, #63	@ 0x3f
 80273a2:	4408      	add	r0, r1
            (*i)++;
 80273a4:	3204      	adds	r2, #4
 80273a6:	f8cc 2000 	str.w	r2, [ip]
 80273aa:	e789      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273ac:	2000      	movs	r0, #0
 80273ae:	e787      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273b0:	2000      	movs	r0, #0
 80273b2:	e785      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273b4:	2000      	movs	r0, #0
 80273b6:	e783      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273b8:	2000      	movs	r0, #0
 80273ba:	e781      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273bc:	2000      	movs	r0, #0
 80273be:	e77f      	b.n	80272c0 <lv_txt_utf8_next+0x24>
            if(LV_IS_INVALID_UTF8_CODE(txt[*i])) return 0;
 80273c0:	2000      	movs	r0, #0
 80273c2:	e77d      	b.n	80272c0 <lv_txt_utf8_next+0x24>

080273c4 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 80273c4:	b570      	push	{r4, r5, r6, lr}
 80273c6:	b082      	sub	sp, #8
 80273c8:	4606      	mov	r6, r0
 80273ca:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 80273cc:	680b      	ldr	r3, [r1, #0]
 80273ce:	3b01      	subs	r3, #1
 80273d0:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
 80273d2:	2400      	movs	r4, #0
 80273d4:	e004      	b.n	80273e0 <lv_txt_utf8_prev+0x1c>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/

        c_size = _lv_txt_encoded_size(&txt[*i]);
        if(c_size == 0) {
            if(*i != 0)
                (*i)--;
 80273d6:	3801      	subs	r0, #1
 80273d8:	6028      	str	r0, [r5, #0]
            else
                return 0;
        }
        cnt++;
 80273da:	3401      	adds	r4, #1
 80273dc:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
 80273de:	b96b      	cbnz	r3, 80273fc <lv_txt_utf8_prev+0x38>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 80273e0:	2c03      	cmp	r4, #3
 80273e2:	d813      	bhi.n	802740c <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
 80273e4:	6828      	ldr	r0, [r5, #0]
 80273e6:	4b0b      	ldr	r3, [pc, #44]	@ (8027414 <lv_txt_utf8_prev+0x50>)
 80273e8:	681b      	ldr	r3, [r3, #0]
 80273ea:	4430      	add	r0, r6
 80273ec:	4798      	blx	r3
        if(c_size == 0) {
 80273ee:	4603      	mov	r3, r0
 80273f0:	2800      	cmp	r0, #0
 80273f2:	d1f2      	bne.n	80273da <lv_txt_utf8_prev+0x16>
            if(*i != 0)
 80273f4:	6828      	ldr	r0, [r5, #0]
 80273f6:	2800      	cmp	r0, #0
 80273f8:	d1ed      	bne.n	80273d6 <lv_txt_utf8_prev+0x12>
 80273fa:	e008      	b.n	802740e <lv_txt_utf8_prev+0x4a>

    uint32_t i_tmp  = *i;
 80273fc:	682b      	ldr	r3, [r5, #0]
 80273fe:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 8027400:	4b05      	ldr	r3, [pc, #20]	@ (8027418 <lv_txt_utf8_prev+0x54>)
 8027402:	681b      	ldr	r3, [r3, #0]
 8027404:	a901      	add	r1, sp, #4
 8027406:	4630      	mov	r0, r6
 8027408:	4798      	blx	r3

    return letter;
 802740a:	e000      	b.n	802740e <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 802740c:	2000      	movs	r0, #0
}
 802740e:	b002      	add	sp, #8
 8027410:	bd70      	pop	{r4, r5, r6, pc}
 8027412:	bf00      	nop
 8027414:	2000008c 	.word	0x2000008c
 8027418:	20000084 	.word	0x20000084

0802741c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 802741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802741e:	4606      	mov	r6, r0
 8027420:	460f      	mov	r7, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
 8027422:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 8027424:	4625      	mov	r5, r4
 8027426:	e001      	b.n	802742c <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        /* If the char was invalid tell it's 1 byte long*/
        byte_cnt += c_size ? c_size : 1;
 8027428:	441c      	add	r4, r3
    for(i = 0; i < utf8_id && txt[byte_cnt] != '\0'; i++) {
 802742a:	3501      	adds	r5, #1
 802742c:	42bd      	cmp	r5, r7
 802742e:	d20a      	bcs.n	8027446 <lv_txt_utf8_get_byte_id+0x2a>
 8027430:	1930      	adds	r0, r6, r4
 8027432:	5d33      	ldrb	r3, [r6, r4]
 8027434:	b13b      	cbz	r3, 8027446 <lv_txt_utf8_get_byte_id+0x2a>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
 8027436:	4b05      	ldr	r3, [pc, #20]	@ (802744c <lv_txt_utf8_get_byte_id+0x30>)
 8027438:	681b      	ldr	r3, [r3, #0]
 802743a:	4798      	blx	r3
        byte_cnt += c_size ? c_size : 1;
 802743c:	4603      	mov	r3, r0
 802743e:	2800      	cmp	r0, #0
 8027440:	d1f2      	bne.n	8027428 <lv_txt_utf8_get_byte_id+0xc>
 8027442:	2301      	movs	r3, #1
 8027444:	e7f0      	b.n	8027428 <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
 8027446:	4620      	mov	r0, r4
 8027448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802744a:	bf00      	nop
 802744c:	2000008c 	.word	0x2000008c

08027450 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8027450:	b570      	push	{r4, r5, r6, lr}
 8027452:	b082      	sub	sp, #8
 8027454:	4606      	mov	r6, r0
 8027456:	460d      	mov	r5, r1
    uint32_t i        = 0;
 8027458:	2400      	movs	r4, #0
 802745a:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
 802745c:	e005      	b.n	802746a <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 802745e:	4b06      	ldr	r3, [pc, #24]	@ (8027478 <lv_txt_utf8_get_char_id+0x28>)
 8027460:	681b      	ldr	r3, [r3, #0]
 8027462:	a901      	add	r1, sp, #4
 8027464:	4630      	mov	r0, r6
 8027466:	4798      	blx	r3
        char_cnt++;
 8027468:	3401      	adds	r4, #1
    while(i < byte_id) {
 802746a:	9b01      	ldr	r3, [sp, #4]
 802746c:	42ab      	cmp	r3, r5
 802746e:	d3f6      	bcc.n	802745e <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
 8027470:	4620      	mov	r0, r4
 8027472:	b002      	add	sp, #8
 8027474:	bd70      	pop	{r4, r5, r6, pc}
 8027476:	bf00      	nop
 8027478:	20000084 	.word	0x20000084

0802747c <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 802747c:	b530      	push	{r4, r5, lr}
 802747e:	b083      	sub	sp, #12
 8027480:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
 8027482:	2400      	movs	r4, #0
 8027484:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
 8027486:	e005      	b.n	8027494 <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
 8027488:	4b06      	ldr	r3, [pc, #24]	@ (80274a4 <lv_txt_utf8_get_length+0x28>)
 802748a:	681b      	ldr	r3, [r3, #0]
 802748c:	a901      	add	r1, sp, #4
 802748e:	4628      	mov	r0, r5
 8027490:	4798      	blx	r3
        len++;
 8027492:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
 8027494:	9b01      	ldr	r3, [sp, #4]
 8027496:	5ceb      	ldrb	r3, [r5, r3]
 8027498:	2b00      	cmp	r3, #0
 802749a:	d1f5      	bne.n	8027488 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
 802749c:	4620      	mov	r0, r4
 802749e:	b003      	add	sp, #12
 80274a0:	bd30      	pop	{r4, r5, pc}
 80274a2:	bf00      	nop
 80274a4:	20000084 	.word	0x20000084

080274a8 <_lv_txt_is_cmd>:
{
 80274a8:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 80274aa:	2923      	cmp	r1, #35	@ 0x23
 80274ac:	d004      	beq.n	80274b8 <_lv_txt_is_cmd+0x10>
    bool ret = false;
 80274ae:	2000      	movs	r0, #0
    if(*state == LV_TEXT_CMD_STATE_PAR) {
 80274b0:	781a      	ldrb	r2, [r3, #0]
 80274b2:	2a01      	cmp	r2, #1
 80274b4:	d012      	beq.n	80274dc <_lv_txt_is_cmd+0x34>
}
 80274b6:	4770      	bx	lr
        if(*state == LV_TEXT_CMD_STATE_WAIT) { /*Start char*/
 80274b8:	7802      	ldrb	r2, [r0, #0]
 80274ba:	b912      	cbnz	r2, 80274c2 <_lv_txt_is_cmd+0x1a>
            *state = LV_TEXT_CMD_STATE_PAR;
 80274bc:	2001      	movs	r0, #1
 80274be:	7018      	strb	r0, [r3, #0]
            ret    = true;
 80274c0:	e7f6      	b.n	80274b0 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TEXT_CMD_STATE_PAR) {
 80274c2:	2a01      	cmp	r2, #1
 80274c4:	d003      	beq.n	80274ce <_lv_txt_is_cmd+0x26>
        else if(*state == LV_TEXT_CMD_STATE_IN) {
 80274c6:	2a02      	cmp	r2, #2
 80274c8:	d004      	beq.n	80274d4 <_lv_txt_is_cmd+0x2c>
    bool ret = false;
 80274ca:	2000      	movs	r0, #0
 80274cc:	e7f0      	b.n	80274b0 <_lv_txt_is_cmd+0x8>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80274ce:	2000      	movs	r0, #0
 80274d0:	7018      	strb	r0, [r3, #0]
 80274d2:	e7ed      	b.n	80274b0 <_lv_txt_is_cmd+0x8>
            *state = LV_TEXT_CMD_STATE_WAIT;
 80274d4:	2200      	movs	r2, #0
 80274d6:	7002      	strb	r2, [r0, #0]
            ret    = true;
 80274d8:	2001      	movs	r0, #1
 80274da:	e7e9      	b.n	80274b0 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
 80274dc:	2920      	cmp	r1, #32
 80274de:	d001      	beq.n	80274e4 <_lv_txt_is_cmd+0x3c>
        ret = true;
 80274e0:	2001      	movs	r0, #1
 80274e2:	e7e8      	b.n	80274b6 <_lv_txt_is_cmd+0xe>
            *state = LV_TEXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 80274e4:	2202      	movs	r2, #2
 80274e6:	701a      	strb	r2, [r3, #0]
        ret = true;
 80274e8:	2001      	movs	r0, #1
 80274ea:	4770      	bx	lr

080274ec <lv_txt_get_next_word>:
{
 80274ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80274f0:	b089      	sub	sp, #36	@ 0x24
 80274f2:	9102      	str	r1, [sp, #8]
 80274f4:	9203      	str	r2, [sp, #12]
 80274f6:	9304      	str	r3, [sp, #16]
 80274f8:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
 80274fc:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
    if(txt == NULL || txt[0] == '\0') return 0;
 8027500:	2800      	cmp	r0, #0
 8027502:	f000 809a 	beq.w	802763a <lv_txt_get_next_word+0x14e>
 8027506:	4607      	mov	r7, r0
 8027508:	7803      	ldrb	r3, [r0, #0]
 802750a:	2b00      	cmp	r3, #0
 802750c:	f000 8098 	beq.w	8027640 <lv_txt_get_next_word+0x154>
    if(font == NULL) return 0;
 8027510:	2900      	cmp	r1, #0
 8027512:	f000 809b 	beq.w	802764c <lv_txt_get_next_word+0x160>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8027516:	f01a 0f02 	tst.w	sl, #2
 802751a:	d002      	beq.n	8027522 <lv_txt_get_next_word+0x36>
 802751c:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8027520:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /*Iterating index into txt*/
 8027522:	2600      	movs	r6, #0
 8027524:	9607      	str	r6, [sp, #28]
 8027526:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
 8027528:	4b4b      	ldr	r3, [pc, #300]	@ (8027658 <lv_txt_get_next_word+0x16c>)
 802752a:	681b      	ldr	r3, [r3, #0]
 802752c:	a907      	add	r1, sp, #28
 802752e:	4638      	mov	r0, r7
 8027530:	4798      	blx	r3
 8027532:	4604      	mov	r4, r0
    i_next_next = i_next;
 8027534:	9b07      	ldr	r3, [sp, #28]
 8027536:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /*only used for "long" words*/
 8027538:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
    uint32_t word_len = 0;   /*Number of characters in the transversed word*/
 802753c:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /*Pixel Width of transversed string*/
 802753e:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /*Letter at i_next*/
 8027540:	9601      	str	r6, [sp, #4]
 8027542:	f8cd b014 	str.w	fp, [sp, #20]
    while(txt[i] != '\0') {
 8027546:	e036      	b.n	80275b6 <lv_txt_get_next_word+0xca>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8027548:	9a01      	ldr	r2, [sp, #4]
 802754a:	4621      	mov	r1, r4
 802754c:	9802      	ldr	r0, [sp, #8]
 802754e:	f7ea fb45 	bl	8011bdc <lv_font_get_glyph_width>
 8027552:	b202      	sxth	r2, r0
        cur_w += letter_w;
 8027554:	4428      	add	r0, r5
 8027556:	b283      	uxth	r3, r0
 8027558:	b205      	sxth	r5, r0
        if(letter_w > 0) {
 802755a:	2a00      	cmp	r2, #0
 802755c:	dd02      	ble.n	8027564 <lv_txt_get_next_word+0x78>
            cur_w += letter_space;
 802755e:	9a03      	ldr	r2, [sp, #12]
 8027560:	4413      	add	r3, r2
 8027562:	b21d      	sxth	r5, r3
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8027564:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8027568:	d012      	beq.n	8027590 <lv_txt_get_next_word+0xa4>
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 802756a:	2c0a      	cmp	r4, #10
 802756c:	d03c      	beq.n	80275e8 <lv_txt_get_next_word+0xfc>
 802756e:	2c0d      	cmp	r4, #13
 8027570:	d03a      	beq.n	80275e8 <lv_txt_get_next_word+0xfc>
{
    uint8_t i;
    bool ret = false;

    /* each chinese character can be break */
    if(letter >= 0x4E00 && letter <= 0x9FA5) {
 8027572:	f5a4 429c 	sub.w	r2, r4, #19968	@ 0x4e00
 8027576:	f245 13a5 	movw	r3, #20901	@ 0x51a5
 802757a:	429a      	cmp	r2, r3
 802757c:	d934      	bls.n	80275e8 <lv_txt_get_next_word+0xfc>
        return true;
    }

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802757e:	2300      	movs	r3, #0
 8027580:	4a36      	ldr	r2, [pc, #216]	@ (802765c <lv_txt_get_next_word+0x170>)
 8027582:	5cd2      	ldrb	r2, [r2, r3]
 8027584:	b15a      	cbz	r2, 802759e <lv_txt_get_next_word+0xb2>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 8027586:	4294      	cmp	r4, r2
 8027588:	d02c      	beq.n	80275e4 <lv_txt_get_next_word+0xf8>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 802758a:	3301      	adds	r3, #1
 802758c:	b2db      	uxtb	r3, r3
 802758e:	e7f7      	b.n	8027580 <lv_txt_get_next_word+0x94>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
 8027590:	9b03      	ldr	r3, [sp, #12]
 8027592:	1aeb      	subs	r3, r5, r3
 8027594:	9a04      	ldr	r2, [sp, #16]
 8027596:	4293      	cmp	r3, r2
 8027598:	dde7      	ble.n	802756a <lv_txt_get_next_word+0x7e>
            break_index = i;
 802759a:	46b0      	mov	r8, r6
 802759c:	e7e5      	b.n	802756a <lv_txt_get_next_word+0x7e>
    bool ret = false;
 802759e:	2300      	movs	r3, #0
        if(letter == '\n' || letter == '\r' || _lv_txt_is_break_char(letter)) {
 80275a0:	bb13      	cbnz	r3, 80275e8 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 80275a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80275a4:	b113      	cbz	r3, 80275ac <lv_txt_get_next_word+0xc0>
 80275a6:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80275aa:	d032      	beq.n	8027612 <lv_txt_get_next_word+0x126>
        i = i_next;
 80275ac:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
 80275ae:	9b06      	ldr	r3, [sp, #24]
 80275b0:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
 80275b2:	46d9      	mov	r9, fp
 80275b4:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
 80275b6:	5dbb      	ldrb	r3, [r7, r6]
 80275b8:	b36b      	cbz	r3, 8027616 <lv_txt_get_next_word+0x12a>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
 80275ba:	4b27      	ldr	r3, [pc, #156]	@ (8027658 <lv_txt_get_next_word+0x16c>)
 80275bc:	681b      	ldr	r3, [r3, #0]
 80275be:	a906      	add	r1, sp, #24
 80275c0:	4638      	mov	r0, r7
 80275c2:	4798      	blx	r3
 80275c4:	9001      	str	r0, [sp, #4]
        word_len++;
 80275c6:	f109 0b01 	add.w	fp, r9, #1
        if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80275ca:	f01a 0f01 	tst.w	sl, #1
 80275ce:	d0bb      	beq.n	8027548 <lv_txt_get_next_word+0x5c>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
 80275d0:	4621      	mov	r1, r4
 80275d2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 80275d4:	f7ff ff68 	bl	80274a8 <_lv_txt_is_cmd>
 80275d8:	2800      	cmp	r0, #0
 80275da:	d0b5      	beq.n	8027548 <lv_txt_get_next_word+0x5c>
                i = i_next;
 80275dc:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
 80275de:	9b06      	ldr	r3, [sp, #24]
 80275e0:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter if it is part of a command*/
 80275e2:	e7e6      	b.n	80275b2 <lv_txt_get_next_word+0xc6>
 80275e4:	2301      	movs	r3, #1
 80275e6:	e7db      	b.n	80275a0 <lv_txt_get_next_word+0xb4>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
 80275e8:	f8dd b014 	ldr.w	fp, [sp, #20]
 80275ec:	b92e      	cbnz	r6, 80275fa <lv_txt_get_next_word+0x10e>
 80275ee:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80275f2:	d105      	bne.n	8027600 <lv_txt_get_next_word+0x114>
 80275f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80275f6:	b103      	cbz	r3, 80275fa <lv_txt_get_next_word+0x10e>
 80275f8:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
 80275fa:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80275fe:	d00d      	beq.n	802761c <lv_txt_get_next_word+0x130>
    if(force) return break_index;
 8027600:	f1bb 0f00 	cmp.w	fp, #0
 8027604:	d11e      	bne.n	8027644 <lv_txt_get_next_word+0x158>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /*Return no word*/
 8027606:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027608:	b31b      	cbz	r3, 8027652 <lv_txt_get_next_word+0x166>
 802760a:	2100      	movs	r1, #0
 802760c:	6019      	str	r1, [r3, #0]
    return 0;
 802760e:	4688      	mov	r8, r1
 8027610:	e018      	b.n	8027644 <lv_txt_get_next_word+0x158>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
 8027612:	601d      	str	r5, [r3, #0]
 8027614:	e7ca      	b.n	80275ac <lv_txt_get_next_word+0xc0>
 8027616:	f8dd b014 	ldr.w	fp, [sp, #20]
 802761a:	e7ee      	b.n	80275fa <lv_txt_get_next_word+0x10e>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 802761c:	f1b9 0f00 	cmp.w	r9, #0
 8027620:	d008      	beq.n	8027634 <lv_txt_get_next_word+0x148>
 8027622:	2c0d      	cmp	r4, #13
 8027624:	d001      	beq.n	802762a <lv_txt_get_next_word+0x13e>
 8027626:	46b0      	mov	r8, r6
 8027628:	e00c      	b.n	8027644 <lv_txt_get_next_word+0x158>
 802762a:	9b01      	ldr	r3, [sp, #4]
 802762c:	2b0a      	cmp	r3, #10
 802762e:	d001      	beq.n	8027634 <lv_txt_get_next_word+0x148>
 8027630:	46b0      	mov	r8, r6
        return i;
 8027632:	e007      	b.n	8027644 <lv_txt_get_next_word+0x158>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
 8027634:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027638:	e004      	b.n	8027644 <lv_txt_get_next_word+0x158>
    if(txt == NULL || txt[0] == '\0') return 0;
 802763a:	f04f 0800 	mov.w	r8, #0
 802763e:	e001      	b.n	8027644 <lv_txt_get_next_word+0x158>
 8027640:	f04f 0800 	mov.w	r8, #0
}
 8027644:	4640      	mov	r0, r8
 8027646:	b009      	add	sp, #36	@ 0x24
 8027648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
 802764c:	f04f 0800 	mov.w	r8, #0
 8027650:	e7f8      	b.n	8027644 <lv_txt_get_next_word+0x158>
    return 0;
 8027652:	f04f 0800 	mov.w	r8, #0
 8027656:	e7f5      	b.n	8027644 <lv_txt_get_next_word+0x158>
 8027658:	20000084 	.word	0x20000084
 802765c:	08029eac 	.word	0x08029eac

08027660 <_lv_txt_get_next_line>:
{
 8027660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027664:	b089      	sub	sp, #36	@ 0x24
 8027666:	4606      	mov	r6, r0
 8027668:	4688      	mov	r8, r1
 802766a:	4691      	mov	r9, r2
 802766c:	461d      	mov	r5, r3
 802766e:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
 8027672:	f89d a04c 	ldrb.w	sl, [sp, #76]	@ 0x4c
    if(used_width) *used_width = 0;
 8027676:	f1bb 0f00 	cmp.w	fp, #0
 802767a:	d002      	beq.n	8027682 <_lv_txt_get_next_line+0x22>
 802767c:	2300      	movs	r3, #0
 802767e:	f8ab 3000 	strh.w	r3, [fp]
    if(txt == NULL) return 0;
 8027682:	2e00      	cmp	r6, #0
 8027684:	d068      	beq.n	8027758 <_lv_txt_get_next_line+0xf8>
    if(txt[0] == '\0') return 0;
 8027686:	7833      	ldrb	r3, [r6, #0]
 8027688:	2b00      	cmp	r3, #0
 802768a:	d067      	beq.n	802775c <_lv_txt_get_next_line+0xfc>
    if(font == NULL) return 0;
 802768c:	f1b8 0f00 	cmp.w	r8, #0
 8027690:	d066      	beq.n	8027760 <_lv_txt_get_next_line+0x100>
    if((flag & LV_TEXT_FLAG_EXPAND) || (flag & LV_TEXT_FLAG_FIT)) {
 8027692:	f01a 0f06 	tst.w	sl, #6
 8027696:	d15d      	bne.n	8027754 <_lv_txt_get_next_line+0xf4>
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8027698:	2700      	movs	r7, #0
 802769a:	f88d 701f 	strb.w	r7, [sp, #31]
    uint32_t i = 0;                                        /*Iterating index into txt*/
 802769e:	9706      	str	r7, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
 80276a0:	9c06      	ldr	r4, [sp, #24]
 80276a2:	1930      	adds	r0, r6, r4
 80276a4:	5d33      	ldrb	r3, [r6, r4]
 80276a6:	b353      	cbz	r3, 80276fe <_lv_txt_get_next_line+0x9e>
 80276a8:	2d00      	cmp	r5, #0
 80276aa:	dd28      	ble.n	80276fe <_lv_txt_get_next_line+0x9e>
        uint32_t word_w = 0;
 80276ac:	2300      	movs	r3, #0
 80276ae:	9305      	str	r3, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
 80276b0:	fab4 f484 	clz	r4, r4
 80276b4:	0964      	lsrs	r4, r4, #5
 80276b6:	9403      	str	r4, [sp, #12]
 80276b8:	f10d 031f 	add.w	r3, sp, #31
 80276bc:	9302      	str	r3, [sp, #8]
 80276be:	ab05      	add	r3, sp, #20
 80276c0:	9301      	str	r3, [sp, #4]
 80276c2:	f8cd a000 	str.w	sl, [sp]
 80276c6:	462b      	mov	r3, r5
 80276c8:	464a      	mov	r2, r9
 80276ca:	4641      	mov	r1, r8
 80276cc:	f7ff ff0e 	bl	80274ec <lv_txt_get_next_word>
        max_width -= word_w;
 80276d0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80276d4:	1aed      	subs	r5, r5, r3
 80276d6:	b22d      	sxth	r5, r5
        line_w += word_w;
 80276d8:	443b      	add	r3, r7
 80276da:	b21f      	sxth	r7, r3
        if(advance == 0) {
 80276dc:	4603      	mov	r3, r0
 80276de:	b170      	cbz	r0, 80276fe <_lv_txt_get_next_line+0x9e>
        i += advance;
 80276e0:	9a06      	ldr	r2, [sp, #24]
 80276e2:	4413      	add	r3, r2
 80276e4:	9306      	str	r3, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
 80276e6:	7832      	ldrb	r2, [r6, #0]
 80276e8:	2a0a      	cmp	r2, #10
 80276ea:	d008      	beq.n	80276fe <_lv_txt_get_next_line+0x9e>
 80276ec:	2a0d      	cmp	r2, #13
 80276ee:	d006      	beq.n	80276fe <_lv_txt_get_next_line+0x9e>
        if(txt[i] == '\n' || txt[i] == '\r') {
 80276f0:	5cf2      	ldrb	r2, [r6, r3]
 80276f2:	2a0a      	cmp	r2, #10
 80276f4:	d001      	beq.n	80276fa <_lv_txt_get_next_line+0x9a>
 80276f6:	2a0d      	cmp	r2, #13
 80276f8:	d1d2      	bne.n	80276a0 <_lv_txt_get_next_line+0x40>
            i++;  /*Include the following newline in the current line*/
 80276fa:	3301      	adds	r3, #1
 80276fc:	9306      	str	r3, [sp, #24]
    if(i == 0) {
 80276fe:	9b06      	ldr	r3, [sp, #24]
 8027700:	b96b      	cbnz	r3, 802771e <_lv_txt_get_next_line+0xbe>
        uint32_t letter = _lv_txt_encoded_next(txt, &i);
 8027702:	4b18      	ldr	r3, [pc, #96]	@ (8027764 <_lv_txt_get_next_line+0x104>)
 8027704:	681b      	ldr	r3, [r3, #0]
 8027706:	a906      	add	r1, sp, #24
 8027708:	4630      	mov	r0, r6
 802770a:	4798      	blx	r3
 802770c:	4601      	mov	r1, r0
        if(used_width != NULL) {
 802770e:	f1bb 0f00 	cmp.w	fp, #0
 8027712:	d009      	beq.n	8027728 <_lv_txt_get_next_line+0xc8>
            line_w = lv_font_get_glyph_width(font, letter, '\0');
 8027714:	2200      	movs	r2, #0
 8027716:	4640      	mov	r0, r8
 8027718:	f7ea fa60 	bl	8011bdc <lv_font_get_glyph_width>
 802771c:	b207      	sxth	r7, r0
    if(used_width != NULL) {
 802771e:	f1bb 0f00 	cmp.w	fp, #0
 8027722:	d001      	beq.n	8027728 <_lv_txt_get_next_line+0xc8>
        *used_width = line_w;
 8027724:	f8ab 7000 	strh.w	r7, [fp]
    return i;
 8027728:	9806      	ldr	r0, [sp, #24]
}
 802772a:	b009      	add	sp, #36	@ 0x24
 802772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8027730:	3001      	adds	r0, #1
 8027732:	5c33      	ldrb	r3, [r6, r0]
 8027734:	2b0a      	cmp	r3, #10
 8027736:	d003      	beq.n	8027740 <_lv_txt_get_next_line+0xe0>
 8027738:	2b0d      	cmp	r3, #13
 802773a:	d001      	beq.n	8027740 <_lv_txt_get_next_line+0xe0>
 802773c:	2b00      	cmp	r3, #0
 802773e:	d1f7      	bne.n	8027730 <_lv_txt_get_next_line+0xd0>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
 8027740:	b103      	cbz	r3, 8027744 <_lv_txt_get_next_line+0xe4>
 8027742:	3001      	adds	r0, #1
        if(used_width) *used_width = -1;
 8027744:	f1bb 0f00 	cmp.w	fp, #0
 8027748:	d0ef      	beq.n	802772a <_lv_txt_get_next_line+0xca>
 802774a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802774e:	f8ab 3000 	strh.w	r3, [fp]
        return i;
 8027752:	e7ea      	b.n	802772a <_lv_txt_get_next_line+0xca>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
 8027754:	2000      	movs	r0, #0
 8027756:	e7ec      	b.n	8027732 <_lv_txt_get_next_line+0xd2>
    if(txt == NULL) return 0;
 8027758:	2000      	movs	r0, #0
 802775a:	e7e6      	b.n	802772a <_lv_txt_get_next_line+0xca>
    if(txt[0] == '\0') return 0;
 802775c:	2000      	movs	r0, #0
 802775e:	e7e4      	b.n	802772a <_lv_txt_get_next_line+0xca>
    if(font == NULL) return 0;
 8027760:	2000      	movs	r0, #0
 8027762:	e7e2      	b.n	802772a <_lv_txt_get_next_line+0xca>
 8027764:	20000084 	.word	0x20000084

08027768 <_lv_txt_ins>:
    if(txt_buf == NULL || ins_txt == NULL) return;
 8027768:	b330      	cbz	r0, 80277b8 <_lv_txt_ins+0x50>
{
 802776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802776e:	4688      	mov	r8, r1
 8027770:	4617      	mov	r7, r2
 8027772:	4606      	mov	r6, r0
    if(txt_buf == NULL || ins_txt == NULL) return;
 8027774:	b1f2      	cbz	r2, 80277b4 <_lv_txt_ins+0x4c>
    size_t old_len = strlen(txt_buf);
 8027776:	f7d8 fd11 	bl	800019c <strlen>
 802777a:	4604      	mov	r4, r0
    size_t ins_len = strlen(ins_txt);
 802777c:	4638      	mov	r0, r7
 802777e:	f7d8 fd0d 	bl	800019c <strlen>
    if(ins_len == 0) return;
 8027782:	4605      	mov	r5, r0
 8027784:	b1b0      	cbz	r0, 80277b4 <_lv_txt_ins+0x4c>
    size_t new_len = ins_len + old_len;
 8027786:	4404      	add	r4, r0
    pos              = _lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8027788:	4b0c      	ldr	r3, [pc, #48]	@ (80277bc <_lv_txt_ins+0x54>)
 802778a:	681b      	ldr	r3, [r3, #0]
 802778c:	4641      	mov	r1, r8
 802778e:	4630      	mov	r0, r6
 8027790:	4798      	blx	r3
    for(i = new_len; i >= pos + ins_len; i--) {
 8027792:	e003      	b.n	802779c <_lv_txt_ins+0x34>
        txt_buf[i] = txt_buf[i - ins_len];
 8027794:	1b63      	subs	r3, r4, r5
 8027796:	5cf3      	ldrb	r3, [r6, r3]
 8027798:	5533      	strb	r3, [r6, r4]
    for(i = new_len; i >= pos + ins_len; i--) {
 802779a:	3c01      	subs	r4, #1
 802779c:	182b      	adds	r3, r5, r0
 802779e:	42a3      	cmp	r3, r4
 80277a0:	d9f8      	bls.n	8027794 <_lv_txt_ins+0x2c>
    lv_memcpy_small(txt_buf + pos, ins_txt, ins_len);
 80277a2:	4406      	add	r6, r0
static inline void * LV_ATTRIBUTE_FAST_MEM lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
 80277a4:	e004      	b.n	80277b0 <_lv_txt_ins+0x48>
        *d8 = *s8;
 80277a6:	f817 3b01 	ldrb.w	r3, [r7], #1
 80277aa:	f806 3b01 	strb.w	r3, [r6], #1
        d8++;
        s8++;
        len--;
 80277ae:	3d01      	subs	r5, #1
    while(len) {
 80277b0:	2d00      	cmp	r5, #0
 80277b2:	d1f8      	bne.n	80277a6 <_lv_txt_ins+0x3e>
}
 80277b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277b8:	4770      	bx	lr
 80277ba:	bf00      	nop
 80277bc:	2000007c 	.word	0x2000007c

080277c0 <_lv_txt_cut>:
    if(txt == NULL) return;
 80277c0:	b1d8      	cbz	r0, 80277fa <_lv_txt_cut+0x3a>
{
 80277c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80277c6:	460c      	mov	r4, r1
 80277c8:	4690      	mov	r8, r2
 80277ca:	4605      	mov	r5, r0
    size_t old_len = strlen(txt);
 80277cc:	f7d8 fce6 	bl	800019c <strlen>
 80277d0:	4606      	mov	r6, r0
    pos = _lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 80277d2:	4f0a      	ldr	r7, [pc, #40]	@ (80277fc <_lv_txt_cut+0x3c>)
 80277d4:	683b      	ldr	r3, [r7, #0]
 80277d6:	4621      	mov	r1, r4
 80277d8:	4628      	mov	r0, r5
 80277da:	4798      	blx	r3
 80277dc:	4604      	mov	r4, r0
    len = _lv_txt_encoded_get_byte_id(&txt[pos], len);
 80277de:	683b      	ldr	r3, [r7, #0]
 80277e0:	4641      	mov	r1, r8
 80277e2:	1828      	adds	r0, r5, r0
 80277e4:	4798      	blx	r3
    for(i = pos; i <= old_len - len; i++) {
 80277e6:	e003      	b.n	80277f0 <_lv_txt_cut+0x30>
        txt[i] = txt[i + len];
 80277e8:	1823      	adds	r3, r4, r0
 80277ea:	5ceb      	ldrb	r3, [r5, r3]
 80277ec:	552b      	strb	r3, [r5, r4]
    for(i = pos; i <= old_len - len; i++) {
 80277ee:	3401      	adds	r4, #1
 80277f0:	1a33      	subs	r3, r6, r0
 80277f2:	42a3      	cmp	r3, r4
 80277f4:	d2f8      	bcs.n	80277e8 <_lv_txt_cut+0x28>
}
 80277f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277fa:	4770      	bx	lr
 80277fc:	2000007c 	.word	0x2000007c

08027800 <_lv_txt_set_text_vfmt>:
{
 8027800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027804:	b082      	sub	sp, #8
 8027806:	4605      	mov	r5, r0
 8027808:	460c      	mov	r4, r1
    va_copy(ap_copy, ap);
 802780a:	9101      	str	r1, [sp, #4]
    uint32_t len = lv_vsnprintf(NULL, 0, fmt, ap_copy);
 802780c:	460b      	mov	r3, r1
 802780e:	4602      	mov	r2, r0
 8027810:	2100      	movs	r1, #0
 8027812:	4608      	mov	r0, r1
 8027814:	f7f6 fb0a 	bl	801de2c <lv_vsnprintf>
 8027818:	4606      	mov	r6, r0
    text = lv_mem_alloc(len + 1);
 802781a:	f100 0801 	add.w	r8, r0, #1
 802781e:	4640      	mov	r0, r8
 8027820:	f7ef f87a 	bl	8016918 <lv_mem_alloc>
    LV_ASSERT_MALLOC(text);
 8027824:	b158      	cbz	r0, 802783e <_lv_txt_set_text_vfmt+0x3e>
 8027826:	4607      	mov	r7, r0
    text[len] = 0; /*Ensure NULL termination*/
 8027828:	2300      	movs	r3, #0
 802782a:	5583      	strb	r3, [r0, r6]
    lv_vsnprintf(text, len + 1, fmt, ap);
 802782c:	4623      	mov	r3, r4
 802782e:	462a      	mov	r2, r5
 8027830:	4641      	mov	r1, r8
 8027832:	f7f6 fafb 	bl	801de2c <lv_vsnprintf>
}
 8027836:	4638      	mov	r0, r7
 8027838:	b002      	add	sp, #8
 802783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LV_ASSERT_MALLOC(text);
 802783e:	e7fe      	b.n	802783e <_lv_txt_set_text_vfmt+0x3e>

08027840 <_lv_txt_encoded_letter_next_2>:
{
 8027840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027842:	4607      	mov	r7, r0
 8027844:	460e      	mov	r6, r1
 8027846:	4615      	mov	r5, r2
 8027848:	461c      	mov	r4, r3
    *letter = _lv_txt_encoded_next(txt, ofs);
 802784a:	4b07      	ldr	r3, [pc, #28]	@ (8027868 <_lv_txt_encoded_letter_next_2+0x28>)
 802784c:	681b      	ldr	r3, [r3, #0]
 802784e:	4621      	mov	r1, r4
 8027850:	4798      	blx	r3
 8027852:	6030      	str	r0, [r6, #0]
    *letter_next = *letter != '\0' ? _lv_txt_encoded_next(&txt[*ofs], NULL) : 0;
 8027854:	b128      	cbz	r0, 8027862 <_lv_txt_encoded_letter_next_2+0x22>
 8027856:	6820      	ldr	r0, [r4, #0]
 8027858:	4b03      	ldr	r3, [pc, #12]	@ (8027868 <_lv_txt_encoded_letter_next_2+0x28>)
 802785a:	681b      	ldr	r3, [r3, #0]
 802785c:	2100      	movs	r1, #0
 802785e:	4438      	add	r0, r7
 8027860:	4798      	blx	r3
 8027862:	6028      	str	r0, [r5, #0]
}
 8027864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027866:	bf00      	nop
 8027868:	20000084 	.word	0x20000084

0802786c <lv_txt_get_width>:
{
 802786c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027870:	b085      	sub	sp, #20
 8027872:	f89d 8030 	ldrb.w	r8, [sp, #48]	@ 0x30
    if(txt == NULL) return 0;
 8027876:	2800      	cmp	r0, #0
 8027878:	d03b      	beq.n	80278f2 <lv_txt_get_width+0x86>
 802787a:	460c      	mov	r4, r1
 802787c:	4615      	mov	r5, r2
 802787e:	461e      	mov	r6, r3
 8027880:	4607      	mov	r7, r0
    if(font == NULL) return 0;
 8027882:	2a00      	cmp	r2, #0
 8027884:	d038      	beq.n	80278f8 <lv_txt_get_width+0x8c>
    if(txt[0] == '\0') return 0;
 8027886:	7803      	ldrb	r3, [r0, #0]
 8027888:	2b00      	cmp	r3, #0
 802788a:	d038      	beq.n	80278fe <lv_txt_get_width+0x92>
    uint32_t i                   = 0;
 802788c:	2300      	movs	r3, #0
 802788e:	9303      	str	r3, [sp, #12]
    lv_text_cmd_state_t cmd_state = LV_TEXT_CMD_STATE_WAIT;
 8027890:	f88d 300b 	strb.w	r3, [sp, #11]
    if(length != 0) {
 8027894:	bb11      	cbnz	r1, 80278dc <lv_txt_get_width+0x70>
    lv_coord_t width             = 0;
 8027896:	4699      	mov	r9, r3
 8027898:	e033      	b.n	8027902 <lv_txt_get_width+0x96>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 802789a:	9a01      	ldr	r2, [sp, #4]
 802789c:	9900      	ldr	r1, [sp, #0]
 802789e:	4628      	mov	r0, r5
 80278a0:	f7ea f99c 	bl	8011bdc <lv_font_get_glyph_width>
 80278a4:	b203      	sxth	r3, r0
            if(char_width > 0) {
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	dd04      	ble.n	80278b4 <lv_txt_get_width+0x48>
                width += char_width;
 80278aa:	4448      	add	r0, r9
                width += letter_space;
 80278ac:	fa16 f080 	uxtah	r0, r6, r0
 80278b0:	fa0f f980 	sxth.w	r9, r0
        while(i < length) {
 80278b4:	9b03      	ldr	r3, [sp, #12]
 80278b6:	42a3      	cmp	r3, r4
 80278b8:	d213      	bcs.n	80278e2 <lv_txt_get_width+0x76>
            _lv_txt_encoded_letter_next_2(txt, &letter, &letter_next, &i);
 80278ba:	ab03      	add	r3, sp, #12
 80278bc:	aa01      	add	r2, sp, #4
 80278be:	4669      	mov	r1, sp
 80278c0:	4638      	mov	r0, r7
 80278c2:	f7ff ffbd 	bl	8027840 <_lv_txt_encoded_letter_next_2>
            if((flag & LV_TEXT_FLAG_RECOLOR) != 0) {
 80278c6:	f018 0f01 	tst.w	r8, #1
 80278ca:	d0e6      	beq.n	802789a <lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
 80278cc:	9900      	ldr	r1, [sp, #0]
 80278ce:	f10d 000b 	add.w	r0, sp, #11
 80278d2:	f7ff fde9 	bl	80274a8 <_lv_txt_is_cmd>
 80278d6:	2800      	cmp	r0, #0
 80278d8:	d0df      	beq.n	802789a <lv_txt_get_width+0x2e>
 80278da:	e7eb      	b.n	80278b4 <lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
 80278dc:	f04f 0900 	mov.w	r9, #0
 80278e0:	e7e8      	b.n	80278b4 <lv_txt_get_width+0x48>
        if(width > 0) {
 80278e2:	f1b9 0f00 	cmp.w	r9, #0
 80278e6:	dd0c      	ble.n	8027902 <lv_txt_get_width+0x96>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 80278e8:	eba9 0606 	sub.w	r6, r9, r6
 80278ec:	fa0f f986 	sxth.w	r9, r6
 80278f0:	e007      	b.n	8027902 <lv_txt_get_width+0x96>
    if(txt == NULL) return 0;
 80278f2:	f04f 0900 	mov.w	r9, #0
 80278f6:	e004      	b.n	8027902 <lv_txt_get_width+0x96>
    if(font == NULL) return 0;
 80278f8:	f04f 0900 	mov.w	r9, #0
 80278fc:	e001      	b.n	8027902 <lv_txt_get_width+0x96>
    if(txt[0] == '\0') return 0;
 80278fe:	f04f 0900 	mov.w	r9, #0
}
 8027902:	4648      	mov	r0, r9
 8027904:	b005      	add	sp, #20
 8027906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802790a <lv_txt_get_size>:
{
 802790a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802790e:	b087      	sub	sp, #28
 8027910:	4604      	mov	r4, r0
 8027912:	9303      	str	r3, [sp, #12]
 8027914:	f9bd a040 	ldrsh.w	sl, [sp, #64]	@ 0x40
 8027918:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 802791c:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
    size_res->x = 0;
 8027920:	2000      	movs	r0, #0
 8027922:	8020      	strh	r0, [r4, #0]
    size_res->y = 0;
 8027924:	8060      	strh	r0, [r4, #2]
    if(text == NULL) return;
 8027926:	2900      	cmp	r1, #0
 8027928:	d04d      	beq.n	80279c6 <lv_txt_get_size+0xbc>
 802792a:	4693      	mov	fp, r2
 802792c:	4688      	mov	r8, r1
    if(font == NULL) return;
 802792e:	2a00      	cmp	r2, #0
 8027930:	d049      	beq.n	80279c6 <lv_txt_get_size+0xbc>
    if(flag & LV_TEXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8027932:	f016 0f02 	tst.w	r6, #2
 8027936:	d001      	beq.n	802793c <lv_txt_get_size+0x32>
 8027938:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
 802793c:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
    uint16_t letter_height = lv_font_get_line_height(font);
 8027940:	fa1f f987 	uxth.w	r9, r7
    uint32_t line_start     = 0;
 8027944:	2500      	movs	r5, #0
 8027946:	9705      	str	r7, [sp, #20]
 8027948:	9304      	str	r3, [sp, #16]
    while(text[line_start] != '\0') {
 802794a:	eb08 0705 	add.w	r7, r8, r5
 802794e:	f818 3005 	ldrb.w	r3, [r8, r5]
 8027952:	b32b      	cbz	r3, 80279a0 <lv_txt_get_size+0x96>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, NULL, flag);
 8027954:	9601      	str	r6, [sp, #4]
 8027956:	2300      	movs	r3, #0
 8027958:	9300      	str	r3, [sp, #0]
 802795a:	9b04      	ldr	r3, [sp, #16]
 802795c:	9a03      	ldr	r2, [sp, #12]
 802795e:	4659      	mov	r1, fp
 8027960:	4638      	mov	r0, r7
 8027962:	f7ff fe7d 	bl	8027660 <_lv_txt_get_next_line>
 8027966:	4601      	mov	r1, r0
 8027968:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
 802796a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 802796e:	eb03 0209 	add.w	r2, r3, r9
 8027972:	4452      	add	r2, sl
 8027974:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8027978:	d225      	bcs.n	80279c6 <lv_txt_get_size+0xbc>
            size_res->y += letter_height;
 802797a:	fa19 f383 	uxtah	r3, r9, r3
 802797e:	b29b      	uxth	r3, r3
 8027980:	8063      	strh	r3, [r4, #2]
            size_res->y += line_space;
 8027982:	4453      	add	r3, sl
 8027984:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
 8027986:	9600      	str	r6, [sp, #0]
 8027988:	9b03      	ldr	r3, [sp, #12]
 802798a:	465a      	mov	r2, fp
 802798c:	4638      	mov	r0, r7
 802798e:	f7ff ff6d 	bl	802786c <lv_txt_get_width>
        size_res->x = LV_MAX(act_line_length, size_res->x);
 8027992:	f9b4 3000 	ldrsh.w	r3, [r4]
 8027996:	4283      	cmp	r3, r0
 8027998:	bfb8      	it	lt
 802799a:	4603      	movlt	r3, r0
 802799c:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
 802799e:	e7d4      	b.n	802794a <lv_txt_get_size+0x40>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80279a0:	9f05      	ldr	r7, [sp, #20]
 80279a2:	b165      	cbz	r5, 80279be <lv_txt_get_size+0xb4>
 80279a4:	44a8      	add	r8, r5
 80279a6:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80279aa:	2b0a      	cmp	r3, #10
 80279ac:	d001      	beq.n	80279b2 <lv_txt_get_size+0xa8>
 80279ae:	2b0d      	cmp	r3, #13
 80279b0:	d105      	bne.n	80279be <lv_txt_get_size+0xb4>
        size_res->y += letter_height + line_space;
 80279b2:	8862      	ldrh	r2, [r4, #2]
 80279b4:	eb09 030a 	add.w	r3, r9, sl
 80279b8:	fa12 f383 	uxtah	r3, r2, r3
 80279bc:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
 80279be:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80279c2:	b91b      	cbnz	r3, 80279cc <lv_txt_get_size+0xc2>
        size_res->y = letter_height;
 80279c4:	8067      	strh	r7, [r4, #2]
}
 80279c6:	b007      	add	sp, #28
 80279c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y -= line_space;
 80279cc:	b29b      	uxth	r3, r3
 80279ce:	eba3 030a 	sub.w	r3, r3, sl
 80279d2:	8063      	strh	r3, [r4, #2]
 80279d4:	e7f7      	b.n	80279c6 <lv_txt_get_size+0xbc>

080279d6 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80279d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80279da:	4681      	mov	r9, r0
 80279dc:	4688      	mov	r8, r1
 80279de:	4614      	mov	r4, r2
 80279e0:	461f      	mov	r7, r3
 80279e2:	f8dd a020 	ldr.w	sl, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 80279e6:	e007      	b.n	80279f8 <_lv_utils_bsearch+0x22>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
 80279e8:	f014 0f01 	tst.w	r4, #1
 80279ec:	bf0c      	ite	eq
 80279ee:	2401      	moveq	r4, #1
 80279f0:	2400      	movne	r4, #0
 80279f2:	1b2c      	subs	r4, r5, r4
            base = (middle += size);
 80279f4:	eb06 0807 	add.w	r8, r6, r7
    for(middle = base; n != 0;) {
 80279f8:	b15c      	cbz	r4, 8027a12 <_lv_utils_bsearch+0x3c>
        middle += (n / 2) * size;
 80279fa:	0865      	lsrs	r5, r4, #1
 80279fc:	fb07 8605 	mla	r6, r7, r5, r8
        if((c = (*cmp)(key, middle)) > 0) {
 8027a00:	4631      	mov	r1, r6
 8027a02:	4648      	mov	r0, r9
 8027a04:	47d0      	blx	sl
 8027a06:	2800      	cmp	r0, #0
 8027a08:	dcee      	bgt.n	80279e8 <_lv_utils_bsearch+0x12>
        }
        else if(c < 0) {
 8027a0a:	2800      	cmp	r0, #0
 8027a0c:	da02      	bge.n	8027a14 <_lv_utils_bsearch+0x3e>
            n /= 2;
 8027a0e:	462c      	mov	r4, r5
 8027a10:	e7f2      	b.n	80279f8 <_lv_utils_bsearch+0x22>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
 8027a12:	2600      	movs	r6, #0
}
 8027a14:	4630      	mov	r0, r6
 8027a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08027a1c <lv_win_constructor>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_win_constructor(const lv_obj_class_t * class_p, lv_obj_t * obj)
{
 8027a1c:	b570      	push	{r4, r5, r6, lr}
 8027a1e:	460c      	mov	r4, r1
    LV_UNUSED(class_p);
    lv_obj_t * parent = lv_obj_get_parent(obj);
 8027a20:	4608      	mov	r0, r1
 8027a22:	f7f5 fba7 	bl	801d174 <lv_obj_get_parent>
 8027a26:	4606      	mov	r6, r0
    lv_obj_set_size(obj, lv_obj_get_width(parent), lv_obj_get_height(parent));
 8027a28:	f7f1 fe52 	bl	80196d0 <lv_obj_get_width>
 8027a2c:	4605      	mov	r5, r0
 8027a2e:	4630      	mov	r0, r6
 8027a30:	f7f1 fe55 	bl	80196de <lv_obj_get_height>
 8027a34:	4602      	mov	r2, r0
 8027a36:	4629      	mov	r1, r5
 8027a38:	4620      	mov	r0, r4
 8027a3a:	f7f1 fd83 	bl	8019544 <lv_obj_set_size>
    lv_obj_set_flex_flow(obj, LV_FLEX_FLOW_COLUMN);
 8027a3e:	2101      	movs	r1, #1
 8027a40:	4620      	mov	r0, r4
 8027a42:	f7ea f80d 	bl	8011a60 <lv_obj_set_flex_flow>

    lv_obj_t * header = lv_obj_create(obj);
 8027a46:	4620      	mov	r0, r4
 8027a48:	f7f0 fcbe 	bl	80183c8 <lv_obj_create>
 8027a4c:	4605      	mov	r5, r0
    lv_obj_set_size(header, LV_PCT(100), create_header_height);
 8027a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8027a8c <lv_win_constructor+0x70>)
 8027a50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8027a54:	f242 0164 	movw	r1, #8292	@ 0x2064
 8027a58:	f7f1 fd74 	bl	8019544 <lv_obj_set_size>
    lv_obj_set_flex_flow(header, LV_FLEX_FLOW_ROW);
 8027a5c:	2100      	movs	r1, #0
 8027a5e:	4628      	mov	r0, r5
 8027a60:	f7e9 fffe 	bl	8011a60 <lv_obj_set_flex_flow>
    lv_obj_set_flex_align(header, LV_FLEX_ALIGN_START, LV_FLEX_ALIGN_CENTER, LV_FLEX_ALIGN_CENTER);
 8027a64:	2302      	movs	r3, #2
 8027a66:	461a      	mov	r2, r3
 8027a68:	2100      	movs	r1, #0
 8027a6a:	4628      	mov	r0, r5
 8027a6c:	f7ea f824 	bl	8011ab8 <lv_obj_set_flex_align>

    lv_obj_t * cont = lv_obj_create(obj);
 8027a70:	4620      	mov	r0, r4
 8027a72:	f7f0 fca9 	bl	80183c8 <lv_obj_create>
 8027a76:	4604      	mov	r4, r0
    lv_obj_set_flex_grow(cont, 1);
 8027a78:	2101      	movs	r1, #1
 8027a7a:	f7ea f841 	bl	8011b00 <lv_obj_set_flex_grow>
    lv_obj_set_width(cont, LV_PCT(100));
 8027a7e:	f242 0164 	movw	r1, #8292	@ 0x2064
 8027a82:	4620      	mov	r0, r4
 8027a84:	f7f1 fd30 	bl	80194e8 <lv_obj_set_width>
}
 8027a88:	bd70      	pop	{r4, r5, r6, pc}
 8027a8a:	bf00      	nop
 8027a8c:	2000898e 	.word	0x2000898e

08027a90 <lv_scr_act>:
{
 8027a90:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
 8027a92:	f7eb fbf3 	bl	801327c <lv_disp_get_default>
 8027a96:	f7df fdc1 	bl	800761c <lv_disp_get_scr_act>
}
 8027a9a:	bd08      	pop	{r3, pc}

08027a9c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8027a9c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8027a9e:	e7fe      	b.n	8027a9e <Error_Handler+0x2>

08027aa0 <SystemClock_Config>:
{
 8027aa0:	b500      	push	{lr}
 8027aa2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8027aa4:	2230      	movs	r2, #48	@ 0x30
 8027aa6:	2100      	movs	r1, #0
 8027aa8:	a808      	add	r0, sp, #32
 8027aaa:	f001 fd68 	bl	802957e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8027aae:	2300      	movs	r3, #0
 8027ab0:	9303      	str	r3, [sp, #12]
 8027ab2:	9304      	str	r3, [sp, #16]
 8027ab4:	9305      	str	r3, [sp, #20]
 8027ab6:	9306      	str	r3, [sp, #24]
 8027ab8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8027aba:	9301      	str	r3, [sp, #4]
 8027abc:	4a21      	ldr	r2, [pc, #132]	@ (8027b44 <SystemClock_Config+0xa4>)
 8027abe:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8027ac0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8027ac4:	6411      	str	r1, [r2, #64]	@ 0x40
 8027ac6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8027ac8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8027acc:	9201      	str	r2, [sp, #4]
 8027ace:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8027ad0:	9302      	str	r3, [sp, #8]
 8027ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8027b48 <SystemClock_Config+0xa8>)
 8027ad4:	681a      	ldr	r2, [r3, #0]
 8027ad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8027ada:	601a      	str	r2, [r3, #0]
 8027adc:	681b      	ldr	r3, [r3, #0]
 8027ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8027ae2:	9302      	str	r3, [sp, #8]
 8027ae4:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8027ae6:	2301      	movs	r3, #1
 8027ae8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8027aea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8027aee:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8027af0:	2302      	movs	r3, #2
 8027af2:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8027af4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8027af8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8027afa:	2208      	movs	r2, #8
 8027afc:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8027afe:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8027b02:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8027b04:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8027b06:	2307      	movs	r3, #7
 8027b08:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8027b0a:	a808      	add	r0, sp, #32
 8027b0c:	f000 fe9c 	bl	8028848 <HAL_RCC_OscConfig>
 8027b10:	b998      	cbnz	r0, 8027b3a <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8027b12:	230f      	movs	r3, #15
 8027b14:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8027b16:	2302      	movs	r3, #2
 8027b18:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8027b1a:	2300      	movs	r3, #0
 8027b1c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8027b1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8027b22:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8027b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8027b28:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8027b2a:	2105      	movs	r1, #5
 8027b2c:	a803      	add	r0, sp, #12
 8027b2e:	f001 f8f5 	bl	8028d1c <HAL_RCC_ClockConfig>
 8027b32:	b920      	cbnz	r0, 8027b3e <SystemClock_Config+0x9e>
}
 8027b34:	b015      	add	sp, #84	@ 0x54
 8027b36:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8027b3a:	f7ff ffaf 	bl	8027a9c <Error_Handler>
    Error_Handler();
 8027b3e:	f7ff ffad 	bl	8027a9c <Error_Handler>
 8027b42:	bf00      	nop
 8027b44:	40023800 	.word	0x40023800
 8027b48:	40007000 	.word	0x40007000

08027b4c <main>:
{
 8027b4c:	b510      	push	{r4, lr}
  HAL_Init();
 8027b4e:	f000 fa8f 	bl	8028070 <HAL_Init>
  SystemClock_Config();
 8027b52:	f7ff ffa5 	bl	8027aa0 <SystemClock_Config>
  MX_GPIO_Init();
 8027b56:	f7d8 fbe7 	bl	8000328 <MX_GPIO_Init>
  MX_DMA_Init();
 8027b5a:	f7d8 fbcb 	bl	80002f4 <MX_DMA_Init>
  MX_SPI1_Init();
 8027b5e:	f000 f82b 	bl	8027bb8 <MX_SPI1_Init>
  lv_init();
 8027b62:	f7f0 fc05 	bl	8018370 <lv_init>
  lv_port_disp_init();
 8027b66:	f7d8 fb97 	bl	8000298 <lv_port_disp_init>
  lv_obj_set_style_bg_color(lv_scr_act(), lv_color_hex(0x003a57), LV_PART_MAIN);
 8027b6a:	f7ff ff91 	bl	8027a90 <lv_scr_act>
 8027b6e:	2200      	movs	r2, #0
 8027b70:	f64c 2101 	movw	r1, #51713	@ 0xca01
 8027b74:	f7f5 facd 	bl	801d112 <lv_obj_set_style_bg_color>
  lv_obj_set_style_text_color(lv_scr_act(), lv_color_hex(0xffffff), LV_PART_MAIN);
 8027b78:	f7ff ff8a 	bl	8027a90 <lv_scr_act>
 8027b7c:	2200      	movs	r2, #0
 8027b7e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8027b82:	f7f5 fadb 	bl	801d13c <lv_obj_set_style_text_color>
  lv_obj_t * spinner = lv_spinner_create(lv_scr_act(), 1000, 60);
 8027b86:	f7ff ff83 	bl	8027a90 <lv_scr_act>
 8027b8a:	223c      	movs	r2, #60	@ 0x3c
 8027b8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8027b90:	f7f9 f8a2 	bl	8020cd8 <lv_spinner_create>
 8027b94:	4604      	mov	r4, r0
  lv_obj_set_size(spinner, 64, 64);
 8027b96:	2240      	movs	r2, #64	@ 0x40
 8027b98:	4611      	mov	r1, r2
 8027b9a:	f7f1 fcd3 	bl	8019544 <lv_obj_set_size>
  lv_obj_align(spinner, LV_ALIGN_BOTTOM_MID, 0, 0);
 8027b9e:	2300      	movs	r3, #0
 8027ba0:	461a      	mov	r2, r3
 8027ba2:	2105      	movs	r1, #5
 8027ba4:	4620      	mov	r0, r4
 8027ba6:	f7f1 fd33 	bl	8019610 <lv_obj_align>
    lv_timer_handler();  // to be added
 8027baa:	f7fe fe8d 	bl	80268c8 <lv_timer_handler>
	  HAL_Delay(5);  // to be added
 8027bae:	2005      	movs	r0, #5
 8027bb0:	f000 fa8a 	bl	80280c8 <HAL_Delay>
  while (1)
 8027bb4:	e7f9      	b.n	8027baa <main+0x5e>
	...

08027bb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8027bb8:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8027bba:	480f      	ldr	r0, [pc, #60]	@ (8027bf8 <MX_SPI1_Init+0x40>)
 8027bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8027bfc <MX_SPI1_Init+0x44>)
 8027bbe:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8027bc0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8027bc4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8027bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8027bca:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8027bcc:	2300      	movs	r3, #0
 8027bce:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8027bd0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8027bd2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8027bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8027bd8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8027bda:	2208      	movs	r2, #8
 8027bdc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8027bde:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8027be0:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027be2:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8027be4:	230a      	movs	r3, #10
 8027be6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8027be8:	f001 f9e0 	bl	8028fac <HAL_SPI_Init>
 8027bec:	b900      	cbnz	r0, 8027bf0 <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8027bee:	bd08      	pop	{r3, pc}
    Error_Handler();
 8027bf0:	f7ff ff54 	bl	8027a9c <Error_Handler>
}
 8027bf4:	e7fb      	b.n	8027bee <MX_SPI1_Init+0x36>
 8027bf6:	bf00      	nop
 8027bf8:	200089f0 	.word	0x200089f0
 8027bfc:	40013000 	.word	0x40013000

08027c00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8027c00:	b530      	push	{r4, r5, lr}
 8027c02:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8027c04:	2300      	movs	r3, #0
 8027c06:	9303      	str	r3, [sp, #12]
 8027c08:	9304      	str	r3, [sp, #16]
 8027c0a:	9305      	str	r3, [sp, #20]
 8027c0c:	9306      	str	r3, [sp, #24]
 8027c0e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8027c10:	6802      	ldr	r2, [r0, #0]
 8027c12:	4b25      	ldr	r3, [pc, #148]	@ (8027ca8 <HAL_SPI_MspInit+0xa8>)
 8027c14:	429a      	cmp	r2, r3
 8027c16:	d001      	beq.n	8027c1c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8027c18:	b009      	add	sp, #36	@ 0x24
 8027c1a:	bd30      	pop	{r4, r5, pc}
 8027c1c:	4604      	mov	r4, r0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8027c1e:	2500      	movs	r5, #0
 8027c20:	9501      	str	r5, [sp, #4]
 8027c22:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8027c26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8027c28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8027c2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8027c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8027c30:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8027c34:	9201      	str	r2, [sp, #4]
 8027c36:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8027c38:	9502      	str	r5, [sp, #8]
 8027c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8027c3c:	f042 0201 	orr.w	r2, r2, #1
 8027c40:	631a      	str	r2, [r3, #48]	@ 0x30
 8027c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027c44:	f003 0301 	and.w	r3, r3, #1
 8027c48:	9302      	str	r3, [sp, #8]
 8027c4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8027c4c:	23e0      	movs	r3, #224	@ 0xe0
 8027c4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8027c50:	2302      	movs	r3, #2
 8027c52:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8027c54:	2305      	movs	r3, #5
 8027c56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8027c58:	a903      	add	r1, sp, #12
 8027c5a:	4814      	ldr	r0, [pc, #80]	@ (8027cac <HAL_SPI_MspInit+0xac>)
 8027c5c:	f000 fcd8 	bl	8028610 <HAL_GPIO_Init>
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8027c60:	4813      	ldr	r0, [pc, #76]	@ (8027cb0 <HAL_SPI_MspInit+0xb0>)
 8027c62:	4b14      	ldr	r3, [pc, #80]	@ (8027cb4 <HAL_SPI_MspInit+0xb4>)
 8027c64:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8027c66:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 8027c6a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8027c6c:	2340      	movs	r3, #64	@ 0x40
 8027c6e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8027c70:	60c5      	str	r5, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8027c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027c76:	6103      	str	r3, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8027c78:	6145      	str	r5, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8027c7a:	6185      	str	r5, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8027c7c:	61c5      	str	r5, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8027c7e:	6205      	str	r5, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8027c80:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8027c82:	f000 fb29 	bl	80282d8 <HAL_DMA_Init>
 8027c86:	b958      	cbnz	r0, 8027ca0 <HAL_SPI_MspInit+0xa0>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8027c88:	4b09      	ldr	r3, [pc, #36]	@ (8027cb0 <HAL_SPI_MspInit+0xb0>)
 8027c8a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8027c8c:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8027c8e:	2200      	movs	r2, #0
 8027c90:	4611      	mov	r1, r2
 8027c92:	2023      	movs	r0, #35	@ 0x23
 8027c94:	f000 fa72 	bl	802817c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8027c98:	2023      	movs	r0, #35	@ 0x23
 8027c9a:	f000 fa7f 	bl	802819c <HAL_NVIC_EnableIRQ>
}
 8027c9e:	e7bb      	b.n	8027c18 <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8027ca0:	f7ff fefc 	bl	8027a9c <Error_Handler>
 8027ca4:	e7f0      	b.n	8027c88 <HAL_SPI_MspInit+0x88>
 8027ca6:	bf00      	nop
 8027ca8:	40013000 	.word	0x40013000
 8027cac:	40020000 	.word	0x40020000
 8027cb0:	20008990 	.word	0x20008990
 8027cb4:	40026458 	.word	0x40026458

08027cb8 <ST7789V_WriteCommand>:
 * @brief 
 * 
 * @param cmd 
 */
static void ST7789V_WriteCommand(uint8_t cmd)
{
 8027cb8:	b510      	push	{r4, lr}
 8027cba:	b082      	sub	sp, #8
 8027cbc:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7789V_Select();
 8027cc0:	4c0c      	ldr	r4, [pc, #48]	@ (8027cf4 <ST7789V_WriteCommand+0x3c>)
 8027cc2:	2200      	movs	r2, #0
 8027cc4:	2104      	movs	r1, #4
 8027cc6:	4620      	mov	r0, r4
 8027cc8:	f000 fd98 	bl	80287fc <HAL_GPIO_WritePin>
	ST7789V_DC_Clr();
 8027ccc:	2200      	movs	r2, #0
 8027cce:	2102      	movs	r1, #2
 8027cd0:	4620      	mov	r0, r4
 8027cd2:	f000 fd93 	bl	80287fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789V_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8027cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027cda:	2201      	movs	r2, #1
 8027cdc:	f10d 0107 	add.w	r1, sp, #7
 8027ce0:	4805      	ldr	r0, [pc, #20]	@ (8027cf8 <ST7789V_WriteCommand+0x40>)
 8027ce2:	f001 f9c2 	bl	802906a <HAL_SPI_Transmit>
	ST7789V_UnSelect();
 8027ce6:	2201      	movs	r2, #1
 8027ce8:	2104      	movs	r1, #4
 8027cea:	4620      	mov	r0, r4
 8027cec:	f000 fd86 	bl	80287fc <HAL_GPIO_WritePin>
}
 8027cf0:	b002      	add	sp, #8
 8027cf2:	bd10      	pop	{r4, pc}
 8027cf4:	40020000 	.word	0x40020000
 8027cf8:	200089f0 	.word	0x200089f0

08027cfc <ST7789V_WriteSmallData>:
 * @brief Write data to ST7789V controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789V_WriteSmallData(uint8_t data)
{
 8027cfc:	b510      	push	{r4, lr}
 8027cfe:	b082      	sub	sp, #8
 8027d00:	f88d 0007 	strb.w	r0, [sp, #7]
	 ST7789V_Select();
 8027d04:	4c0c      	ldr	r4, [pc, #48]	@ (8027d38 <ST7789V_WriteSmallData+0x3c>)
 8027d06:	2200      	movs	r2, #0
 8027d08:	2104      	movs	r1, #4
 8027d0a:	4620      	mov	r0, r4
 8027d0c:	f000 fd76 	bl	80287fc <HAL_GPIO_WritePin>
	ST7789V_DC_Set();
 8027d10:	2201      	movs	r2, #1
 8027d12:	2102      	movs	r1, #2
 8027d14:	4620      	mov	r0, r4
 8027d16:	f000 fd71 	bl	80287fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789V_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8027d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8027d1e:	2201      	movs	r2, #1
 8027d20:	f10d 0107 	add.w	r1, sp, #7
 8027d24:	4805      	ldr	r0, [pc, #20]	@ (8027d3c <ST7789V_WriteSmallData+0x40>)
 8027d26:	f001 f9a0 	bl	802906a <HAL_SPI_Transmit>
	 ST7789V_UnSelect();
 8027d2a:	2201      	movs	r2, #1
 8027d2c:	2104      	movs	r1, #4
 8027d2e:	4620      	mov	r0, r4
 8027d30:	f000 fd64 	bl	80287fc <HAL_GPIO_WritePin>
}
 8027d34:	b002      	add	sp, #8
 8027d36:	bd10      	pop	{r4, pc}
 8027d38:	40020000 	.word	0x40020000
 8027d3c:	200089f0 	.word	0x200089f0

08027d40 <ST7789V_WriteData>:
{
 8027d40:	b570      	push	{r4, r5, r6, lr}
 8027d42:	4606      	mov	r6, r0
 8027d44:	460d      	mov	r5, r1
	ST7789V_Select();
 8027d46:	4c11      	ldr	r4, [pc, #68]	@ (8027d8c <ST7789V_WriteData+0x4c>)
 8027d48:	2200      	movs	r2, #0
 8027d4a:	2104      	movs	r1, #4
 8027d4c:	4620      	mov	r0, r4
 8027d4e:	f000 fd55 	bl	80287fc <HAL_GPIO_WritePin>
	ST7789V_DC_Set();
 8027d52:	2201      	movs	r2, #1
 8027d54:	2102      	movs	r1, #2
 8027d56:	4620      	mov	r0, r4
 8027d58:	f000 fd50 	bl	80287fc <HAL_GPIO_WritePin>
	while (buff_size > 0) {
 8027d5c:	e00d      	b.n	8027d7a <ST7789V_WriteData+0x3a>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8027d5e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8027d62:	42ac      	cmp	r4, r5
 8027d64:	bf28      	it	cs
 8027d66:	462c      	movcs	r4, r5
 8027d68:	b2a4      	uxth	r4, r4
		HAL_SPI_Transmit(&ST7789V_SPI_PORT, buff, chunk_size, 10);
 8027d6a:	230a      	movs	r3, #10
 8027d6c:	4622      	mov	r2, r4
 8027d6e:	4631      	mov	r1, r6
 8027d70:	4807      	ldr	r0, [pc, #28]	@ (8027d90 <ST7789V_WriteData+0x50>)
 8027d72:	f001 f97a 	bl	802906a <HAL_SPI_Transmit>
		buff += chunk_size;
 8027d76:	4426      	add	r6, r4
		buff_size -= chunk_size;
 8027d78:	1b2d      	subs	r5, r5, r4
	while (buff_size > 0) {
 8027d7a:	2d00      	cmp	r5, #0
 8027d7c:	d1ef      	bne.n	8027d5e <ST7789V_WriteData+0x1e>
	ST7789V_UnSelect();
 8027d7e:	2201      	movs	r2, #1
 8027d80:	2104      	movs	r1, #4
 8027d82:	4802      	ldr	r0, [pc, #8]	@ (8027d8c <ST7789V_WriteData+0x4c>)
 8027d84:	f000 fd3a 	bl	80287fc <HAL_GPIO_WritePin>
}
 8027d88:	bd70      	pop	{r4, r5, r6, pc}
 8027d8a:	bf00      	nop
 8027d8c:	40020000 	.word	0x40020000
 8027d90:	200089f0 	.word	0x200089f0

08027d94 <ST7789V_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in ST7789V.h)
 * @return none
 */
void ST7789V_SetRotation(uint8_t m)
{
 8027d94:	b510      	push	{r4, lr}
 8027d96:	4604      	mov	r4, r0
	ST7789V_WriteCommand(ST7789V_MADCTL);	// MADCTL
 8027d98:	2036      	movs	r0, #54	@ 0x36
 8027d9a:	f7ff ff8d 	bl	8027cb8 <ST7789V_WriteCommand>
	switch (m) {
 8027d9e:	2c03      	cmp	r4, #3
 8027da0:	d806      	bhi.n	8027db0 <ST7789V_SetRotation+0x1c>
 8027da2:	e8df f004 	tbb	[pc, r4]
 8027da6:	0602      	.short	0x0602
 8027da8:	0e0a      	.short	0x0e0a
	case 0:
		ST7789V_WriteSmallData(ST7789V_MADCTL_MX | ST7789V_MADCTL_MY | ST7789V_MADCTL_RGB);
 8027daa:	20c0      	movs	r0, #192	@ 0xc0
 8027dac:	f7ff ffa6 	bl	8027cfc <ST7789V_WriteSmallData>
		ST7789V_WriteSmallData(ST7789V_MADCTL_MX | ST7789V_MADCTL_MV | ST7789V_MADCTL_RGB);
		break;
	default:
		break;
	}
}
 8027db0:	bd10      	pop	{r4, pc}
		ST7789V_WriteSmallData(ST7789V_MADCTL_MY | ST7789V_MADCTL_MV | ST7789V_MADCTL_RGB);
 8027db2:	20a0      	movs	r0, #160	@ 0xa0
 8027db4:	f7ff ffa2 	bl	8027cfc <ST7789V_WriteSmallData>
		break;
 8027db8:	e7fa      	b.n	8027db0 <ST7789V_SetRotation+0x1c>
		ST7789V_WriteSmallData(ST7789V_MADCTL_RGB);
 8027dba:	2000      	movs	r0, #0
 8027dbc:	f7ff ff9e 	bl	8027cfc <ST7789V_WriteSmallData>
		break;
 8027dc0:	e7f6      	b.n	8027db0 <ST7789V_SetRotation+0x1c>
		ST7789V_WriteSmallData(ST7789V_MADCTL_MX | ST7789V_MADCTL_MV | ST7789V_MADCTL_RGB);
 8027dc2:	2060      	movs	r0, #96	@ 0x60
 8027dc4:	f7ff ff9a 	bl	8027cfc <ST7789V_WriteSmallData>
}
 8027dc8:	e7f2      	b.n	8027db0 <ST7789V_SetRotation+0x1c>

08027dca <ST7789V_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
void ST7789V_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8027dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027dcc:	b083      	sub	sp, #12
 8027dce:	4607      	mov	r7, r0
 8027dd0:	460d      	mov	r5, r1
 8027dd2:	4616      	mov	r6, r2
 8027dd4:	461c      	mov	r4, r3
	// ST7789V_Select();
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
	
	/* Column Address set */
	ST7789V_WriteCommand(ST7789V_CASET); 
 8027dd6:	202a      	movs	r0, #42	@ 0x2a
 8027dd8:	f7ff ff6e 	bl	8027cb8 <ST7789V_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8027ddc:	0a3b      	lsrs	r3, r7, #8
 8027dde:	f88d 3004 	strb.w	r3, [sp, #4]
 8027de2:	f88d 7005 	strb.w	r7, [sp, #5]
 8027de6:	0a33      	lsrs	r3, r6, #8
 8027de8:	f88d 3006 	strb.w	r3, [sp, #6]
 8027dec:	f88d 6007 	strb.w	r6, [sp, #7]
		ST7789V_WriteData(data, sizeof(data));
 8027df0:	2104      	movs	r1, #4
 8027df2:	eb0d 0001 	add.w	r0, sp, r1
 8027df6:	f7ff ffa3 	bl	8027d40 <ST7789V_WriteData>
	}

	/* Row Address set */
	ST7789V_WriteCommand(ST7789V_RASET);
 8027dfa:	202b      	movs	r0, #43	@ 0x2b
 8027dfc:	f7ff ff5c 	bl	8027cb8 <ST7789V_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8027e00:	0a2b      	lsrs	r3, r5, #8
 8027e02:	f88d 3004 	strb.w	r3, [sp, #4]
 8027e06:	f88d 5005 	strb.w	r5, [sp, #5]
 8027e0a:	0a23      	lsrs	r3, r4, #8
 8027e0c:	f88d 3006 	strb.w	r3, [sp, #6]
 8027e10:	f88d 4007 	strb.w	r4, [sp, #7]
		ST7789V_WriteData(data, sizeof(data));
 8027e14:	2104      	movs	r1, #4
 8027e16:	eb0d 0001 	add.w	r0, sp, r1
 8027e1a:	f7ff ff91 	bl	8027d40 <ST7789V_WriteData>
	}
	/* Write to RAM */
	ST7789V_WriteCommand(ST7789V_RAMWR);
 8027e1e:	202c      	movs	r0, #44	@ 0x2c
 8027e20:	f7ff ff4a 	bl	8027cb8 <ST7789V_WriteCommand>
	// ST7789V_UnSelect();
}
 8027e24:	b003      	add	sp, #12
 8027e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08027e28 <ST7789V_Init>:
 * @brief Initialize ST7789V controller
 * @param none
 * @return none
 */
void ST7789V_Init(void)
{
 8027e28:	b510      	push	{r4, lr}
	// #ifdef USE_DMA
	// 	memset(disp_buf, 0, sizeof(disp_buf));
	// #endif
	
	HAL_Delay(50);
 8027e2a:	2032      	movs	r0, #50	@ 0x32
 8027e2c:	f000 f94c 	bl	80280c8 <HAL_Delay>
	ST7789V_DC_Set();
 8027e30:	4c7b      	ldr	r4, [pc, #492]	@ (8028020 <ST7789V_Init+0x1f8>)
 8027e32:	2201      	movs	r2, #1
 8027e34:	2102      	movs	r1, #2
 8027e36:	4620      	mov	r0, r4
 8027e38:	f000 fce0 	bl	80287fc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8027e3c:	2032      	movs	r0, #50	@ 0x32
 8027e3e:	f000 f943 	bl	80280c8 <HAL_Delay>
	ST7789V_RST_Clr();
 8027e42:	2200      	movs	r2, #0
 8027e44:	2108      	movs	r1, #8
 8027e46:	4620      	mov	r0, r4
 8027e48:	f000 fcd8 	bl	80287fc <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8027e4c:	2019      	movs	r0, #25
 8027e4e:	f000 f93b 	bl	80280c8 <HAL_Delay>
    ST7789V_RST_Set();
 8027e52:	2201      	movs	r2, #1
 8027e54:	2108      	movs	r1, #8
 8027e56:	4620      	mov	r0, r4
 8027e58:	f000 fcd0 	bl	80287fc <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8027e5c:	2019      	movs	r0, #25
 8027e5e:	f000 f933 	bl	80280c8 <HAL_Delay>
    
	ST7789V_WriteCommand(ST7789V_MADCTL); 
 8027e62:	2036      	movs	r0, #54	@ 0x36
 8027e64:	f7ff ff28 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x00); 
 8027e68:	2000      	movs	r0, #0
 8027e6a:	f7ff ff47 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_COLMOD); 
 8027e6e:	203a      	movs	r0, #58	@ 0x3a
 8027e70:	f7ff ff22 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x05);
 8027e74:	2005      	movs	r0, #5
 8027e76:	f7ff ff41 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_INVON); 
 8027e7a:	2021      	movs	r0, #33	@ 0x21
 8027e7c:	f7ff ff1c 	bl	8027cb8 <ST7789V_WriteCommand>

	ST7789V_WriteCommand(ST7789V_CASET);
 8027e80:	202a      	movs	r0, #42	@ 0x2a
 8027e82:	f7ff ff19 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x00);
 8027e86:	2000      	movs	r0, #0
 8027e88:	f7ff ff38 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x00);
 8027e8c:	2000      	movs	r0, #0
 8027e8e:	f7ff ff35 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x01);
 8027e92:	2001      	movs	r0, #1
 8027e94:	f7ff ff32 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x3F);
 8027e98:	203f      	movs	r0, #63	@ 0x3f
 8027e9a:	f7ff ff2f 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_RASET);
 8027e9e:	202b      	movs	r0, #43	@ 0x2b
 8027ea0:	f7ff ff0a 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x00);
 8027ea4:	2000      	movs	r0, #0
 8027ea6:	f7ff ff29 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x00);
 8027eaa:	2000      	movs	r0, #0
 8027eac:	f7ff ff26 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x00);
 8027eb0:	2000      	movs	r0, #0
 8027eb2:	f7ff ff23 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0xEF);
 8027eb6:	20ef      	movs	r0, #239	@ 0xef
 8027eb8:	f7ff ff20 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_PORCTRL);
 8027ebc:	20b2      	movs	r0, #178	@ 0xb2
 8027ebe:	f7ff fefb 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x0C);
 8027ec2:	200c      	movs	r0, #12
 8027ec4:	f7ff ff1a 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x0C);
 8027ec8:	200c      	movs	r0, #12
 8027eca:	f7ff ff17 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x00);
 8027ece:	2000      	movs	r0, #0
 8027ed0:	f7ff ff14 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x33);
 8027ed4:	2033      	movs	r0, #51	@ 0x33
 8027ed6:	f7ff ff11 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x33);
 8027eda:	2033      	movs	r0, #51	@ 0x33
 8027edc:	f7ff ff0e 	bl	8027cfc <ST7789V_WriteSmallData>

	

	ST7789V_WriteCommand(ST7789V_GCTRL);
 8027ee0:	20b7      	movs	r0, #183	@ 0xb7
 8027ee2:	f7ff fee9 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x35); 
 8027ee6:	2035      	movs	r0, #53	@ 0x35
 8027ee8:	f7ff ff08 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_VCOMS);
 8027eec:	20b7      	movs	r0, #183	@ 0xb7
 8027eee:	f7ff fee3 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x1F);
 8027ef2:	201f      	movs	r0, #31
 8027ef4:	f7ff ff02 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_LCMCTRL);
 8027ef8:	20c0      	movs	r0, #192	@ 0xc0
 8027efa:	f7ff fedd 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x2C);
 8027efe:	202c      	movs	r0, #44	@ 0x2c
 8027f00:	f7ff fefc 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_VDVVRHEN);
 8027f04:	20c2      	movs	r0, #194	@ 0xc2
 8027f06:	f7ff fed7 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x01);
 8027f0a:	2001      	movs	r0, #1
 8027f0c:	f7ff fef6 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_VRHS);
 8027f10:	20c3      	movs	r0, #195	@ 0xc3
 8027f12:	f7ff fed1 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x12);   
 8027f16:	2012      	movs	r0, #18
 8027f18:	f7ff fef0 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_VDVSET);
 8027f1c:	20c4      	movs	r0, #196	@ 0xc4
 8027f1e:	f7ff fecb 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x20);
 8027f22:	2020      	movs	r0, #32
 8027f24:	f7ff feea 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_FRCTLR2);
 8027f28:	20c6      	movs	r0, #198	@ 0xc6
 8027f2a:	f7ff fec5 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0x0F); 
 8027f2e:	200f      	movs	r0, #15
 8027f30:	f7ff fee4 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_PWCTRL1);
 8027f34:	20d0      	movs	r0, #208	@ 0xd0
 8027f36:	f7ff febf 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0xA4);
 8027f3a:	20a4      	movs	r0, #164	@ 0xa4
 8027f3c:	f7ff fede 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0xA1);
 8027f40:	20a1      	movs	r0, #161	@ 0xa1
 8027f42:	f7ff fedb 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_PVGAMCTRL);
 8027f46:	20e0      	movs	r0, #224	@ 0xe0
 8027f48:	f7ff feb6 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0xD0);
 8027f4c:	20d0      	movs	r0, #208	@ 0xd0
 8027f4e:	f7ff fed5 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x08);
 8027f52:	2008      	movs	r0, #8
 8027f54:	f7ff fed2 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x11);
 8027f58:	2011      	movs	r0, #17
 8027f5a:	f7ff fecf 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x08);
 8027f5e:	2008      	movs	r0, #8
 8027f60:	f7ff fecc 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x0C);
 8027f64:	200c      	movs	r0, #12
 8027f66:	f7ff fec9 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x15);
 8027f6a:	2015      	movs	r0, #21
 8027f6c:	f7ff fec6 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x39);
 8027f70:	2039      	movs	r0, #57	@ 0x39
 8027f72:	f7ff fec3 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x33);
 8027f76:	2033      	movs	r0, #51	@ 0x33
 8027f78:	f7ff fec0 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x50);
 8027f7c:	2050      	movs	r0, #80	@ 0x50
 8027f7e:	f7ff febd 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x36);
 8027f82:	2036      	movs	r0, #54	@ 0x36
 8027f84:	f7ff feba 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x13);
 8027f88:	2013      	movs	r0, #19
 8027f8a:	f7ff feb7 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x14);
 8027f8e:	2014      	movs	r0, #20
 8027f90:	f7ff feb4 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x29);
 8027f94:	2029      	movs	r0, #41	@ 0x29
 8027f96:	f7ff feb1 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x2D);
 8027f9a:	202d      	movs	r0, #45	@ 0x2d
 8027f9c:	f7ff feae 	bl	8027cfc <ST7789V_WriteSmallData>

	ST7789V_WriteCommand(ST7789V_NVGAMCTRL);
 8027fa0:	20e1      	movs	r0, #225	@ 0xe1
 8027fa2:	f7ff fe89 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteSmallData(0xD0);
 8027fa6:	20d0      	movs	r0, #208	@ 0xd0
 8027fa8:	f7ff fea8 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x08);
 8027fac:	2008      	movs	r0, #8
 8027fae:	f7ff fea5 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x10);
 8027fb2:	2010      	movs	r0, #16
 8027fb4:	f7ff fea2 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x08);
 8027fb8:	2008      	movs	r0, #8
 8027fba:	f7ff fe9f 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x06);
 8027fbe:	2006      	movs	r0, #6
 8027fc0:	f7ff fe9c 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x06);
 8027fc4:	2006      	movs	r0, #6
 8027fc6:	f7ff fe99 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x39);
 8027fca:	2039      	movs	r0, #57	@ 0x39
 8027fcc:	f7ff fe96 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x44);
 8027fd0:	2044      	movs	r0, #68	@ 0x44
 8027fd2:	f7ff fe93 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x51);
 8027fd6:	2051      	movs	r0, #81	@ 0x51
 8027fd8:	f7ff fe90 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x0B);
 8027fdc:	200b      	movs	r0, #11
 8027fde:	f7ff fe8d 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x16);
 8027fe2:	2016      	movs	r0, #22
 8027fe4:	f7ff fe8a 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x14);
 8027fe8:	2014      	movs	r0, #20
 8027fea:	f7ff fe87 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x2F);
 8027fee:	202f      	movs	r0, #47	@ 0x2f
 8027ff0:	f7ff fe84 	bl	8027cfc <ST7789V_WriteSmallData>
	ST7789V_WriteSmallData(0x31);
 8027ff4:	2031      	movs	r0, #49	@ 0x31
 8027ff6:	f7ff fe81 	bl	8027cfc <ST7789V_WriteSmallData>

    ST7789V_WriteCommand (ST7789V_INVON);		//	Inversion ON
 8027ffa:	2021      	movs	r0, #33	@ 0x21
 8027ffc:	f7ff fe5c 	bl	8027cb8 <ST7789V_WriteCommand>
	ST7789V_WriteCommand (ST7789V_SLPOUT);	//	Out of sleep mode
 8028000:	2011      	movs	r0, #17
 8028002:	f7ff fe59 	bl	8027cb8 <ST7789V_WriteCommand>
  	ST7789V_WriteCommand (ST7789V_NORON);		//	Normal Display on
 8028006:	2013      	movs	r0, #19
 8028008:	f7ff fe56 	bl	8027cb8 <ST7789V_WriteCommand>
  	ST7789V_WriteCommand (ST7789V_DISPON);	//	Main screen turned on	
 802800c:	2029      	movs	r0, #41	@ 0x29
 802800e:	f7ff fe53 	bl	8027cb8 <ST7789V_WriteCommand>

	HAL_Delay(50);
 8028012:	2032      	movs	r0, #50	@ 0x32
 8028014:	f000 f858 	bl	80280c8 <HAL_Delay>
	ST7789V_SetRotation(3);
 8028018:	2003      	movs	r0, #3
 802801a:	f7ff febb 	bl	8027d94 <ST7789V_SetRotation>
	// ST7789V_Fill_Color(BLACK);				//	Fill with Black.
}
 802801e:	bd10      	pop	{r4, pc}
 8028020:	40020000 	.word	0x40020000

08028024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8028024:	b510      	push	{r4, lr}
 8028026:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8028028:	4b0e      	ldr	r3, [pc, #56]	@ (8028064 <HAL_InitTick+0x40>)
 802802a:	781a      	ldrb	r2, [r3, #0]
 802802c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8028030:	fbb3 f3f2 	udiv	r3, r3, r2
 8028034:	4a0c      	ldr	r2, [pc, #48]	@ (8028068 <HAL_InitTick+0x44>)
 8028036:	6810      	ldr	r0, [r2, #0]
 8028038:	fbb0 f0f3 	udiv	r0, r0, r3
 802803c:	f000 f8bc 	bl	80281b8 <HAL_SYSTICK_Config>
 8028040:	b968      	cbnz	r0, 802805e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8028042:	2c0f      	cmp	r4, #15
 8028044:	d901      	bls.n	802804a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8028046:	2001      	movs	r0, #1
 8028048:	e00a      	b.n	8028060 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802804a:	2200      	movs	r2, #0
 802804c:	4621      	mov	r1, r4
 802804e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8028052:	f000 f893 	bl	802817c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8028056:	4b05      	ldr	r3, [pc, #20]	@ (802806c <HAL_InitTick+0x48>)
 8028058:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802805a:	2000      	movs	r0, #0
 802805c:	e000      	b.n	8028060 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 802805e:	2001      	movs	r0, #1
}
 8028060:	bd10      	pop	{r4, pc}
 8028062:	bf00      	nop
 8028064:	20000090 	.word	0x20000090
 8028068:	20000098 	.word	0x20000098
 802806c:	20000094 	.word	0x20000094

08028070 <HAL_Init>:
{
 8028070:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8028072:	4b0b      	ldr	r3, [pc, #44]	@ (80280a0 <HAL_Init+0x30>)
 8028074:	681a      	ldr	r2, [r3, #0]
 8028076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802807a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802807c:	681a      	ldr	r2, [r3, #0]
 802807e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8028082:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8028084:	681a      	ldr	r2, [r3, #0]
 8028086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802808a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802808c:	2003      	movs	r0, #3
 802808e:	f000 f863 	bl	8028158 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8028092:	2000      	movs	r0, #0
 8028094:	f7ff ffc6 	bl	8028024 <HAL_InitTick>
  HAL_MspInit();
 8028098:	f000 fbb6 	bl	8028808 <HAL_MspInit>
}
 802809c:	2000      	movs	r0, #0
 802809e:	bd08      	pop	{r3, pc}
 80280a0:	40023c00 	.word	0x40023c00

080280a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80280a4:	4a03      	ldr	r2, [pc, #12]	@ (80280b4 <HAL_IncTick+0x10>)
 80280a6:	6811      	ldr	r1, [r2, #0]
 80280a8:	4b03      	ldr	r3, [pc, #12]	@ (80280b8 <HAL_IncTick+0x14>)
 80280aa:	781b      	ldrb	r3, [r3, #0]
 80280ac:	440b      	add	r3, r1
 80280ae:	6013      	str	r3, [r2, #0]
}
 80280b0:	4770      	bx	lr
 80280b2:	bf00      	nop
 80280b4:	20008a48 	.word	0x20008a48
 80280b8:	20000090 	.word	0x20000090

080280bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80280bc:	4b01      	ldr	r3, [pc, #4]	@ (80280c4 <HAL_GetTick+0x8>)
 80280be:	6818      	ldr	r0, [r3, #0]
}
 80280c0:	4770      	bx	lr
 80280c2:	bf00      	nop
 80280c4:	20008a48 	.word	0x20008a48

080280c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80280c8:	b538      	push	{r3, r4, r5, lr}
 80280ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80280cc:	f7ff fff6 	bl	80280bc <HAL_GetTick>
 80280d0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80280d2:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80280d6:	d002      	beq.n	80280de <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80280d8:	4b04      	ldr	r3, [pc, #16]	@ (80280ec <HAL_Delay+0x24>)
 80280da:	781b      	ldrb	r3, [r3, #0]
 80280dc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80280de:	f7ff ffed 	bl	80280bc <HAL_GetTick>
 80280e2:	1b40      	subs	r0, r0, r5
 80280e4:	42a0      	cmp	r0, r4
 80280e6:	d3fa      	bcc.n	80280de <HAL_Delay+0x16>
  {
  }
}
 80280e8:	bd38      	pop	{r3, r4, r5, pc}
 80280ea:	bf00      	nop
 80280ec:	20000090 	.word	0x20000090

080280f0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80280f0:	2800      	cmp	r0, #0
 80280f2:	db08      	blt.n	8028106 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80280f4:	0109      	lsls	r1, r1, #4
 80280f6:	b2c9      	uxtb	r1, r1
 80280f8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80280fc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8028100:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8028104:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8028106:	f000 000f 	and.w	r0, r0, #15
 802810a:	0109      	lsls	r1, r1, #4
 802810c:	b2c9      	uxtb	r1, r1
 802810e:	4b01      	ldr	r3, [pc, #4]	@ (8028114 <__NVIC_SetPriority+0x24>)
 8028110:	5419      	strb	r1, [r3, r0]
  }
}
 8028112:	4770      	bx	lr
 8028114:	e000ed14 	.word	0xe000ed14

08028118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8028118:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802811a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802811e:	f1c0 0c07 	rsb	ip, r0, #7
 8028122:	f1bc 0f04 	cmp.w	ip, #4
 8028126:	bf28      	it	cs
 8028128:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802812c:	1d03      	adds	r3, r0, #4
 802812e:	2b06      	cmp	r3, #6
 8028130:	d90f      	bls.n	8028152 <NVIC_EncodePriority+0x3a>
 8028132:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8028134:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8028138:	fa0e f00c 	lsl.w	r0, lr, ip
 802813c:	ea21 0100 	bic.w	r1, r1, r0
 8028140:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8028142:	fa0e fe03 	lsl.w	lr, lr, r3
 8028146:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 802814a:	ea41 0002 	orr.w	r0, r1, r2
 802814e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8028152:	2300      	movs	r3, #0
 8028154:	e7ee      	b.n	8028134 <NVIC_EncodePriority+0x1c>
	...

08028158 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8028158:	4a07      	ldr	r2, [pc, #28]	@ (8028178 <HAL_NVIC_SetPriorityGrouping+0x20>)
 802815a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802815c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8028160:	041b      	lsls	r3, r3, #16
 8028162:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8028164:	0200      	lsls	r0, r0, #8
 8028166:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802816a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 802816c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8028170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8028174:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8028176:	4770      	bx	lr
 8028178:	e000ed00 	.word	0xe000ed00

0802817c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802817c:	b510      	push	{r4, lr}
 802817e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8028180:	4b05      	ldr	r3, [pc, #20]	@ (8028198 <HAL_NVIC_SetPriority+0x1c>)
 8028182:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8028184:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8028188:	f7ff ffc6 	bl	8028118 <NVIC_EncodePriority>
 802818c:	4601      	mov	r1, r0
 802818e:	4620      	mov	r0, r4
 8028190:	f7ff ffae 	bl	80280f0 <__NVIC_SetPriority>
}
 8028194:	bd10      	pop	{r4, pc}
 8028196:	bf00      	nop
 8028198:	e000ed00 	.word	0xe000ed00

0802819c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 802819c:	2800      	cmp	r0, #0
 802819e:	db07      	blt.n	80281b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80281a0:	f000 021f 	and.w	r2, r0, #31
 80281a4:	0940      	lsrs	r0, r0, #5
 80281a6:	2301      	movs	r3, #1
 80281a8:	4093      	lsls	r3, r2
 80281aa:	4a02      	ldr	r2, [pc, #8]	@ (80281b4 <HAL_NVIC_EnableIRQ+0x18>)
 80281ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80281b0:	4770      	bx	lr
 80281b2:	bf00      	nop
 80281b4:	e000e100 	.word	0xe000e100

080281b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80281b8:	3801      	subs	r0, #1
 80281ba:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80281be:	d20b      	bcs.n	80281d8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80281c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80281c4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80281c6:	4a05      	ldr	r2, [pc, #20]	@ (80281dc <HAL_SYSTICK_Config+0x24>)
 80281c8:	21f0      	movs	r1, #240	@ 0xf0
 80281ca:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80281ce:	2000      	movs	r0, #0
 80281d0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80281d2:	2207      	movs	r2, #7
 80281d4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80281d6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80281d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80281da:	4770      	bx	lr
 80281dc:	e000ed00 	.word	0xe000ed00

080281e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80281e0:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80281e2:	6805      	ldr	r5, [r0, #0]
 80281e4:	682c      	ldr	r4, [r5, #0]
 80281e6:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 80281ea:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80281ec:	6804      	ldr	r4, [r0, #0]
 80281ee:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80281f0:	6883      	ldr	r3, [r0, #8]
 80281f2:	2b40      	cmp	r3, #64	@ 0x40
 80281f4:	d005      	beq.n	8028202 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80281f6:	6803      	ldr	r3, [r0, #0]
 80281f8:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80281fa:	6803      	ldr	r3, [r0, #0]
 80281fc:	60da      	str	r2, [r3, #12]
  }
}
 80281fe:	bc30      	pop	{r4, r5}
 8028200:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8028202:	6803      	ldr	r3, [r0, #0]
 8028204:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8028206:	6803      	ldr	r3, [r0, #0]
 8028208:	60d9      	str	r1, [r3, #12]
 802820a:	e7f8      	b.n	80281fe <DMA_SetConfig+0x1e>

0802820c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802820c:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802820e:	6803      	ldr	r3, [r0, #0]
 8028210:	b2d9      	uxtb	r1, r3
 8028212:	3910      	subs	r1, #16
 8028214:	4a0a      	ldr	r2, [pc, #40]	@ (8028240 <DMA_CalcBaseAndBitshift+0x34>)
 8028216:	fba2 4201 	umull	r4, r2, r2, r1
 802821a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802821c:	4c09      	ldr	r4, [pc, #36]	@ (8028244 <DMA_CalcBaseAndBitshift+0x38>)
 802821e:	5ca2      	ldrb	r2, [r4, r2]
 8028220:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8028222:	295f      	cmp	r1, #95	@ 0x5f
 8028224:	d907      	bls.n	8028236 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8028226:	f36f 0309 	bfc	r3, #0, #10
 802822a:	3304      	adds	r3, #4
 802822c:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 802822e:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8028230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028234:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8028236:	f36f 0309 	bfc	r3, #0, #10
 802823a:	6583      	str	r3, [r0, #88]	@ 0x58
 802823c:	e7f7      	b.n	802822e <DMA_CalcBaseAndBitshift+0x22>
 802823e:	bf00      	nop
 8028240:	aaaaaaab 	.word	0xaaaaaaab
 8028244:	0802e058 	.word	0x0802e058

08028248 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8028248:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802824a:	6982      	ldr	r2, [r0, #24]
 802824c:	b992      	cbnz	r2, 8028274 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 802824e:	2b01      	cmp	r3, #1
 8028250:	d00a      	beq.n	8028268 <DMA_CheckFifoParam+0x20>
 8028252:	2b02      	cmp	r3, #2
 8028254:	d002      	beq.n	802825c <DMA_CheckFifoParam+0x14>
 8028256:	b10b      	cbz	r3, 802825c <DMA_CheckFifoParam+0x14>
 8028258:	2000      	movs	r0, #0
 802825a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802825c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802825e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8028262:	d128      	bne.n	80282b6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8028264:	2000      	movs	r0, #0
 8028266:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8028268:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 802826a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 802826e:	d024      	beq.n	80282ba <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8028270:	2000      	movs	r0, #0
 8028272:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8028274:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8028278:	d009      	beq.n	802828e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 802827a:	2b02      	cmp	r3, #2
 802827c:	d925      	bls.n	80282ca <DMA_CheckFifoParam+0x82>
 802827e:	2b03      	cmp	r3, #3
 8028280:	d125      	bne.n	80282ce <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8028282:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8028284:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8028288:	d123      	bne.n	80282d2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 802828a:	2000      	movs	r0, #0
 802828c:	4770      	bx	lr
    switch (tmp)
 802828e:	2b03      	cmp	r3, #3
 8028290:	d803      	bhi.n	802829a <DMA_CheckFifoParam+0x52>
 8028292:	e8df f003 	tbb	[pc, r3]
 8028296:	0414      	.short	0x0414
 8028298:	0a14      	.short	0x0a14
 802829a:	2000      	movs	r0, #0
 802829c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802829e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80282a0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80282a4:	d10d      	bne.n	80282c2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80282a6:	2000      	movs	r0, #0
 80282a8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80282aa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80282ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80282b0:	d009      	beq.n	80282c6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 80282b2:	2000      	movs	r0, #0
 80282b4:	4770      	bx	lr
        status = HAL_ERROR;
 80282b6:	2001      	movs	r0, #1
 80282b8:	4770      	bx	lr
        status = HAL_ERROR;
 80282ba:	2001      	movs	r0, #1
 80282bc:	4770      	bx	lr
      status = HAL_ERROR;
 80282be:	2001      	movs	r0, #1
 80282c0:	4770      	bx	lr
        status = HAL_ERROR;
 80282c2:	2001      	movs	r0, #1
 80282c4:	4770      	bx	lr
        status = HAL_ERROR;
 80282c6:	2001      	movs	r0, #1
 80282c8:	4770      	bx	lr
      status = HAL_ERROR;
 80282ca:	2001      	movs	r0, #1
 80282cc:	4770      	bx	lr
    switch (tmp)
 80282ce:	2000      	movs	r0, #0
 80282d0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 80282d2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80282d4:	4770      	bx	lr
	...

080282d8 <HAL_DMA_Init>:
{
 80282d8:	b570      	push	{r4, r5, r6, lr}
 80282da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80282dc:	f7ff feee 	bl	80280bc <HAL_GetTick>
  if(hdma == NULL)
 80282e0:	2c00      	cmp	r4, #0
 80282e2:	d05b      	beq.n	802839c <HAL_DMA_Init+0xc4>
 80282e4:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80282e6:	2302      	movs	r3, #2
 80282e8:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80282ec:	2300      	movs	r3, #0
 80282ee:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80282f2:	6822      	ldr	r2, [r4, #0]
 80282f4:	6813      	ldr	r3, [r2, #0]
 80282f6:	f023 0301 	bic.w	r3, r3, #1
 80282fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80282fc:	6823      	ldr	r3, [r4, #0]
 80282fe:	681a      	ldr	r2, [r3, #0]
 8028300:	f012 0f01 	tst.w	r2, #1
 8028304:	d00a      	beq.n	802831c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8028306:	f7ff fed9 	bl	80280bc <HAL_GetTick>
 802830a:	1b43      	subs	r3, r0, r5
 802830c:	2b05      	cmp	r3, #5
 802830e:	d9f5      	bls.n	80282fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8028310:	2320      	movs	r3, #32
 8028312:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8028314:	2003      	movs	r0, #3
 8028316:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 802831a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 802831c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802831e:	4920      	ldr	r1, [pc, #128]	@ (80283a0 <HAL_DMA_Init+0xc8>)
 8028320:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8028322:	6862      	ldr	r2, [r4, #4]
 8028324:	68a0      	ldr	r0, [r4, #8]
 8028326:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8028328:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802832a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802832c:	6920      	ldr	r0, [r4, #16]
 802832e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8028330:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8028332:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8028334:	69a0      	ldr	r0, [r4, #24]
 8028336:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8028338:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802833a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 802833c:	6a20      	ldr	r0, [r4, #32]
 802833e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8028340:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8028342:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8028344:	2904      	cmp	r1, #4
 8028346:	d01e      	beq.n	8028386 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8028348:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 802834a:	6826      	ldr	r6, [r4, #0]
 802834c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802834e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8028352:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8028354:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8028356:	2b04      	cmp	r3, #4
 8028358:	d107      	bne.n	802836a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 802835a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 802835c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 802835e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8028360:	b11b      	cbz	r3, 802836a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8028362:	4620      	mov	r0, r4
 8028364:	f7ff ff70 	bl	8028248 <DMA_CheckFifoParam>
 8028368:	b990      	cbnz	r0, 8028390 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 802836a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802836c:	4620      	mov	r0, r4
 802836e:	f7ff ff4d 	bl	802820c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8028372:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8028374:	233f      	movs	r3, #63	@ 0x3f
 8028376:	4093      	lsls	r3, r2
 8028378:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802837a:	2000      	movs	r0, #0
 802837c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 802837e:	2301      	movs	r3, #1
 8028380:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8028384:	e7c9      	b.n	802831a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8028386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8028388:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 802838a:	4301      	orrs	r1, r0
 802838c:	430a      	orrs	r2, r1
 802838e:	e7db      	b.n	8028348 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8028390:	2340      	movs	r3, #64	@ 0x40
 8028392:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8028394:	2001      	movs	r0, #1
 8028396:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 802839a:	e7be      	b.n	802831a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 802839c:	2001      	movs	r0, #1
 802839e:	e7bc      	b.n	802831a <HAL_DMA_Init+0x42>
 80283a0:	f010803f 	.word	0xf010803f

080283a4 <HAL_DMA_Start_IT>:
{
 80283a4:	b538      	push	{r3, r4, r5, lr}
 80283a6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80283a8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 80283aa:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 80283ae:	2801      	cmp	r0, #1
 80283b0:	d02b      	beq.n	802840a <HAL_DMA_Start_IT+0x66>
 80283b2:	2001      	movs	r0, #1
 80283b4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80283b8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 80283bc:	b2c0      	uxtb	r0, r0
 80283be:	2801      	cmp	r0, #1
 80283c0:	d004      	beq.n	80283cc <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 80283c2:	2300      	movs	r3, #0
 80283c4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 80283c8:	2002      	movs	r0, #2
}
 80283ca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80283cc:	2002      	movs	r0, #2
 80283ce:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80283d2:	2000      	movs	r0, #0
 80283d4:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80283d6:	4620      	mov	r0, r4
 80283d8:	f7ff ff02 	bl	80281e0 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80283dc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80283de:	233f      	movs	r3, #63	@ 0x3f
 80283e0:	4093      	lsls	r3, r2
 80283e2:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80283e4:	6822      	ldr	r2, [r4, #0]
 80283e6:	6813      	ldr	r3, [r2, #0]
 80283e8:	f043 0316 	orr.w	r3, r3, #22
 80283ec:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80283ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80283f0:	b123      	cbz	r3, 80283fc <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 80283f2:	6822      	ldr	r2, [r4, #0]
 80283f4:	6813      	ldr	r3, [r2, #0]
 80283f6:	f043 0308 	orr.w	r3, r3, #8
 80283fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80283fc:	6822      	ldr	r2, [r4, #0]
 80283fe:	6813      	ldr	r3, [r2, #0]
 8028400:	f043 0301 	orr.w	r3, r3, #1
 8028404:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028406:	2000      	movs	r0, #0
 8028408:	e7df      	b.n	80283ca <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 802840a:	2002      	movs	r0, #2
 802840c:	e7dd      	b.n	80283ca <HAL_DMA_Start_IT+0x26>

0802840e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 802840e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8028412:	b2db      	uxtb	r3, r3
 8028414:	2b02      	cmp	r3, #2
 8028416:	d003      	beq.n	8028420 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8028418:	2380      	movs	r3, #128	@ 0x80
 802841a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 802841c:	2001      	movs	r0, #1
 802841e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8028420:	2305      	movs	r3, #5
 8028422:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8028426:	6802      	ldr	r2, [r0, #0]
 8028428:	6813      	ldr	r3, [r2, #0]
 802842a:	f023 0301 	bic.w	r3, r3, #1
 802842e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8028430:	2000      	movs	r0, #0
}
 8028432:	4770      	bx	lr

08028434 <HAL_DMA_IRQHandler>:
{
 8028434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028436:	b083      	sub	sp, #12
 8028438:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 802843a:	2300      	movs	r3, #0
 802843c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 802843e:	4b72      	ldr	r3, [pc, #456]	@ (8028608 <HAL_DMA_IRQHandler+0x1d4>)
 8028440:	681d      	ldr	r5, [r3, #0]
 8028442:	4b72      	ldr	r3, [pc, #456]	@ (802860c <HAL_DMA_IRQHandler+0x1d8>)
 8028444:	fba3 3505 	umull	r3, r5, r3, r5
 8028448:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802844a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 802844c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802844e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8028450:	2308      	movs	r3, #8
 8028452:	4093      	lsls	r3, r2
 8028454:	4233      	tst	r3, r6
 8028456:	d010      	beq.n	802847a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8028458:	6803      	ldr	r3, [r0, #0]
 802845a:	681a      	ldr	r2, [r3, #0]
 802845c:	f012 0f04 	tst.w	r2, #4
 8028460:	d00b      	beq.n	802847a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8028462:	681a      	ldr	r2, [r3, #0]
 8028464:	f022 0204 	bic.w	r2, r2, #4
 8028468:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802846a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 802846c:	2308      	movs	r3, #8
 802846e:	4093      	lsls	r3, r2
 8028470:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8028472:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8028474:	f043 0301 	orr.w	r3, r3, #1
 8028478:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802847a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 802847c:	2301      	movs	r3, #1
 802847e:	4093      	lsls	r3, r2
 8028480:	4233      	tst	r3, r6
 8028482:	d009      	beq.n	8028498 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8028484:	6822      	ldr	r2, [r4, #0]
 8028486:	6952      	ldr	r2, [r2, #20]
 8028488:	f012 0f80 	tst.w	r2, #128	@ 0x80
 802848c:	d004      	beq.n	8028498 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802848e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8028490:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8028492:	f043 0302 	orr.w	r3, r3, #2
 8028496:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8028498:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 802849a:	2304      	movs	r3, #4
 802849c:	4093      	lsls	r3, r2
 802849e:	4233      	tst	r3, r6
 80284a0:	d009      	beq.n	80284b6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80284a2:	6822      	ldr	r2, [r4, #0]
 80284a4:	6812      	ldr	r2, [r2, #0]
 80284a6:	f012 0f02 	tst.w	r2, #2
 80284aa:	d004      	beq.n	80284b6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80284ac:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80284ae:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80284b0:	f043 0304 	orr.w	r3, r3, #4
 80284b4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80284b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80284b8:	2310      	movs	r3, #16
 80284ba:	4093      	lsls	r3, r2
 80284bc:	4233      	tst	r3, r6
 80284be:	d024      	beq.n	802850a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80284c0:	6822      	ldr	r2, [r4, #0]
 80284c2:	6812      	ldr	r2, [r2, #0]
 80284c4:	f012 0f08 	tst.w	r2, #8
 80284c8:	d01f      	beq.n	802850a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80284ca:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80284cc:	6823      	ldr	r3, [r4, #0]
 80284ce:	681a      	ldr	r2, [r3, #0]
 80284d0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80284d4:	d00d      	beq.n	80284f2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80284d6:	681b      	ldr	r3, [r3, #0]
 80284d8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80284dc:	d104      	bne.n	80284e8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80284de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80284e0:	b19b      	cbz	r3, 802850a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80284e2:	4620      	mov	r0, r4
 80284e4:	4798      	blx	r3
 80284e6:	e010      	b.n	802850a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80284e8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80284ea:	b173      	cbz	r3, 802850a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80284ec:	4620      	mov	r0, r4
 80284ee:	4798      	blx	r3
 80284f0:	e00b      	b.n	802850a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80284f2:	681a      	ldr	r2, [r3, #0]
 80284f4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80284f8:	d103      	bne.n	8028502 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80284fa:	681a      	ldr	r2, [r3, #0]
 80284fc:	f022 0208 	bic.w	r2, r2, #8
 8028500:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8028502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028504:	b10b      	cbz	r3, 802850a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8028506:	4620      	mov	r0, r4
 8028508:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802850a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 802850c:	2320      	movs	r3, #32
 802850e:	4093      	lsls	r3, r2
 8028510:	4233      	tst	r3, r6
 8028512:	d055      	beq.n	80285c0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8028514:	6822      	ldr	r2, [r4, #0]
 8028516:	6812      	ldr	r2, [r2, #0]
 8028518:	f012 0f10 	tst.w	r2, #16
 802851c:	d050      	beq.n	80285c0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802851e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8028520:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8028524:	b2db      	uxtb	r3, r3
 8028526:	2b05      	cmp	r3, #5
 8028528:	d00e      	beq.n	8028548 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802852a:	6823      	ldr	r3, [r4, #0]
 802852c:	681a      	ldr	r2, [r3, #0]
 802852e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8028532:	d033      	beq.n	802859c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8028534:	681b      	ldr	r3, [r3, #0]
 8028536:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 802853a:	d12a      	bne.n	8028592 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 802853c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 802853e:	2b00      	cmp	r3, #0
 8028540:	d03e      	beq.n	80285c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8028542:	4620      	mov	r0, r4
 8028544:	4798      	blx	r3
 8028546:	e03b      	b.n	80285c0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8028548:	6822      	ldr	r2, [r4, #0]
 802854a:	6813      	ldr	r3, [r2, #0]
 802854c:	f023 0316 	bic.w	r3, r3, #22
 8028550:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8028552:	6822      	ldr	r2, [r4, #0]
 8028554:	6953      	ldr	r3, [r2, #20]
 8028556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802855a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802855c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802855e:	b1a3      	cbz	r3, 802858a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8028560:	6822      	ldr	r2, [r4, #0]
 8028562:	6813      	ldr	r3, [r2, #0]
 8028564:	f023 0308 	bic.w	r3, r3, #8
 8028568:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802856a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 802856c:	233f      	movs	r3, #63	@ 0x3f
 802856e:	4093      	lsls	r3, r2
 8028570:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8028572:	2301      	movs	r3, #1
 8028574:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8028578:	2300      	movs	r3, #0
 802857a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 802857e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8028580:	2b00      	cmp	r3, #0
 8028582:	d03f      	beq.n	8028604 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8028584:	4620      	mov	r0, r4
 8028586:	4798      	blx	r3
        return;
 8028588:	e03c      	b.n	8028604 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802858a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802858c:	2b00      	cmp	r3, #0
 802858e:	d1e7      	bne.n	8028560 <HAL_DMA_IRQHandler+0x12c>
 8028590:	e7eb      	b.n	802856a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8028592:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028594:	b1a3      	cbz	r3, 80285c0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8028596:	4620      	mov	r0, r4
 8028598:	4798      	blx	r3
 802859a:	e011      	b.n	80285c0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802859c:	681a      	ldr	r2, [r3, #0]
 802859e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80285a2:	d109      	bne.n	80285b8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80285a4:	681a      	ldr	r2, [r3, #0]
 80285a6:	f022 0210 	bic.w	r2, r2, #16
 80285aa:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80285ac:	2301      	movs	r3, #1
 80285ae:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80285b2:	2300      	movs	r3, #0
 80285b4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80285b8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80285ba:	b10b      	cbz	r3, 80285c0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80285bc:	4620      	mov	r0, r4
 80285be:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80285c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80285c2:	b1fb      	cbz	r3, 8028604 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80285c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80285c6:	f013 0f01 	tst.w	r3, #1
 80285ca:	d017      	beq.n	80285fc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80285cc:	2305      	movs	r3, #5
 80285ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80285d2:	6822      	ldr	r2, [r4, #0]
 80285d4:	6813      	ldr	r3, [r2, #0]
 80285d6:	f023 0301 	bic.w	r3, r3, #1
 80285da:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80285dc:	9b01      	ldr	r3, [sp, #4]
 80285de:	3301      	adds	r3, #1
 80285e0:	9301      	str	r3, [sp, #4]
 80285e2:	42ab      	cmp	r3, r5
 80285e4:	d804      	bhi.n	80285f0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80285e6:	6823      	ldr	r3, [r4, #0]
 80285e8:	681b      	ldr	r3, [r3, #0]
 80285ea:	f013 0f01 	tst.w	r3, #1
 80285ee:	d1f5      	bne.n	80285dc <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80285f0:	2301      	movs	r3, #1
 80285f2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80285f6:	2300      	movs	r3, #0
 80285f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80285fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80285fe:	b10b      	cbz	r3, 8028604 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8028600:	4620      	mov	r0, r4
 8028602:	4798      	blx	r3
}
 8028604:	b003      	add	sp, #12
 8028606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028608:	20000098 	.word	0x20000098
 802860c:	1b4e81b5 	.word	0x1b4e81b5

08028610 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028610:	2300      	movs	r3, #0
 8028612:	2b0f      	cmp	r3, #15
 8028614:	f200 80e9 	bhi.w	80287ea <HAL_GPIO_Init+0x1da>
{
 8028618:	b570      	push	{r4, r5, r6, lr}
 802861a:	b082      	sub	sp, #8
 802861c:	e065      	b.n	80286ea <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802861e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8028620:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8028624:	2403      	movs	r4, #3
 8028626:	fa04 f40e 	lsl.w	r4, r4, lr
 802862a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 802862e:	68cc      	ldr	r4, [r1, #12]
 8028630:	fa04 f40e 	lsl.w	r4, r4, lr
 8028634:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8028636:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8028638:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 802863a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 802863e:	684a      	ldr	r2, [r1, #4]
 8028640:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8028644:	409a      	lsls	r2, r3
 8028646:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8028648:	6042      	str	r2, [r0, #4]
 802864a:	e05c      	b.n	8028706 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 802864c:	08dc      	lsrs	r4, r3, #3
 802864e:	3408      	adds	r4, #8
 8028650:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8028654:	f003 0507 	and.w	r5, r3, #7
 8028658:	00ad      	lsls	r5, r5, #2
 802865a:	f04f 0e0f 	mov.w	lr, #15
 802865e:	fa0e fe05 	lsl.w	lr, lr, r5
 8028662:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8028666:	690a      	ldr	r2, [r1, #16]
 8028668:	40aa      	lsls	r2, r5
 802866a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 802866e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8028672:	e05c      	b.n	802872e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8028674:	2207      	movs	r2, #7
 8028676:	e000      	b.n	802867a <HAL_GPIO_Init+0x6a>
 8028678:	2200      	movs	r2, #0
 802867a:	fa02 f20e 	lsl.w	r2, r2, lr
 802867e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8028680:	3402      	adds	r4, #2
 8028682:	4d5a      	ldr	r5, [pc, #360]	@ (80287ec <HAL_GPIO_Init+0x1dc>)
 8028684:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8028688:	4a59      	ldr	r2, [pc, #356]	@ (80287f0 <HAL_GPIO_Init+0x1e0>)
 802868a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 802868c:	ea6f 020c 	mvn.w	r2, ip
 8028690:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8028694:	684e      	ldr	r6, [r1, #4]
 8028696:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 802869a:	d001      	beq.n	80286a0 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 802869c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80286a0:	4c53      	ldr	r4, [pc, #332]	@ (80287f0 <HAL_GPIO_Init+0x1e0>)
 80286a2:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80286a4:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80286a6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80286aa:	684e      	ldr	r6, [r1, #4]
 80286ac:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80286b0:	d001      	beq.n	80286b6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80286b2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80286b6:	4c4e      	ldr	r4, [pc, #312]	@ (80287f0 <HAL_GPIO_Init+0x1e0>)
 80286b8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80286ba:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80286bc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80286c0:	684e      	ldr	r6, [r1, #4]
 80286c2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80286c6:	d001      	beq.n	80286cc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80286c8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80286cc:	4c48      	ldr	r4, [pc, #288]	@ (80287f0 <HAL_GPIO_Init+0x1e0>)
 80286ce:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80286d0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80286d2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80286d4:	684d      	ldr	r5, [r1, #4]
 80286d6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80286da:	d001      	beq.n	80286e0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80286dc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80286e0:	4c43      	ldr	r4, [pc, #268]	@ (80287f0 <HAL_GPIO_Init+0x1e0>)
 80286e2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80286e4:	3301      	adds	r3, #1
 80286e6:	2b0f      	cmp	r3, #15
 80286e8:	d87d      	bhi.n	80287e6 <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 80286ea:	2201      	movs	r2, #1
 80286ec:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80286ee:	680c      	ldr	r4, [r1, #0]
 80286f0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80286f4:	ea32 0404 	bics.w	r4, r2, r4
 80286f8:	d1f4      	bne.n	80286e4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80286fa:	684c      	ldr	r4, [r1, #4]
 80286fc:	f004 0403 	and.w	r4, r4, #3
 8028700:	3c01      	subs	r4, #1
 8028702:	2c01      	cmp	r4, #1
 8028704:	d98b      	bls.n	802861e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8028706:	684a      	ldr	r2, [r1, #4]
 8028708:	f002 0203 	and.w	r2, r2, #3
 802870c:	2a03      	cmp	r2, #3
 802870e:	d009      	beq.n	8028724 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8028710:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028712:	005d      	lsls	r5, r3, #1
 8028714:	2203      	movs	r2, #3
 8028716:	40aa      	lsls	r2, r5
 8028718:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 802871c:	688a      	ldr	r2, [r1, #8]
 802871e:	40aa      	lsls	r2, r5
 8028720:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8028722:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8028724:	684a      	ldr	r2, [r1, #4]
 8028726:	f002 0203 	and.w	r2, r2, #3
 802872a:	2a02      	cmp	r2, #2
 802872c:	d08e      	beq.n	802864c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 802872e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8028730:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8028734:	2203      	movs	r2, #3
 8028736:	fa02 f20e 	lsl.w	r2, r2, lr
 802873a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802873e:	684a      	ldr	r2, [r1, #4]
 8028740:	f002 0203 	and.w	r2, r2, #3
 8028744:	fa02 f20e 	lsl.w	r2, r2, lr
 8028748:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 802874a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 802874c:	684a      	ldr	r2, [r1, #4]
 802874e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8028752:	d0c7      	beq.n	80286e4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8028754:	2200      	movs	r2, #0
 8028756:	9201      	str	r2, [sp, #4]
 8028758:	4a26      	ldr	r2, [pc, #152]	@ (80287f4 <HAL_GPIO_Init+0x1e4>)
 802875a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 802875c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8028760:	6454      	str	r4, [r2, #68]	@ 0x44
 8028762:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8028764:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8028768:	9201      	str	r2, [sp, #4]
 802876a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 802876c:	089c      	lsrs	r4, r3, #2
 802876e:	1ca5      	adds	r5, r4, #2
 8028770:	4a1e      	ldr	r2, [pc, #120]	@ (80287ec <HAL_GPIO_Init+0x1dc>)
 8028772:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028776:	f003 0e03 	and.w	lr, r3, #3
 802877a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 802877e:	220f      	movs	r2, #15
 8028780:	fa02 f20e 	lsl.w	r2, r2, lr
 8028784:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8028788:	4a1b      	ldr	r2, [pc, #108]	@ (80287f8 <HAL_GPIO_Init+0x1e8>)
 802878a:	4290      	cmp	r0, r2
 802878c:	f43f af74 	beq.w	8028678 <HAL_GPIO_Init+0x68>
 8028790:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8028794:	4290      	cmp	r0, r2
 8028796:	d01a      	beq.n	80287ce <HAL_GPIO_Init+0x1be>
 8028798:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 802879c:	4290      	cmp	r0, r2
 802879e:	d018      	beq.n	80287d2 <HAL_GPIO_Init+0x1c2>
 80287a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80287a4:	4290      	cmp	r0, r2
 80287a6:	d016      	beq.n	80287d6 <HAL_GPIO_Init+0x1c6>
 80287a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80287ac:	4290      	cmp	r0, r2
 80287ae:	d014      	beq.n	80287da <HAL_GPIO_Init+0x1ca>
 80287b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80287b4:	4290      	cmp	r0, r2
 80287b6:	d012      	beq.n	80287de <HAL_GPIO_Init+0x1ce>
 80287b8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80287bc:	4290      	cmp	r0, r2
 80287be:	d010      	beq.n	80287e2 <HAL_GPIO_Init+0x1d2>
 80287c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80287c4:	4290      	cmp	r0, r2
 80287c6:	f43f af55 	beq.w	8028674 <HAL_GPIO_Init+0x64>
 80287ca:	2208      	movs	r2, #8
 80287cc:	e755      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287ce:	2201      	movs	r2, #1
 80287d0:	e753      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287d2:	2202      	movs	r2, #2
 80287d4:	e751      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287d6:	2203      	movs	r2, #3
 80287d8:	e74f      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287da:	2204      	movs	r2, #4
 80287dc:	e74d      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287de:	2205      	movs	r2, #5
 80287e0:	e74b      	b.n	802867a <HAL_GPIO_Init+0x6a>
 80287e2:	2206      	movs	r2, #6
 80287e4:	e749      	b.n	802867a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80287e6:	b002      	add	sp, #8
 80287e8:	bd70      	pop	{r4, r5, r6, pc}
 80287ea:	4770      	bx	lr
 80287ec:	40013800 	.word	0x40013800
 80287f0:	40013c00 	.word	0x40013c00
 80287f4:	40023800 	.word	0x40023800
 80287f8:	40020000 	.word	0x40020000

080287fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80287fc:	b10a      	cbz	r2, 8028802 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80287fe:	6181      	str	r1, [r0, #24]
 8028800:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8028802:	0409      	lsls	r1, r1, #16
 8028804:	6181      	str	r1, [r0, #24]
  }
}
 8028806:	4770      	bx	lr

08028808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8028808:	b500      	push	{lr}
 802880a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802880c:	2100      	movs	r1, #0
 802880e:	9100      	str	r1, [sp, #0]
 8028810:	4b0c      	ldr	r3, [pc, #48]	@ (8028844 <HAL_MspInit+0x3c>)
 8028812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8028814:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8028818:	645a      	str	r2, [r3, #68]	@ 0x44
 802881a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 802881c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8028820:	9200      	str	r2, [sp, #0]
 8028822:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8028824:	9101      	str	r1, [sp, #4]
 8028826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8028828:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 802882c:	641a      	str	r2, [r3, #64]	@ 0x40
 802882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8028834:	9301      	str	r3, [sp, #4]
 8028836:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8028838:	2007      	movs	r0, #7
 802883a:	f7ff fc8d 	bl	8028158 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802883e:	b003      	add	sp, #12
 8028840:	f85d fb04 	ldr.w	pc, [sp], #4
 8028844:	40023800 	.word	0x40023800

08028848 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028848:	2800      	cmp	r0, #0
 802884a:	f000 81e0 	beq.w	8028c0e <HAL_RCC_OscConfig+0x3c6>
{
 802884e:	b570      	push	{r4, r5, r6, lr}
 8028850:	b082      	sub	sp, #8
 8028852:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8028854:	6803      	ldr	r3, [r0, #0]
 8028856:	f013 0f01 	tst.w	r3, #1
 802885a:	d03b      	beq.n	80288d4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802885c:	4b9f      	ldr	r3, [pc, #636]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 802885e:	689b      	ldr	r3, [r3, #8]
 8028860:	f003 030c 	and.w	r3, r3, #12
 8028864:	2b04      	cmp	r3, #4
 8028866:	d02c      	beq.n	80288c2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8028868:	4b9c      	ldr	r3, [pc, #624]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 802886a:	689b      	ldr	r3, [r3, #8]
 802886c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028870:	2b08      	cmp	r3, #8
 8028872:	d021      	beq.n	80288b8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8028874:	6863      	ldr	r3, [r4, #4]
 8028876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802887a:	d04f      	beq.n	802891c <HAL_RCC_OscConfig+0xd4>
 802887c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8028880:	d052      	beq.n	8028928 <HAL_RCC_OscConfig+0xe0>
 8028882:	4b96      	ldr	r3, [pc, #600]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028884:	681a      	ldr	r2, [r3, #0]
 8028886:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 802888a:	601a      	str	r2, [r3, #0]
 802888c:	681a      	ldr	r2, [r3, #0]
 802888e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8028892:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028894:	6863      	ldr	r3, [r4, #4]
 8028896:	2b00      	cmp	r3, #0
 8028898:	d050      	beq.n	802893c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802889a:	f7ff fc0f 	bl	80280bc <HAL_GetTick>
 802889e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80288a0:	4b8e      	ldr	r3, [pc, #568]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80288a2:	681b      	ldr	r3, [r3, #0]
 80288a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80288a8:	d114      	bne.n	80288d4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80288aa:	f7ff fc07 	bl	80280bc <HAL_GetTick>
 80288ae:	1b40      	subs	r0, r0, r5
 80288b0:	2864      	cmp	r0, #100	@ 0x64
 80288b2:	d9f5      	bls.n	80288a0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80288b4:	2003      	movs	r0, #3
 80288b6:	e1b1      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80288b8:	4b88      	ldr	r3, [pc, #544]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80288ba:	685b      	ldr	r3, [r3, #4]
 80288bc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80288c0:	d0d8      	beq.n	8028874 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80288c2:	4b86      	ldr	r3, [pc, #536]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80288c4:	681b      	ldr	r3, [r3, #0]
 80288c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80288ca:	d003      	beq.n	80288d4 <HAL_RCC_OscConfig+0x8c>
 80288cc:	6863      	ldr	r3, [r4, #4]
 80288ce:	2b00      	cmp	r3, #0
 80288d0:	f000 819f 	beq.w	8028c12 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80288d4:	6823      	ldr	r3, [r4, #0]
 80288d6:	f013 0f02 	tst.w	r3, #2
 80288da:	d054      	beq.n	8028986 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80288dc:	4b7f      	ldr	r3, [pc, #508]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80288de:	689b      	ldr	r3, [r3, #8]
 80288e0:	f013 0f0c 	tst.w	r3, #12
 80288e4:	d03e      	beq.n	8028964 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80288e6:	4b7d      	ldr	r3, [pc, #500]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80288e8:	689b      	ldr	r3, [r3, #8]
 80288ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80288ee:	2b08      	cmp	r3, #8
 80288f0:	d033      	beq.n	802895a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80288f2:	68e3      	ldr	r3, [r4, #12]
 80288f4:	2b00      	cmp	r3, #0
 80288f6:	d068      	beq.n	80289ca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80288f8:	4b79      	ldr	r3, [pc, #484]	@ (8028ae0 <HAL_RCC_OscConfig+0x298>)
 80288fa:	2201      	movs	r2, #1
 80288fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80288fe:	f7ff fbdd 	bl	80280bc <HAL_GetTick>
 8028902:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028904:	4b75      	ldr	r3, [pc, #468]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028906:	681b      	ldr	r3, [r3, #0]
 8028908:	f013 0f02 	tst.w	r3, #2
 802890c:	d154      	bne.n	80289b8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802890e:	f7ff fbd5 	bl	80280bc <HAL_GetTick>
 8028912:	1b40      	subs	r0, r0, r5
 8028914:	2802      	cmp	r0, #2
 8028916:	d9f5      	bls.n	8028904 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8028918:	2003      	movs	r0, #3
 802891a:	e17f      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802891c:	4a6f      	ldr	r2, [pc, #444]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 802891e:	6813      	ldr	r3, [r2, #0]
 8028920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8028924:	6013      	str	r3, [r2, #0]
 8028926:	e7b5      	b.n	8028894 <HAL_RCC_OscConfig+0x4c>
 8028928:	4b6c      	ldr	r3, [pc, #432]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 802892a:	681a      	ldr	r2, [r3, #0]
 802892c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8028930:	601a      	str	r2, [r3, #0]
 8028932:	681a      	ldr	r2, [r3, #0]
 8028934:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8028938:	601a      	str	r2, [r3, #0]
 802893a:	e7ab      	b.n	8028894 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 802893c:	f7ff fbbe 	bl	80280bc <HAL_GetTick>
 8028940:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028942:	4b66      	ldr	r3, [pc, #408]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028944:	681b      	ldr	r3, [r3, #0]
 8028946:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 802894a:	d0c3      	beq.n	80288d4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802894c:	f7ff fbb6 	bl	80280bc <HAL_GetTick>
 8028950:	1b40      	subs	r0, r0, r5
 8028952:	2864      	cmp	r0, #100	@ 0x64
 8028954:	d9f5      	bls.n	8028942 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8028956:	2003      	movs	r0, #3
 8028958:	e160      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802895a:	4b60      	ldr	r3, [pc, #384]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 802895c:	685b      	ldr	r3, [r3, #4]
 802895e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8028962:	d1c6      	bne.n	80288f2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028964:	4b5d      	ldr	r3, [pc, #372]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028966:	681b      	ldr	r3, [r3, #0]
 8028968:	f013 0f02 	tst.w	r3, #2
 802896c:	d003      	beq.n	8028976 <HAL_RCC_OscConfig+0x12e>
 802896e:	68e3      	ldr	r3, [r4, #12]
 8028970:	2b01      	cmp	r3, #1
 8028972:	f040 8150 	bne.w	8028c16 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028976:	4a59      	ldr	r2, [pc, #356]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028978:	6813      	ldr	r3, [r2, #0]
 802897a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 802897e:	6921      	ldr	r1, [r4, #16]
 8028980:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8028984:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028986:	6823      	ldr	r3, [r4, #0]
 8028988:	f013 0f08 	tst.w	r3, #8
 802898c:	d042      	beq.n	8028a14 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802898e:	6963      	ldr	r3, [r4, #20]
 8028990:	b36b      	cbz	r3, 80289ee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028992:	4b53      	ldr	r3, [pc, #332]	@ (8028ae0 <HAL_RCC_OscConfig+0x298>)
 8028994:	2201      	movs	r2, #1
 8028996:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802899a:	f7ff fb8f 	bl	80280bc <HAL_GetTick>
 802899e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80289a0:	4b4e      	ldr	r3, [pc, #312]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80289a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80289a4:	f013 0f02 	tst.w	r3, #2
 80289a8:	d134      	bne.n	8028a14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80289aa:	f7ff fb87 	bl	80280bc <HAL_GetTick>
 80289ae:	1b40      	subs	r0, r0, r5
 80289b0:	2802      	cmp	r0, #2
 80289b2:	d9f5      	bls.n	80289a0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80289b4:	2003      	movs	r0, #3
 80289b6:	e131      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80289b8:	4a48      	ldr	r2, [pc, #288]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80289ba:	6813      	ldr	r3, [r2, #0]
 80289bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80289c0:	6921      	ldr	r1, [r4, #16]
 80289c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80289c6:	6013      	str	r3, [r2, #0]
 80289c8:	e7dd      	b.n	8028986 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80289ca:	4b45      	ldr	r3, [pc, #276]	@ (8028ae0 <HAL_RCC_OscConfig+0x298>)
 80289cc:	2200      	movs	r2, #0
 80289ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80289d0:	f7ff fb74 	bl	80280bc <HAL_GetTick>
 80289d4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80289d6:	4b41      	ldr	r3, [pc, #260]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80289d8:	681b      	ldr	r3, [r3, #0]
 80289da:	f013 0f02 	tst.w	r3, #2
 80289de:	d0d2      	beq.n	8028986 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80289e0:	f7ff fb6c 	bl	80280bc <HAL_GetTick>
 80289e4:	1b40      	subs	r0, r0, r5
 80289e6:	2802      	cmp	r0, #2
 80289e8:	d9f5      	bls.n	80289d6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80289ea:	2003      	movs	r0, #3
 80289ec:	e116      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80289ee:	4b3c      	ldr	r3, [pc, #240]	@ (8028ae0 <HAL_RCC_OscConfig+0x298>)
 80289f0:	2200      	movs	r2, #0
 80289f2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80289f6:	f7ff fb61 	bl	80280bc <HAL_GetTick>
 80289fa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80289fc:	4b37      	ldr	r3, [pc, #220]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 80289fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8028a00:	f013 0f02 	tst.w	r3, #2
 8028a04:	d006      	beq.n	8028a14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028a06:	f7ff fb59 	bl	80280bc <HAL_GetTick>
 8028a0a:	1b40      	subs	r0, r0, r5
 8028a0c:	2802      	cmp	r0, #2
 8028a0e:	d9f5      	bls.n	80289fc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8028a10:	2003      	movs	r0, #3
 8028a12:	e103      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8028a14:	6823      	ldr	r3, [r4, #0]
 8028a16:	f013 0f04 	tst.w	r3, #4
 8028a1a:	d077      	beq.n	8028b0c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a20:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8028a24:	d133      	bne.n	8028a8e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8028a26:	2300      	movs	r3, #0
 8028a28:	9301      	str	r3, [sp, #4]
 8028a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8028a2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8028a32:	641a      	str	r2, [r3, #64]	@ 0x40
 8028a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8028a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8028a3a:	9301      	str	r3, [sp, #4]
 8028a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8028a3e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028a40:	4b28      	ldr	r3, [pc, #160]	@ (8028ae4 <HAL_RCC_OscConfig+0x29c>)
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8028a48:	d023      	beq.n	8028a92 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028a4a:	68a3      	ldr	r3, [r4, #8]
 8028a4c:	2b01      	cmp	r3, #1
 8028a4e:	d034      	beq.n	8028aba <HAL_RCC_OscConfig+0x272>
 8028a50:	2b05      	cmp	r3, #5
 8028a52:	d038      	beq.n	8028ac6 <HAL_RCC_OscConfig+0x27e>
 8028a54:	4b21      	ldr	r3, [pc, #132]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028a56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8028a58:	f022 0201 	bic.w	r2, r2, #1
 8028a5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8028a5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8028a60:	f022 0204 	bic.w	r2, r2, #4
 8028a64:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8028a66:	68a3      	ldr	r3, [r4, #8]
 8028a68:	2b00      	cmp	r3, #0
 8028a6a:	d03d      	beq.n	8028ae8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028a6c:	f7ff fb26 	bl	80280bc <HAL_GetTick>
 8028a70:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028a72:	4b1a      	ldr	r3, [pc, #104]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8028a76:	f013 0f02 	tst.w	r3, #2
 8028a7a:	d146      	bne.n	8028b0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028a7c:	f7ff fb1e 	bl	80280bc <HAL_GetTick>
 8028a80:	1b80      	subs	r0, r0, r6
 8028a82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8028a86:	4298      	cmp	r0, r3
 8028a88:	d9f3      	bls.n	8028a72 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8028a8a:	2003      	movs	r0, #3
 8028a8c:	e0c6      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8028a8e:	2500      	movs	r5, #0
 8028a90:	e7d6      	b.n	8028a40 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8028a92:	4a14      	ldr	r2, [pc, #80]	@ (8028ae4 <HAL_RCC_OscConfig+0x29c>)
 8028a94:	6813      	ldr	r3, [r2, #0]
 8028a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8028a9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8028a9c:	f7ff fb0e 	bl	80280bc <HAL_GetTick>
 8028aa0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028aa2:	4b10      	ldr	r3, [pc, #64]	@ (8028ae4 <HAL_RCC_OscConfig+0x29c>)
 8028aa4:	681b      	ldr	r3, [r3, #0]
 8028aa6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8028aaa:	d1ce      	bne.n	8028a4a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028aac:	f7ff fb06 	bl	80280bc <HAL_GetTick>
 8028ab0:	1b80      	subs	r0, r0, r6
 8028ab2:	2802      	cmp	r0, #2
 8028ab4:	d9f5      	bls.n	8028aa2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8028ab6:	2003      	movs	r0, #3
 8028ab8:	e0b0      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028aba:	4a08      	ldr	r2, [pc, #32]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028abc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8028abe:	f043 0301 	orr.w	r3, r3, #1
 8028ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8028ac4:	e7cf      	b.n	8028a66 <HAL_RCC_OscConfig+0x21e>
 8028ac6:	4b05      	ldr	r3, [pc, #20]	@ (8028adc <HAL_RCC_OscConfig+0x294>)
 8028ac8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8028aca:	f042 0204 	orr.w	r2, r2, #4
 8028ace:	671a      	str	r2, [r3, #112]	@ 0x70
 8028ad0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8028ad2:	f042 0201 	orr.w	r2, r2, #1
 8028ad6:	671a      	str	r2, [r3, #112]	@ 0x70
 8028ad8:	e7c5      	b.n	8028a66 <HAL_RCC_OscConfig+0x21e>
 8028ada:	bf00      	nop
 8028adc:	40023800 	.word	0x40023800
 8028ae0:	42470000 	.word	0x42470000
 8028ae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028ae8:	f7ff fae8 	bl	80280bc <HAL_GetTick>
 8028aec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028aee:	4b52      	ldr	r3, [pc, #328]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8028af2:	f013 0f02 	tst.w	r3, #2
 8028af6:	d008      	beq.n	8028b0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028af8:	f7ff fae0 	bl	80280bc <HAL_GetTick>
 8028afc:	1b80      	subs	r0, r0, r6
 8028afe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8028b02:	4298      	cmp	r0, r3
 8028b04:	d9f3      	bls.n	8028aee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8028b06:	2003      	movs	r0, #3
 8028b08:	e088      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028b0a:	b9ed      	cbnz	r5, 8028b48 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8028b0c:	69a3      	ldr	r3, [r4, #24]
 8028b0e:	2b00      	cmp	r3, #0
 8028b10:	f000 8083 	beq.w	8028c1a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028b14:	4a48      	ldr	r2, [pc, #288]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028b16:	6892      	ldr	r2, [r2, #8]
 8028b18:	f002 020c 	and.w	r2, r2, #12
 8028b1c:	2a08      	cmp	r2, #8
 8028b1e:	d051      	beq.n	8028bc4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028b20:	2b02      	cmp	r3, #2
 8028b22:	d017      	beq.n	8028b54 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028b24:	4b45      	ldr	r3, [pc, #276]	@ (8028c3c <HAL_RCC_OscConfig+0x3f4>)
 8028b26:	2200      	movs	r2, #0
 8028b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028b2a:	f7ff fac7 	bl	80280bc <HAL_GetTick>
 8028b2e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028b30:	4b41      	ldr	r3, [pc, #260]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028b32:	681b      	ldr	r3, [r3, #0]
 8028b34:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8028b38:	d042      	beq.n	8028bc0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028b3a:	f7ff fabf 	bl	80280bc <HAL_GetTick>
 8028b3e:	1b00      	subs	r0, r0, r4
 8028b40:	2802      	cmp	r0, #2
 8028b42:	d9f5      	bls.n	8028b30 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8028b44:	2003      	movs	r0, #3
 8028b46:	e069      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8028b48:	4a3b      	ldr	r2, [pc, #236]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028b4a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8028b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8028b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8028b52:	e7db      	b.n	8028b0c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8028b54:	4b39      	ldr	r3, [pc, #228]	@ (8028c3c <HAL_RCC_OscConfig+0x3f4>)
 8028b56:	2200      	movs	r2, #0
 8028b58:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8028b5a:	f7ff faaf 	bl	80280bc <HAL_GetTick>
 8028b5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028b60:	4b35      	ldr	r3, [pc, #212]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028b62:	681b      	ldr	r3, [r3, #0]
 8028b64:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8028b68:	d006      	beq.n	8028b78 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028b6a:	f7ff faa7 	bl	80280bc <HAL_GetTick>
 8028b6e:	1b40      	subs	r0, r0, r5
 8028b70:	2802      	cmp	r0, #2
 8028b72:	d9f5      	bls.n	8028b60 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8028b74:	2003      	movs	r0, #3
 8028b76:	e051      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028b78:	69e3      	ldr	r3, [r4, #28]
 8028b7a:	6a22      	ldr	r2, [r4, #32]
 8028b7c:	4313      	orrs	r3, r2
 8028b7e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8028b80:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8028b84:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8028b86:	0852      	lsrs	r2, r2, #1
 8028b88:	3a01      	subs	r2, #1
 8028b8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8028b8e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8028b90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8028b94:	4a28      	ldr	r2, [pc, #160]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028b96:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8028b98:	4b28      	ldr	r3, [pc, #160]	@ (8028c3c <HAL_RCC_OscConfig+0x3f4>)
 8028b9a:	2201      	movs	r2, #1
 8028b9c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8028b9e:	f7ff fa8d 	bl	80280bc <HAL_GetTick>
 8028ba2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028ba4:	4b24      	ldr	r3, [pc, #144]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028ba6:	681b      	ldr	r3, [r3, #0]
 8028ba8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8028bac:	d106      	bne.n	8028bbc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028bae:	f7ff fa85 	bl	80280bc <HAL_GetTick>
 8028bb2:	1b00      	subs	r0, r0, r4
 8028bb4:	2802      	cmp	r0, #2
 8028bb6:	d9f5      	bls.n	8028ba4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8028bb8:	2003      	movs	r0, #3
 8028bba:	e02f      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8028bbc:	2000      	movs	r0, #0
 8028bbe:	e02d      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028bc0:	2000      	movs	r0, #0
 8028bc2:	e02b      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8028bc4:	2b01      	cmp	r3, #1
 8028bc6:	d02b      	beq.n	8028c20 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8028bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8028c38 <HAL_RCC_OscConfig+0x3f0>)
 8028bca:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028bcc:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8028bd0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8028bd2:	4291      	cmp	r1, r2
 8028bd4:	d126      	bne.n	8028c24 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8028bd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8028bda:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028bdc:	428a      	cmp	r2, r1
 8028bde:	d123      	bne.n	8028c28 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8028be0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8028be2:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8028be6:	401a      	ands	r2, r3
 8028be8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8028bec:	d11e      	bne.n	8028c2c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8028bee:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8028bf2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8028bf4:	0852      	lsrs	r2, r2, #1
 8028bf6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8028bf8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8028bfc:	d118      	bne.n	8028c30 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8028bfe:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8028c02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8028c04:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8028c08:	d114      	bne.n	8028c34 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8028c0a:	2000      	movs	r0, #0
 8028c0c:	e006      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8028c0e:	2001      	movs	r0, #1
}
 8028c10:	4770      	bx	lr
        return HAL_ERROR;
 8028c12:	2001      	movs	r0, #1
 8028c14:	e002      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8028c16:	2001      	movs	r0, #1
 8028c18:	e000      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8028c1a:	2000      	movs	r0, #0
}
 8028c1c:	b002      	add	sp, #8
 8028c1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8028c20:	2001      	movs	r0, #1
 8028c22:	e7fb      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8028c24:	2001      	movs	r0, #1
 8028c26:	e7f9      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028c28:	2001      	movs	r0, #1
 8028c2a:	e7f7      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028c2c:	2001      	movs	r0, #1
 8028c2e:	e7f5      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028c30:	2001      	movs	r0, #1
 8028c32:	e7f3      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028c34:	2001      	movs	r0, #1
 8028c36:	e7f1      	b.n	8028c1c <HAL_RCC_OscConfig+0x3d4>
 8028c38:	40023800 	.word	0x40023800
 8028c3c:	42470000 	.word	0x42470000

08028c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028c40:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028c42:	4b33      	ldr	r3, [pc, #204]	@ (8028d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8028c44:	689b      	ldr	r3, [r3, #8]
 8028c46:	f003 030c 	and.w	r3, r3, #12
 8028c4a:	2b04      	cmp	r3, #4
 8028c4c:	d05b      	beq.n	8028d06 <HAL_RCC_GetSysClockFreq+0xc6>
 8028c4e:	2b08      	cmp	r3, #8
 8028c50:	d15b      	bne.n	8028d0a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028c52:	4b2f      	ldr	r3, [pc, #188]	@ (8028d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8028c54:	685a      	ldr	r2, [r3, #4]
 8028c56:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028c5a:	685b      	ldr	r3, [r3, #4]
 8028c5c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8028c60:	d02c      	beq.n	8028cbc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028c62:	4b2b      	ldr	r3, [pc, #172]	@ (8028d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8028c64:	6858      	ldr	r0, [r3, #4]
 8028c66:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8028c6a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8028c6e:	ebbc 0c00 	subs.w	ip, ip, r0
 8028c72:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8028c76:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8028c7a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8028c7e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8028c82:	ebb1 010c 	subs.w	r1, r1, ip
 8028c86:	eb63 030e 	sbc.w	r3, r3, lr
 8028c8a:	00db      	lsls	r3, r3, #3
 8028c8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028c90:	00c9      	lsls	r1, r1, #3
 8028c92:	eb11 0c00 	adds.w	ip, r1, r0
 8028c96:	f143 0300 	adc.w	r3, r3, #0
 8028c9a:	0259      	lsls	r1, r3, #9
 8028c9c:	2300      	movs	r3, #0
 8028c9e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8028ca2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8028ca6:	f7d7 fa81 	bl	80001ac <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028caa:	4b19      	ldr	r3, [pc, #100]	@ (8028d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8028cac:	685b      	ldr	r3, [r3, #4]
 8028cae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8028cb2:	3301      	adds	r3, #1
 8028cb4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8028cb6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8028cba:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028cbc:	4b14      	ldr	r3, [pc, #80]	@ (8028d10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8028cbe:	6858      	ldr	r0, [r3, #4]
 8028cc0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8028cc4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8028cc8:	ebbc 0c00 	subs.w	ip, ip, r0
 8028ccc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8028cd0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8028cd4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8028cd8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8028cdc:	ebb1 010c 	subs.w	r1, r1, ip
 8028ce0:	eb63 030e 	sbc.w	r3, r3, lr
 8028ce4:	00db      	lsls	r3, r3, #3
 8028ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8028cea:	00c9      	lsls	r1, r1, #3
 8028cec:	eb11 0c00 	adds.w	ip, r1, r0
 8028cf0:	f143 0300 	adc.w	r3, r3, #0
 8028cf4:	0299      	lsls	r1, r3, #10
 8028cf6:	2300      	movs	r3, #0
 8028cf8:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8028cfc:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8028d00:	f7d7 fa54 	bl	80001ac <__aeabi_uldivmod>
 8028d04:	e7d1      	b.n	8028caa <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8028d06:	4803      	ldr	r0, [pc, #12]	@ (8028d14 <HAL_RCC_GetSysClockFreq+0xd4>)
 8028d08:	e7d7      	b.n	8028cba <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028d0a:	4803      	ldr	r0, [pc, #12]	@ (8028d18 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8028d0c:	e7d5      	b.n	8028cba <HAL_RCC_GetSysClockFreq+0x7a>
 8028d0e:	bf00      	nop
 8028d10:	40023800 	.word	0x40023800
 8028d14:	007a1200 	.word	0x007a1200
 8028d18:	00f42400 	.word	0x00f42400

08028d1c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8028d1c:	2800      	cmp	r0, #0
 8028d1e:	f000 809b 	beq.w	8028e58 <HAL_RCC_ClockConfig+0x13c>
{
 8028d22:	b570      	push	{r4, r5, r6, lr}
 8028d24:	460d      	mov	r5, r1
 8028d26:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028d28:	4b4f      	ldr	r3, [pc, #316]	@ (8028e68 <HAL_RCC_ClockConfig+0x14c>)
 8028d2a:	681b      	ldr	r3, [r3, #0]
 8028d2c:	f003 0307 	and.w	r3, r3, #7
 8028d30:	428b      	cmp	r3, r1
 8028d32:	d208      	bcs.n	8028d46 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028d34:	b2cb      	uxtb	r3, r1
 8028d36:	4a4c      	ldr	r2, [pc, #304]	@ (8028e68 <HAL_RCC_ClockConfig+0x14c>)
 8028d38:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028d3a:	6813      	ldr	r3, [r2, #0]
 8028d3c:	f003 0307 	and.w	r3, r3, #7
 8028d40:	428b      	cmp	r3, r1
 8028d42:	f040 808b 	bne.w	8028e5c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028d46:	6823      	ldr	r3, [r4, #0]
 8028d48:	f013 0f02 	tst.w	r3, #2
 8028d4c:	d017      	beq.n	8028d7e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028d4e:	f013 0f04 	tst.w	r3, #4
 8028d52:	d004      	beq.n	8028d5e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028d54:	4a45      	ldr	r2, [pc, #276]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028d56:	6893      	ldr	r3, [r2, #8]
 8028d58:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8028d5c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028d5e:	6823      	ldr	r3, [r4, #0]
 8028d60:	f013 0f08 	tst.w	r3, #8
 8028d64:	d004      	beq.n	8028d70 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028d66:	4a41      	ldr	r2, [pc, #260]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028d68:	6893      	ldr	r3, [r2, #8]
 8028d6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8028d6e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028d70:	4a3e      	ldr	r2, [pc, #248]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028d72:	6893      	ldr	r3, [r2, #8]
 8028d74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8028d78:	68a1      	ldr	r1, [r4, #8]
 8028d7a:	430b      	orrs	r3, r1
 8028d7c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028d7e:	6823      	ldr	r3, [r4, #0]
 8028d80:	f013 0f01 	tst.w	r3, #1
 8028d84:	d032      	beq.n	8028dec <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028d86:	6863      	ldr	r3, [r4, #4]
 8028d88:	2b01      	cmp	r3, #1
 8028d8a:	d021      	beq.n	8028dd0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028d8c:	1e9a      	subs	r2, r3, #2
 8028d8e:	2a01      	cmp	r2, #1
 8028d90:	d925      	bls.n	8028dde <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028d92:	4a36      	ldr	r2, [pc, #216]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028d94:	6812      	ldr	r2, [r2, #0]
 8028d96:	f012 0f02 	tst.w	r2, #2
 8028d9a:	d061      	beq.n	8028e60 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028d9c:	4933      	ldr	r1, [pc, #204]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028d9e:	688a      	ldr	r2, [r1, #8]
 8028da0:	f022 0203 	bic.w	r2, r2, #3
 8028da4:	4313      	orrs	r3, r2
 8028da6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8028da8:	f7ff f988 	bl	80280bc <HAL_GetTick>
 8028dac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028dae:	4b2f      	ldr	r3, [pc, #188]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028db0:	689b      	ldr	r3, [r3, #8]
 8028db2:	f003 030c 	and.w	r3, r3, #12
 8028db6:	6862      	ldr	r2, [r4, #4]
 8028db8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8028dbc:	d016      	beq.n	8028dec <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028dbe:	f7ff f97d 	bl	80280bc <HAL_GetTick>
 8028dc2:	1b80      	subs	r0, r0, r6
 8028dc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8028dc8:	4298      	cmp	r0, r3
 8028dca:	d9f0      	bls.n	8028dae <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8028dcc:	2003      	movs	r0, #3
 8028dce:	e042      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028dd0:	4a26      	ldr	r2, [pc, #152]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028dd2:	6812      	ldr	r2, [r2, #0]
 8028dd4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8028dd8:	d1e0      	bne.n	8028d9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8028dda:	2001      	movs	r0, #1
 8028ddc:	e03b      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028dde:	4a23      	ldr	r2, [pc, #140]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028de0:	6812      	ldr	r2, [r2, #0]
 8028de2:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8028de6:	d1d9      	bne.n	8028d9c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8028de8:	2001      	movs	r0, #1
 8028dea:	e034      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028dec:	4b1e      	ldr	r3, [pc, #120]	@ (8028e68 <HAL_RCC_ClockConfig+0x14c>)
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	f003 0307 	and.w	r3, r3, #7
 8028df4:	42ab      	cmp	r3, r5
 8028df6:	d907      	bls.n	8028e08 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028df8:	b2ea      	uxtb	r2, r5
 8028dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8028e68 <HAL_RCC_ClockConfig+0x14c>)
 8028dfc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	f003 0307 	and.w	r3, r3, #7
 8028e04:	42ab      	cmp	r3, r5
 8028e06:	d12d      	bne.n	8028e64 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028e08:	6823      	ldr	r3, [r4, #0]
 8028e0a:	f013 0f04 	tst.w	r3, #4
 8028e0e:	d006      	beq.n	8028e1e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028e10:	4a16      	ldr	r2, [pc, #88]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028e12:	6893      	ldr	r3, [r2, #8]
 8028e14:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8028e18:	68e1      	ldr	r1, [r4, #12]
 8028e1a:	430b      	orrs	r3, r1
 8028e1c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028e1e:	6823      	ldr	r3, [r4, #0]
 8028e20:	f013 0f08 	tst.w	r3, #8
 8028e24:	d007      	beq.n	8028e36 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028e26:	4a11      	ldr	r2, [pc, #68]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028e28:	6893      	ldr	r3, [r2, #8]
 8028e2a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8028e2e:	6921      	ldr	r1, [r4, #16]
 8028e30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8028e34:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028e36:	f7ff ff03 	bl	8028c40 <HAL_RCC_GetSysClockFreq>
 8028e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8028e6c <HAL_RCC_ClockConfig+0x150>)
 8028e3c:	689b      	ldr	r3, [r3, #8]
 8028e3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8028e42:	4a0b      	ldr	r2, [pc, #44]	@ (8028e70 <HAL_RCC_ClockConfig+0x154>)
 8028e44:	5cd3      	ldrb	r3, [r2, r3]
 8028e46:	40d8      	lsrs	r0, r3
 8028e48:	4b0a      	ldr	r3, [pc, #40]	@ (8028e74 <HAL_RCC_ClockConfig+0x158>)
 8028e4a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8028e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8028e78 <HAL_RCC_ClockConfig+0x15c>)
 8028e4e:	6818      	ldr	r0, [r3, #0]
 8028e50:	f7ff f8e8 	bl	8028024 <HAL_InitTick>
  return HAL_OK;
 8028e54:	2000      	movs	r0, #0
}
 8028e56:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8028e58:	2001      	movs	r0, #1
}
 8028e5a:	4770      	bx	lr
      return HAL_ERROR;
 8028e5c:	2001      	movs	r0, #1
 8028e5e:	e7fa      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8028e60:	2001      	movs	r0, #1
 8028e62:	e7f8      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8028e64:	2001      	movs	r0, #1
 8028e66:	e7f6      	b.n	8028e56 <HAL_RCC_ClockConfig+0x13a>
 8028e68:	40023c00 	.word	0x40023c00
 8028e6c:	40023800 	.word	0x40023800
 8028e70:	0802e060 	.word	0x0802e060
 8028e74:	20000098 	.word	0x20000098
 8028e78:	20000094 	.word	0x20000094

08028e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028e80:	b082      	sub	sp, #8
 8028e82:	4605      	mov	r5, r0
 8028e84:	4688      	mov	r8, r1
 8028e86:	4617      	mov	r7, r2
 8028e88:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028e8a:	f7ff f917 	bl	80280bc <HAL_GetTick>
 8028e8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028e90:	1a1b      	subs	r3, r3, r0
 8028e92:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8028e96:	f7ff f911 	bl	80280bc <HAL_GetTick>
 8028e9a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028e9c:	4b28      	ldr	r3, [pc, #160]	@ (8028f40 <SPI_WaitFlagStateUntilTimeout+0xc4>)
 8028e9e:	681b      	ldr	r3, [r3, #0]
 8028ea0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8028ea4:	fb09 f303 	mul.w	r3, r9, r3
 8028ea8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028eaa:	682b      	ldr	r3, [r5, #0]
 8028eac:	689c      	ldr	r4, [r3, #8]
 8028eae:	ea38 0404 	bics.w	r4, r8, r4
 8028eb2:	bf0c      	ite	eq
 8028eb4:	2301      	moveq	r3, #1
 8028eb6:	2300      	movne	r3, #0
 8028eb8:	42bb      	cmp	r3, r7
 8028eba:	d03d      	beq.n	8028f38 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028ebc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8028ec0:	d0f3      	beq.n	8028eaa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028ec2:	f7ff f8fb 	bl	80280bc <HAL_GetTick>
 8028ec6:	eba0 000a 	sub.w	r0, r0, sl
 8028eca:	4548      	cmp	r0, r9
 8028ecc:	d207      	bcs.n	8028ede <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028ece:	9a01      	ldr	r2, [sp, #4]
 8028ed0:	b102      	cbz	r2, 8028ed4 <SPI_WaitFlagStateUntilTimeout+0x58>
 8028ed2:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8028ed4:	9b01      	ldr	r3, [sp, #4]
 8028ed6:	3b01      	subs	r3, #1
 8028ed8:	9301      	str	r3, [sp, #4]
 8028eda:	4691      	mov	r9, r2
 8028edc:	e7e5      	b.n	8028eaa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028ede:	682a      	ldr	r2, [r5, #0]
 8028ee0:	6853      	ldr	r3, [r2, #4]
 8028ee2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8028ee6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028ee8:	686b      	ldr	r3, [r5, #4]
 8028eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8028eee:	d00b      	beq.n	8028f08 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028ef0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8028ef2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8028ef6:	d014      	beq.n	8028f22 <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8028ef8:	2301      	movs	r3, #1
 8028efa:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8028efe:	2300      	movs	r3, #0
 8028f00:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8028f04:	2003      	movs	r0, #3
 8028f06:	e018      	b.n	8028f3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028f08:	68ab      	ldr	r3, [r5, #8]
 8028f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8028f0e:	d002      	beq.n	8028f16 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8028f14:	d1ec      	bne.n	8028ef0 <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8028f16:	682a      	ldr	r2, [r5, #0]
 8028f18:	6813      	ldr	r3, [r2, #0]
 8028f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8028f1e:	6013      	str	r3, [r2, #0]
 8028f20:	e7e6      	b.n	8028ef0 <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 8028f22:	682a      	ldr	r2, [r5, #0]
 8028f24:	6813      	ldr	r3, [r2, #0]
 8028f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8028f2a:	6013      	str	r3, [r2, #0]
 8028f2c:	682a      	ldr	r2, [r5, #0]
 8028f2e:	6813      	ldr	r3, [r2, #0]
 8028f30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8028f34:	6013      	str	r3, [r2, #0]
 8028f36:	e7df      	b.n	8028ef8 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8028f38:	2000      	movs	r0, #0
}
 8028f3a:	b002      	add	sp, #8
 8028f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028f40:	20000098 	.word	0x20000098

08028f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028f44:	b510      	push	{r4, lr}
 8028f46:	b084      	sub	sp, #16
 8028f48:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028f4a:	4b16      	ldr	r3, [pc, #88]	@ (8028fa4 <SPI_EndRxTxTransaction+0x60>)
 8028f4c:	6818      	ldr	r0, [r3, #0]
 8028f4e:	4b16      	ldr	r3, [pc, #88]	@ (8028fa8 <SPI_EndRxTxTransaction+0x64>)
 8028f50:	fba3 3000 	umull	r3, r0, r3, r0
 8028f54:	0d40      	lsrs	r0, r0, #21
 8028f56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8028f5a:	fb03 f000 	mul.w	r0, r3, r0
 8028f5e:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028f60:	6863      	ldr	r3, [r4, #4]
 8028f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8028f66:	d00b      	beq.n	8028f80 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028f68:	9b03      	ldr	r3, [sp, #12]
 8028f6a:	b1bb      	cbz	r3, 8028f9c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8028f6c:	9b03      	ldr	r3, [sp, #12]
 8028f6e:	3b01      	subs	r3, #1
 8028f70:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028f72:	6823      	ldr	r3, [r4, #0]
 8028f74:	689b      	ldr	r3, [r3, #8]
 8028f76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8028f7a:	d1f5      	bne.n	8028f68 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8028f7c:	2000      	movs	r0, #0
 8028f7e:	e00e      	b.n	8028f9e <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028f80:	9200      	str	r2, [sp, #0]
 8028f82:	460b      	mov	r3, r1
 8028f84:	2200      	movs	r2, #0
 8028f86:	2180      	movs	r1, #128	@ 0x80
 8028f88:	4620      	mov	r0, r4
 8028f8a:	f7ff ff77 	bl	8028e7c <SPI_WaitFlagStateUntilTimeout>
 8028f8e:	b130      	cbz	r0, 8028f9e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028f90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8028f92:	f043 0320 	orr.w	r3, r3, #32
 8028f96:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8028f98:	2003      	movs	r0, #3
 8028f9a:	e000      	b.n	8028f9e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8028f9c:	2000      	movs	r0, #0
}
 8028f9e:	b004      	add	sp, #16
 8028fa0:	bd10      	pop	{r4, pc}
 8028fa2:	bf00      	nop
 8028fa4:	20000098 	.word	0x20000098
 8028fa8:	165e9f81 	.word	0x165e9f81

08028fac <HAL_SPI_Init>:
  if (hspi == NULL)
 8028fac:	2800      	cmp	r0, #0
 8028fae:	d05a      	beq.n	8029066 <HAL_SPI_Init+0xba>
{
 8028fb0:	b510      	push	{r4, lr}
 8028fb2:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8028fb4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8028fb6:	b933      	cbnz	r3, 8028fc6 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028fb8:	6843      	ldr	r3, [r0, #4]
 8028fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8028fbe:	d005      	beq.n	8028fcc <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8028fc0:	2300      	movs	r3, #0
 8028fc2:	61c3      	str	r3, [r0, #28]
 8028fc4:	e002      	b.n	8028fcc <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8028fc6:	2300      	movs	r3, #0
 8028fc8:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8028fca:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028fcc:	2300      	movs	r3, #0
 8028fce:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8028fd0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8028fd4:	2b00      	cmp	r3, #0
 8028fd6:	d040      	beq.n	802905a <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8028fd8:	2302      	movs	r3, #2
 8028fda:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8028fde:	6822      	ldr	r2, [r4, #0]
 8028fe0:	6813      	ldr	r3, [r2, #0]
 8028fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8028fe6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8028fe8:	6863      	ldr	r3, [r4, #4]
 8028fea:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8028fee:	68a2      	ldr	r2, [r4, #8]
 8028ff0:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8028ff4:	4313      	orrs	r3, r2
 8028ff6:	68e2      	ldr	r2, [r4, #12]
 8028ff8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8028ffc:	4313      	orrs	r3, r2
 8028ffe:	6922      	ldr	r2, [r4, #16]
 8029000:	f002 0202 	and.w	r2, r2, #2
 8029004:	4313      	orrs	r3, r2
 8029006:	6962      	ldr	r2, [r4, #20]
 8029008:	f002 0201 	and.w	r2, r2, #1
 802900c:	4313      	orrs	r3, r2
 802900e:	69a2      	ldr	r2, [r4, #24]
 8029010:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8029014:	4313      	orrs	r3, r2
 8029016:	69e2      	ldr	r2, [r4, #28]
 8029018:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 802901c:	4313      	orrs	r3, r2
 802901e:	6a22      	ldr	r2, [r4, #32]
 8029020:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8029024:	4313      	orrs	r3, r2
 8029026:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8029028:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 802902c:	6821      	ldr	r1, [r4, #0]
 802902e:	4313      	orrs	r3, r2
 8029030:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8029032:	8b63      	ldrh	r3, [r4, #26]
 8029034:	f003 0304 	and.w	r3, r3, #4
 8029038:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 802903a:	f002 0210 	and.w	r2, r2, #16
 802903e:	6821      	ldr	r1, [r4, #0]
 8029040:	4313      	orrs	r3, r2
 8029042:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8029044:	6822      	ldr	r2, [r4, #0]
 8029046:	69d3      	ldr	r3, [r2, #28]
 8029048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 802904c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802904e:	2000      	movs	r0, #0
 8029050:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8029052:	2301      	movs	r3, #1
 8029054:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8029058:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 802905a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 802905e:	4620      	mov	r0, r4
 8029060:	f7fe fdce 	bl	8027c00 <HAL_SPI_MspInit>
 8029064:	e7b8      	b.n	8028fd8 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8029066:	2001      	movs	r0, #1
}
 8029068:	4770      	bx	lr

0802906a <HAL_SPI_Transmit>:
{
 802906a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802906e:	b083      	sub	sp, #12
 8029070:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8029072:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8029076:	2b01      	cmp	r3, #1
 8029078:	f000 80d1 	beq.w	802921e <HAL_SPI_Transmit+0x1b4>
 802907c:	4604      	mov	r4, r0
 802907e:	4688      	mov	r8, r1
 8029080:	4691      	mov	r9, r2
 8029082:	2301      	movs	r3, #1
 8029084:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8029088:	f7ff f818 	bl	80280bc <HAL_GetTick>
 802908c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 802908e:	f894 6051 	ldrb.w	r6, [r4, #81]	@ 0x51
 8029092:	b2f6      	uxtb	r6, r6
 8029094:	2e01      	cmp	r6, #1
 8029096:	f040 80af 	bne.w	80291f8 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 802909a:	f1b8 0f00 	cmp.w	r8, #0
 802909e:	f000 80ac 	beq.w	80291fa <HAL_SPI_Transmit+0x190>
 80290a2:	f1b9 0f00 	cmp.w	r9, #0
 80290a6:	f000 80a8 	beq.w	80291fa <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80290aa:	2303      	movs	r3, #3
 80290ac:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80290b0:	2300      	movs	r3, #0
 80290b2:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80290b4:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80290b8:	f8a4 9034 	strh.w	r9, [r4, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80290bc:	f8a4 9036 	strh.w	r9, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80290c0:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80290c2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80290c4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80290c6:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80290c8:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80290ca:	68a3      	ldr	r3, [r4, #8]
 80290cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80290d0:	d01e      	beq.n	8029110 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80290d2:	6823      	ldr	r3, [r4, #0]
 80290d4:	681a      	ldr	r2, [r3, #0]
 80290d6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80290da:	d103      	bne.n	80290e4 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80290dc:	681a      	ldr	r2, [r3, #0]
 80290de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80290e2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80290e4:	68e3      	ldr	r3, [r4, #12]
 80290e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80290ea:	d01c      	beq.n	8029126 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80290ec:	6863      	ldr	r3, [r4, #4]
 80290ee:	b113      	cbz	r3, 80290f6 <HAL_SPI_Transmit+0x8c>
 80290f0:	f1b9 0f01 	cmp.w	r9, #1
 80290f4:	d152      	bne.n	802919c <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80290f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80290f8:	6823      	ldr	r3, [r4, #0]
 80290fa:	7812      	ldrb	r2, [r2, #0]
 80290fc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80290fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8029100:	3301      	adds	r3, #1
 8029102:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8029104:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8029106:	b29b      	uxth	r3, r3
 8029108:	3b01      	subs	r3, #1
 802910a:	b29b      	uxth	r3, r3
 802910c:	86e3      	strh	r3, [r4, #54]	@ 0x36
 802910e:	e045      	b.n	802919c <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8029110:	6822      	ldr	r2, [r4, #0]
 8029112:	6813      	ldr	r3, [r2, #0]
 8029114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8029118:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 802911a:	6822      	ldr	r2, [r4, #0]
 802911c:	6813      	ldr	r3, [r2, #0]
 802911e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8029122:	6013      	str	r3, [r2, #0]
 8029124:	e7d5      	b.n	80290d2 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029126:	6863      	ldr	r3, [r4, #4]
 8029128:	b113      	cbz	r3, 8029130 <HAL_SPI_Transmit+0xc6>
 802912a:	f1b9 0f01 	cmp.w	r9, #1
 802912e:	d116      	bne.n	802915e <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029130:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8029132:	6823      	ldr	r3, [r4, #0]
 8029134:	8812      	ldrh	r2, [r2, #0]
 8029136:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029138:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802913a:	3302      	adds	r3, #2
 802913c:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 802913e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8029140:	b29b      	uxth	r3, r3
 8029142:	3b01      	subs	r3, #1
 8029144:	b29b      	uxth	r3, r3
 8029146:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8029148:	e009      	b.n	802915e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802914a:	f7fe ffb7 	bl	80280bc <HAL_GetTick>
 802914e:	1bc0      	subs	r0, r0, r7
 8029150:	42a8      	cmp	r0, r5
 8029152:	d302      	bcc.n	802915a <HAL_SPI_Transmit+0xf0>
 8029154:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8029158:	d159      	bne.n	802920e <HAL_SPI_Transmit+0x1a4>
 802915a:	2d00      	cmp	r5, #0
 802915c:	d059      	beq.n	8029212 <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 802915e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8029160:	b29b      	uxth	r3, r3
 8029162:	2b00      	cmp	r3, #0
 8029164:	d033      	beq.n	80291ce <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8029166:	6823      	ldr	r3, [r4, #0]
 8029168:	689a      	ldr	r2, [r3, #8]
 802916a:	f012 0f02 	tst.w	r2, #2
 802916e:	d0ec      	beq.n	802914a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029170:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8029172:	8812      	ldrh	r2, [r2, #0]
 8029174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8029176:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8029178:	3302      	adds	r3, #2
 802917a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 802917c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 802917e:	b29b      	uxth	r3, r3
 8029180:	3b01      	subs	r3, #1
 8029182:	b29b      	uxth	r3, r3
 8029184:	86e3      	strh	r3, [r4, #54]	@ 0x36
 8029186:	e7ea      	b.n	802915e <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029188:	f7fe ff98 	bl	80280bc <HAL_GetTick>
 802918c:	1bc0      	subs	r0, r0, r7
 802918e:	42a8      	cmp	r0, r5
 8029190:	d302      	bcc.n	8029198 <HAL_SPI_Transmit+0x12e>
 8029192:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8029196:	d13e      	bne.n	8029216 <HAL_SPI_Transmit+0x1ac>
 8029198:	2d00      	cmp	r5, #0
 802919a:	d03e      	beq.n	802921a <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 802919c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 802919e:	b29b      	uxth	r3, r3
 80291a0:	b1ab      	cbz	r3, 80291ce <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80291a2:	6823      	ldr	r3, [r4, #0]
 80291a4:	689a      	ldr	r2, [r3, #8]
 80291a6:	f012 0f02 	tst.w	r2, #2
 80291aa:	d0ed      	beq.n	8029188 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80291ac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80291ae:	7812      	ldrb	r2, [r2, #0]
 80291b0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80291b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80291b4:	3301      	adds	r3, #1
 80291b6:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80291b8:	f8b4 c036 	ldrh.w	ip, [r4, #54]	@ 0x36
 80291bc:	fa1f fc8c 	uxth.w	ip, ip
 80291c0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80291c4:	fa1f fc8c 	uxth.w	ip, ip
 80291c8:	f8a4 c036 	strh.w	ip, [r4, #54]	@ 0x36
 80291cc:	e7e6      	b.n	802919c <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80291ce:	463a      	mov	r2, r7
 80291d0:	4629      	mov	r1, r5
 80291d2:	4620      	mov	r0, r4
 80291d4:	f7ff feb6 	bl	8028f44 <SPI_EndRxTxTransaction>
 80291d8:	b108      	cbz	r0, 80291de <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80291da:	2320      	movs	r3, #32
 80291dc:	6563      	str	r3, [r4, #84]	@ 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80291de:	68a3      	ldr	r3, [r4, #8]
 80291e0:	b933      	cbnz	r3, 80291f0 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80291e2:	9301      	str	r3, [sp, #4]
 80291e4:	6823      	ldr	r3, [r4, #0]
 80291e6:	68da      	ldr	r2, [r3, #12]
 80291e8:	9201      	str	r2, [sp, #4]
 80291ea:	689b      	ldr	r3, [r3, #8]
 80291ec:	9301      	str	r3, [sp, #4]
 80291ee:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80291f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80291f2:	b913      	cbnz	r3, 80291fa <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80291f4:	2600      	movs	r6, #0
 80291f6:	e000      	b.n	80291fa <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 80291f8:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 80291fa:	2301      	movs	r3, #1
 80291fc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8029200:	2300      	movs	r3, #0
 8029202:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8029206:	4630      	mov	r0, r6
 8029208:	b003      	add	sp, #12
 802920a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 802920e:	2603      	movs	r6, #3
 8029210:	e7f3      	b.n	80291fa <HAL_SPI_Transmit+0x190>
 8029212:	2603      	movs	r6, #3
 8029214:	e7f1      	b.n	80291fa <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 8029216:	2603      	movs	r6, #3
 8029218:	e7ef      	b.n	80291fa <HAL_SPI_Transmit+0x190>
 802921a:	2603      	movs	r6, #3
 802921c:	e7ed      	b.n	80291fa <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 802921e:	2602      	movs	r6, #2
 8029220:	e7f1      	b.n	8029206 <HAL_SPI_Transmit+0x19c>
	...

08029224 <HAL_SPI_Transmit_DMA>:
{
 8029224:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8029226:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 802922a:	2b01      	cmp	r3, #1
 802922c:	d061      	beq.n	80292f2 <HAL_SPI_Transmit_DMA+0xce>
 802922e:	4604      	mov	r4, r0
 8029230:	2301      	movs	r3, #1
 8029232:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8029236:	f890 5051 	ldrb.w	r5, [r0, #81]	@ 0x51
 802923a:	b2ed      	uxtb	r5, r5
 802923c:	429d      	cmp	r5, r3
 802923e:	d152      	bne.n	80292e6 <HAL_SPI_Transmit_DMA+0xc2>
  if ((pData == NULL) || (Size == 0U))
 8029240:	2900      	cmp	r1, #0
 8029242:	d051      	beq.n	80292e8 <HAL_SPI_Transmit_DMA+0xc4>
 8029244:	2a00      	cmp	r2, #0
 8029246:	d04f      	beq.n	80292e8 <HAL_SPI_Transmit_DMA+0xc4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8029248:	2303      	movs	r3, #3
 802924a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802924e:	2300      	movs	r3, #0
 8029250:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8029252:	6301      	str	r1, [r0, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8029254:	8682      	strh	r2, [r0, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8029256:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8029258:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->TxISR       = NULL;
 802925a:	6443      	str	r3, [r0, #68]	@ 0x44
  hspi->RxISR       = NULL;
 802925c:	6403      	str	r3, [r0, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 802925e:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8029260:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029262:	6883      	ldr	r3, [r0, #8]
 8029264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8029268:	d02a      	beq.n	80292c0 <HAL_SPI_Transmit_DMA+0x9c>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 802926a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802926c:	4a22      	ldr	r2, [pc, #136]	@ (80292f8 <HAL_SPI_Transmit_DMA+0xd4>)
 802926e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8029270:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8029272:	4a22      	ldr	r2, [pc, #136]	@ (80292fc <HAL_SPI_Transmit_DMA+0xd8>)
 8029274:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8029276:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8029278:	4a21      	ldr	r2, [pc, #132]	@ (8029300 <HAL_SPI_Transmit_DMA+0xdc>)
 802927a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 802927c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 802927e:	2200      	movs	r2, #0
 8029280:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8029282:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 8029284:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8029286:	b29b      	uxth	r3, r3
 8029288:	320c      	adds	r2, #12
 802928a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802928c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 802928e:	f7ff f889 	bl	80283a4 <HAL_DMA_Start_IT>
 8029292:	4601      	mov	r1, r0
 8029294:	b9f8      	cbnz	r0, 80292d6 <HAL_SPI_Transmit_DMA+0xb2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029296:	6823      	ldr	r3, [r4, #0]
 8029298:	681a      	ldr	r2, [r3, #0]
 802929a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 802929e:	d103      	bne.n	80292a8 <HAL_SPI_Transmit_DMA+0x84>
    __HAL_SPI_ENABLE(hspi);
 80292a0:	681a      	ldr	r2, [r3, #0]
 80292a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80292a6:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80292a8:	6822      	ldr	r2, [r4, #0]
 80292aa:	6853      	ldr	r3, [r2, #4]
 80292ac:	f043 0320 	orr.w	r3, r3, #32
 80292b0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80292b2:	6822      	ldr	r2, [r4, #0]
 80292b4:	6853      	ldr	r3, [r2, #4]
 80292b6:	f043 0302 	orr.w	r3, r3, #2
 80292ba:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80292bc:	460d      	mov	r5, r1
 80292be:	e013      	b.n	80292e8 <HAL_SPI_Transmit_DMA+0xc4>
    __HAL_SPI_DISABLE(hspi);
 80292c0:	6802      	ldr	r2, [r0, #0]
 80292c2:	6813      	ldr	r3, [r2, #0]
 80292c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80292c8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80292ca:	6802      	ldr	r2, [r0, #0]
 80292cc:	6813      	ldr	r3, [r2, #0]
 80292ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80292d2:	6013      	str	r3, [r2, #0]
 80292d4:	e7c9      	b.n	802926a <HAL_SPI_Transmit_DMA+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80292d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80292d8:	f043 0310 	orr.w	r3, r3, #16
 80292dc:	6563      	str	r3, [r4, #84]	@ 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80292de:	2301      	movs	r3, #1
 80292e0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    goto error;
 80292e4:	e000      	b.n	80292e8 <HAL_SPI_Transmit_DMA+0xc4>
    errorcode = HAL_BUSY;
 80292e6:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 80292e8:	2300      	movs	r3, #0
 80292ea:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80292ee:	4628      	mov	r0, r5
 80292f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hspi);
 80292f2:	2502      	movs	r5, #2
 80292f4:	e7fb      	b.n	80292ee <HAL_SPI_Transmit_DMA+0xca>
 80292f6:	bf00      	nop
 80292f8:	08029307 	.word	0x08029307
 80292fc:	08029335 	.word	0x08029335
 8029300:	08029313 	.word	0x08029313

08029304 <HAL_SPI_TxHalfCpltCallback>:
}
 8029304:	4770      	bx	lr

08029306 <SPI_DMAHalfTransmitCplt>:
{
 8029306:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8029308:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 802930a:	f7ff fffb 	bl	8029304 <HAL_SPI_TxHalfCpltCallback>
}
 802930e:	bd08      	pop	{r3, pc}

08029310 <HAL_SPI_ErrorCallback>:
}
 8029310:	4770      	bx	lr

08029312 <SPI_DMAError>:
{
 8029312:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8029314:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8029316:	6802      	ldr	r2, [r0, #0]
 8029318:	6853      	ldr	r3, [r2, #4]
 802931a:	f023 0303 	bic.w	r3, r3, #3
 802931e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8029320:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8029322:	f043 0310 	orr.w	r3, r3, #16
 8029326:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8029328:	2301      	movs	r3, #1
 802932a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 802932e:	f7ff ffef 	bl	8029310 <HAL_SPI_ErrorCallback>
}
 8029332:	bd08      	pop	{r3, pc}

08029334 <SPI_DMATransmitCplt>:
{
 8029334:	b530      	push	{r4, r5, lr}
 8029336:	b083      	sub	sp, #12
 8029338:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 802933a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  tickstart = HAL_GetTick();
 802933c:	f7fe febe 	bl	80280bc <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8029340:	682b      	ldr	r3, [r5, #0]
 8029342:	681b      	ldr	r3, [r3, #0]
 8029344:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8029348:	d123      	bne.n	8029392 <SPI_DMATransmitCplt+0x5e>
 802934a:	4602      	mov	r2, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 802934c:	6821      	ldr	r1, [r4, #0]
 802934e:	684b      	ldr	r3, [r1, #4]
 8029350:	f023 0320 	bic.w	r3, r3, #32
 8029354:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8029356:	6821      	ldr	r1, [r4, #0]
 8029358:	684b      	ldr	r3, [r1, #4]
 802935a:	f023 0302 	bic.w	r3, r3, #2
 802935e:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8029360:	2164      	movs	r1, #100	@ 0x64
 8029362:	4620      	mov	r0, r4
 8029364:	f7ff fdee 	bl	8028f44 <SPI_EndRxTxTransaction>
 8029368:	b118      	cbz	r0, 8029372 <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802936a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802936c:	f043 0320 	orr.w	r3, r3, #32
 8029370:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029372:	68a3      	ldr	r3, [r4, #8]
 8029374:	b933      	cbnz	r3, 8029384 <SPI_DMATransmitCplt+0x50>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029376:	9301      	str	r3, [sp, #4]
 8029378:	6823      	ldr	r3, [r4, #0]
 802937a:	68da      	ldr	r2, [r3, #12]
 802937c:	9201      	str	r2, [sp, #4]
 802937e:	689b      	ldr	r3, [r3, #8]
 8029380:	9301      	str	r3, [sp, #4]
 8029382:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8029384:	2300      	movs	r3, #0
 8029386:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8029388:	2301      	movs	r3, #1
 802938a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802938e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029390:	b923      	cbnz	r3, 802939c <SPI_DMATransmitCplt+0x68>
  HAL_SPI_TxCpltCallback(hspi);
 8029392:	4620      	mov	r0, r4
 8029394:	f7d6 ffa6 	bl	80002e4 <HAL_SPI_TxCpltCallback>
}
 8029398:	b003      	add	sp, #12
 802939a:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 802939c:	4620      	mov	r0, r4
 802939e:	f7ff ffb7 	bl	8029310 <HAL_SPI_ErrorCallback>
      return;
 80293a2:	e7f9      	b.n	8029398 <SPI_DMATransmitCplt+0x64>

080293a4 <HAL_SPI_IRQHandler>:
{
 80293a4:	b530      	push	{r4, r5, lr}
 80293a6:	b085      	sub	sp, #20
 80293a8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80293aa:	6802      	ldr	r2, [r0, #0]
 80293ac:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80293ae:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80293b0:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80293b4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80293b8:	d105      	bne.n	80293c6 <HAL_SPI_IRQHandler+0x22>
 80293ba:	f013 0f01 	tst.w	r3, #1
 80293be:	d002      	beq.n	80293c6 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80293c0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 80293c4:	d169      	bne.n	802949a <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80293c6:	f013 0f02 	tst.w	r3, #2
 80293ca:	d002      	beq.n	80293d2 <HAL_SPI_IRQHandler+0x2e>
 80293cc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80293d0:	d167      	bne.n	80294a2 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80293d2:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80293d6:	f013 0f20 	tst.w	r3, #32
 80293da:	d103      	bne.n	80293e4 <HAL_SPI_IRQHandler+0x40>
 80293dc:	b910      	cbnz	r0, 80293e4 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80293de:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80293e2:	d061      	beq.n	80294a8 <HAL_SPI_IRQHandler+0x104>
 80293e4:	f011 0f20 	tst.w	r1, #32
 80293e8:	d05e      	beq.n	80294a8 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80293ea:	b178      	cbz	r0, 802940c <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80293ec:	f894 0051 	ldrb.w	r0, [r4, #81]	@ 0x51
 80293f0:	b2c0      	uxtb	r0, r0
 80293f2:	2803      	cmp	r0, #3
 80293f4:	d05a      	beq.n	80294ac <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80293f6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80293f8:	f040 0004 	orr.w	r0, r0, #4
 80293fc:	6560      	str	r0, [r4, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80293fe:	2000      	movs	r0, #0
 8029400:	9000      	str	r0, [sp, #0]
 8029402:	68d0      	ldr	r0, [r2, #12]
 8029404:	9000      	str	r0, [sp, #0]
 8029406:	6890      	ldr	r0, [r2, #8]
 8029408:	9000      	str	r0, [sp, #0]
 802940a:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 802940c:	b165      	cbz	r5, 8029428 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802940e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8029410:	f040 0001 	orr.w	r0, r0, #1
 8029414:	6560      	str	r0, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8029416:	2000      	movs	r0, #0
 8029418:	9002      	str	r0, [sp, #8]
 802941a:	6890      	ldr	r0, [r2, #8]
 802941c:	9002      	str	r0, [sp, #8]
 802941e:	6810      	ldr	r0, [r2, #0]
 8029420:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8029424:	6010      	str	r0, [r2, #0]
 8029426:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8029428:	f413 7f80 	tst.w	r3, #256	@ 0x100
 802942c:	d009      	beq.n	8029442 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 802942e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029430:	f043 0308 	orr.w	r3, r3, #8
 8029434:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8029436:	2300      	movs	r3, #0
 8029438:	9303      	str	r3, [sp, #12]
 802943a:	6823      	ldr	r3, [r4, #0]
 802943c:	689b      	ldr	r3, [r3, #8]
 802943e:	9303      	str	r3, [sp, #12]
 8029440:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8029442:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029444:	2b00      	cmp	r3, #0
 8029446:	d02f      	beq.n	80294a8 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8029448:	6822      	ldr	r2, [r4, #0]
 802944a:	6853      	ldr	r3, [r2, #4]
 802944c:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8029450:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8029452:	2301      	movs	r3, #1
 8029454:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8029458:	f011 0f03 	tst.w	r1, #3
 802945c:	d02e      	beq.n	80294bc <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 802945e:	6822      	ldr	r2, [r4, #0]
 8029460:	6853      	ldr	r3, [r2, #4]
 8029462:	f023 0303 	bic.w	r3, r3, #3
 8029466:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8029468:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802946a:	b14b      	cbz	r3, 8029480 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 802946c:	4a15      	ldr	r2, [pc, #84]	@ (80294c4 <HAL_SPI_IRQHandler+0x120>)
 802946e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8029470:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8029472:	f7fe ffcc 	bl	802840e <HAL_DMA_Abort_IT>
 8029476:	b118      	cbz	r0, 8029480 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8029478:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802947a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802947e:	6563      	str	r3, [r4, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8029480:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8029482:	b18b      	cbz	r3, 80294a8 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8029484:	4a0f      	ldr	r2, [pc, #60]	@ (80294c4 <HAL_SPI_IRQHandler+0x120>)
 8029486:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8029488:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 802948a:	f7fe ffc0 	bl	802840e <HAL_DMA_Abort_IT>
 802948e:	b158      	cbz	r0, 80294a8 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8029490:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8029492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029496:	6563      	str	r3, [r4, #84]	@ 0x54
 8029498:	e006      	b.n	80294a8 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 802949a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802949c:	4620      	mov	r0, r4
 802949e:	4798      	blx	r3
    return;
 80294a0:	e002      	b.n	80294a8 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 80294a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80294a4:	4620      	mov	r0, r4
 80294a6:	4798      	blx	r3
}
 80294a8:	b005      	add	sp, #20
 80294aa:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80294ac:	2300      	movs	r3, #0
 80294ae:	9301      	str	r3, [sp, #4]
 80294b0:	68d3      	ldr	r3, [r2, #12]
 80294b2:	9301      	str	r3, [sp, #4]
 80294b4:	6893      	ldr	r3, [r2, #8]
 80294b6:	9301      	str	r3, [sp, #4]
 80294b8:	9b01      	ldr	r3, [sp, #4]
        return;
 80294ba:	e7f5      	b.n	80294a8 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 80294bc:	4620      	mov	r0, r4
 80294be:	f7ff ff27 	bl	8029310 <HAL_SPI_ErrorCallback>
    return;
 80294c2:	e7f1      	b.n	80294a8 <HAL_SPI_IRQHandler+0x104>
 80294c4:	080294c9 	.word	0x080294c9

080294c8 <SPI_DMAAbortOnError>:
{
 80294c8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80294ca:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hspi->RxXferCount = 0U;
 80294cc:	2300      	movs	r3, #0
 80294ce:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80294d0:	86c3      	strh	r3, [r0, #54]	@ 0x36
  HAL_SPI_ErrorCallback(hspi);
 80294d2:	f7ff ff1d 	bl	8029310 <HAL_SPI_ErrorCallback>
}
 80294d6:	bd08      	pop	{r3, pc}

080294d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80294d8:	e7fe      	b.n	80294d8 <NMI_Handler>

080294da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80294da:	e7fe      	b.n	80294da <HardFault_Handler>

080294dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80294dc:	e7fe      	b.n	80294dc <MemManage_Handler>

080294de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80294de:	e7fe      	b.n	80294de <BusFault_Handler>

080294e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80294e0:	e7fe      	b.n	80294e0 <UsageFault_Handler>

080294e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80294e2:	4770      	bx	lr

080294e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80294e4:	4770      	bx	lr

080294e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80294e6:	4770      	bx	lr

080294e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80294e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  lv_tick_inc(1); 
 80294ea:	2001      	movs	r0, #1
 80294ec:	f7e9 ff32 	bl	8013354 <lv_tick_inc>
  /* USER CODE END SysTick_IRQn 0 */
  

  HAL_IncTick();
 80294f0:	f7fe fdd8 	bl	80280a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80294f4:	bd08      	pop	{r3, pc}
	...

080294f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80294f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80294fa:	4802      	ldr	r0, [pc, #8]	@ (8029504 <SPI1_IRQHandler+0xc>)
 80294fc:	f7ff ff52 	bl	80293a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8029500:	bd08      	pop	{r3, pc}
 8029502:	bf00      	nop
 8029504:	200089f0 	.word	0x200089f0

08029508 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8029508:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 802950a:	4802      	ldr	r0, [pc, #8]	@ (8029514 <DMA2_Stream3_IRQHandler+0xc>)
 802950c:	f7fe ff92 	bl	8028434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8029510:	bd08      	pop	{r3, pc}
 8029512:	bf00      	nop
 8029514:	20008990 	.word	0x20008990

08029518 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8029518:	4a03      	ldr	r2, [pc, #12]	@ (8029528 <SystemInit+0x10>)
 802951a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 802951e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8029522:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8029526:	4770      	bx	lr
 8029528:	e000ed00 	.word	0xe000ed00

0802952c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802952c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8029564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8029530:	480d      	ldr	r0, [pc, #52]	@ (8029568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8029532:	490e      	ldr	r1, [pc, #56]	@ (802956c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8029534:	4a0e      	ldr	r2, [pc, #56]	@ (8029570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8029536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8029538:	e002      	b.n	8029540 <LoopCopyDataInit>

0802953a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802953a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802953c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802953e:	3304      	adds	r3, #4

08029540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8029540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8029542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8029544:	d3f9      	bcc.n	802953a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8029546:	4a0b      	ldr	r2, [pc, #44]	@ (8029574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8029548:	4c0b      	ldr	r4, [pc, #44]	@ (8029578 <LoopFillZerobss+0x26>)
  movs r3, #0
 802954a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802954c:	e001      	b.n	8029552 <LoopFillZerobss>

0802954e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802954e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8029550:	3204      	adds	r2, #4

08029552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8029552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8029554:	d3fb      	bcc.n	802954e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8029556:	f7ff ffdf 	bl	8029518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802955a:	f000 f819 	bl	8029590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802955e:	f7fe faf5 	bl	8027b4c <main>
  bx  lr    
 8029562:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8029564:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8029568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802956c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8029570:	0802e080 	.word	0x0802e080
  ldr r2, =_sbss
 8029574:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8029578:	20008a4c 	.word	0x20008a4c

0802957c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802957c:	e7fe      	b.n	802957c <ADC_IRQHandler>

0802957e <memset>:
 802957e:	4402      	add	r2, r0
 8029580:	4603      	mov	r3, r0
 8029582:	4293      	cmp	r3, r2
 8029584:	d100      	bne.n	8029588 <memset+0xa>
 8029586:	4770      	bx	lr
 8029588:	f803 1b01 	strb.w	r1, [r3], #1
 802958c:	e7f9      	b.n	8029582 <memset+0x4>
	...

08029590 <__libc_init_array>:
 8029590:	b570      	push	{r4, r5, r6, lr}
 8029592:	4d0d      	ldr	r5, [pc, #52]	@ (80295c8 <__libc_init_array+0x38>)
 8029594:	4c0d      	ldr	r4, [pc, #52]	@ (80295cc <__libc_init_array+0x3c>)
 8029596:	1b64      	subs	r4, r4, r5
 8029598:	10a4      	asrs	r4, r4, #2
 802959a:	2600      	movs	r6, #0
 802959c:	42a6      	cmp	r6, r4
 802959e:	d109      	bne.n	80295b4 <__libc_init_array+0x24>
 80295a0:	4d0b      	ldr	r5, [pc, #44]	@ (80295d0 <__libc_init_array+0x40>)
 80295a2:	4c0c      	ldr	r4, [pc, #48]	@ (80295d4 <__libc_init_array+0x44>)
 80295a4:	f000 f97e 	bl	80298a4 <_init>
 80295a8:	1b64      	subs	r4, r4, r5
 80295aa:	10a4      	asrs	r4, r4, #2
 80295ac:	2600      	movs	r6, #0
 80295ae:	42a6      	cmp	r6, r4
 80295b0:	d105      	bne.n	80295be <__libc_init_array+0x2e>
 80295b2:	bd70      	pop	{r4, r5, r6, pc}
 80295b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80295b8:	4798      	blx	r3
 80295ba:	3601      	adds	r6, #1
 80295bc:	e7ee      	b.n	802959c <__libc_init_array+0xc>
 80295be:	f855 3b04 	ldr.w	r3, [r5], #4
 80295c2:	4798      	blx	r3
 80295c4:	3601      	adds	r6, #1
 80295c6:	e7f2      	b.n	80295ae <__libc_init_array+0x1e>
 80295c8:	0802e078 	.word	0x0802e078
 80295cc:	0802e078 	.word	0x0802e078
 80295d0:	0802e078 	.word	0x0802e078
 80295d4:	0802e07c 	.word	0x0802e07c

080295d8 <strcpy>:
 80295d8:	4603      	mov	r3, r0
 80295da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80295de:	f803 2b01 	strb.w	r2, [r3], #1
 80295e2:	2a00      	cmp	r2, #0
 80295e4:	d1f9      	bne.n	80295da <strcpy+0x2>
 80295e6:	4770      	bx	lr

080295e8 <__udivmoddi4>:
 80295e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80295ec:	9d08      	ldr	r5, [sp, #32]
 80295ee:	460e      	mov	r6, r1
 80295f0:	4604      	mov	r4, r0
 80295f2:	460f      	mov	r7, r1
 80295f4:	2b00      	cmp	r3, #0
 80295f6:	d14a      	bne.n	802968e <__udivmoddi4+0xa6>
 80295f8:	4694      	mov	ip, r2
 80295fa:	458c      	cmp	ip, r1
 80295fc:	fab2 f282 	clz	r2, r2
 8029600:	d960      	bls.n	80296c4 <__udivmoddi4+0xdc>
 8029602:	b142      	cbz	r2, 8029616 <__udivmoddi4+0x2e>
 8029604:	f1c2 0320 	rsb	r3, r2, #32
 8029608:	4097      	lsls	r7, r2
 802960a:	fa20 f303 	lsr.w	r3, r0, r3
 802960e:	fa0c fc02 	lsl.w	ip, ip, r2
 8029612:	431f      	orrs	r7, r3
 8029614:	4094      	lsls	r4, r2
 8029616:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 802961a:	fa1f f68c 	uxth.w	r6, ip
 802961e:	fbb7 f1fe 	udiv	r1, r7, lr
 8029622:	0c23      	lsrs	r3, r4, #16
 8029624:	fb0e 7711 	mls	r7, lr, r1, r7
 8029628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802962c:	fb01 f006 	mul.w	r0, r1, r6
 8029630:	4298      	cmp	r0, r3
 8029632:	d90a      	bls.n	802964a <__udivmoddi4+0x62>
 8029634:	eb1c 0303 	adds.w	r3, ip, r3
 8029638:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 802963c:	f080 8115 	bcs.w	802986a <__udivmoddi4+0x282>
 8029640:	4298      	cmp	r0, r3
 8029642:	f240 8112 	bls.w	802986a <__udivmoddi4+0x282>
 8029646:	3902      	subs	r1, #2
 8029648:	4463      	add	r3, ip
 802964a:	1a1b      	subs	r3, r3, r0
 802964c:	b2a4      	uxth	r4, r4
 802964e:	fbb3 f0fe 	udiv	r0, r3, lr
 8029652:	fb0e 3310 	mls	r3, lr, r0, r3
 8029656:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 802965a:	fb00 f606 	mul.w	r6, r0, r6
 802965e:	42a6      	cmp	r6, r4
 8029660:	d90a      	bls.n	8029678 <__udivmoddi4+0x90>
 8029662:	eb1c 0404 	adds.w	r4, ip, r4
 8029666:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802966a:	f080 8100 	bcs.w	802986e <__udivmoddi4+0x286>
 802966e:	42a6      	cmp	r6, r4
 8029670:	f240 80fd 	bls.w	802986e <__udivmoddi4+0x286>
 8029674:	4464      	add	r4, ip
 8029676:	3802      	subs	r0, #2
 8029678:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 802967c:	1ba4      	subs	r4, r4, r6
 802967e:	2100      	movs	r1, #0
 8029680:	b11d      	cbz	r5, 802968a <__udivmoddi4+0xa2>
 8029682:	40d4      	lsrs	r4, r2
 8029684:	2300      	movs	r3, #0
 8029686:	e9c5 4300 	strd	r4, r3, [r5]
 802968a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802968e:	428b      	cmp	r3, r1
 8029690:	d905      	bls.n	802969e <__udivmoddi4+0xb6>
 8029692:	b10d      	cbz	r5, 8029698 <__udivmoddi4+0xb0>
 8029694:	e9c5 0100 	strd	r0, r1, [r5]
 8029698:	2100      	movs	r1, #0
 802969a:	4608      	mov	r0, r1
 802969c:	e7f5      	b.n	802968a <__udivmoddi4+0xa2>
 802969e:	fab3 f183 	clz	r1, r3
 80296a2:	2900      	cmp	r1, #0
 80296a4:	d146      	bne.n	8029734 <__udivmoddi4+0x14c>
 80296a6:	42b3      	cmp	r3, r6
 80296a8:	d302      	bcc.n	80296b0 <__udivmoddi4+0xc8>
 80296aa:	4282      	cmp	r2, r0
 80296ac:	f200 80f5 	bhi.w	802989a <__udivmoddi4+0x2b2>
 80296b0:	1a84      	subs	r4, r0, r2
 80296b2:	eb66 0203 	sbc.w	r2, r6, r3
 80296b6:	2001      	movs	r0, #1
 80296b8:	4617      	mov	r7, r2
 80296ba:	2d00      	cmp	r5, #0
 80296bc:	d0e5      	beq.n	802968a <__udivmoddi4+0xa2>
 80296be:	e9c5 4700 	strd	r4, r7, [r5]
 80296c2:	e7e2      	b.n	802968a <__udivmoddi4+0xa2>
 80296c4:	2a00      	cmp	r2, #0
 80296c6:	f040 8093 	bne.w	80297f0 <__udivmoddi4+0x208>
 80296ca:	eba1 030c 	sub.w	r3, r1, ip
 80296ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80296d2:	fa1f fe8c 	uxth.w	lr, ip
 80296d6:	2101      	movs	r1, #1
 80296d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80296dc:	fb07 3016 	mls	r0, r7, r6, r3
 80296e0:	0c23      	lsrs	r3, r4, #16
 80296e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80296e6:	fb0e f006 	mul.w	r0, lr, r6
 80296ea:	4298      	cmp	r0, r3
 80296ec:	d908      	bls.n	8029700 <__udivmoddi4+0x118>
 80296ee:	eb1c 0303 	adds.w	r3, ip, r3
 80296f2:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80296f6:	d202      	bcs.n	80296fe <__udivmoddi4+0x116>
 80296f8:	4298      	cmp	r0, r3
 80296fa:	f200 80d0 	bhi.w	802989e <__udivmoddi4+0x2b6>
 80296fe:	4646      	mov	r6, r8
 8029700:	1a1b      	subs	r3, r3, r0
 8029702:	b2a4      	uxth	r4, r4
 8029704:	fbb3 f0f7 	udiv	r0, r3, r7
 8029708:	fb07 3310 	mls	r3, r7, r0, r3
 802970c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8029710:	fb0e fe00 	mul.w	lr, lr, r0
 8029714:	45a6      	cmp	lr, r4
 8029716:	d908      	bls.n	802972a <__udivmoddi4+0x142>
 8029718:	eb1c 0404 	adds.w	r4, ip, r4
 802971c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8029720:	d202      	bcs.n	8029728 <__udivmoddi4+0x140>
 8029722:	45a6      	cmp	lr, r4
 8029724:	f200 80b6 	bhi.w	8029894 <__udivmoddi4+0x2ac>
 8029728:	4618      	mov	r0, r3
 802972a:	eba4 040e 	sub.w	r4, r4, lr
 802972e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8029732:	e7a5      	b.n	8029680 <__udivmoddi4+0x98>
 8029734:	f1c1 0720 	rsb	r7, r1, #32
 8029738:	408b      	lsls	r3, r1
 802973a:	fa22 fc07 	lsr.w	ip, r2, r7
 802973e:	ea4c 0c03 	orr.w	ip, ip, r3
 8029742:	fa06 fe01 	lsl.w	lr, r6, r1
 8029746:	fa20 f407 	lsr.w	r4, r0, r7
 802974a:	fa26 f307 	lsr.w	r3, r6, r7
 802974e:	ea44 040e 	orr.w	r4, r4, lr
 8029752:	fa00 f801 	lsl.w	r8, r0, r1
 8029756:	ea4f 401c 	mov.w	r0, ip, lsr #16
 802975a:	ea4f 4914 	mov.w	r9, r4, lsr #16
 802975e:	fbb3 fef0 	udiv	lr, r3, r0
 8029762:	fa1f f68c 	uxth.w	r6, ip
 8029766:	fb00 331e 	mls	r3, r0, lr, r3
 802976a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 802976e:	fb0e f906 	mul.w	r9, lr, r6
 8029772:	4599      	cmp	r9, r3
 8029774:	fa02 f201 	lsl.w	r2, r2, r1
 8029778:	d90b      	bls.n	8029792 <__udivmoddi4+0x1aa>
 802977a:	eb1c 0303 	adds.w	r3, ip, r3
 802977e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8029782:	f080 8085 	bcs.w	8029890 <__udivmoddi4+0x2a8>
 8029786:	4599      	cmp	r9, r3
 8029788:	f240 8082 	bls.w	8029890 <__udivmoddi4+0x2a8>
 802978c:	f1ae 0e02 	sub.w	lr, lr, #2
 8029790:	4463      	add	r3, ip
 8029792:	eba3 0909 	sub.w	r9, r3, r9
 8029796:	b2a4      	uxth	r4, r4
 8029798:	fbb9 f3f0 	udiv	r3, r9, r0
 802979c:	fb00 9913 	mls	r9, r0, r3, r9
 80297a0:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80297a4:	fb03 f606 	mul.w	r6, r3, r6
 80297a8:	42a6      	cmp	r6, r4
 80297aa:	d908      	bls.n	80297be <__udivmoddi4+0x1d6>
 80297ac:	eb1c 0404 	adds.w	r4, ip, r4
 80297b0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80297b4:	d268      	bcs.n	8029888 <__udivmoddi4+0x2a0>
 80297b6:	42a6      	cmp	r6, r4
 80297b8:	d966      	bls.n	8029888 <__udivmoddi4+0x2a0>
 80297ba:	3b02      	subs	r3, #2
 80297bc:	4464      	add	r4, ip
 80297be:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80297c2:	1ba4      	subs	r4, r4, r6
 80297c4:	fba0 e602 	umull	lr, r6, r0, r2
 80297c8:	42b4      	cmp	r4, r6
 80297ca:	4673      	mov	r3, lr
 80297cc:	46b1      	mov	r9, r6
 80297ce:	d352      	bcc.n	8029876 <__udivmoddi4+0x28e>
 80297d0:	d04f      	beq.n	8029872 <__udivmoddi4+0x28a>
 80297d2:	b15d      	cbz	r5, 80297ec <__udivmoddi4+0x204>
 80297d4:	ebb8 0203 	subs.w	r2, r8, r3
 80297d8:	eb64 0409 	sbc.w	r4, r4, r9
 80297dc:	fa04 f707 	lsl.w	r7, r4, r7
 80297e0:	fa22 f301 	lsr.w	r3, r2, r1
 80297e4:	431f      	orrs	r7, r3
 80297e6:	40cc      	lsrs	r4, r1
 80297e8:	e9c5 7400 	strd	r7, r4, [r5]
 80297ec:	2100      	movs	r1, #0
 80297ee:	e74c      	b.n	802968a <__udivmoddi4+0xa2>
 80297f0:	f1c2 0120 	rsb	r1, r2, #32
 80297f4:	fa20 f301 	lsr.w	r3, r0, r1
 80297f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80297fc:	fa26 f101 	lsr.w	r1, r6, r1
 8029800:	4096      	lsls	r6, r2
 8029802:	4333      	orrs	r3, r6
 8029804:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8029808:	fa1f fe8c 	uxth.w	lr, ip
 802980c:	fbb1 f0f7 	udiv	r0, r1, r7
 8029810:	fb07 1610 	mls	r6, r7, r0, r1
 8029814:	0c19      	lsrs	r1, r3, #16
 8029816:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 802981a:	fb00 f60e 	mul.w	r6, r0, lr
 802981e:	428e      	cmp	r6, r1
 8029820:	fa04 f402 	lsl.w	r4, r4, r2
 8029824:	d908      	bls.n	8029838 <__udivmoddi4+0x250>
 8029826:	eb1c 0101 	adds.w	r1, ip, r1
 802982a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 802982e:	d22d      	bcs.n	802988c <__udivmoddi4+0x2a4>
 8029830:	428e      	cmp	r6, r1
 8029832:	d92b      	bls.n	802988c <__udivmoddi4+0x2a4>
 8029834:	3802      	subs	r0, #2
 8029836:	4461      	add	r1, ip
 8029838:	1b89      	subs	r1, r1, r6
 802983a:	b29b      	uxth	r3, r3
 802983c:	fbb1 f6f7 	udiv	r6, r1, r7
 8029840:	fb07 1116 	mls	r1, r7, r6, r1
 8029844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8029848:	fb06 f10e 	mul.w	r1, r6, lr
 802984c:	4299      	cmp	r1, r3
 802984e:	d908      	bls.n	8029862 <__udivmoddi4+0x27a>
 8029850:	eb1c 0303 	adds.w	r3, ip, r3
 8029854:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 8029858:	d214      	bcs.n	8029884 <__udivmoddi4+0x29c>
 802985a:	4299      	cmp	r1, r3
 802985c:	d912      	bls.n	8029884 <__udivmoddi4+0x29c>
 802985e:	3e02      	subs	r6, #2
 8029860:	4463      	add	r3, ip
 8029862:	1a5b      	subs	r3, r3, r1
 8029864:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8029868:	e736      	b.n	80296d8 <__udivmoddi4+0xf0>
 802986a:	4639      	mov	r1, r7
 802986c:	e6ed      	b.n	802964a <__udivmoddi4+0x62>
 802986e:	4618      	mov	r0, r3
 8029870:	e702      	b.n	8029678 <__udivmoddi4+0x90>
 8029872:	45f0      	cmp	r8, lr
 8029874:	d2ad      	bcs.n	80297d2 <__udivmoddi4+0x1ea>
 8029876:	ebbe 0302 	subs.w	r3, lr, r2
 802987a:	eb66 060c 	sbc.w	r6, r6, ip
 802987e:	3801      	subs	r0, #1
 8029880:	46b1      	mov	r9, r6
 8029882:	e7a6      	b.n	80297d2 <__udivmoddi4+0x1ea>
 8029884:	4646      	mov	r6, r8
 8029886:	e7ec      	b.n	8029862 <__udivmoddi4+0x27a>
 8029888:	4603      	mov	r3, r0
 802988a:	e798      	b.n	80297be <__udivmoddi4+0x1d6>
 802988c:	4640      	mov	r0, r8
 802988e:	e7d3      	b.n	8029838 <__udivmoddi4+0x250>
 8029890:	46d6      	mov	lr, sl
 8029892:	e77e      	b.n	8029792 <__udivmoddi4+0x1aa>
 8029894:	4464      	add	r4, ip
 8029896:	3802      	subs	r0, #2
 8029898:	e747      	b.n	802972a <__udivmoddi4+0x142>
 802989a:	4608      	mov	r0, r1
 802989c:	e70d      	b.n	80296ba <__udivmoddi4+0xd2>
 802989e:	3e02      	subs	r6, #2
 80298a0:	4463      	add	r3, ip
 80298a2:	e72d      	b.n	8029700 <__udivmoddi4+0x118>

080298a4 <_init>:
 80298a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298a6:	bf00      	nop
 80298a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298aa:	bc08      	pop	{r3}
 80298ac:	469e      	mov	lr, r3
 80298ae:	4770      	bx	lr

080298b0 <_fini>:
 80298b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80298b2:	bf00      	nop
 80298b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80298b6:	bc08      	pop	{r3}
 80298b8:	469e      	mov	lr, r3
 80298ba:	4770      	bx	lr
